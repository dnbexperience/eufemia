{"version":3,"file":"024239d8241f9ef286ad14ce6a9da31a3aeaab17-4a5d081d5aa3f94bc9c6.js","mappings":"ySAOA,MAAMA,EAAa,IACdC,EAAAA,EACHC,EAAIC,IAAUC,EAAAA,EAAAA,KAAA,WAAUD,KAGpBE,GAAcC,EAAAA,EAAAA,GAAOC,EAAAA,GAAK,CAAAC,OAAA,aAAZF,CAAa,CAAAG,KAAA,UAAAC,OAAA,4BAM3BC,EACE,CACJC,QAAS,6BACTC,UAAW,6BACXC,OAAQ,yBAJNH,EAMG,CACLC,QAAS,6BACTG,UAAW,wBACXD,OAAQ,yBAICE,EAAgBC,IAWtB,IAXuB,QAC5BC,EAAO,cACPC,EAAa,SACbC,EAAQ,MACRC,EAAQ,CAAC,KACNC,GAMJL,EAIC,GAHIE,IACFE,EAAME,eAAiB,gBAED,iBAAbH,EACT,OAAQF,GACN,IAAK,OACH,MAEF,IAAK,OACHG,EAAMG,MAAQC,EAASL,GACnBT,EAAYG,OAwIf,CACL,UACA,OACA,QACA,SACA,SACA,SACA,UACAY,SAGJ,SAA0BC,GACxB,OAAIA,EAAKC,SAAS,MACTD,EAAKE,MAAM,GAAI,GACbF,EAAKG,WAAW,WAAaH,EAAKC,SAAS,KAC7CD,EAAKE,MAAM,GAAI,GAEjBF,CACT,CAVaI,CA/IWX,IACZT,EAAYE,UACZF,EAAYC,QAChBS,EAAMW,WAAa,OACnBX,EAAMY,UAAY,OAClB,MAEF,IAAK,QACHZ,EAAMG,MAAQC,EAASL,GACnBT,EAAaG,OACA,cAAbM,GAAyC,SAAbA,EAC5BT,EAAaI,UACbJ,EAAaC,QACjBS,EAAMW,WAAa,OACnBX,EAAMY,UAAY,OAKxB,OAAOjC,EAAWkC,KAAK,CAAEd,WAAUC,WAAUC,GAAO,EAGvC,SAASa,EAAeC,GAYnC,IAZoC,MACtCjC,EAAK,UACLkC,EAAY,SAAQ,UACpBC,EAAS,KACTC,EAAI,iBACJC,GAAmB,GAOpBJ,EACC,MAAMK,EAAOC,OAAOD,KAAKtC,GAAS,CAAC,GAC7BwC,EAAYD,OAAOE,QAAQzC,GAAS,CAAC,GAAG0C,KAAIC,IAAmB,IAAjBC,EAAK5C,GAAM2C,EAC7D,IAAK3C,EACH,OAAO,KAET,MAAM,KAAEwB,EAAI,aAAEqB,EAAY,IAAEC,EAAG,OAAEC,GAAW/C,EAC5C,OAAIoC,GAAQA,EAAKb,SAASqB,GACjB,MAIPI,EAAAA,EAAAA,MAACC,EAAAA,EAAE,CAAAhC,SAAA,EACDhB,EAAAA,EAAAA,KAACiD,EAAAA,EAAE,CAAAjC,UACDhB,EAAAA,EAAAA,KAACY,EAAa,CACZE,QAAQ,OACRC,cAA0B,eAAX+B,EAAwB9B,SAEtCkC,EAAWhB,GAAYiB,EAAAA,EAAAA,IAAYR,GAAOA,QAG/C3C,EAAAA,EAAAA,KAACiD,EAAAA,EAAE,CAAAjC,UACCoC,MAAMC,QAAQ9B,GAAQA,EAAO,CAACA,IAC7BkB,KAAKa,IACJ,GAAiB,iBAANA,EAAgB,CACzB,GAAIC,OAAOD,GAAGhC,SAAS,eAAgB,CACrC,GAAI8B,MAAMC,QAAQpB,GAChB,OAAOA,EACJQ,KAAI,CAACa,EAAGE,KAELxD,EAAAA,EAAAA,KAACY,EAAa,CAAaE,QAAQ,OAAME,SACtCsC,GADiBA,EAAIE,KAK3BC,QAAO,CAACC,EAAMC,KACbZ,EAAAA,EAAAA,MAAAa,EAAAA,SAAA,CAAA5C,SAAA,CACG0C,EAAK,KAAC1D,EAAAA,EAAAA,KAAA,SAAM,IAAE2D,OAKvBL,EAAIrB,CACN,CAEA,OACEjC,EAAAA,EAAAA,KAACY,EAAa,CAASE,QAAQ,OAAME,SAClCsC,GADiBA,EAIxB,KAEDG,QAAO,CAACC,EAAMC,KACbZ,EAAAA,EAAAA,MAAAa,EAAAA,SAAA,CAAA5C,SAAA,CACG0C,EAAK,KAAC1D,EAAAA,EAAAA,KAAA,SAAM,IAAE2D,SAItBvB,IACCpC,EAAAA,EAAAA,KAACiD,EAAAA,EAAE,CAAAjC,SACA4B,GACC5C,EAAAA,EAAAA,KAACY,EAAa,CAACE,QAAQ,QAAOE,SAAE4B,IAErB,aAAXE,GAAyB,cAI/BC,EAAAA,EAAAA,MAACE,EAAAA,EAAE,CAAAjC,SAAA,GACEoB,GAA+B,eAAXU,KACrBC,EAAAA,EAAAA,MAAA,MAAA/B,SAAA,CAAI,IAAE8B,EAAO,SAEf9C,EAAAA,EAAAA,KAAC6D,EAAAA,EAAa,CAACjE,WAAYA,EAAWoB,SACnCkB,EAAY4B,EAAmBjB,EAAKR,GAAQQ,SA5D1CF,EA+DJ,IAIT,OACE3C,EAAAA,EAAAA,KAACG,EAAAA,GAAAA,WAAgB,CAAAa,UACf+B,EAAAA,EAAAA,MAAC9C,EAAW,CAAAe,SAAA,EACVhB,EAAAA,EAAAA,KAAA,SAAAgB,UACE+B,EAAAA,EAAAA,MAACC,EAAAA,EAAE,CAAAhC,SAAA,EACDhB,EAAAA,EAAAA,KAAC+D,EAAAA,EAAE,CAAA/C,SAAC,cACJhB,EAAAA,EAAAA,KAAC+D,EAAAA,EAAE,CAAA/C,SAAC,SACHoB,IAAoBpC,EAAAA,EAAAA,KAAC+D,EAAAA,EAAE,CAAA/C,SAAC,mBACzBhB,EAAAA,EAAAA,KAAC+D,EAAAA,EAAE,CAAA/C,SAAC,sBAGRhB,EAAAA,EAAAA,KAAA,SAAAgB,SAAQuB,QAIhB,CAEA,SAASlB,EAAS2C,GAChB,MAAO,CAAC,IAAK,IAAK,KAAK1C,SAAS0C,EAAIC,UAAU,EAAG,GACnD,CAwBA,SAASH,EAAmBjB,EAAaR,GAIvC,OAHAA,EAAK6B,SAASvB,IACZE,EAAMA,EAAIsB,QAAQ,IAAIC,OAAOzB,EAAK,MAAMQ,EAAAA,EAAAA,IAAYR,GAAK,IAEpDE,CACT,CAEO,SAASK,EAAW7C,GACzB,OAAIA,EAAKiB,SAAS,MACTtB,EAAAA,EAAAA,KAAC6D,EAAAA,EAAa,CAACjE,WAAYA,EAAWoB,SAAEX,IAG1CA,CACT,C,kFC3NA,MAAMgE,EAAiB,IAAKC,EAAAA,KAAiBC,EAAAA,IACvC,SAAEvD,KAAawD,GAAkCH,EAE1CI,EAA6C,CACxDC,MAAO,CACL7B,IAAK,2DACLtB,KAAM,CAAC,0BACPuB,OAAQ,YAEV9B,SAAU,CACR6B,IAAK,0BACLtB,KAAM,kBACNuB,OAAQ,YAEV6B,OAAQ,CACN9B,IAAK,iNACLtB,KAAM,yBACNuB,OAAQ,YAEVhC,QAAS,CACP+B,IAAK,8HACLtB,KAAM,CAAC,KAAM,KAAM,QACnBuB,OAAQ,YAEV8B,SAAU,CACR/B,IAAK,oNACLtB,KAAM,CACJ,IACA,IACA,IACA,IACA,IACA,SACA,OACA,SACA,WACA,aAEFuB,OAAQ,eAEP0B,E,yGC1CE,MAAMK,EAAyC,CACpDC,GAAI,CACFjC,IAAK,sHACLtB,KAAM,CAAC,SAAU,WAAY,SAAU,iBACvCuB,OAAQ,YAEViC,kBAAmB,CACjBlC,IAAK,qXACLtB,KAAM,CAAC,gBAAiB,2BACxBuB,OAAQ,YAEVkC,iBAAkB,CAChBnC,IAAK,+EACLtB,KAAM,SACNuB,OAAQ,YAEVmC,YAAa,CACXpC,IAAK,wGACLtB,KAAM,CAAC,SAAU,SACjBuB,OAAQ,YAEVoC,MAAO,CACLrC,IAAK,mFACLtB,KAAM,SACNuB,OAAQ,YAEVqC,KAAM,CACJtC,IAAK,kFACLtB,KAAM,SACNuB,OAAQ,YAEVsC,SAAU,CACRvC,IAAK,4IACLtB,KAAM,UACNuB,OAAQ,YAEVuC,SAAU,CACRxC,IAAK,mDACLtB,KAAM,UACNuB,OAAQ,YAEV,0CAA2C,CACzCD,IAAK,2DACLtB,KAAM,CAAC,SAAU,UACjBuB,OAAQ,aAICwC,EAAmD,CAC9DC,SAAU,CACR1C,IAAK,sCACLtB,KAAM,SACNuB,OAAQ,YAEVmC,YAAa,CACXpC,IAAK,8OACLtB,KAAM,CAAC,SAAU,SACjBuB,OAAQ,aAIC0C,EAAqC,CAChDC,SAAU,CACR5C,IAAK,wHACLtB,KAAM,WACNuB,OAAQ,YAEV4C,aAAc,CACZ7C,IAAK,oGACLtB,KAAM,WACNuB,OAAQ,YAEV6C,YAAa,CACX9C,IAAK,uGACLtB,KAAM,WACNuB,OAAQ,Y,wDC3EL,MAAM8C,EAAyD,CACpEC,SAAU,CACRhD,IAAK,iCACLtB,KAAM,kBACNuB,OAAQ,YAEV9B,SAAU,CACR6B,IAAK,YACLtB,KAAM,aACNuB,OAAQ,YAEV,0CAA2C,CACzCD,IAAK,2DACLtB,KAAM,CAAC,SAAU,UACjBuB,OAAQ,Y,sCCTZ,IAAeG,EAAE,C,uCCAjB,IAAec,EAAE,C,uCCAjB,IAAef,EAAE,C,wDCHV,MAAMuB,EAAqC,CAChDuB,OAAQ,CACNjD,IAAK,sCACLtB,KAAM,UACNuB,OAAQ,YAEViD,QAAS,CACPlD,IAAK,gDACLtB,KAAM,UACNuB,OAAQ,YAEVkD,OAAQ,CACNnD,IAAK,mDACLtB,KAAM,UACNuB,OAAQ,e,SAEP8C,E,wDCjBE,MAAMtB,EAAqC,CAChDwB,OAAQ,CACNjD,IAAK,sCACLtB,KAAM,UACNuB,OAAQ,YAEViD,QAAS,CACPlD,IAAK,gDACLtB,KAAM,UACNuB,OAAQ,YAEVkD,OAAQ,CACNnD,IAAK,mDACLtB,KAAM,UACNuB,OAAQ,e,SAEP8C,E,8FCbE,MAAMK,EAA8C,CACzDC,YAAa,CACXrD,IAAK,uRACLtB,KAAM,WACNuB,OAAQ,eAEP+B,EAAAA,GACHK,WAAOvE,EACPwE,UAAMxE,GAGKwF,EAA0C,IAClDX,EAAAA,G,yGCZE,MAAMY,EAA8C,CACzDhB,SAAU,CACRvC,IAAK,4IACLtB,KAAM,UACNuB,OAAQ,YAEVuD,YAAa,CACXxD,IAAK,yEACLtB,KAAM,UACNuB,OAAQ,eAEP2B,EAAAA,GAGQ6B,EAA0C,CACrDX,YAAaQ,EAAAA,EAAkBR,Y","sources":["webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/list-format/ListFormatDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/upload/UploadDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/ElementDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/lists/OlDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/lists/UlDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/Upload/UploadDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/Upload/UploadDocs.ts"],"sourcesContent":["import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colors = {\n  type: {\n    default: 'var(--color-success-green)',\n    primitive: 'var(--color-success-green)',\n    string: 'var(--color-fire-red)',\n  },\n  value: {\n    default: 'var(--color-success-green)',\n    undefined: 'var(--color-black-55)',\n    string: 'var(--color-fire-red)',\n  },\n}\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = isString(children)\n          ? colors.type.string\n          : isPrimitive(children)\n          ? colors.type.primitive\n          : colors.type.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n      case 'value': {\n        style.color = isString(children)\n          ? colors.value.string\n          : children === 'undefined' || children === 'null'\n          ? colors.value.undefined\n          : colors.value.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\nfunction isString(str: string) {\n  return [\"'\", '\"', '`'].includes(str.substring(0, 1))\n}\n\nfunction isPrimitive(type: string) {\n  return [\n    'boolean',\n    'true',\n    'false',\n    'number',\n    'bigint',\n    'string',\n    'symbol',\n  ].includes(typeWithoutArray(type))\n}\n\nfunction typeWithoutArray(type: string) {\n  if (type.endsWith('[]')) {\n    return type.slice(0, -2)\n  } else if (type.startsWith('Array<') && type.endsWith('>')) {\n    return type.slice(6, -1)\n  }\n  return type\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('[')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","import { PropertiesTableProps } from '../../shared/types'\nimport { UlProperties } from './../../elements/lists/UlDocs'\nimport { OlProperties } from './../../elements/lists/OlDocs'\n\nconst ListProperties = { ...UlProperties, ...OlProperties }\nconst { children, ...ListPropertiesWithoutChildren } = ListProperties\n\nexport const ListFormatProperties: PropertiesTableProps = {\n  value: {\n    doc: 'The value to format. Can be given as `children` instead.',\n    type: ['Array<React.ReactNode>'],\n    status: 'optional',\n  },\n  children: {\n    doc: 'The children to format.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  format: {\n    doc: 'Formatting options for the value when variant is `text`. See the [Intl.ListFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat) documentation.',\n    type: 'Intl.ListFormatOptions',\n    status: 'optional',\n  },\n  variant: {\n    doc: 'Defines if the value should be displayed in list format (`ol`, `ul`) or regular text format in one line. Defaults to `text`',\n    type: ['ol', 'ul', 'text'],\n    status: 'optional',\n  },\n  listType: {\n    doc: 'Defines the type of list styling used for list variants. Used together with variant `ol` and `ul`. Variant `ol`: `a`, `A`, `i`, `I` and `1`. Variant `ul`: `circle`, `disc` and `square`. Defaults to `undefined`',\n    type: [\n      'a',\n      'A',\n      'i',\n      'I',\n      '1',\n      'circle',\n      'disc',\n      'square',\n      'unstyled',\n      'undefined',\n    ],\n    status: 'optional',\n  },\n  ...ListPropertiesWithoutChildren,\n}\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const UploadProperties: PropertiesTableProps = {\n  id: {\n    doc: 'Unique id used with the useUpload hook to manage the files. Needed when wanting to connect with the useUpload hook.',\n    type: ['string', 'Function', 'Object', 'React.Context'],\n    status: 'optional',\n  },\n  acceptedFileTypes: {\n    doc: 'List of accepted file types. Either as string or [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype). When providing a list of [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype), the accepted file types will be presented in a table(see [example](/uilib/components/upload/demos/#upload-with-file-max-size-based-on-file-type)).',\n    type: ['Array<string>', 'Array<AcceptedFileType>'],\n    status: 'required',\n  },\n  filesAmountLimit: {\n    doc: 'Defines the amount of files the user can select and upload. Defaults to 100.',\n    type: 'number',\n    status: 'optional',\n  },\n  fileMaxSize: {\n    doc: 'Defines the max file size of each file in MB. Use either `0` or `false` to disable. Defaults to 5 MB.',\n    type: ['number', 'false'],\n    status: 'optional',\n  },\n  title: {\n    doc: 'Custom text property. Replaces the default title. Can be disabled using `false`.',\n    type: 'string',\n    status: 'optional',\n  },\n  text: {\n    doc: 'Custom text property. Replaces the default text. Can be disabled using `false`.',\n    type: 'string',\n    status: 'optional',\n  },\n  download: {\n    doc: 'Causes the browser to treat all listed files as downloadable instead of opening them in a new browser tab or window. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'Skeleton should be applied when loading content.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const AcceptedFileTypeProperties: PropertiesTableProps = {\n  fileType: {\n    doc: 'The name of the accepted file type.',\n    type: 'string',\n    status: 'required',\n  },\n  fileMaxSize: {\n    doc: 'Defines the max file size of the given file type in MB. Use either `0` or `false` to disable. If not provided, it defaults to the value of [Uploads](/uilib/components/upload/properties/#properties) `fileMaxSize` which defaults to 5 MB.',\n    type: ['number', 'false'],\n    status: 'optional',\n  },\n}\n\nexport const UploadEvents: PropertiesTableProps = {\n  onChange: {\n    doc: 'Will be called on `files` changes made by the user. Access the files with `{ files }` (containing each a `fileItem`).',\n    type: 'function',\n    status: 'optional',\n  },\n  onFileDelete: {\n    doc: 'Will be called once a file gets deleted by the user. Access the deleted file with `{ fileItem }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  onFileClick: {\n    doc: 'Will be called once a file gets clicked on by the user. Access the clicked file with `{ fileItem }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../shared/types'\n\nexport const ElementPropertiesWithoutSkeleton: PropertiesTableProps = {\n  innerRef: {\n    doc: 'Send along a custom React Ref.',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  children: {\n    doc: 'Contents.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const ElementProperties: PropertiesTableProps = {\n  ...ElementPropertiesWithoutSkeleton,\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeletonMethod: {\n    doc: 'Can be `shape`, `font` or `form`. Defaults to `font`.',\n    type: 'string',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../shared/types'\n\nimport { ElementPropertiesWithoutSkeleton } from './../ElementDocs'\n\nexport const OlProperties: PropertiesTableProps = {\n  inside: {\n    doc: 'Defines the position of the marker.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  outside: {\n    doc: 'Defines the position of the marker (default).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  nested: {\n    doc: 'Will ensure a nested structure of several lists.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  ...ElementPropertiesWithoutSkeleton,\n}\n","import { PropertiesTableProps } from '../../shared/types'\nimport { ElementPropertiesWithoutSkeleton } from './../ElementDocs'\n\nexport const UlProperties: PropertiesTableProps = {\n  inside: {\n    doc: 'Defines the position of the marker.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  outside: {\n    doc: 'Defines the position of the marker (default).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  nested: {\n    doc: 'Will ensure a nested structure of several lists.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  ...ElementPropertiesWithoutSkeleton,\n}\n","import {\n  UploadEvents,\n  UploadProperties,\n} from '../../../../components/upload/UploadDocs'\nimport { PropertiesTableProps } from '../../../../shared/types'\n\nexport const UploadFieldProperties: PropertiesTableProps = {\n  fileHandler: {\n    doc: 'File handler function that takes newly added files (`newFiles: UploadValue`) as a parameter and returns the processed files. The function can either be synchronous or asynchronous. It returns a promise (`Promise<UploadValue>`) containing the processed files when asynchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  ...UploadProperties,\n  title: undefined,\n  text: undefined,\n}\n\nexport const UploadFieldEvents: PropertiesTableProps = {\n  ...UploadEvents,\n}\n","import { PropertiesTableProps } from '../../../../shared/types'\n\nimport { ListFormatProperties } from '../../../../components/list-format/ListFormatDocs'\n\nimport { UploadFieldEvents } from '../../Field/Upload/UploadDocs'\n\nexport const UploadValueProperties: PropertiesTableProps = {\n  download: {\n    doc: 'Causes the browser to treat all listed files as downloadable instead of opening them in a new browser tab or window. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  displaySize: {\n    doc: 'Can be used to display the file size of the file. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  ...ListFormatProperties,\n}\n\nexport const UploadValueEvents: PropertiesTableProps = {\n  onFileClick: UploadFieldEvents.onFileClick,\n}\n"],"names":["components","basicComponents","p","props","_jsx","StyledTable","_styled","Table","target","name","styles","colors","default","primitive","string","undefined","FormattedCode","_ref","variant","strikethrough","children","style","rest","textDecoration","color","isString","includes","type","endsWith","slice","startsWith","typeWithoutArray","background","boxShadow","code","PropertiesTable","_ref2","valueType","camelCase","omit","showDefaultValue","keys","Object","tableRows","entries","map","_ref3","key","defaultValue","doc","status","_jsxs","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","_Fragment","ReactMarkdown","convertToCamelCase","Th","str","substring","forEach","replace","RegExp","ListProperties","UlProperties","OlProperties","ListPropertiesWithoutChildren","ListFormatProperties","value","format","listType","UploadProperties","id","acceptedFileTypes","filesAmountLimit","fileMaxSize","title","text","download","skeleton","AcceptedFileTypeProperties","fileType","UploadEvents","onChange","onFileDelete","onFileClick","ElementPropertiesWithoutSkeleton","innerRef","inside","outside","nested","UploadFieldProperties","fileHandler","UploadFieldEvents","UploadValueProperties","displaySize","UploadValueEvents"],"sourceRoot":""}