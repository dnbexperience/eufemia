{"version":3,"file":"0c3f14443df3cf0eb81f0d1934199c5cb8085dbe-030ba158a9db78d02908.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/number-format/NumberFormatDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/Number/NumberDocs.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/ValueDocs.ts"],"sourcesContent":["import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td:not(.description) {\n    white-space: nowrap;\n  }\n`\n\nconst colors = {\n  type: {\n    default: 'var(--color-success-green)',\n    primitive: 'var(--color-success-green)',\n    string: 'var(--color-fire-red)',\n  },\n  value: {\n    default: 'var(--color-success-green)',\n    undefined: 'var(--color-black-55)',\n    string: 'var(--color-fire-red)',\n  },\n}\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = isString(children)\n          ? colors.type.string\n          : isPrimitive(children)\n          ? colors.type.primitive\n          : colors.type.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n      case 'value': {\n        style.color = isString(children)\n          ? colors.value.string\n          : children === 'undefined' || children === 'null'\n          ? colors.value.undefined\n          : colors.value.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td className=\"description\">\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th className=\"description\">Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\nfunction isString(str: string) {\n  return [\"'\", '\"', '`'].includes(str.substring(0, 1))\n}\n\nfunction isPrimitive(type: string) {\n  return [\n    'boolean',\n    'true',\n    'false',\n    'number',\n    'bigint',\n    'string',\n    'symbol',\n  ].includes(typeWithoutArray(type))\n}\n\nfunction typeWithoutArray(type: string) {\n  if (type.endsWith('[]')) {\n    return type.slice(0, -2)\n  } else if (type.startsWith('Array<') && type.endsWith('>')) {\n    return type.slice(6, -1)\n  }\n  return type\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('[')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","import { PropertiesTableProps } from '../../shared/types'\nimport { toCamelCase } from '../../shared/component-helper'\n\nexport const NumberFormatProperties: PropertiesTableProps = {\n  value: {\n    doc: 'A number.',\n    type: 'number',\n    status: 'required',\n  },\n  locale: {\n    doc: 'Use a [2 Letter Language Code](https://www.sitepoint.com/iso-2-letter-language-codes/) or an extended code such as `nb-NO`. Use `auto` to detect the locale from the browser (`navigator.language`). Defaults to the Norwegian locale: `nb-NO`.',\n    type: 'string',\n    status: 'optional',\n  },\n  compact: {\n    doc: 'Shortens any number or currency including an abbreviation. You can combine `compact` with `currency`. It gives you zero decimal by default `decimals={0}`. Use either `short` or `long`. Defaults to `short` if `true` is given.',\n    type: ['boolean', 'string'],\n    status: 'optional',\n  },\n  currency: {\n    doc: 'Currency code (ISO 4217) or `true` to use the default `NOK`. Uses two decimals by default.',\n    type: ['string', 'boolean'],\n    status: 'optional',\n  },\n  currency_display: {\n    doc: 'Use either empty/false to hide the sign/name or use `code` (NOK), `name` (kroner), `symbol` (kr) or `narrowSymbol` (for a shorter symbol variant). Defaults to `narrowSymbol` when the locale is `no` else we default to `code`.',\n    type: 'string',\n    status: 'optional',\n  },\n  currency_position: {\n    doc: 'Use either `before` or `after` to change/define the position of the currency. Defaults to `auto` (Browser API defaults, but with an exception, if the locale is `nb-NO` or `no`, use after as the default position).',\n    type: 'string',\n    status: 'optional',\n  },\n  ban: {\n    doc: '**Bank Account Number**: use `true` to use the default Norwegian style (2000 12 34567) formatting.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  nin: {\n    doc: '**National Identification Number**: use `true` to use the default Norwegian style (180892 12345) formatting.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  org: {\n    doc: '**Organization Number**: use `true` to use the default Norwegian style (123 456 789) formatting. Screen readers get digit by digit.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  percent: {\n    doc: '**Percentage**: use `true` to enable percent formatting.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  phone: {\n    doc: 'Use `true` to use the default Norwegian style (22 22 22 22) of phone number formatting, regulated by the [Norwegian authority](https://lovdata.no/forskrift/2004-02-16-426/§16). More info by [Sprakradet](https://www.sprakradet.no/sprakhjelp/Skriveregler/Dato/#tlf) as well.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  decimals: {\n    doc: 'Set a number to define the number of decimals. Like `decimals=\"0\"` will ensure that decimals are simply not shown. The default decimals for currency usage are `2` (Browser API default).',\n    type: 'number',\n    status: 'optional',\n  },\n  rounding: {\n    doc: 'If `omit` is given, the decimal will NOT be rounded. If set to `half-even`, the value will be rounded to the nearest even number. If set to `half-up`, the fractional part is 0.5 or greater, the number is rounded up. If the fractional part is less than 0.5, the number is rounded down. Defaults to `half-up`.',\n    type: ['omit', 'half-even', 'half-up'],\n    status: 'optional',\n  },\n  omit_rounding: {\n    doc: 'Use `rounding=\"omit\"` instead.',\n    type: 'boolean',\n    status: 'deprecated',\n  },\n  prefix: {\n    doc: 'Add a string or React component before the number, including white space.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Appends a string or React component after the number, including white space.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  srLabel: {\n    doc: 'Will add a visually hidden label, to give screen reader users the missing context to easier understand what the number represents.',\n    type: 'string',\n    status: 'optional',\n  },\n  selectall: {\n    doc: 'Use `false` to disable the auto select all on the first click. Defaults to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  always_selectall: {\n    doc: 'Use `true` to always auto select all on the first click. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  copy_selection: {\n    doc: 'Use `false` to disable the auto copy feature. Defaults to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  clean_copy_value: {\n    doc: 'If set to `true` the copy&paste value will be provided without e.g. a currency sign or a percent sign. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  clean: {\n    doc: 'If set to `true` a dirty string will be parsed to extract the number (`prefix -123.45 suffix` would result in e.g. `kr -123,45`).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  link: {\n    doc: 'Use `tel` or `sms` to enable a clickable / touchable anchor link.',\n    type: 'string',\n    status: 'optional',\n  },\n  monospace: {\n    doc: 'Sets the font to [DNB Mono Regular](/quickguide-designer/fonts/#dnbmono-regular).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  element: {\n    doc: 'Define what HTML element should be used. Defaults to `<span>`.',\n    type: 'string',\n    status: 'optional',\n  },\n  options: {\n    doc: \"Accepts all [number.toLocaleString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString) or [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) options as an object - can also be a JSON given as the parameter e.g. `options={{ 'minimumFractionDigits': 2 }}`.\",\n    type: 'object',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  tooltip: {\n    doc: 'Provide a string or a React Element to be shown as the tooltip content.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const NumberFormatPropertiesCamelCase: PropertiesTableProps =\n  Object.fromEntries(\n    Object.entries(NumberFormatProperties).map(([k, v]) => [\n      toCamelCase(k),\n      v,\n    ])\n  )\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../../shared/types'\nimport { NumberFormatPropertiesCamelCase } from '../../../../components/number-format/NumberFormatDocs'\n\nexport const NumberProperties: PropertiesTableProps = {\n  value: NumberFormatPropertiesCamelCase.value,\n  minimum: {\n    doc: 'Defines the minimum value of the rendered number. Defaults to `Number.MIN_SAFE_INTEGER`.',\n    type: 'number',\n    status: 'optional',\n  },\n  maximum: {\n    doc: 'Defines the maximum value of the rendered number. Defaults to `Number.MAX_SAFE_INTEGER`.',\n    type: 'number',\n    status: 'optional',\n  },\n  ...NumberFormatPropertiesCamelCase,\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const ValueProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Value for the value component. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default value for the value component. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Field label to show above the displayed value.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  transformLabel: {\n    doc: 'Transforms the label before it gets displayed. Receives the label as the first parameter. The second parameter is a object containing the `convertJsxToString` function.',\n    type: 'function',\n    status: 'optional',\n  },\n  inheritLabel: {\n    doc: 'Use `true` to inherit the label from a visible (rendered) field with the same path.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  inheritVisibility: {\n    doc: 'Use `true` to inherit the visibility from a field with the same path. You can find more info in the [Value section](/uilib/extensions/forms/Value/#inherit-visibility-from-fields-based-on-path).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  showEmpty: {\n    doc: 'Shows the value even if it is empty.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  placeholder: {\n    doc: 'Text showing in place of the value if no value is given.',\n    type: 'string',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for this input is located in the source dataset.',\n    type: 'string',\n    status: 'optional',\n  },\n  inline: {\n    doc: 'For showing the value inline (not as a block element).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  maxWidth: {\n    doc: 'Use `auto` for no max-width (use browser default), `small`, `medium` or `large` for predefined standard max widths. Defaults to `large`.',\n    type: 'string',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the value component.',\n    type: 'function',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n"],"names":["components","basicComponents","p","props","_jsx","StyledTable","_styled","Table","target","name","styles","colors","default","primitive","string","undefined","FormattedCode","_ref","variant","strikethrough","children","style","rest","textDecoration","color","isString","includes","type","endsWith","slice","startsWith","typeWithoutArray","background","boxShadow","code","PropertiesTable","_ref2","valueType","camelCase","omit","showDefaultValue","keys","Object","tableRows","entries","map","_ref3","key","defaultValue","doc","status","_jsxs","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","_Fragment","className","ReactMarkdown","convertToCamelCase","Th","str","substring","forEach","replace","RegExp","NumberFormatProperties","value","locale","compact","currency","currency_display","currency_position","ban","nin","org","percent","phone","decimals","rounding","omit_rounding","prefix","suffix","srLabel","selectall","always_selectall","copy_selection","clean_copy_value","clean","link","monospace","element","options","skeleton","tooltip","NumberFormatPropertiesCamelCase","fromEntries","k","v","NumberProperties","minimum","maximum","ValueProperties","label","labelSrOnly","transformLabel","inheritLabel","inheritVisibility","showEmpty","placeholder","path","inline","maxWidth","transformIn"],"sourceRoot":""}