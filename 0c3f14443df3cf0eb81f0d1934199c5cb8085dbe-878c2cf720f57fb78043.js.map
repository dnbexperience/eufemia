{"version":3,"file":"0c3f14443df3cf0eb81f0d1934199c5cb8085dbe-878c2cf720f57fb78043.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/number-format/NumberFormatDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/Number/NumberDocs.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/ValueDocs.ts"],"sourcesContent":["import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colorValue = 'var(--color-success-green)'\nconst colorString = 'var(--color-fire-red)'\nconst colorType = 'var(--color-violet)'\nconst colorUndefined = 'var(--color-black-55)'\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = children.startsWith(`'`) ? colorString : colorType\n        // falls through\n      }\n      case 'value': {\n        style.color = children.startsWith(`'`)\n          ? colorString\n          : children === 'undefined' || children === 'null'\n          ? colorUndefined\n          : colorValue\n        // falls through\n      }\n      default: {\n        style.background = 'none'\n        style.boxShadow = 'none'\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('[')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","import { PropertiesTableProps } from '../../shared/types'\nimport { toCamelCase } from '../../shared/component-helper'\n\nexport const NumberFormatProperties: PropertiesTableProps = {\n  value: {\n    doc: 'A number.',\n    type: 'number',\n    status: 'required',\n  },\n  locale: {\n    doc: 'Use a [2 Letter Language Code](https://www.sitepoint.com/iso-2-letter-language-codes/) or an extended code such as `nb-NO`. Use `auto` to detect the locale from the browser (`navigator.language`). Defaults to the Norwegian locale: `nb-NO`.',\n    type: 'string',\n    status: 'optional',\n  },\n  compact: {\n    doc: 'Shortens any number or currency including an abbreviation. You can combine `compact` with `currency`. It gives you zero decimal by default `decimals={0}`. Use either `short` or `long`. Defaults to `short` if `true` is given.',\n    type: ['boolean', 'string'],\n    status: 'optional',\n  },\n  currency: {\n    doc: 'Currency code (ISO 4217) or `true` to use the default `NOK`. Uses two decimals by default.',\n    type: ['string', 'boolean'],\n    status: 'optional',\n  },\n  currency_display: {\n    doc: 'Use either empty/false to hide the sign/name or use `code` (NOK), `name` (kroner), `symbol` (kr) or `narrowSymbol` (for a shorter symbol variant). Defaults to `narrowSymbol` when the locale is `no` else we default to `code`.',\n    type: 'string',\n    status: 'optional',\n  },\n  currency_position: {\n    doc: 'Use either `before` or `after` to change/define the position of the currency. Defaults to `auto` (Browser API defaults, but with an exception, if the locale is `nb-NO` or `no`, use after as the default position).',\n    type: 'string',\n    status: 'optional',\n  },\n  ban: {\n    doc: '**Bank Account Number**: use `true` to use the default Norwegian style (2000 12 34567) formatting.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  nin: {\n    doc: '**National Identification Number**: use `true` to use the default Norwegian style (180892 12345) formatting.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  org: {\n    doc: '**Organization Number**: use `true` to use the default Norwegian style (123 456 789) formatting. Screen readers get digit by digit.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  percent: {\n    doc: '**Percentage**: use `true` to enable percent formatting.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  phone: {\n    doc: 'Use `true` to use the default Norwegian style (22 22 22 22) of phone number formatting, regulated by the [Norwegian authority](https://lovdata.no/forskrift/2004-02-16-426/§16). More info by [Sprakradet](https://www.sprakradet.no/sprakhjelp/Skriveregler/Dato/#tlf) as well.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  decimals: {\n    doc: 'Set a number to define the number of decimals. Like `decimals=\"0\"` will ensure that decimals are simply not shown. The default decimals for currency usage are `2` (Browser API default).',\n    type: 'number',\n    status: 'optional',\n  },\n  rounding: {\n    doc: 'If `omit` is given, the decimal will NOT be rounded. If set to `half-even`, the value will be rounded to the nearest even number. If set to `half-up`, the fractional part is 0.5 or greater, the number is rounded up. If the fractional part is less than 0.5, the number is rounded down. Defaults to `half-up`.',\n    type: ['omit', 'half-even', 'half-up'],\n    status: 'optional',\n  },\n  omit_rounding: {\n    doc: 'Use `rounding=\"omit\"` instead.',\n    type: 'boolean',\n    status: 'deprecated',\n  },\n  prefix: {\n    doc: 'Add a string or React component before the number, including white space.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Appends a string or React component after the number, including white space.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  srLabel: {\n    doc: 'Will add a visually hidden label, to give screen reader users the missing context to easier understand what the number represents.',\n    type: 'string',\n    status: 'optional',\n  },\n  selectall: {\n    doc: 'Use `false` to disable the auto select all on the first click. Defaults to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  always_selectall: {\n    doc: 'Use `true` to always auto select all on the first click. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  copy_selection: {\n    doc: 'Use `false` to disable the auto copy feature. Defaults to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  clean_copy_value: {\n    doc: 'If set to `true` the copy&paste value will be provided without e.g. a currency sign or a percent sign. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  clean: {\n    doc: 'If set to `true` a dirty string will be parsed to extract the number (`prefix -123.45 suffix` would result in e.g. `kr -123,45`).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  link: {\n    doc: 'Use `tel` or `sms` to enable a clickable / touchable anchor link.',\n    type: 'string',\n    status: 'optional',\n  },\n  monospace: {\n    doc: 'Sets the font to [DNB Mono Regular](/quickguide-designer/fonts/#dnbmono-regular).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  element: {\n    doc: 'Define what HTML element should be used. Defaults to `<span>`.',\n    type: 'string',\n    status: 'optional',\n  },\n  options: {\n    doc: \"Accepts all [number.toLocaleString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString) or [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) options as an object - can also be a JSON given as the parameter e.g. `options={{ 'minimumFractionDigits': 2 }}`.\",\n    type: 'object',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  tooltip: {\n    doc: 'Provide a string or a React Element to be shown as the tooltip content.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const NumberFormatPropertiesCamelCase: PropertiesTableProps =\n  Object.fromEntries(\n    Object.entries(NumberFormatProperties).map(([k, v]) => [\n      toCamelCase(k),\n      v,\n    ])\n  )\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../../shared/types'\nimport { NumberFormatPropertiesCamelCase } from '../../../../components/number-format/NumberFormatDocs'\n\nexport const NumberProperties: PropertiesTableProps = {\n  value: NumberFormatPropertiesCamelCase.value,\n  minimum: {\n    doc: 'Defines the minimum value of the rendered number. Defaults to `Number.MIN_SAFE_INTEGER`.',\n    type: 'number',\n    status: 'optional',\n  },\n  maximum: {\n    doc: 'Defines the maximum value of the rendered number. Defaults to `Number.MAX_SAFE_INTEGER`.',\n    type: 'number',\n    status: 'optional',\n  },\n  ...NumberFormatPropertiesCamelCase,\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const ValueProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Value for the value component. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default value for the value component. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Field label to show above the displayed value.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  transformLabel: {\n    doc: 'Transforms the label before it gets displayed. Receives the label as the first parameter. The second parameter is a object containing the `convertJsxToString` function.',\n    type: 'function',\n    status: 'optional',\n  },\n  inheritLabel: {\n    doc: 'Use `true` to inherit the label from a visible (rendered) field with the same path.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  inheritVisibility: {\n    doc: 'Use `true` to inherit the visibility from a field with the same path. You can find more info in the [Value section](/uilib/extensions/forms/Value/#inherit-visibility-from-fields-based-on-path).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  showEmpty: {\n    doc: 'Shows the value even if it is empty.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  placeholder: {\n    doc: 'Text showing in place of the value if no value is given.',\n    type: 'string',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for this input is located in the source dataset.',\n    type: 'string',\n    status: 'optional',\n  },\n  inline: {\n    doc: 'For showing the value inline (not as a block element).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  maxWidth: {\n    doc: 'Use `auto` for no max-width (use browser default), `small`, `medium` or `large` for predefined standard max widths. Defaults to `large`.',\n    type: 'string',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the value component.',\n    type: 'function',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n"],"names":["components","basicComponents","p","props","_jsx","StyledTable","_styled","Table","target","name","styles","colorString","FormattedCode","_ref","variant","strikethrough","children","style","rest","textDecoration","color","startsWith","background","boxShadow","code","PropertiesTable","_ref2","valueType","camelCase","omit","showDefaultValue","keys","Object","tableRows","entries","map","_ref3","key","type","defaultValue","doc","status","includes","_jsxs","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","_Fragment","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp","NumberFormatProperties","value","locale","compact","currency","currency_display","currency_position","ban","nin","org","percent","phone","decimals","rounding","omit_rounding","prefix","suffix","srLabel","selectall","always_selectall","copy_selection","clean_copy_value","clean","link","monospace","element","options","skeleton","tooltip","NumberFormatPropertiesCamelCase","fromEntries","k","v","NumberProperties","minimum","maximum","ValueProperties","label","labelSrOnly","transformLabel","inheritLabel","inheritVisibility","showEmpty","placeholder","path","inline","maxWidth","transformIn"],"sourceRoot":""}