"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[81746],{54659:function(n,e,t){t.r(e),t.d(e,{default:function(){return Y}});var o={};t.r(o),t.d(o,{Accordion:function(){return H},AccordionMixed:function(){return N},AccordionRow:function(){return E},ClassHelpers:function(){return B},ContainerEmptyHeaderFooter:function(){return A},InOneContainer:function(){return L},LongHeader:function(){return I},Navigation:function(){return F},NavigationMixed:function(){return D},PaginationTable:function(){return M},ResponsiveInCard:function(){return G},RowScopeOnly:function(){return Z},SizeMedium:function(){return v},SizeSmall:function(){return S},StackedContainer:function(){return V},Sticky:function(){return z},StickyMaxHeight:function(){return W},VariantBasic:function(){return f},VariantCombinations:function(){return O},VariantComplex:function(){return _},VariantFixed:function(){return k},WithoutClasses:function(){return P}});var d=t(52322),a=t(45392),r=t(2784),i=t(73136),l=t(87682),T=t(41672),s=t(53528),c=t(62914),h=t(37419),b=t(55560),u=t(91859),w=t(30600),p=t(76711),x=t(77843),m=t.n(x),g=t(26773),R=t(2045),j=t(64411);function C(n){var e,t;const{children:o,className:a,...r}=n,i=(0,R.HU)(n);(0,j.L_)(n,r);const l=g.Z,T=Array.isArray(o)?o:[o];return(null===(e=T[0])||void 0===e?void 0:e.type)!==C.Head&&T.unshift((0,d.jsx)(C.Head,{},"head")),(null===(t=T[2])||void 0===t?void 0:t.type)!==C.Foot&&T.push((0,d.jsx)(C.Foot,{},"foot")),(0,d.jsx)("section",{className:m()("dnb-table__container",a,i),...r,children:(0,d.jsx)(l,{children:T})})}C.Body=function(n){const{children:e,className:t,...o}=n;return(0,d.jsx)("div",{className:m()("dnb-table__container__body",t),...o,children:e})},C.Head=function(n){const{children:e,className:t,...o}=n;return(0,d.jsx)("div",{className:m()("dnb-table__container__head",!e&&"dnb-table__container__head--empty",t),...o,children:e})},C.Foot=function(n){const{children:e,className:t,...o}=n;return(0,d.jsx)("div",{className:m()("dnb-table__container__foot",!e&&"dnb-table__container__foot--empty",t),...o,children:e})},C._supportsSpacingProps=!0;var y=function(n,e){void 0===e&&(e={direction:"off",modes:["asc","desc","off"]});const t=r.useMemo((()=>Object.entries(n).reduce(((n,t)=>{let[o,d]=t;return n[o]={...e,...d},n}),{})),[n,e]),[o,d]=r.useState(t),a=r.useMemo((()=>{const n=Object.entries(o);return n.reduce(((t,a)=>{let[r,i]=a;return t[r]=()=>{const t={...o[r]};!t.active&&t.lastDirection?(t.direction=t.lastDirection,t.active=!0,t.lastDirection=null):t.active||"off"===t.direction?(t.direction=function(n){let{direction:e,opts:t,defaults:o}=n;const d=o.modes.filter((n=>t.modes.includes(n)));d.includes(e)||(e=d[0]);let a=e;for(let r=0,i=d.length;r<i;r++){if(e===d[r]){let n=r+1;n>=i&&(n=0),a=d[n];break}}return a}({direction:t.direction,opts:i,defaults:e}),t.active="off"!==t.direction):t.active=!0,d({...n.reduce(((n,e)=>{let[t,o]=e;return n[t]=o,n[t].active=!1,"off"!==o.direction&&(n[t].lastDirection=o.direction),n}),{}),[r]:t})},t}),{})}),[o]);let i=null;return{sortState:Object.entries(o).reduce(((n,e)=>{let[t,{active:o,direction:d}]=e;const a="off"===d?void 0:"desc"===d;return o?i=t:o=!1,n[t]={active:o,direction:d,reversed:a},n}),{}),sortHandler:a,activeSortName:i}};const f=()=>(0,d.jsx)(i.Z,{hideCode:!0,"data-visual-test":"table-default",scope:{useHandleSortState:y},noInline:!0,children:'const BasicTable = () => {\n  const { sortState, sortHandler } = useHandleSortState({\n    column1: {\n      direction: \'asc\',\n      active: true,\n    },\n    column2: {\n      direction: \'desc\',\n      modes: [\'asc\', \'desc\'],\n    },\n  })\n\n  // Handle your "column1" logic\n  React.useEffect(() => {\n    switch (sortState.column1.direction) {\n      case \'asc\':\n        break\n      case \'desc\':\n        break\n      default:\n      case \'off\':\n        break\n    }\n  }, [sortState.column1.direction])\n  return (\n    <Table.ScrollView>\n      <Table>\n        <caption className="dnb-sr-only">A Table Caption</caption>\n        <thead>\n          <Tr>\n            <Th>Column</Th>\n            <Th>\n              <Th.Horizontal>\n                Help Button\n                <Th.HelpButton>Help Content</Th.HelpButton>\n              </Th.Horizontal>\n            </Th>\n            <Th\n              sortable\n              active={sortState.column1.active}\n              reversed={sortState.column1.reversed}\n            >\n              <Th.SortButton\n                text="Sortable Active"\n                title="Sort table column"\n                on_click={sortHandler.column1}\n              />\n            </Th>\n            <Th\n              sortable\n              active={sortState.column2.active}\n              reversed={sortState.column2.reversed}\n              align="right"\n            >\n              <Th.SortButton\n                text="Sortable"\n                title="Sort table column"\n                on_click={sortHandler.column2}\n              />\n            </Th>\n          </Tr>\n        </thead>\n        <tbody>\n          <Tr>\n            <Td>Row 1</Td>\n            <Td>Row 1</Td>\n            <Td>Row 1</Td>\n            <Td align="right">Row 1</Td>\n          </Tr>\n          <Tr>\n            <Td>Row 2</Td>\n            <Td>Row 2</Td>\n            <Td>Row 2</Td>\n            <Td align="right">Row 2</Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <P>Row 3 with paragraph</P>\n            </Td>\n            <Td>\n              Row 3 with <Code>code</Code>\n            </Td>\n            <Td>\n              <P>\n                Row 3 with <b>medium paragraph</b>\n              </P>\n            </Td>\n            <Td align="right">\n              Row 3 with <b>medium text</b>\n            </Td>\n          </Tr>\n        </tbody>\n      </Table>\n    </Table.ScrollView>\n  )\n}\nrender(<BasicTable />)\n'}),v=()=>(0,d.jsx)(i.Z,{hideCode:!0,"data-visual-test":"table-size-medium",children:'<Table.ScrollView>\n  <Table size="medium">\n    <caption className="dnb-sr-only">A Table Caption</caption>\n    <thead>\n      <Tr>\n        <Th>Column</Th>\n        <Th sortable>\n          <Th.SortButton text="Sortable" title="Sort table column" />\n        </Th>\n        <Th align="right">Column</Th>\n      </Tr>\n    </thead>\n    <tbody>\n      <Tr>\n        <Td>Row 1</Td>\n        <Td>Row 1</Td>\n        <Td align="right">Row 1</Td>\n      </Tr>\n      <Tr>\n        <Td>\n          <P>Row 2 with paragraph</P>\n        </Td>\n        <Td>\n          <P>\n            Row 2 with <b>medium paragraph</b>\n          </P>\n        </Td>\n        <Td align="right">\n          Row 2 with <b>medium text</b>\n        </Td>\n      </Tr>\n    </tbody>\n  </Table>\n</Table.ScrollView>\n'}),S=()=>(0,d.jsx)(i.Z,{hideCode:!0,"data-visual-test":"table-size-small",children:'<Table.ScrollView>\n  <Table size="small">\n    <caption className="dnb-sr-only">A Table Caption</caption>\n    <thead>\n      <Tr>\n        <Th>Column</Th>\n        <Th sortable>\n          <Th.SortButton text="Sortable" title="Sort table column" />\n        </Th>\n        <Th align="right">Column</Th>\n      </Tr>\n    </thead>\n    <tbody>\n      <Tr>\n        <Td>Row 1</Td>\n        <Td>Row 1</Td>\n        <Td align="right">Row 1</Td>\n      </Tr>\n      <Tr>\n        <Td>\n          <P>Row 2 with paragraph</P>\n        </Td>\n        <Td>\n          <P>\n            Row 2 with <b>medium paragraph</b>\n          </P>\n        </Td>\n        <Td align="right">\n          Row 2 with <b>medium text</b>\n        </Td>\n      </Tr>\n    </tbody>\n  </Table>\n</Table.ScrollView>\n'}),_=()=>(0,d.jsx)(i.Z,{hideCode:!0,"data-visual-test":"table-complex",children:'<Table.ScrollView>\n  <Table border outline>\n    <caption>A Table Caption</caption>\n    <thead>\n      <Tr noWrap>\n        <Th />\n        <Th>\n          Column 2<br />\n          newline\n        </Th>\n        <Th colSpan={2}>Column 3 that spans</Th>\n      </Tr>\n    </thead>\n    <tbody>\n      <Tr variant="even">\n        <Th scope="rowgroup" rowSpan={2}>\n          Row 1+2 Header\n        </Th>\n        <Td rowSpan={2}>Row 1 that spans</Td>\n        <Td>Row 1</Td>\n        <Td>Row 1</Td>\n      </Tr>\n      <Tr variant="even">\n        <Td>Row 2</Td>\n        <Td>Row 2</Td>\n      </Tr>\n      <Tr>\n        <Th scope="row">\n          Row 3 Header <br />\n          newline\n        </Th>\n        <Td>Row 3</Td>\n        <Td spacing="horizontal">\n          <Button variant="secondary">Button</Button>\n        </Td>\n        <Td noSpacing align="right">\n          <Code>noSpacing + align="right"</Code>\n        </Td>\n      </Tr>\n      <Tr>\n        <Th scope="row">Row 4 Header</Th>\n        <Td>Row 4</Td>\n        <Td colSpan={2}>Row 4</Td>\n      </Tr>\n    </tbody>\n  </Table>\n</Table.ScrollView>\n'}),Z=()=>(0,d.jsx)(i.Z,{hideCode:!0,"data-visual-test":"table-row-scope-only",children:'<Table.ScrollView>\n  <Table outline border>\n    <caption>A Table Caption</caption>\n    <tbody>\n      <Tr>\n        <Th scope="row">Header A</Th>\n        <Td>Row 1</Td>\n        <Td>Row 1</Td>\n      </Tr>\n      <Tr>\n        <Th>Header B</Th>\n        <Td>Row 2</Td>\n        <Td>Row 2</Td>\n      </Tr>\n    </tbody>\n  </Table>\n</Table.ScrollView>\n'}),k=()=>(0,d.jsx)(i.Z,{hideCode:!0,"data-visual-test":"table-fixed",noInline:!0,children:'const FixedTable = styled(Table)`\n  min-width: 70rem;\n\n  /* Define the width of the THs so they are aligned across tables */\n  thead {\n    th:nth-of-type(1) {\n      width: 30%;\n    }\n    th:nth-of-type(2) {\n      width: 20%;\n    }\n    th:nth-of-type(3) {\n      width: 10%;\n    }\n    th:nth-of-type(4) {\n      width: 10%;\n    }\n    th:nth-of-type(5) {\n      width: 5%;\n    }\n    th:nth-of-type(6) {\n      width: 5%;\n    }\n    th:nth-of-type(7) {\n      width: 5%;\n    }\n    th:nth-of-type(8) {\n      width: 5%;\n    }\n  }\n`\nrender(\n  <Table.ScrollView>\n    <FixedTable fixed>\n      <caption className="dnb-sr-only">A Table Caption</caption>\n      <thead>\n        <Tr noWrap>\n          <Th>Column 1</Th>\n          <Th>Column 2</Th>\n          <Th>Column 3</Th>\n          <Th>Column 4</Th>\n          <Th>Column 5</Th>\n          <Th>Column 6</Th>\n          <Th>Column 7</Th>\n          <Th align="right">Column 8</Th>\n        </Tr>\n      </thead>\n      <tbody>\n        <Tr>\n          <Td>Row 1</Td>\n          <Td>Row 1</Td>\n          <Td>Row 1</Td>\n          <Td>Row 1</Td>\n          <Td>Row 1</Td>\n          <Td>Row 1</Td>\n          <Td>Row 1</Td>\n          <Td align="right">Row 1</Td>\n        </Tr>\n        <Tr>\n          <Td>Row 2</Td>\n          <Td>Row 2</Td>\n          <Td>Row 2</Td>\n          <Td>Row 2</Td>\n          <Td>Row 2</Td>\n          <Td>Row 2</Td>\n          <Td>Row 2</Td>\n          <Td align="right">Row 2</Td>\n        </Tr>\n        <Tr>\n          <Td>Row 3</Td>\n          <Td>Row 3</Td>\n          <Td>Row 3</Td>\n          <Td>Row 3</Td>\n          <Td>Row 3</Td>\n          <Td>Row 3</Td>\n          <Td>Row 3</Td>\n          <Td align="right">Row 3</Td>\n        </Tr>\n        <Tr>\n          <Td>Row 4</Td>\n          <Td>Row 4</Td>\n          <Td>Row 4</Td>\n          <Td>Row 4</Td>\n          <Td>Row 4</Td>\n          <Td>Row 4</Td>\n          <Td>Row 4</Td>\n          <Td align="right">Row 4</Td>\n        </Tr>\n      </tbody>\n    </FixedTable>\n  </Table.ScrollView>,\n)\n'}),V=()=>{var n;const e=/data-visual-test|fullscreen/.test(null===globalThis||void 0===globalThis||null===(n=globalThis.location)||void 0===n?void 0:n.href);return(0,d.jsx)(i.Z,{hideCode:!0,"data-visual-test":"table-container",scope:{TableContainer:C,isFullscreen:e},noInline:!0,children:'const StyledContainer = styled(TableContainer)`\n  /* \n            Define the width of the THs so they are aligned across tables.\n            A "fixed" table width is needed in order to align all tables to act with the same column widths.\n          */\n  &,\n  .dnb-table__scroll-view {\n    max-width: 70rem;\n  }\n  .dnb-table__container__body {\n    min-width: 800px;\n  }\n  table {\n    th:nth-of-type(1),\n    td:nth-of-type(1) {\n      width: 30%;\n    }\n    th:nth-of-type(2) {\n      width: 30%;\n    }\n    th:nth-of-type(3) {\n      width: 20%;\n    }\n    th:nth-of-type(4) {\n      width: 20%;\n    }\n  }\n`\nrender(\n  <StyledContainer aria-label="I contain two tables" bottom="large">\n    <TableContainer.Head>\n      <H2>Header</H2>\n      <P top>Text</P>\n    </TableContainer.Head>\n\n    <TableContainer.Body>\n      <Table\n        fixed\n        border\n        sticky\n        stickyOffset={isFullscreen ? 0 : \'3.5rem\'}\n      >\n        <caption className="dnb-sr-only">Table One</caption>\n        <thead>\n          <Tr noWrap>\n            <Th>\n              I have a superscript{\' \'}\n              <sup>\n                <Anchor href="#unique-ref-id">1</Anchor>\n              </sup>\n            </Th>\n            <Th>Column 2</Th>\n            <Th>Column 3</Th>\n            <Th>Column 4</Th>\n          </Tr>\n        </thead>\n        <tbody>\n          <Tr>\n            <Td>Row 1</Td>\n            <Td>Row 1</Td>\n            <Td>Row 1</Td>\n            <Td>Row 1</Td>\n          </Tr>\n          <Tr>\n            <Td>Row 2</Td>\n            <Td>Row 2</Td>\n            <Td>Row 2</Td>\n            <Td>Row 2</Td>\n          </Tr>\n        </tbody>\n      </Table>\n\n      <Table\n        fixed\n        border\n        sticky\n        stickyOffset={isFullscreen ? 0 : \'3.5rem\'}\n      >\n        <caption className="dnb-sr-only">Table Two</caption>\n        <thead>\n          <Tr noWrap>\n            <Th>Column 1</Th>\n            <Th>Column 2</Th>\n            <Th>Column 3</Th>\n            <Th>Column 4</Th>\n          </Tr>\n        </thead>\n        <tbody>\n          <Tr>\n            <Td rowSpan={2}>Row 1</Td>\n            <Td>Row 1</Td>\n            <Td>Row 1</Td>\n            <Td>Row 1</Td>\n          </Tr>\n          <Tr>\n            <Td rowSpan={2}>Row 2</Td>\n            <Td>Row 2</Td>\n            <Td>Row 2</Td>\n          </Tr>\n          <Tr>\n            <Td>Row 3</Td>\n            <Td>Row 3</Td>\n            <Td>Row 3</Td>\n          </Tr>\n        </tbody>\n      </Table>\n\n      <Table fixed border>\n        <tbody>\n          <Tr>\n            <Th scope="rowgroup" rowSpan={2}>\n              Row Header Group\n            </Th>\n            <Td>Row 1</Td>\n            <Td>Row 1</Td>\n          </Tr>\n          <Tr>\n            <Td>Row 2</Td>\n            <Td>Row 2</Td>\n          </Tr>\n        </tbody>\n      </Table>\n    </TableContainer.Body>\n\n    <TableContainer.Foot>\n      <P id="unique-ref-id">Footer</P>\n    </TableContainer.Foot>\n  </StyledContainer>,\n)\n'})},A=()=>(0,d.jsx)(i.Z,{hideCode:!0,"data-visual-test":"table-container-empty",scope:{TableContainer:C},noInline:!0,children:'render(\n  <TableContainer bottom="large">\n    <TableContainer.Body>\n      <Table border>\n        <thead>\n          <Tr>\n            <Th>Column 1</Th>\n            <Th>Column 2</Th>\n            <Th>Column 3</Th>\n            <Th>Column 4</Th>\n          </Tr>\n        </thead>\n        <tbody>\n          <Tr>\n            <Td>Row 1</Td>\n            <Td>Row 1</Td>\n            <Td>Row 1</Td>\n            <Td>Row 1</Td>\n          </Tr>\n          <Tr>\n            <Td>Row 2</Td>\n            <Td>Row 2</Td>\n            <Td>Row 2</Td>\n            <Td>Row 2</Td>\n          </Tr>\n        </tbody>\n      </Table>\n    </TableContainer.Body>\n  </TableContainer>,\n)\n'}),B=()=>(0,d.jsx)(i.Z,{hideCode:!0,"data-visual-test":"table-classes",children:'<Table.ScrollView>\n  <table className="dnb-table">\n    <thead>\n      <tr className="dnb-table__tr">\n        <th className="dnb-table__th">.dnb-table__th</th>\n        <th className="dnb-table__th dnb-table--sortable dnb-table--reversed">\n          <Th.SortButton\n            text="dnb-table--reversed"\n            title="dnb-table__th dnb-table--sortable dnb-table--reversed"\n          />\n        </th>\n        <th className="dnb-table__th dnb-table--sortable dnb-table--active">\n          <Th.SortButton\n            text="dnb-table--active"\n            title="dnb-table__th dnb-table--sortable dnb-table--active"\n          />\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr className="dnb-table__tr dnb-table__tr--even">\n        <td colSpan={3} className="dnb-table__td">\n          .dnb-table__tr--even{\' > \'}.dnb-table__td\n        </td>\n      </tr>\n      <tr className="dnb-table__tr dnb-table__tr--odd">\n        <td colSpan={3} className="dnb-table__td">\n          .dnb-table__tr--odd{\' > \'}.dnb-table__td\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</Table.ScrollView>\n'}),P=()=>(0,d.jsx)(i.Z,{hideCode:!0,"data-visual-test":"table-no-classes",children:'<Table.ScrollView>\n  <table className="dnb-table">\n    <thead>\n      <tr>\n        <th>Header</th>\n        <th className="dnb-table--sortable dnb-table--reversed">\n          <Th.SortButton text="Sortable" />\n        </th>\n        <th className="dnb-table--sortable dnb-table--active">\n          <Th.SortButton text="Active" />\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Row 1</td>\n        <td>Row 1</td>\n        <td>Row 1</td>\n      </tr>\n      <tr>\n        <td>Row 2</td>\n        <td>Row 2</td>\n        <td>Row 2</td>\n      </tr>\n      <tr>\n        <td>Row 3</td>\n        <td>Row 3</td>\n        <td>Row 3</td>\n      </tr>\n    </tbody>\n  </table>\n</Table.ScrollView>\n'}),I=()=>(0,d.jsx)(i.Z,{hideCode:!0,"data-visual-test":"table-header",children:'<Table.ScrollView>\n  <Table>\n    <caption className="dnb-sr-only">A Table Caption</caption>\n    <thead>\n      <Tr>\n        <Th colSpan={2}>\n          Static long header senectus ornare convallis ut at erat imperdiet\n          commodo\n        </Th>\n        <Th sortable reversed>\n          <Th.SortButton\n            text="Sortable long header ridiculus laoreet turpis netus at vitae"\n            title="Sort table column"\n          />\n        </Th>\n        <Th align="right" sortable active>\n          <Th.SortButton\n            text="Active and right aligned long header ridiculus laoreet turpis netus at vitae"\n            title="Sort table column"\n          />\n        </Th>\n      </Tr>\n    </thead>\n    <tbody>\n      <Tr>\n        <Td colSpan={4}>\n          <P>col span of 4</P>\n        </Td>\n      </Tr>\n    </tbody>\n  </Table>\n</Table.ScrollView>\n'}),H=()=>(0,d.jsx)(i.Z,{hideCode:!0,"data-visual-test":"table-accordion",scope:{copyIcon:s.Z,useCopyWithNotice:T.kF},noInline:!0,children:'const AccordionTable = ({ id, showCheckbox = false, ...props }) => {\n  const TdCheckbox = () => {\n    return <Checkbox label="Select row" label_sr_only />\n  }\n  const TdInput = () => {\n    return <Input label="Label" label_sr_only size={4} />\n  }\n  const Content = ({ shareId }) => {\n    const ref = React.useRef()\n    const { copy } = useCopyWithNotice()\n    const shareHandler = () => {\n      const url = new URL(location.href)\n      url.hash = \'#\' + shareId\n      copy(url.toString(), ref.current)\n    }\n    return (\n      <>\n        <Button top icon="bell" variant="secondary">\n          Ring the bell\n        </Button>\n\n        <Section top spacing>\n          <Dl>\n            <Dt>Favorittfarge</Dt>\n            <Dd>Grønn</Dd>\n            <Dt>Favorittmat</Dt>\n            <Dd>Taco</Dd>\n          </Dl>\n        </Section>\n\n        <Button\n          top\n          variant="tertiary"\n          icon={copyIcon}\n          icon_position="left"\n          on_click={shareHandler}\n          inner_ref={ref}\n        >\n          Copy link to this row\n        </Button>\n      </>\n    )\n  }\n  const Row = ({ nr }) => {\n    const shareId = id + \'-\' + nr\n    return (\n      <Tr id={shareId}>\n        <Td>{showCheckbox ? <TdCheckbox /> : \'Row \' + nr}</Td>\n        <Td>Row {nr}</Td>\n        <Td spacing="horizontal">\n          <TdInput />\n        </Td>\n        <Td align="right">Row {nr}</Td>\n\n        <Td.AccordionContent>\n          <Content shareId={shareId} />\n        </Td.AccordionContent>\n      </Tr>\n    )\n  }\n  return (\n    <Table mode="accordion" id={id} {...props}>\n      <caption className="dnb-sr-only">A Table Caption</caption>\n\n      <thead>\n        <Tr>\n          <Th>Column A</Th>\n          <Th>Column B</Th>\n          <Th>Column C</Th>\n          <Th align="right">Column D</Th>\n        </Tr>\n      </thead>\n\n      <tbody>\n        <Row nr="1" />\n        <Row nr="2" />\n        <Row nr="3" />\n      </tbody>\n    </Table>\n  )\n}\nrender(\n  <>\n    <Table.ScrollView>\n      <AccordionTable\n        id="accordion-table-1"\n        showCheckbox\n        accordionChevronPlacement="end"\n      />\n    </Table.ScrollView>\n\n    <Table.ScrollView top>\n      <AccordionTable\n        id="accordion-table-2"\n        border\n        outline\n        size="medium"\n      />\n    </Table.ScrollView>\n  </>,\n)\n'}),N=()=>(0,d.jsx)(i.Z,{hideCode:!0,"data-visual-test":"table-accordion-mixed",scope:{copyIcon:s.Z,useCopyWithNotice:T.kF},noInline:!0,children:'const AccordionTable = ({ id, showCheckbox = false, ...props }) => {\n  const TdCheckbox = () => {\n    return <Checkbox label="Select row" label_sr_only />\n  }\n  const TdInput = () => {\n    return <Input label="Label" label_sr_only size={4} />\n  }\n  const Content = ({ shareId }) => {\n    const ref = React.useRef()\n    const { copy } = useCopyWithNotice()\n    const shareHandler = () => {\n      const url = new URL(location.href)\n      url.hash = \'#\' + shareId\n      copy(url.toString(), ref.current)\n    }\n    return (\n      <>\n        <Button top icon="bell" variant="secondary">\n          Ring the bell\n        </Button>\n\n        <Section top spacing>\n          <Dl>\n            <Dt>Favorittfarge</Dt>\n            <Dd>Grønn</Dd>\n            <Dt>Favorittmat</Dt>\n            <Dd>Taco</Dd>\n          </Dl>\n        </Section>\n\n        <Button\n          top\n          variant="tertiary"\n          icon={copyIcon}\n          icon_position="left"\n          on_click={shareHandler}\n          inner_ref={ref}\n        >\n          Copy link to this row\n        </Button>\n      </>\n    )\n  }\n  return (\n    <Table mode="accordion" id={id} {...props}>\n      <caption className="dnb-sr-only">A Table Caption</caption>\n\n      <thead>\n        <Tr>\n          <Th>Column A</Th>\n          <Th>Column B</Th>\n          <Th>Column C</Th>\n          <Th align="right">Column D</Th>\n        </Tr>\n      </thead>\n\n      <tbody>\n        <Tr id={id + \'-\' + 1}>\n          <Td>{showCheckbox ? <TdCheckbox /> : \'Row \' + 1}</Td>\n          <Td>Row {1}</Td>\n          <Td spacing="horizontal">\n            <TdInput />\n          </Td>\n          <Td align="right">Row {1}</Td>\n\n          <Td.AccordionContent>\n            <Content shareId={id + \'-\' + 1} />\n          </Td.AccordionContent>\n        </Tr>\n        <Tr id={id + \'-\' + 2}>\n          <Td>{showCheckbox ? <TdCheckbox /> : \'Row \' + 2}</Td>\n          <Td>Row {2}</Td>\n          <Td spacing="horizontal">\n            <TdInput />\n          </Td>\n          <Td align="right">Row {2}</Td>\n        </Tr>\n        <Tr id={id + \'-\' + 3}>\n          <Td>{showCheckbox ? <TdCheckbox /> : \'Row \' + 3}</Td>\n          <Td>Row {3}</Td>\n          <Td spacing="horizontal">\n            <TdInput />\n          </Td>\n          <Td align="right">Row {3}</Td>\n\n          <Td.AccordionContent>\n            <Content shareId={id + \'-\' + 3} />\n          </Td.AccordionContent>\n        </Tr>\n      </tbody>\n    </Table>\n  )\n}\nrender(\n  <>\n    <Table.ScrollView>\n      <AccordionTable\n        id="accordion-table-mixed-1"\n        showCheckbox\n        accordionChevronPlacement="end"\n      />\n    </Table.ScrollView>\n\n    <Table.ScrollView top>\n      <AccordionTable\n        id="accordion-table-mixed-2"\n        border\n        outline\n        size="medium"\n      />\n    </Table.ScrollView>\n  </>,\n)\n'}),E=()=>(0,d.jsx)(i.Z,{hideCode:!0,"data-visual-test":"table-accordion-rows",noInline:!0,children:"const firstRowContent = [\n  {\n    label: 'Expanded 1.1',\n  },\n  {\n    label: 'Expanded 1.2 with a lot of text',\n  },\n]\nrender(\n  <Table.ScrollView>\n    <Table mode=\"accordion\" accordionChevronPlacement=\"end\">\n      <thead>\n        <Tr>\n          <Th\n            noWrap\n            style={{\n              width: '25%',\n            }}\n          >\n            Column A\n          </Th>\n          <Th\n            noWrap\n            style={{\n              width: '25%',\n            }}\n          >\n            Column B\n          </Th>\n          <Th\n            noWrap\n            style={{\n              width: '25%',\n            }}\n          >\n            Column C\n          </Th>\n          <Th\n            noWrap\n            style={{\n              width: '25%',\n            }}\n          >\n            Column D\n          </Th>\n        </Tr>\n      </thead>\n\n      <tbody>\n        <Tr>\n          <Td>Row 1</Td>\n          <Td>Row 1</Td>\n          <Td>Row 1</Td>\n          <Td>Row 1</Td>\n\n          {firstRowContent.map(({ label }) => (\n            <Tr.AccordionContent key={label}>\n              <Td>{label}</Td>\n              <Td>{label}</Td>\n              <Td>{label}</Td>\n              <Td>{label}</Td>\n            </Tr.AccordionContent>\n          ))}\n        </Tr>\n\n        <Tr>\n          <Td>Row 2</Td>\n          <Td>Row 2</Td>\n          <Td>Row 2</Td>\n          <Td>Row 2</Td>\n\n          <Tr.AccordionContent>\n            <Td>Expanded 2.1 with a lot of text</Td>\n            <Td>Expanded 2.1</Td>\n            <Td>Expanded 2.1</Td>\n            <Td>Expanded 2.1</Td>\n          </Tr.AccordionContent>\n\n          <Tr.AccordionContent>\n            <Td>Expanded 2.2 with a lot of text</Td>\n            <Td>Expanded 2.2</Td>\n            <Td>Expanded 2.2</Td>\n            <Td>Expanded 2.2</Td>\n          </Tr.AccordionContent>\n\n          <Tr.AccordionContent>\n            <Td>Expanded 2.3 with a lot of text</Td>\n            <Td>Expanded 2.3</Td>\n            <Td>Expanded 2.3</Td>\n            <Td>Expanded 2.3</Td>\n          </Tr.AccordionContent>\n        </Tr>\n      </tbody>\n    </Table>\n  </Table.ScrollView>,\n)\n"}),F=()=>(0,d.jsx)(i.Z,{hideCode:!0,"data-visual-test":"table-navigation",noInline:!0,children:'const NavigationTable = ({ id, showCheckbox = false, ...props }) => {\n  const TdCheckbox = () => {\n    return <Checkbox label="Select row" label_sr_only />\n  }\n  const TdInput = () => {\n    return <Input label="Label" label_sr_only size={4} />\n  }\n  const Row = ({ nr }) => {\n    const shareId = id + \'-\' + nr\n    return (\n      <Tr\n        id={shareId}\n        onClick={() => {\n          console.log(\'your navigation logic here\')\n          // window.location.href = \'https://eufemia.dnb.no/\'\n        }}\n      >\n        <Td>{showCheckbox ? <TdCheckbox /> : \'Row \' + nr}</Td>\n        <Td>Row {nr}</Td>\n        <Td spacing="horizontal">\n          <TdInput />\n        </Td>\n        <Td align="right">Row {nr}</Td>\n      </Tr>\n    )\n  }\n  return (\n    <Table mode="navigation" id={id} {...props}>\n      <caption className="dnb-sr-only">A Table Caption</caption>\n\n      <thead>\n        <Tr>\n          <Th>Column A</Th>\n          <Th>Column B</Th>\n          <Th>Column C</Th>\n          <Th align="right">Column D</Th>\n        </Tr>\n      </thead>\n\n      <tbody>\n        <Row nr="1" />\n        <Row nr="2" />\n        <Row nr="3" />\n      </tbody>\n    </Table>\n  )\n}\nrender(\n  <>\n    <Table.ScrollView>\n      <NavigationTable id="navigation-table-1" showCheckbox />\n    </Table.ScrollView>\n\n    <Table.ScrollView top>\n      <NavigationTable\n        id="navigation-table-2"\n        border\n        outline\n        size="medium"\n      />\n    </Table.ScrollView>\n  </>,\n)\n'}),D=()=>(0,d.jsx)(i.Z,{hideCode:!0,"data-visual-test":"table-navigation-mixed",noInline:!0,children:'const NavigationTable = ({ id, showCheckbox = false, ...props }) => {\n  const TdCheckbox = () => {\n    return <Checkbox label="Select row" label_sr_only />\n  }\n  const TdInput = () => {\n    return <Input label="Label" label_sr_only size={4} />\n  }\n  return (\n    <Table mode="navigation" id={id} {...props}>\n      <caption className="dnb-sr-only">A Table Caption</caption>\n\n      <thead>\n        <Tr>\n          <Th>Column A</Th>\n          <Th>Column B</Th>\n          <Th>Column C</Th>\n          <Th align="right">Column D</Th>\n        </Tr>\n      </thead>\n\n      <tbody>\n        <Tr\n          id={id + \'-\' + 1}\n          onClick={() => {\n            console.log(\'your navigation logic here\')\n            // window.location.href = \'https://eufemia.dnb.no/\'\n          }}\n        >\n          <Td>{showCheckbox ? <TdCheckbox /> : \'Row \' + 1}</Td>\n          <Td>Row {1}</Td>\n          <Td spacing="horizontal">\n            <TdInput />\n          </Td>\n          <Td align="right">Row {1}</Td>\n        </Tr>\n        <Tr id={id + \'-\' + 2}>\n          <Td>{showCheckbox ? <TdCheckbox /> : \'Row \' + 2}</Td>\n          <Td>Row {2}</Td>\n          <Td spacing="horizontal">\n            <TdInput />\n          </Td>\n          <Td align="right">Row {2}</Td>\n        </Tr>\n        <Tr\n          id={id + \'-\' + 3}\n          onClick={() => {\n            console.log(\'your navigation logic here\')\n            // window.location.href = \'https://eufemia.dnb.no/\'\n          }}\n        >\n          <Td>{showCheckbox ? <TdCheckbox /> : \'Row \' + 3}</Td>\n          <Td>Row {3}</Td>\n          <Td spacing="horizontal">\n            <TdInput />\n          </Td>\n          <Td align="right">Row {3}</Td>\n        </Tr>\n      </tbody>\n    </Table>\n  )\n}\nrender(\n  <>\n    <Table.ScrollView>\n      <NavigationTable\n        id="navigation-table-mixed-1"\n        showCheckbox\n        accordionChevronPlacement="end"\n      />\n    </Table.ScrollView>\n\n    <Table.ScrollView top>\n      <NavigationTable\n        id="navigation-table-mixed-2"\n        border\n        outline\n        size="medium"\n      />\n    </Table.ScrollView>\n  </>,\n)\n'}),z=()=>{var n;const e=/data-visual-test|fullscreen/.test(null===globalThis||void 0===globalThis||null===(n=globalThis.location)||void 0===n?void 0:n.href),t=globalThis.IS_TEST;return(0,d.jsx)(i.Z,{hideCode:!0,scope:{isFullscreen:e,isVisibleWhenVisualTest:t},children:'<Table.ScrollView>\n  <Table\n    sticky={isVisibleWhenVisualTest ? \'css-position\' : true}\n    stickyOffset={isFullscreen ? 0 : \'3.5rem\'}\n  >\n    <caption className="dnb-sr-only">A Table Caption</caption>\n    <thead>\n      <Tr>\n        <Th colSpan={2}>Header</Th>\n        <Th sortable reversed>\n          <Th.SortButton text="Sortable" title="Sort table column" />\n        </Th>\n        <Th sortable active>\n          <Th.SortButton text="Active" title="Sort table column" />\n        </Th>\n      </Tr>\n    </thead>\n    <tbody>\n      <Tr>\n        <Td>\n          <P>\n            Row 1 <b>with p</b>\n          </P>\n        </Td>\n        <Td>\n          <Code>Row 1 with code</Code>\n        </Td>\n        <Td>\n          <span>Row 1 with span</span>\n        </Td>\n        <Td>Row 1</Td>\n      </Tr>\n      <Tr>\n        <Td colSpan={2}>Column which spans over two columns</Td>\n        <Td>Row 2</Td>\n        <Td>Row 2</Td>\n      </Tr>\n      <Tr>\n        <Td>Row 3</Td>\n        <Td>Row 3</Td>\n        <Td>Row 3</Td>\n        <Td>Row 3</Td>\n      </Tr>\n    </tbody>\n    <tfoot>\n      <Tr>\n        <Td colSpan={3}>Footer</Td>\n        <Td>Sum</Td>\n      </Tr>\n    </tfoot>\n  </Table>\n</Table.ScrollView>\n'})},W=()=>(0,d.jsx)(i.Z,{hideCode:!0,"data-visual-test":"table-sticky",children:"<Table.ScrollView\n  style={{\n    maxHeight: '18rem',\n  }}\n>\n  <Table sticky=\"css-position\">\n    <thead>\n      <Tr>\n        <Th>Column 1</Th>\n        <Th>Column 2</Th>\n        <Th>Column 3</Th>\n        <Th>Column 4</Th>\n      </Tr>\n    </thead>\n    <tbody>\n      <Tr>\n        <Td>Row 1</Td>\n        <Td>Row 1</Td>\n        <Td>Row 1</Td>\n        <Td>Row 1</Td>\n      </Tr>\n      <Tr>\n        <Td>Row 2</Td>\n        <Td>Row 2</Td>\n        <Td>Row 2</Td>\n        <Td>Row 2</Td>\n      </Tr>\n      <Tr>\n        <Td>Row 3</Td>\n        <Td>Row 3</Td>\n        <Td>Row 3</Td>\n        <Td>Row 3</Td>\n      </Tr>\n      <Tr>\n        <Td>Row 4</Td>\n        <Td>Row 4</Td>\n        <Td>Row 4</Td>\n        <Td>Row 4</Td>\n      </Tr>\n      <Tr>\n        <Td>Row 5</Td>\n        <Td>Row 5</Td>\n        <Td>Row 5</Td>\n        <Td>Row 5</Td>\n      </Tr>\n      <Tr>\n        <Td>Row 6</Td>\n        <Td>Row 6</Td>\n        <Td>Row 6</Td>\n        <Td>Row 6</Td>\n      </Tr>\n      <Tr>\n        <Td>Row 7</Td>\n        <Td>Row 7</Td>\n        <Td>Row 7</Td>\n        <Td>Row 7</Td>\n      </Tr>\n      <Tr>\n        <Td>Row 8</Td>\n        <Td>Row 8</Td>\n        <Td>Row 8</Td>\n        <Td>Row 8</Td>\n      </Tr>\n      <Tr>\n        <Td>Row 9</Td>\n        <Td>Row 9</Td>\n        <Td>Row 9</Td>\n        <Td>Row 9</Td>\n      </Tr>\n      <Tr>\n        <Td>Row 10</Td>\n        <Td>Row 10</Td>\n        <Td>Row 10</Td>\n        <Td>Row 10</Td>\n      </Tr>\n      <Tr>\n        <Td>Row 11</Td>\n        <Td>Row 11</Td>\n        <Td>Row 11</Td>\n        <Td>Row 11</Td>\n      </Tr>\n      <Tr>\n        <Td>Row 12</Td>\n        <Td>Row 12</Td>\n        <Td>Row 12</Td>\n        <Td>Row 12</Td>\n      </Tr>\n    </tbody>\n  </Table>\n</Table.ScrollView>\n"});function M(){return(0,d.jsx)(i.Z,{hideCode:!0,noInline:!0,children:"const TablePagination = () => {\n  const amountPerPage = 5\n  const [currentPage, setCurrentPage] = React.useState(1)\n  const [data] = React.useState(() => getDataFromAPI(0, 100))\n  return (\n    <Pagination\n      page_count={data.length / amountPerPage}\n      current_page={currentPage}\n      on_change={({ pageNumber }) => {\n        setCurrentPage(pageNumber)\n      }}\n    >\n      <MakeTable\n        currentPage={currentPage}\n        amountPerPage={amountPerPage}\n        data={data}\n      />\n    </Pagination>\n  )\n  function getDataFromAPI(offset, max) {\n    const list = []\n    for (let i = offset + 1, l = offset + max; i <= l; i++) {\n      list.push({\n        name: 'Row ' + i,\n      })\n    }\n    return list\n  }\n  function MakeTable({ currentPage, amountPerPage, data }) {\n    const offset = currentPage * amountPerPage - amountPerPage\n    const tableBody = data\n      .slice(offset, offset + amountPerPage)\n      .map(({ name }, i) => {\n        return (\n          <Tr key={i}>\n            <Td>{name}</Td>\n          </Tr>\n        )\n      })\n    return (\n      <Table.ScrollView>\n        <Table>\n          <thead>\n            <Tr>\n              <Th>Column</Th>\n            </Tr>\n          </thead>\n          <tbody>{tableBody}</tbody>\n        </Table>\n      </Table.ScrollView>\n    )\n  }\n}\nrender(<TablePagination />)\n"})}const L=()=>(0,d.jsx)(i.Z,{hideToolbar:!0,hidePreview:!0,scope:{TableContainer:C},children:"<TableContainer>\n  <TableContainer.Head>\n    <H2>Heading</H2>\n  </TableContainer.Head>\n\n  <TableContainer.Body>\n    <Table>Content</Table>\n    <Table>Content</Table>\n  </TableContainer.Body>\n\n  <TableContainer.Foot>\n    <P>Footer</P>\n  </TableContainer.Foot>\n</TableContainer>\n"}),O=()=>{const n=n=>{let{title:t,children:o}=n;return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(e,{title:t+"With caption: ",children:[(0,d.jsx)("caption",{children:"Caption"}),o]}),(0,d.jsx)(e,{title:t+"No caption: ",children:o})]})},e=n=>{let{title:e,children:t}=n;return(0,d.jsxs)(d.Fragment,{children:[e+"Basic",(0,d.jsx)(b.ZP,{children:t}),e+"Border",(0,d.jsx)(b.ZP,{border:!0,children:t}),e+"Outline",(0,d.jsx)(b.ZP,{outline:!0,children:t}),e+"Border and outline",(0,d.jsx)(b.ZP,{border:!0,outline:!0,children:t})]})},t=()=>(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)("thead",{children:(0,d.jsxs)(p.Z,{children:[(0,d.jsx)(u.Z,{children:"Th A"}),(0,d.jsx)(u.Z,{children:"Th B"}),(0,d.jsx)(u.Z,{children:"Th C"})]})}),(0,d.jsxs)("tbody",{children:[(0,d.jsxs)(p.Z,{children:[(0,d.jsx)(w.Z,{children:"Td 1"}),(0,d.jsx)(w.Z,{children:"Td 1"}),(0,d.jsx)(w.Z,{children:"Td 1"})]}),(0,d.jsxs)(p.Z,{children:[(0,d.jsx)(w.Z,{children:"Td 2"}),(0,d.jsx)(w.Z,{children:"Td 2"}),(0,d.jsx)(w.Z,{children:"Td 2"})]}),(0,d.jsxs)(p.Z,{children:[(0,d.jsx)(w.Z,{children:"Td 3"}),(0,d.jsx)(w.Z,{children:"Td 3"}),(0,d.jsx)(w.Z,{children:"Td 3"})]})]})]}),o=()=>(0,d.jsx)(d.Fragment,{children:(0,d.jsxs)("tbody",{children:[(0,d.jsxs)(p.Z,{children:[(0,d.jsx)(w.Z,{children:"Td 1"}),(0,d.jsx)(w.Z,{children:"Td 1"}),(0,d.jsx)(w.Z,{children:"Td 1"})]}),(0,d.jsxs)(p.Z,{children:[(0,d.jsx)(w.Z,{children:"Td 2"}),(0,d.jsx)(w.Z,{children:"Td 2"}),(0,d.jsx)(w.Z,{children:"Td 2"})]}),(0,d.jsxs)(p.Z,{children:[(0,d.jsx)(w.Z,{children:"Td 3"}),(0,d.jsx)(w.Z,{children:"Td 3"}),(0,d.jsx)(w.Z,{children:"Td 3"})]})]})}),a=()=>(0,d.jsx)(d.Fragment,{children:(0,d.jsxs)("tbody",{children:[(0,d.jsxs)(p.Z,{children:[(0,d.jsx)(u.Z,{children:"Th 1"}),(0,d.jsx)(w.Z,{children:"Td 1"}),(0,d.jsx)(w.Z,{children:"Td 1"})]}),(0,d.jsxs)(p.Z,{children:[(0,d.jsx)(u.Z,{children:"Th 2"}),(0,d.jsx)(w.Z,{children:"Td 2"}),(0,d.jsx)(w.Z,{children:"Td 2"})]}),(0,d.jsxs)(p.Z,{children:[(0,d.jsx)(u.Z,{children:"Th 3"}),(0,d.jsx)(w.Z,{children:"Td 3"}),(0,d.jsx)(w.Z,{children:"Td 3"})]})]})}),r=()=>(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)("thead",{children:(0,d.jsxs)(p.Z,{children:[(0,d.jsx)(u.Z,{colSpan:2,children:"Th A"}),(0,d.jsx)(u.Z,{children:"Th B"})]})}),(0,d.jsxs)("tbody",{children:[(0,d.jsxs)(p.Z,{children:[(0,d.jsx)(w.Z,{children:"Td 1"}),(0,d.jsx)(w.Z,{children:"Td 1"}),(0,d.jsx)(w.Z,{rowSpan:2,children:"Td 1"})]}),(0,d.jsxs)(p.Z,{children:[(0,d.jsx)(w.Z,{rowSpan:2,children:"Td 2"}),(0,d.jsx)(w.Z,{children:"Td 2"})]}),(0,d.jsxs)(p.Z,{children:[(0,d.jsx)(w.Z,{children:"Td 3"}),(0,d.jsx)(w.Z,{children:"Td 3"})]})]})]}),l=()=>(0,d.jsx)(d.Fragment,{children:(0,d.jsxs)("tbody",{children:[(0,d.jsxs)(p.Z,{children:[(0,d.jsx)(u.Z,{rowSpan:2,children:"Th 1"}),(0,d.jsx)(w.Z,{children:"Td 1"}),(0,d.jsx)(w.Z,{children:"Td 1"})]}),(0,d.jsxs)(p.Z,{children:[(0,d.jsx)(w.Z,{children:"Td 2"}),(0,d.jsx)(w.Z,{children:"Td 2"})]}),(0,d.jsxs)(p.Z,{children:[(0,d.jsx)(u.Z,{colSpan:2,children:"Th 3"}),(0,d.jsx)(w.Z,{children:"Td 3"})]})]})});return(0,d.jsx)(i.Z,{scope:{ContentVariants:()=>(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)("div",{"data-visual-test":"table-combinations-default",children:(0,d.jsx)(n,{title:"Regular content: ",children:(0,d.jsx)(t,{})})}),(0,d.jsx)("div",{"data-visual-test":"table-combinations-no-header",children:(0,d.jsx)(n,{title:"No header: ",children:(0,d.jsx)(o,{})})}),(0,d.jsx)("div",{"data-visual-test":"table-combinations-row-header",children:(0,d.jsx)(n,{title:"Row headers: ",children:(0,d.jsx)(a,{})})}),(0,d.jsx)("div",{"data-visual-test":"table-combinations-spanning",children:(0,d.jsx)(n,{title:"Spanning: ",children:(0,d.jsx)(r,{})})}),(0,d.jsx)("div",{"data-visual-test":"table-combinations-row-header-spanning",children:(0,d.jsx)(n,{title:"Row headers spanning: ",children:(0,d.jsx)(l,{})})})]})},children:"<ContentVariants />\n"})},G=()=>(0,d.jsx)(i.Z,{scope:{useMedia:l.Z,composeIcon:c.Z,stopIcon:h.Z},hideCode:!0,"data-visual-test":"table-one-td",noInline:!0,children:'const Example = () => {\n  const { isSmall, isLarge } = useMedia()\n  const header = {\n    title: \'Tittel\',\n    description: \'Beskrivelse\',\n    status: \'Status\',\n    deadline: \'Frist\',\n  }\n  const content = {\n    title: \'Lorem ipsum\',\n    description: \'Lorem ipsum\',\n    status: <Badge content="Ikke påbegynt" />,\n    deadline: \'17.04.2025\',\n  }\n  const align = isLarge ? \'flex-end\' : isSmall ? \'center\' : \'flex-start\'\n  const tableRow = (\n    <>\n      {isLarge ? (\n        <Tr>\n          <Td>{content.title}</Td>\n          <Td>{content.description}</Td>\n          <Td>{content.status}</Td>\n          <Td>{content.deadline}</Td>\n        </Tr>\n      ) : (\n        <>\n          <Tr variant="odd">\n            <Th scope="row">{header.title}</Th>\n            <Td>{content.title}</Td>\n          </Tr>\n          <Tr>\n            <Th scope="row">{header.description}</Th>\n            <Td>{content.description}</Td>\n          </Tr>\n          <Tr>\n            <Th scope="row">{header.status}</Th>\n            <Td>{content.status}</Td>\n          </Tr>\n          <Tr>\n            <Th scope="row">{header.deadline}</Th>\n            <Td>{content.deadline}</Td>\n          </Tr>\n        </>\n      )}\n\n      <Tr variant="odd">\n        <Td colSpan={isLarge ? 4 : 2} aria-label={header.title}>\n          <Flex.Horizontal justify={align}>\n            <Button\n              variant="tertiary"\n              icon={stopIcon}\n              icon_position="left"\n            >\n              Avvis signering\n            </Button>\n            <Button variant="secondary" icon={composeIcon}>\n              Start signering\n            </Button>\n          </Flex.Horizontal>\n        </Td>\n      </Tr>\n    </>\n  )\n  const MyTable = () => (\n    <Table.ScrollView>\n      <Table border outline size="medium">\n        {isLarge && (\n          <thead>\n            <Tr noWrap>\n              <Th>{header.title}</Th>\n              <Th>{header.description}</Th>\n              <Th>{header.status}</Th>\n              <Th>{header.deadline}</Th>\n            </Tr>\n          </thead>\n        )}\n\n        <tbody>\n          {tableRow}\n          {tableRow}\n        </tbody>\n      </Table>\n    </Table.ScrollView>\n  )\n  return (\n    <Card title="Card title" responsive={false} innerSpace={0} filled>\n      <MyTable />\n    </Card>\n  )\n}\nrender(<Example />)\n'});function U(n){const e=Object.assign({h2:"h2",h3:"h3",p:"p",strong:"strong",code:"code",h4:"h4",h5:"h5",pre:"pre"},(0,a.a)(),n.components),{VisibilityByTheme:t,VisibleWhenVisualTest:r}=e;return o||q("Examples",!1),H||q("Examples.Accordion",!0),N||q("Examples.AccordionMixed",!0),E||q("Examples.AccordionRow",!0),B||q("Examples.ClassHelpers",!0),A||q("Examples.ContainerEmptyHeaderFooter",!0),L||q("Examples.InOneContainer",!0),I||q("Examples.LongHeader",!0),F||q("Examples.Navigation",!0),D||q("Examples.NavigationMixed",!0),M||q("Examples.PaginationTable",!0),G||q("Examples.ResponsiveInCard",!0),Z||q("Examples.RowScopeOnly",!0),v||q("Examples.SizeMedium",!0),S||q("Examples.SizeSmall",!0),V||q("Examples.StackedContainer",!0),z||q("Examples.Sticky",!0),W||q("Examples.StickyMaxHeight",!0),f||q("Examples.VariantBasic",!0),O||q("Examples.VariantCombinations",!0),_||q("Examples.VariantComplex",!0),k||q("Examples.VariantFixed",!0),P||q("Examples.WithoutClasses",!0),t||q("VisibilityByTheme",!0),r||q("VisibleWhenVisualTest",!0),(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(e.h2,{children:"Demos"}),"\n",(0,d.jsx)(e.h3,{children:"Basic table"}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.strong,{children:"NB:"})," In this example, the sort buttons do react on your input. But will not change the table data."]}),"\n",(0,d.jsx)(f,{}),"\n",(0,d.jsx)(e.h3,{children:"Complex table"}),"\n",(0,d.jsxs)(e.p,{children:["You can force a row to overwrite the automated odd/even counting by providing e.g. ",(0,d.jsx)(e.code,{children:'variant="even"'})," to a ",(0,d.jsx)(e.code,{children:"<Tr />"}),". You can use this in combination with ",(0,d.jsx)(e.code,{children:"rowSpan"}),"."]}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.strong,{children:"NB:"})," The table header in the first column needs to have ",(0,d.jsx)(e.code,{children:'scope="row"'}),"!"]}),"\n",(0,d.jsx)(_,{}),"\n",(0,d.jsx)(e.h3,{children:"Row scope headers only"}),"\n",(0,d.jsxs)(e.p,{children:["This table has only ",(0,d.jsx)(e.code,{children:'scope="row"'})," and ",(0,d.jsx)(e.code,{children:'scope="rowgroup"'})," headers – without the default ",(0,d.jsx)(e.code,{children:'scope="col"'}),"."]}),"\n",(0,d.jsx)(Z,{}),"\n",(0,d.jsx)(e.h3,{children:"Fixed table"}),"\n",(0,d.jsx)(k,{}),"\n",(0,d.jsx)(e.h3,{children:"Medium and small sized"}),"\n",(0,d.jsx)(v,{}),"\n",(0,d.jsxs)(e.p,{children:["A ",(0,d.jsx)(e.code,{children:"small"})," sized table is only for special circumstances, where a lot of data needs to be shown on the screen at the same time."]}),"\n",(0,d.jsx)(S,{}),"\n",(0,d.jsx)(e.h3,{children:"Table with accordion"}),"\n",(0,d.jsx)(e.h4,{children:"Expand a single container"}),"\n",(0,d.jsxs)(e.p,{children:["The second table uses both a ",(0,d.jsx)(e.code,{children:"border"})," and an ",(0,d.jsx)(e.code,{children:"outline"}),"."]}),"\n",(0,d.jsx)(H,{}),"\n",(0,d.jsx)(e.h4,{children:"Expand additional rows"}),"\n",(0,d.jsx)(e.p,{children:"It's also possible to use accordion to expand the table with more rows."}),"\n",(0,d.jsx)(E,{}),"\n",(0,d.jsx)(e.h5,{children:"Collapse all rows at once"}),"\n",(0,d.jsxs)(e.p,{children:["You can collapse all expanded rows by sending a ref to the ",(0,d.jsx)(e.code,{children:"collapseAllHandleRef"})," property and calling the ",(0,d.jsx)(e.code,{children:".current()"})," function on your ref."]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-jsx",children:'const myTableCollapseAll = React.useRef<() => void>()\n\nreturn (\n  <button onClick={() => myTableCollapseAll.current()}>\n    Close all rows\n  </button>\n\n  <Table mode="accordion" collapseAllHandleRef={myTableCollapseAll}>\n    {/* ... your table code */}\n  </Table>\n)\n'})}),"\n",(0,d.jsx)(e.h3,{children:"Table with navigation"}),"\n",(0,d.jsx)(F,{}),"\n",(0,d.jsx)(e.h3,{children:"Table with sticky header"}),"\n",(0,d.jsx)(z,{}),"\n",(0,d.jsx)(e.h3,{children:"Table with a max height"}),"\n",(0,d.jsxs)(e.p,{children:["A sticky table header with ",(0,d.jsx)(e.code,{children:'sticky="css-position"'})," and ",(0,d.jsx)(e.code,{children:"max-height"})," on the ",(0,d.jsx)(e.code,{children:"Table.ScrollView"}),"."]}),"\n",(0,d.jsx)(W,{}),"\n",(0,d.jsx)(e.h3,{children:"Several tables in one container"}),"\n",(0,d.jsxs)("details",{children:[(0,d.jsx)("summary",{className:"dnb-p",children:(0,d.jsx)(e.p,{children:"Show how the import and syntax is structured."})}),(0,d.jsx)(L,{})]}),"\n",(0,d.jsx)(V,{}),"\n",(0,d.jsxs)(e.p,{children:["With no (empty) ",(0,d.jsx)(e.code,{children:"head"})," and ",(0,d.jsx)(e.code,{children:"foot"})," content."]}),"\n",(0,d.jsx)(A,{}),"\n",(0,d.jsx)(e.h3,{children:"Table with long header text (wrapping)"}),"\n",(0,d.jsx)(I,{}),"\n",(0,d.jsx)(e.h3,{children:"Table with pagination"}),"\n",(0,d.jsx)(t,{visible:"sbanken",children:(0,d.jsx)(e.p,{children:"This example is not yet fully supported using the Sbanken theme."})}),"\n",(0,d.jsx)(M,{}),"\n",(0,d.jsx)(e.h3,{children:"Responsive table in a Card"}),"\n",(0,d.jsxs)(e.p,{children:[(0,d.jsx)(e.strong,{children:"NB:"})," For tables with lots of content, it's best to avoid repeating the header for each row. This can be overwhelming for users who rely on screen readers."]}),"\n",(0,d.jsxs)(e.p,{children:["Also, it is important that the ",(0,d.jsx)(e.code,{children:"<td>"})," without a ",(0,d.jsx)(e.code,{children:"<th>"})," has a ",(0,d.jsx)(e.code,{children:"aria-label={header.title}"}),' to let users with screen readers know where "these tools" belong to.']}),"\n",(0,d.jsxs)(e.p,{children:["This example uses ",(0,d.jsx)(e.code,{children:'scope="row"'})," with a table header (",(0,d.jsx)(e.code,{children:"<th>"}),") in each row."]}),"\n",(0,d.jsx)(G,{}),"\n",(0,d.jsx)(e.h3,{children:"Example usage without and with classes"}),"\n",(0,d.jsx)(P,{}),"\n",(0,d.jsx)(B,{}),"\n",(0,d.jsx)(r,{children:(0,d.jsx)(O,{})}),"\n",(0,d.jsxs)(r,{children:[(0,d.jsx)(N,{}),(0,d.jsx)(D,{})]})]})}var Y=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,a.a)(),n.components);return e?(0,d.jsx)(e,Object.assign({},n,{children:(0,d.jsx)(U,n)})):U(n)};function q(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},62914:function(n,e,t){var o=t(52322);e.Z=n=>(0,o.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",width:16,height:16,fill:"none",viewBox:"0 0 16 16",...n,children:(0,o.jsx)("path",{stroke:"#000",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"m13.93 4.05.66-.66a1.4 1.4 0 1 0-1.98-1.98l-.66.66m1.98 1.98L8.65 9.33l-2.31.33.33-2.31 5.28-5.28m1.98 1.98-1.98-1.98M6 3.8H1.933A.933.933 0 0 0 1 4.735v9.333a.934.934 0 0 0 .933.934h9.334a.933.933 0 0 0 .933-.934V10"})})},53528:function(n,e,t){var o=t(52322);e.Z=n=>(0,o.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",width:16,height:16,fill:"none",viewBox:"0 0 16 16",...n,children:(0,o.jsx)("path",{stroke:"#000",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:1.5,d:"m13.454 6.115-.909-.979m.91.98v1.017m0-1.018v1.018M5.134 15h7.32a1 1 0 0 0 1-1V7.133M6.53 1H3c-.552 0-1 .445-1 .998v9.85c0 .552.448.998 1 .998h6.364a1 1 0 0 0 1-1V4.962M6.53 1h.573a1 1 0 0 1 .723.309l2.26 2.363a1 1 0 0 1 .278.69v.6M6.53 1v2.962a1 1 0 0 0 1 1h2.834m3.09 2.17h-.909"})})},37419:function(n,e,t){var o=t(52322);e.Z=n=>(0,o.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",width:16,height:16,fill:"none",viewBox:"0 0 16 16",...n,children:(0,o.jsx)("path",{stroke:"#000",strokeWidth:1.5,d:"M12.95 3.05a7 7 0 0 0-9.9 9.9m9.9-9.9a7 7 0 1 1-9.9 9.9m9.9-9.9-9.9 9.9"})})}}]);
//# sourceMappingURL=0d25e9d45da1a97d0df23e6c13451afbee6577fb-ca8abc51181163896a62.js.map