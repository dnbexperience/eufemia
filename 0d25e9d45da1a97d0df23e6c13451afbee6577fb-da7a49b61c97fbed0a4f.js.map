{"version":3,"file":"0d25e9d45da1a97d0df23e6c13451afbee6577fb-da7a49b61c97fbed0a4f.js","mappings":"0JAqBA,IAlBiBA,IACfC,EAAAA,EAAAA,KAAA,OACEC,MAAM,6BACNC,MAAO,GACPC,OAAQ,GACRC,KAAK,OACLC,QAAQ,eACJN,EAAKO,UAETN,EAAAA,EAAAA,KAAA,QACEO,OAAO,OACPC,cAAc,QACdC,eAAe,QACfC,YAAa,IACbC,EAAE,8N,uCCIR,IAlBcZ,IACZC,EAAAA,EAAAA,KAAA,OACEC,MAAM,6BACNC,MAAO,GACPC,OAAQ,GACRC,KAAK,OACLC,QAAQ,eACJN,EAAKO,UAETN,EAAAA,EAAAA,KAAA,QACEO,OAAO,OACPC,cAAc,QACdC,eAAe,QACfC,YAAa,IACbC,EAAE,8R,uCCER,IAhBcZ,IACZC,EAAAA,EAAAA,KAAA,OACEC,MAAM,6BACNC,MAAO,GACPC,OAAQ,GACRC,KAAK,OACLC,QAAQ,eACJN,EAAKO,UAETN,EAAAA,EAAAA,KAAA,QACEO,OAAO,OACPG,YAAa,IACbC,EAAE,6E,6iCCkBO,SAASC,EAAeb,GAAgC,IAADc,EAAAC,EACpE,MAAM,SAAER,EAAQ,UAAES,KAAcC,GAASjB,EACnCkB,GAAiBC,EAAAA,EAAAA,IAAqBnB,IAE5CoB,EAAAA,EAAAA,IAAsBpB,EAAOiB,GAE7B,MAAMI,EACJC,EAAAA,EAGIC,EADUC,MAAMC,QAAQlB,GACJA,EAAW,CAACA,GAStC,OAPc,QAAVO,EAAAS,EAAQ,UAAE,IAAAT,OAAA,EAAVA,EAAYY,QAASb,EAAec,MACtCJ,EAAQK,SAAQ3B,EAAAA,EAAAA,KAACY,EAAec,KAAI,GAAK,UAE7B,QAAVZ,EAAAQ,EAAQ,UAAE,IAAAR,OAAA,EAAVA,EAAYW,QAASb,EAAegB,MACtCN,EAAQO,MAAK7B,EAAAA,EAAAA,KAACY,EAAegB,KAAI,GAAK,UAItC5B,EAAAA,EAAAA,KAAA,WACEe,UAAWe,IACT,uBACAf,EACAE,MAEED,EAAIV,UAERN,EAAAA,EAAAA,KAACoB,EAAU,CAAAd,SAAEgB,KAGnB,CA6EAV,EAAemB,KAlER,SACLhC,GAEA,MAAM,SAAEO,EAAQ,UAAES,KAAcC,GAASjB,EAEzC,OACEC,EAAAA,EAAAA,KAAA,OACEe,UAAWe,IAAW,6BAA8Bf,MAChDC,EAAIV,SAEPA,GAGP,EAsDAM,EAAec,KA7CR,SACL3B,GAEA,MAAM,SAAEO,EAAQ,UAAES,KAAcC,GAASjB,EAEzC,OACEC,EAAAA,EAAAA,KAAA,OACEe,UAAWe,IACT,8BACCxB,GAAY,oCACbS,MAEEC,EAAIV,SAEPA,GAGP,EA6BAM,EAAegB,KApBR,SACL7B,GAEA,MAAM,SAAEO,EAAQ,UAAES,KAAcC,GAASjB,EAEzC,OACEC,EAAAA,EAAAA,KAAA,OACEe,UAAWe,IACT,8BACCxB,GAAY,oCACbS,MAEEC,EAAIV,SAEPA,GAGP,EAIAM,EAAeoB,uBAAwB,ECkBvC,MAzGO,SACLC,EACAC,QAAmC,IAAnCA,IAAAA,EAAsC,CACpCC,UAAW,MACXC,MAAO,CAAC,MAAO,OAAQ,SAGzB,MAAMC,EAAeC,EAAAA,SAAc,IAC1BC,OAAOC,QAAQP,GAAQQ,QAAO,CAACC,EAAGC,KAAoB,IAAjBC,EAAMC,GAAKF,EAGrD,OAFAD,EAAIE,GAAQ,IAAKV,KAAaW,GAEvBH,CAAG,GACT,CAAC,IACH,CAACT,EAAQC,KAELY,EAAeC,GAAYT,EAAAA,SAA0BD,GAEtDW,EAA2BV,EAAAA,SAAc,KAC7C,MAAMW,EAAOV,OAAOC,QAAQM,GAE5B,OAAOG,EAAKR,QAAO,CAACC,EAAGQ,KAAoB,IAAjBN,EAAMC,GAAKK,EAgCnC,OA/BAR,EAAIE,GAAQ,KACV,MAAMO,EAAQ,IAAKL,EAAcF,KAE5BO,EAAMC,QAAUD,EAAME,eACzBF,EAAMhB,UAAYgB,EAAME,cACxBF,EAAMC,QAAS,EACfD,EAAME,cAAgB,MACZF,EAAMC,QAA8B,QAApBD,EAAMhB,WAGhCgB,EAAMhB,UA8Cd,SAAoBmB,GAA8C,IAA7C,UAAEnB,EAAS,KAAEU,EAAI,SAAEX,GAAuBoB,EAC7D,MAAMlB,EAAQF,EAASE,MAAMmB,QAAQC,GAC5BX,EAAKT,MAAMqB,SAASD,KAGxBpB,EAAMqB,SAAStB,KAClBA,EAAYC,EAAM,IAGpB,IAAIsB,EAAOvB,EAEX,IAAK,IAAIwB,EAAI,EAAGC,EAAIxB,EAAMyB,OAAQF,EAAIC,EAAGD,IAAK,CAG5C,GAAIxB,IAFSC,EAAMuB,GAEK,CACtB,IAAIG,EAAIH,EAAI,EACRG,GAAKF,IACPE,EAAI,GAENJ,EAAOtB,EAAM0B,GACb,KACF,CACF,CAEA,OAAOJ,CACT,CAvE0BK,CAAY,CAC5B5B,UAAWgB,EAAMhB,UACjBU,OACAX,aAEFiB,EAAMC,OAA6B,QAApBD,EAAMhB,WAPrBgB,EAAMC,QAAS,EAUjBL,EAAS,IACJE,EAAKR,QAAO,CAACC,EAAGsB,KAAoB,IAAjBpB,EAAMC,GAAKmB,EAM/B,OALAtB,EAAIE,GAAQC,EACZH,EAAIE,GAAMQ,QAAS,EACI,QAAnBP,EAAKV,YACPO,EAAIE,GAAMS,cAAgBR,EAAKV,WAE1BO,CAAG,GACT,CAAC,GACJ,CAACE,GAAOO,GACR,EAGGT,CAAG,GACT,CAAC,EAAE,GACL,CAACI,IAEJ,IAAImB,EAAiB,KAmBrB,MAAO,CAAEC,UAlBoB3B,OAAOC,QAAQM,GAAeL,QACzD,CAACC,EAAGyB,KAAqC,IAAlCvB,GAAM,OAAEQ,EAAM,UAAEjB,IAAYgC,EACjC,MAAMC,EACU,QAAdjC,OAAsBkC,EAA0B,SAAdlC,EAUpC,OARIiB,EACFa,EAAiBrB,EAEjBQ,GAAS,EAGXV,EAAIE,GAAQ,CAAEQ,SAAQjB,YAAWiC,YAE1B1B,CAAG,GAEZ,CAAC,GAGiBM,cAAaiB,iBA4BnC,ECvHO,MAAMK,EAAeA,KAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,qCAAAC,MAAA,CAC5BC,mBACA,GAAAC,UAAA,EAAAtE,SAAA,q9EAwGauE,EAAaA,KAAAN,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,yCAAAnE,SAAA,2xBAuCbwE,EAAYA,KAAAP,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,wCAAAnE,SAAA,ozBAuCZyE,EAAiBA,KAAAR,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,qCAAAnE,SAAA,6mCAoDjB0E,EAAeA,KAAAT,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,4CAAAnE,SAAA,2WAsBf2E,EAAeA,KAAAV,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,mCAAAG,UAAA,EAAAtE,SAAA,whEAmGf4E,EAAmBA,KAAO,IAADC,EACpC,MAAMC,EAAe,8BAA8BC,KACvC,OAAVC,iBAAU,IAAVA,YAAoB,QAAVH,EAAVG,WAAYC,gBAAQ,IAAAJ,OAAV,EAAVA,EAAsBK,MAExB,OAAAjB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,uCAAAC,MAAA,CACF9D,eAAA,EACAwE,gBACAR,UAAA,EAAAtE,SAAA,y/FAHE,EAgJWmF,EAA6BA,KACxClB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,6CAAAC,MAAA,CACF9D,eACA,GAAAgE,UAAA,EAAAtE,SAAA,4qBAwCaoF,EAAeA,KAAAnB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,qCAAAnE,SAAA,6mCAsCfqF,EAAiBA,KAAApB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,wCAAAnE,SAAA,8tBAqCjBsF,EAAaA,KAAArB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,oCAAAnE,SAAA,y3BAqCbuF,EAAYA,KAAAtB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,uCAAAC,MAAA,CACzBoB,SAAA,IACAC,kBACA,MAAAnB,UAAA,EAAAtE,SAAA,i2EAkHa0F,EAAiBA,KAAAzB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,6CAAAC,MAAA,CAC9BoB,SAAA,IACAC,kBACA,MAAAnB,UAAA,EAAAtE,SAAA,m3FA6Ha2F,EAAeA,KAC1B1B,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,4CAAAG,UAAA,EAAAtE,SAAA,gqEAoFW4F,EAAaA,KAAA3B,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,wCAAAG,UAAA,EAAAtE,SAAA,ggDAyEb6F,EAAkBA,KAAA5B,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,8CAAAG,UAAA,EAAAtE,SAAA,upEA0FlB8F,EAASA,KAAO,IAADC,EAC1B,MAAMjB,EAAe,8BAA8BC,KACvC,OAAVC,iBAAU,IAAVA,YAAoB,QAAVe,EAAVf,WAAYC,gBAAQ,IAAAc,OAAV,EAAVA,EAAsBb,MAElBc,EAA0BhB,WAAWiB,QAC3C,OAAAhC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,EAAAC,MAAA,CACFU,eACAkB,2BACAhG,SAAA,iuCAHE,EA6DWkG,EAAkBA,KAC7BjC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,oCAAAnE,SAAA,6vDA4FK,SAASmG,IACd,OAAAlC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,EAAAG,UAAA,EAAAtE,SAAA,m2CAmEF,CAEO,MAAMoG,EAAiBA,KAAAnC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAmC,aAAA,EAAAC,aAAA,EAAAlC,MAAA,CAC9B9D,eACA,GAAAN,SAAA,wSAiBauG,EAAsBA,KACjC,MA8BMC,EAAkBnE,IAAA,IAAC,MAAEoE,EAAK,SAAEzG,GAAUqC,EAAA,OAC1CqE,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA3G,SAAA,EACE0G,EAAAA,EAAAA,MAACE,EAAa,CAACH,MAAOA,EAAQ,iBAAiBzG,SAAA,EAC7CN,EAAAA,EAAAA,KAAA,WAAAM,SAAS,YACRA,MAGHN,EAAAA,EAAAA,KAACkH,EAAa,CAACH,MAAOA,EAAQ,eAAezG,SAC1CA,MAEF,EAEC4G,EAAgBhE,IAAA,IAAC,MAAE6D,EAAK,SAAEzG,GAAU4C,EAAA,OACxC8D,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA3G,SAAA,CACGyG,EAAQ,SACT/G,EAAAA,EAAAA,KAACmH,EAAAA,GAAK,CAAA7G,SAAEA,IACPyG,EAAQ,UACT/G,EAAAA,EAAAA,KAACmH,EAAAA,GAAK,CAACC,QAAM,EAAA9G,SAAEA,IACdyG,EAAQ,WACT/G,EAAAA,EAAAA,KAACmH,EAAAA,GAAK,CAACE,SAAO,EAAA/G,SAAEA,IACfyG,EAAQ,sBACT/G,EAAAA,EAAAA,KAACmH,EAAAA,GAAK,CAACC,QAAM,EAACC,SAAO,EAAA/G,SAClBA,MAEF,EAGCgH,EAAiBA,KACrBN,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA3G,SAAA,EACEN,EAAAA,EAAAA,KAAA,SAAAM,UACE0G,EAAAA,EAAAA,MAACO,EAAAA,EAAE,CAAAjH,SAAA,EACDN,EAAAA,EAAAA,KAACwH,EAAAA,EAAE,CAAAlH,SAAC,UACJN,EAAAA,EAAAA,KAACwH,EAAAA,EAAE,CAAAlH,SAAC,UACJN,EAAAA,EAAAA,KAACwH,EAAAA,EAAE,CAAAlH,SAAC,eAGR0G,EAAAA,EAAAA,MAAA,SAAA1G,SAAA,EACE0G,EAAAA,EAAAA,MAACO,EAAAA,EAAE,CAAAjH,SAAA,EACDN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,aAEN0G,EAAAA,EAAAA,MAACO,EAAAA,EAAE,CAAAjH,SAAA,EACDN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,aAEN0G,EAAAA,EAAAA,MAACO,EAAAA,EAAE,CAAAjH,SAAA,EACDN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,kBAMNoH,EAAkBA,KACtB1H,EAAAA,EAAAA,KAAAiH,EAAAA,SAAA,CAAA3G,UACE0G,EAAAA,EAAAA,MAAA,SAAA1G,SAAA,EACE0G,EAAAA,EAAAA,MAACO,EAAAA,EAAE,CAAAjH,SAAA,EACDN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,aAEN0G,EAAAA,EAAAA,MAACO,EAAAA,EAAE,CAAAjH,SAAA,EACDN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,aAEN0G,EAAAA,EAAAA,MAACO,EAAAA,EAAE,CAAAjH,SAAA,EACDN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,iBAMNqH,EAAoBA,KACxB3H,EAAAA,EAAAA,KAAAiH,EAAAA,SAAA,CAAA3G,UACE0G,EAAAA,EAAAA,MAAA,SAAA1G,SAAA,EACE0G,EAAAA,EAAAA,MAACO,EAAAA,EAAE,CAAAjH,SAAA,EACDN,EAAAA,EAAAA,KAACwH,EAAAA,EAAE,CAAAlH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,aAEN0G,EAAAA,EAAAA,MAACO,EAAAA,EAAE,CAAAjH,SAAA,EACDN,EAAAA,EAAAA,KAACwH,EAAAA,EAAE,CAAAlH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,aAEN0G,EAAAA,EAAAA,MAACO,EAAAA,EAAE,CAAAjH,SAAA,EACDN,EAAAA,EAAAA,KAACwH,EAAAA,EAAE,CAAAlH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,iBAMNsH,EAAkBA,KACtBZ,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA3G,SAAA,EACEN,EAAAA,EAAAA,KAAA,SAAAM,UACE0G,EAAAA,EAAAA,MAACO,EAAAA,EAAE,CAAAjH,SAAA,EACDN,EAAAA,EAAAA,KAACwH,EAAAA,EAAE,CAACK,QAAS,EAAEvH,SAAC,UAChBN,EAAAA,EAAAA,KAACwH,EAAAA,EAAE,CAAAlH,SAAC,eAGR0G,EAAAA,EAAAA,MAAA,SAAA1G,SAAA,EACE0G,EAAAA,EAAAA,MAACO,EAAAA,EAAE,CAAAjH,SAAA,EACDN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAACK,QAAS,EAAExH,SAAC,aAElB0G,EAAAA,EAAAA,MAACO,EAAAA,EAAE,CAAAjH,SAAA,EACDN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAACK,QAAS,EAAExH,SAAC,UAChBN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,aAEN0G,EAAAA,EAAAA,MAACO,EAAAA,EAAE,CAAAjH,SAAA,EACDN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,kBAMNyH,EAA4BA,KAChC/H,EAAAA,EAAAA,KAAAiH,EAAAA,SAAA,CAAA3G,UACE0G,EAAAA,EAAAA,MAAA,SAAA1G,SAAA,EACE0G,EAAAA,EAAAA,MAACO,EAAAA,EAAE,CAAAjH,SAAA,EACDN,EAAAA,EAAAA,KAACwH,EAAAA,EAAE,CAACM,QAAS,EAAExH,SAAC,UAChBN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,aAEN0G,EAAAA,EAAAA,MAACO,EAAAA,EAAE,CAAAjH,SAAA,EACDN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,UACJN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,aAEN0G,EAAAA,EAAAA,MAACO,EAAAA,EAAE,CAAAjH,SAAA,EACDN,EAAAA,EAAAA,KAACwH,EAAAA,EAAE,CAACK,QAAS,EAAEvH,SAAC,UAEhBN,EAAAA,EAAAA,KAACyH,EAAAA,EAAE,CAAAnH,SAAC,iBAMZ,OAAAiE,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAE,MAAA,CACFsD,gBAlL0BA,KACtBhB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA3G,SAAA,EACEN,EAAAA,EAAAA,KAAA,OAAK,mBAAiB,6BAA4BM,UAChDN,EAAAA,EAAAA,KAAC8G,EAAe,CAACC,MAAM,oBAAmBzG,UACxCN,EAAAA,EAAAA,KAACsH,EAAc,SAGnBtH,EAAAA,EAAAA,KAAA,OAAK,mBAAiB,+BAA8BM,UAClDN,EAAAA,EAAAA,KAAC8G,EAAe,CAACC,MAAM,cAAazG,UAClCN,EAAAA,EAAAA,KAAC0H,EAAe,SAGpB1H,EAAAA,EAAAA,KAAA,OAAK,mBAAiB,gCAA+BM,UACnDN,EAAAA,EAAAA,KAAC8G,EAAe,CAACC,MAAM,gBAAezG,UACpCN,EAAAA,EAAAA,KAAC2H,EAAiB,SAGtB3H,EAAAA,EAAAA,KAAA,OAAK,mBAAiB,8BAA6BM,UACjDN,EAAAA,EAAAA,KAAC8G,EAAe,CAACC,MAAM,aAAYzG,UACjCN,EAAAA,EAAAA,KAAC4H,EAAe,SAGpB5H,EAAAA,EAAAA,KAAA,OAAK,mBAAiB,yCAAwCM,UAC5DN,EAAAA,EAAAA,KAAC8G,EAAe,CAACC,MAAM,yBAAwBzG,UAC7CN,EAAAA,EAAAA,KAAC+H,EAAyB,YA2JpCzH,SAAA,yBAFE,EAOW2H,EAAmBA,KAAA1D,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAE,MAAA,CAChCwD,SAAA,IACAC,YAAA,IACAC,SACA,KAAA3D,UAAA,oCAAAG,UAAA,EAAAtE,SAAA,o3EC3lDA,SAAS+H,EAAkBtI,GACzB,MAAMuI,EAAc/F,OAAOgG,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,OAAQ,SACRC,KAAM,OACNC,GAAI,KACJC,GAAI,KACJC,IAAK,QACJC,EAAAA,EAAAA,KAAsBjJ,EAAMkJ,aAAa,kBAACC,EAAiB,sBAAEC,GAAyBb,EA0BzF,OAzBKc,GAAUC,EAAqB,YAAY,GAC3CD,GAAoBC,EAAqB,sBAAsB,GAC/DD,GAAyBC,EAAqB,2BAA2B,GACzED,GAAuBC,EAAqB,yBAAyB,GACrED,GAAuBC,EAAqB,yBAAyB,GACrED,GAAqCC,EAAqB,uCAAuC,GACjGD,GAAyBC,EAAqB,2BAA2B,GACzED,GAAqBC,EAAqB,uBAAuB,GACjED,GAAqBC,EAAqB,uBAAuB,GACjED,GAA0BC,EAAqB,4BAA4B,GAC3ED,GAA0BC,EAAqB,4BAA4B,GAC3ED,GAA2BC,EAAqB,6BAA6B,GAC7ED,GAAuBC,EAAqB,yBAAyB,GACrED,GAAqBC,EAAqB,uBAAuB,GACjED,GAAoBC,EAAqB,sBAAsB,GAC/DD,GAA2BC,EAAqB,6BAA6B,GAC7ED,GAAiBC,EAAqB,mBAAmB,GACzDD,GAA0BC,EAAqB,4BAA4B,GAC3ED,GAAuBC,EAAqB,yBAAyB,GACrED,GAA8BC,EAAqB,gCAAgC,GACnFD,GAAyBC,EAAqB,2BAA2B,GACzED,GAAuBC,EAAqB,yBAAyB,GACrED,GAAyBC,EAAqB,2BAA2B,GACzEH,GAAmBG,EAAqB,qBAAqB,GAC7DF,GAAuBE,EAAqB,yBAAyB,IACnErC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtB3G,SAAU,EAACN,EAAAA,EAAAA,KAAKsI,EAAYE,GAAI,CAC9BlI,SAAU,UACR,MAAMN,EAAAA,EAAAA,KAAKsI,EAAYG,GAAI,CAC7BnI,SAAU,gBACR,MAAM0G,EAAAA,EAAAA,MAAMsB,EAAYI,EAAG,CAC7BpI,SAAU,EAACN,EAAAA,EAAAA,KAAKsI,EAAYK,OAAQ,CAClCrI,SAAU,QACR,oGACF,MAAMN,EAAAA,EAAAA,KAAKoJ,EAAuB,CAAC,GAAI,MAAMpJ,EAAAA,EAAAA,KAAKsI,EAAYG,GAAI,CACpEnI,SAAU,kBACR,MAAM0G,EAAAA,EAAAA,MAAMsB,EAAYI,EAAG,CAC7BpI,SAAU,CAAC,uFAAuFN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CACvHtI,SAAU,mBACR,UAAUN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CACnCtI,SAAU,WACR,2CAA2CN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CACpEtI,SAAU,YACR,OACF,MAAM0G,EAAAA,EAAAA,MAAMsB,EAAYI,EAAG,CAC7BpI,SAAU,EAACN,EAAAA,EAAAA,KAAKsI,EAAYK,OAAQ,CAClCrI,SAAU,QACR,wDAAwDN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CACjFtI,SAAU,gBACR,OACF,MAAMN,EAAAA,EAAAA,KAAKoJ,EAAyB,CAAC,GAAI,MAAMpJ,EAAAA,EAAAA,KAAKsI,EAAYG,GAAI,CACtEnI,SAAU,2BACR,MAAM0G,EAAAA,EAAAA,MAAMsB,EAAYI,EAAG,CAC7BpI,SAAU,CAAC,wBAAwBN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CACxDtI,SAAU,gBACR,SAASN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CAClCtI,SAAU,qBACR,mCAAmCN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CAC5DtI,SAAU,gBACR,OACF,MAAMN,EAAAA,EAAAA,KAAKoJ,EAAuB,CAAC,GAAI,MAAMpJ,EAAAA,EAAAA,KAAKsI,EAAYG,GAAI,CACpEnI,SAAU,gBACR,MAAMN,EAAAA,EAAAA,KAAKoJ,EAAuB,CAAC,GAAI,MAAMpJ,EAAAA,EAAAA,KAAKsI,EAAYG,GAAI,CACpEnI,SAAU,2BACR,MAAMN,EAAAA,EAAAA,KAAKoJ,EAAqB,CAAC,GAAI,MAAMpC,EAAAA,EAAAA,MAAMsB,EAAYI,EAAG,CAClEpI,SAAU,CAAC,MAAMN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CACtCtI,SAAU,UACR,2HACF,MAAMN,EAAAA,EAAAA,KAAKoJ,EAAoB,CAAC,GAAI,MAAMpJ,EAAAA,EAAAA,KAAKsI,EAAYG,GAAI,CACjEnI,SAAU,yBACR,MAAMN,EAAAA,EAAAA,KAAKsI,EAAYO,GAAI,CAC7BvI,SAAU,8BACR,MAAM0G,EAAAA,EAAAA,MAAMsB,EAAYI,EAAG,CAC7BpI,SAAU,CAAC,iCAAiCN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CACjEtI,SAAU,WACR,YAAYN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CACrCtI,SAAU,YACR,OACF,MAAMN,EAAAA,EAAAA,KAAKoJ,EAAoB,CAAC,GAAI,MAAMpJ,EAAAA,EAAAA,KAAKsI,EAAYO,GAAI,CACjEvI,SAAU,2BACR,MAAMN,EAAAA,EAAAA,KAAKsI,EAAYI,EAAG,CAC5BpI,SAAU,4EACR,MAAMN,EAAAA,EAAAA,KAAKoJ,EAAuB,CAAC,GAAI,MAAMpJ,EAAAA,EAAAA,KAAKsI,EAAYQ,GAAI,CACpExI,SAAU,8BACR,MAAM0G,EAAAA,EAAAA,MAAMsB,EAAYI,EAAG,CAC7BpI,SAAU,CAAC,+DAA+DN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CAC/FtI,SAAU,yBACR,8BAA8BN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CACvDtI,SAAU,eACR,4BACF,MAAMN,EAAAA,EAAAA,KAAKsI,EAAYS,IAAK,CAC9BzI,UAAUN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CAC/B7H,UAAW,eACXT,SAAU,4RAEV,MAAMN,EAAAA,EAAAA,KAAKsI,EAAYG,GAAI,CAC7BnI,SAAU,0BACR,MAAMN,EAAAA,EAAAA,KAAKoJ,EAAqB,CAAC,GAAI,MAAMpJ,EAAAA,EAAAA,KAAKsI,EAAYG,GAAI,CAClEnI,SAAU,6BACR,MAAMN,EAAAA,EAAAA,KAAKoJ,EAAiB,CAAC,GAAI,MAAMpJ,EAAAA,EAAAA,KAAKsI,EAAYG,GAAI,CAC9DnI,SAAU,4BACR,MAAM0G,EAAAA,EAAAA,MAAMsB,EAAYI,EAAG,CAC7BpI,SAAU,CAAC,+BAA+BN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CAC/DtI,SAAU,0BACR,SAASN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CAClCtI,SAAU,eACR,YAAYN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CACrCtI,SAAU,qBACR,OACF,MAAMN,EAAAA,EAAAA,KAAKoJ,EAA0B,CAAC,GAAI,MAAMpJ,EAAAA,EAAAA,KAAKsI,EAAYG,GAAI,CACvEnI,SAAU,oCACR,MAAM0G,EAAAA,EAAAA,MAAM,UAAW,CACzB1G,SAAU,EAACN,EAAAA,EAAAA,KAAK,UAAW,CACzBe,UAAW,QACXT,UAAUN,EAAAA,EAAAA,KAAKsI,EAAYI,EAAG,CAC5BpI,SAAU,qDAEVN,EAAAA,EAAAA,KAAKoJ,EAAyB,CAAC,MACjC,MAAMpJ,EAAAA,EAAAA,KAAKoJ,EAA2B,CAAC,GAAI,MAAMpC,EAAAA,EAAAA,MAAMsB,EAAYI,EAAG,CACxEpI,SAAU,CAAC,oBAAoBN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CACpDtI,SAAU,SACR,SAASN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CAClCtI,SAAU,SACR,eACF,MAAMN,EAAAA,EAAAA,KAAKoJ,EAAqC,CAAC,GAAI,MAAMpJ,EAAAA,EAAAA,KAAKsI,EAAYG,GAAI,CAClFnI,SAAU,2CACR,MAAMN,EAAAA,EAAAA,KAAKoJ,EAAqB,CAAC,GAAI,MAAMpJ,EAAAA,EAAAA,KAAKsI,EAAYG,GAAI,CAClEnI,SAAU,0BACR,MAAMN,EAAAA,EAAAA,KAAKkJ,EAAmB,CAChCI,QAAS,UACThJ,UAAUN,EAAAA,EAAAA,KAAKsI,EAAYI,EAAG,CAC5BpI,SAAU,uEAEV,MAAMN,EAAAA,EAAAA,KAAKoJ,EAA0B,CAAC,GAAI,MAAMpJ,EAAAA,EAAAA,KAAKsI,EAAYG,GAAI,CACvEnI,SAAU,+BACR,MAAM0G,EAAAA,EAAAA,MAAMsB,EAAYI,EAAG,CAC7BpI,SAAU,EAACN,EAAAA,EAAAA,KAAKsI,EAAYK,OAAQ,CAClCrI,SAAU,QACR,4JACF,MAAM0G,EAAAA,EAAAA,MAAMsB,EAAYI,EAAG,CAC7BpI,SAAU,CAAC,mCAAmCN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CACnEtI,SAAU,SACR,eAAeN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CACxCtI,SAAU,SACR,WAAWN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CACpCtI,SAAU,8BACR,2EACF,MAAM0G,EAAAA,EAAAA,MAAMsB,EAAYI,EAAG,CAC7BpI,SAAU,CAAC,sBAAsBN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CACtDtI,SAAU,gBACR,0BAA0BN,EAAAA,EAAAA,KAAKsI,EAAYM,KAAM,CACnDtI,SAAU,SACR,oBACF,MAAMN,EAAAA,EAAAA,KAAKoJ,EAA2B,CAAC,GAAI,MAAMpJ,EAAAA,EAAAA,KAAKsI,EAAYG,GAAI,CACxEnI,SAAU,2CACR,MAAMN,EAAAA,EAAAA,KAAKoJ,EAAyB,CAAC,GAAI,MAAMpJ,EAAAA,EAAAA,KAAKoJ,EAAuB,CAAC,GAAI,MAAMpJ,EAAAA,EAAAA,KAAKmJ,EAAuB,CACpH7I,UAAUN,EAAAA,EAAAA,KAAKoJ,EAA8B,CAAC,KAC5C,MAAMpC,EAAAA,EAAAA,MAAMmC,EAAuB,CACrC7I,SAAU,EAACN,EAAAA,EAAAA,KAAKoJ,EAAyB,CAAC,IAAIpJ,EAAAA,EAAAA,KAAKoJ,EAA0B,CAAC,QAGpF,CAOA,MANA,SAAoBrJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOwJ,QAASC,GAAajH,OAAOgG,OAAO,CAAC,GAAGS,EAAAA,EAAAA,KAAsBjJ,EAAMkJ,YAC3E,OAAOO,GAAYxJ,EAAAA,EAAAA,KAAKwJ,EAAWjH,OAAOgG,OAAO,CAAC,EAAGxI,EAAO,CAC1DO,UAAUN,EAAAA,EAAAA,KAAKqI,EAAmBtI,MAC9BsI,EAAkBtI,EAC1B,EAEA,SAASsJ,EAAqBI,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,C","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/icons/dnb/compose.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/icons/dnb/copy.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/icons/dnb/stop.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/table/TableContainer.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/table/useHandleSortState.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/table/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/table/demos.mdx"],"sourcesContent":["/** This file is auto generated by convertSvgToJsx.ts */\n\nimport React from 'react'\nconst compose = (props) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={16}\n    height={16}\n    fill=\"none\"\n    viewBox=\"0 0 16 16\"\n    {...props}\n  >\n    <path\n      stroke=\"#000\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={1.5}\n      d=\"m13.93 4.05.66-.66a1.4 1.4 0 1 0-1.98-1.98l-.66.66m1.98 1.98L8.65 9.33l-2.31.33.33-2.31 5.28-5.28m1.98 1.98-1.98-1.98M6 3.8H1.933A.933.933 0 0 0 1 4.735v9.333a.934.934 0 0 0 .933.934h9.334a.933.933 0 0 0 .933-.934V10\"\n    />\n  </svg>\n)\nexport default compose\n","/** This file is auto generated by convertSvgToJsx.ts */\n\nimport React from 'react'\nconst copy = (props) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={16}\n    height={16}\n    fill=\"none\"\n    viewBox=\"0 0 16 16\"\n    {...props}\n  >\n    <path\n      stroke=\"#000\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={1.5}\n      d=\"m13.454 6.115-.909-.979m.91.98v1.017m0-1.018v1.018M5.134 15h7.32a1 1 0 0 0 1-1V7.133M6.53 1H3c-.552 0-1 .445-1 .998v9.85c0 .552.448.998 1 .998h6.364a1 1 0 0 0 1-1V4.962M6.53 1h.573a1 1 0 0 1 .723.309l2.26 2.363a1 1 0 0 1 .278.69v.6M6.53 1v2.962a1 1 0 0 0 1 1h2.834m3.09 2.17h-.909\"\n    />\n  </svg>\n)\nexport default copy\n","/** This file is auto generated by convertSvgToJsx.ts */\n\nimport React from 'react'\nconst stop = (props) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={16}\n    height={16}\n    fill=\"none\"\n    viewBox=\"0 0 16 16\"\n    {...props}\n  >\n    <path\n      stroke=\"#000\"\n      strokeWidth={1.5}\n      d=\"M12.95 3.05a7 7 0 0 0-9.9 9.9m9.9-9.9a7 7 0 1 1-9.9 9.9m9.9-9.9-9.9 9.9\"\n    />\n  </svg>\n)\nexport default stop\n","import React from 'react'\nimport classnames from 'classnames'\nimport TableScrollView, { TableScrollViewProps } from './TableScrollView'\nimport { createSpacingClasses } from '../space/SpacingUtils'\n\nimport type { TableProps } from './Table'\nimport type { SpacingProps } from '../space/types'\nimport { validateDOMAttributes } from '../../shared/component-helper'\n\nexport type TableContainerProps = {\n  /**\n   * The content of the component.\n   */\n  children:\n    | [\n        React.ReactElement<TableContainerHeadProps>,\n        React.ReactElement<TableContainerBodyProps>,\n        React.ReactElement<TableContainerFootProps>,\n      ]\n    | React.ReactElement<TableContainerBodyProps>\n}\n\nexport type TableContainerAllProps = TableContainerProps &\n  React.TableHTMLAttributes<HTMLTableRowElement> &\n  SpacingProps\n\ntype InternalTableContainerTableScrollView = Omit<\n  TableScrollViewProps,\n  'children'\n> & {\n  children: React.ReactNode\n}\n\nexport default function TableContainer(props: TableContainerAllProps) {\n  const { children, className, ...rest } = props\n  const spacingClasses = createSpacingClasses(props)\n\n  validateDOMAttributes(props, rest)\n\n  const ScrollView =\n    TableScrollView as React.FunctionComponent<InternalTableContainerTableScrollView>\n\n  const isArray = Array.isArray(children)\n  const content = isArray ? children : [children]\n\n  if (content[0]?.type !== TableContainer.Head) {\n    content.unshift(<TableContainer.Head key=\"head\" />)\n  }\n  if (content[2]?.type !== TableContainer.Foot) {\n    content.push(<TableContainer.Foot key=\"foot\" />)\n  }\n\n  return (\n    <section\n      className={classnames(\n        'dnb-table__container',\n        className,\n        spacingClasses\n      )}\n      {...rest}\n    >\n      <ScrollView>{content}</ScrollView>\n    </section>\n  )\n}\n\nexport type TableContainerBodyProps = {\n  /**\n   * The content of the component.\n   */\n  children:\n    | React.ReactElement<TableProps>\n    | Array<React.ReactElement<TableProps>>\n}\n\nexport function TableContainerBody(\n  props: TableContainerBodyProps & React.HTMLAttributes<HTMLDivElement>\n) {\n  const { children, className, ...rest } = props\n\n  return (\n    <div\n      className={classnames('dnb-table__container__body', className)}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport type TableContainerHeadProps = {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode\n}\n\nexport function TableContainerHead(\n  props: TableContainerHeadProps & React.HTMLAttributes<HTMLDivElement>\n) {\n  const { children, className, ...rest } = props\n\n  return (\n    <div\n      className={classnames(\n        'dnb-table__container__head',\n        !children && 'dnb-table__container__head--empty',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport type TableContainerFootProps = {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode\n}\n\nexport function TableContainerFoot(\n  props: TableContainerFootProps & React.HTMLAttributes<HTMLDivElement>\n) {\n  const { children, className, ...rest } = props\n\n  return (\n    <div\n      className={classnames(\n        'dnb-table__container__foot',\n        !children && 'dnb-table__container__foot--empty',\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </div>\n  )\n}\nTableContainer.Body = TableContainerBody\nTableContainer.Head = TableContainerHead\nTableContainer.Foot = TableContainerFoot\nTableContainer._supportsSpacingProps = true\n","import React from 'react'\n\nexport type useHandleSortStateOptions = {\n  /**\n   * Defines if the current column should be active or not.\n   * Defaults to false.\n   */\n  active?: boolean\n\n  /**\n   * Define the sorting direction. Can be \"asc\", \"desc\" or \"off\".\n   * Defaults to \"off\".\n   */\n  direction?: useHandleSortStateDirection\n\n  /**\n   * Define the possible modes.\n   * Defaults to [\"asc\", \"desc\", \"off\"].\n   */\n  modes?: Array<useHandleSortStateMode>\n}\nexport type useHandleSortStateDirection = 'asc' | 'desc' | 'off'\nexport type useHandleSortStateMode = 'asc' | 'desc' | 'off'\nexport type useHandleSortStateName = string\nexport type useHandleSortStateConfig = Record<\n  useHandleSortStateName,\n  useHandleSortStateOptions\n>\nexport type SortState = Record<\n  useHandleSortStateName,\n  {\n    active: boolean\n    reversed: boolean\n    direction: useHandleSortStateDirection | 'off'\n  }\n>\nexport type SortEventHandler = () => void\nexport type SortHandler = Record<useHandleSortStateName, SortEventHandler>\n\ntype SortStateInternalStateOptions = Omit<\n  useHandleSortStateOptions,\n  'direction'\n> & { direction: useHandleSortStateDirection | 'off' }\ntype SortStateInternalState = SortStateInternalStateOptions & {\n  reversed: boolean\n  lastDirection: useHandleSortStateDirection\n}\ntype SortStateInternalEntry = Record<\n  useHandleSortStateName,\n  SortStateInternalStateOptions\n>\ntype GetNextMode = {\n  direction: useHandleSortStateDirection\n  opts: SortStateInternalStateOptions\n  defaults: useHandleSortStateOptions\n}\n\nexport function useHandleSortState(\n  config: useHandleSortStateConfig,\n  defaults: useHandleSortStateOptions = {\n    direction: 'off',\n    modes: ['asc', 'desc', 'off'],\n  }\n) {\n  const initialState = React.useMemo(() => {\n    return Object.entries(config).reduce((acc, [name, opts]) => {\n      acc[name] = { ...defaults, ...opts }\n\n      return acc\n    }, {})\n  }, [config, defaults])\n\n  const [internalState, setState] = React.useState<SortState>(initialState)\n\n  const sortHandler: SortHandler = React.useMemo(() => {\n    const list = Object.entries(internalState as SortStateInternalEntry)\n\n    return list.reduce((acc, [name, opts]) => {\n      acc[name] = () => {\n        const state = { ...internalState[name] } as SortStateInternalState\n\n        if (!state.active && state.lastDirection) {\n          state.direction = state.lastDirection\n          state.active = true\n          state.lastDirection = null\n        } else if (!state.active && state.direction !== 'off') {\n          state.active = true\n        } else {\n          state.direction = getNextMode({\n            direction: state.direction,\n            opts,\n            defaults,\n          })\n          state.active = state.direction !== 'off'\n        }\n\n        setState({\n          ...list.reduce((acc, [name, opts]) => {\n            acc[name] = opts\n            acc[name].active = false\n            if (opts.direction !== 'off') {\n              acc[name].lastDirection = opts.direction\n            }\n            return acc\n          }, {}),\n          [name]: state,\n        })\n      }\n\n      return acc\n    }, {})\n  }, [internalState]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  let activeSortName = null\n  const sortState: SortState = Object.entries(internalState).reduce(\n    (acc, [name, { active, direction }]) => {\n      const reversed =\n        direction === 'off' ? undefined : direction === 'desc'\n\n      if (active) {\n        activeSortName = name\n      } else {\n        active = false\n      }\n\n      acc[name] = { active, direction, reversed }\n\n      return acc\n    },\n    {}\n  )\n\n  return { sortState, sortHandler, activeSortName }\n\n  function getNextMode({ direction, opts, defaults }: GetNextMode) {\n    const modes = defaults.modes.filter((mode) => {\n      return opts.modes.includes(mode)\n    })\n\n    if (!modes.includes(direction)) {\n      direction = modes[0]\n    }\n\n    let next = direction\n\n    for (let i = 0, l = modes.length; i < l; i++) {\n      const mode = modes[i]\n\n      if (direction === mode) {\n        let c = i + 1\n        if (c >= l) {\n          c = 0\n        }\n        next = modes[c]\n        break\n      }\n    }\n\n    return next\n  }\n}\n\nexport default useHandleSortState\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport styled from '@emotion/styled'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { useMedia } from '@dnb/eufemia/src/shared'\nimport { useCopyWithNotice } from '@dnb/eufemia/src/components/number-format/NumberUtils'\nimport {\n  H2,\n  P,\n  Dl,\n  Dt,\n  Dd,\n  Code,\n  Anchor,\n  Card,\n  Flex,\n  Badge,\n} from '@dnb/eufemia/src'\nimport {\n  stop as stopIcon,\n  compose as composeIcon,\n  copy as copyIcon,\n} from '@dnb/eufemia/src/icons'\nimport {\n  Button,\n  Pagination,\n  Checkbox,\n  Input,\n  Section,\n} from '@dnb/eufemia/src/components'\nimport Table from '@dnb/eufemia/src/components/table/Table'\nimport Th from '@dnb/eufemia/src/components/table/TableTh'\nimport Td from '@dnb/eufemia/src/components/table/TableTd'\nimport Tr from '@dnb/eufemia/src/components/table/TableTr'\nimport TableContainer from '@dnb/eufemia/src/components/table/TableContainer'\nimport useHandleSortState from '@dnb/eufemia/src/components/table/useHandleSortState'\n\nexport const VariantBasic = () => (\n  <ComponentBox\n    hideCode\n    data-visual-test=\"table-default\"\n    scope={{ useHandleSortState }}\n  >\n    {() => {\n      const BasicTable = () => {\n        const { sortState, sortHandler } = useHandleSortState({\n          column1: { direction: 'asc', active: true },\n          column2: { direction: 'desc', modes: ['asc', 'desc'] },\n        })\n\n        // Handle your \"column1\" logic\n        React.useEffect(() => {\n          switch (sortState.column1.direction) {\n            case 'asc':\n              break\n\n            case 'desc':\n              break\n\n            default:\n            case 'off':\n              break\n          }\n        }, [sortState.column1.direction])\n\n        return (\n          <Table.ScrollView>\n            <Table>\n              <caption className=\"dnb-sr-only\">A Table Caption</caption>\n              <thead>\n                <Tr>\n                  <Th>Column</Th>\n                  <Th>\n                    <Th.Horizontal>\n                      Help Button\n                      <Th.HelpButton>Help Content</Th.HelpButton>\n                    </Th.Horizontal>\n                  </Th>\n                  <Th\n                    sortable\n                    active={sortState.column1.active}\n                    reversed={sortState.column1.reversed}\n                  >\n                    <Th.SortButton\n                      text=\"Sortable Active\"\n                      title=\"Sort table column\"\n                      on_click={sortHandler.column1}\n                    />\n                  </Th>\n                  <Th\n                    sortable\n                    active={sortState.column2.active}\n                    reversed={sortState.column2.reversed}\n                    align=\"right\"\n                  >\n                    <Th.SortButton\n                      text=\"Sortable\"\n                      title=\"Sort table column\"\n                      on_click={sortHandler.column2}\n                    />\n                  </Th>\n                </Tr>\n              </thead>\n              <tbody>\n                <Tr>\n                  <Td>Row 1</Td>\n                  <Td>Row 1</Td>\n                  <Td>Row 1</Td>\n                  <Td align=\"right\">Row 1</Td>\n                </Tr>\n                <Tr>\n                  <Td>Row 2</Td>\n                  <Td>Row 2</Td>\n                  <Td>Row 2</Td>\n                  <Td align=\"right\">Row 2</Td>\n                </Tr>\n                <Tr>\n                  <Td>\n                    <P>Row 3 with paragraph</P>\n                  </Td>\n                  <Td>\n                    Row 3 with <Code>code</Code>\n                  </Td>\n                  <Td>\n                    <P>\n                      Row 3 with <b>medium paragraph</b>\n                    </P>\n                  </Td>\n                  <Td align=\"right\">\n                    Row 3 with <b>medium text</b>\n                  </Td>\n                </Tr>\n              </tbody>\n            </Table>\n          </Table.ScrollView>\n        )\n      }\n\n      return <BasicTable />\n    }}\n  </ComponentBox>\n)\n\nexport const SizeMedium = () => (\n  <ComponentBox hideCode data-visual-test=\"table-size-medium\">\n    <Table.ScrollView>\n      <Table size=\"medium\">\n        <caption className=\"dnb-sr-only\">A Table Caption</caption>\n        <thead>\n          <Tr>\n            <Th>Column</Th>\n            <Th sortable>\n              <Th.SortButton text=\"Sortable\" title=\"Sort table column\" />\n            </Th>\n            <Th align=\"right\">Column</Th>\n          </Tr>\n        </thead>\n        <tbody>\n          <Tr>\n            <Td>Row 1</Td>\n            <Td>Row 1</Td>\n            <Td align=\"right\">Row 1</Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <P>Row 2 with paragraph</P>\n            </Td>\n            <Td>\n              <P>\n                Row 2 with <b>medium paragraph</b>\n              </P>\n            </Td>\n            <Td align=\"right\">\n              Row 2 with <b>medium text</b>\n            </Td>\n          </Tr>\n        </tbody>\n      </Table>\n    </Table.ScrollView>\n  </ComponentBox>\n)\n\nexport const SizeSmall = () => (\n  <ComponentBox hideCode data-visual-test=\"table-size-small\">\n    <Table.ScrollView>\n      <Table size=\"small\">\n        <caption className=\"dnb-sr-only\">A Table Caption</caption>\n        <thead>\n          <Tr>\n            <Th>Column</Th>\n            <Th sortable>\n              <Th.SortButton text=\"Sortable\" title=\"Sort table column\" />\n            </Th>\n            <Th align=\"right\">Column</Th>\n          </Tr>\n        </thead>\n        <tbody>\n          <Tr>\n            <Td>Row 1</Td>\n            <Td>Row 1</Td>\n            <Td align=\"right\">Row 1</Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <P size=\"small\">Row 2 with paragraph</P>\n            </Td>\n            <Td>\n              <P size=\"small\">\n                Row 2 with <b>medium paragraph</b>\n              </P>\n            </Td>\n            <Td align=\"right\">\n              Row 2 with <b>medium text</b>\n            </Td>\n          </Tr>\n        </tbody>\n      </Table>\n    </Table.ScrollView>\n  </ComponentBox>\n)\n\nexport const VariantComplex = () => (\n  <ComponentBox hideCode data-visual-test=\"table-complex\">\n    <Table.ScrollView>\n      <Table border outline>\n        <caption>A Table Caption</caption>\n        <thead>\n          <Tr noWrap>\n            <Th />\n            <Th>\n              Column 2<br />\n              newline\n            </Th>\n            <Th colSpan={2}>Column 3 that spans</Th>\n          </Tr>\n        </thead>\n        <tbody>\n          <Tr variant=\"even\">\n            <Th scope=\"rowgroup\" rowSpan={2}>\n              Row 1+2 Header\n            </Th>\n            <Td rowSpan={2}>Row 1 that spans</Td>\n            <Td>Row 1</Td>\n            <Td>Row 1</Td>\n          </Tr>\n          <Tr variant=\"even\">\n            <Td>Row 2</Td>\n            <Td>Row 2</Td>\n          </Tr>\n          <Tr>\n            <Th scope=\"row\">\n              Row 3 Header <br />\n              newline\n            </Th>\n            <Td>Row 3</Td>\n            <Td spacing=\"horizontal\">\n              <Button variant=\"secondary\">Button</Button>\n            </Td>\n            <Td noSpacing align=\"right\">\n              <Code>noSpacing + align=\"right\"</Code>\n            </Td>\n          </Tr>\n          <Tr>\n            <Th scope=\"row\">Row 4 Header</Th>\n            <Td>Row 4</Td>\n            <Td colSpan={2}>Row 4</Td>\n          </Tr>\n        </tbody>\n      </Table>\n    </Table.ScrollView>\n  </ComponentBox>\n)\n\nexport const RowScopeOnly = () => (\n  <ComponentBox hideCode data-visual-test=\"table-row-scope-only\">\n    <Table.ScrollView>\n      <Table outline border>\n        <caption>A Table Caption</caption>\n        <tbody>\n          <Tr>\n            <Th scope=\"row\">Header A</Th>\n            <Td>Row 1</Td>\n            <Td>Row 1</Td>\n          </Tr>\n          <Tr>\n            <Th>Header B</Th>\n            <Td>Row 2</Td>\n            <Td>Row 2</Td>\n          </Tr>\n        </tbody>\n      </Table>\n    </Table.ScrollView>\n  </ComponentBox>\n)\n\nexport const VariantFixed = () => (\n  <ComponentBox hideCode data-visual-test=\"table-fixed\">\n    {() => {\n      const FixedTable = styled(Table)`\n        min-width: 70rem;\n\n        /* Define the width of the THs so they are aligned across tables */\n        thead {\n          th:nth-of-type(1) {\n            width: 30%;\n          }\n          th:nth-of-type(2) {\n            width: 20%;\n          }\n          th:nth-of-type(3) {\n            width: 10%;\n          }\n          th:nth-of-type(4) {\n            width: 10%;\n          }\n          th:nth-of-type(5) {\n            width: 5%;\n          }\n          th:nth-of-type(6) {\n            width: 5%;\n          }\n          th:nth-of-type(7) {\n            width: 5%;\n          }\n          th:nth-of-type(8) {\n            width: 5%;\n          }\n        }\n      `\n      return (\n        <Table.ScrollView>\n          <FixedTable fixed>\n            <caption className=\"dnb-sr-only\">A Table Caption</caption>\n            <thead>\n              <Tr noWrap>\n                <Th>Column 1</Th>\n                <Th>Column 2</Th>\n                <Th>Column 3</Th>\n                <Th>Column 4</Th>\n                <Th>Column 5</Th>\n                <Th>Column 6</Th>\n                <Th>Column 7</Th>\n                <Th align=\"right\">Column 8</Th>\n              </Tr>\n            </thead>\n            <tbody>\n              <Tr>\n                <Td>Row 1</Td>\n                <Td>Row 1</Td>\n                <Td>Row 1</Td>\n                <Td>Row 1</Td>\n                <Td>Row 1</Td>\n                <Td>Row 1</Td>\n                <Td>Row 1</Td>\n                <Td align=\"right\">Row 1</Td>\n              </Tr>\n              <Tr>\n                <Td>Row 2</Td>\n                <Td>Row 2</Td>\n                <Td>Row 2</Td>\n                <Td>Row 2</Td>\n                <Td>Row 2</Td>\n                <Td>Row 2</Td>\n                <Td>Row 2</Td>\n                <Td align=\"right\">Row 2</Td>\n              </Tr>\n              <Tr>\n                <Td>Row 3</Td>\n                <Td>Row 3</Td>\n                <Td>Row 3</Td>\n                <Td>Row 3</Td>\n                <Td>Row 3</Td>\n                <Td>Row 3</Td>\n                <Td>Row 3</Td>\n                <Td align=\"right\">Row 3</Td>\n              </Tr>\n              <Tr>\n                <Td>Row 4</Td>\n                <Td>Row 4</Td>\n                <Td>Row 4</Td>\n                <Td>Row 4</Td>\n                <Td>Row 4</Td>\n                <Td>Row 4</Td>\n                <Td>Row 4</Td>\n                <Td align=\"right\">Row 4</Td>\n              </Tr>\n            </tbody>\n          </FixedTable>\n        </Table.ScrollView>\n      )\n    }}\n  </ComponentBox>\n)\n\nexport const StackedContainer = () => {\n  const isFullscreen = /data-visual-test|fullscreen/.test(\n    globalThis?.location?.href,\n  )\n  return (\n    <ComponentBox\n      hideCode\n      data-visual-test=\"table-container\"\n      scope={{ TableContainer, isFullscreen }}\n    >\n      {() => {\n        const StyledContainer = styled(TableContainer)`\n          /* \n            Define the width of the THs so they are aligned across tables.\n            A \"fixed\" table width is needed in order to align all tables to act with the same column widths.\n          */\n          &,\n          .dnb-table__scroll-view {\n            max-width: 70rem;\n          }\n          .dnb-table__container__body {\n            min-width: 800px;\n          }\n          table {\n            th:nth-of-type(1),\n            td:nth-of-type(1) {\n              width: 30%;\n            }\n            th:nth-of-type(2) {\n              width: 30%;\n            }\n            th:nth-of-type(3) {\n              width: 20%;\n            }\n            th:nth-of-type(4) {\n              width: 20%;\n            }\n          }\n        `\n        return (\n          <StyledContainer\n            aria-label=\"I contain two tables\"\n            bottom=\"large\"\n          >\n            <TableContainer.Head>\n              <H2>Header</H2>\n              <P top>Text</P>\n            </TableContainer.Head>\n\n            <TableContainer.Body>\n              <Table\n                fixed\n                border\n                sticky\n                stickyOffset={isFullscreen ? 0 : '3.5rem'}\n              >\n                <caption className=\"dnb-sr-only\">Table One</caption>\n                <thead>\n                  <Tr noWrap>\n                    <Th>\n                      I have a superscript{' '}\n                      <sup>\n                        <Anchor href=\"#unique-ref-id\">1</Anchor>\n                      </sup>\n                    </Th>\n                    <Th>Column 2</Th>\n                    <Th>Column 3</Th>\n                    <Th>Column 4</Th>\n                  </Tr>\n                </thead>\n                <tbody>\n                  <Tr>\n                    <Td>Row 1</Td>\n                    <Td>Row 1</Td>\n                    <Td>Row 1</Td>\n                    <Td>Row 1</Td>\n                  </Tr>\n                  <Tr>\n                    <Td>Row 2</Td>\n                    <Td>Row 2</Td>\n                    <Td>Row 2</Td>\n                    <Td>Row 2</Td>\n                  </Tr>\n                </tbody>\n              </Table>\n\n              <Table\n                fixed\n                border\n                sticky\n                stickyOffset={isFullscreen ? 0 : '3.5rem'}\n              >\n                <caption className=\"dnb-sr-only\">Table Two</caption>\n                <thead>\n                  <Tr noWrap>\n                    <Th>Column 1</Th>\n                    <Th>Column 2</Th>\n                    <Th>Column 3</Th>\n                    <Th>Column 4</Th>\n                  </Tr>\n                </thead>\n                <tbody>\n                  <Tr>\n                    <Td rowSpan={2}>Row 1</Td>\n                    <Td>Row 1</Td>\n                    <Td>Row 1</Td>\n                    <Td>Row 1</Td>\n                  </Tr>\n                  <Tr>\n                    <Td rowSpan={2}>Row 2</Td>\n                    <Td>Row 2</Td>\n                    <Td>Row 2</Td>\n                  </Tr>\n                  <Tr>\n                    <Td>Row 3</Td>\n                    <Td>Row 3</Td>\n                    <Td>Row 3</Td>\n                  </Tr>\n                </tbody>\n              </Table>\n\n              <Table fixed border>\n                <tbody>\n                  <Tr>\n                    <Th scope=\"rowgroup\" rowSpan={2}>\n                      Row Header Group\n                    </Th>\n                    <Td>Row 1</Td>\n                    <Td>Row 1</Td>\n                  </Tr>\n                  <Tr>\n                    <Td>Row 2</Td>\n                    <Td>Row 2</Td>\n                  </Tr>\n                </tbody>\n              </Table>\n            </TableContainer.Body>\n\n            <TableContainer.Foot>\n              <P id=\"unique-ref-id\">Footer</P>\n            </TableContainer.Foot>\n          </StyledContainer>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const ContainerEmptyHeaderFooter = () => {\n  return (\n    <ComponentBox\n      hideCode\n      data-visual-test=\"table-container-empty\"\n      scope={{ TableContainer }}\n    >\n      {() => {\n        return (\n          <TableContainer bottom=\"large\">\n            <TableContainer.Body>\n              <Table border>\n                <thead>\n                  <Tr>\n                    <Th>Column 1</Th>\n                    <Th>Column 2</Th>\n                    <Th>Column 3</Th>\n                    <Th>Column 4</Th>\n                  </Tr>\n                </thead>\n                <tbody>\n                  <Tr>\n                    <Td>Row 1</Td>\n                    <Td>Row 1</Td>\n                    <Td>Row 1</Td>\n                    <Td>Row 1</Td>\n                  </Tr>\n                  <Tr>\n                    <Td>Row 2</Td>\n                    <Td>Row 2</Td>\n                    <Td>Row 2</Td>\n                    <Td>Row 2</Td>\n                  </Tr>\n                </tbody>\n              </Table>\n            </TableContainer.Body>\n          </TableContainer>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const ClassHelpers = () => (\n  <ComponentBox hideCode data-visual-test=\"table-classes\">\n    <Table.ScrollView>\n      <table className=\"dnb-table\">\n        <thead>\n          <tr className=\"dnb-table__tr\">\n            <th className=\"dnb-table__th\">.dnb-table__th</th>\n            <th className=\"dnb-table__th dnb-table--sortable dnb-table--reversed\">\n              <Th.SortButton\n                text=\"dnb-table--reversed\"\n                title=\"dnb-table__th dnb-table--sortable dnb-table--reversed\"\n              />\n            </th>\n            <th className=\"dnb-table__th dnb-table--sortable dnb-table--active\">\n              <Th.SortButton\n                text=\"dnb-table--active\"\n                title=\"dnb-table__th dnb-table--sortable dnb-table--active\"\n              />\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr className=\"dnb-table__tr dnb-table__tr--even\">\n            <td colSpan={3} className=\"dnb-table__td\">\n              .dnb-table__tr--even{' > '}.dnb-table__td\n            </td>\n          </tr>\n          <tr className=\"dnb-table__tr dnb-table__tr--odd\">\n            <td colSpan={3} className=\"dnb-table__td\">\n              .dnb-table__tr--odd{' > '}.dnb-table__td\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </Table.ScrollView>\n  </ComponentBox>\n)\n\nexport const WithoutClasses = () => (\n  <ComponentBox hideCode data-visual-test=\"table-no-classes\">\n    <Table.ScrollView>\n      <table className=\"dnb-table\">\n        <thead>\n          <tr>\n            <th>Header</th>\n            <th className=\"dnb-table--sortable dnb-table--reversed\">\n              <Th.SortButton text=\"Sortable\" />\n            </th>\n            <th className=\"dnb-table--sortable dnb-table--active\">\n              <Th.SortButton text=\"Active\" />\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Row 1</td>\n            <td>Row 1</td>\n            <td>Row 1</td>\n          </tr>\n          <tr>\n            <td>Row 2</td>\n            <td>Row 2</td>\n            <td>Row 2</td>\n          </tr>\n          <tr>\n            <td>Row 3</td>\n            <td>Row 3</td>\n            <td>Row 3</td>\n          </tr>\n        </tbody>\n      </table>\n    </Table.ScrollView>\n  </ComponentBox>\n)\n\nexport const LongHeader = () => (\n  <ComponentBox hideCode data-visual-test=\"table-header\">\n    <Table.ScrollView>\n      <Table>\n        <caption className=\"dnb-sr-only\">A Table Caption</caption>\n        <thead>\n          <Tr>\n            <Th colSpan={2}>\n              Static long header senectus ornare convallis ut at erat\n              imperdiet commodo\n            </Th>\n            <Th sortable reversed>\n              <Th.SortButton\n                text=\"Sortable long header ridiculus laoreet turpis netus at vitae\"\n                title=\"Sort table column\"\n              />\n            </Th>\n            <Th align=\"right\" sortable active>\n              <Th.SortButton\n                text=\"Active and right aligned long header ridiculus laoreet turpis netus at vitae\"\n                title=\"Sort table column\"\n              />\n            </Th>\n          </Tr>\n        </thead>\n        <tbody>\n          <Tr>\n            <Td colSpan={4}>\n              <P>col span of 4</P>\n            </Td>\n          </Tr>\n        </tbody>\n      </Table>\n    </Table.ScrollView>\n  </ComponentBox>\n)\n\nexport const Accordion = () => (\n  <ComponentBox\n    hideCode\n    data-visual-test=\"table-accordion\"\n    scope={{ copyIcon, useCopyWithNotice }}\n  >\n    {() => {\n      const AccordionTable = ({ id, showCheckbox = false, ...props }) => {\n        const TdCheckbox = () => {\n          return <Checkbox label=\"Select row\" label_sr_only />\n        }\n        const TdInput = () => {\n          return <Input label=\"Label\" label_sr_only size={4} />\n        }\n        const Content = ({ shareId }) => {\n          const ref = React.useRef()\n          const { copy } = useCopyWithNotice()\n\n          const shareHandler = () => {\n            const url = new URL(location.href)\n            url.hash = '#' + shareId\n            copy(url.toString(), ref.current)\n          }\n\n          return (\n            <>\n              <Button top icon=\"bell\" variant=\"secondary\">\n                Ring the bell\n              </Button>\n\n              <Section top spacing>\n                <Dl>\n                  <Dt>Favorittfarge</Dt>\n                  <Dd>Grønn</Dd>\n                  <Dt>Favorittmat</Dt>\n                  <Dd>Taco</Dd>\n                </Dl>\n              </Section>\n\n              <Button\n                top\n                variant=\"tertiary\"\n                icon={copyIcon}\n                icon_position=\"left\"\n                on_click={shareHandler}\n                inner_ref={ref}\n              >\n                Copy link to this row\n              </Button>\n            </>\n          )\n        }\n\n        const Row = ({ nr }) => {\n          const shareId = id + '-' + nr\n          return (\n            <Tr id={shareId}>\n              <Td>{showCheckbox ? <TdCheckbox /> : 'Row ' + nr}</Td>\n              <Td>Row {nr}</Td>\n              <Td spacing=\"horizontal\">\n                <TdInput />\n              </Td>\n              <Td align=\"right\">Row {nr}</Td>\n\n              <Td.AccordionContent>\n                <Content shareId={shareId} />\n              </Td.AccordionContent>\n            </Tr>\n          )\n        }\n\n        return (\n          <Table mode=\"accordion\" id={id} {...props}>\n            <caption className=\"dnb-sr-only\">A Table Caption</caption>\n\n            <thead>\n              <Tr>\n                <Th>Column A</Th>\n                <Th>Column B</Th>\n                <Th>Column C</Th>\n                <Th align=\"right\">Column D</Th>\n              </Tr>\n            </thead>\n\n            <tbody>\n              <Row nr=\"1\" />\n              <Row nr=\"2\" />\n              <Row nr=\"3\" />\n            </tbody>\n          </Table>\n        )\n      }\n\n      return (\n        <>\n          <Table.ScrollView>\n            <AccordionTable\n              id=\"accordion-table-1\"\n              showCheckbox\n              accordionChevronPlacement=\"end\"\n            />\n          </Table.ScrollView>\n\n          <Table.ScrollView top>\n            <AccordionTable\n              id=\"accordion-table-2\"\n              border\n              outline\n              size=\"medium\"\n            />\n          </Table.ScrollView>\n        </>\n      )\n    }}\n  </ComponentBox>\n)\n\nexport const AccordionMixed = () => (\n  <ComponentBox\n    hideCode\n    data-visual-test=\"table-accordion-mixed\"\n    scope={{ copyIcon, useCopyWithNotice }}\n  >\n    {() => {\n      const AccordionTable = ({ id, showCheckbox = false, ...props }) => {\n        const TdCheckbox = () => {\n          return <Checkbox label=\"Select row\" label_sr_only />\n        }\n        const TdInput = () => {\n          return <Input label=\"Label\" label_sr_only size={4} />\n        }\n        const Content = ({ shareId }) => {\n          const ref = React.useRef()\n          const { copy } = useCopyWithNotice()\n\n          const shareHandler = () => {\n            const url = new URL(location.href)\n            url.hash = '#' + shareId\n            copy(url.toString(), ref.current)\n          }\n\n          return (\n            <>\n              <Button top icon=\"bell\" variant=\"secondary\">\n                Ring the bell\n              </Button>\n\n              <Section top spacing>\n                <Dl>\n                  <Dt>Favorittfarge</Dt>\n                  <Dd>Grønn</Dd>\n                  <Dt>Favorittmat</Dt>\n                  <Dd>Taco</Dd>\n                </Dl>\n              </Section>\n\n              <Button\n                top\n                variant=\"tertiary\"\n                icon={copyIcon}\n                icon_position=\"left\"\n                on_click={shareHandler}\n                inner_ref={ref}\n              >\n                Copy link to this row\n              </Button>\n            </>\n          )\n        }\n\n        return (\n          <Table mode=\"accordion\" id={id} {...props}>\n            <caption className=\"dnb-sr-only\">A Table Caption</caption>\n\n            <thead>\n              <Tr>\n                <Th>Column A</Th>\n                <Th>Column B</Th>\n                <Th>Column C</Th>\n                <Th align=\"right\">Column D</Th>\n              </Tr>\n            </thead>\n\n            <tbody>\n              <Tr id={id + '-' + 1}>\n                <Td>{showCheckbox ? <TdCheckbox /> : 'Row ' + 1}</Td>\n                <Td>Row {1}</Td>\n                <Td spacing=\"horizontal\">\n                  <TdInput />\n                </Td>\n                <Td align=\"right\">Row {1}</Td>\n\n                <Td.AccordionContent>\n                  <Content shareId={id + '-' + 1} />\n                </Td.AccordionContent>\n              </Tr>\n              <Tr id={id + '-' + 2}>\n                <Td>{showCheckbox ? <TdCheckbox /> : 'Row ' + 2}</Td>\n                <Td>Row {2}</Td>\n                <Td spacing=\"horizontal\">\n                  <TdInput />\n                </Td>\n                <Td align=\"right\">Row {2}</Td>\n              </Tr>\n              <Tr id={id + '-' + 3}>\n                <Td>{showCheckbox ? <TdCheckbox /> : 'Row ' + 3}</Td>\n                <Td>Row {3}</Td>\n                <Td spacing=\"horizontal\">\n                  <TdInput />\n                </Td>\n                <Td align=\"right\">Row {3}</Td>\n\n                <Td.AccordionContent>\n                  <Content shareId={id + '-' + 3} />\n                </Td.AccordionContent>\n              </Tr>\n            </tbody>\n          </Table>\n        )\n      }\n\n      return (\n        <>\n          <Table.ScrollView>\n            <AccordionTable\n              id=\"accordion-table-mixed-1\"\n              showCheckbox\n              accordionChevronPlacement=\"end\"\n            />\n          </Table.ScrollView>\n\n          <Table.ScrollView top>\n            <AccordionTable\n              id=\"accordion-table-mixed-2\"\n              border\n              outline\n              size=\"medium\"\n            />\n          </Table.ScrollView>\n        </>\n      )\n    }}\n  </ComponentBox>\n)\n\nexport const AccordionRow = () => {\n  return (\n    <ComponentBox hideCode data-visual-test=\"table-accordion-rows\">\n      {() => {\n        const firstRowContent = [\n          {\n            label: 'Expanded 1.1',\n          },\n          {\n            label: 'Expanded 1.2 with a lot of text',\n          },\n        ]\n        return (\n          <Table.ScrollView>\n            <Table mode=\"accordion\" accordionChevronPlacement=\"end\">\n              <thead>\n                <Tr>\n                  <Th noWrap style={{ width: '25%' }}>\n                    Column A\n                  </Th>\n                  <Th noWrap style={{ width: '25%' }}>\n                    Column B\n                  </Th>\n                  <Th noWrap style={{ width: '25%' }}>\n                    Column C\n                  </Th>\n                  <Th noWrap style={{ width: '25%' }}>\n                    Column D\n                  </Th>\n                </Tr>\n              </thead>\n\n              <tbody>\n                <Tr>\n                  <Td>Row 1</Td>\n                  <Td>Row 1</Td>\n                  <Td>Row 1</Td>\n                  <Td>Row 1</Td>\n\n                  {firstRowContent.map(({ label }) => (\n                    <Tr.AccordionContent key={label}>\n                      <Td>{label}</Td>\n                      <Td>{label}</Td>\n                      <Td>{label}</Td>\n                      <Td>{label}</Td>\n                    </Tr.AccordionContent>\n                  ))}\n                </Tr>\n\n                <Tr>\n                  <Td>Row 2</Td>\n                  <Td>Row 2</Td>\n                  <Td>Row 2</Td>\n                  <Td>Row 2</Td>\n\n                  <Tr.AccordionContent>\n                    <Td>Expanded 2.1 with a lot of text</Td>\n                    <Td>Expanded 2.1</Td>\n                    <Td>Expanded 2.1</Td>\n                    <Td>Expanded 2.1</Td>\n                  </Tr.AccordionContent>\n\n                  <Tr.AccordionContent>\n                    <Td>Expanded 2.2 with a lot of text</Td>\n                    <Td>Expanded 2.2</Td>\n                    <Td>Expanded 2.2</Td>\n                    <Td>Expanded 2.2</Td>\n                  </Tr.AccordionContent>\n\n                  <Tr.AccordionContent>\n                    <Td>Expanded 2.3 with a lot of text</Td>\n                    <Td>Expanded 2.3</Td>\n                    <Td>Expanded 2.3</Td>\n                    <Td>Expanded 2.3</Td>\n                  </Tr.AccordionContent>\n                </Tr>\n              </tbody>\n            </Table>\n          </Table.ScrollView>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const Navigation = () => (\n  <ComponentBox hideCode data-visual-test=\"table-navigation\">\n    {() => {\n      const NavigationTable = ({ id, showCheckbox = false, ...props }) => {\n        const TdCheckbox = () => {\n          return <Checkbox label=\"Select row\" label_sr_only />\n        }\n        const TdInput = () => {\n          return <Input label=\"Label\" label_sr_only size={4} />\n        }\n\n        const Row = ({ nr }) => {\n          const shareId = id + '-' + nr\n          return (\n            <Tr\n              id={shareId}\n              onClick={() => {\n                console.log('your navigation logic here')\n                // window.location.href = 'https://eufemia.dnb.no/'\n              }}\n            >\n              <Td>{showCheckbox ? <TdCheckbox /> : 'Row ' + nr}</Td>\n              <Td>Row {nr}</Td>\n              <Td spacing=\"horizontal\">\n                <TdInput />\n              </Td>\n              <Td align=\"right\">Row {nr}</Td>\n            </Tr>\n          )\n        }\n\n        return (\n          <Table mode=\"navigation\" id={id} {...props}>\n            <caption className=\"dnb-sr-only\">A Table Caption</caption>\n\n            <thead>\n              <Tr>\n                <Th>Column A</Th>\n                <Th>Column B</Th>\n                <Th>Column C</Th>\n                <Th align=\"right\">Column D</Th>\n              </Tr>\n            </thead>\n\n            <tbody>\n              <Row nr=\"1\" />\n              <Row nr=\"2\" />\n              <Row nr=\"3\" />\n            </tbody>\n          </Table>\n        )\n      }\n\n      return (\n        <>\n          <Table.ScrollView>\n            <NavigationTable id=\"navigation-table-1\" showCheckbox />\n          </Table.ScrollView>\n\n          <Table.ScrollView top>\n            <NavigationTable\n              id=\"navigation-table-2\"\n              border\n              outline\n              size=\"medium\"\n            />\n          </Table.ScrollView>\n        </>\n      )\n    }}\n  </ComponentBox>\n)\n\nexport const NavigationMixed = () => (\n  <ComponentBox hideCode data-visual-test=\"table-navigation-mixed\">\n    {() => {\n      const NavigationTable = ({ id, showCheckbox = false, ...props }) => {\n        const TdCheckbox = () => {\n          return <Checkbox label=\"Select row\" label_sr_only />\n        }\n        const TdInput = () => {\n          return <Input label=\"Label\" label_sr_only size={4} />\n        }\n\n        return (\n          <Table mode=\"navigation\" id={id} {...props}>\n            <caption className=\"dnb-sr-only\">A Table Caption</caption>\n\n            <thead>\n              <Tr>\n                <Th>Column A</Th>\n                <Th>Column B</Th>\n                <Th>Column C</Th>\n                <Th align=\"right\">Column D</Th>\n              </Tr>\n            </thead>\n\n            <tbody>\n              <Tr\n                id={id + '-' + 1}\n                onClick={() => {\n                  console.log('your navigation logic here')\n                  // window.location.href = 'https://eufemia.dnb.no/'\n                }}\n              >\n                <Td>{showCheckbox ? <TdCheckbox /> : 'Row ' + 1}</Td>\n                <Td>Row {1}</Td>\n                <Td spacing=\"horizontal\">\n                  <TdInput />\n                </Td>\n                <Td align=\"right\">Row {1}</Td>\n              </Tr>\n              <Tr id={id + '-' + 2}>\n                <Td>{showCheckbox ? <TdCheckbox /> : 'Row ' + 2}</Td>\n                <Td>Row {2}</Td>\n                <Td spacing=\"horizontal\">\n                  <TdInput />\n                </Td>\n                <Td align=\"right\">Row {2}</Td>\n              </Tr>\n              <Tr\n                id={id + '-' + 3}\n                onClick={() => {\n                  console.log('your navigation logic here')\n                  // window.location.href = 'https://eufemia.dnb.no/'\n                }}\n              >\n                <Td>{showCheckbox ? <TdCheckbox /> : 'Row ' + 3}</Td>\n                <Td>Row {3}</Td>\n                <Td spacing=\"horizontal\">\n                  <TdInput />\n                </Td>\n                <Td align=\"right\">Row {3}</Td>\n              </Tr>\n            </tbody>\n          </Table>\n        )\n      }\n\n      return (\n        <>\n          <Table.ScrollView>\n            <NavigationTable\n              id=\"navigation-table-mixed-1\"\n              showCheckbox\n              accordionChevronPlacement=\"end\"\n            />\n          </Table.ScrollView>\n\n          <Table.ScrollView top>\n            <NavigationTable\n              id=\"navigation-table-mixed-2\"\n              border\n              outline\n              size=\"medium\"\n            />\n          </Table.ScrollView>\n        </>\n      )\n    }}\n  </ComponentBox>\n)\n\nexport const Sticky = () => {\n  const isFullscreen = /data-visual-test|fullscreen/.test(\n    globalThis?.location?.href,\n  )\n  const isVisibleWhenVisualTest = globalThis.IS_TEST\n  return (\n    <ComponentBox\n      hideCode\n      scope={{ isFullscreen, isVisibleWhenVisualTest }}\n    >\n      <Table.ScrollView>\n        <Table\n          sticky={isVisibleWhenVisualTest ? 'css-position' : true}\n          stickyOffset={isFullscreen ? 0 : '3.5rem'}\n        >\n          <caption className=\"dnb-sr-only\">A Table Caption</caption>\n          <thead>\n            <Tr>\n              <Th colSpan={2}>Header</Th>\n              <Th sortable reversed>\n                <Th.SortButton text=\"Sortable\" title=\"Sort table column\" />\n              </Th>\n              <Th sortable active>\n                <Th.SortButton text=\"Active\" title=\"Sort table column\" />\n              </Th>\n            </Tr>\n          </thead>\n          <tbody>\n            <Tr>\n              <Td>\n                <P>\n                  Row 1 <b>with p</b>\n                </P>\n              </Td>\n              <Td>\n                <Code>Row 1 with code</Code>\n              </Td>\n              <Td>\n                <span>Row 1 with span</span>\n              </Td>\n              <Td>Row 1</Td>\n            </Tr>\n            <Tr>\n              <Td colSpan={2}>Column which spans over two columns</Td>\n              <Td>Row 2</Td>\n              <Td>Row 2</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 3</Td>\n              <Td>Row 3</Td>\n              <Td>Row 3</Td>\n              <Td>Row 3</Td>\n            </Tr>\n          </tbody>\n          <tfoot>\n            <Tr>\n              <Td colSpan={3}>Footer</Td>\n              <Td>Sum</Td>\n            </Tr>\n          </tfoot>\n        </Table>\n      </Table.ScrollView>\n    </ComponentBox>\n  )\n}\n\nexport const StickyMaxHeight = () => {\n  return (\n    <ComponentBox hideCode data-visual-test=\"table-sticky\">\n      <Table.ScrollView style={{ maxHeight: '18rem' }}>\n        <Table sticky=\"css-position\">\n          <thead>\n            <Tr>\n              <Th>Column 1</Th>\n              <Th>Column 2</Th>\n              <Th>Column 3</Th>\n              <Th>Column 4</Th>\n            </Tr>\n          </thead>\n          <tbody>\n            <Tr>\n              <Td>Row 1</Td>\n              <Td>Row 1</Td>\n              <Td>Row 1</Td>\n              <Td>Row 1</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 2</Td>\n              <Td>Row 2</Td>\n              <Td>Row 2</Td>\n              <Td>Row 2</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 3</Td>\n              <Td>Row 3</Td>\n              <Td>Row 3</Td>\n              <Td>Row 3</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 4</Td>\n              <Td>Row 4</Td>\n              <Td>Row 4</Td>\n              <Td>Row 4</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 5</Td>\n              <Td>Row 5</Td>\n              <Td>Row 5</Td>\n              <Td>Row 5</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 6</Td>\n              <Td>Row 6</Td>\n              <Td>Row 6</Td>\n              <Td>Row 6</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 7</Td>\n              <Td>Row 7</Td>\n              <Td>Row 7</Td>\n              <Td>Row 7</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 8</Td>\n              <Td>Row 8</Td>\n              <Td>Row 8</Td>\n              <Td>Row 8</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 9</Td>\n              <Td>Row 9</Td>\n              <Td>Row 9</Td>\n              <Td>Row 9</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 10</Td>\n              <Td>Row 10</Td>\n              <Td>Row 10</Td>\n              <Td>Row 10</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 11</Td>\n              <Td>Row 11</Td>\n              <Td>Row 11</Td>\n              <Td>Row 11</Td>\n            </Tr>\n            <Tr>\n              <Td>Row 12</Td>\n              <Td>Row 12</Td>\n              <Td>Row 12</Td>\n              <Td>Row 12</Td>\n            </Tr>\n          </tbody>\n        </Table>\n      </Table.ScrollView>\n    </ComponentBox>\n  )\n}\n\nexport function PaginationTable() {\n  return (\n    <ComponentBox hideCode>\n      {() => {\n        const TablePagination = () => {\n          const amountPerPage = 5\n          const [currentPage, setCurrentPage] = React.useState(1)\n          const [data] = React.useState(() => getDataFromAPI(0, 100))\n\n          return (\n            <Pagination\n              page_count={data.length / amountPerPage}\n              current_page={currentPage}\n              on_change={({ pageNumber }) => {\n                setCurrentPage(pageNumber)\n              }}\n            >\n              <MakeTable\n                currentPage={currentPage}\n                amountPerPage={amountPerPage}\n                data={data}\n              />\n            </Pagination>\n          )\n\n          function getDataFromAPI(offset, max) {\n            const list = []\n\n            for (let i = offset + 1, l = offset + max; i <= l; i++) {\n              list.push({\n                name: 'Row ' + i,\n              })\n            }\n\n            return list\n          }\n\n          function MakeTable({ currentPage, amountPerPage, data }) {\n            const offset = currentPage * amountPerPage - amountPerPage\n            const tableBody = data\n              .slice(offset, offset + amountPerPage)\n              .map(({ name }, i) => {\n                return (\n                  <Tr key={i}>\n                    <Td>{name}</Td>\n                  </Tr>\n                )\n              })\n\n            return (\n              <Table.ScrollView>\n                <Table>\n                  <thead>\n                    <Tr>\n                      <Th>Column</Th>\n                    </Tr>\n                  </thead>\n                  <tbody>{tableBody}</tbody>\n                </Table>\n              </Table.ScrollView>\n            )\n          }\n        }\n\n        return <TablePagination />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const InOneContainer = () => (\n  <ComponentBox hideToolbar hidePreview scope={{ TableContainer }}>\n    <TableContainer>\n      <TableContainer.Head>\n        <H2>Heading</H2>\n      </TableContainer.Head>\n\n      <TableContainer.Body>\n        <Table>Content</Table>\n        <Table>Content</Table>\n      </TableContainer.Body>\n\n      <TableContainer.Foot>\n        <P>Footer</P>\n      </TableContainer.Foot>\n    </TableContainer>\n  </ComponentBox>\n)\n\nexport const VariantCombinations = () => {\n  const ContentVariants = () => (\n    <>\n      <div data-visual-test=\"table-combinations-default\">\n        <CaptionVariants title=\"Regular content: \">\n          <ContentRegular />\n        </CaptionVariants>\n      </div>\n      <div data-visual-test=\"table-combinations-no-header\">\n        <CaptionVariants title=\"No header: \">\n          <ContentNoHeader />\n        </CaptionVariants>\n      </div>\n      <div data-visual-test=\"table-combinations-row-header\">\n        <CaptionVariants title=\"Row headers: \">\n          <ContentRowHeaders />\n        </CaptionVariants>\n      </div>\n      <div data-visual-test=\"table-combinations-spanning\">\n        <CaptionVariants title=\"Spanning: \">\n          <ContentSpanning />\n        </CaptionVariants>\n      </div>\n      <div data-visual-test=\"table-combinations-row-header-spanning\">\n        <CaptionVariants title=\"Row headers spanning: \">\n          <ContentRowHeadersSpanning />\n        </CaptionVariants>\n      </div>\n    </>\n  )\n\n  const CaptionVariants = ({ title, children }) => (\n    <>\n      <TableVariants title={title + 'With caption: '}>\n        <caption>Caption</caption>\n        {children}\n      </TableVariants>\n\n      <TableVariants title={title + 'No caption: '}>\n        {children}\n      </TableVariants>\n    </>\n  )\n  const TableVariants = ({ title, children }) => (\n    <>\n      {title + 'Basic'}\n      <Table>{children}</Table>\n      {title + 'Border'}\n      <Table border>{children}</Table>\n      {title + 'Outline'}\n      <Table outline>{children}</Table>\n      {title + 'Border and outline'}\n      <Table border outline>\n        {children}\n      </Table>\n    </>\n  )\n\n  const ContentRegular = () => (\n    <>\n      <thead>\n        <Tr>\n          <Th>Th A</Th>\n          <Th>Th B</Th>\n          <Th>Th C</Th>\n        </Tr>\n      </thead>\n      <tbody>\n        <Tr>\n          <Td>Td 1</Td>\n          <Td>Td 1</Td>\n          <Td>Td 1</Td>\n        </Tr>\n        <Tr>\n          <Td>Td 2</Td>\n          <Td>Td 2</Td>\n          <Td>Td 2</Td>\n        </Tr>\n        <Tr>\n          <Td>Td 3</Td>\n          <Td>Td 3</Td>\n          <Td>Td 3</Td>\n        </Tr>\n      </tbody>\n    </>\n  )\n\n  const ContentNoHeader = () => (\n    <>\n      <tbody>\n        <Tr>\n          <Td>Td 1</Td>\n          <Td>Td 1</Td>\n          <Td>Td 1</Td>\n        </Tr>\n        <Tr>\n          <Td>Td 2</Td>\n          <Td>Td 2</Td>\n          <Td>Td 2</Td>\n        </Tr>\n        <Tr>\n          <Td>Td 3</Td>\n          <Td>Td 3</Td>\n          <Td>Td 3</Td>\n        </Tr>\n      </tbody>\n    </>\n  )\n\n  const ContentRowHeaders = () => (\n    <>\n      <tbody>\n        <Tr>\n          <Th>Th 1</Th>\n          <Td>Td 1</Td>\n          <Td>Td 1</Td>\n        </Tr>\n        <Tr>\n          <Th>Th 2</Th>\n          <Td>Td 2</Td>\n          <Td>Td 2</Td>\n        </Tr>\n        <Tr>\n          <Th>Th 3</Th>\n          <Td>Td 3</Td>\n          <Td>Td 3</Td>\n        </Tr>\n      </tbody>\n    </>\n  )\n\n  const ContentSpanning = () => (\n    <>\n      <thead>\n        <Tr>\n          <Th colSpan={2}>Th A</Th>\n          <Th>Th B</Th>\n        </Tr>\n      </thead>\n      <tbody>\n        <Tr>\n          <Td>Td 1</Td>\n          <Td>Td 1</Td>\n          <Td rowSpan={2}>Td 1</Td>\n        </Tr>\n        <Tr>\n          <Td rowSpan={2}>Td 2</Td>\n          <Td>Td 2</Td>\n        </Tr>\n        <Tr>\n          <Td>Td 3</Td>\n          <Td>Td 3</Td>\n        </Tr>\n      </tbody>\n    </>\n  )\n\n  const ContentRowHeadersSpanning = () => (\n    <>\n      <tbody>\n        <Tr>\n          <Th rowSpan={2}>Th 1</Th>\n          <Td>Td 1</Td>\n          <Td>Td 1</Td>\n        </Tr>\n        <Tr>\n          <Td>Td 2</Td>\n          <Td>Td 2</Td>\n        </Tr>\n        <Tr>\n          <Th colSpan={2}>Th 3</Th>\n\n          <Td>Td 3</Td>\n        </Tr>\n      </tbody>\n    </>\n  )\n\n  return (\n    <ComponentBox scope={{ ContentVariants }}>\n      <ContentVariants />\n    </ComponentBox>\n  )\n}\n\nexport const ResponsiveInCard = () => (\n  <ComponentBox\n    scope={{ useMedia, composeIcon, stopIcon }}\n    hideCode\n    data-visual-test=\"table-one-td\"\n  >\n    {() => {\n      const Example = () => {\n        const { isSmall, isLarge } = useMedia()\n\n        const header = {\n          title: 'Tittel',\n          description: 'Beskrivelse',\n          status: 'Status',\n          deadline: 'Frist',\n        }\n\n        const content = {\n          title: 'Lorem ipsum',\n          description: 'Lorem ipsum',\n          status: <Badge content=\"Ikke påbegynt\" />,\n          deadline: '17.04.2025',\n        }\n\n        const align = isLarge\n          ? 'flex-end'\n          : isSmall\n          ? 'center'\n          : 'flex-start'\n\n        const tableRow = (\n          <>\n            {isLarge ? (\n              <Tr>\n                <Td>{content.title}</Td>\n                <Td>{content.description}</Td>\n                <Td>{content.status}</Td>\n                <Td>{content.deadline}</Td>\n              </Tr>\n            ) : (\n              <>\n                <Tr variant=\"odd\">\n                  <Th scope=\"row\">{header.title}</Th>\n                  <Td>{content.title}</Td>\n                </Tr>\n                <Tr>\n                  <Th scope=\"row\">{header.description}</Th>\n                  <Td>{content.description}</Td>\n                </Tr>\n                <Tr>\n                  <Th scope=\"row\">{header.status}</Th>\n                  <Td>{content.status}</Td>\n                </Tr>\n                <Tr>\n                  <Th scope=\"row\">{header.deadline}</Th>\n                  <Td>{content.deadline}</Td>\n                </Tr>\n              </>\n            )}\n\n            <Tr variant=\"odd\">\n              <Td colSpan={isLarge ? 4 : 2} aria-label={header.title}>\n                <Flex.Horizontal justify={align}>\n                  <Button\n                    variant=\"tertiary\"\n                    icon={stopIcon}\n                    icon_position=\"left\"\n                  >\n                    Avvis signering\n                  </Button>\n                  <Button variant=\"secondary\" icon={composeIcon}>\n                    Start signering\n                  </Button>\n                </Flex.Horizontal>\n              </Td>\n            </Tr>\n          </>\n        )\n\n        const MyTable = () => (\n          <Table.ScrollView>\n            <Table border outline size=\"medium\">\n              {isLarge && (\n                <thead>\n                  <Tr noWrap>\n                    <Th>{header.title}</Th>\n                    <Th>{header.description}</Th>\n                    <Th>{header.status}</Th>\n                    <Th>{header.deadline}</Th>\n                  </Tr>\n                </thead>\n              )}\n\n              <tbody>\n                {tableRow}\n                {tableRow}\n              </tbody>\n            </Table>\n          </Table.ScrollView>\n        )\n\n        return (\n          <Card\n            title=\"Card title\"\n            responsive={false}\n            innerSpace={0}\n            filled\n          >\n            <MyTable />\n          </Card>\n        )\n      }\n\n      return <Example />\n    }}\n  </ComponentBox>\n)\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    strong: \"strong\",\n    code: \"code\",\n    h4: \"h4\",\n    h5: \"h5\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {VisibilityByTheme, VisibleWhenVisualTest} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.Accordion) _missingMdxReference(\"Examples.Accordion\", true);\n  if (!Examples.AccordionMixed) _missingMdxReference(\"Examples.AccordionMixed\", true);\n  if (!Examples.AccordionRow) _missingMdxReference(\"Examples.AccordionRow\", true);\n  if (!Examples.ClassHelpers) _missingMdxReference(\"Examples.ClassHelpers\", true);\n  if (!Examples.ContainerEmptyHeaderFooter) _missingMdxReference(\"Examples.ContainerEmptyHeaderFooter\", true);\n  if (!Examples.InOneContainer) _missingMdxReference(\"Examples.InOneContainer\", true);\n  if (!Examples.LongHeader) _missingMdxReference(\"Examples.LongHeader\", true);\n  if (!Examples.Navigation) _missingMdxReference(\"Examples.Navigation\", true);\n  if (!Examples.NavigationMixed) _missingMdxReference(\"Examples.NavigationMixed\", true);\n  if (!Examples.PaginationTable) _missingMdxReference(\"Examples.PaginationTable\", true);\n  if (!Examples.ResponsiveInCard) _missingMdxReference(\"Examples.ResponsiveInCard\", true);\n  if (!Examples.RowScopeOnly) _missingMdxReference(\"Examples.RowScopeOnly\", true);\n  if (!Examples.SizeMedium) _missingMdxReference(\"Examples.SizeMedium\", true);\n  if (!Examples.SizeSmall) _missingMdxReference(\"Examples.SizeSmall\", true);\n  if (!Examples.StackedContainer) _missingMdxReference(\"Examples.StackedContainer\", true);\n  if (!Examples.Sticky) _missingMdxReference(\"Examples.Sticky\", true);\n  if (!Examples.StickyMaxHeight) _missingMdxReference(\"Examples.StickyMaxHeight\", true);\n  if (!Examples.VariantBasic) _missingMdxReference(\"Examples.VariantBasic\", true);\n  if (!Examples.VariantCombinations) _missingMdxReference(\"Examples.VariantCombinations\", true);\n  if (!Examples.VariantComplex) _missingMdxReference(\"Examples.VariantComplex\", true);\n  if (!Examples.VariantFixed) _missingMdxReference(\"Examples.VariantFixed\", true);\n  if (!Examples.WithoutClasses) _missingMdxReference(\"Examples.WithoutClasses\", true);\n  if (!VisibilityByTheme) _missingMdxReference(\"VisibilityByTheme\", true);\n  if (!VisibleWhenVisualTest) _missingMdxReference(\"VisibleWhenVisualTest\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Basic table\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"NB:\"\n      }), \" In this example, the sort buttons do react on your input. But will not change the table data.\"]\n    }), \"\\n\", _jsx(Examples.VariantBasic, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Complex table\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can force a row to overwrite the automated odd/even counting by providing e.g. \", _jsx(_components.code, {\n        children: \"variant=\\\"even\\\"\"\n      }), \" to a \", _jsx(_components.code, {\n        children: \"<Tr />\"\n      }), \". You can use this in combination with \", _jsx(_components.code, {\n        children: \"rowSpan\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"NB:\"\n      }), \" The table header in the first column needs to have \", _jsx(_components.code, {\n        children: \"scope=\\\"row\\\"\"\n      }), \"!\"]\n    }), \"\\n\", _jsx(Examples.VariantComplex, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Row scope headers only\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This table has only \", _jsx(_components.code, {\n        children: \"scope=\\\"row\\\"\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"scope=\\\"rowgroup\\\"\"\n      }), \" headers – without the default \", _jsx(_components.code, {\n        children: \"scope=\\\"col\\\"\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Examples.RowScopeOnly, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Fixed table\"\n    }), \"\\n\", _jsx(Examples.VariantFixed, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Medium and small sized\"\n    }), \"\\n\", _jsx(Examples.SizeMedium, {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"A \", _jsx(_components.code, {\n        children: \"small\"\n      }), \" sized table is only for special circumstances, where a lot of data needs to be shown on the screen at the same time.\"]\n    }), \"\\n\", _jsx(Examples.SizeSmall, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Table with accordion\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Expand a single container\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The second table uses both a \", _jsx(_components.code, {\n        children: \"border\"\n      }), \" and an \", _jsx(_components.code, {\n        children: \"outline\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Examples.Accordion, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Expand additional rows\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It's also possible to use accordion to expand the table with more rows.\"\n    }), \"\\n\", _jsx(Examples.AccordionRow, {}), \"\\n\", _jsx(_components.h5, {\n      children: \"Collapse all rows at once\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can collapse all expanded rows by sending a ref to the \", _jsx(_components.code, {\n        children: \"collapseAllHandleRef\"\n      }), \" property and calling the \", _jsx(_components.code, {\n        children: \".current()\"\n      }), \" function on your ref.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"const myTableCollapseAll = React.useRef<() => void>()\\n\\nreturn (\\n  <button onClick={() => myTableCollapseAll.current()}>\\n    Close all rows\\n  </button>\\n\\n  <Table mode=\\\"accordion\\\" collapseAllHandleRef={myTableCollapseAll}>\\n    {/* ... your table code */}\\n  </Table>\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Table with navigation\"\n    }), \"\\n\", _jsx(Examples.Navigation, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Table with sticky header\"\n    }), \"\\n\", _jsx(Examples.Sticky, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Table with a max height\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A sticky table header with \", _jsx(_components.code, {\n        children: \"sticky=\\\"css-position\\\"\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"max-height\"\n      }), \" on the \", _jsx(_components.code, {\n        children: \"Table.ScrollView\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Examples.StickyMaxHeight, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Several tables in one container\"\n    }), \"\\n\", _jsxs(\"details\", {\n      children: [_jsx(\"summary\", {\n        className: \"dnb-p\",\n        children: _jsx(_components.p, {\n          children: \"Show how the import and syntax is structured.\"\n        })\n      }), _jsx(Examples.InOneContainer, {})]\n    }), \"\\n\", _jsx(Examples.StackedContainer, {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"With no (empty) \", _jsx(_components.code, {\n        children: \"head\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"foot\"\n      }), \" content.\"]\n    }), \"\\n\", _jsx(Examples.ContainerEmptyHeaderFooter, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Table with long header text (wrapping)\"\n    }), \"\\n\", _jsx(Examples.LongHeader, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Table with pagination\"\n    }), \"\\n\", _jsx(VisibilityByTheme, {\n      visible: \"sbanken\",\n      children: _jsx(_components.p, {\n        children: \"This example is not yet fully supported using the Sbanken theme.\"\n      })\n    }), \"\\n\", _jsx(Examples.PaginationTable, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Responsive table in a Card\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"NB:\"\n      }), \" For tables with lots of content, it's best to avoid repeating the header for each row. This can be overwhelming for users who rely on screen readers.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Also, it is important that the \", _jsx(_components.code, {\n        children: \"<td>\"\n      }), \" without a \", _jsx(_components.code, {\n        children: \"<th>\"\n      }), \" has a \", _jsx(_components.code, {\n        children: \"aria-label={header.title}\"\n      }), \" to let users with screen readers know where \\\"these tools\\\" belong to.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This example uses \", _jsx(_components.code, {\n        children: \"scope=\\\"row\\\"\"\n      }), \" with a table header (\", _jsx(_components.code, {\n        children: \"<th>\"\n      }), \") in each row.\"]\n    }), \"\\n\", _jsx(Examples.ResponsiveInCard, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Example usage without and with classes\"\n    }), \"\\n\", _jsx(Examples.WithoutClasses, {}), \"\\n\", _jsx(Examples.ClassHelpers, {}), \"\\n\", _jsx(VisibleWhenVisualTest, {\n      children: _jsx(Examples.VariantCombinations, {})\n    }), \"\\n\", _jsxs(VisibleWhenVisualTest, {\n      children: [_jsx(Examples.AccordionMixed, {}), _jsx(Examples.NavigationMixed, {})]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["props","_jsx","xmlns","width","height","fill","viewBox","children","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","TableContainer","_content$","_content$2","className","rest","spacingClasses","createSpacingClasses","validateDOMAttributes","ScrollView","TableScrollView","content","Array","isArray","type","Head","unshift","Foot","push","classnames","Body","_supportsSpacingProps","config","defaults","direction","modes","initialState","React","Object","entries","reduce","acc","_ref","name","opts","internalState","setState","sortHandler","list","_ref2","state","active","lastDirection","_ref5","filter","mode","includes","next","i","l","length","c","getNextMode","_ref3","activeSortName","sortState","_ref4","reversed","undefined","VariantBasic","_jsx2","ComponentBox","hideCode","scope","useHandleSortState","noInline","SizeMedium","SizeSmall","VariantComplex","RowScopeOnly","VariantFixed","StackedContainer","_globalThis$location","isFullscreen","test","globalThis","location","href","ContainerEmptyHeaderFooter","ClassHelpers","WithoutClasses","LongHeader","Accordion","copyIcon","useCopyWithNotice","AccordionMixed","AccordionRow","Navigation","NavigationMixed","Sticky","_globalThis$location2","isVisibleWhenVisualTest","IS_TEST","StickyMaxHeight","PaginationTable","InOneContainer","hideToolbar","hidePreview","VariantCombinations","CaptionVariants","title","_jsxs","_Fragment","TableVariants","Table","border","outline","ContentRegular","Tr","Th","Td","ContentNoHeader","ContentRowHeaders","ContentSpanning","colSpan","rowSpan","ContentRowHeadersSpanning","ContentVariants","ResponsiveInCard","useMedia","composeIcon","stopIcon","_createMdxContent","_components","assign","h2","h3","p","strong","code","h4","h5","pre","_provideComponents","components","VisibilityByTheme","VisibleWhenVisualTest","Examples","_missingMdxReference","visible","wrapper","MDXLayout","id","component","Error"],"sourceRoot":""}