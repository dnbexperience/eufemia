{"version":3,"file":"0fbd95740f9cb5bce5f8647618bbaeca614c8cca-2873dd8d6aa9df8e71b7.js","mappings":"mMAEO,MAAMA,EAAmD,CAC9DC,MAAO,CACLC,IAAK,wDACLC,KAAM,SACNC,OAAQ,YAEVC,iBAAkB,CAChBH,IAAK,0EACLC,KAAM,SACNC,OAAQ,YAEVE,uBAAwB,CACtBJ,IAAK,mFACLC,KAAM,UACNC,OAAQ,YAEVG,YAAa,CACXL,IAAK,gEACLC,KAAM,UACNC,OAAQ,YAEVI,UAAW,CACTN,IAAK,kGACLC,KAAM,CAAC,SAAU,SACjBC,OAAQ,YAEVK,KAAM,CACJP,IAAK,4YACLC,KAAM,SACNC,OAAQ,YAEVM,OAAQ,CACNR,IAAK,qEACLC,KAAM,SACNC,OAAQ,YAEVO,cAAe,CACbT,IAAK,8OACLC,KAAM,SACNC,OAAQ,YAEVQ,MAAO,CACLV,IAAK,oLACLC,KAAM,CAAC,SAAU,SACjBC,OAAQ,YAEVS,aAAc,CACZX,IAAK,iLACLC,KAAM,CAAC,SAAU,SACjBC,OAAQ,YAEV,0CAA2C,CACzCF,IAAK,2DACLC,KAAM,CAAC,SAAU,UACjBC,OAAQ,aAKCU,EAA6C,IACrDd,EACHQ,UAAW,CACTN,IAAK,8FACLC,KAAM,CAAC,SAAU,SACjBC,OAAQ,YAEVW,YAAa,CACXb,IAAK,uIACLC,KAAM,SACNC,OAAQ,YAEVY,WAAY,CACVd,IAAK,iGACLC,KAAM,UACNC,OAAQ,YAEVa,MAAO,CACLf,IAAK,mFACLC,KAAM,CAAC,SAAU,SACjBC,OAAQ,YAEVc,qBAAsB,CACpBhB,IAAK,2CACLC,KAAM,UACNC,OAAQ,YAEVe,YAAa,CACXjB,IAAK,4DACLC,KAAM,OACNC,OAAQ,YAEVgB,SAAU,CACRlB,IAAK,8FACLC,KAAM,UACNC,OAAQ,Y,uEC7FL,MAAMiB,EAAyC,CACpDC,UAAW,CACTpB,IAAK,iGACLC,KAAM,UACNC,OAAQ,YAEVmB,SAAU,CACRrB,IAAK,mHACLC,KAAM,SACNC,OAAQ,YAEVoB,UAAW,CACTtB,IAAK,oHACLC,KAAM,SACNC,OAAQ,YAEVqB,WAAY,CACVvB,IAAK,2GACLC,KAAM,UACNC,OAAQ,YAEVsB,KAAM,CACJxB,IAAK,gHACLC,KAAM,UACNC,OAAQ,YAEVuB,UAAW,CACTzB,IAAK,wGACLC,KAAM,SACNC,OAAQ,YAEVwB,aAAc,CACZ1B,IAAK,iHACLC,KAAM,CAAC,KAAM,UACbC,OAAQ,YAEVyB,UAAW,CACT3B,IAAK,oEACLC,KAAM,SACNC,OAAQ,YAEV0B,UAAW,CACT5B,IAAK,oEACLC,KAAM,SACNC,OAAQ,YAEV2B,QAAS,CACP7B,IAAK,qCACLC,KAAM,SACNC,OAAQ,YAEVQ,MAAO,CACLV,IAAK,8IACLC,KAAM,CAAC,SAAU,SACjBC,OAAQ,YAIV4B,KAAM,IACDC,EAAAA,EAAgBD,KACnB9B,IAAM,GAAE+B,EAAAA,EAAgBD,KAAK9B,6GAE/Be,MAAOgB,EAAAA,EAAgBhB,MACvBiB,UAAWD,EAAAA,EAAgBC,UAC3BC,MAAOF,EAAAA,EAAgBE,MACvBC,gBAAiBH,EAAAA,EAAgBI,iBAGjCC,KAAM,CACJpC,IAAK,4GACLC,KAAM,SACNC,OAAQ,YAEVmC,kBAAmB,CACjBrC,IAAK,wGACLC,KAAM,SACNC,OAAQ,YAEVoC,iBAAkB,CAChBtC,IAAK,qIACLC,KAAM,CAAC,SAAU,UACjBC,OAAQ,YAEVqC,WAAY,CACVvC,IAAK,0GACLC,KAAM,UACNC,OAAQ,YAIVsC,eAAgB,CACdxC,IAAK,6CACLC,KAAM,SACNC,OAAQ,YAEVuC,SAAU,CACRzC,IAAK,+EACLC,KAAM,kBACNC,OAAQ,YAEVwC,cAAe,CACb1C,IAAK,iGACLC,KAAM,gBACNC,OAAQ,Y,+ECxGL,MAAMyC,EAAsD,CACjEC,MAAO,CACL5C,IAAK,uGACLC,KAAM,cACNC,OAAQ,YAEV2C,aAAc,CACZ7C,IAAK,mHACLC,KAAM,cACNC,OAAQ,YAEV4C,KAAM,CACJ9C,IAAK,oPACLC,KAAM,SACNC,OAAQ,YAEV6C,KAAM,CACJ/C,IAAK,icACLC,KAAM,CAAC,aAAc,oBAAqB,YAC1CC,OAAQ,YAEV8C,QAAS,CACPhD,IAAK,ocACLC,KAAM,CAAC,aAAc,oBAAqB,YAC1CC,OAAQ,YAEV+C,MAAO,CACLjD,IAAK,kcACLC,KAAM,CAAC,QAAS,YAAa,2BAA4B,YACzDC,OAAQ,YAEVgB,SAAU,CACRlB,IAAK,kFACLC,KAAM,UACNC,OAAQ,YAEVgD,WAAY,CACVlD,IAAK,mMACLC,KAAM,CAAC,cAAe,aACtBC,OAAQ,YAEViD,SAAU,CACRnD,IAAK,qMACLC,KAAM,UACNC,OAAQ,YAEVkD,YAAa,CACXpD,IAAK,wMACLC,KAAM,aACNC,OAAQ,YAEVmD,OAAQ,CACNrD,IAAK,+CACLC,KAAM,SACNC,OAAQ,YAEVoD,kBAAmB,CACjBtD,IAAK,2IACLC,KAAM,UACNC,OAAQ,YAEVqD,kBAAmB,CACjBvD,IAAK,yQACLC,KAAM,UACNC,OAAQ,YAEVsD,qBAAsB,CACpBxD,IAAK,8GACLC,KAAM,UACNC,OAAQ,YAEVuD,cAAe,CACbzD,IAAK,gIACLC,KAAM,SACNC,OAAQ,YAEVwD,kBAAmB,CACjB1D,IAAK,yZACLC,KAAM,WACNC,OAAQ,YAEVyD,gBAAiB,CACf3D,IAAK,ycACLC,KAAM,WACNC,OAAQ,YAEV0D,YAAa,CACX5D,IAAK,yEACLC,KAAM,WACNC,OAAQ,YAEV2D,aAAc,CACZ7D,IAAK,kRACLC,KAAM,WACNC,OAAQ,aAIC4D,EAAkD,CAC7DC,SAAU,CACR/D,IAAK,kiBACLC,KAAM,kBACNC,OAAQ,YAEV8D,QAAS,CACPhE,IAAK,mPACLC,KAAM,kBACNC,OAAQ,YAEV+D,OAAQ,CACNjE,IAAK,oPACLC,KAAM,kBACNC,OAAQ,Y,uCC3GZ,IAAegE,EAAE,C,+ECLV,MAAMnC,EAAwC,CACnDa,MAAO,CACL5C,IAAK,kCACLC,KAAM,SACNC,OAAQ,YAEVa,MAAO,CACLf,IAAK,mGACLC,KAAM,SACNC,OAAQ,YAEVH,MAAO,CACLC,IAAK,mFACLC,KAAM,aACNC,OAAQ,YAEViE,cAAe,CACbnE,IAAK,gEACLC,KAAM,UACNC,OAAQ,YAEVkE,gBAAiB,CACfpE,IAAK,mGACLC,KAAM,SACNC,OAAQ,YAEVA,OAAQ,CACNF,IAAK,0IACLC,KAAM,CAAC,QAAS,OAAQ,WACxBC,OAAQ,YAEVmE,aAAc,CACZrE,IAAK,2GACLC,KAAM,CAAC,QAAS,QAChBC,OAAQ,YAEVoE,aAAc,CACZtE,IAAK,4DACLC,KAAM,SACNC,OAAQ,YAEVqE,aAAc,CACZvE,IAAK,6JACLC,KAAM,SACNC,OAAQ,YAEVsE,YAAa,CACXxE,IAAK,gEACLC,KAAM,SACNC,OAAQ,YAEVuE,KAAM,CACJzE,IAAK,gKACLC,KAAM,CAAC,SAAU,cACjBC,OAAQ,YAEVwE,cAAe,CACb1E,IAAK,0GACLC,KAAM,SACNC,OAAQ,YAEVyE,UAAW,CACT3E,IAAK,yDACLC,KAAM,SACNC,OAAQ,YAEViC,iBAAkB,CAChBnC,IAAK,wHACLC,KAAM,UACNC,OAAQ,YAEV0E,YAAa,CACX5E,IAAK,+CACLC,KAAM,SACNC,OAAQ,YAEVD,KAAM,CACJD,IAAK,mFACLC,KAAM,SACNC,OAAQ,YAEV2E,aAAc,CACZ7E,IAAK,8SACLC,KAAM,SACNC,OAAQ,YAEV4E,oBAAqB,CACnB9E,IAAK,oFACLC,KAAM,SACNC,OAAQ,YAEV6E,OAAQ,CACN/E,IAAK,uJACLC,KAAM,CAAC,SAAU,cACjBC,OAAQ,YAEV4B,KAAM,CACJ9B,IAAK,2PACLC,KAAM,CAAC,SAAU,UACjBC,OAAQ,YAEV8B,UAAW,CACThC,IAAK,8IACLC,KAAM,UACNC,OAAQ,YAEV+B,MAAO,CACLjC,IAAK,uGACLC,KAAM,UACNC,OAAQ,YAEV8E,QAAS,CACPhF,IAAK,kEACLC,KAAM,UACNC,OAAQ,YAEV+E,SAAU,CACRjF,IAAK,yEACLC,KAAM,UACNC,OAAQ,YAEVgF,iBAAkB,CAChBlF,IAAK,yRACLC,KAAM,SACNC,OAAQ,YAEViF,YAAa,CACXnF,IAAK,mLACLC,KAAM,SACNC,OAAQ,YAEVkF,eAAgB,CACdpF,IAAK,mGACLC,KAAM,CAAC,SAAU,iBACjBC,OAAQ,YAEVmF,UAAW,CACTrF,IAAK,0JACLC,KAAM,kBACNC,OAAQ,YAEVoF,cAAe,CACbtF,IAAK,qIACLC,KAAM,CAAC,SAAU,iBACjBC,OAAQ,YAEVqF,cAAe,CACbvF,IAAK,0JACLC,KAAM,CAAC,SAAU,iBACjBC,OAAQ,YAEV,0CAA2C,CACzCF,IAAK,2DACLC,KAAM,CAAC,SAAU,UACjBC,OAAQ,aAICsF,EAAoC,CAC/CC,UAAW,CACTzF,IAAK,2IACLC,KAAM,WACNC,OAAQ,YAEVwF,SAAU,CACR1F,IAAK,uEACLC,KAAM,WACNC,OAAQ,YAEVyF,YAAa,CACX3F,IAAK,sEACLC,KAAM,WACNC,OAAQ,YAEV0F,QAAS,CACP5F,IAAK,sEACLC,KAAM,WACNC,OAAQ,YAEV2F,UAAW,CACT7F,IAAK,wFACLC,KAAM,WACNC,OAAQ,YAEV4F,gBAAiB,CACf9F,IAAK,yGACLC,KAAM,WACNC,OAAQ,YAEV6F,eAAgB,CACd/F,IAAK,wGACLC,KAAM,WACNC,OAAQ,YAEV8F,SAAU,CACRhG,IAAK,qFACLC,KAAM,WACNC,OAAQ,Y,uCChMZ,IAAe+F,EAAE,C,mICAV,MAAMC,EAAwC,IAChDvD,EAAAA,KACA7C,EAAAA,GAGQqG,EAAoC,IAC5CrC,EAAAA,GAGQsC,EAA0B,SACrCC,EACAC,QAD+C,IAA/CD,IAAAA,OAAkDE,QACM,IAAxDD,IAAAA,OAA2DC,GAE3D,MAUMC,EAAc,IAVNH,EACT,QAAOA,EAAUI,SAAW,IAAM,OAAOJ,EAAUpG,OACpD,UAEQqG,EACP,mBAAkBA,EAAmBG,SAAW,IAAM,OACrDH,EAAmBrG,OAErB,cAIJ,MAAO,IACFkG,EACHpC,SAAU,IACLoC,EAAYpC,SACf9D,KAAMuG,GAERxC,QAAS,IACJmC,EAAYnC,QACf/D,KAAMuG,GAERvC,OAAQ,IACHkC,EAAYlC,OACfhE,KAAMuG,GAGZ,C,uCCxCA,IAAeE,EAAE,C","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/String/StringDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueWritePropsDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/input/InputDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../../shared/types'\n\nexport const FieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescriptionInline: {\n    doc: 'If true, the `labelDescription` will be displayed on the same line as the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSize: {\n    doc: 'Define the font-size of the label based on the [font-size](/uilib/typography/font-size/) table.',\n    type: ['medium', 'large'],\n    status: 'optional',\n  },\n  help: {\n    doc: 'Provide help content for the field using `title` and `content` as a string or React.Node. Additionally, you can set `open` to `true` to display the inline help, set the `breakout` property to `false` to disable the breakout of the inline help content, or use `renderAs` set to `dialog` to render the content in a [Dialog](/uilib/components/dialog/) (recommended for larger amounts of content).',\n    type: 'object',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  layoutOptions: {\n    doc: 'Use this to set additional options for the `horizontal` layout. E.g. `{ width: \"medium\" }`. You can also use a custom width `{number}rem`. Instead of a width, you can use a min/max width. E.g. `{ minWidth: \"6rem\", maxWidth: \"12rem\" }`.',\n    type: 'object',\n    status: 'optional',\n  },\n  width: {\n    doc: 'Will set the width for the whole block. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: 'Will set the width for its contents. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\n/** For internal use only */\nexport const FieldBlockProperties: PropertiesTableProps = {\n  ...FieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading sizes](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  labelHeight: {\n    doc: 'Defines the height of an component (size prop), so the label can be aligned correctly. Can be `default`, `small`, `medium`, `large`.',\n    type: 'string',\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  disableStatusSummary: {\n    doc: 'Use `true` to disable the error summary.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'true',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { inputProperties } from '../../../../components/input/InputDocs'\nimport { PropertiesTableProps } from '../../../../shared/types'\n\nexport const stringProperties: PropertiesTableProps = {\n  multiline: {\n    doc: 'True to be able to write in multiple lines (switching from input-element to textarea-element).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  leftIcon: {\n    doc: 'For icon at the left side of the text input. Only one of `leftIcon` or `rightIcon` can be used at the same time.',\n    type: 'string',\n    status: 'optional',\n  },\n  rightIcon: {\n    doc: 'For icon at the right side of the text input. Only one of `leftIcon` or `rightIcon` can be used at the same time.',\n    type: 'string',\n    status: 'optional',\n  },\n  capitalize: {\n    doc: 'When set to true, it will capitalize the first letter of every word, transforming the rest to lowercase.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  trim: {\n    doc: 'When true, it will trim leading and trailing whitespaces on blur, triggering `onChange` if the value changes.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  inputMode: {\n    doc: 'Define an [inputmode](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode).',\n    type: 'string',\n    status: 'optional',\n  },\n  autoComplete: {\n    doc: 'For HTML [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) attributes.',\n    type: ['on', 'string'],\n    status: 'optional',\n  },\n  minLength: {\n    doc: 'Validation for minimum length of the text (number of characters).',\n    type: 'number',\n    status: 'optional',\n  },\n  maxLength: {\n    doc: 'Validation for maximum length of the text (number of characters).',\n    type: 'number',\n    status: 'optional',\n  },\n  pattern: {\n    doc: 'Validation based on regex pattern.',\n    type: 'string',\n    status: 'optional',\n  },\n  width: {\n    doc: '`false` for no width (use browser default), `small`, `medium` or `large` for predefined standard widths, `stretch` to fill available width.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n\n  // - Input props\n  size: {\n    ...inputProperties.size,\n    doc: `${inputProperties.size.doc} Consider rather setting field sizes with [Form.Appearance](/uilib/extensions/forms/Form/Appearance/).`,\n  },\n  align: inputProperties.align,\n  selectall: inputProperties.selectall,\n  clear: inputProperties.clear,\n  keepPlaceholder: inputProperties.keep_placeholder,\n\n  // - Textarea props\n  rows: {\n    doc: 'To be used together with `multiline`. Set how many rows of text can be shown by default. Defaults to `2`.',\n    type: 'number',\n    status: 'optional',\n  },\n  autoresizeMaxRows: {\n    doc: 'To be used together with `multiline`. Set how many rows of text can be shown at max. Defaults to `6`.',\n    type: 'number',\n    status: 'optional',\n  },\n  characterCounter: {\n    doc: \"To be used together with `multiline`. Use a number to define the displayed max length e.g. `40` or `{ max: 40, variant: 'down' }`.\",\n    type: ['number', 'object'],\n    status: 'optional',\n  },\n  autoresize: {\n    doc: 'To be used together with `multiline`. Set true to expand when writing longer texts. Defaults to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n\n  // - Additional props\n  inputClassName: {\n    doc: 'Class name set on the <input> DOM element.',\n    type: 'string',\n    status: 'optional',\n  },\n  innerRef: {\n    doc: 'By providing a React.Ref we can get the internally used input element (DOM).',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  submitElement: {\n    doc: 'Accepts a React element which will show up like the \"submit button\" would do on type=\"search\".',\n    type: 'React.Element',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const DataValueWritePropsProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: \"Info message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  warning: {\n    doc: \"Warning message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  error: {\n    doc: \"Error message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['Error', 'FormError', 'Array<Error | FormError>', 'function'],\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set to `true`, the field will give an error if the value fails the required validation. When set to `false`, the field will not be required, but will add a \"(optional)\" suffix to the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSuffix: {\n    doc: 'Will append an additional text to the label, like \"(optional)\". When using `inheritLabel`, the suffix will not be inherited. NB: The visual appearance of the `labelSuffix` may change in the future.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set to `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set to `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateContinuously: {\n    doc: 'Set to `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages. The messages can be a React.ReactNode or a string.',\n    type: 'object',\n    status: 'optional',\n  },\n  onChangeValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered on every change done by the user. The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered when the user leaves a field (e.g., blurring a text input or closing a dropdown). The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'Transforms the value before it gets forwarded to the form data object (context) or returned as the `onChange` value parameter. The first parameter is the internal value. Some fields do support a second parameter, like the SelectCountry, where the country object is given.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const DataValueWritePropsEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).\",\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const inputProperties: PropertiesTableProps = {\n  value: {\n    doc: 'The content value of the input.',\n    type: 'string',\n    status: 'optional',\n  },\n  align: {\n    doc: 'Defines the text alignment of the input. Can be `left`, `right` or `center`. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Prepends the Form Label component. If no ID is provided, a random ID is created.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  label_sr_only: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  label_direction: {\n    doc: 'Use `label_direction=\"vertical\"` to change the label layout direction. Defaults to `horizontal`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status: {\n    doc: 'Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: ['error', 'info', 'boolean'],\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.',\n    type: ['error', 'info'],\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'object',\n    status: 'optional',\n  },\n  placeholder: {\n    doc: 'The placeholder which shows up once the input value is empty.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon: {\n    doc: 'Icon to show before or after the input / placeholder. Can be either a string defining a primary icon or a Component using an SVG icon of either 16px or 24px.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  icon_position: {\n    doc: 'Defines the position of icon inside the input. Set to `left` or `right`. Defaults to `left` if not set.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'The icon size of the icon shows. Defaults to `medium`.',\n    type: 'string',\n    status: 'optional',\n  },\n  keep_placeholder: {\n    doc: 'Set to `true` in case the `placeholder` has to be kept during focus. By default, the placeholder disappears on focus.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  input_class: {\n    doc: 'In case we have to set a custom input class.',\n    type: 'string',\n    status: 'optional',\n  },\n  type: {\n    doc: 'Choose between `text`, `number`, `email`, `password`, `url`, `tel` and `search`.',\n    type: 'string',\n    status: 'optional',\n  },\n  autocomplete: {\n    doc: 'Defaults to `off`. Set to `on` or any of [allowed `attributes`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete). Keep in mind, 1. you may have to define a `name`, 2. have the input as a descendant of a `<form>` element, 3. and have a submit button inside the form.',\n    type: 'string',\n    status: 'optional',\n  },\n  submit_button_title: {\n    doc: 'Title attribute for the search/submit button. Only relevant when `type=\"search\"`.',\n    type: 'string',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the input more than the label. you can also send in a React component, so it gets wrapped inside the Input component.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  size: {\n    doc: 'The sizes you can choose is `default` (2rem), `medium` (2.5rem) and `large` (3rem) are supported component sizes. Defaults to `default` / `null`. Also, if you define a number like `size={2}` then it will be forwarded as the input element attribute.',\n    type: ['string', 'number'],\n    status: 'optional',\n  },\n  selectall: {\n    doc: 'If set to `true`, then the whole input value gets selected on the entry focus. A second click will place the cursor on the wanted position.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  clear: {\n    doc: 'If set to `true`, then a clear button will be shown which lets the user clear any given input value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  stretch: {\n    doc: 'If set to `true`, then the input field will be 100% in `width`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  input_attributes: {\n    doc: 'Provide the Input element with any attributes by using an Object `input_attributes={{size:\\'2\\'}}` or a JSON Object `input_attributes=\\'{\"size\":\"2\"}\\'`. **NB:** Keep in mind, that also every not listed component property will be sent along and set as an Input element attribute.',\n    type: 'object',\n    status: 'optional',\n  },\n  input_state: {\n    doc: 'Defines a custom visual state of the input. Use it only if you have to simulate a custom state. Currently are three statuses `virgin` , `focus` and `dirty`. Defaults to `null`.',\n    type: 'string',\n    status: 'optional',\n  },\n  submit_element: {\n    doc: 'Accepts a React element which will show up like the \"submit button\" would do on `type=\"search\"`.',\n    type: ['string', 'React.Element'],\n    status: 'optional',\n  },\n  inner_ref: {\n    doc: 'By providing a React.ref we can get the internally used input element (DOM). E.g. `inner_ref={myRef}` by using `React.createRef()` or `React.useRef()`.',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  input_element: {\n    doc: 'By providing a new component we can change the internally used element. Also supports a string only, like `input_element=\"input\"`.',\n    type: ['string', 'React.Element'],\n    status: 'internal',\n  },\n  inner_element: {\n    doc: 'By providing a new component to be rendered inside the \"shell\" – we can add a freely customizable internal element. Used by the Autocomplete component.',\n    type: ['string', 'React.Element'],\n    status: 'internal',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const inputEvents: PropertiesTableProps = {\n  on_change: {\n    doc: 'will be called on value changes made by the user. Returns an object with the value as a string and the native event: `{ value, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_focus: {\n    doc: 'will be called on focus set by the user. Returns `{ value, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_key_down: {\n    doc: 'will be called on key down by the user. Returns `{ value, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_blur: {\n    doc: 'will be called on blur set by the user. Returns `{ value, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_submit: {\n    doc: 'will be called on enter key press or submit button click. Returns `{ value, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_submit_focus: {\n    doc: 'will be called on submit button focus. Only relevant when `type=\"search\"`. Returns `{ value, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_submit_blur: {\n    doc: 'will be called on submit button blur. Only relevant when `type=\"search\"`. Returns `{ value, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_clear: {\n    doc: 'will be called on a clear button click. Returns `{ value, previousValue, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { FieldBlockSharedProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  DataValueWritePropsEvents,\n  DataValueWritePropsProperties,\n} from '../hooks/DataValueWritePropsDocs'\n\nexport const FieldProperties: PropertiesTableProps = {\n  ...DataValueWritePropsProperties,\n  ...FieldBlockSharedProperties,\n}\n\nexport const FieldEvents: PropertiesTableProps = {\n  ...DataValueWritePropsEvents,\n}\n\nexport const getFieldEventsWithTypes = (\n  valueType: { type: string; optional?: boolean } = undefined,\n  additionalArgsType: { type: string; optional?: boolean } = undefined\n): PropertiesTableProps => {\n  const value = valueType\n    ? `value${valueType.optional ? '?' : ''}: ${valueType.type}`\n    : 'value'\n\n  const add = additionalArgsType\n    ? `, additionalArgs${additionalArgsType.optional ? '?' : ''}: ${\n        additionalArgsType.type\n      }`\n    : ''\n\n  const typeString = `(${value}${add}) => void`\n\n  return {\n    ...FieldEvents,\n    onChange: {\n      ...FieldEvents.onChange,\n      type: typeString,\n    },\n    onFocus: {\n      ...FieldEvents.onFocus,\n      type: typeString,\n    },\n    onBlur: {\n      ...FieldEvents.onBlur,\n      type: typeString,\n    },\n  }\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n"],"names":["FieldBlockSharedProperties","label","doc","type","status","labelDescription","labelDescriptionInline","labelSrOnly","labelSize","help","layout","layoutOptions","width","contentWidth","FieldBlockProperties","labelHeight","asFieldset","align","disableStatusSummary","composition","disabled","stringProperties","multiline","leftIcon","rightIcon","capitalize","trim","inputMode","autoComplete","minLength","maxLength","pattern","size","inputProperties","selectall","clear","keepPlaceholder","keep_placeholder","rows","autoresizeMaxRows","characterCounter","autoresize","inputClassName","innerRef","submitElement","DataValueWritePropsProperties","value","defaultValue","path","info","warning","error","emptyValue","required","labelSuffix","schema","validateInitially","validateUnchanged","validateContinuously","errorMessages","onChangeValidator","onBlurValidator","transformIn","transformOut","DataValueWritePropsEvents","onChange","onFocus","onBlur","Th","label_sr_only","label_direction","status_state","status_props","globalStatus","placeholder","icon","icon_position","icon_size","input_class","autocomplete","submit_button_title","suffix","stretch","skeleton","input_attributes","input_state","submit_element","inner_ref","input_element","inner_element","inputEvents","on_change","on_focus","on_key_down","on_blur","on_submit","on_submit_focus","on_submit_blur","on_clear","Tr","FieldProperties","FieldEvents","getFieldEventsWithTypes","valueType","additionalArgsType","undefined","typeString","optional","Td"],"sourceRoot":""}