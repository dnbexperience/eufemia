{"version":3,"file":"13e5d332910a1a687465217b606cd5a9a9c3c001-9a0add839932eccc4740.js","mappings":"+ZAKO,MAAMA,EAAUA,KACrBC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,+CAOWC,EAAsBA,KACjCH,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAG,MAAA,CACFC,gBACAC,cACA,KAAAC,UAAA,EAAAL,SAAA,yeAyBaM,EAAsBA,KACjCR,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAG,MAAA,CACFC,gBACAC,cACA,KAAAC,UAAA,EAAAL,SAAA,8yBAuCaG,EAAgBA,KAC3B,IAAII,EACAC,EAEJ,MAAMC,EAAMC,GACH,IAAIC,SAASC,IAClBJ,EAAiBI,EACjBL,EAAUM,YAAW,KACnBD,EAAQ,CAAEE,UAAU,GAAQ,GAC3BJ,EAAE,IAUT,OANAD,EAAGM,OAAS,KAAO,IAADC,EACF,QAAdA,EAAAR,SAAc,IAAAQ,GAAdA,EAAiB,CAAEF,UAAU,IAC7BG,aAAaV,GACbA,EAAU,IAAI,EAGTE,CAAE,EAGES,EAAwBA,KACnCpB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,geAuBWmB,EAAeA,KAC1BrB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,kDAAAC,SAAA,2F,yUCvHK,MAAMH,EAAUA,KACrBC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,gDAAAM,UAAA,EAAAL,SAAA,ugFA8GWoB,EAAuBA,KAClCtB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAG,MAAA,CACFC,cAAA,gBACAC,cACA,KAAAC,UAAA,EAAAL,SAAA,40EAsGaqB,EAAoBA,KAC/BvB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,iDAAAC,SAAA,seAwBWsB,EAA0BA,KACrCxB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,yDAAAC,SAAA,ivBAoCWuB,EAAkBA,KAC7BzB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,+xBAuCWwB,EAASA,KACpB,MAAMC,GAA0BC,EAAAA,EAAAA,GAAA,OAAAC,OAAA,aAAAD,CAAA,CAAAE,KAAA,SAAAC,OAAA,6GAShC,OAAA/B,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAG,MAAA,CACFuB,8BACA,mCAAAzB,SAAA,w3BAFE,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/SubmitIndicator/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Wizard/Container/Examples.tsx"],"sourcesContent":["import { Button, Flex, FormLabel } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, FieldBlock, Form } from '@dnb/eufemia/src/extensions/forms'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      <Form.SubmitIndicator state=\"pending\" />\n    </ComponentBox>\n  )\n}\n\nexport const AsyncSubmitBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay}>\n            <Form.Card>\n              <Field.String path=\"/myField\" label=\"Short label\" />\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Form.Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AsyncChangeBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay} onChange={delay}>\n            <Form.Card>\n              <Field.String\n                path=\"/myField1\"\n                label=\"Label (with async validation)\"\n                placeholder=\"Write something ...\"\n                onChangeValidator={delay}\n              />\n              <FieldBlock width=\"medium\">\n                <Field.String\n                  path=\"/myField2\"\n                  width=\"stretch\"\n                  label=\"This is a long label\"\n                />\n              </FieldBlock>\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Form.Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\ntype CreateRequestReturn = Promise<{ hasError: boolean; cancel?: boolean }>\n\nexport const createRequest = () => {\n  let timeout: NodeJS.Timeout | null\n  let resolvePromise: ((value?: unknown) => void) | undefined\n\n  const fn = (t: number): CreateRequestReturn => {\n    return new Promise((resolve) => {\n      resolvePromise = resolve\n      timeout = setTimeout(() => {\n        resolve({ hasError: false })\n      }, t)\n    })\n  }\n\n  fn.cancel = () => {\n    resolvePromise?.({ hasError: true })\n    clearTimeout(timeout)\n    timeout = null\n  }\n\n  return fn\n}\n\nexport const WithinOtherComponents = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Flex.Horizontal align=\"center\">\n          <Form.SubmitButton showIndicator />\n          <Button variant=\"secondary\" icon=\"chevron_right\">\n            Secondary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <Button variant=\"tertiary\">\n            Tertiary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <FormLabel>\n            Label\n            <Form.SubmitIndicator state=\"pending\" />\n          </FormLabel>\n        </Flex.Horizontal>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithinALabel = () => {\n  return (\n    <ComponentBox data-visual-test=\"submit-indicator-with-label\">\n      <Form.Handler>\n        <Form.SubmitIndicator state=\"pending\" showLabel />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\nimport { createRequest } from '../../Form/SubmitIndicator/Examples'\nimport {\n  Form,\n  Field,\n  Value,\n  Wizard,\n} from '@dnb/eufemia/src/extensions/forms'\nimport { P, Card } from '@dnb/eufemia/src'\n\nexport const Default = () => {\n  return (\n    <ComponentBox data-visual-test=\"wizard-layout-card-border\">\n      {() => {\n        const initialData = {\n          firstName: 'John',\n          lastName: 'Doe',\n          streetName: 'Osloveien',\n          streetNr: 12,\n          postalCode: '1234',\n          city: 'Oslo',\n        }\n\n        const Step1 = () => (\n          <Wizard.Step title=\"Step 1\">\n            <Form.MainHeading>Heading</Form.MainHeading>\n            <Form.Card>\n              <P>Contents</P>\n            </Form.Card>\n            <Form.Card>\n              <P>Contents</P>\n            </Form.Card>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n        )\n\n        const Step2 = () => (\n          <Wizard.Step title=\"Step 2\">\n            <Form.MainHeading>Heading</Form.MainHeading>\n            <Form.Card>\n              <P>Contents</P>\n            </Form.Card>\n            <Form.Card>\n              <P>Contents</P>\n            </Form.Card>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n        )\n\n        const Summary = () => {\n          const { summaryTitle } = Form.useLocale().Step\n\n          return (\n            <Wizard.Step title={summaryTitle}>\n              <Form.MainHeading>Summary</Form.MainHeading>\n              <Form.Card>\n                <Form.SubHeading>Deliver address</Form.SubHeading>\n\n                <Value.SummaryList layout=\"grid\">\n                  <Value.Name.First path=\"/firstName\" />\n                  <Value.Name.Last path=\"/lastName\" />\n\n                  <Value.Composition label=\"Street\">\n                    <Value.String path=\"/streetName\" />\n                    <Value.Number path=\"/streetNr\" />\n                  </Value.Composition>\n\n                  <Value.Composition label=\"City\">\n                    <Value.String path=\"/postalCode\" />\n                    <Value.String path=\"/city\" />\n                  </Value.Composition>\n                </Value.SummaryList>\n\n                <Wizard.EditButton toStep={1} />\n              </Form.Card>\n\n              <Form.ButtonRow>\n                <Wizard.Buttons />\n                <Form.SubmitButton variant=\"send\" />\n              </Form.ButtonRow>\n            </Wizard.Step>\n          )\n        }\n\n        // Can be an async function, in case you need to make some async stuff\n        const onStepChange = async (step, mode) => {\n          if (mode === 'next') {\n            await new Promise((resolve) => setTimeout(resolve, 1000))\n          }\n          console.log('onStepChange', step, mode)\n        }\n\n        // Can be an async function, in case you need to make some async stuff\n        const onSubmit = async (data) => {\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n          console.log('onSubmit', data)\n        }\n\n        const MyForm = () => {\n          // Routers like \"react-router\" are supported as well\n          Wizard.useQueryLocator('my-wizard')\n\n          return (\n            <Form.Handler data={initialData} onSubmit={onSubmit}>\n              <Wizard.Container id=\"my-wizard\" onStepChange={onStepChange}>\n                <Step1 />\n                <Step2 />\n                <Summary />\n              </Wizard.Container>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AsyncWizardContainer = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const MyForm = () => {\n          const onStepChange = React.useCallback(async (index, mode) => {\n            console.log('onStepChange', index)\n\n            if (mode === 'next') {\n              try {\n                const request = createRequest()\n                await request(1000) // Simulate a request\n              } catch (error) {\n                return error\n              }\n            }\n\n            // Optional, you can show a FormStatus at the bottom of the form\n            return { info: `Info message: ${index}` }\n          }, [])\n\n          const onSubmit = React.useCallback(async (data) => {\n            console.log('onSubmit', data)\n\n            try {\n              const request = createRequest()\n              await request(1000) // Simulate a request\n            } catch (error) {\n              return error\n            }\n\n            // Optional, you can show a FormStatus at the bottom of the form\n            return { warning: 'Warning message' }\n          }, [])\n\n          const validator = React.useCallback(async (value) => {\n            try {\n              const request = createRequest()\n              await request(1000) // Simulate a request\n            } catch (error) {\n              return error\n            }\n\n            if (value === 'invalid') {\n              return Error('Error message')\n            }\n          }, [])\n\n          const validator1 = debounceAsync(validator)\n          const validator2 = debounceAsync(validator)\n\n          const Step1 = () => {\n            return (\n              <Wizard.Step title=\"Step 1\">\n                <Form.Card>\n                  <Field.String\n                    label=\"Required field with async validator\"\n                    onChangeValidator={validator1}\n                    path=\"/field1\"\n                    required\n                  />\n                  <Field.String\n                    label=\"Field with async validator\"\n                    onChangeValidator={validator2}\n                    path=\"/field2\"\n                  />\n                </Form.Card>\n\n                <Wizard.Buttons />\n              </Wizard.Step>\n            )\n          }\n\n          const Step2 = () => {\n            return (\n              <Wizard.Step title=\"Step 2\">\n                <Form.MainHeading>Heading</Form.MainHeading>\n\n                <Form.Card>\n                  <P>Contents of step 2</P>\n                </Form.Card>\n\n                <Form.ButtonRow>\n                  <Wizard.Buttons />\n                  <Form.SubmitButton variant=\"send\" />\n                </Form.ButtonRow>\n              </Wizard.Step>\n            )\n          }\n\n          return (\n            <Form.Handler onSubmit={onSubmit}>\n              <Wizard.Container onStepChange={onStepChange}>\n                <Step1 />\n                <Step2 />\n              </Wizard.Container>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const WithStatusMessage = () => {\n  return (\n    <ComponentBox data-visual-test=\"wizard-with-status-message\">\n      <Form.Handler>\n        <Wizard.Container\n          onStepChange={async (index, mode, { preventNavigation }) => {\n            preventNavigation()\n\n            return {\n              info: 'Info message.',\n              warning: 'Warning message.',\n            }\n          }}\n        >\n          <Wizard.Step title=\"Step 1\">\n            <Form.MainHeading>Step 1</Form.MainHeading>\n            <P>Content</P>\n            <Wizard.NextButton text=\"Press me to see the status message\" />\n          </Wizard.Step>\n        </Wizard.Container>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithStatusMessageInMenu = () => {\n  return (\n    <ComponentBox data-visual-test=\"wizard-with-status-message-in-menu\">\n      <Form.Handler\n        onSubmit={(data) => {\n          console.log('onSubmit', data)\n        }}\n      >\n        <Wizard.Container\n          onStepChange={async (index, mode) => {\n            console.log('onStepChange', index, mode)\n          }}\n          mode=\"loose\"\n          initialActiveIndex={2}\n        >\n          <Wizard.Step title=\"Step 1\">\n            <Field.String label=\"Step 1\" path=\"/step1\" required />\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step title=\"Step 2\">\n            <Field.String label=\"Step 2\" path=\"/step2\" required />\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step title=\"Step 3\">\n            <Field.String label=\"Step 3\" path=\"/step3\" />\n            <Wizard.Buttons />\n          </Wizard.Step>\n        </Wizard.Container>\n\n        <Form.SubmitButton />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const OnSubmitRequest = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        onSubmitRequest={({ getErrors }) => {\n          getErrors().forEach(({ label, error }) => {\n            console.log(label, error.message)\n          })\n        }}\n      >\n        <Wizard.Container mode=\"loose\" variant=\"drawer\">\n          <Wizard.Step title=\"Step 1\">\n            <Form.Card>\n              <Field.String\n                path=\"/foo\"\n                label=\"Foo\"\n                defaultValue=\"With default value\"\n                required\n              />\n              <Field.String path=\"/bar\" label=\"Bar\" required />\n            </Form.Card>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step title=\"Step 2\">\n            <Form.Card>\n              <Field.String path=\"/baz\" label=\"Baz\" required />\n            </Form.Card>\n\n            <Wizard.Buttons />\n\n            <Form.SubmitButton />\n          </Wizard.Step>\n        </Wizard.Container>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Outset = () => {\n  const CustomContainerWithPadding = styled.div`\n    padding: 1.5rem;\n    background: white;\n    outline: 3px solid black;\n    border-radius: 0.5rem;\n    position: relative;\n    z-index: 0;\n  `\n\n  return (\n    <ComponentBox\n      scope={{ CustomContainerWithPadding }}\n      data-visual-test=\"wizard-outset\"\n    >\n      <CustomContainerWithPadding>\n        <Card.Provider disableCardBreakout>\n          <Form.Handler>\n            <Wizard.Container mode=\"loose\">\n              <Wizard.Step title=\"Step 1\">\n                <Form.Card>\n                  <Field.String label=\"Step 1\" path=\"/step1\" required />\n                  <Wizard.Buttons />\n                </Form.Card>\n              </Wizard.Step>\n\n              <Wizard.Step title=\"Step 2\">\n                <Form.Card>\n                  <Field.String label=\"Step 2\" path=\"/step2\" required />\n                  <Wizard.Buttons />\n                </Form.Card>\n              </Wizard.Step>\n\n              <Wizard.Step title=\"Step 3\">\n                <Form.Card>\n                  <Field.String label=\"Step 3\" path=\"/step3\" />\n                  <Wizard.Buttons />\n                  <Form.SubmitButton />\n                </Form.Card>\n              </Wizard.Step>\n            </Wizard.Container>\n          </Form.Handler>\n        </Card.Provider>\n      </CustomContainerWithPadding>\n    </ComponentBox>\n  )\n}\n"],"names":["Default","_jsx","ComponentBox","children","AsyncSubmitBehavior","scope","createRequest","debounceAsync","noInline","AsyncChangeBehavior","timeout","resolvePromise","fn","t","Promise","resolve","setTimeout","hasError","cancel","_resolvePromise","clearTimeout","WithinOtherComponents","WithinALabel","AsyncWizardContainer","WithStatusMessage","WithStatusMessageInMenu","OnSubmitRequest","Outset","CustomContainerWithPadding","_styled","target","name","styles"],"sourceRoot":""}