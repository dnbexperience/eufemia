{"version":3,"file":"154e74b17b8db98b3bb160dbb3f69c82536989bd-530d64cfd5f3c3b99e91.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/AnimatedContainer/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/Array/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/GenerateSchema.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/ListAllProps.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/Log.tsx"],"sourcesContent":["import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, Form, Iterate } from '@dnb/eufemia/src/extensions/forms'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyForm = () => {\n          const { count } = Iterate.useCount('myForm')\n          return (\n            <Form.Handler\n              defaultData={{\n                myList: ['Item 1'],\n              }}\n              id=\"myForm\"\n            >\n              <Form.Card>\n                <Iterate.Array\n                  path=\"/myList\"\n                  placeholder={<>Empty list</>}\n                >\n                  <Iterate.AnimatedContainer title=\"Title {itemNo}\">\n                    <Field.String label=\"Label\" itemPath=\"/\" />\n\n                    <Iterate.Toolbar>\n                      <Iterate.RemoveButton />\n                    </Iterate.Toolbar>\n                  </Iterate.AnimatedContainer>\n                </Iterate.Array>\n\n                <Iterate.PushButton\n                  path=\"/myList\"\n                  pushValue={'Item ' + String(count('/myList') + 1)}\n                  text=\"Add new item\"\n                />\n              </Form.Card>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Avatar, Flex, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport {\n  Iterate,\n  Field,\n  Value,\n  Form,\n  Tools,\n  Wizard,\n} from '@dnb/eufemia/src/extensions/forms'\nexport { Default as AnimatedContainer } from '../AnimatedContainer/Examples'\n\nexport const PrimitiveItemsFields = () => {\n  return (\n    <ComponentBox>\n      <Iterate.Array\n        defaultValue={['Iron Man', 'Captain America', 'The Hulk']}\n        onChange={console.log}\n      >\n        <Field.String itemPath=\"/\" />\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const PrimitiveItemsValues = () => {\n  return (\n    <ComponentBox data-visual-test=\"primitive-element-values\">\n      <Value.SummaryList>\n        <Iterate.Array\n          defaultValue={['Iron Man', 'Captain America', 'The Hulk']}\n        >\n          <Value.String itemPath=\"/\" />\n        </Iterate.Array>\n      </Value.SummaryList>\n    </ComponentBox>\n  )\n}\n\nexport const ValueComposition = () => {\n  return (\n    <ComponentBox>\n      <Value.Composition>\n        <Iterate.Array\n          defaultValue={[\n            {\n              label: 'Label A',\n              value: 'value 1',\n            },\n            {\n              label: 'Label B',\n              value: 'value 2',\n            },\n          ]}\n        >\n          <Value.String\n            label={<Value.String itemPath=\"/label\" />}\n            itemPath=\"/value\"\n          />\n        </Iterate.Array>\n      </Value.Composition>\n    </ComponentBox>\n  )\n}\n\nexport const WithTable = () => {\n  return (\n    <ComponentBox>\n      <Table>\n        <thead>\n          <Tr>\n            <Th>Name</Th>\n            <Th>Age</Th>\n          </Tr>\n        </thead>\n        <tbody>\n          <Iterate.Array\n            withoutFlex\n            defaultValue={[\n              { name: 'Iron Man', age: 45 },\n              { name: 'Captain America', age: 123 },\n              { name: 'The Hulk', age: 3337 },\n            ]}\n          >\n            <Tr>\n              <Td>\n                <Value.Name.Last itemPath=\"/name\" />\n              </Td>\n              <Td>\n                <Value.Number itemPath=\"/age\" />\n              </Td>\n            </Tr>\n          </Iterate.Array>\n        </tbody>\n      </Table>\n    </ComponentBox>\n  )\n}\n\nexport const ObjectItems = () => {\n  return (\n    <ComponentBox>\n      <Iterate.Array\n        defaultValue={[\n          {\n            accountName: 'Brukskonto',\n            accountNumber: '90901134567',\n          },\n          {\n            accountName: 'Sparekonto',\n            accountNumber: '90901156789',\n          },\n        ]}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        <Field.Composition>\n          <Field.BankAccountNumber itemPath=\"/accountNumber\" />\n          <Field.String label=\"Account name\" itemPath=\"/accountName\" />\n        </Field.Composition>\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const RenderPropsPrimitiveItems = () => {\n  return (\n    <ComponentBox>\n      <Iterate.Array\n        defaultValue={['foo', 'bar']}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        {(elementValue) => <Field.String value={elementValue} />}\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const RenderPropsObjectItems = () => {\n  return (\n    <ComponentBox>\n      <Iterate.Array\n        defaultValue={[\n          { num: 1, txt: 'One' },\n          { num: 2, txt: 'Two' },\n        ]}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        {({ num, txt }) => (\n          <Field.Composition width=\"large\">\n            <Field.Number value={num} width=\"small\" />\n            <Field.String value={txt} width={false} />\n          </Field.Composition>\n        )}\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const ArrayFromFormHandler = () => {\n  return (\n    <ComponentBox data-visual-test=\"animated-container\">\n      <Form.Handler\n        data={{\n          avengers: [\n            {\n              nickname: 'Iron Man',\n              firstName: 'Tony',\n              lastName: 'Stark',\n            },\n            {\n              nickname: 'Captain America',\n              firstName: 'Steve',\n              lastName: 'Rogers',\n            },\n          ],\n        }}\n        onChange={(data) => console.log('DataContext/onChange', data)}\n      >\n        <Flex.Stack>\n          <Form.MainHeading>Avengers</Form.MainHeading>\n\n          <Form.Card>\n            <Iterate.Array\n              path=\"/avengers\"\n              onChange={(value) => console.log('Iterate/onChange', value)}\n            >\n              <Iterate.AnimatedContainer\n                title={\n                  <Value.String\n                    label={false}\n                    itemPath=\"/nickname\"\n                    placeholder=\"A Nick name\"\n                  />\n                }\n              >\n                <Field.Name\n                  itemPath=\"/nickname\"\n                  width=\"medium\"\n                  label=\"Nick name\"\n                />\n\n                <Field.Composition>\n                  <Field.Name.First itemPath=\"/firstName\" width=\"medium\" />\n                  <Field.Name.Last itemPath=\"/lastName\" width=\"medium\" />\n                </Field.Composition>\n\n                <Iterate.Toolbar>\n                  <Iterate.RemoveButton showConfirmDialog />\n                </Iterate.Toolbar>\n              </Iterate.AnimatedContainer>\n            </Iterate.Array>\n\n            <Iterate.PushButton\n              text=\"Add another avenger\"\n              path=\"/avengers\"\n              pushValue={{}}\n            />\n          </Form.Card>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const ViewAndEditContainer = () => {\n  return (\n    <ComponentBox data-visual-test=\"view-and-edit-container\">\n      {() => {\n        const MyEditItemForm = () => {\n          return (\n            <Field.Composition>\n              <Field.Name.First itemPath=\"/firstName\" width=\"medium\" />\n              <Field.Name.Last\n                itemPath=\"/lastName\"\n                width=\"medium\"\n                required\n              />\n            </Field.Composition>\n          )\n        }\n\n        const MyEditItem = () => {\n          return (\n            <Iterate.EditContainer\n              title=\"Edit account holder {itemNo}\"\n              titleWhenNew=\"New account holder {itemNo}\"\n            >\n              <MyEditItemForm />\n            </Iterate.EditContainer>\n          )\n        }\n\n        const MyViewItem = () => {\n          const item = Iterate.useItem()\n          console.log('index:', item.index)\n\n          return (\n            <Iterate.ViewContainer title=\"Account holder {itemNo}\">\n              <Value.SummaryList>\n                <Value.Name.First itemPath=\"/firstName\" showEmpty />\n                <Value.Name.Last itemPath=\"/lastName\" placeholder=\"-\" />\n              </Value.SummaryList>\n            </Iterate.ViewContainer>\n          )\n        }\n\n        const CreateNewEntry = () => {\n          return (\n            <Iterate.PushContainer\n              path=\"/accounts\"\n              title=\"New account holder\"\n              openButton={\n                <Iterate.PushContainer.OpenButton text=\"Add another account\" />\n              }\n              showOpenButtonWhen={(list) => list.length > 0}\n            >\n              <MyEditItemForm />\n            </Iterate.PushContainer>\n          )\n        }\n\n        const MyForm = () => {\n          return (\n            <Form.Handler\n              data={{\n                accounts: [\n                  {\n                    firstName: 'Tony',\n                    lastName: 'Rogers',\n                  },\n                ],\n              }}\n              onChange={(data) =>\n                console.log('DataContext/onChange', data)\n              }\n              onSubmit={async (data) => console.log('onSubmit', data)}\n            >\n              <Flex.Stack>\n                <Form.MainHeading>Accounts</Form.MainHeading>\n\n                <Form.Card gap={false}>\n                  <Iterate.Array path=\"/accounts\">\n                    <MyViewItem />\n                    <MyEditItem />\n                  </Iterate.Array>\n\n                  <CreateNewEntry />\n                </Form.Card>\n\n                <Form.SubmitButton variant=\"send\" />\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const DynamicPathValue = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler defaultData={{ count: 0 }}>\n        <Flex.Stack>\n          <Field.Number path=\"/count\" width=\"small\" showStepControls />\n          <Iterate.Array\n            path=\"/items\"\n            countPath=\"/count\"\n            countPathTransform={({ value, index }) => {\n              return 'myObject' in (value || {})\n                ? value\n                : { myObject: index }\n            }}\n          >\n            <Field.Number itemPath=\"/myObject\" label=\"Item no. {itemNo}\" />\n          </Iterate.Array>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithVisibility = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Iterate.Array path=\"/myList\" defaultValue={[{}]}>\n          <Flex.Stack>\n            <Field.Name.First\n              className=\"firstName\"\n              itemPath=\"/firstName\"\n            />\n\n            <Form.Visibility\n              animate\n              visibleWhen={{\n                itemPath: '/firstName',\n                hasValue: (value) => Boolean(value),\n              }}\n            >\n              <Field.Name.Last className=\"lastName\" itemPath=\"/lastName\" />\n            </Form.Visibility>\n          </Flex.Stack>\n        </Iterate.Array>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const InitiallyOpen = () => {\n  return (\n    <ComponentBox scope={{ Iterate, Tools }}>\n      <Form.Handler required>\n        <Wizard.Container>\n          <Wizard.Step>\n            <Form.Card>\n              <Iterate.Array path=\"/myList\" defaultValue={[{}]}>\n                <Iterate.ViewContainer>\n                  <Value.String label=\"Item {itemNo}\" itemPath=\"/foo\" />\n                </Iterate.ViewContainer>\n                <Iterate.EditContainer>\n                  <Field.String\n                    label=\"Item {itemNo}\"\n                    itemPath=\"/foo\"\n                    defaultValue=\"foo\"\n                  />\n                </Iterate.EditContainer>\n              </Iterate.Array>\n\n              <Iterate.PushButton\n                text=\"Add\"\n                path=\"/myList\"\n                variant=\"tertiary\"\n                pushValue={{}}\n              />\n            </Form.Card>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step>\n            <Iterate.Array path=\"/myList\" defaultValue={[{}]}>\n              <Iterate.EditContainer>\n                <Field.String\n                  label=\"Item {itemNo}\"\n                  itemPath=\"/foo\"\n                  defaultValue=\"foo\"\n                />\n              </Iterate.EditContainer>\n              <Iterate.ViewContainer>\n                <Value.String label=\"Item {itemNo}\" itemPath=\"/foo\" />\n              </Iterate.ViewContainer>\n            </Iterate.Array>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n        </Wizard.Container>\n\n        <Tools.Log top />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const InitialOpenWithToolbarVariant = () => {\n  return (\n    <ComponentBox scope={{ Iterate, Tools }}>\n      {() => {\n        const MyForm = () => {\n          const { getCountryNameByIso } = Value.SelectCountry.useCountry()\n\n          return (\n            <Form.Handler\n              onSubmit={async (data) => console.log('onSubmit', data)}\n              onSubmitRequest={() => console.log('onSubmitRequest')}\n            >\n              <Flex.Stack>\n                <Form.MainHeading>Statsborgerskap</Form.MainHeading>\n\n                <Form.Card>\n                  <Iterate.Array\n                    path=\"/countries\"\n                    defaultValue={[null]}\n                    onChangeValidator={(arrayValue) => {\n                      const findFirstDuplication = (arr) =>\n                        arr.findIndex((e, i) => arr.indexOf(e) !== i)\n\n                      const index = findFirstDuplication(arrayValue)\n                      if (index > -1) {\n                        return new Error(\n                          'You can not have duplicate items: ' +\n                            getCountryNameByIso(\n                              String(arrayValue.at(index)),\n                            ),\n                        )\n                      }\n                    }}\n                  >\n                    <Iterate.ViewContainer toolbarVariant=\"minimumOneItem\">\n                      <Value.SelectCountry\n                        label=\"Land du er statsborger i\"\n                        itemPath=\"/\"\n                      />\n                    </Iterate.ViewContainer>\n\n                    <Iterate.EditContainer toolbarVariant=\"minimumOneItem\">\n                      <Field.SelectCountry\n                        label=\"Land du er statsborger i\"\n                        itemPath=\"/\"\n                        required\n                      />\n                    </Iterate.EditContainer>\n                  </Iterate.Array>\n\n                  <Iterate.PushButton\n                    path=\"/countries\"\n                    pushValue={null}\n                    text=\"Legg til flere statsborgerskap\"\n                  />\n                </Form.Card>\n\n                <Form.SubmitButton variant=\"send\" />\n\n                <Tools.Log />\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const ToolbarVariantMiniumOneItemOneItem = () => {\n  return (\n    <ComponentBox hideCode>\n      <Iterate.Array defaultValue={['foo']}>\n        <Iterate.ViewContainer toolbarVariant=\"minimumOneItem\">\n          View Content\n        </Iterate.ViewContainer>\n        <Iterate.EditContainer toolbarVariant=\"minimumOneItem\">\n          Edit Content\n        </Iterate.EditContainer>\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const ToolbarVariantMiniumOneItemTwoItems = () => {\n  return (\n    <ComponentBox hideCode>\n      <Iterate.Array defaultValue={['foo', 'bar']}>\n        <Iterate.ViewContainer toolbarVariant=\"minimumOneItem\">\n          View Content\n        </Iterate.ViewContainer>\n        <Iterate.EditContainer toolbarVariant=\"minimumOneItem\">\n          Edit Content\n        </Iterate.EditContainer>\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const WithArrayValidator = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        defaultData={{ items: ['foo'] }}\n        onSubmit={async () => console.log('onSubmit')}\n      >\n        <Form.Card>\n          <Iterate.Array\n            path=\"/items\"\n            onChangeValidator={(arrayValue) => {\n              if (!(arrayValue && arrayValue.length > 1)) {\n                return new Error('You need at least two items')\n              }\n            }}\n            animate\n          >\n            <Flex.Horizontal align=\"flex-end\">\n              <Field.String\n                label=\"Item no. {itemNo}\"\n                itemPath=\"/\"\n                width=\"medium\"\n                size=\"medium\"\n              />\n              <Iterate.RemoveButton showConfirmDialog />\n            </Flex.Horizontal>\n          </Iterate.Array>\n\n          <Iterate.PushButton\n            top\n            path=\"/items\"\n            pushValue={null}\n            text=\"Add\"\n          />\n          <Form.SubmitButton />\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const FilledViewAndEditContainer = () => {\n  return (\n    <ComponentBox\n      data-visual-test=\"filled-view-and-edit-container\"\n      hideCode\n    >\n      {() => {\n        const MyEditItemForm = () => {\n          return (\n            <Flex.Stack>\n              <Field.Name.First itemPath=\"/firstName\" required />\n              <Field.Name.Last itemPath=\"/lastName\" required />\n            </Flex.Stack>\n          )\n        }\n\n        const EditItemToolbar = () => {\n          return (\n            <Iterate.Toolbar>\n              <Flex.Horizontal\n                justify=\"space-between\"\n                style={{ width: '100%' }}\n              >\n                <Flex.Horizontal gap=\"large\">\n                  <Iterate.EditContainer.DoneButton />\n                  <Iterate.EditContainer.CancelButton />\n                </Flex.Horizontal>\n                <Iterate.ViewContainer.RemoveButton\n                  showConfirmDialog\n                  left={false}\n                />\n              </Flex.Horizontal>\n            </Iterate.Toolbar>\n          )\n        }\n\n        const MyEditItem = (props) => {\n          return (\n            <Iterate.EditContainer\n              variant=\"filled\"\n              toolbarVariant=\"custom\"\n              toolbar={<EditItemToolbar />}\n              {...props}\n            >\n              <ValueWithAvatar />\n              <MyEditItemForm />\n            </Iterate.EditContainer>\n          )\n        }\n\n        const CreateNewEntry = () => {\n          return (\n            <Iterate.PushContainer\n              path=\"/accounts\"\n              title=\"New account holder\"\n              variant=\"filled\"\n              openButton={\n                <Iterate.PushContainer.OpenButton text=\"Add another account\" />\n              }\n              showOpenButtonWhen={(list) => list.length > 0}\n            >\n              <MyEditItemForm />\n            </Iterate.PushContainer>\n          )\n        }\n\n        const ValueWithAvatar = () => {\n          const { value } = Iterate.useItem()\n          const firstName = String(value['firstName'] || '')\n          return (\n            <Flex.Horizontal align=\"center\">\n              <Avatar.Group label={firstName}>\n                <Avatar>{firstName.substring(0, 1).toUpperCase()}</Avatar>\n              </Avatar.Group>\n              <Value.String itemPath=\"/firstName\" />\n            </Flex.Horizontal>\n          )\n        }\n\n        const MyViewItem = () => {\n          return (\n            <Iterate.ViewContainer\n              variant=\"filled\"\n              toolbarVariant=\"custom\"\n              toolbar={<></>}\n            >\n              <Flex.Horizontal align=\"center\" justify=\"space-between\">\n                <ValueWithAvatar />\n\n                <Iterate.Toolbar>\n                  <Iterate.ViewContainer.EditButton />\n                </Iterate.Toolbar>\n              </Flex.Horizontal>\n            </Iterate.ViewContainer>\n          )\n        }\n\n        return (\n          <Form.Handler\n            data={{\n              accounts: [\n                {\n                  firstName:\n                    'Tony with long name that maybe will wrap over to a new line',\n                  lastName: 'Last',\n                },\n                {\n                  firstName: 'Maria',\n                  lastName: 'Last',\n                },\n              ],\n            }}\n            onSubmit={(data) => console.log('onSubmit', data)}\n            onSubmitRequest={() => console.log('onSubmitRequest')}\n          >\n            <Flex.Stack>\n              <Form.MainHeading>Accounts</Form.MainHeading>\n\n              <Form.Card gap={false}>\n                <Iterate.Array path=\"/accounts\" limit={2}>\n                  <MyViewItem />\n                  <MyEditItem />\n                </Iterate.Array>\n\n                <CreateNewEntry />\n              </Form.Card>\n\n              <Form.SubmitButton variant=\"send\" />\n            </Flex.Stack>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\nexport const ViewAndEditContainerWithLineDivider = () => {\n  return (\n    <ComponentBox\n      data-visual-test=\"view-and-edit-container-with-line-divider\"\n      hideCode\n    >\n      {() => {\n        const MyEditItem = () => {\n          return (\n            <Iterate.EditContainer variant=\"basic\" divider=\"line\">\n              <Field.Name.First itemPath=\"/firstName\" required />\n              <Field.Name.Last itemPath=\"/lastName\" required />\n            </Iterate.EditContainer>\n          )\n        }\n\n        const MyViewItem = () => {\n          return (\n            <Iterate.ViewContainer variant=\"basic\" divider=\"line\">\n              <Value.Name.First itemPath=\"/firstName\" />\n              <Value.Name.Last itemPath=\"/lastName\" />\n            </Iterate.ViewContainer>\n          )\n        }\n\n        return (\n          <Form.Handler\n            data={{\n              accounts: [\n                {\n                  firstName: 'Tony',\n                  lastName: 'Last',\n                },\n                {\n                  firstName: 'Maria',\n                  lastName: 'Last',\n                },\n              ],\n            }}\n            onSubmit={(data) => console.log('onSubmit', data)}\n            onSubmitRequest={() => console.log('onSubmitRequest')}\n          >\n            <Flex.Stack>\n              <Form.MainHeading>Accounts</Form.MainHeading>\n\n              <Form.Card>\n                <Iterate.Array path=\"/accounts\" divider=\"line\">\n                  <MyViewItem />\n                  <MyEditItem />\n                </Iterate.Array>\n              </Form.Card>\n\n              <Form.SubmitButton variant=\"send\" />\n            </Flex.Stack>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n","import { useCallback, useContext, useRef } from 'react'\nimport pointer, { JsonObject } from '../utils/json-pointer'\nimport DataContext, { FilterData } from '../DataContext/Context'\nimport { JSONSchema } from '../types'\n\nexport type GenerateSchemaReturn = {\n  schema: JSONSchema\n  data: JsonObject\n  propsOfFields: JsonObject\n  propsOfValues: JsonObject\n}\nexport type GenerateSchemaProps = {\n  log?: boolean\n  generateRef?: React.MutableRefObject<() => GenerateSchemaReturn>\n  filterData?: FilterData\n  children: React.ReactNode\n}\nexport type GenerateRef = GenerateSchemaProps['generateRef']['current']\n\nexport const schemaParams = [\n  'minLength',\n  'maxLength',\n  'pattern',\n  'description',\n  'min',\n  'max',\n  'multipleOf',\n  'exclusiveMinimum',\n  'exclusiveMaximum',\n]\n\nexport default function GenerateSchema(props: GenerateSchemaProps) {\n  const { generateRef, filterData, log, children } = props || {}\n  const { fieldPropsRef, valuePropsRef, data, hasContext } =\n    useContext(DataContext)\n\n  const dataRef = useRef<JsonObject>({})\n  dataRef.current = data\n\n  const generate = useCallback(() => {\n    const schema = Object.entries(fieldPropsRef?.current || {}).reduce(\n      (acc, [path, props]) => {\n        if (path.startsWith('/')) {\n          const objectKey = path.substring(1)\n\n          const pathList = objectKey.split('/')\n          const slashCount = pathList.length\n\n          const type = props.valueType || 'string'\n          const propertyValue = {\n            type,\n          }\n\n          for (const prop of schemaParams) {\n            if (props[prop]) {\n              propertyValue[prop] = props[prop]\n            }\n          }\n\n          if (slashCount > 1) {\n            const nestedPath = ['']\n            for (const path of pathList) {\n              nestedPath.push(path)\n              const pathToSet = nestedPath.join('/properties/')\n              const isLast = nestedPath.length - 1 === pathList.length\n\n              const existingValue = pointer.has(acc, pathToSet)\n                ? pointer.get(acc, pathToSet)\n                : null\n\n              const pathValue = isLast ? propertyValue : existingValue\n\n              if (isLast) {\n                if (filterData?.[pathToSet] !== false) {\n                  pointer.set(acc, pathToSet, pathValue)\n                }\n              } else {\n                const pathValue = {\n                  type: 'object',\n                  ...existingValue,\n                }\n\n                // - Add required\n                const required = []\n                if (props.required) {\n                  required.push(pathList.at(-1))\n                }\n                if (existingValue?.required) {\n                  required.push(...existingValue.required)\n                }\n                if (required.length > 0) {\n                  pathValue.required = required\n                }\n\n                if (filterData?.[pathToSet] !== false) {\n                  pointer.set(acc, pathToSet, pathValue)\n                }\n              }\n            }\n          } else {\n            if (filterData?.[path] !== false) {\n              pointer.set(acc.properties, path, propertyValue)\n            }\n            if (props.required) {\n              acc.required.push(objectKey)\n            }\n          }\n        }\n\n        return acc\n      },\n      { type: 'object', properties: {}, required: [] }\n    )\n\n    const propsOfFields = Object.entries(\n      fieldPropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function'\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        pointer.set(acc, path, propertyValue)\n      }\n\n      return acc\n    }, {})\n\n    const propsOfValues = Object.entries(\n      valuePropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function'\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        pointer.set(acc, path, propertyValue)\n      }\n\n      return acc\n    }, {})\n\n    if (schema.required.length === 0) {\n      delete schema.required\n    }\n\n    return {\n      schema,\n      data: dataRef.current,\n      propsOfFields,\n      propsOfValues,\n    } as GenerateSchemaReturn\n  }, [fieldPropsRef, filterData, valuePropsRef])\n\n  if (hasContext) {\n    if (log) {\n      console.log(generate().schema)\n    }\n\n    if (generateRef) {\n      generateRef.current = generate\n    }\n  }\n\n  return children\n}\n","import { isValidElement, useCallback, useContext, useRef } from 'react'\nimport pointer, { JsonObject } from '../utils/json-pointer'\nimport DataContext, { FilterData } from '../DataContext/Context'\n\nexport type ListAllPropsReturn<Data> = {\n  propsOfFields: Data\n  propsOfValues: Data\n}\nexport type ListAllPropsProps<Data> = {\n  log?: boolean\n  generateRef?: React.MutableRefObject<() => ListAllPropsReturn<Data>>\n  filterData?: FilterData\n  children: React.ReactNode\n}\nexport type GenerateRef<Data extends JsonObject = JsonObject> =\n  ListAllPropsProps<Data>['generateRef']['current']\n\nexport default function ListAllProps<Data extends JsonObject = JsonObject>(\n  props: ListAllPropsProps<Data>\n) {\n  const { log, generateRef, filterData, children } = props || {}\n  const { fieldPropsRef, valuePropsRef, data, hasContext } =\n    useContext(DataContext)\n\n  const dataRef = useRef<JsonObject>({})\n  dataRef.current = data\n\n  const generate = useCallback(() => {\n    const propsOfFields = Object.entries(\n      fieldPropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function' &&\n            !isValidElement(props[prop])\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        if (filterData?.[path] !== false) {\n          pointer.set(acc, path, propertyValue)\n        }\n      }\n\n      return acc\n    }, {})\n\n    const propsOfValues = Object.entries(\n      valuePropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function' &&\n            !isValidElement(props[prop])\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        if (filterData?.[path] !== false) {\n          pointer.set(acc, path, propertyValue)\n        }\n      }\n\n      return acc\n    }, {})\n\n    return { propsOfFields, propsOfValues } as ListAllPropsReturn<Data>\n  }, [fieldPropsRef, filterData, valuePropsRef])\n\n  if (hasContext) {\n    if (log) {\n      console.log(generate())\n    }\n\n    if (generateRef) {\n      generateRef.current = generate\n    }\n  }\n\n  return children\n}\n","import React, { useContext } from 'react'\nimport DataContext from '../DataContext/Context'\nimport Section, { SectionAllProps } from '../../../components/Section'\nimport { FormLabel } from '../../../components'\n\nfunction Log({\n  placeholder,\n  label,\n  data: logData,\n  ...props\n}: Omit<SectionAllProps, 'data' | 'label'> & {\n  data?: unknown\n  label?: React.ReactNode\n  placeholder?: React.ReactNode\n}) {\n  const { data } = useContext(DataContext)\n\n  return (\n    <Section\n      element=\"output\"\n      backgroundColor=\"sand-yellow\"\n      style={{ maxWidth: '80vw' }}\n      innerSpace\n      {...props}\n    >\n      {label && (\n        <FormLabel bottom>\n          <b>{label}</b>\n        </FormLabel>\n      )}\n      <pre>\n        {placeholder && Object.keys((logData ?? data) || {}).length === 0\n          ? placeholder\n          : JSON.stringify(\n              replaceUndefinedValues(logData ?? data),\n              null,\n              2\n            )}\n        {' ' /* Ensure one line of spacing */}\n      </pre>\n    </Section>\n  )\n}\n\n/**\n * Replaces undefined values in an object with a specified replacement value.\n * @param value - The value to check for undefined values.\n * @param replaceWith - The value to replace undefined values with. Default is null.\n * @returns The object with undefined values replaced.\n */\nfunction replaceUndefinedValues(\n  value: unknown,\n  replaceWith = 'undefined' as unknown\n): unknown {\n  if (typeof value === 'undefined') {\n    return replaceWith\n  } else if (Array.isArray(value)) {\n    return value.map((item) => replaceUndefinedValues(item, replaceWith))\n  } else if (value && typeof value === 'object' && value !== replaceWith) {\n    return {\n      ...value,\n      ...Object.fromEntries(\n        Object.entries(value).map(([k, v]) => [\n          k,\n          replaceUndefinedValues(v, replaceWith),\n        ])\n      ),\n    }\n  } else {\n    return value\n  }\n}\n\nLog._supportsSpacingProps = true\nexport default Log\n"],"names":["Default","_jsx","ComponentBox","noInline","children","PrimitiveItemsFields","PrimitiveItemsValues","ValueComposition","WithTable","ObjectItems","RenderPropsPrimitiveItems","RenderPropsObjectItems","ArrayFromFormHandler","ViewAndEditContainer","DynamicPathValue","WithVisibility","InitiallyOpen","scope","Iterate","Tools","InitialOpenWithToolbarVariant","ToolbarVariantMiniumOneItemOneItem","hideCode","ToolbarVariantMiniumOneItemTwoItems","WithArrayValidator","FilledViewAndEditContainer","ViewAndEditContainerWithLineDivider","schemaParams","GenerateSchema","props","generateRef","filterData","log","fieldPropsRef","valuePropsRef","data","hasContext","useContext","DataContext","dataRef","useRef","current","generate","useCallback","schema","Object","entries","reduce","acc","_ref","path","startsWith","objectKey","substring","pathList","split","slashCount","length","propertyValue","type","valueType","prop","nestedPath","push","pathToSet","join","isLast","existingValue","pointer","pathValue","required","at","apply","_toConsumableArray","properties","propsOfFields","_ref2","undefined","propsOfValues","_ref3","console","ListAllProps","isValidElement","Log","placeholder","label","logData","_jsxs","Section","element","backgroundColor","style","maxWidth","innerSpace","FormLabel","bottom","keys","JSON","stringify","replaceUndefinedValues","value","replaceWith","Array","isArray","map","item","fromEntries","k","v","_supportsSpacingProps"],"sourceRoot":""}