{"version":3,"file":"154e74b17b8db98b3bb160dbb3f69c82536989bd-f7e8b452c444f1bcc835.js","mappings":"iwCAeO,MAAMA,EAAuBA,KAClCC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,qKAYWC,EAAuBA,KAClCH,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,+CAAAC,SAAA,gMAaWE,EAAmBA,KAC9BJ,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,8PAoBWG,EAAYA,KACvBL,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,8nBAiCWI,EAAcA,KACzBN,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,0dAwBWK,EAA4BA,KACvCP,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,gMAYWM,EAAyBA,KACpCR,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,oaAoBWO,EAAuBA,KAClCT,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,yCAAAC,SAAA,49CAiEWQ,EAAuBA,KAClCV,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,8CAAAU,UAAA,EAAAT,SAAA,08DAgGWU,EAAmBA,KAC9BZ,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,shBAsBWW,EAAiBA,KAC5Bb,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,2eA0BWY,EAAgBA,KAC3Bd,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAc,MAAA,CACFC,QACA,GAAAd,SAAA,+wCAoDae,EAAWA,KACtBjB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAiB,UAAA,EAAAH,MAAA,CACFI,gBACA,MAAAR,UAAA,EAAAT,SAAA,4kCA0DakB,EAAgCA,KAC3CpB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAc,MAAA,CACFC,QACA,GAAAL,UAAA,EAAAT,SAAA,4yDAmEamB,EAAqCA,KAChDrB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAiB,UAAA,EAAAhB,SAAA,mRAcWoB,EAAsCA,KACjDtB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAiB,UAAA,EAAAhB,SAAA,4RAcWqB,EAAqBA,KAChCvB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,syBAwCWsB,EAA6BA,KACxCxB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,qDAAAiB,UAAA,EAAAP,UAAA,EAAAT,SAAA,07FAsIWuB,EAAsCA,KACjDzB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,gEAAAiB,UAAA,EAAAP,UAAA,EAAAT,SAAA,orCA4DWwB,EAAyBA,KACpC1B,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,siBAgCWyB,EAA4BA,KACvC3B,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAU,UAAA,EAAAT,SAAA,4zCAkEW0B,EAAgBA,KAC3B5B,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,sUAmBW2B,EAAiCA,KAC5C7B,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAc,MAAA,CACFC,QAAA,EACAc,MAAA,EACAC,WAAA,IACAC,WACA,MAAAd,UAAA,EAAAP,UAAA,EAAAT,SAAA,urF,+FCj7BO,MAAM+B,EAAUA,KACrBjC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAU,UAAA,EAAAT,SAAA,0yB","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/Array/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/AnimatedContainer/Examples.tsx"],"sourcesContent":["import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Avatar, Flex, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport {\n  Iterate,\n  Field,\n  Value,\n  Form,\n  Tools,\n  Wizard,\n  ValueBlock,\n  FieldBlock,\n  makeAjvInstance,\n} from '@dnb/eufemia/src/extensions/forms'\nexport { Default as AnimatedContainer } from '../AnimatedContainer/Examples'\n\nexport const PrimitiveItemsFields = () => {\n  return (\n    <ComponentBox>\n      <Iterate.Array\n        defaultValue={['Iron Man', 'Captain America', 'The Hulk']}\n        onChange={console.log}\n      >\n        <Field.String itemPath=\"/\" />\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const PrimitiveItemsValues = () => {\n  return (\n    <ComponentBox data-visual-test=\"primitive-element-values\">\n      <Value.SummaryList>\n        <Iterate.Array\n          defaultValue={['Iron Man', 'Captain America', 'The Hulk']}\n        >\n          <Value.String itemPath=\"/\" />\n        </Iterate.Array>\n      </Value.SummaryList>\n    </ComponentBox>\n  )\n}\n\nexport const ValueComposition = () => {\n  return (\n    <ComponentBox>\n      <Value.Composition>\n        <Iterate.Array\n          defaultValue={[\n            {\n              value: 'value 1',\n            },\n            {\n              value: 'value 2',\n            },\n          ]}\n        >\n          <Value.String itemPath=\"/value\" />\n        </Iterate.Array>\n      </Value.Composition>\n    </ComponentBox>\n  )\n}\n\nexport const WithTable = () => {\n  return (\n    <ComponentBox>\n      <Table>\n        <thead>\n          <Tr>\n            <Th>Name</Th>\n            <Th>Age</Th>\n          </Tr>\n        </thead>\n        <tbody>\n          <Iterate.Array\n            withoutFlex\n            defaultValue={[\n              { name: 'Iron Man', age: 45 },\n              { name: 'Captain America', age: 123 },\n              { name: 'The Hulk', age: 3337 },\n            ]}\n          >\n            <Tr>\n              <Td>\n                <Value.Name.Last itemPath=\"/name\" />\n              </Td>\n              <Td>\n                <Value.Number itemPath=\"/age\" />\n              </Td>\n            </Tr>\n          </Iterate.Array>\n        </tbody>\n      </Table>\n    </ComponentBox>\n  )\n}\n\nexport const ObjectItems = () => {\n  return (\n    <ComponentBox>\n      <Iterate.Array\n        defaultValue={[\n          {\n            accountName: 'Brukskonto',\n            accountNumber: '90901134567',\n          },\n          {\n            accountName: 'Sparekonto',\n            accountNumber: '90901156789',\n          },\n        ]}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        <Field.Composition>\n          <Field.BankAccountNumber itemPath=\"/accountNumber\" />\n          <Field.String label=\"Account name\" itemPath=\"/accountName\" />\n        </Field.Composition>\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const RenderPropsPrimitiveItems = () => {\n  return (\n    <ComponentBox>\n      <Iterate.Array\n        defaultValue={['foo', 'bar']}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        {(elementValue) => <Field.String value={elementValue} />}\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const RenderPropsObjectItems = () => {\n  return (\n    <ComponentBox>\n      <Iterate.Array\n        defaultValue={[\n          { num: 1, txt: 'One' },\n          { num: 2, txt: 'Two' },\n        ]}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        {({ num, txt }) => (\n          <Field.Composition width=\"large\">\n            <Field.Number value={num} width=\"small\" />\n            <Field.String value={txt} width={false} />\n          </Field.Composition>\n        )}\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const ArrayFromFormHandler = () => {\n  return (\n    <ComponentBox data-visual-test=\"animated-container\">\n      <Form.Handler\n        data={{\n          avengers: [\n            {\n              nickname: 'Iron Man',\n              firstName: 'Tony',\n              lastName: 'Stark',\n            },\n            {\n              nickname: 'Captain America',\n              firstName: 'Steve',\n              lastName: 'Rogers',\n            },\n          ],\n        }}\n        onChange={(data) => console.log('DataContext/onChange', data)}\n      >\n        <Flex.Stack>\n          <Form.MainHeading>Avengers</Form.MainHeading>\n\n          <Form.Card>\n            <Iterate.Array\n              path=\"/avengers\"\n              onChange={(value) => console.log('Iterate/onChange', value)}\n            >\n              <Iterate.AnimatedContainer\n                title={\n                  <Value.String\n                    label={false}\n                    itemPath=\"/nickname\"\n                    placeholder=\"A Nick name\"\n                  />\n                }\n              >\n                <Field.Name\n                  itemPath=\"/nickname\"\n                  width=\"medium\"\n                  label=\"Nick name\"\n                />\n\n                <Field.Composition>\n                  <Field.Name.First itemPath=\"/firstName\" width=\"medium\" />\n                  <Field.Name.Last itemPath=\"/lastName\" width=\"medium\" />\n                </Field.Composition>\n\n                <Iterate.Toolbar>\n                  <Iterate.RemoveButton showConfirmDialog />\n                </Iterate.Toolbar>\n              </Iterate.AnimatedContainer>\n            </Iterate.Array>\n\n            <Iterate.PushButton\n              text=\"Add another avenger\"\n              path=\"/avengers\"\n              pushValue={{}}\n            />\n          </Form.Card>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const ViewAndEditContainer = () => {\n  return (\n    <ComponentBox data-visual-test=\"view-and-edit-container\">\n      {() => {\n        const MyEditItemForm = () => {\n          return (\n            <Field.Composition>\n              <Field.Name.First itemPath=\"/firstName\" width=\"medium\" />\n              <Field.Name.Last\n                itemPath=\"/lastName\"\n                width=\"medium\"\n                required\n              />\n            </Field.Composition>\n          )\n        }\n\n        const MyEditItem = () => {\n          return (\n            <Iterate.EditContainer\n              title=\"Edit account holder {itemNo}\"\n              titleWhenNew=\"New account holder {itemNo}\"\n            >\n              <MyEditItemForm />\n            </Iterate.EditContainer>\n          )\n        }\n\n        const MyViewItem = () => {\n          const item = Iterate.useItem()\n          console.log('index:', item.index)\n\n          return (\n            <Iterate.ViewContainer title=\"Account holder {itemNo}\">\n              <Value.SummaryList>\n                <Value.Name.First itemPath=\"/firstName\" showEmpty />\n                <Value.Name.Last itemPath=\"/lastName\" placeholder=\"-\" />\n              </Value.SummaryList>\n            </Iterate.ViewContainer>\n          )\n        }\n\n        const CreateNewEntry = () => {\n          return (\n            <Iterate.PushContainer\n              path=\"/accounts\"\n              title=\"New account holder\"\n              openButton={\n                <Iterate.PushContainer.OpenButton text=\"Add another account\" />\n              }\n              showOpenButtonWhen={(list) => list.length > 0}\n            >\n              <MyEditItemForm />\n            </Iterate.PushContainer>\n          )\n        }\n\n        const MyForm = () => {\n          return (\n            <Form.Handler\n              data={{\n                accounts: [\n                  {\n                    firstName: 'Tony',\n                    lastName: 'Rogers',\n                  },\n                ],\n              }}\n              onChange={(data) =>\n                console.log('DataContext/onChange', data)\n              }\n              onSubmit={async (data) => console.log('onSubmit', data)}\n            >\n              <Flex.Stack>\n                <Form.MainHeading>Accounts</Form.MainHeading>\n\n                <Form.Card gap={false}>\n                  <Iterate.Array path=\"/accounts\">\n                    <MyViewItem />\n                    <MyEditItem />\n                  </Iterate.Array>\n\n                  <CreateNewEntry />\n                </Form.Card>\n\n                <Form.SubmitButton variant=\"send\" />\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const DynamicPathValue = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler defaultData={{ count: 0 }}>\n        <Flex.Stack>\n          <Field.Number path=\"/count\" width=\"small\" showStepControls />\n          <Iterate.Array\n            path=\"/items\"\n            countPath=\"/count\"\n            countPathTransform={({ value, index }) => {\n              return 'myObject' in (value || {})\n                ? value\n                : { myObject: index }\n            }}\n          >\n            <Field.Number itemPath=\"/myObject\" label=\"Item no. {itemNo}\" />\n          </Iterate.Array>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithVisibility = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Iterate.Array path=\"/myList\" defaultValue={[{}]}>\n          <Flex.Stack>\n            <Field.Name.First\n              className=\"firstName\"\n              itemPath=\"/firstName\"\n            />\n\n            <Form.Visibility\n              animate\n              visibleWhen={{\n                itemPath: '/firstName',\n                hasValue: (value) => Boolean(value),\n              }}\n            >\n              <Field.Name.Last className=\"lastName\" itemPath=\"/lastName\" />\n            </Form.Visibility>\n          </Flex.Stack>\n        </Iterate.Array>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const InitiallyOpen = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Form.Handler required>\n        <Wizard.Container>\n          <Wizard.Step>\n            <Form.Card>\n              <Iterate.Array path=\"/myList\" defaultValue={[{}]}>\n                <Iterate.ViewContainer>\n                  <Value.String label=\"Item {itemNo}\" itemPath=\"/foo\" />\n                </Iterate.ViewContainer>\n                <Iterate.EditContainer>\n                  <Field.String\n                    label=\"Item {itemNo}\"\n                    itemPath=\"/foo\"\n                    defaultValue=\"foo\"\n                  />\n                </Iterate.EditContainer>\n              </Iterate.Array>\n\n              <Iterate.PushButton\n                text=\"Add\"\n                path=\"/myList\"\n                variant=\"tertiary\"\n                pushValue={{}}\n              />\n            </Form.Card>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step>\n            <Iterate.Array path=\"/myList\" defaultValue={[{}]}>\n              <Iterate.EditContainer>\n                <Field.String\n                  label=\"Item {itemNo}\"\n                  itemPath=\"/foo\"\n                  defaultValue=\"foo\"\n                />\n              </Iterate.EditContainer>\n              <Iterate.ViewContainer>\n                <Value.String label=\"Item {itemNo}\" itemPath=\"/foo\" />\n              </Iterate.ViewContainer>\n            </Iterate.Array>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n        </Wizard.Container>\n\n        <Tools.Log top />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const MinItems = () => {\n  return (\n    <ComponentBox hideCode scope={{ makeAjvInstance }}>\n      {() => {\n        const ajv = makeAjvInstance()\n        const schema = {\n          type: 'object',\n          properties: {\n            myList: {\n              type: 'array',\n              minItems: 1,\n            },\n          },\n        }\n\n        return (\n          <Form.Handler schema={schema} ajvInstance={ajv}>\n            <Iterate.Array\n              path=\"/myList\"\n              defaultValue={[\n                {\n                  foo: 'Remove me to see the minItems error.',\n                },\n              ]}\n              errorMessages={{\n                minItems: 'You need at least one item.',\n              }}\n            >\n              <Iterate.ViewContainer>\n                <Value.String itemPath=\"/foo\" />\n\n                <Iterate.Toolbar>\n                  <Iterate.ViewContainer.EditButton />\n                  <Iterate.ViewContainer.RemoveButton showConfirmDialog />\n                </Iterate.Toolbar>\n              </Iterate.ViewContainer>\n\n              <Iterate.EditContainer>\n                <Field.String\n                  label=\"Item {itemNo}\"\n                  itemPath=\"/foo\"\n                  required\n                />\n              </Iterate.EditContainer>\n            </Iterate.Array>\n\n            <Iterate.PushButton\n              text=\"Add another item\"\n              path=\"/myList\"\n              variant=\"tertiary\"\n              pushValue={{}}\n            />\n\n            <Tools.Log top />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const InitialOpenWithToolbarVariant = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      {() => {\n        const MyForm = () => {\n          const { getCountryNameByIso } = Value.SelectCountry.useCountry()\n\n          return (\n            <Form.Handler\n              onSubmit={async (data) => console.log('onSubmit', data)}\n              onSubmitRequest={() => console.log('onSubmitRequest')}\n            >\n              <Flex.Stack>\n                <Form.MainHeading>Statsborgerskap</Form.MainHeading>\n\n                <Form.Card>\n                  <Iterate.Array\n                    path=\"/countries\"\n                    defaultValue={[null]}\n                    onChangeValidator={(arrayValue) => {\n                      const findFirstDuplication = (arr) =>\n                        arr.findIndex((e, i) => arr.indexOf(e) !== i)\n\n                      const index = findFirstDuplication(arrayValue)\n                      if (index > -1) {\n                        return new Error(\n                          `You cannot have duplicate items: ${getCountryNameByIso(\n                            String(arrayValue.at(index)),\n                          )}`,\n                        )\n                      }\n                    }}\n                  >\n                    <Iterate.ViewContainer toolbarVariant=\"minimumOneItem\">\n                      <Value.SelectCountry\n                        label=\"Land du er statsborger i\"\n                        itemPath=\"/\"\n                      />\n                    </Iterate.ViewContainer>\n\n                    <Iterate.EditContainer toolbarVariant=\"minimumOneItem\">\n                      <Field.SelectCountry\n                        label=\"Land du er statsborger i\"\n                        itemPath=\"/\"\n                        required\n                      />\n                    </Iterate.EditContainer>\n                  </Iterate.Array>\n\n                  <Iterate.PushButton\n                    path=\"/countries\"\n                    pushValue={null}\n                    text=\"Legg til flere statsborgerskap\"\n                  />\n                </Form.Card>\n\n                <Form.SubmitButton variant=\"send\" />\n\n                <Tools.Log />\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const ToolbarVariantMiniumOneItemOneItem = () => {\n  return (\n    <ComponentBox hideCode>\n      <Iterate.Array defaultValue={['foo']}>\n        <Iterate.ViewContainer toolbarVariant=\"minimumOneItem\">\n          View Content\n        </Iterate.ViewContainer>\n        <Iterate.EditContainer toolbarVariant=\"minimumOneItem\">\n          Edit Content\n        </Iterate.EditContainer>\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const ToolbarVariantMiniumOneItemTwoItems = () => {\n  return (\n    <ComponentBox hideCode>\n      <Iterate.Array defaultValue={['foo', 'bar']}>\n        <Iterate.ViewContainer toolbarVariant=\"minimumOneItem\">\n          View Content\n        </Iterate.ViewContainer>\n        <Iterate.EditContainer toolbarVariant=\"minimumOneItem\">\n          Edit Content\n        </Iterate.EditContainer>\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const WithArrayValidator = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        defaultData={{ items: ['foo'] }}\n        onSubmit={async () => console.log('onSubmit')}\n      >\n        <Form.Card>\n          <Iterate.Array\n            path=\"/items\"\n            onChangeValidator={(arrayValue) => {\n              if (!(arrayValue && arrayValue.length > 1)) {\n                return new Error('You need at least two items')\n              }\n            }}\n            animate\n          >\n            <Flex.Horizontal align=\"flex-end\">\n              <Field.String\n                label=\"Item no. {itemNo}\"\n                itemPath=\"/\"\n                width=\"medium\"\n                size=\"medium\"\n              />\n              <Iterate.RemoveButton showConfirmDialog />\n            </Flex.Horizontal>\n          </Iterate.Array>\n\n          <Iterate.PushButton\n            top\n            path=\"/items\"\n            pushValue={null}\n            text=\"Add\"\n          />\n          <Form.SubmitButton />\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const FilledViewAndEditContainer = () => {\n  return (\n    <ComponentBox\n      data-visual-test=\"filled-view-and-edit-container\"\n      hideCode\n    >\n      {() => {\n        const MyEditItemForm = () => {\n          return (\n            <Flex.Stack>\n              <Field.Name.First itemPath=\"/firstName\" required />\n              <Field.Name.Last itemPath=\"/lastName\" required />\n            </Flex.Stack>\n          )\n        }\n\n        const EditItemToolbar = () => {\n          return (\n            <Iterate.Toolbar>\n              <Flex.Horizontal\n                justify=\"space-between\"\n                style={{ width: '100%' }}\n              >\n                <Flex.Horizontal gap=\"large\">\n                  <Iterate.EditContainer.DoneButton />\n                  <Iterate.EditContainer.CancelButton />\n                </Flex.Horizontal>\n                <Iterate.ViewContainer.RemoveButton\n                  showConfirmDialog\n                  left={false}\n                />\n              </Flex.Horizontal>\n            </Iterate.Toolbar>\n          )\n        }\n\n        const MyEditItem = (props) => {\n          return (\n            <Iterate.EditContainer\n              variant=\"filled\"\n              toolbarVariant=\"custom\"\n              toolbar={<EditItemToolbar />}\n              {...props}\n            >\n              <ValueWithAvatar />\n              <MyEditItemForm />\n            </Iterate.EditContainer>\n          )\n        }\n\n        const CreateNewEntry = () => {\n          return (\n            <Iterate.PushContainer\n              path=\"/persons\"\n              title=\"New person\"\n              variant=\"filled\"\n              openButton={\n                <Iterate.PushContainer.OpenButton text=\"Add another person\" />\n              }\n              showOpenButtonWhen={(list) => list.length > 0}\n            >\n              <MyEditItemForm />\n            </Iterate.PushContainer>\n          )\n        }\n\n        const ValueWithAvatar = () => {\n          const { value } = Iterate.useItem()\n          const firstName = String(value['firstName'] || '')\n          return (\n            <Flex.Horizontal align=\"center\">\n              <Avatar.Group label={firstName}>\n                <Avatar>{firstName.substring(0, 1).toUpperCase()}</Avatar>\n              </Avatar.Group>\n              <Value.String itemPath=\"/firstName\" />\n            </Flex.Horizontal>\n          )\n        }\n\n        const MyViewItem = () => {\n          return (\n            <Iterate.ViewContainer\n              variant=\"filled\"\n              toolbarVariant=\"custom\"\n              toolbar={<></>}\n            >\n              <Flex.Horizontal align=\"center\" justify=\"space-between\">\n                <ValueWithAvatar />\n\n                <Iterate.Toolbar>\n                  <Iterate.ViewContainer.EditButton />\n                </Iterate.Toolbar>\n              </Flex.Horizontal>\n            </Iterate.ViewContainer>\n          )\n        }\n\n        return (\n          <Form.Handler\n            data={{\n              persons: [\n                {\n                  firstName:\n                    'Tony with long name that maybe will wrap over to a new line',\n                  lastName: 'Last',\n                },\n                {\n                  firstName: 'Maria',\n                  lastName: 'Last',\n                },\n              ],\n            }}\n            onSubmit={(data) => console.log('onSubmit', data)}\n            onSubmitRequest={() => console.log('onSubmitRequest')}\n          >\n            <Flex.Stack>\n              <Form.MainHeading>Persons</Form.MainHeading>\n\n              <Form.Card gap={false}>\n                <Iterate.Array path=\"/persons\" limit={2}>\n                  <MyViewItem />\n                  <MyEditItem />\n                </Iterate.Array>\n\n                <CreateNewEntry />\n              </Form.Card>\n\n              <Form.SubmitButton variant=\"send\" />\n            </Flex.Stack>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\nexport const ViewAndEditContainerWithLineDivider = () => {\n  return (\n    <ComponentBox\n      data-visual-test=\"view-and-edit-container-with-line-divider\"\n      hideCode\n    >\n      {() => {\n        const MyEditItem = () => {\n          return (\n            <Iterate.EditContainer variant=\"basic\" divider=\"line\">\n              <Field.Name.First itemPath=\"/firstName\" required />\n              <Field.Name.Last itemPath=\"/lastName\" required />\n            </Iterate.EditContainer>\n          )\n        }\n\n        const MyViewItem = () => {\n          return (\n            <Iterate.ViewContainer variant=\"basic\" divider=\"line\">\n              <Value.Name.First itemPath=\"/firstName\" />\n              <Value.Name.Last itemPath=\"/lastName\" />\n            </Iterate.ViewContainer>\n          )\n        }\n\n        return (\n          <Form.Handler\n            data={{\n              accounts: [\n                {\n                  firstName: 'Tony',\n                  lastName: 'Last',\n                },\n                {\n                  firstName: 'Maria',\n                  lastName: 'Last',\n                },\n              ],\n            }}\n            onSubmit={(data) => console.log('onSubmit', data)}\n            onSubmitRequest={() => console.log('onSubmitRequest')}\n          >\n            <Flex.Stack>\n              <Form.MainHeading>Accounts</Form.MainHeading>\n\n              <Form.Card>\n                <Iterate.Array path=\"/accounts\" divider=\"line\">\n                  <MyViewItem />\n                  <MyEditItem />\n                </Iterate.Array>\n              </Form.Card>\n\n              <Form.SubmitButton variant=\"send\" />\n            </Flex.Stack>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const RequiredWithPushButton = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Form.Card>\n          <Iterate.Array\n            path=\"/items\"\n            animate\n            required\n            errorMessages={{\n              'Field.errorRequired': 'Custom message',\n            }}\n            validateInitially\n          >\n            <Flex.Horizontal>\n              <Field.String itemPath=\"/\" />\n              <Iterate.RemoveButton />\n            </Flex.Horizontal>\n          </Iterate.Array>\n\n          <Iterate.PushButton\n            path=\"/items\"\n            pushValue=\"baz\"\n            text=\"Add item to hide error\"\n          />\n        </Form.Card>\n\n        <Form.SubmitButton />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const RequiredWithPushContainer = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyViewItem = () => {\n          return (\n            <Iterate.ViewContainer title=\"Account holder {itemNo}\">\n              <Value.SummaryList>\n                <Value.Name.First itemPath=\"/firstName\" />\n                <Value.Name.Last itemPath=\"/lastName\" />\n              </Value.SummaryList>\n            </Iterate.ViewContainer>\n          )\n        }\n\n        const MyEditItem = () => {\n          return (\n            <Iterate.EditContainer\n              title=\"Edit account holder {itemNo}\"\n              titleWhenNew=\"New account holder {itemNo}\"\n            >\n              <MyEditItemContent />\n            </Iterate.EditContainer>\n          )\n        }\n\n        const MyEditItemContent = () => {\n          return (\n            <Field.Composition width=\"large\">\n              <Field.Name.First itemPath=\"/firstName\" required />\n              <Field.Name.Last itemPath=\"/lastName\" required />\n            </Field.Composition>\n          )\n        }\n\n        return (\n          <Form.Handler>\n            <Form.Card>\n              <Iterate.PushContainer\n                path=\"/myListOfPeople\"\n                title=\"New account holder\"\n              >\n                <MyEditItemContent />\n              </Iterate.PushContainer>\n\n              <Iterate.Array\n                path=\"/myListOfPeople\"\n                reverse\n                animate\n                required\n                errorMessages={{\n                  'Field.errorRequired': 'Custom message',\n                }}\n              >\n                <MyViewItem />\n                <MyEditItem />\n              </Iterate.Array>\n            </Form.Card>\n\n            <Form.SubmitButton />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const NestedIterate = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        data={{\n          outer: [{ inner: ['foo', 'bar'] }],\n        }}\n      >\n        <Iterate.Array path=\"/outer\">\n          <Iterate.Array itemPath=\"/inner\">\n            <Field.String label=\"Item {itemNo}\" itemPath=\"/\" />\n          </Iterate.Array>\n        </Iterate.Array>\n\n        <Tools.Log />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const NestedIterateWithPushContainer = () => {\n  return (\n    <ComponentBox\n      scope={{ Iterate, Tools, ValueBlock, FieldBlock }}\n      hideCode\n    >\n      {() => {\n        function EditPerson() {\n          return (\n            <Flex.Stack>\n              <Field.Name.Last itemPath=\"/name\" />\n\n              <FieldBlock label=\"Citizenship's\" asFieldset>\n                <Iterate.Array\n                  itemPath=\"/citizenships\"\n                  animate\n                  required\n                  errorMessages={{\n                    'Field.errorRequired':\n                      'At least one citizenship is required.',\n                  }}\n                >\n                  <Flex.Horizontal align=\"center\">\n                    <Field.SelectCountry label={false} itemPath=\"/\" />\n                    <Iterate.RemoveButton />\n                  </Flex.Horizontal>\n                </Iterate.Array>\n              </FieldBlock>\n\n              <Iterate.PushContainer\n                itemPath=\"/citizenships\"\n                openButton={\n                  <Iterate.PushContainer.OpenButton\n                    top\n                    text=\"Add another citizenship\"\n                    variant=\"tertiary\"\n                  />\n                }\n                showOpenButtonWhen={(list) => list.length > 0}\n                toolbar={\n                  <Iterate.Toolbar>\n                    <Iterate.EditContainer.DoneButton text=\"Add citizenship\" />\n                  </Iterate.Toolbar>\n                }\n              >\n                <Field.SelectCountry\n                  label=\"New citizenship\"\n                  itemPath=\"/\"\n                />\n              </Iterate.PushContainer>\n            </Flex.Stack>\n          )\n        }\n\n        return (\n          <Form.Handler\n            required\n            onSubmit={(data) => console.log('onSubmit', data)}\n          >\n            <Flex.Stack>\n              <Iterate.PushContainer\n                path=\"/persons\"\n                title=\"New person\"\n                openButton={\n                  <Iterate.PushContainer.OpenButton\n                    text=\"Add new person\"\n                    variant=\"tertiary\"\n                  />\n                }\n                showOpenButtonWhen={(list) => list.length > 0}\n              >\n                <EditPerson />\n              </Iterate.PushContainer>\n\n              <Iterate.Array\n                path=\"/persons\"\n                required\n                errorMessages={{\n                  required: 'Please add at least one person.',\n                }}\n              >\n                <Iterate.ViewContainer title=\"Persons\">\n                  <Value.SummaryList>\n                    <Value.Name.Last itemPath=\"/name\" />\n\n                    <ValueBlock label=\"Citizenship's\">\n                      <Iterate.Array itemPath=\"/citizenships\">\n                        <Value.SelectCountry\n                          inline\n                          label={false}\n                          itemPath=\"/\"\n                        />\n                      </Iterate.Array>\n                    </ValueBlock>\n                  </Value.SummaryList>\n\n                  <Iterate.Toolbar>\n                    <Iterate.ViewContainer.EditButton />\n                    <Iterate.ViewContainer.RemoveButton\n                      showConfirmDialog\n                    />\n                  </Iterate.Toolbar>\n                </Iterate.ViewContainer>\n\n                <Iterate.EditContainer title=\"Edit person\">\n                  <EditPerson />\n                </Iterate.EditContainer>\n              </Iterate.Array>\n\n              <Form.SubmitButton text=\"Save\" />\n\n              <Tools.Log />\n            </Flex.Stack>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, Form, Iterate } from '@dnb/eufemia/src/extensions/forms'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyForm = () => {\n          const { count } = Iterate.useCount('myForm')\n          return (\n            <Form.Handler\n              defaultData={{\n                myList: ['Item 1'],\n              }}\n              id=\"myForm\"\n            >\n              <Form.Card>\n                <Iterate.Array\n                  path=\"/myList\"\n                  placeholder={<>Empty list</>}\n                >\n                  <Iterate.AnimatedContainer title=\"Title {itemNo}\">\n                    <Field.String label=\"Label\" itemPath=\"/\" />\n\n                    <Iterate.Toolbar>\n                      <Iterate.RemoveButton />\n                    </Iterate.Toolbar>\n                  </Iterate.AnimatedContainer>\n                </Iterate.Array>\n\n                <Iterate.PushButton\n                  path=\"/myList\"\n                  pushValue={`Item ${String(count('/myList') + 1)}`}\n                  text=\"Add new item\"\n                />\n              </Form.Card>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n"],"names":["PrimitiveItemsFields","_jsx","ComponentBox","children","PrimitiveItemsValues","ValueComposition","WithTable","ObjectItems","RenderPropsPrimitiveItems","RenderPropsObjectItems","ArrayFromFormHandler","ViewAndEditContainer","noInline","DynamicPathValue","WithVisibility","InitiallyOpen","scope","Iterate","MinItems","hideCode","makeAjvInstance","InitialOpenWithToolbarVariant","ToolbarVariantMiniumOneItemOneItem","ToolbarVariantMiniumOneItemTwoItems","WithArrayValidator","FilledViewAndEditContainer","ViewAndEditContainerWithLineDivider","RequiredWithPushButton","RequiredWithPushContainer","NestedIterate","NestedIterateWithPushContainer","Tools","ValueBlock","FieldBlock","Default"],"sourceRoot":""}