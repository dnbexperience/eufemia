"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[81958],{12330:function(e,n,l){l.r(n),l.d(n,{default:function(){return D}});var a={};l.r(a),l.d(a,{Alignment:function(){return g},AllowNegative:function(){return F},ConditionalInfo:function(){return L},Disabled:function(){return j},DisallowLeadingZeroes:function(){return C},ExclusiveMinMax:function(){return x},HorizontalLayout:function(){return c},LabelAndDescription:function(){return h},LabelAndValue:function(){return u},Percentage:function(){return V},Placeholder:function(){return s},PrefixAndSuffix:function(){return b},ValidateMaximumCustomError:function(){return S},ValidateMinimum:function(){return w},ValidateRequired:function(){return v},Widths:function(){return f},WithCustomMask:function(){return d},WithHelp:function(){return p},WithSlider:function(){return A},WithStatus:function(){return m},WithStepControls:function(){return y},WithStepControlsDisabled:function(){return E},WithStepControlsError:function(){return N}});var t=l(31085),i=l(71184),r=(l(14041),l(32065)),o=l(4565);const s=()=>(0,t.jsx)(r.A,{children:'<Field.Number\n  label="Label text"\n  placeholder="Enter a number..."\n  onChange={(value) => console.log(\'onChange\', value)}\n/>\n'}),u=()=>(0,t.jsx)(r.A,{children:"<Field.Number\n  label=\"Label text\"\n  defaultValue={420000.25}\n  onChange={(value) => console.log('onChange', value)}\n/>\n"}),d=()=>(0,t.jsx)(r.A,{children:"<Field.Number\n  label=\"Label text\"\n  defaultValue={1234}\n  mask={Array(4).fill(/\\d/)}\n  onChange={(value) => console.log('onChange', value)}\n/>\n"}),h=()=>(0,t.jsx)(r.A,{"data-visual-test":"number-label-description",children:'<Form.Card>\n  <Field.Number\n    label="Label text"\n    labelDescription="Description text on the next line"\n    placeholder="Enter a text..."\n  />\n  <Field.Number\n    label="Label text"\n    labelDescription="Description text on the same line"\n    labelDescriptionInline\n    placeholder="Enter a text..."\n  />\n</Form.Card>\n'}),m=()=>(0,t.jsx)(r.A,{"data-visual-test":"number-status",children:'<Form.Card>\n  <Field.Number\n    label="Label text"\n    placeholder="Enter a number..."\n    width="large"\n    warning="Short warning."\n    required\n  />\n  <Field.Number\n    label="Label text"\n    defaultValue={420000}\n    width="large"\n    info="Aliqua eu aute id qui esse aliqua dolor in aute magna commodo anim enim et."\n    required\n  />\n  <Field.Number\n    label="Label text"\n    value={1234}\n    width="small"\n    warning="Aliqua eu aute id qui esse aliqua dolor in aute magna commodo anim enim et. Velit incididunt exercitation est magna ex irure dolore nisi eiusmod ea exercitation."\n    required\n  />\n</Form.Card>\n'}),c=()=>(0,t.jsx)(r.A,{"data-visual-test":"number-horizontal-layout",children:'<Form.Card>\n  <Field.Provider\n    layout="horizontal"\n    layoutOptions={{\n      width: \'medium\', // can be a rem value\n    }}\n    required\n  >\n    <Field.Number\n      label="Label text"\n      defaultValue={420000}\n      step={10000}\n      showStepControls\n    />\n    <Field.Number\n      label="Label with a long text that will wrap"\n      placeholder="Enter a number..."\n      info="Aliqua eu aute id qui esse aliqua dolor in aute magna commodo anim enim et."\n    />\n    <Field.Number\n      label="Label with a long text that will wrap"\n      placeholder="Enter a number..."\n      size="large"\n      width="stretch"\n    />\n  </Field.Provider>\n</Form.Card>\n'}),x=()=>(0,t.jsx)(r.A,{children:'<Field.Number\n  defaultValue={1000}\n  label="Label text"\n  allowNegative={false}\n  required\n  exclusiveMinimum={900}\n  exclusiveMaximum={1000}\n  validateInitially\n/>\n'}),b=()=>(0,t.jsx)(r.A,{children:"<Flex.Stack>\n  <Field.Number\n    defaultValue={1234}\n    label=\"With prefix\"\n    prefix=\"prefix \"\n    onChange={(value) => console.log('onChange', value)}\n  />\n  <Field.Number\n    defaultValue={1}\n    label=\"With suffix (function)\"\n    suffix={(value) => (value === 1 ? ' year' : ' years')}\n    onChange={(value) => console.log('onChange', value)}\n  />\n</Flex.Stack>\n"}),g=()=>(0,t.jsx)(r.A,{children:'<Flex.Stack>\n  <Field.Number\n    align="center"\n    label="Center aligned (default)"\n    defaultValue={10}\n    onChange={(value) => console.log(\'onChange\', value)}\n  />\n  <Field.Number\n    align="left"\n    label="Left aligned"\n    defaultValue={10}\n    onChange={(value) => console.log(\'onChange\', value)}\n  />\n  <Field.Number\n    align="right"\n    label="Right aligned"\n    defaultValue={10}\n    onChange={(value) => console.log(\'onChange\', value)}\n  />\n</Flex.Stack>\n'}),p=()=>(0,t.jsx)(r.A,{children:"<Field.Number\n  defaultValue={12345}\n  label=\"Label text\"\n  help={{\n    title: 'Help is available',\n    content:\n      'Here is what a team can do for you. . . . It allows you to help others do their best.',\n  }}\n  onChange={(value) => console.log('onChange', value)}\n/>\n"}),f=()=>(0,t.jsx)(r.A,{hideCode:!0,"data-visual-test":"number-widths",children:'<Flex.Stack>\n  <Form.SubHeading>Without step controls</Form.SubHeading>\n\n  <Field.Number\n    label="Default width (property omitted)"\n    defaultValue={1234}\n  />\n  <Field.Number label="Small" defaultValue={1234} width="small" />\n  <Field.Number\n    label="Medium (and medium size)"\n    defaultValue={1234}\n    width="medium"\n    size="medium"\n  />\n  <Field.Number\n    label="Large (and large size)"\n    defaultValue={1234}\n    width="large"\n    size="large"\n  />\n  <Field.Number label="Stretch" defaultValue={1234} width="stretch" />\n  <Form.SubHeading>With step controls</Form.SubHeading>\n  <Field.Number\n    showStepControls\n    label="Default width (property omitted)"\n    defaultValue={1234}\n  />\n  <Field.Number\n    showStepControls\n    label="Small"\n    defaultValue={1234}\n    width="small"\n  />\n  <Field.Number\n    showStepControls\n    label="Medium (and medium size)"\n    defaultValue={1234}\n    width="medium"\n    size="medium"\n  />\n  <Field.Number\n    showStepControls\n    label="Large (and large size)"\n    defaultValue={1234}\n    width="large"\n    size="large"\n  />\n  <Field.Number\n    showStepControls\n    label="Stretch"\n    defaultValue={1234}\n    width="stretch"\n  />\n</Flex.Stack>\n'}),j=()=>(0,t.jsx)(r.A,{children:"<Field.Number\n  defaultValue={135}\n  label=\"Label text\"\n  onChange={(value) => console.log('onChange', value)}\n  disabled\n/>\n"}),v=()=>(0,t.jsx)(r.A,{children:"<Field.Number\n  defaultValue={123}\n  label=\"Label text\"\n  onChange={(value) => console.log('onChange', value)}\n  required\n/>\n"}),w=()=>(0,t.jsx)(r.A,{children:"<Field.Number\n  defaultValue={300}\n  label=\"Enter a number below 250 and blur to trigger error\"\n  onChange={(value) => console.log('onChange', value)}\n  minimum={250}\n/>\n"}),F=()=>(0,t.jsx)(r.A,{children:"<Field.Number allowNegative={false} />\n"}),C=()=>(0,t.jsx)(r.A,{children:"<Field.Number disallowLeadingZeroes />\n"}),V=()=>(0,t.jsx)(r.A,{children:"<Field.Number\n  percent\n  defaultValue={80}\n  label=\"Percentage\"\n  onChange={(value) => console.log('onChange', value)}\n  minimum={90}\n/>\n"}),S=()=>(0,t.jsx)(r.A,{children:'<Field.Number\n  label="Enter a number above 250 and blur to trigger error"\n  defaultValue={200}\n  maximum={250}\n  errorMessages={{\n    maximum: "You can\'t enter a number THAR large.. Max 250!",\n  }}\n  onChange={(value) => console.log(\'onChange\', value)}\n/>\n'}),y=()=>(0,t.jsx)(r.A,{"data-visual-test":"number-input-step-controls",children:'<Field.Number\n  label="Label text"\n  showStepControls\n  minimum={0}\n  maximum={100}\n  step={10}\n  defaultValue={50}\n/>\n'}),N=()=>(0,t.jsx)(r.A,{"data-visual-test":"number-input-step-controls-error",children:"<Field.Number\n  label=\"Label text\"\n  showStepControls\n  maximum={100}\n  defaultValue={150}\n  error={new Error('You done messed up, A-a-ron!')}\n/>\n"}),E=()=>(0,t.jsx)(r.A,{"data-visual-test":"number-input-step-controls-disabled",children:'<Field.Number label="Label text" showStepControls disabled />\n'}),A=()=>(0,t.jsx)(r.A,{hideCode:!0,noInline:!0,children:'const Component = () => {\n  const [value, setValue] = React.useState(50000)\n  const settings = {\n    min: 0,\n    max: 100000,\n    step: 1000,\n  }\n  return (\n    <Grid.Container>\n      <Grid.Item\n        span={{\n          small: [1, 12],\n          medium: [1, 4],\n          large: [1, 3],\n        }}\n      >\n        <Field.Number\n          label="Label text"\n          showStepControls\n          minimum={settings.min}\n          maximum={settings.max}\n          step={settings.step}\n          value={value}\n          onChange={(value) => setValue(value)}\n          width="stretch"\n          bottom="small"\n        />\n        <Slider\n          min={settings.min}\n          max={settings.max}\n          step={settings.step}\n          value={value}\n          onChange={({ value }) => setValue(parseFloat(String(value)))}\n          hideButtons\n          tooltip\n        />\n      </Grid.Item>\n    </Grid.Container>\n  )\n}\nrender(<Component />)\n'}),L=()=>(0,t.jsx)(r.A,{scope:{FormError:o.j},noInline:!0,children:"render(\n  <Form.Handler\n    defaultData={{\n      maximum: 4,\n      amount: 5,\n    }}\n    onSubmit={async (data) => {\n      console.log('onSubmit', data)\n    }}\n  >\n    <Form.Card>\n      <Field.Number\n        label=\"Maximum for amount\"\n        labelDescription={\n          <>Defines the maximum amount possible to be entered.</>\n        }\n        path=\"/maximum\"\n        required\n        info={(\n          maximum,\n          { conditionally, getValueByPath, getFieldByPath },\n        ) => {\n          return conditionally(() => {\n            if (maximum < getValueByPath('/amount')) {\n              const { props, id } = getFieldByPath('/amount')\n              const anchor = props?.label && (\n                <Anchor\n                  href={'#' + id + '-label'}\n                  onClick={(event) => {\n                    event.preventDefault()\n                    const el = document.getElementById(id + '-label')\n                    el?.scrollIntoView()\n                  }}\n                >\n                  {props.label}\n                </Anchor>\n              )\n              return (\n                anchor && (\n                  <>\n                    Remember to adjust the {anchor} to be {maximum} or\n                    lower.\n                  </>\n                )\n              )\n            }\n          })\n        }}\n      />\n      <Field.Number\n        label=\"Amount\"\n        labelDescription={<>Should be same or lower than maximum.</>}\n        path=\"/amount\"\n        required\n        onBlurValidator={(amount: number, { connectWithPath }) => {\n          const maximum = connectWithPath('/maximum').getValue()\n          if (amount > maximum) {\n            return new FormError('NumberField.errorMaximum', {\n              messageValues: {\n                maximum: maximum.toString(),\n              },\n            })\n          }\n        }}\n      />\n    </Form.Card>\n\n    <Form.SubmitButton />\n  </Form.Handler>,\n)\n"});function W(e){const n=Object.assign({h2:"h2",h3:"h3",p:"p",a:"a",code:"code",h4:"h4",pre:"pre",ul:"ul",li:"li"},(0,i.R)(),e.components),{VisibleWhenVisualTest:l}=n;return a||P("Examples",!1),g||P("Examples.Alignment",!0),F||P("Examples.AllowNegative",!0),L||P("Examples.ConditionalInfo",!0),j||P("Examples.Disabled",!0),C||P("Examples.DisallowLeadingZeroes",!0),x||P("Examples.ExclusiveMinMax",!0),c||P("Examples.HorizontalLayout",!0),h||P("Examples.LabelAndDescription",!0),u||P("Examples.LabelAndValue",!0),V||P("Examples.Percentage",!0),s||P("Examples.Placeholder",!0),b||P("Examples.PrefixAndSuffix",!0),S||P("Examples.ValidateMaximumCustomError",!0),w||P("Examples.ValidateMinimum",!0),v||P("Examples.ValidateRequired",!0),f||P("Examples.Widths",!0),d||P("Examples.WithCustomMask",!0),p||P("Examples.WithHelp",!0),A||P("Examples.WithSlider",!0),m||P("Examples.WithStatus",!0),y||P("Examples.WithStepControls",!0),E||P("Examples.WithStepControlsDisabled",!0),N||P("Examples.WithStepControlsError",!0),l||P("VisibleWhenVisualTest",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{children:"Demos"}),"\n",(0,t.jsx)(n.h3,{children:"Label and value"}),"\n",(0,t.jsx)(u,{}),"\n",(0,t.jsx)(n.h3,{children:"Label and description"}),"\n",(0,t.jsx)(h,{}),"\n",(0,t.jsx)(n.h3,{children:"With a horizontal layout"}),"\n",(0,t.jsxs)(n.p,{children:["This example uses ",(0,t.jsx)(n.a,{href:"/uilib/extensions/forms/feature-fields/Provider/",children:"Field.Provider"})," to set the ",(0,t.jsx)(n.code,{children:"layout"})," to ",(0,t.jsx)(n.code,{children:"horizontal"})," and ",(0,t.jsx)(n.code,{children:"layoutOptions"})," to ",(0,t.jsx)(n.code,{children:"{ width: 'medium' }"})," for all nested fields."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"width"})," of the horizontal label can be set to ",(0,t.jsx)(n.code,{children:"small"}),", ",(0,t.jsx)(n.code,{children:"medium"}),", ",(0,t.jsx)(n.code,{children:"large"})," or a ",(0,t.jsx)(n.code,{children:"rem"})," value."]}),"\n",(0,t.jsx)(c,{}),"\n",(0,t.jsx)(n.h3,{children:"Placeholder"}),"\n",(0,t.jsx)(s,{}),"\n",(0,t.jsx)(n.h4,{children:"With custom mask"}),"\n",(0,t.jsx)(d,{}),"\n",(0,t.jsx)(n.h3,{children:"With a status"}),"\n",(0,t.jsx)(n.p,{children:"This example demonstrates how the status message width adjusts according to the field width."}),"\n",(0,t.jsx)(m,{}),"\n",(0,t.jsx)(n.h4,{children:"With help"}),"\n",(0,t.jsx)(p,{}),"\n",(0,t.jsx)(n.h3,{children:"Exclusive minimum and exclusive maximum"}),"\n",(0,t.jsx)(x,{}),"\n",(0,t.jsx)(n.h3,{children:"Prefix and suffix"}),"\n",(0,t.jsx)(n.p,{children:"You can also use a function as a prefix or suffix."}),"\n",(0,t.jsx)(b,{}),"\n",(0,t.jsx)(n.h3,{children:"Alignment"}),"\n",(0,t.jsx)(g,{}),"\n",(0,t.jsx)(n.h3,{children:"With help"}),"\n",(0,t.jsx)(p,{}),"\n",(0,t.jsx)(n.h3,{children:"With step controls"}),"\n",(0,t.jsx)(y,{}),"\n",(0,t.jsx)(n.h3,{children:"With step controls in conjunction with Slider"}),"\n",(0,t.jsx)(A,{}),"\n",(0,t.jsx)(n.h3,{children:"Disabled"}),"\n",(0,t.jsx)(j,{}),"\n",(0,t.jsx)(n.h3,{children:"Validation - Required"}),"\n",(0,t.jsx)(v,{}),"\n",(0,t.jsx)(n.h3,{children:"Validation - Minimum"}),"\n",(0,t.jsx)(w,{}),"\n",(0,t.jsx)(n.h3,{children:"Validation - Maximum and custom error message"}),"\n",(0,t.jsx)(S,{}),"\n",(0,t.jsx)(n.h3,{children:"Displaying messages - Conditional info message"}),"\n",(0,t.jsxs)(n.p,{children:["You can provide a function to the ",(0,t.jsx)(n.code,{children:"info"}),", ",(0,t.jsx)(n.code,{children:"warning"})," or ",(0,t.jsx)(n.code,{children:"error"})," props that returns a message based on your conditions."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"<Field.String\n  info={(value) => {\n    if (value === '123') {\n      return 'The value is 123'\n    }\n  }}\n/>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Optionally, use the ",(0,t.jsx)(n.code,{children:"conditionally"})," higher order function to show the message only when the field got changed (onChange) and blurred (onBlur)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"<Field.String\n  info={(value, { conditionally, getValueByPath, getFieldByPath }) => {\n    if (value === '123') {\n      // Show this message only when the field got changed and blurred.\n      return conditionally(() => 'The value is 123')\n    }\n  }}\n/>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can also pass options to the ",(0,t.jsx)(n.code,{children:"conditionally"})," function:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"showInitially"})," – display the message when the field is first rendered."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"<Field.String\n  info={(value, { conditionally, getValueByPath, getFieldByPath }) => {\n    if (value === '123') {\n      // Show this message only when the field got changed and blurred.\n      return conditionally(() => 'The value is 123', {\n        showInitially: true,\n      })\n    }\n  }}\n/>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Down below you can see an example of how to use the ",(0,t.jsx)(n.code,{children:"conditionally"})," function. There are two input fields which depend on each other. Here we use ",(0,t.jsx)(n.code,{children:"info"})," to show a message when the value of the first field is too low. While we use an error message when the value of the second field is more than what the first field has. The ",(0,t.jsx)(n.code,{children:"info"})," on the first field will only be shown when the user has changed the value and blurred the field."]}),"\n",(0,t.jsxs)(n.p,{children:["Read more about ",(0,t.jsx)(n.a,{href:"/uilib/extensions/forms/getting-started/#validation-and-the-user-experience-ux",children:"validation and the user experience"}),"."]}),"\n",(0,t.jsx)(L,{}),"\n",(0,t.jsx)(n.h3,{children:"Percentage"}),"\n",(0,t.jsx)(V,{}),"\n",(0,t.jsx)(n.h3,{children:"Allow Negative"}),"\n",(0,t.jsx)(F,{}),"\n",(0,t.jsx)(n.h3,{children:"Disallow Leading Zeroes"}),"\n",(0,t.jsx)(C,{}),"\n",(0,t.jsx)(n.h3,{children:"Widths"}),"\n",(0,t.jsx)(f,{}),"\n",(0,t.jsxs)(l,{children:[(0,t.jsx)(N,{}),(0,t.jsx)(E,{})]})]})}var D=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,i.R)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(W,e)})):W(e)};function P(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);
//# sourceMappingURL=15ecece7b1f1d5effaee5127073ed00b83d500df-365d1582cde9cf1b87a4.js.map