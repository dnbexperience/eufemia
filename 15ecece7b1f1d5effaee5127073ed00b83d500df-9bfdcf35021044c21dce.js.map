{"version":3,"file":"15ecece7b1f1d5effaee5127073ed00b83d500df-9bfdcf35021044c21dce.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/base-fields/Number/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/base-fields/Number/demos.mdx"],"sourcesContent":["import React from 'react'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Slider, Grid, Flex, Anchor } from '@dnb/eufemia/src'\nimport { Field, Form, FormError } from '@dnb/eufemia/src/extensions/forms'\n\nexport const Placeholder = () => {\n  return (\n    <ComponentBox>\n      <Field.Number\n        label=\"Label text\"\n        placeholder=\"Enter a number...\"\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const LabelAndValue = () => {\n  return (\n    <ComponentBox>\n      <Field.Number\n        label=\"Label text\"\n        defaultValue={420000.25}\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithCustomMask = () => {\n  return (\n    <ComponentBox>\n      <Field.Number\n        label=\"Label text\"\n        defaultValue={1234}\n        mask={Array(4).fill(/\\d/)}\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const LabelAndDescription = () => {\n  return (\n    <ComponentBox data-visual-test=\"number-label-description\">\n      <Form.Card>\n        <Field.Number\n          label=\"Label text\"\n          labelDescription=\"Description text on the next line\"\n          placeholder=\"Enter a text...\"\n        />\n        <Field.Number\n          label=\"Label text\"\n          labelDescription=\"Description text on the same line\"\n          labelDescriptionInline\n          placeholder=\"Enter a text...\"\n        />\n      </Form.Card>\n    </ComponentBox>\n  )\n}\n\nexport const WithStatus = () => {\n  return (\n    <ComponentBox data-visual-test=\"number-status\">\n      <Form.Card>\n        <Field.Number\n          label=\"Label text\"\n          placeholder=\"Enter a number...\"\n          width=\"large\"\n          warning=\"Short warning.\"\n          required\n        />\n        <Field.Number\n          label=\"Label text\"\n          defaultValue={420000}\n          width=\"large\"\n          info=\"Aliqua eu aute id qui esse aliqua dolor in aute magna commodo anim enim et.\"\n          required\n        />\n        <Field.Number\n          label=\"Label text\"\n          value={1234}\n          width=\"small\"\n          warning=\"Aliqua eu aute id qui esse aliqua dolor in aute magna commodo anim enim et. Velit incididunt exercitation est magna ex irure dolore nisi eiusmod ea exercitation.\"\n          required\n        />\n      </Form.Card>\n    </ComponentBox>\n  )\n}\n\nexport const HorizontalLayout = () => {\n  return (\n    <ComponentBox data-visual-test=\"number-horizontal-layout\">\n      <Form.Card>\n        <Field.Provider\n          layout=\"horizontal\"\n          layoutOptions={{\n            width: 'medium', // can be a rem value\n          }}\n          required\n        >\n          <Field.Number\n            label=\"Label text\"\n            defaultValue={420000}\n            step={10000}\n            showStepControls\n          />\n          <Field.Number\n            label=\"Label with a long text that will wrap\"\n            placeholder=\"Enter a number...\"\n            info=\"Aliqua eu aute id qui esse aliqua dolor in aute magna commodo anim enim et.\"\n          />\n          <Field.Number\n            label=\"Label with a long text that will wrap\"\n            placeholder=\"Enter a number...\"\n            size=\"large\"\n            width=\"stretch\"\n          />\n        </Field.Provider>\n      </Form.Card>\n    </ComponentBox>\n  )\n}\n\nexport const ExclusiveMinMax = () => {\n  return (\n    <ComponentBox>\n      <Field.Number\n        defaultValue={1000}\n        label=\"Label text\"\n        allowNegative={false}\n        required\n        exclusiveMinimum={900}\n        exclusiveMaximum={1000}\n        validateInitially\n      />\n    </ComponentBox>\n  )\n}\n\nexport const PrefixAndSuffix = () => {\n  return (\n    <ComponentBox>\n      <Flex.Stack>\n        <Field.Number\n          defaultValue={1234}\n          label=\"With prefix\"\n          prefix=\"prefix \"\n          onChange={(value) => console.log('onChange', value)}\n        />\n        <Field.Number\n          defaultValue={1}\n          label=\"With suffix (function)\"\n          suffix={(value) => (value === 1 ? ' year' : ' years')}\n          onChange={(value) => console.log('onChange', value)}\n        />\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n\nexport const Alignment = () => {\n  return (\n    <ComponentBox>\n      <Flex.Stack>\n        <Field.Number\n          align=\"center\"\n          label=\"Center aligned (default)\"\n          defaultValue={10}\n          onChange={(value) => console.log('onChange', value)}\n        />\n        <Field.Number\n          align=\"left\"\n          label=\"Left aligned\"\n          defaultValue={10}\n          onChange={(value) => console.log('onChange', value)}\n        />\n        <Field.Number\n          align=\"right\"\n          label=\"Right aligned\"\n          defaultValue={10}\n          onChange={(value) => console.log('onChange', value)}\n        />\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n\nexport const WithHelp = () => {\n  return (\n    <ComponentBox>\n      <Field.Number\n        defaultValue={12345}\n        label=\"Label text\"\n        help={{\n          title: 'Help is available',\n          content:\n            'Here is what a team can do for you. . . . It allows you to help others do their best.',\n        }}\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Widths = () => {\n  return (\n    <ComponentBox hideCode data-visual-test=\"number-widths\">\n      <Flex.Stack>\n        <Form.SubHeading>Without step controls</Form.SubHeading>\n\n        <Field.Number\n          label=\"Default width (property omitted)\"\n          defaultValue={1234}\n        />\n        <Field.Number label=\"Small\" defaultValue={1234} width=\"small\" />\n        <Field.Number\n          label=\"Medium (and medium size)\"\n          defaultValue={1234}\n          width=\"medium\"\n          size=\"medium\"\n        />\n        <Field.Number\n          label=\"Large (and large size)\"\n          defaultValue={1234}\n          width=\"large\"\n          size=\"large\"\n        />\n        <Field.Number\n          label=\"Stretch\"\n          defaultValue={1234}\n          width=\"stretch\"\n        />\n        <Form.SubHeading>With step controls</Form.SubHeading>\n        <Field.Number\n          showStepControls\n          label=\"Default width (property omitted)\"\n          defaultValue={1234}\n        />\n        <Field.Number\n          showStepControls\n          label=\"Small\"\n          defaultValue={1234}\n          width=\"small\"\n        />\n        <Field.Number\n          showStepControls\n          label=\"Medium (and medium size)\"\n          defaultValue={1234}\n          width=\"medium\"\n          size=\"medium\"\n        />\n        <Field.Number\n          showStepControls\n          label=\"Large (and large size)\"\n          defaultValue={1234}\n          width=\"large\"\n          size=\"large\"\n        />\n        <Field.Number\n          showStepControls\n          label=\"Stretch\"\n          defaultValue={1234}\n          width=\"stretch\"\n        />\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n\nexport const Disabled = () => {\n  return (\n    <ComponentBox>\n      <Field.Number\n        defaultValue={135}\n        label=\"Label text\"\n        onChange={(value) => console.log('onChange', value)}\n        disabled\n      />\n    </ComponentBox>\n  )\n}\n\nexport const ValidateRequired = () => {\n  return (\n    <ComponentBox>\n      <Field.Number\n        defaultValue={123}\n        label=\"Label text\"\n        onChange={(value) => console.log('onChange', value)}\n        required\n      />\n    </ComponentBox>\n  )\n}\n\nexport const ValidateMinimum = () => {\n  return (\n    <ComponentBox>\n      <Field.Number\n        defaultValue={300}\n        label=\"Enter a number below 250 and blur to trigger error\"\n        onChange={(value) => console.log('onChange', value)}\n        minimum={250}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const AllowNegative = () => {\n  return (\n    <ComponentBox>\n      <Field.Number allowNegative={false} />\n    </ComponentBox>\n  )\n}\n\nexport const DisallowLeadingZeroes = () => {\n  return (\n    <ComponentBox>\n      <Field.Number disallowLeadingZeroes />\n    </ComponentBox>\n  )\n}\n\nexport const Percentage = () => {\n  return (\n    <ComponentBox>\n      <Field.Number\n        percent\n        defaultValue={80}\n        label=\"Percentage\"\n        onChange={(value) => console.log('onChange', value)}\n        minimum={90}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const ValidateMaximumCustomError = () => {\n  return (\n    <ComponentBox>\n      <Field.Number\n        label=\"Enter a number above 250 and blur to trigger error\"\n        defaultValue={200}\n        maximum={250}\n        errorMessages={{\n          maximum: \"You can't enter a number THAR large.. Max 250!\",\n        }}\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithStepControls = () => (\n  <ComponentBox data-visual-test=\"number-input-step-controls\">\n    <Field.Number\n      label=\"Label text\"\n      showStepControls\n      minimum={0}\n      maximum={100}\n      step={10}\n      defaultValue={50}\n    />\n  </ComponentBox>\n)\n\nexport const WithStepControlsError = () => (\n  <ComponentBox data-visual-test=\"number-input-step-controls-error\">\n    <Field.Number\n      label=\"Label text\"\n      showStepControls\n      maximum={100}\n      defaultValue={150}\n      error={new Error('You done messed up, A-a-ron!')}\n    />\n  </ComponentBox>\n)\n\nexport const WithStepControlsDisabled = () => (\n  <ComponentBox data-visual-test=\"number-input-step-controls-disabled\">\n    <Field.Number label=\"Label text\" showStepControls disabled />\n  </ComponentBox>\n)\n\nexport const WithSlider = () => (\n  <ComponentBox hideCode>\n    {() => {\n      const Component = () => {\n        const [value, setValue] = React.useState(50000)\n        const settings = {\n          min: 0,\n          max: 100000,\n          step: 1000,\n        }\n        return (\n          <Grid.Container>\n            <Grid.Item\n              span={{\n                small: [1, 12],\n                medium: [1, 4],\n                large: [1, 3],\n              }}\n            >\n              <Field.Number\n                label=\"Label text\"\n                showStepControls\n                minimum={settings.min}\n                maximum={settings.max}\n                step={settings.step}\n                value={value}\n                onChange={(value) => setValue(value)}\n                width=\"stretch\"\n                bottom=\"small\"\n              />\n              <Slider\n                min={settings.min}\n                max={settings.max}\n                step={settings.step}\n                value={value}\n                onChange={({ value }) =>\n                  setValue(parseFloat(String(value)))\n                }\n                hideButtons\n                tooltip\n              />\n            </Grid.Item>\n          </Grid.Container>\n        )\n      }\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const ConditionalInfo = () => {\n  return (\n    <ComponentBox scope={{ FormError }}>\n      {() => {\n        return (\n          <Form.Handler\n            defaultData={{\n              maximum: 4,\n              amount: 5,\n            }}\n            onSubmit={async (data) => {\n              console.log('onSubmit', data)\n            }}\n          >\n            <Form.Card>\n              <Field.Number\n                label=\"Maximum for amount\"\n                labelDescription={\n                  <>Defines the maximum amount possible to be entered.</>\n                }\n                path=\"/maximum\"\n                required\n                info={(\n                  maximum,\n                  { conditionally, getValueByPath, getFieldByPath },\n                ) => {\n                  return conditionally(() => {\n                    if (maximum < getValueByPath('/amount')) {\n                      const { props, id } = getFieldByPath('/amount')\n                      const anchor = props?.label && (\n                        <Anchor\n                          href={'#' + id + '-label'}\n                          onClick={(event) => {\n                            event.preventDefault()\n                            const el = document.getElementById(\n                              id + '-label',\n                            )\n                            el?.scrollIntoView()\n                          }}\n                        >\n                          {props.label}\n                        </Anchor>\n                      )\n\n                      return (\n                        anchor && (\n                          <>\n                            Remember to adjust the {anchor} to be {maximum}{' '}\n                            or lower.\n                          </>\n                        )\n                      )\n                    }\n                  })\n                }}\n              />\n              <Field.Number\n                label=\"Amount\"\n                labelDescription={\n                  <>Should be same or lower than maximum.</>\n                }\n                path=\"/amount\"\n                required\n                onBlurValidator={(amount: number, { connectWithPath }) => {\n                  const maximum = connectWithPath('/maximum').getValue()\n\n                  if (amount > maximum) {\n                    return new FormError('NumberField.errorMaximum', {\n                      messageValues: { maximum: maximum.toString() },\n                    })\n                  }\n                }}\n              />\n            </Form.Card>\n\n            <Form.SubmitButton />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    h4: \"h4\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components), {VisibleWhenVisualTest} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.Alignment) _missingMdxReference(\"Examples.Alignment\", true);\n  if (!Examples.AllowNegative) _missingMdxReference(\"Examples.AllowNegative\", true);\n  if (!Examples.ConditionalInfo) _missingMdxReference(\"Examples.ConditionalInfo\", true);\n  if (!Examples.Disabled) _missingMdxReference(\"Examples.Disabled\", true);\n  if (!Examples.DisallowLeadingZeroes) _missingMdxReference(\"Examples.DisallowLeadingZeroes\", true);\n  if (!Examples.ExclusiveMinMax) _missingMdxReference(\"Examples.ExclusiveMinMax\", true);\n  if (!Examples.HorizontalLayout) _missingMdxReference(\"Examples.HorizontalLayout\", true);\n  if (!Examples.LabelAndDescription) _missingMdxReference(\"Examples.LabelAndDescription\", true);\n  if (!Examples.LabelAndValue) _missingMdxReference(\"Examples.LabelAndValue\", true);\n  if (!Examples.Percentage) _missingMdxReference(\"Examples.Percentage\", true);\n  if (!Examples.Placeholder) _missingMdxReference(\"Examples.Placeholder\", true);\n  if (!Examples.PrefixAndSuffix) _missingMdxReference(\"Examples.PrefixAndSuffix\", true);\n  if (!Examples.ValidateMaximumCustomError) _missingMdxReference(\"Examples.ValidateMaximumCustomError\", true);\n  if (!Examples.ValidateMinimum) _missingMdxReference(\"Examples.ValidateMinimum\", true);\n  if (!Examples.ValidateRequired) _missingMdxReference(\"Examples.ValidateRequired\", true);\n  if (!Examples.Widths) _missingMdxReference(\"Examples.Widths\", true);\n  if (!Examples.WithCustomMask) _missingMdxReference(\"Examples.WithCustomMask\", true);\n  if (!Examples.WithHelp) _missingMdxReference(\"Examples.WithHelp\", true);\n  if (!Examples.WithSlider) _missingMdxReference(\"Examples.WithSlider\", true);\n  if (!Examples.WithStatus) _missingMdxReference(\"Examples.WithStatus\", true);\n  if (!Examples.WithStepControls) _missingMdxReference(\"Examples.WithStepControls\", true);\n  if (!Examples.WithStepControlsDisabled) _missingMdxReference(\"Examples.WithStepControlsDisabled\", true);\n  if (!Examples.WithStepControlsError) _missingMdxReference(\"Examples.WithStepControlsError\", true);\n  if (!VisibleWhenVisualTest) _missingMdxReference(\"VisibleWhenVisualTest\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Label and value\"\n    }), \"\\n\", _jsx(Examples.LabelAndValue, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Label and description\"\n    }), \"\\n\", _jsx(Examples.LabelAndDescription, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With a horizontal layout\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This example uses \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/feature-fields/Provider/\",\n        children: \"Field.Provider\"\n      }), \" to set the \", _jsx(_components.code, {\n        children: \"layout\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"horizontal\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"layoutOptions\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"{ width: 'medium' }\"\n      }), \" for all nested fields.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"width\"\n      }), \" of the horizontal label can be set to \", _jsx(_components.code, {\n        children: \"small\"\n      }), \", \", _jsx(_components.code, {\n        children: \"medium\"\n      }), \", \", _jsx(_components.code, {\n        children: \"large\"\n      }), \" or a \", _jsx(_components.code, {\n        children: \"rem\"\n      }), \" value.\"]\n    }), \"\\n\", _jsx(Examples.HorizontalLayout, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Placeholder\"\n    }), \"\\n\", _jsx(Examples.Placeholder, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"With custom mask\"\n    }), \"\\n\", _jsx(Examples.WithCustomMask, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With a status\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This example demonstrates how the status message width adjusts according to the field width.\"\n    }), \"\\n\", _jsx(Examples.WithStatus, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"With help\"\n    }), \"\\n\", _jsx(Examples.WithHelp, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Exclusive minimum and exclusive maximum\"\n    }), \"\\n\", _jsx(Examples.ExclusiveMinMax, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Prefix and suffix\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can also use a function as a prefix or suffix.\"\n    }), \"\\n\", _jsx(Examples.PrefixAndSuffix, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Alignment\"\n    }), \"\\n\", _jsx(Examples.Alignment, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With help\"\n    }), \"\\n\", _jsx(Examples.WithHelp, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With step controls\"\n    }), \"\\n\", _jsx(Examples.WithStepControls, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With step controls in conjunction with Slider\"\n    }), \"\\n\", _jsx(Examples.WithSlider, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Disabled\"\n    }), \"\\n\", _jsx(Examples.Disabled, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Validation - Required\"\n    }), \"\\n\", _jsx(Examples.ValidateRequired, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Validation - Minimum\"\n    }), \"\\n\", _jsx(Examples.ValidateMinimum, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Validation - Maximum and custom error message\"\n    }), \"\\n\", _jsx(Examples.ValidateMaximumCustomError, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Displaying messages - Conditional info message\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can provide a function to the \", _jsx(_components.code, {\n        children: \"info\"\n      }), \", \", _jsx(_components.code, {\n        children: \"warning\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"error\"\n      }), \" props that returns a message based on your conditions.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<Field.String\\n  info={(value) => {\\n    if (value === '123') {\\n      return 'The value is 123'\\n    }\\n  }}\\n/>\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Optionally, use the \", _jsx(_components.code, {\n        children: \"conditionally\"\n      }), \" higher order function to show the message only when the field got changed (onChange) and blurred (onBlur).\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<Field.String\\n  info={(value, { conditionally, getValueByPath, getFieldByPath }) => {\\n    if (value === '123') {\\n      // Show this message only when the field got changed and blurred.\\n      return conditionally(() => 'The value is 123')\\n    }\\n  }}\\n/>\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also pass options to the \", _jsx(_components.code, {\n        children: \"conditionally\"\n      }), \" function:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"showInitially\"\n        }), \" – display the message when the field is first rendered.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<Field.String\\n  info={(value, { conditionally, getValueByPath, getFieldByPath }) => {\\n    if (value === '123') {\\n      // Show this message only when the field got changed and blurred.\\n      return conditionally(() => 'The value is 123', {\\n        showInitially: true,\\n      })\\n    }\\n  }}\\n/>\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Down below you can see an example of how to use the \", _jsx(_components.code, {\n        children: \"conditionally\"\n      }), \" function. There are two input fields which depend on each other. Here we use \", _jsx(_components.code, {\n        children: \"info\"\n      }), \" to show a message when the value of the first field is too low. While we use an error message when the value of the second field is more than what the first field has. The \", _jsx(_components.code, {\n        children: \"info\"\n      }), \" on the first field will only be shown when the user has changed the value and blurred the field.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Read more about \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/getting-started/#validation-and-the-user-experience-ux\",\n        children: \"validation and the user experience\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Examples.ConditionalInfo, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Percentage\"\n    }), \"\\n\", _jsx(Examples.Percentage, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Allow Negative\"\n    }), \"\\n\", _jsx(Examples.AllowNegative, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Disallow Leading Zeroes\"\n    }), \"\\n\", _jsx(Examples.DisallowLeadingZeroes, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Widths\"\n    }), \"\\n\", _jsx(Examples.Widths, {}), \"\\n\", _jsxs(VisibleWhenVisualTest, {\n      children: [_jsx(Examples.WithStepControlsError, {}), _jsx(Examples.WithStepControlsDisabled, {})]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["Placeholder","_jsx","ComponentBox","children","LabelAndValue","WithCustomMask","LabelAndDescription","WithStatus","HorizontalLayout","ExclusiveMinMax","PrefixAndSuffix","Alignment","WithHelp","Widths","hideCode","Disabled","ValidateRequired","ValidateMinimum","AllowNegative","DisallowLeadingZeroes","Percentage","ValidateMaximumCustomError","WithStepControls","WithStepControlsError","WithStepControlsDisabled","WithSlider","noInline","ConditionalInfo","scope","FormError","_createMdxContent","props","_components","Object","assign","h2","h3","p","a","code","h4","pre","ul","li","_provideComponents","components","VisibleWhenVisualTest","Examples","_missingMdxReference","_jsxs","_Fragment","href","className","wrapper","MDXLayout","id","component","Error"],"sourceRoot":""}