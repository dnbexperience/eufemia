{"version":3,"file":"166c92f2301dfc337870fa02f8a3f2ca7c253c97-beefedd2e6fab843ee5f.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/AccordionProviderContext.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/defaultProps.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/AccordionGroup.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/AccordionContext.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/AccordionHeader.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/AccordionContent.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/AccordionStore.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/Accordion.tsx"],"sourcesContent":["/**\n * Web AccordionGroup Context\n *\n */\n\nimport React from 'react'\nimport { AccordionGroupProps } from './AccordionGroup'\n\ntype AccordionGroupContextProps = {\n  expanded?: boolean\n  group?: string\n  expanded_ssr?: boolean\n  remember_state?: boolean\n  flush_remembered_state?: boolean\n  expanded_id?: string\n  onChange?: (...params: unknown[]) => void\n  onInit?: (...args: any[]) => any\n  collapseAccordionCallbacks?: React.MutableRefObject<(() => void)[]>\n  collapseAllHandleRef?: React.MutableRefObject<() => void>\n  /**\n   * @deprecated – Replaced with expandBehavior, expandBehaviour can be removed in v11\n   */\n  expandBehaviour?: AccordionGroupProps['expandBehaviour']\n  expandBehavior?: AccordionGroupProps['expandBehavior']\n}\n\nconst AccordionGroupContext =\n  React.createContext<AccordionGroupContextProps>({})\n\nexport default AccordionGroupContext\n","import { AccordionProps, GroupProps } from './Accordion'\n\nexport const accordionDefaultProps: AccordionProps & GroupProps = {\n  variant: 'outlined',\n  icon_size: 'medium',\n} as const\n","/**\n * Web AccordionGroup Component\n *\n */\n\nimport React, { useContext, useEffect, useRef } from 'react'\n\nimport classnames from 'classnames'\nimport {\n  isTrue,\n  makeUniqueId,\n  extendPropsWithContext,\n  validateDOMAttributes,\n  dispatchCustomElementEvent,\n} from '../../shared/component-helper'\nimport { createSpacingClasses } from '../space/SpacingHelper'\n\nimport Context from '../../shared/Context'\nimport AccordionGroupContext from './AccordionProviderContext'\n\nimport type { GroupProps } from './Accordion'\nimport { accordionDefaultProps } from './defaultProps'\n\nexport type AccordionGroupProps = React.HTMLProps<HTMLElement> &\n  GroupProps & {\n    onInit?: (...args: any[]) => any\n  }\n\nconst AccordionGroup = (props: AccordionGroupProps) => {\n  const context = useContext(Context)\n  const id = props.id || makeUniqueId()\n\n  const thisInstance = {\n    _id: id,\n    props,\n    context,\n    onChangeHandler,\n  }\n\n  function onChangeHandler(event) {\n    dispatchCustomElementEvent(thisInstance, 'on_change', {\n      id: event.id,\n      expanded: event.expanded,\n      event,\n    })\n  }\n\n  // use only the props from context, who are available here anyway\n  const extendedProps = extendPropsWithContext(\n    props,\n    accordionDefaultProps,\n    context.Accordion,\n    context.getTranslation(props)['Accordion']\n  )\n\n  const {\n    expanded, // eslint-disable-line\n    expanded_id, // eslint-disable-line\n    prerender, // eslint-disable-line\n    prevent_rerender, // eslint-disable-line\n    single_container, // eslint-disable-line\n    contentRef, // eslint-disable-line\n    allow_close_all, // eslint-disable-line\n    remember_state, // eslint-disable-line\n    flush_remembered_state, // eslint-disable-line\n    disabled, // eslint-disable-line\n    group, // eslint-disable-line\n    onInit, // eslint-disable-line\n    className,\n\n    id: _id, // eslint-disable-line\n    children, // eslint-disable-line\n    collapseAllHandleRef,\n    expandBehaviour,\n    expandBehavior,\n\n    ...restOfExtendedProps\n  } = extendedProps\n\n  const collapseAccordionCallbacks = useRef<(() => void)[]>([])\n\n  useEffect(() => {\n    if (collapseAllHandleRef) {\n      collapseAllHandleRef.current = () => {\n        collapseAccordionCallbacks.current.forEach((callback) =>\n          callback()\n        )\n      }\n    }\n  }, [collapseAllHandleRef])\n\n  const classes = classnames(\n    'dnb-accordion-group',\n    isTrue(single_container) && 'dnb-accordion-group--single-container',\n    createSpacingClasses(extendedProps),\n    className\n  )\n\n  const params = {\n    ...restOfExtendedProps,\n  }\n\n  // also used for code markup simulation\n  validateDOMAttributes(props, params)\n\n  if (!extendedProps?.group && isTrue(props.single_container)) {\n    extendedProps.group = makeUniqueId()\n  }\n\n  const contextForProvider = {\n    ...extendedProps,\n    id,\n    onChange: onChangeHandler,\n    collapseAllHandleRef,\n    collapseAccordionCallbacks,\n    expandBehaviour, // Deprecated – expandBehaviour is replaced with expandBehavior - can be removed in v11\n    expandBehavior,\n  }\n\n  return (\n    <AccordionGroupContext.Provider value={contextForProvider}>\n      <div className={classes}>\n        <span\n          id={id}\n          className=\"dnb-accordion-group__shell\"\n          role=\"group\"\n          {...params}\n        >\n          <span className=\"dnb-accordion-group__children\">{children}</span>\n        </span>\n      </div>\n    </AccordionGroupContext.Provider>\n  )\n}\n\nAccordionGroup._supportsSpacingProps = true\n\nexport default AccordionGroup\n","/**\n * Web AccordionGroup Context\n *\n */\n\nimport React from 'react'\nimport { SkeletonContextProps } from '../skeleton/SkeletonHelper'\nimport { AccordionProps } from './Accordion'\nimport { AccordionGroupProps } from './AccordionGroup'\n\nexport type AccordionContextProps = AccordionProps &\n  SkeletonContextProps & {\n    allow_close_all?: boolean\n    /**\n     * @deprecated – Replaced with expandBehavior, expandBehaviour can be removed in v11\n     */\n    expandBehaviour: AccordionGroupProps['expandBehaviour']\n    expandBehavior: AccordionGroupProps['expandBehavior']\n    callOnChange?: (parameters: {\n      id: string\n      group: string\n      expanded: boolean\n      event:\n        | React.MouseEvent<HTMLElement>\n        | React.KeyboardEvent<HTMLElement>\n    }) => void\n  }\n\nconst AccordionContext = React.createContext<AccordionContextProps>({})\n\nexport default AccordionContext\n","/**\n * Web Accordion Component\n *\n */\n\nimport React, { HTMLProps, useContext, useState } from 'react'\nimport type { SpacingProps } from '../space/types'\n\nimport {\n  validateDOMAttributes,\n  extendPropsWithContext,\n} from '../../shared/component-helper'\nimport IconPrimary from '../icon-primary/IconPrimary'\nimport classnames from 'classnames'\nimport AccordionContext from './AccordionContext'\nimport { createSpacingClasses } from '../space/SpacingHelper'\nimport {\n  skeletonDOMAttributes,\n  createSkeletonClass,\n} from '../skeleton/SkeletonHelper'\n\nimport type { HeadingLevel } from '../Heading'\nimport type { IconIcon, IconSize } from '../Icon'\nimport type { SkeletonShow } from '../Skeleton'\nimport type {\n  AccordionIcon,\n  AccordionIconPosition,\n  AccordionVariant,\n} from './Accordion'\n\nexport type AccordionHeaderTitleProps = SpacingProps & {\n  children?: React.ReactNode\n}\n\nfunction AccordionHeaderTitle({\n  children = null,\n  ...rest\n}: AccordionHeaderTitleProps) {\n  return (\n    <span\n      className={classnames(\n        'dnb-accordion__header__title',\n        createSpacingClasses(rest)\n      )}\n    >\n      {children}\n    </span>\n  )\n}\n\nexport type AccordionHeaderDescriptionProps = SpacingProps & {\n  children?: React.ReactNode\n}\n\nfunction AccordionHeaderDescription({\n  children = null,\n  ...rest\n}: AccordionHeaderDescriptionProps) {\n  return children ? (\n    <span\n      className={classnames(\n        'dnb-accordion__header__description',\n        createSpacingClasses(rest)\n      )}\n    >\n      {children}\n    </span>\n  ) : null\n}\n\nexport type AccordionHeaderContainerProps = SpacingProps & {\n  children?: React.ReactNode\n}\n\nfunction AccordionHeaderContainer({\n  children = null,\n  ...rest\n}: AccordionHeaderContainerProps) {\n  return children ? (\n    <span\n      className={classnames(\n        'dnb-accordion__header__container',\n        createSpacingClasses(rest)\n      )}\n    >\n      {children}\n    </span>\n  ) : null\n}\n\ntype AccordionHeaderIconIcon =\n  | IconIcon\n  | {\n      closed?: IconIcon\n      expanded?: IconIcon\n    }\n\nexport type AccordionHeaderIconProps = {\n  icon?: AccordionHeaderIconIcon\n  size?: IconSize\n  expanded?: boolean\n  icon_position?: AccordionIconPosition\n}\n\nfunction AccordionHeaderIcon({\n  icon: iconProp,\n  expanded,\n  size = 'medium',\n  icon_position,\n}: AccordionHeaderIconProps) {\n  const icon = (\n    iconProp &&\n    typeof iconProp === 'object' &&\n    'expanded' in iconProp &&\n    typeof iconProp?.expanded !== 'undefined'\n      ? iconProp[expanded ? 'expanded' : 'closed']\n      : iconProp || 'chevron-down'\n  ) as IconIcon\n  return (\n    <span\n      className={classnames(\n        'dnb-accordion__header__icon',\n        icon_position && `dnb-accordion__header__icon--${icon_position}`\n      )}\n    >\n      <IconPrimary size={size} icon={icon} aria-hidden />\n    </span>\n  )\n}\n\nexport type AccordionHeaderTitle =\n  | string\n  | React.ReactNode\n  | ((...args: any[]) => any)\nexport type AccordionHeaderDescription =\n  | string\n  | React.ReactNode\n  | ((...args: any[]) => any)\nexport type AccordionHeaderLeftComponent =\n  | string\n  | React.ReactNode\n  | ((...args: any[]) => any)\nexport type AccordionHeaderElement =\n  | string\n  | React.ReactNode\n  | ((...args: any[]) => any)\nexport type AccordionHeaderHeading =\n  | boolean\n  | string\n  | React.ReactNode\n  | ((...args: any[]) => any)\nexport type AccordionHeaderIcon =\n  | React.ReactNode\n  | ((...args: any[]) => any)\n  | {\n      closed?: React.ReactNode | ((...args: any[]) => any)\n      expanded?: React.ReactNode | ((...args: any[]) => any)\n    }\n\nexport type AccordionHeaderProps = React.HTMLProps<HTMLElement> &\n  SpacingProps & {\n    title?: AccordionHeaderTitle\n    expanded?: boolean\n    description?: AccordionHeaderDescription\n    left_component?: AccordionHeaderLeftComponent\n    element?: AccordionHeaderElement\n    heading?: AccordionHeaderHeading\n    heading_level?: HeadingLevel\n    icon?: AccordionIcon\n    icon_position?: AccordionIconPosition\n    icon_size?: IconSize\n    disabled?: boolean\n    skeleton?: SkeletonShow\n    no_animation?: boolean\n    className?: string\n    children?: string | React.ReactNode | ((...args: any[]) => any)\n    variant?: AccordionVariant\n  }\n\nconst accordionHeaderDefaultProps = {\n  icon_size: 'medium',\n}\n\nexport const AccordionHeader = ({\n  icon_size: icon_size_default = 'medium',\n  ...restOfProps\n}: AccordionHeaderProps) => {\n  const props = { icon_size: icon_size_default, ...restOfProps }\n\n  const [isHovering, setIsHovering] = useState<boolean>(false)\n  const [hasClicked, setHasClicked] = useState<boolean>(false)\n\n  const context = useContext(AccordionContext)\n\n  function onKeyDownHandler(event: React.KeyboardEvent<HTMLElement>) {\n    const keyPressed = event.key\n\n    if (keyPressed === 'Enter' || keyPressed === ' ') {\n      event.preventDefault()\n      onClickHandler(event)\n    }\n  }\n\n  function onClickHandler(\n    event: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>\n  ) {\n    const { id, group } = context\n\n    if (canClick()) {\n      const expanded = !context.expanded\n      context.callOnChange({ id, group, expanded, event })\n\n      setHasClicked(true)\n    }\n  }\n\n  function onMouseOverHandler() {\n    setIsHovering(true)\n  }\n\n  function onMouseOutHandler() {\n    setIsHovering(false)\n    setHasClicked(false)\n  }\n\n  function canClick() {\n    const { expanded, allow_close_all, group } = context\n    return !group || (group && !expanded) || allow_close_all\n  }\n\n  const extendedProps = extendPropsWithContext(\n    props,\n    accordionHeaderDefaultProps,\n    context as Record<string, unknown>\n  )\n\n  const {\n    id,\n\n    // 1. these props should be the same as ...\n    left_component,\n    expanded, // eslint-disable-line\n    title,\n    description,\n    element,\n    heading,\n    heading_level,\n    icon,\n    icon_size,\n    disabled,\n    skeleton,\n    no_animation,\n    variant,\n  } = extendedProps\n\n  let { icon_position } = extendedProps\n\n  const {\n    children,\n    className,\n\n    // 2. ... these\n    left_component: _left_component, // eslint-disable-line\n    expanded: _expanded, // eslint-disable-line\n    title: _title, // eslint-disable-line\n    description: _description, // eslint-disable-line\n    icon: _icon, // eslint-disable-line\n    icon_size: _icon_size, // eslint-disable-line\n    disabled: _disabled, // eslint-disable-line\n\n    ...rest\n  } = props\n\n  const defaultParts = [\n    <AccordionHeaderIcon\n      key=\"icon\"\n      icon={icon}\n      size={icon_size}\n      expanded={context.expanded}\n      icon_position={icon_position}\n    />,\n    <AccordionHeaderContainer key=\"container\">\n      {left_component as React.ReactNode}\n    </AccordionHeaderContainer>,\n    <AccordionHeaderTitle key=\"title\">\n      {title ||\n        (Array.isArray(children)\n          ? children.filter((cur) => !React.isValidElement(cur))\n          : children)}\n    </AccordionHeaderTitle>,\n    <AccordionHeaderDescription key=\"description\">\n      {description as React.ReactNode}\n    </AccordionHeaderDescription>,\n  ]\n\n  if (Array.isArray(children)) {\n    const removeParts = []\n    children.forEach((cur) => {\n      if (React.isValidElement(cur)) {\n        const part = defaultParts.find((c) => c.type === cur.type)\n        if (part) {\n          removeParts.push(part)\n        }\n\n        // if (cur.type === AccordionHeaderTitle) {\n        //   defaultParts.unshift(cur)\n        // } else {\n        //   defaultParts.push(cur)\n        // }\n\n        defaultParts.push(cur)\n      }\n    })\n    removeParts.forEach((part) => {\n      const index = defaultParts.findIndex((c) => c === part)\n      if (index > -1) {\n        defaultParts.splice(index, 1)\n      }\n    })\n  }\n\n  const partsToRender = []\n  const wrapperParts = []\n  const wrapperComp = (\n    <span className=\"dnb-accordion__header__wrapper\" key=\"wrapper\">\n      {wrapperParts}\n    </span>\n  )\n\n  defaultParts.forEach((part) => {\n    if (\n      React.isValidElement(part) &&\n      (part.type === AccordionHeaderTitle ||\n        part.type === AccordionHeaderDescription)\n    ) {\n      wrapperParts.push(part)\n      if (partsToRender.findIndex((c) => c === wrapperComp) === -1) {\n        partsToRender.push(wrapperComp)\n      }\n    } else {\n      partsToRender.push(part)\n    }\n  })\n\n  // position the icon to the right, if the element is not in the beginning\n  if (icon_position === undefined) {\n    const iconIndex = partsToRender.findIndex(\n      (c) => c.type === AccordionHeaderIcon\n    )\n    // because of the container at the beginning, we use 1\n    if (iconIndex > 1) {\n      icon_position = 'right'\n    }\n\n    if (left_component) {\n      icon_position = 'right'\n    }\n  }\n\n  const headerParams = {\n    id: `${id}-header`,\n    'aria-controls': `${id}-content`,\n    'aria-expanded': context.expanded,\n    role: 'button',\n    tabIndex: 0,\n    className: classnames(\n      'dnb-accordion__header',\n      variant && `dnb-accordion__header--${variant}`,\n      context.expanded && 'dnb-accordion__header--expanded',\n      icon_position && `dnb-accordion__header--icon-${icon_position}`,\n      isHovering &&\n        hasClicked &&\n        context.expanded &&\n        'dnb-accordion__header--after-click',\n      !canClick() && 'dnb-accordion__header--prevent-click',\n      description && 'dnb-accordion__header--description',\n      no_animation && 'dnb-accordion__header--no-animation',\n      createSkeletonClass('font', skeleton, context),\n      createSpacingClasses(rest),\n      className\n    ),\n    disabled,\n    ...rest,\n  } satisfies HTMLProps<HTMLElement>\n\n  if (disabled || skeleton) {\n    headerParams.tabIndex = -1\n    headerParams.disabled = true\n    headerParams['aria-disabled'] = true\n  } else {\n    headerParams.onClick = onClickHandler\n    headerParams.onKeyDown = onKeyDownHandler\n    headerParams.onMouseOver = onMouseOverHandler\n    headerParams.onMouseOut = onMouseOutHandler\n  }\n\n  skeletonDOMAttributes(headerParams, skeleton, context)\n\n  validateDOMAttributes(props, headerParams)\n\n  let Element = 'div'\n\n  // (String(heading) === 'true' || String(heading) === '1') extracted from isTrue function\n  if (heading && (String(heading) === 'true' || String(heading) === '1')) {\n    headerParams.role = 'heading'\n    headerParams['aria-level'] = heading_level ? Number(heading_level) : 2\n  } else if (heading) {\n    headerParams.role = null\n    Element = heading as string\n  } else if (element) {\n    headerParams.role = null\n    Element = element as string\n  }\n\n  return <Element {...headerParams}>{partsToRender}</Element>\n}\n\nAccordionHeader.Container = AccordionHeaderContainer\nAccordionHeader.Icon = AccordionHeaderIcon\nAccordionHeader.Title = AccordionHeaderTitle\nAccordionHeader.Description = AccordionHeaderDescription\n\nAccordionHeader._supportsSpacingProps = true\n\nexport default AccordionHeader\n","/**\n * Web Accordion Component\n *\n */\n\nimport React, { HTMLProps } from 'react'\nimport classnames from 'classnames'\nimport {\n  warn,\n  validateDOMAttributes,\n  processChildren,\n  getPreviousSibling,\n} from '../../shared/component-helper'\nimport { useMediaQuery } from '../../shared'\nimport AccordionContext, {\n  AccordionContextProps,\n} from './AccordionContext'\nimport { createSpacingClasses } from '../space/SpacingHelper'\nimport HeightAnimation from '../height-animation/HeightAnimation'\nimport { SpacingProps } from '../space/types'\n\nexport type AccordionContentProps = Omit<\n  React.HTMLProps<HTMLElement>,\n  'onAnimationStart' | 'onAnimationEnd' | 'children'\n> &\n  SpacingProps & {\n    instance?: React.MutableRefObject<unknown>\n    className?: string\n    children?: React.ReactNode | ((...args: any[]) => any)\n  }\n\nexport default function AccordionContent(props: AccordionContentProps) {\n  const context = React.useContext<AccordionContextProps>(AccordionContext)\n\n  const {\n    id,\n    expanded,\n    prerender,\n    prevent_rerender,\n    single_container,\n    disabled,\n    no_animation,\n    contentRef,\n  } = context\n\n  const { className, children, instance, ...rest } = props\n\n  let elementRef = React.useRef(null)\n  const cacheRef = React.useRef(null)\n\n  if (contentRef) {\n    elementRef = contentRef\n  }\n\n  const setContainerHeight = () => {\n    const { single_container } = context\n\n    if (single_container) {\n      const contentElem = elementRef.current\n      if (contentElem) {\n        try {\n          contentElem.style.height = ''\n\n          const containerElement = getPreviousSibling(\n            'dnb-accordion-group--single-container',\n            contentElem\n          ) as HTMLElement\n\n          if (no_animation) {\n            containerElement.style.transitionDuration = '1ms'\n          }\n\n          const minHeight =\n            (contentElem.offsetHeight + contentElem.offsetTop) / 16\n          containerElement.style.minHeight = `${minHeight}rem`\n        } catch (e) {\n          warn(e)\n        }\n      }\n    }\n  }\n\n  const renderContent = () => {\n    const children = processChildren(props)\n\n    const {\n      expanded,\n      prerender,\n      prevent_rerender,\n      prevent_rerender_conditional,\n    } = context\n\n    let content = children\n\n    if (typeof content === 'string') {\n      content = <p className=\"dnb-p\">{content}</p>\n    }\n\n    if (prevent_rerender) {\n      /**\n       * Ensure we do not render, if it is not expanded\n       */\n      if (!(expanded || prerender)) {\n        content = null\n      }\n\n      // update the cache if children is not the same anymore\n      if (prevent_rerender_conditional && cacheRef.current !== content) {\n        cacheRef.current = content\n      }\n\n      if (cacheRef.current) {\n        content = cacheRef.current\n      } else {\n        cacheRef.current = content\n      }\n    }\n\n    return content\n  }\n\n  React.useEffect(() => {\n    if (expanded && single_container) {\n      setContainerHeight()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [children, expanded, single_container])\n\n  React.useState(() => {\n    if (\n      instance &&\n      Object.prototype.hasOwnProperty.call(instance, 'current')\n    ) {\n      instance.current = { setContainerHeight }\n    }\n  })\n\n  const isSmallScreen = useMediaQuery({\n    when: { max: 'small' },\n  })\n\n  const content = renderContent()\n\n  const wrapperParams = {\n    className: classnames('dnb-accordion__content', className),\n    ...rest,\n  }\n\n  const keepInDOM = prerender || prevent_rerender\n\n  const innerParams = {\n    id: `${id}-content`,\n    'aria-labelledby': `${id}-header`,\n    className: classnames(\n      'dnb-accordion__content__inner',\n      createSpacingClasses(rest)\n    ),\n  } as HTMLProps<HTMLElement>\n\n  if (expanded) {\n    innerParams['aria-expanded'] = true\n  }\n\n  if (!expanded || disabled) {\n    innerParams.disabled = true\n    innerParams['aria-hidden'] = true\n  }\n\n  // to remove spacing props\n  validateDOMAttributes(props, wrapperParams)\n  validateDOMAttributes(null, innerParams)\n\n  const animate =\n    !no_animation && (single_container ? isSmallScreen : true)\n\n  return (\n    <HeightAnimation\n      {...wrapperParams}\n      open={expanded}\n      animate={animate}\n      keepInDOM={keepInDOM}\n      innerRef={elementRef}\n    >\n      <section {...innerParams}>{content}</section>\n    </HeightAnimation>\n  )\n}\n\nAccordionContent._supportsSpacingProps = true\n","import { warn } from '../../shared/component-helper'\nimport { AccordionContextProps } from './AccordionContext'\n\ntype AccordionStoreInstance = {\n  context: AccordionContextProps\n  _id: string\n  close: () => void\n}\nexport class AccordionStore {\n  _instances: Array<AccordionStoreInstance>\n  _id: string\n  constructor(id: string) {\n    this._id = id\n    this._instances = []\n  }\n  onChange({ id }: { id: string }) {\n    this._instances.forEach((inst) => {\n      // Deprecated – expandBehaviour is replaced with expandBehavior - can be removed in v11\n      const closeAccordion =\n        inst.context.expandBehaviour === 'single' &&\n        inst.context.expandBehavior === 'single'\n      if (closeAccordion && inst._id !== id) {\n        inst.close()\n      }\n    })\n  }\n  addInstance(instance: AccordionStoreInstance) {\n    this._instances.push(instance)\n  }\n  removeInstance(instance) {\n    this._instances = this._instances.filter((inst) => inst !== instance)\n  }\n}\n\nexport type StoreDataReturn = {\n  id: string\n  expanded: boolean\n}\nexport type StoreOptions = {\n  force?: boolean\n}\n\ntype StoreProps = {\n  id?: string\n  group?: string\n}\n\nexport class Store {\n  id?: string\n  group?: string\n\n  constructor({ id, group }: StoreProps) {\n    this.id = id\n    this.group = group\n    return this\n  }\n\n  storeId(id = this.id) {\n    if (this.group) {\n      // Skip using the random ID\n      if (this.group[0] === '#') {\n        return null\n      }\n      id = this.group\n    }\n    return `dnb-accordion-${id}`\n  }\n\n  saveState(expanded: boolean, id = this.id, opts: StoreOptions = {}) {\n    if (id) {\n      try {\n        const store = this.getData() || ({} as StoreDataReturn)\n\n        if (this.group) {\n          if (expanded) {\n            store.id = id\n          } else if (opts && opts.force) {\n            store.id = null\n          }\n        } else {\n          store.expanded = expanded\n        }\n\n        const storeId = this.storeId(id)\n        if (storeId) {\n          window.localStorage.setItem(storeId, JSON.stringify(store))\n        }\n      } catch (e) {\n        //\n      }\n    } else {\n      rememberWarning()\n    }\n  }\n\n  getData(id = this.id): StoreDataReturn {\n    const storeId = this.storeId(id)\n\n    if (storeId) {\n      try {\n        if (\n          Object.prototype.hasOwnProperty.call(\n            window.localStorage,\n            storeId\n          )\n        ) {\n          return JSON.parse(window.localStorage.getItem(storeId))\n        }\n      } catch (e) {\n        //\n      }\n    }\n\n    return null\n  }\n\n  getState(id = this.id) {\n    let state = null\n\n    const store = this.getData(id)\n\n    if (store) {\n      if (typeof store.id !== 'undefined') {\n        state = id === store.id\n      } else if (typeof store.expanded !== 'undefined') {\n        state = store.expanded\n      }\n    }\n\n    return state\n  }\n\n  flush(id = this.id) {\n    if (id) {\n      try {\n        const storeId = this.storeId(id)\n        if (storeId) {\n          window.localStorage.setItem(storeId, null)\n        }\n      } catch (e) {\n        //\n      }\n    }\n  }\n}\n\nexport function rememberWarning(type = 'accordion') {\n  warn(`Missing \"id\" prop the ${type}! \"remember_state\" is enabled.`)\n}\n","/**\n * Web Accordion Component\n *\n */\n\nimport React, {\n  useContext,\n  useState,\n  useEffect,\n  useRef,\n  HTMLProps,\n  useMemo,\n} from 'react'\n\nimport classnames from 'classnames'\nimport {\n  makeUniqueId,\n  findElementInChildren,\n  extendPropsWithContext,\n  validateDOMAttributes,\n  dispatchCustomElementEvent,\n} from '../../shared/component-helper'\nimport { createSpacingClasses } from '../space/SpacingHelper'\n\nimport type { ButtonIconPosition } from '../Button'\nimport type { HeadingLevel } from '../Heading'\nimport type { IconIcon, IconSize } from '../Icon'\nimport type { SkeletonShow } from '../Skeleton'\nimport type { SpacingProps } from '../space/types'\n\nimport AccordionGroup from './AccordionGroup'\nimport AccordionHeader from './AccordionHeader'\nimport AccordionContent from './AccordionContent'\nimport AccordionContext from './AccordionContext'\nimport AccordionProviderContext from './AccordionProviderContext'\nimport Context from '../../shared/Context'\n\nimport { AccordionStore, Store, rememberWarning } from './AccordionStore'\nimport { accordionDefaultProps } from './defaultProps'\n\nexport type AccordionVariant = 'plain' | 'default' | 'outlined' | 'filled'\n\nexport type AccordionHeading = boolean | React.ReactNode\n\nexport type AccordionIcon =\n  | IconIcon\n  | {\n      closed?: IconIcon\n      /**\n       * If set to `true` the accordion will be expanded as its initial state.\n       */\n      expanded?: IconIcon\n    }\n\nexport type AccordionAttributes = string | Record<string, unknown>\n\nexport type AccordionIconPosition = ButtonIconPosition\n\nexport type AccordionProps = Omit<React.HTMLProps<HTMLElement>, 'ref'> &\n  SpacingProps & {\n    /**\n     * A title as a string or React element. It will be used as the button text.\n     */\n    title?: React.ReactNode\n    description?: React.ReactNode\n    /**\n     * If set to `true` the accordion will be expanded as its initial state.\n     */\n    expanded?: boolean\n    /**\n     * If set to `true`, the open and close animation will be omitted.\n     */\n    no_animation?: boolean\n    /**\n     * If set to `true` the accordion will be expanded during SSR. Can be potentially useful for SEO, although it will disturb client hydration, where React expects the same state. But that&#39;s mainly a technical aspect to consider.\n     */\n    expanded_ssr?: boolean\n    /**\n     */\n    prerender?: boolean\n    /**\n     * If set to `true` the accordion component will not re-render its content – can be useful for components you don&#39;t have control of storing the temporary state during an interaction.\n     */\n    prevent_rerender?: boolean\n    /**\n     * Use this prop together with `prevent_rerender` – and if it is to `true`, the accordion component will re-render if the children are a new React element and does not match the previous one anymore.\n     */\n    prevent_rerender_conditional?: boolean\n    /**\n     * If set to `true`, it will remember a changed state initiated by the user. It requires a unique `id`. It will store the sate in the local storage.\n     */\n    remember_state?: boolean\n    /**\n     * Send along a custom React Ref for `.dnb-accordion__content`.\n     */\n    contentRef?: React.MutableRefObject<unknown>\n    /**\n     * If set to `true`, the saved (remembered) will be removed and the initial component state will be used and set.\n     */\n    flush_remembered_state?: boolean\n    /**\n     * If set to `true`, a group of accordions will be wrapped to sidebar looking menu for medium and larger screens.\n     */\n    single_container?: boolean\n    /**\n     * Defines the used styling. As of now, only `outlined` is available. Use `plain` for no styles. It defaults to `outlined`.\n     */\n    variant?: AccordionVariant\n    /**\n     * Will add a React element on the left side of the `title`, inside `AccordionHeaderContainer`.\n     */\n    left_component?: React.ReactNode\n    /**\n     * If set to `true`, the accordion button will be disabled (dimmed).\n     */\n    disabled?: boolean\n    /**\n     * If set to `true`, an overlaying skeleton with animation will be shown.\n     */\n    skeleton?: SkeletonShow\n    /**\n     * A unique `id` that will be used on the button element. If you use `remember_state`, an id is required.\n     */\n    id?: string\n    group?: string\n    /**\n     * Gives you the option to replace the used `button` element. Provide a React element, including a string (HTML element). Defaults to a `div` with all the needed accessibility features included.\n     */\n    element?: React.ReactNode\n    /**\n     * If set to `true`, level 2 (h2) will be used. You can provide your own HTML heading (`h3`), or provide a `heading_level` property.\n     */\n    heading?: AccordionHeading\n    /**\n     * If `heading` is set to `true`, you can provide a numeric value to define a different heading level. Defaults to `2`.\n     */\n    heading_level?: HeadingLevel\n    /**\n     * Will replace the `chevron` icon. The icon will still rotate (by CSS). You can use an object to use two different icons, one for the closed state and one for the expanded state `{ closed, expanded }`.\n     */\n    icon?: AccordionIcon\n    /**\n     * Will set the placement of the icon. Defaults to `left`.\n     */\n    icon_position?: AccordionIconPosition\n    /**\n     * Define a different icon size. Defaults to `medium` (1.5rem).\n     */\n    icon_size?: IconSize\n    attributes?: AccordionAttributes\n    className?: string\n    children?: React.ReactNode\n    /**\n     * Will be called by user click interaction. Returns an object with a boolean state `expanded` inside `{ expanded, id, event, ...event }`.\n     */\n    on_change?: (...args: any[]) => any\n    on_state_update?: (...args: any[]) => any\n  }\n\nfunction Accordion({\n  variant = 'outlined',\n  icon_size = 'medium',\n  ...restOfProps\n}: AccordionProps) {\n  const props = { variant, icon_size, ...restOfProps }\n\n  const context = useContext(AccordionProviderContext)\n\n  const group = props.group || context?.group\n  const id = useRef(props.id || makeUniqueId()).current\n\n  const store = new Store({ id: props.id, group })\n\n  // States ordered last here to make sure that the getInitialExpandedState have access to the store\n  const [previousExpanded, setPreviousExpanded] = useState(props.expanded)\n  const [expanded, setExpanded] = useState<boolean>(\n    getInitialExpandedState()\n  )\n  const hasAddedCallbackRef = useRef<boolean>(false)\n\n  // replacement for getDerivedStateFromProps\n  if (props.expanded !== previousExpanded) {\n    setExpanded(props.expanded !== undefined ? props.expanded : false)\n    setPreviousExpanded(props.expanded)\n  }\n\n  const thisInstance = {\n    _id: id,\n    context,\n    handleDisabledClick,\n    callOnChange,\n    callOnChangeHandler,\n    close,\n    setExpandedState,\n    state: { expanded, group },\n    props,\n    store,\n  }\n\n  // Constructor\n  useEffect(() => {\n    if (group && typeof window !== 'undefined') {\n      window['__dnbAccordion'] = window['__dnbAccordion'] || {}\n      window['__dnbAccordion'][group] =\n        window['__dnbAccordion'][group] || new AccordionStore(group)\n\n      window['__dnbAccordion'][group].addInstance(thisInstance)\n    }\n\n    if (context && typeof context?.onInit === 'function') {\n      context.onInit(thisInstance)\n    }\n\n    return () => {\n      if (group && typeof window !== 'undefined') {\n        window?.['__dnbAccordion'][group]?.removeInstance(thisInstance)\n      }\n    }\n  }, [])\n\n  // componentDidUpdate\n  useEffect(() => {\n    if (context.flush_remembered_state) {\n      store.flush()\n      setExpanded(props.expanded)\n    }\n\n    if (context?.expanded_id && context.expanded_id === props.id) {\n      setExpanded(true)\n    }\n  }, [\n    context.flush_remembered_state,\n    context.expanded_id,\n    props.expanded,\n    props.id,\n    store,\n  ])\n\n  // Add callback for closing all accordions inside a group if collapseAllHandleRef is defined\n  if (context?.collapseAllHandleRef && !hasAddedCallbackRef.current) {\n    context?.collapseAccordionCallbacks?.current.push(close)\n    hasAddedCallbackRef.current = true\n  }\n\n  // Gets the initial expanded sate, to prevent the opening and closing of Accordion\n  // That happens when if we put this logic in a useEffect that runs after the initial expanded state is set\n  // Since useEffect runs after every render\n  function getInitialExpandedState() {\n    if (props.expanded_ssr || context?.expanded_ssr) {\n      return typeof window === 'undefined'\n    }\n\n    if (props.remember_state || context.remember_state) {\n      const storedExpanded = store.getState()\n\n      if (props.expanded && storedExpanded === false) {\n        return false\n      }\n\n      if (storedExpanded) {\n        return true\n      }\n    }\n\n    return props.expanded !== undefined\n      ? props.expanded\n      : context?.expanded !== undefined\n      ? context.expanded\n      : false\n  }\n\n  function setExpandedState(expanded: boolean) {\n    setExpanded(expanded)\n  }\n\n  function close() {\n    changeOpened(false)\n  }\n\n  function changeOpened(expanded: boolean) {\n    setExpanded(expanded)\n\n    // check if a event exists, because, then it's a user click\n    if (props.remember_state || context.remember_state) {\n      store.saveState(expanded)\n    }\n  }\n\n  function handleDisabledClick(e: React.MouseEvent<HTMLElement>) {\n    e.preventDefault()\n    return false\n  }\n\n  function callOnChangeHandler(...params: any[]) {\n    callOnChange(...params)\n    if (context?.onChange) {\n      context?.onChange(...params)\n    }\n    if (group && typeof window !== 'undefined') {\n      window?.['__dnbAccordion'][group]?.onChange(...params)\n    }\n  }\n\n  function callOnChange(...params: any[]) {\n    const { expanded, event } = params[0]\n\n    changeOpened(expanded)\n\n    dispatchCustomElementEvent(thisInstance, 'on_change', {\n      expanded,\n      event,\n    })\n  }\n\n  return (\n    <Context.Consumer>\n      {(globalContext) => (\n        <AccordionContext.Consumer>\n          {(nestedContext) => {\n            // use only the props from context, who are available here anyway\n            let expandedState = expanded\n\n            const extendedProps = extendPropsWithContext(\n              props,\n              accordionDefaultProps,\n              context, // group context\n              nestedContext as Record<string, unknown>, // internal context\n              { skeleton: globalContext?.skeleton },\n              globalContext.Accordion, // global context\n              globalContext.translation['Accordion']\n            )\n\n            if (expandedState === undefined && globalContext.Accordion) {\n              if (globalContext.Accordion.expanded) {\n                expandedState = extendedProps.expanded\n              }\n            }\n\n            const {\n              variant,\n              className,\n              prerender,\n              prevent_rerender,\n              prevent_rerender_conditional,\n              single_container,\n              remember_state,\n              disabled,\n              skeleton,\n              no_animation,\n              expanded_ssr: _expanded_ssr, // eslint-disable-line\n              children,\n\n              id: _id, // eslint-disable-line\n              group: _group, // eslint-disable-line\n              // expanded: _expanded, // eslint-disable-line\n\n              title, // eslint-disable-line\n              description, // eslint-disable-line\n              left_component, // eslint-disable-line\n              icon, // eslint-disable-line\n              icon_position, // eslint-disable-line\n              icon_size, // eslint-disable-line\n              on_change, // eslint-disable-line\n              on_state_update, // eslint-disable-line\n\n              contentRef, // eslint-disable-line\n\n              ...restOfExtendedProps\n            } = extendedProps\n\n            const mainParams = {\n              id,\n              className: classnames(\n                'dnb-accordion',\n                expandedState && 'dnb-accordion--expanded',\n                variant && `dnb-accordion__variant--${variant}`,\n                prerender && 'dnb-accordion--prerender',\n                createSpacingClasses(extendedProps),\n                className\n              ),\n            } as HTMLProps<HTMLDivElement>\n\n            if (disabled) {\n              mainParams.onClick = handleDisabledClick\n            }\n\n            // to remove spacing props\n            validateDOMAttributes(props, restOfExtendedProps)\n\n            const extendedPropsForContext = extendPropsWithContext(\n              props,\n              accordionDefaultProps,\n              { expanded, group },\n              context\n            )\n\n            const accordionContext = {\n              ...extendedPropsForContext,\n              id,\n              expanded: expandedState,\n              prerender: prerender,\n              prevent_rerender: prevent_rerender,\n              prevent_rerender_conditional: prevent_rerender_conditional,\n              single_container: single_container,\n              remember_state: remember_state,\n              disabled: disabled,\n              skeleton: skeleton,\n              no_animation: no_animation,\n              callOnChange: callOnChangeHandler,\n            }\n\n            return (\n              <AccordionContext.Provider value={accordionContext}>\n                <div {...mainParams}>\n                  {findElementInChildren(\n                    children,\n                    (cur) => cur.type === AccordionHeader\n                  ) ? null : (\n                    <AccordionHeader />\n                  )}\n                  {findElementInChildren(\n                    children,\n                    (cur) => cur.type === AccordionContent\n                  ) ? (\n                    children\n                  ) : (\n                    <AccordionContent>{children}</AccordionContent>\n                  )}\n                </div>\n              </AccordionContext.Provider>\n            )\n          }}\n        </AccordionContext.Consumer>\n      )}\n    </Context.Consumer>\n  )\n}\n// TEMPORARY SOLUTION (defaultProps will be deprecated at one point). Needs to replacement with default prop parameters for example \"({expanded: null})\"\n// Only solved this way to prevent tests from failing, for when expanded is undefined instead of null\nAccordion.defaultProps = accordionDefaultProps\n\nexport type GroupProps = AccordionProps & {\n  allow_close_all?: boolean\n  /**\n   * Determines how many accordions can be expanded at once.\n   * Default: `single`\n   */\n  /**\n   * @deprecated – Replaced with expandBehavior, expandBehaviour can be removed in v11\n   */\n  expandBehaviour?: 'single' | 'multiple'\n  /**\n   * Determines how many accordions can be expanded at once.\n   * Default: `single`\n   */\n  expandBehavior?: 'single' | 'multiple'\n  /**\n   * ref handle to collapse all expanded accordions. Send in a ref and use `.current()` to collapse all accordions.\n   *\n   * Default: `undefined`\n   */\n  expanded_id?: string\n  collapseAllHandleRef?: React.MutableRefObject<() => void>\n}\n\nconst Group = ({\n  expandBehaviour = 'single',\n  expandBehavior = 'single',\n  ...props\n}: GroupProps) => {\n  if (props.remember_state && !props.id) {\n    rememberWarning('accordion group')\n  }\n\n  const [expandedId, setExpandedId] = useState<string | null>(null)\n\n  const instanceIDs = useRef<string[]>([])\n\n  const group = props?.id\n    ? props.id\n    : !props.group\n    ? '#' + makeUniqueId()\n    : undefined\n\n  const store = useMemo(() => new Store({ group }), [group])\n\n  // Set stored expanded_id on mount\n  useEffect(() => {\n    const storedData = store.getData()\n    const currentIDs = instanceIDs?.current\n\n    if (!storedData?.id) {\n      return\n    }\n\n    if (currentIDs.includes(storedData?.id)) {\n      return\n    }\n\n    // 1. get the fallback id\n    const fallbackId = currentIDs[0]\n\n    if (!fallbackId) {\n      return\n    }\n\n    // 2. set the fallback ids\n    setExpandedId(fallbackId)\n  }, [store])\n\n  // Store and reset fallback id\n  useEffect(() => {\n    if (!expandedId) {\n      return\n    }\n\n    // 3. save the fallback id\n    store.saveState(true, expandedId)\n\n    // 4. and reset the fallback id\n    setExpandedId(null)\n  }, [expandedId, store])\n\n  function onInit(instance) {\n    if (\n      instance.props.id &&\n      !instanceIDs.current.includes(instance.props.id)\n    ) {\n      instanceIDs.current.push(instance.props.id)\n    }\n  }\n\n  return (\n    <AccordionGroup\n      onInit={onInit}\n      {...props}\n      group={group}\n      expandBehaviour={expandBehaviour}\n      expandBehavior={expandBehavior}\n      expanded_id={expandedId || props.expanded_id}\n    />\n  )\n}\n\nAccordion.Provider = AccordionGroup\nAccordion.Header = AccordionHeader\nAccordion.Content = AccordionContent\n\nAccordion.Group = Group\n\nGroup.Store = (group: string, id: string = null) => {\n  return new Store({ group, id })\n}\n\nAccordion.Store = (id: string) => {\n  return new Store({ id })\n}\n\nAccordion._supportsSpacingProps = true\n\nexport default Accordion\n"],"names":["React","accordionDefaultProps","variant","icon_size","AccordionGroup","props","context","useContext","Context","id","makeUniqueId","thisInstance","_id","onChangeHandler","event","dispatchCustomElementEvent","expanded","extendedProps","extendPropsWithContext","Accordion","getTranslation","expanded_id","prerender","prevent_rerender","single_container","contentRef","allow_close_all","remember_state","flush_remembered_state","disabled","group","onInit","className","children","collapseAllHandleRef","expandBehaviour","expandBehavior","restOfExtendedProps","collapseAccordionCallbacks","useRef","useEffect","current","forEach","callback","classes","classnames","isTrue","createSpacingClasses","params","validateDOMAttributes","contextForProvider","onChange","_jsx","AccordionGroupContext","Provider","value","role","_supportsSpacingProps","AccordionHeaderTitle","_ref","rest","AccordionHeaderDescription","_ref2","AccordionHeaderContainer","_ref3","AccordionHeaderIcon","_ref4","icon","iconProp","size","icon_position","IconPrimary","accordionHeaderDefaultProps","AccordionHeader","_ref5","icon_size_default","restOfProps","isHovering","setIsHovering","useState","hasClicked","setHasClicked","AccordionContext","onClickHandler","canClick","callOnChange","left_component","title","description","element","heading","heading_level","skeleton","no_animation","_left_component","_expanded","_title","_description","_icon","_icon_size","_disabled","defaultParts","Array","isArray","filter","cur","removeParts","part","find","c","type","push","index","findIndex","splice","partsToRender","wrapperParts","wrapperComp","undefined","headerParams","tabIndex","createSkeletonClass","onClick","onKeyDown","keyPressed","key","preventDefault","onMouseOver","onMouseOut","skeletonDOMAttributes","Element","String","Number","Container","Icon","Title","Description","AccordionContent","instance","elementRef","cacheRef","setContainerHeight","contentElem","style","height","containerElement","getPreviousSibling","transitionDuration","minHeight","offsetHeight","offsetTop","e","warn","Object","prototype","hasOwnProperty","call","isSmallScreen","useMediaQuery","when","max","content","renderContent","processChildren","prevent_rerender_conditional","wrapperParams","keepInDOM","innerParams","animate","HeightAnimation","open","innerRef","AccordionStore","this","_instances","_proto","inst","close","addInstance","removeInstance","Store","_proto2","storeId","saveState","opts","store","getData","force","window","localStorage","setItem","JSON","stringify","rememberWarning","parse","getItem","getState","state","flush","AccordionProviderContext","previousExpanded","setPreviousExpanded","setExpanded","expanded_ssr","storedExpanded","getInitialExpandedState","hasAddedCallbackRef","handleDisabledClick","callOnChangeHandler","setExpandedState","_context$collapseAcco","_window","_window$__dnbAccordio","changeOpened","_len","arguments","length","_key","_window2","_window2$__dnbAccordi","apply","Consumer","globalContext","nestedContext","expandedState","translation","_expanded_ssr","_group","on_change","on_state_update","mainParams","accordionContext","_jsxs","findElementInChildren","defaultProps","Group","expandedId","setExpandedId","instanceIDs","useMemo","storedData","currentIDs","includes","fallbackId","Header","Content"],"sourceRoot":""}