{"version":3,"file":"1cf9d19327e96c4a8c43ecd5b36949da7af127c0-3beab06850590c59cca6.js","mappings":"mMAKA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,IAAK,MACLC,KAAM,OACNC,EAAG,IACHC,GAAI,KACJC,EAAG,MACFC,EAAAA,EAAAA,MAAsBV,EAAMW,YAG/B,OAFKC,GAAUC,EAAqB,YAAY,GAC3CD,EAAAA,eAAwBC,EAAqB,0BAA0B,IACrEC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKhB,EAAYG,GAAI,CAC9BY,SAAU,WACR,MAAMC,EAAAA,EAAAA,KAAKhB,EAAYI,IAAK,CAC9BW,UAAUC,EAAAA,EAAAA,KAAKhB,EAAYK,KAAM,CAC/BY,UAAW,eACXF,SAAU,6CAEV,MAAMC,EAAAA,EAAAA,KAAKhB,EAAYG,GAAI,CAC7BY,SAAU,gBACR,MAAMF,EAAAA,EAAAA,MAAMb,EAAYM,EAAG,CAC7BS,SAAU,CAAC,0GAA0GC,EAAAA,EAAAA,KAAKhB,EAAYK,KAAM,CAC1IU,SAAU,SACR,mBACF,MAAMC,EAAAA,EAAAA,KAAKhB,EAAYO,GAAI,CAC7BQ,SAAU,2CACR,MAAMF,EAAAA,EAAAA,MAAMb,EAAYM,EAAG,CAC7BS,SAAU,CAAC,4BAA4BC,EAAAA,EAAAA,KAAKhB,EAAYQ,EAAG,CACzDU,KAAM,kCACNH,SAAU,gBACR,+BAA+BC,EAAAA,EAAAA,KAAKhB,EAAYQ,EAAG,CACrDU,KAAM,2BACNH,SAAU,kBACR,iBAAiBC,EAAAA,EAAAA,KAAKhB,EAAYQ,EAAG,CACvCU,KAAM,8CACNH,SAAU,WACR,SAASC,EAAAA,EAAAA,KAAKhB,EAAYQ,EAAG,CAC/BU,KAAM,mDACNH,SAAU,aACR,6BACF,MAAMC,EAAAA,EAAAA,KAAKL,EAAAA,cAAwB,CAAC,GAAI,MAAMK,EAAAA,EAAAA,KAAKhB,EAAYO,GAAI,CACrEQ,SAAU,kBACR,MAAMF,EAAAA,EAAAA,MAAMb,EAAYM,EAAG,CAC7BS,SAAU,CAAC,2BAA2BC,EAAAA,EAAAA,KAAKhB,EAAYK,KAAM,CAC3DU,SAAU,cACR,2FAA2FC,EAAAA,EAAAA,KAAKhB,EAAYQ,EAAG,CACjHU,KAAM,4CACNH,SAAU,gBACR,iBACF,MAAMF,EAAAA,EAAAA,MAAMb,EAAYM,EAAG,CAC7BS,SAAU,CAAC,8DAA8DC,EAAAA,EAAAA,KAAKhB,EAAYK,KAAM,CAC9FU,SAAU,qBACR,OACF,MAAMC,EAAAA,EAAAA,KAAKG,EAAAA,eAAgB,CAAC,KAEpC,CAQA,SAASP,EAAqBQ,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,CAHA,UANA,SAAoBrB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOwB,QAASC,GAAavB,OAAOC,OAAO,CAAC,GAAGO,EAAAA,EAAAA,MAAsBV,EAAMW,YAC3E,OAAOc,GAAYR,EAAAA,EAAAA,KAAKQ,EAAWvB,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DgB,UAAUC,EAAAA,EAAAA,KAAKlB,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,0jCC1DO,MAAM0B,EAAcA,KACzBT,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,yIAWWY,EAAgBA,KAC3BX,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,8HAWWa,EAAsBA,KACjCZ,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,+CAAAX,SAAA,4SAkBWc,EAAaA,KACxBb,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,oCAAAX,SAAA,k0BAmCWe,EAAmBA,KAC9Bd,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,+CAAAX,SAAA,uqBA8BWgB,EAAWA,KACtBf,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,2UAgBWiB,EAAaA,KACxBhB,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,gJAYWkB,EAASA,KACpBjB,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAQ,UAAA,qCAAAnB,SAAA,u/BAqDWoB,EAAQA,KACnBnB,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,8UAoBWqB,EAAQA,KACnBpB,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,iHAWWsB,EAAWA,KACtBrB,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,0IAYWuB,EAAoBA,KAC/BtB,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,sCAAAX,SAAA,gIAaWwB,EAAmBA,KAC9BvB,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,0IAYWyB,EAAwBA,KACnCxB,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,sKAYW0B,EAAmCA,KAC9CzB,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,6PAeW2B,EAAkBA,KAC7B1B,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,mJAYW4B,EAA+BA,KAC1C3B,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,wPAcW6B,EAAgCA,KAC3C5B,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,mYAwBW8B,EAAmCA,KAC9C7B,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,8PAcW+B,EAAoCA,KAC/C9B,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,yYAwBWgC,EAAgBA,KAC3B/B,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,6FAUWI,EAAiBA,KAC5BH,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,iIAaWiC,EAAsBA,KACjChC,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,gIAWWkC,EAAwBA,KACnCjC,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,0YAYWmC,EAAmBA,KAC9BlC,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,6OAeK,SAASoC,IACd,OAAAnC,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAA0B,MAAA,CACFC,MACA,GAAAC,UAAA,EAAAvC,SAAA,yzBAuCA,C,sGCveO,MAAMwC,EAAe,CAC1B,YACA,YACA,UACA,cACA,MACA,MACA,aACA,mBACA,oBAGa,SAASC,EAAezD,GACrC,MAAM,YAAE0D,EAAW,WAAEC,EAAU,IAAEC,EAAG,SAAE5C,GAAahB,GAAS,CAAC,GACvD,cAAE6D,EAAa,cAAEC,EAAa,KAAEC,EAAI,WAAEC,IAC1CC,EAAAA,EAAAA,YAAWC,EAAAA,GAEPC,GAAUC,EAAAA,EAAAA,QAAmB,CAAC,GACpCD,EAAQE,QAAUN,EAElB,MAAMO,GAAWC,EAAAA,EAAAA,cAAY,KAC3B,MAAMC,EAAStE,OAAOuE,SAAQZ,aAAa,EAAbA,EAAeQ,UAAW,CAAC,GAAGK,QAC1D,CAACC,EAAGC,KAAqB,IAAlBC,EAAM7E,GAAM4E,EACjB,GAAIC,EAAKC,WAAW,KAAM,CACxB,MAAMC,EAAYF,EAAKG,UAAU,GAE3BC,EAAWF,EAAUG,MAAM,KAC3BC,EAAaF,EAASG,OAGtBC,EAAgB,CACpBC,KAFWtF,EAAMuF,WAAa,UAKhC,IAAK,MAAMC,KAAQhC,EACbxD,EAAMwF,KACRH,EAAcG,GAAQxF,EAAMwF,IAIhC,GAAIL,EAAa,EAAG,CAClB,MAAMM,EAAa,CAAC,IACpB,IAAK,MAAMZ,KAAQI,EAAU,CAC3BQ,EAAWC,KAAKb,GAChB,MAAMc,EAAYF,EAAWG,KAAK,gBAC5BC,EAASJ,EAAWL,OAAS,IAAMH,EAASG,OAE5CU,EAAgBC,EAAAA,GAAYpB,EAAKgB,GACnCI,EAAAA,GAAYpB,EAAKgB,GACjB,KAEEK,EAAYH,EAASR,EAAgBS,EAE3C,GAAID,GAC8B,KAA5BlC,aAAU,EAAVA,EAAagC,KACfI,EAAAA,GAAYpB,EAAKgB,EAAWK,OAEzB,CACL,MAAMA,EAAY,CAChBV,KAAM,YACHQ,GAICG,EAAW,GACbjG,EAAMiG,UACRA,EAASP,KAAKT,EAASiB,IAAI,IAEzBJ,SAAAA,EAAeG,UACjBA,EAASP,KAAIS,MAAbF,GAAQG,EAAAA,EAAAA,GAASN,EAAcG,WAE7BA,EAASb,OAAS,IACpBY,EAAUC,SAAWA,IAGS,KAA5BtC,aAAU,EAAVA,EAAagC,KACfI,EAAAA,GAAYpB,EAAKgB,EAAWK,EAEhC,CACF,CACF,MAC6B,KAAvBrC,aAAU,EAAVA,EAAakB,KACfkB,EAAAA,GAAYpB,EAAI0B,WAAYxB,EAAMQ,GAEhCrF,EAAMiG,UACRtB,EAAIsB,SAASP,KAAKX,EAGxB,CAEA,OAAOJ,CAAG,GAEZ,CAAEW,KAAM,SAAUe,WAAY,CAAC,EAAGJ,SAAU,KAGxCK,EAAgBpG,OAAOuE,SAC3BZ,aAAa,EAAbA,EAAeQ,UAAW,CAAC,GAC3BK,QAAO,CAACC,EAAG4B,KAAqB,IAAlB1B,EAAM7E,GAAMuG,EAC1B,GAAI1B,EAAKC,WAAW,KAAM,CACxB,MAAMO,EAAgB,CAAC,EAEvB,IAAK,MAAMG,KAAQxF,OAECwG,IAAhBxG,EAAMwF,IACiB,mBAAhBxF,EAAMwF,KAEbH,EAAcG,GAAQxF,EAAMwF,IAIhCO,EAAAA,GAAYpB,EAAKE,EAAMQ,EACzB,CAEA,OAAOV,CAAG,GACT,CAAC,GAEE8B,EAAgBvG,OAAOuE,SAC3BX,aAAa,EAAbA,EAAeO,UAAW,CAAC,GAC3BK,QAAO,CAACC,EAAG+B,KAAqB,IAAlB7B,EAAM7E,GAAM0G,EAC1B,GAAI7B,EAAKC,WAAW,KAAM,CACxB,MAAMO,EAAgB,CAAC,EAEvB,IAAK,MAAMG,KAAQxF,OAECwG,IAAhBxG,EAAMwF,IACiB,mBAAhBxF,EAAMwF,KAEbH,EAAcG,GAAQxF,EAAMwF,IAIhCO,EAAAA,GAAYpB,EAAKE,EAAMQ,EACzB,CAEA,OAAOV,CAAG,GACT,CAAC,GAMJ,OAJ+B,IAA3BH,EAAOyB,SAASb,eACXZ,EAAOyB,SAGT,CACLzB,SACAT,KAAMI,EAAQE,QACdiC,gBACAG,gBACD,GACA,CAAC5C,EAAeF,EAAYG,IAY/B,OAVIE,IACEJ,GACF+C,QAAQ/C,IAAIU,IAAWE,QAGrBd,IACFA,EAAYW,QAAUC,IAInBtD,CACT,C,2FCnKe,SAAS4F,EAAa5G,GACnC,MAAM,IAAE4D,EAAG,YAAEF,EAAW,WAAEC,EAAU,SAAE3C,GAAahB,GAAS,CAAC,GACvD,cAAE6D,EAAa,cAAEC,EAAa,KAAEC,EAAI,WAAEC,IAC1CC,EAAAA,EAAAA,YAAWC,EAAAA,IAEGE,EAAAA,EAAAA,QAAmB,CAAC,GAC5BC,QAAUN,EAElB,MAAMO,GAAWC,EAAAA,EAAAA,cAAY,KAC3B,MAAM+B,EAAgBpG,OAAOuE,SAC3BZ,aAAa,EAAbA,EAAeQ,UAAW,CAAC,GAC3BK,QAAO,CAACC,EAAGC,KAAqB,IAAlBC,EAAM7E,GAAM4E,EAC1B,GAAIC,EAAKC,WAAW,KAAM,CACxB,MAAMO,EAAgB,CAAC,EAEvB,IAAK,MAAMG,KAAQxF,OAECwG,IAAhBxG,EAAMwF,IACiB,mBAAhBxF,EAAMwF,KACZqB,EAAAA,EAAAA,gBAAe7G,EAAMwF,MAEtBH,EAAcG,GAAQxF,EAAMwF,KAIL,KAAvB7B,aAAU,EAAVA,EAAakB,KACfkB,EAAAA,GAAYpB,EAAKE,EAAMQ,EAE3B,CAEA,OAAOV,CAAG,GACT,CAAC,GAEE8B,EAAgBvG,OAAOuE,SAC3BX,aAAa,EAAbA,EAAeO,UAAW,CAAC,GAC3BK,QAAO,CAACC,EAAG4B,KAAqB,IAAlB1B,EAAM7E,GAAMuG,EAC1B,GAAI1B,EAAKC,WAAW,KAAM,CACxB,MAAMO,EAAgB,CAAC,EAEvB,IAAK,MAAMG,KAAQxF,OAECwG,IAAhBxG,EAAMwF,IACiB,mBAAhBxF,EAAMwF,KACZqB,EAAAA,EAAAA,gBAAe7G,EAAMwF,MAEtBH,EAAcG,GAAQxF,EAAMwF,KAIL,KAAvB7B,aAAU,EAAVA,EAAakB,KACfkB,EAAAA,GAAYpB,EAAKE,EAAMQ,EAE3B,CAEA,OAAOV,CAAG,GACT,CAAC,GAEJ,MAAO,CAAE2B,gBAAeG,gBAAe,GACtC,CAAC5C,EAAeF,EAAYG,IAY/B,OAVIE,IACEJ,GACF+C,QAAQ/C,IAAIU,KAGVZ,IACFA,EAAYW,QAAUC,IAInBtD,CACT,C,gFClFA,SAAS8F,EAAGlC,GASR,IATS,YACXmC,EAAW,MACXC,EACAjD,KAAMkD,KACHjH,GAKJ4E,EACC,MAAM,KAAEb,IAASE,EAAAA,EAAAA,YAAWC,EAAAA,GAE5B,OACEpD,EAAAA,EAAAA,MAACoG,EAAAA,EAAO,CACNC,QAAQ,SACRC,gBAAgB,cAChBC,MAAO,CAAEC,SAAU,QACnBC,YAAU,KACNvH,EAAKgB,SAAA,CAERgG,IACC/F,EAAAA,EAAAA,KAACuG,EAAAA,EAAS,CAACC,QAAM,EAAAzG,UACfC,EAAAA,EAAAA,KAAA,KAAAD,SAAIgG,OAGRlG,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CACG+F,GAA+D,IAAhD7G,OAAOwH,MAAMT,QAAAA,EAAWlD,IAAS,CAAC,GAAGqB,OACjD2B,EACAY,KAAKC,UACHC,EAAuBZ,QAAAA,EAAWlD,GAClC,KACA,GAEL,SAIT,CAQA,SAAS8D,EACPC,EACAC,GAEA,YAFW,IAAXA,IAAAA,EAAc,kBAEO,IAAVD,EACFC,EACED,GAA0B,iBAAVA,GAAsBA,IAAUC,EAClD,IACFD,KACA5H,OAAO8H,YACR9H,OAAOuE,QAAQqD,GAAOG,KAAI1B,IAAA,IAAE2B,EAAGC,GAAE5B,EAAA,MAAK,CACpC2B,EACAL,EAAuBM,GACxB,MAIEL,CAEX,CAEAhB,EAAIsB,uBAAwB,EAC5B,K","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/input/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/base-fields/String/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/GenerateSchema.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/ListAllProps.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/Log.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nimport {MultipleOneRow} from '../../extensions/forms/base-fields/String/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    h3: \"h3\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.CurrencyField) _missingMdxReference(\"Examples.CurrencyField\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Import\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Input } from '@dnb/eufemia'\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The input component is an umbrella component for all inputs which share the same style as the classic \", _jsx(_components.code, {\n        children: \"text\"\n      }), \" input field.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Formatted input fields (masked values)\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You may consider to use \", _jsx(_components.a, {\n        href: \"/uilib/components/input-masked/\",\n        children: \"InputMasked\"\n      }), \" for formatted strings and \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/\",\n        children: \"Eufemia Forms\"\n      }), \" fields like \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/base-fields/Number/\",\n        children: \"Number\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/feature-fields/Currency/\",\n        children: \"Currency\"\n      }), \" for formatted numbers:\"]\n    }), \"\\n\", _jsx(Examples.CurrencyField, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Please avoid using the \", _jsx(_components.code, {\n        children: \"maxlength\"\n      }), \" attribute when possible, as it may lower good accessibility. You can instead, use the \", _jsx(_components.a, {\n        href: \"/uilib/components/fragments/text-counter/\",\n        children: \"TextCounter\"\n      }), \" component.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"But you may also consider to use a multiline input with a \", _jsx(_components.code, {\n        children: \"characterCounter\"\n      }), \":\"]\n    }), \"\\n\", _jsx(MultipleOneRow, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Card, Flex } from '@dnb/eufemia/src'\nimport {\n  Field,\n  Form,\n  Tools,\n  Value,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport const Placeholder = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        label=\"Label text\"\n        placeholder=\"Enter a text...\"\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const LabelAndValue = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        label=\"Label text\"\n        defaultValue=\"foo\"\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const LabelAndDescription = () => {\n  return (\n    <ComponentBox data-visual-test=\"string-label-description\">\n      <Card stack>\n        <Field.String\n          label=\"Label text\"\n          labelDescription=\"Description text\"\n          placeholder=\"Enter a text...\"\n        />\n        <Field.String\n          label=\"Label text\"\n          labelDescription=\"\\nDescription text with new line using \\\\n\"\n          placeholder=\"Enter a text...\"\n        />\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const WithStatus = () => {\n  return (\n    <ComponentBox data-visual-test=\"string-status\">\n      <Card stack>\n        <Field.String\n          label=\"Label text\"\n          defaultValue=\"foo\"\n          warning=\"Short warning.\"\n          required\n        />\n        <Field.String\n          label=\"Label text\"\n          placeholder=\"Enter a text...\"\n          info=\"Aliqua eu aute id qui esse aliqua dolor in aute magna commodo anim enim et.\"\n          required\n        />\n        <Field.String\n          label=\"Label text\"\n          defaultValue=\"foo\"\n          width=\"small\"\n          warning=\"Aliqua eu aute id qui esse aliqua dolor in aute magna commodo anim enim et. Velit incididunt exercitation est magna ex irure dolore nisi eiusmod ea exercitation.\"\n        />\n        <Field.String\n          label=\"Label text\"\n          error={[\n            new Error('Error message A'),\n            new Error('Error message B'),\n          ]}\n          warning={['Warning message A', 'Warning message B']}\n          info={['Info message A', 'Info message B']}\n        />\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const HorizontalLayout = () => {\n  return (\n    <ComponentBox data-visual-test=\"string-horizontal-layout\">\n      <Card stack>\n        <Field.Provider\n          layout=\"horizontal\"\n          layoutOptions={{\n            width: 'medium', // can be a rem value\n          }}\n          placeholder=\"Enter a text...\"\n          required\n        >\n          <Field.String label=\"Label text\" warning=\"Short warning.\" />\n          <Field.String\n            label=\"Label with a long text that will wrap\"\n            placeholder=\"Enter a text...\"\n            size=\"medium\"\n            info=\"Aliqua eu aute id qui esse aliqua dolor in aute magna commodo anim enim et.\"\n          />\n          <Field.String\n            label=\"Label with a long text that will wrap\"\n            placeholder=\"Enter a text...\"\n            size=\"large\"\n            width=\"stretch\"\n          />\n        </Field.Provider>\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const WithHelp = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        label=\"Label text\"\n        defaultValue=\"foo\"\n        help={{\n          title: 'Help is available',\n          content:\n            'Take the time to help other people without expecting a reward or gratitude is definitely important in living an optimistic life.',\n        }}\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Capitalize = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        label=\"Label text\"\n        defaultValue=\"foo bar\"\n        capitalize\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Widths = () => {\n  return (\n    <ComponentBox hideCode data-visual-test=\"string-widths\">\n      <Flex.Stack>\n        <Field.String\n          label=\"Default width (property omitted)\"\n          defaultValue=\"foo\"\n        />\n        <Field.String label=\"Small\" defaultValue=\"foo\" width=\"small\" />\n        <Field.String label=\"Medium\" defaultValue=\"foo\" width=\"medium\" />\n        <Field.String label=\"Large\" defaultValue=\"foo\" width=\"large\" />\n        <Field.String label=\"Custom\" defaultValue=\"foo\" width=\"8rem\" />\n        <Field.String label=\"Stretch\" defaultValue=\"foo\" width=\"stretch\" />\n\n        <Field.String\n          label=\"Default width (property omitted)\"\n          defaultValue=\"foo\"\n          multiline\n        />\n        <Field.String\n          label=\"Small\"\n          defaultValue=\"foo\"\n          width=\"small\"\n          multiline\n        />\n        <Field.String\n          label=\"Medium\"\n          defaultValue=\"foo\"\n          width=\"medium\"\n          multiline\n        />\n        <Field.String\n          label=\"Large\"\n          defaultValue=\"foo\"\n          width=\"large\"\n          multiline\n        />\n        <Field.String\n          label=\"Custom\"\n          defaultValue=\"foo\"\n          width=\"8rem\"\n          multiline\n        />\n        <Field.String\n          label=\"Stretch\"\n          defaultValue=\"foo\"\n          width=\"stretch\"\n          multiline\n        />\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n\nexport const Icons = () => {\n  return (\n    <ComponentBox>\n      <Card stack>\n        <Field.String\n          label=\"Icon left\"\n          defaultValue=\"foo\"\n          leftIcon=\"check\"\n          onChange={(value) => console.log('onChange', value)}\n        />\n        <Field.String\n          label=\"Icon right\"\n          defaultValue=\"foo\"\n          rightIcon=\"loupe\"\n          onChange={(value) => console.log('onChange', value)}\n        />\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const Clear = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        defaultValue=\"foo\"\n        onChange={(value) => console.log('onChange', value)}\n        clear\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Disabled = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        defaultValue=\"foo\"\n        label=\"Label text\"\n        onChange={(value) => console.log('onChange', value)}\n        disabled\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithMultipleError = () => {\n  return (\n    <ComponentBox data-visual-test=\"multiple-errors\">\n      <Field.String\n        label=\"Multiple errors\"\n        defaultValue=\"foo\"\n        pattern=\"bar\"\n        minLength={4}\n        validateInitially\n      />\n    </ComponentBox>\n  )\n}\n\nexport const ValidateRequired = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        defaultValue=\"foo\"\n        label=\"Label text\"\n        onChange={(value) => console.log('onChange', value)}\n        required\n      />\n    </ComponentBox>\n  )\n}\n\nexport const ValidateMinimumLength = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        defaultValue=\"foo\"\n        label=\"Label text (minimum 8 characters)\"\n        onChange={(value) => console.log('onChange', value)}\n        minLength={8}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const ValidateMaximumLengthCustomError = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        defaultValue=\"foo\"\n        label=\"Label text (maximum 8 characters)\"\n        onChange={(value) => console.log('onChange', value)}\n        maxLength={8}\n        errorMessages={{\n          maxLength: \"You can't write THAT long.. Max 8 chars!\",\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const ValidatePattern = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        defaultValue=\"foo\"\n        label=\"Label text\"\n        onChange={(value) => console.log('onChange', value)}\n        pattern=\"^foo123\"\n      />\n    </ComponentBox>\n  )\n}\n\nexport const SynchronousExternalValidator = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        defaultValue=\"foo\"\n        label=\"Label text (minimum 4 characters)\"\n        validator={(value) =>\n          value.length < 4 ? Error('At least 4 characters') : undefined\n        }\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const AsynchronousExternalValidator = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        defaultValue=\"foo\"\n        label=\"Label text (minimum 4 characters)\"\n        validator={(value) =>\n          new Promise((resolve) =>\n            setTimeout(\n              () =>\n                resolve(\n                  value.length < 5\n                    ? Error('At least 5 characters')\n                    : undefined,\n                ),\n              1500,\n            ),\n          )\n        }\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const SynchronousExternalBlurValidator = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        defaultValue=\"foo\"\n        label=\"Label text (minimum 4 characters)\"\n        onBlurValidator={(value) =>\n          value.length < 4 ? Error('At least 4 characters') : undefined\n        }\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const AsynchronousExternalBlurValidator = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        defaultValue=\"foo\"\n        label=\"Label text (minimum 4 characters)\"\n        onBlurValidator={(value) =>\n          new Promise((resolve) =>\n            setTimeout(\n              () =>\n                resolve(\n                  value.length < 5\n                    ? Error('At least 5 characters')\n                    : undefined,\n                ),\n              1500,\n            ),\n          )\n        }\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const MultipleEmpty = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        onChange={(value) => console.log('onChange', value)}\n        multiline\n      />\n    </ComponentBox>\n  )\n}\n\nexport const MultipleOneRow = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        label=\"Label text\"\n        placeholder=\"Enter your text\"\n        multiline\n        rows={1}\n        characterCounter={40}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const MultiplePlaceholder = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        placeholder=\"Enter text here\"\n        onChange={(value) => console.log('onChange', value)}\n        multiline\n      />\n    </ComponentBox>\n  )\n}\n\nexport const MultipleLabelAndValue = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        defaultValue=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis in tempus odio, nec interdum orci. Integer vehicula ipsum et risus finibus, vitae commodo ex luctus. Nam viverra sollicitudin dictum. Vivamus maximus dignissim lorem, vitae viverra erat dapibus a.\"\n        label=\"Label text\"\n        onChange={(value) => console.log('onChange', value)}\n        multiline\n      />\n    </ComponentBox>\n  )\n}\n\nexport const MultipleWithHelp = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        label=\"Label text\"\n        help={{\n          title: 'Help is available',\n          content: 'There is more happiness in giving than in receiving.',\n        }}\n        multiline\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport function TransformInAndOut() {\n  return (\n    <ComponentBox scope={{ Tools }}>\n      {() => {\n        const transformOut = (value) => {\n          return { value, foo: 'bar' }\n        }\n        const transformIn = (data) => {\n          return data?.value\n        }\n\n        const MyForm = () => {\n          return (\n            <Form.Handler onSubmit={console.log}>\n              <Card stack>\n                <Field.String\n                  label=\"String field\"\n                  path=\"/myValue\"\n                  transformIn={transformIn}\n                  transformOut={transformOut}\n                  defaultValue=\"Default value\"\n                />\n\n                <Value.String\n                  label=\"String value\"\n                  path=\"/myValue\"\n                  transformIn={transformIn}\n                  placeholder=\"(placeholder)\"\n                  showEmpty\n                />\n\n                <Form.SubHeading>Data Context</Form.SubHeading>\n                <Tools.Log />\n              </Card>\n              <Form.SubmitButton />\n            </Form.Handler>\n          )\n        }\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n","import { useCallback, useContext, useRef } from 'react'\nimport pointer, { JsonObject } from '../utils/json-pointer'\nimport DataContext, { FilterData } from '../DataContext/Context'\nimport { JSONSchema } from '../types'\n\nexport type GenerateSchemaReturn = {\n  schema: JSONSchema\n  data: JsonObject\n  propsOfFields: JsonObject\n  propsOfValues: JsonObject\n}\nexport type GenerateSchemaProps = {\n  log?: boolean\n  generateRef?: React.MutableRefObject<() => GenerateSchemaReturn>\n  filterData?: FilterData\n  children: React.ReactNode\n}\nexport type GenerateRef = GenerateSchemaProps['generateRef']['current']\n\nexport const schemaParams = [\n  'minLength',\n  'maxLength',\n  'pattern',\n  'description',\n  'min',\n  'max',\n  'multipleOf',\n  'exclusiveMinimum',\n  'exclusiveMaximum',\n]\n\nexport default function GenerateSchema(props: GenerateSchemaProps) {\n  const { generateRef, filterData, log, children } = props || {}\n  const { fieldPropsRef, valuePropsRef, data, hasContext } =\n    useContext(DataContext)\n\n  const dataRef = useRef<JsonObject>({})\n  dataRef.current = data\n\n  const generate = useCallback(() => {\n    const schema = Object.entries(fieldPropsRef?.current || {}).reduce(\n      (acc, [path, props]) => {\n        if (path.startsWith('/')) {\n          const objectKey = path.substring(1)\n\n          const pathList = objectKey.split('/')\n          const slashCount = pathList.length\n\n          const type = props.valueType || 'string'\n          const propertyValue = {\n            type,\n          }\n\n          for (const prop of schemaParams) {\n            if (props[prop]) {\n              propertyValue[prop] = props[prop]\n            }\n          }\n\n          if (slashCount > 1) {\n            const nestedPath = ['']\n            for (const path of pathList) {\n              nestedPath.push(path)\n              const pathToSet = nestedPath.join('/properties/')\n              const isLast = nestedPath.length - 1 === pathList.length\n\n              const existingValue = pointer.has(acc, pathToSet)\n                ? pointer.get(acc, pathToSet)\n                : null\n\n              const pathValue = isLast ? propertyValue : existingValue\n\n              if (isLast) {\n                if (filterData?.[pathToSet] !== false) {\n                  pointer.set(acc, pathToSet, pathValue)\n                }\n              } else {\n                const pathValue = {\n                  type: 'object',\n                  ...existingValue,\n                }\n\n                // - Add required\n                const required = []\n                if (props.required) {\n                  required.push(pathList.at(-1))\n                }\n                if (existingValue?.required) {\n                  required.push(...existingValue.required)\n                }\n                if (required.length > 0) {\n                  pathValue.required = required\n                }\n\n                if (filterData?.[pathToSet] !== false) {\n                  pointer.set(acc, pathToSet, pathValue)\n                }\n              }\n            }\n          } else {\n            if (filterData?.[path] !== false) {\n              pointer.set(acc.properties, path, propertyValue)\n            }\n            if (props.required) {\n              acc.required.push(objectKey)\n            }\n          }\n        }\n\n        return acc\n      },\n      { type: 'object', properties: {}, required: [] }\n    )\n\n    const propsOfFields = Object.entries(\n      fieldPropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function'\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        pointer.set(acc, path, propertyValue)\n      }\n\n      return acc\n    }, {})\n\n    const propsOfValues = Object.entries(\n      valuePropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function'\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        pointer.set(acc, path, propertyValue)\n      }\n\n      return acc\n    }, {})\n\n    if (schema.required.length === 0) {\n      delete schema.required\n    }\n\n    return {\n      schema,\n      data: dataRef.current,\n      propsOfFields,\n      propsOfValues,\n    } as GenerateSchemaReturn\n  }, [fieldPropsRef, filterData, valuePropsRef])\n\n  if (hasContext) {\n    if (log) {\n      console.log(generate().schema)\n    }\n\n    if (generateRef) {\n      generateRef.current = generate\n    }\n  }\n\n  return children\n}\n","import { isValidElement, useCallback, useContext, useRef } from 'react'\nimport pointer, { JsonObject } from '../utils/json-pointer'\nimport DataContext, { FilterData } from '../DataContext/Context'\n\nexport type ListAllPropsReturn = {\n  propsOfFields: JsonObject\n  propsOfValues: JsonObject\n}\nexport type ListAllPropsProps = {\n  log?: boolean\n  generateRef?: React.MutableRefObject<() => ListAllPropsReturn>\n  filterData?: FilterData\n  children: React.ReactNode\n}\nexport type GenerateRef = ListAllPropsProps['generateRef']['current']\n\nexport default function ListAllProps(props: ListAllPropsProps) {\n  const { log, generateRef, filterData, children } = props || {}\n  const { fieldPropsRef, valuePropsRef, data, hasContext } =\n    useContext(DataContext)\n\n  const dataRef = useRef<JsonObject>({})\n  dataRef.current = data\n\n  const generate = useCallback(() => {\n    const propsOfFields = Object.entries(\n      fieldPropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function' &&\n            !isValidElement(props[prop])\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        if (filterData?.[path] !== false) {\n          pointer.set(acc, path, propertyValue)\n        }\n      }\n\n      return acc\n    }, {})\n\n    const propsOfValues = Object.entries(\n      valuePropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function' &&\n            !isValidElement(props[prop])\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        if (filterData?.[path] !== false) {\n          pointer.set(acc, path, propertyValue)\n        }\n      }\n\n      return acc\n    }, {})\n\n    return { propsOfFields, propsOfValues } as ListAllPropsReturn\n  }, [fieldPropsRef, filterData, valuePropsRef])\n\n  if (hasContext) {\n    if (log) {\n      console.log(generate())\n    }\n\n    if (generateRef) {\n      generateRef.current = generate\n    }\n  }\n\n  return children\n}\n","import React, { useContext } from 'react'\nimport DataContext from '../DataContext/Context'\nimport Section, { SectionAllProps } from '../../../components/Section'\nimport { FormLabel } from '../../../components'\n\nfunction Log({\n  placeholder,\n  label,\n  data: logData,\n  ...props\n}: Omit<SectionAllProps, 'data' | 'label'> & {\n  data?: unknown\n  label?: React.ReactNode\n  placeholder?: React.ReactNode\n}) {\n  const { data } = useContext(DataContext)\n\n  return (\n    <Section\n      element=\"output\"\n      backgroundColor=\"sand-yellow\"\n      style={{ maxWidth: '80vw' }}\n      innerSpace\n      {...props}\n    >\n      {label && (\n        <FormLabel bottom>\n          <b>{label}</b>\n        </FormLabel>\n      )}\n      <pre>\n        {placeholder && Object.keys((logData ?? data) || {}).length === 0\n          ? placeholder\n          : JSON.stringify(\n              replaceUndefinedValues(logData ?? data),\n              null,\n              2\n            )}\n        {' ' /* Ensure one line of spacing */}\n      </pre>\n    </Section>\n  )\n}\n\n/**\n * Replaces undefined values in an object with a specified replacement value.\n * @param value - The value to check for undefined values.\n * @param replaceWith - The value to replace undefined values with. Default is null.\n * @returns The object with undefined values replaced.\n */\nfunction replaceUndefinedValues(\n  value: unknown,\n  replaceWith = 'undefined' as unknown\n): unknown {\n  if (typeof value === 'undefined') {\n    return replaceWith\n  } else if (value && typeof value === 'object' && value !== replaceWith) {\n    return {\n      ...value,\n      ...Object.fromEntries(\n        Object.entries(value).map(([k, v]) => [\n          k,\n          replaceUndefinedValues(v),\n        ])\n      ),\n    }\n  } else {\n    return value\n  }\n}\n\nLog._supportsSpacingProps = true\nexport default Log\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","pre","code","p","h3","a","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","children","_jsx","className","href","MultipleOneRow","id","component","Error","wrapper","MDXLayout","Placeholder","ComponentBox","LabelAndValue","LabelAndDescription","WithStatus","HorizontalLayout","WithHelp","Capitalize","Widths","hideCode","Icons","Clear","Disabled","WithMultipleError","ValidateRequired","ValidateMinimumLength","ValidateMaximumLengthCustomError","ValidatePattern","SynchronousExternalValidator","AsynchronousExternalValidator","SynchronousExternalBlurValidator","AsynchronousExternalBlurValidator","MultipleEmpty","MultiplePlaceholder","MultipleLabelAndValue","MultipleWithHelp","TransformInAndOut","scope","Tools","noInline","schemaParams","GenerateSchema","generateRef","filterData","log","fieldPropsRef","valuePropsRef","data","hasContext","useContext","DataContext","dataRef","useRef","current","generate","useCallback","schema","entries","reduce","acc","_ref","path","startsWith","objectKey","substring","pathList","split","slashCount","length","propertyValue","type","valueType","prop","nestedPath","push","pathToSet","join","isLast","existingValue","pointer","pathValue","required","at","apply","_toConsumableArray","properties","propsOfFields","_ref2","undefined","propsOfValues","_ref3","console","ListAllProps","isValidElement","Log","placeholder","label","logData","Section","element","backgroundColor","style","maxWidth","innerSpace","FormLabel","bottom","keys","JSON","stringify","replaceUndefinedValues","value","replaceWith","fromEntries","map","k","v","_supportsSpacingProps"],"sourceRoot":""}