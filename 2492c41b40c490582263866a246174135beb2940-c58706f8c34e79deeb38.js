"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[56638],{8974:function(n,e,t){t.r(e),t.d(e,{default:function(){return u}});var a={};t.r(a),t.d(a,{ToolbarVariantMiniumOneItemOneItem:function(){return o.ToolbarVariantMiniumOneItemOneItem},ToolbarVariantMiniumOneItemTwoItems:function(){return o.ToolbarVariantMiniumOneItemTwoItems},ViewAndEditContainer:function(){return o.ViewAndEditContainer}});var r=t(52322),i=t(45392),o=t(22939);function l(n){const e=Object.assign({h2:"h2",h3:"h3",h4:"h4",p:"p"},(0,i.ah)(),n.components);return a||m("Examples",!1),o.ToolbarVariantMiniumOneItemOneItem||m("Examples.ToolbarVariantMiniumOneItemOneItem",!0),o.ToolbarVariantMiniumOneItemTwoItems||m("Examples.ToolbarVariantMiniumOneItemTwoItems",!0),o.ViewAndEditContainer||m("Examples.ViewAndEditContainer",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:"Demos"}),"\n",(0,r.jsx)(o.ViewAndEditContainer,{}),"\n",(0,r.jsx)(e.h3,{children:"Toolbar variant"}),"\n",(0,r.jsx)(e.h4,{children:"Minimum one item"}),"\n",(0,r.jsx)(e.p,{children:"When having one item in the Iterate.Array:"}),"\n",(0,r.jsx)(o.ToolbarVariantMiniumOneItemOneItem,{}),"\n",(0,r.jsx)(e.p,{children:"When having two items in the Iterate.Array:"}),"\n",(0,r.jsx)(o.ToolbarVariantMiniumOneItemTwoItems,{})]})}var u=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(l,n)})):l(n)};function m(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},40730:function(n,e,t){t.r(e),t.d(e,{Default:function(){return i}});var a=t(64368),r=t(52322);const i=()=>(0,r.jsx)(a.Z,{noInline:!0,children:'const MyForm = () => {\n  const { count } = Iterate.useCount(\'myForm\')\n  return (\n    <Form.Handler\n      defaultData={{\n        myList: [\'Item 1\'],\n      }}\n      id="myForm"\n    >\n      <Card stack>\n        <Iterate.Array path="/myList" placeholder={<>Empty list</>}>\n          <Iterate.AnimatedContainer title="Title {itemNo}">\n            <Field.String label="Label" itemPath="/" />\n\n            <Iterate.Toolbar>\n              <Iterate.RemoveButton />\n            </Iterate.Toolbar>\n          </Iterate.AnimatedContainer>\n        </Iterate.Array>\n\n        <Iterate.PushButton\n          path="/myList"\n          pushValue={\'Item \' + String(count(\'/myList\') + 1)}\n          text="Add new item"\n        />\n      </Card>\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n'})},22939:function(n,e,t){t.r(e),t.d(e,{AnimatedContainer:function(){return l.Default},ArrayFromFormHandler:function(){return p},DynamicPathValue:function(){return y},InitialOpen:function(){return g},ObjectItems:function(){return c},PrimitiveItemsFields:function(){return u},PrimitiveItemsValues:function(){return m},RenderPropsObjectItems:function(){return I},RenderPropsPrimitiveItems:function(){return h},ToolbarVariantMiniumOneItemOneItem:function(){return C},ToolbarVariantMiniumOneItemTwoItems:function(){return v},ValueComposition:function(){return s},ViewAndEditContainer:function(){return f},WithArrayValidator:function(){return F},WithTable:function(){return d},WithVisibility:function(){return b}});var a=t(64368),r=t(48673),i=t(16511),o=t(52322),l=t(40730);const u=()=>(0,o.jsx)(a.Z,{children:"<Iterate.Array\n  value={['Iron Man', 'Captain America', 'The Hulk']}\n  onChange={console.log}\n>\n  <Field.String itemPath=\"/\" />\n</Iterate.Array>\n"}),m=()=>(0,o.jsx)(a.Z,{"data-visual-test":"primitive-element-values",children:"<Value.SummaryList>\n  <Iterate.Array value={['Iron Man', 'Captain America', 'The Hulk']}>\n    <Value.String itemPath=\"/\" />\n  </Iterate.Array>\n</Value.SummaryList>\n"}),s=()=>(0,o.jsx)(a.Z,{children:"<Value.Composition>\n  <Iterate.Array\n    value={[\n      {\n        label: 'Label A',\n        value: 'value 1',\n      },\n      {\n        label: 'Label B',\n        value: 'value 2',\n      },\n    ]}\n  >\n    <Value.String\n      label={<Value.String itemPath=\"/label\" />}\n      itemPath=\"/value\"\n    />\n  </Iterate.Array>\n</Value.Composition>\n"}),d=()=>(0,o.jsx)(a.Z,{children:"<Table>\n  <thead>\n    <Tr>\n      <Th>Name</Th>\n      <Th>Age</Th>\n    </Tr>\n  </thead>\n  <tbody>\n    <Iterate.Array\n      withoutFlex\n      value={[\n        {\n          name: 'Iron Man',\n          age: 45,\n        },\n        {\n          name: 'Captain America',\n          age: 123,\n        },\n        {\n          name: 'The Hulk',\n          age: 3337,\n        },\n      ]}\n    >\n      <Tr>\n        <Td>\n          <Value.Name.Last itemPath=\"/name\" />\n        </Td>\n        <Td>\n          <Value.Number itemPath=\"/age\" />\n        </Td>\n      </Tr>\n    </Iterate.Array>\n  </tbody>\n</Table>\n"}),c=()=>(0,o.jsx)(a.Z,{children:"<Iterate.Array\n  value={[\n    {\n      accountName: 'Brukskonto',\n      accountNumber: '90901134567',\n    },\n    {\n      accountName: 'Sparekonto',\n      accountNumber: '90901156789',\n    },\n  ]}\n  onChange={(value) => console.log('onChange', value)}\n>\n  <Field.Composition>\n    <Field.BankAccountNumber itemPath=\"/accountNumber\" />\n    <Field.String label=\"Account name\" itemPath=\"/accountName\" />\n  </Field.Composition>\n</Iterate.Array>\n"}),h=()=>(0,o.jsx)(a.Z,{children:"<Iterate.Array\n  value={['foo', 'bar']}\n  onChange={(value) => console.log('onChange', value)}\n>\n  {(elementValue) => <Field.String value={elementValue} />}\n</Iterate.Array>\n"}),I=()=>(0,o.jsx)(a.Z,{children:"<Iterate.Array\n  value={[\n    {\n      num: 1,\n      txt: 'One',\n    },\n    {\n      num: 2,\n      txt: 'Two',\n    },\n  ]}\n  onChange={(value) => console.log('onChange', value)}\n>\n  {({ num, txt }) => (\n    <Field.Composition width=\"large\">\n      <Field.Number value={num} width=\"small\" />\n      <Field.String value={txt} width={false} />\n    </Field.Composition>\n  )}\n</Iterate.Array>\n"}),p=()=>(0,o.jsx)(a.Z,{"data-visual-test":"animated-container",children:'<Form.Handler\n  data={{\n    avengers: [\n      {\n        nickname: \'Iron Man\',\n        firstName: \'Tony\',\n        lastName: \'Stark\',\n      },\n      {\n        nickname: \'Captain America\',\n        firstName: \'Steve\',\n        lastName: \'Rogers\',\n      },\n    ],\n  }}\n  onChange={(data) => console.log(\'DataContext/onChange\', data)}\n>\n  <Flex.Stack>\n    <Form.MainHeading>Avengers</Form.MainHeading>\n\n    <Card stack>\n      <Iterate.Array\n        path="/avengers"\n        onChange={(value) => console.log(\'Iterate/onChange\', value)}\n      >\n        <Iterate.AnimatedContainer\n          title={\n            <Value.String\n              label={false}\n              itemPath="/nickname"\n              placeholder="A Nick name"\n            />\n          }\n        >\n          <Field.Name\n            itemPath="/nickname"\n            width="medium"\n            label="Nick name"\n          />\n\n          <Field.Composition>\n            <Field.Name.First itemPath="/firstName" width="medium" />\n            <Field.Name.Last itemPath="/lastName" width="medium" />\n          </Field.Composition>\n\n          <Iterate.Toolbar>\n            <Iterate.RemoveButton />\n          </Iterate.Toolbar>\n        </Iterate.AnimatedContainer>\n      </Iterate.Array>\n\n      <Iterate.PushButton\n        text="Add another avenger"\n        path="/avengers"\n        pushValue={{}}\n      />\n    </Card>\n  </Flex.Stack>\n</Form.Handler>\n'}),f=()=>(0,o.jsx)(a.Z,{"data-visual-test":"view-and-edit-container",noInline:!0,children:'const MyEditItemForm = () => {\n  return (\n    <Field.Composition>\n      <Field.Name.First itemPath="/firstName" width="medium" />\n      <Field.Name.Last itemPath="/lastName" width="medium" required />\n    </Field.Composition>\n  )\n}\nconst MyEditItem = () => {\n  return (\n    <Iterate.EditContainer\n      title="Edit account holder {itemNo}"\n      titleWhenNew="New account holder {itemNo}"\n    >\n      <MyEditItemForm />\n    </Iterate.EditContainer>\n  )\n}\nconst MyViewItem = () => {\n  const item = Iterate.useItem()\n  console.log(\'index:\', item.index)\n  return (\n    <Iterate.ViewContainer title="Account holder {itemNo}">\n      <Value.SummaryList>\n        <Value.Name.First itemPath="/firstName" showEmpty />\n        <Value.Name.Last itemPath="/lastName" placeholder="-" />\n      </Value.SummaryList>\n    </Iterate.ViewContainer>\n  )\n}\nconst CreateNewEntry = () => {\n  return (\n    <Iterate.PushContainer\n      path="/accounts"\n      title="New account holder"\n      openButton={\n        <Iterate.PushContainer.OpenButton text="Add another account" />\n      }\n      showOpenButtonWhen={(list) => list.length > 0}\n    >\n      <MyEditItemForm />\n    </Iterate.PushContainer>\n  )\n}\nconst MyForm = () => {\n  return (\n    <Form.Handler\n      data={{\n        accounts: [\n          {\n            firstName: \'Tony\',\n            lastName: \'Rogers\',\n          },\n        ],\n      }}\n      onChange={(data) => console.log(\'DataContext/onChange\', data)}\n      onSubmit={async (data) => console.log(\'onSubmit\', data)}\n    >\n      <Flex.Stack>\n        <Form.MainHeading>Accounts</Form.MainHeading>\n\n        <Card stack>\n          <Iterate.Array path="/accounts">\n            <MyViewItem />\n            <MyEditItem />\n          </Iterate.Array>\n\n          <CreateNewEntry />\n        </Card>\n\n        <Form.SubmitButton variant="send" />\n      </Flex.Stack>\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n'}),y=()=>(0,o.jsx)(a.Z,{children:'<Form.Handler\n  defaultData={{\n    count: 0,\n  }}\n>\n  <Flex.Stack>\n    <Field.Number path="/count" width="small" showStepControls />\n    <Iterate.Array\n      path="/items"\n      countPath="/count"\n      countPathTransform={({ value, index }) =>\n        Object.prototype.hasOwnProperty.call(value || {}, \'myObject\')\n          ? value\n          : {\n              myObject: index,\n            }\n      }\n    >\n      <Field.Number itemPath="/myObject" label="Item no. {itemNo}" />\n    </Iterate.Array>\n  </Flex.Stack>\n</Form.Handler>\n'}),b=()=>(0,o.jsx)(a.Z,{children:'<Form.Handler>\n  <Iterate.Array path="/myList" value={[{}]}>\n    <Flex.Stack>\n      <Field.Name.First className="firstName" itemPath="/firstName" />\n\n      <Form.Visibility\n        animate\n        visibleWhen={{\n          itemPath: \'/firstName\',\n          hasValue: (value) => Boolean(value),\n        }}\n      >\n        <Field.Name.Last className="lastName" itemPath="/lastName" />\n      </Form.Visibility>\n    </Flex.Stack>\n  </Iterate.Array>\n</Form.Handler>\n'}),g=()=>(0,o.jsx)(a.Z,{scope:{Iterate:r,Tools:i},noInline:!0,children:'const MyForm = () => {\n  const { getCountryNameByIso } = Value.SelectCountry.useCountry()\n  return (\n    <Form.Handler\n      onSubmit={async (data) => console.log(\'onSubmit\', data)}\n      onSubmitRequest={() => console.log(\'onSubmitRequest\')}\n    >\n      <Flex.Stack>\n        <Form.MainHeading>Statsborgerskap</Form.MainHeading>\n\n        <Card stack>\n          <Iterate.Array\n            path="/countries"\n            defaultValue={[null]}\n            validator={(arrayValue) => {\n              const findFirstDuplication = (arr) =>\n                arr.findIndex((e, i) => arr.indexOf(e) !== i)\n              const index = findFirstDuplication(arrayValue)\n              if (index > -1) {\n                return new Error(\n                  \'You can not have duplicate items: \' +\n                    getCountryNameByIso(String(arrayValue.at(index))),\n                )\n              }\n            }}\n          >\n            <Iterate.ViewContainer toolbarVariant="minimumOneItem">\n              <Value.SelectCountry\n                label="Land du er statsborger i"\n                itemPath="/"\n              />\n            </Iterate.ViewContainer>\n\n            <Iterate.EditContainer toolbarVariant="minimumOneItem">\n              <Field.SelectCountry\n                label="Land du er statsborger i"\n                itemPath="/"\n                required\n              />\n            </Iterate.EditContainer>\n          </Iterate.Array>\n\n          <Iterate.PushButton\n            path="/countries"\n            pushValue={null}\n            text="Legg til flere statsborgerskap"\n          />\n        </Card>\n\n        <Form.SubmitButton variant="send" />\n\n        <Tools.Log />\n      </Flex.Stack>\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n'}),C=()=>(0,o.jsx)(a.Z,{hideCode:!0,children:'<Iterate.Array value={[\'foo\']}>\n  <Iterate.ViewContainer toolbarVariant="minimumOneItem">\n    View Content\n  </Iterate.ViewContainer>\n  <Iterate.EditContainer toolbarVariant="minimumOneItem">\n    Edit Content\n  </Iterate.EditContainer>\n</Iterate.Array>\n'}),v=()=>(0,o.jsx)(a.Z,{hideCode:!0,children:"<Iterate.Array value={['foo', 'bar']}>\n  <Iterate.ViewContainer toolbarVariant=\"minimumOneItem\">\n    View Content\n  </Iterate.ViewContainer>\n  <Iterate.EditContainer toolbarVariant=\"minimumOneItem\">\n    Edit Content\n  </Iterate.EditContainer>\n</Iterate.Array>\n"}),F=()=>(0,o.jsx)(a.Z,{children:'<Form.Handler\n  defaultData={{\n    items: [\'foo\'],\n  }}\n  onSubmit={async () => console.log(\'onSubmit\')}\n>\n  <Card stack>\n    <Iterate.Array\n      path="/items"\n      validator={(arrayValue) => {\n        if (!(arrayValue && arrayValue.length > 1)) {\n          return new Error(\'You need at least two items\')\n        }\n      }}\n      animate\n    >\n      <Flex.Horizontal align="flex-end">\n        <Field.String\n          label="Item no. {itemNo}"\n          itemPath="/"\n          width="medium"\n          size="medium"\n        />\n        <Iterate.RemoveButton />\n      </Flex.Horizontal>\n    </Iterate.Array>\n\n    <Iterate.PushButton top path="/items" pushValue={null} text="Add" />\n    <Form.SubmitButton />\n  </Card>\n</Form.Handler>\n'})},38734:function(n,e,t){t.d(e,{Z:function(){return u}});var a=t(84616),r=t(2784),i=t(2394),o=t(21068);const l=["minLength","maxLength","pattern","description","min","max","multipleOf","exclusiveMinimum","exclusiveMaximum"];function u(n){const{generateRef:e,filterData:t,log:u,children:m}=n||{},{fieldPropsRef:s,valuePropsRef:d,data:c,hasContext:h}=(0,r.useContext)(o.Z),I=(0,r.useRef)({});I.current=c;const p=(0,r.useCallback)((()=>{const n=Object.entries((null==s?void 0:s.current)||{}).reduce(((n,e)=>{let[r,o]=e;if(r.startsWith("/")){const e=r.substring(1),u=e.split("/"),m=u.length,s={type:o.valueType||"string"};for(const n of l)o[n]&&(s[n]=o[n]);if(m>1){const e=[""];for(const r of u){e.push(r);const l=e.join("/properties/"),m=e.length-1===u.length,d=i.e$(n,l)?i.U2(n,l):null,c=m?s:d;if(m)!1!==(null==t?void 0:t[l])&&i.t8(n,l,c);else{const e={type:"object",...d},r=[];o.required&&r.push(u.at(-1)),null!=d&&d.required&&r.push.apply(r,(0,a.Z)(d.required)),r.length>0&&(e.required=r),!1!==(null==t?void 0:t[l])&&i.t8(n,l,e)}}}else!1!==(null==t?void 0:t[r])&&i.t8(n.properties,r,s),o.required&&n.required.push(e)}return n}),{type:"object",properties:{},required:[]}),e=Object.entries((null==s?void 0:s.current)||{}).reduce(((n,e)=>{let[t,a]=e;if(t.startsWith("/")){const e={};for(const n in a)void 0!==a[n]&&"function"!=typeof a[n]&&(e[n]=a[n]);i.t8(n,t,e)}return n}),{}),r=Object.entries((null==d?void 0:d.current)||{}).reduce(((n,e)=>{let[t,a]=e;if(t.startsWith("/")){const e={};for(const n in a)void 0!==a[n]&&"function"!=typeof a[n]&&(e[n]=a[n]);i.t8(n,t,e)}return n}),{});return 0===n.required.length&&delete n.required,{schema:n,data:I.current,propsOfFields:e,propsOfValues:r}}),[s,t,d]);return h&&(u&&console.log(p().schema),e&&(e.current=p)),m}},10454:function(n,e,t){t.d(e,{Z:function(){return o}});var a=t(2784),r=t(2394),i=t(21068);function o(n){const{log:e,generateRef:t,filterData:o,children:l}=n||{},{fieldPropsRef:u,valuePropsRef:m,data:s,hasContext:d}=(0,a.useContext)(i.Z);(0,a.useRef)({}).current=s;const c=(0,a.useCallback)((()=>{const n=Object.entries((null==u?void 0:u.current)||{}).reduce(((n,e)=>{let[t,i]=e;if(t.startsWith("/")){const e={};for(const n in i)void 0===i[n]||"function"==typeof i[n]||(0,a.isValidElement)(i[n])||(e[n]=i[n]);!1!==(null==o?void 0:o[t])&&r.t8(n,t,e)}return n}),{}),e=Object.entries((null==m?void 0:m.current)||{}).reduce(((n,e)=>{let[t,i]=e;if(t.startsWith("/")){const e={};for(const n in i)void 0===i[n]||"function"==typeof i[n]||(0,a.isValidElement)(i[n])||(e[n]=i[n]);!1!==(null==o?void 0:o[t])&&r.t8(n,t,e)}return n}),{});return{propsOfFields:n,propsOfValues:e}}),[u,o,m]);return d&&(e&&console.log(c()),t&&(t.current=c)),l}},16511:function(n,e,t){t.r(e),t.d(e,{GenerateSchema:function(){return a.Z},ListAllProps:function(){return r.Z},Log:function(){return s}});var a=t(38734),r=t(10454),i=t(2784),o=t(21068),l=t(54109).Z,u=t(52322);function m(n){const{data:e}=(0,i.useContext)(o.Z);return(0,u.jsx)(l,{element:"output",backgroundColor:"sand-yellow",style:{maxWidth:"80vw"},innerSpace:!0,...n,children:(0,u.jsxs)("pre",{children:[JSON.stringify(e,null,2)," "]})})}m._supportsSpacingProps=!0;var s=m}}]);
//# sourceMappingURL=2492c41b40c490582263866a246174135beb2940-c58706f8c34e79deeb38.js.map