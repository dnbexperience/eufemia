{"version":3,"file":"30bc6722c824d6624ce41142789197a321c8c8ad-3b2e8e19a1afcb83bc4e.js","mappings":"8MAMA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBT,EAAMU,YAM/B,OALKC,GAAUC,EAAqB,YAAY,GAC3CD,EAAAA,kCAA2CC,EAAqB,6CAA6C,GAC7GD,EAAAA,+CAAwDC,EAAqB,0DAA0D,GACvID,EAAAA,kBAA2BC,EAAqB,6BAA6B,GAC7ED,EAAAA,yBAAkCC,EAAqB,oCAAoC,IACzFC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKf,EAAYG,GAAI,CAC9BW,SAAU,UACR,MAAMC,EAAAA,EAAAA,KAAKf,EAAYI,GAAI,CAC7BU,SAAU,6BACR,MAAMF,EAAAA,EAAAA,MAAMZ,EAAYK,EAAG,CAC7BS,SAAU,CAAC,yEAAyEC,EAAAA,EAAAA,KAAKf,EAAYM,EAAG,CACtGU,KAAM,0BACNF,SAAU,SACR,eACF,MAAMC,EAAAA,EAAAA,KAAKE,EAAAA,SAAU,CAAC,GAAI,MAAMF,EAAAA,EAAAA,KAAKf,EAAYI,GAAI,CACvDU,SAAU,6BACR,MAAMC,EAAAA,EAAAA,KAAKf,EAAYK,EAAG,CAC5BS,SAAU,iGACR,MAAMC,EAAAA,EAAAA,KAAKG,EAAAA,GAAoB,CAAC,GAAI,MAAMN,EAAAA,EAAAA,MAAMZ,EAAYI,GAAI,CAClEU,SAAU,CAAC,2BAA2BC,EAAAA,EAAAA,KAAKf,EAAYM,EAAG,CACxDU,KAAM,sBACNF,SAAU,SACR,YACF,MAAMC,EAAAA,EAAAA,KAAKL,EAAAA,wBAAkC,CAAC,GAAI,MAAME,EAAAA,EAAAA,MAAMZ,EAAYI,GAAI,CAChFU,SAAU,CAAC,eAAeC,EAAAA,EAAAA,KAAKf,EAAYM,EAAG,CAC5CU,KAAM,sBACNF,SAAU,SACR,YACF,MAAMF,EAAAA,EAAAA,MAAMZ,EAAYK,EAAG,CAC7BS,SAAU,CAAC,qBAAqBC,EAAAA,EAAAA,KAAKf,EAAYO,KAAM,CACrDO,SAAU,cACR,mBACF,MAAMC,EAAAA,EAAAA,KAAKL,EAAAA,iCAA2C,CAAC,GAAI,MAAME,EAAAA,EAAAA,MAAMZ,EAAYI,GAAI,CACzFU,SAAU,CAAC,eAAeC,EAAAA,EAAAA,KAAKf,EAAYM,EAAG,CAC5CU,KAAM,2BACNF,SAAU,cACR,YACF,MAAMF,EAAAA,EAAAA,MAAMZ,EAAYK,EAAG,CAC7BS,SAAU,CAAC,qCAAqCC,EAAAA,EAAAA,KAAKf,EAAYO,KAAM,CACrEO,SAAU,cACR,wDACF,MAAMC,EAAAA,EAAAA,KAAKL,EAAAA,8CAAwD,CAAC,GAAI,MAAME,EAAAA,EAAAA,MAAMZ,EAAYI,GAAI,CACtGU,SAAU,EAACC,EAAAA,EAAAA,KAAKf,EAAYM,EAAG,CAC7BU,KAAM,sBACNF,SAAU,SACR,cAAcC,EAAAA,EAAAA,KAAKf,EAAYM,EAAG,CACpCU,KAAM,2BACNF,SAAU,aAEV,MAAMC,EAAAA,EAAAA,KAAKL,EAAAA,iBAA2B,CAAC,KAE/C,CAQA,SAASC,EAAqBQ,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,CAHA,UANA,SAAoBpB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOuB,QAASC,GAAatB,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,MAAsBT,EAAMU,YAC3E,OAAOc,GAAYR,EAAAA,EAAAA,KAAKQ,EAAWtB,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1De,UAAUC,EAAAA,EAAAA,KAAKjB,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,+YClDO,MAAMyB,EAA0BA,KAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,wCAAAZ,SAAA,gYAuB1Ba,EAA+BA,KAAAF,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,sCAAAE,UAAA,EAAAd,SAAA,ohCAyB/Be,EAAgCA,KAAAJ,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,uCAAAI,MAAA,CAC7CC,KACA,KAAAjB,SAAA,spBAsBakB,EAAwBA,KAAAP,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,sCAAAZ,SAAA,irBA0BxBmB,EAAwBA,KACnCR,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,8CAAAI,MAAA,CACFI,QAAA,IACAC,aACA,KAAArB,SAAA,maA6BasB,EAAyBA,KACpCX,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,uCAAAZ,SAAA,6YAyBWuB,EAA2BA,KAAAZ,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,yCAAAZ,SAAA,kaAwB3BwB,EAA8BA,KAAAb,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,4CAAAZ,SAAA,yWAsB9ByB,EAAyBA,KAAAd,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,uCAAAZ,SAAA,sNAWzBI,EAAqBA,KAChCO,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAc,WAAA,QAAAC,UAAA,EAAA3B,SAAA,80DAmEK,SAAS4B,IACd,MAAMC,EAAcC,EAAAA,YAEpB,OACEhC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CACLC,OAAO,QACPC,QAAQ,YACRC,QAASA,IAAML,EAAYM,UAAUnC,SACtC,eAGDF,EAAAA,EAAAA,MAACsC,EAAAA,EAAUC,MAAK,CACdC,UAAQ,EACRC,iBAAe,EACfC,qBAAsBX,EAAY7B,SAAA,EAElCF,EAAAA,EAAAA,MAACsC,EAAAA,EAAS,CAAApC,SAAA,EACRC,EAAAA,EAAAA,KAACmC,EAAAA,EAAUK,OAAM,CAAAzC,SAAC,uBAClBC,EAAAA,EAAAA,KAACmC,EAAAA,EAAUM,QAAO,CAAA1C,UAChBC,EAAAA,EAAAA,KAAC0C,EAAAA,EAAC,CAAA3C,SAAC,gLAOPF,EAAAA,EAAAA,MAACsC,EAAAA,EAAS,CAAApC,SAAA,EACRC,EAAAA,EAAAA,KAACmC,EAAAA,EAAUK,OAAM,CAAAzC,SAAC,uBAClBC,EAAAA,EAAAA,KAACmC,EAAAA,EAAUM,QAAO,CAAA1C,UAChBC,EAAAA,EAAAA,KAAC0C,EAAAA,EAAC,CAAA3C,SAAC,6EAMPF,EAAAA,EAAAA,MAACsC,EAAAA,EAAS,CAAApC,SAAA,EACRC,EAAAA,EAAAA,KAACmC,EAAAA,EAAUK,OAAM,CAAAzC,SAAC,uBAClBC,EAAAA,EAAAA,KAACmC,EAAAA,EAAUM,QAAO,CAAA1C,UAChBC,EAAAA,EAAAA,KAAC0C,EAAAA,EAAC,CAAA3C,SAAC,iFASf,C,oXC/UO,MAAM4C,EAAUA,KACrB3C,EAAAA,EAAAA,KAAAW,EAAAA,EAAA,CAAAZ,SAAA,4RAgBW6C,EAAYA,KACvB5C,EAAAA,EAAAA,KAAAW,EAAAA,EAAA,wCAAAe,UAAA,EAAA3B,SAAA,iwBAiDWG,EAAWA,KACtBF,EAAAA,EAAAA,KAAAW,EAAAA,EAAA,uCAAAZ,SAAA,mYA6BW8C,EAAWA,KACtB7C,EAAAA,EAAAA,KAAAW,EAAAA,EAAA,uCAAAZ,SAAA,+iBA2CW+C,EAAQA,KACnB9C,EAAAA,EAAAA,KAAAW,EAAAA,EAAA,wCAAAZ,SAAA,+JAYWgD,EAAiBA,KAC5B/C,EAAAA,EAAAA,KAAAW,EAAAA,EAAA,CAAAZ,SAAA,iKAYWiD,EAAmBA,KAC9BhD,EAAAA,EAAAA,KAAAW,EAAAA,EAAA,CAAAZ,SAAA,mMAYWkD,EAA2BA,KACtCjD,EAAAA,EAAAA,KAAAW,EAAAA,EAAA,CAAAuC,aAAA,EAAAnD,SAAA,2KAYWoD,EAAoBA,KAC/BnD,EAAAA,EAAAA,KAAAW,EAAAA,EAAA,0CAAAZ,SAAA,o6B,s7BC7KK,MAAMqD,EAAmBA,KAC9B1C,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAI,MAAA,CACFsC,MAAA,EACAC,KACA,GAAAzC,UAAA,EAAAd,SAAA,ufA2BawD,EAAS,CACpB,CAAE9B,WAAY,WACd,CAAEA,WAAY,WACd,CAAEA,WAAY,WACd,CAAEA,WAAY,YAGH+B,EAAmCA,KAC9C9C,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAI,MAAA,CACFwC,SACAE,YACA,KAAA5C,UAAA,sCAAAd,SAAA,8mBAyBa2D,EAAgDA,KAC3DhD,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAE,UAAA,EAAAE,MAAA,CACFwC,SACAE,YAAA,IACAJ,MAAA,EACAM,mBAAA,KACAC,eACA,gDAAAlC,UAAA,EAAA3B,SAAA,69CA2DM8D,EAAiBA,KACrB,MAAOC,EAAYC,GAAYlC,EAAAA,SACX,oBAAXmC,OAAyBA,OAAOF,WAAa,GAWtD,OARAjC,EAAAA,WAAgB,KACd,MAAMoC,EAAgBA,KACpBF,EAASC,OAAOF,WAAW,EAG7B,OADAE,OAAOE,iBAAiB,SAAUD,GAC3B,IAAMD,OAAOG,oBAAoB,SAAUF,EAAc,GAC/D,IAEI,CAAEH,aAAY,EAGVM,EAAqBA,KAAA1D,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAI,MAAA,CAClCsD,SAAA,IACAR,kBACAhD,UAAA,EAAAa,UAAA,EAAA3B,SAAA,wbAqBauE,EAAwBA,KAAA5D,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAI,MAAA,CACrCwD,WAAA,IACAC,cACA,KAAA3D,UAAA,EAAAa,UAAA,EAAA3B,SAAA,62BAiDa0E,EAA0BA,KACrC/D,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAE,UAAA,EAAAE,MAAA,CACF0C,YAAA,IACAF,UACAxD,SAAA,uyBAqDa2E,EAA2BA,KAAAhE,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAZ,SAAA,wOAY3B4E,EAA0BA,KAAAjE,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAZ,SAAA,mXAgB1B6E,EAA0BA,KAAAlE,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAZ,SAAA,wXAgBjC8E,EAAgB,SAAAC,GAIV,IAJW,UACrBC,EAAY,WAAU,SACtBC,GAAW,EAAK,UAChBC,GAAY,QACb,IAAAH,EAAG,CAAC,EAACA,EACJ,MAAMI,EAA8B,CAClCC,KAAoB,eAAdJ,EAA6B,QAAU,KAC7CK,IAAmB,eAAdL,EAA6B,QAAU,MAG9C,IAAIM,EAAiC,CACnCC,WAAY,cACZC,SAAU,YACVC,aAAc,gBACdC,SAAU,WACVC,MAAO,QACPC,WAAY,eACZC,aAAc,UACdC,kBAAmB,gBACnBC,OAAQ,SACRC,MAAO,SACPC,SAAU,YACVC,OAAQ,WAGNhB,IACFI,EAASnG,OAAOgH,QAAQb,GAAQc,QAAO,CAACC,EAAGC,KAAW,IAARC,GAAED,EAE9C,OADAD,EAAIE,GAAK,GACFF,CAAG,GACT,CAAC,IAGN,MAAMG,EAAaA,KACjB1G,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGiF,IACCnF,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACwG,EAAAA,EAAK,IAAKtB,EAAQuB,QAAM,EAAA1G,UACvBF,EAAAA,EAAAA,MAAA,KAAG6G,UAAU,QAAO3G,SAAA,CAAC,YACT,KACVC,EAAAA,EAAAA,KAAC2G,EAAAA,GAAW,CACVC,KAAK,OACLC,KAAK,YACD3B,EACJ4B,MAAO,CAAEC,OAAQ,UAGf,WAIZ/G,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CAACkF,KAAK,YAAa9B,KAC1BlF,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CAAC8E,KAAK,SAAU1B,KACvBlF,EAAAA,EAAAA,KAACiH,EAAAA,GAAK,CAACC,MAAO7B,EAAOU,SAAWb,KAChClF,EAAAA,EAAAA,KAACmH,EAAAA,EAAQ,CACPD,MAAO7B,EAAOE,SACd6B,KAAM,CAAC,SAAU,SAAU,aACvBlC,KAENlF,EAAAA,EAAAA,KAACqH,EAAAA,EAAY,CACXH,MAAO7B,EAAOG,aACd4B,KAAM,CAAC,SAAU,SAAU,aACvBlC,KAENlF,EAAAA,EAAAA,KAACsH,EAAAA,EAAU,CAACJ,MAAO7B,EAAOC,cAAgBJ,KAC1ClF,EAAAA,EAAAA,KAAC2G,EAAAA,GAAW,CAACC,KAAK,OAAOC,KAAK,YAAa3B,KAC3ClF,EAAAA,EAAAA,KAACuH,EAAAA,EAAQ,CAACL,MAAO7B,EAAOI,YAAcP,KACtClF,EAAAA,EAAAA,KAACwH,EAAAA,EAAK,CAACN,MAAO7B,EAAOK,SAAWR,KAChCrF,EAAAA,EAAAA,MAAC2H,EAAAA,EAAMpF,MAAK,CAAC8E,MAAO7B,EAAOM,cAAgBT,EAAMnF,SAAA,EAC/CC,EAAAA,EAAAA,KAACwH,EAAAA,EAAK,CAACN,MAAO7B,EAAOK,MAAO+B,MAAM,OAClCzH,EAAAA,EAAAA,KAACwH,EAAAA,EAAK,CAACN,MAAO7B,EAAOK,MAAO+B,MAAM,UAEpCzH,EAAAA,EAAAA,KAAC0H,EAAAA,EAAY,CACXR,MAAO7B,EAAOO,aACdoB,KAAK,YACD9B,KAENrF,EAAAA,EAAAA,MAAC6H,EAAAA,EAAatF,MAAK,CAAC8E,MAAO7B,EAAOQ,qBAAuBX,EAAMnF,SAAA,EAC7DC,EAAAA,EAAAA,KAAC0H,EAAAA,EAAY,CAACV,KAAK,WAAWS,MAAM,OACpCzH,EAAAA,EAAAA,KAAC0H,EAAAA,EAAY,CAACV,KAAK,WAAWS,MAAM,UAEtCzH,EAAAA,EAAAA,KAAC2H,EAAAA,EAAM,CAACT,MAAO7B,EAAOS,UAAYZ,KAClClF,EAAAA,EAAAA,KAAC4H,EAAAA,EAAQ,CAACV,MAAO7B,EAAOW,SAAU6B,KAAK,OAAQ3C,KAC/ClF,EAAAA,EAAAA,KAAA,OAAK8G,MAAO,CAAEgB,QAAS,eAAgB/H,UACrCC,EAAAA,EAAAA,KAAC+H,EAAAA,EAAM,CAACb,MAAO7B,EAAOY,OAAQwB,MAAO,MAAQvC,SAKnD,MAAkB,eAAdH,GAEA/E,EAAAA,EAAAA,KAACgI,EAAAA,EAAe,CAAClB,MAAO,CAAEmB,QAAS,OAAQC,WAAY,UAAWnI,UAChEC,EAAAA,EAAAA,KAACuG,EAAU,OAIfA,EAAW4B,uBAAwB,GAEjCnI,EAAAA,EAAAA,KAACgI,EAAAA,EAAa,CAAClB,MAAO,CAAEmB,QAAS,QAASlI,UACxCC,EAAAA,EAAAA,KAACuG,EAAU,MAInB,EAEa6B,EACXpJ,IAEAgB,EAAAA,EAAAA,KAAA,OAAK,mBAAiB,wCAAyChB,EAAKe,UAClEC,EAAAA,EAAAA,KAAC6E,EAAa,CAACE,UAAU,eAIhBsD,EACXrJ,IAEAgB,EAAAA,EAAAA,KAAA,OACE,mBAAiB,+CACbhB,EAAKe,UAETC,EAAAA,EAAAA,KAACsI,EAAAA,EAAQ,CAACC,YAAa,CAAEC,gBAAiB,YAAazI,UACrDC,EAAAA,EAAAA,KAAC6E,EAAa,CAACE,UAAU,iBAKlB0D,EACXzJ,IAEAgB,EAAAA,EAAAA,KAAA,OAAK,mBAAiB,0CAA2ChB,EAAKe,UACpEC,EAAAA,EAAAA,KAAC0I,EAAAA,EAAU,CAAA3I,UACTC,EAAAA,EAAAA,KAAC6E,EAAa,CAACE,UAAU,kB,sGC1ehB,SAAStB,EAAW4C,GAAkC,IAAjC,UAAEK,EAAY,QAAS1H,GAAOqH,EAChE,OACErG,EAAAA,EAAAA,KAACwG,EAAAA,EAAK,CACJE,UAAWiC,IAAW,yBAA0BjC,MAC5C1H,GAGV,CAEAyE,EAAY0E,uBAAwB,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/layout/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/accordion/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/card/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/layout/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/utils/TestElement/TestElement.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nimport {WithGrid} from 'Docs/uilib/components/card/Examples';\nimport {AccordionInColumns} from 'Docs/uilib/components/accordion/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    a: \"a\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.HorizontalFlexItemResponsiveSize) _missingMdxReference(\"Examples.HorizontalFlexItemResponsiveSize\", true);\n  if (!Examples.HorizontalFlexItemResponsiveSizeCustomColumns) _missingMdxReference(\"Examples.HorizontalFlexItemResponsiveSizeCustomColumns\", true);\n  if (!Examples.LayoutComponents) _missingMdxReference(\"Examples.LayoutComponents\", true);\n  if (!Examples.ResponsiveGridContainer) _missingMdxReference(\"Examples.ResponsiveGridContainer\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Horizontal aligned Cards\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Grid wraps the Cards nicely on smaller screens. More examples in the \", _jsx(_components.a, {\n        href: \"/uilib/components/card/\",\n        children: \"Card\"\n      }), \" section.\"]\n    }), \"\\n\", _jsx(WithGrid, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Accordion in two columns\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This is a demo of how to outline accordions in two columns, including the correct tab order.\"\n    }), \"\\n\", _jsx(AccordionInColumns, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Responsive application \", _jsx(_components.a, {\n        href: \"/uilib/layout/grid/\",\n        children: \"Grid\"\n      }), \" usage\"]\n    }), \"\\n\", _jsx(Examples.ResponsiveGridContainer, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Responsive \", _jsx(_components.a, {\n        href: \"/uilib/layout/flex/\",\n        children: \"Flex\"\n      }), \" usage\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"With the default \", _jsx(_components.code, {\n        children: \"sizeCount\"\n      }), \" of 12 parts.\"]\n    }), \"\\n\", _jsx(Examples.HorizontalFlexItemResponsiveSize, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Customized \", _jsx(_components.a, {\n        href: \"/uilib/layout/flex/item/\",\n        children: \"Flex.Item\"\n      }), \" sizes\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"With a custom amount of 4 parts (\", _jsx(_components.code, {\n        children: \"sizeCount\"\n      }), \") as well as custom breakpoints and media queries.\"]\n    }), \"\\n\", _jsx(Examples.HorizontalFlexItemResponsiveSizeCustomColumns, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [_jsx(_components.a, {\n        href: \"/uilib/layout/flex/\",\n        children: \"Flex\"\n      }), \" usage in \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/\",\n        children: \"Forms\"\n      })]\n    }), \"\\n\", _jsx(Examples.LayoutComponents, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport {\n  bell,\n  add_medium as AddIcon,\n  subtract_medium as SubtractIcon,\n} from '@dnb/eufemia/src/icons'\nimport {\n  Accordion,\n  P,\n  Icon,\n  Grid,\n  Flex,\n  Heading,\n  Button,\n} from '@dnb/eufemia/src'\n\nexport const AccordionDefaultExample = () => (\n  <ComponentBox data-visual-test=\"accordion-default\">\n    <Accordion\n      expanded\n      remember_state\n      id=\"single-accordion\"\n      title=\"Accordion title\"\n    >\n      <P>Accordion content</P>\n    </Accordion>\n    <Accordion.Provider\n      top\n      remember_state\n      icon=\"chevron_down\"\n      icon_position=\"right\"\n    >\n      <Accordion id=\"single-provider-accordion\" title=\"Accordion title\">\n        <P>Accordion content</P>\n      </Accordion>\n    </Accordion.Provider>\n  </ComponentBox>\n)\n\nexport const AccordionLargeContentExample = () => (\n  <ComponentBox data-visual-test=\"accordion-large\" hideCode>\n    <Accordion\n      expanded\n      bottom=\"large\"\n      title=\"Large content with long titleScelerisque eget cubilia tempus ipsum aenean dolor suscipit egestas potenti at eleifend platea interdum magnis amet molestie sem faucibus netus \"\n    >\n      <P>\n        Hendrerit dictum elit facilisis aliquet eleifend potenti leo nec\n        praesent sollicitudin elementum scelerisque ridiculus neque nisi\n        risus et habitant torquent nam pellentesque dictumst porttitor\n        accumsan a nibh fringilla facilisi lacus sagittis mauris libero\n        tellus justo ultricies tempor viverra sodales vestibulum proin\n        tempus lorem cubilia at velit sociis sit malesuada class\n        consectetur turpis metus vulputate tortor cum nisl ornare ligula\n        platea quam gravida sapien penatibus ad curae varius hac ultrices\n        ipsum felis vehicula fermentum rutrum parturient congue sed vel\n        magnis laoreet donec id consequat augue mi semper volutpat urna in\n        condimentum luctus cursus fames dignissim magna suspendisse\n        bibendum mus natoque diam\n      </P>\n    </Accordion>\n  </ComponentBox>\n)\n\nexport const AccordionCustomisationExample = () => (\n  <ComponentBox data-visual-test=\"accordion-custom\" scope={{ bell }}>\n    <Accordion group=\"unique-id\" left_component={<Icon icon={bell} />}>\n      <Accordion.Header>Accordion title</Accordion.Header>\n      <Accordion.Content>\n        <P>\n          Sociis sapien sociosqu vel sollicitudin accumsan laoreet gravida\n          himenaeos nostra mollis volutpat bibendum convallis cum\n          condimentum dictumst blandit rutrum vehicula\n        </P>\n      </Accordion.Content>\n    </Accordion>\n    <Accordion top expanded={true} group=\"unique-id\">\n      <Accordion.Header>Accordion title</Accordion.Header>\n      <Accordion.Content>\n        <P>\n          Nec sit mattis natoque interdum sagittis cubilia nibh nullam\n          etiam\n        </P>\n      </Accordion.Content>\n    </Accordion>\n  </ComponentBox>\n)\n\nexport const AccordionGroupExample = () => (\n  <ComponentBox data-visual-test=\"accordion-group\">\n    <Accordion.Group expanded allow_close_all>\n      <Accordion expanded={false}>\n        <Accordion.Header>Accordion title</Accordion.Header>\n        <Accordion.Content top>\n          <P>\n            Sociis sapien sociosqu vel sollicitudin accumsan laoreet\n            gravida himenaeos nostra mollis volutpat bibendum convallis cum\n            condimentum dictumst blandit rutrum vehicula\n          </P>\n        </Accordion.Content>\n      </Accordion>\n      <Accordion top>\n        <Accordion.Header>Accordion title</Accordion.Header>\n        <Accordion.Content>\n          <P>\n            Nec sit mattis natoque interdum sagittis cubilia nibh nullam\n            etiam\n          </P>\n        </Accordion.Content>\n      </Accordion>\n    </Accordion.Group>\n  </ComponentBox>\n)\n\nexport const AccordionPlainVariant = () => {\n  return (\n    <ComponentBox\n      data-visual-test=\"accordion-variant-plain\"\n      scope={{ AddIcon, SubtractIcon }}\n    >\n      <Accordion\n        variant=\"plain\"\n        title=\"Accordion with plain variant\"\n        icon={{\n          closed: AddIcon,\n          expanded: SubtractIcon,\n        }}\n        icon_position=\"right\"\n      >\n        <P>content</P>\n      </Accordion>\n      <Accordion\n        variant=\"plain\"\n        title=\"Accordion with plain variant\"\n        icon={{\n          closed: AddIcon,\n          expanded: SubtractIcon,\n        }}\n        icon_position=\"right\"\n        expanded\n      >\n        <P>content</P>\n      </Accordion>\n    </ComponentBox>\n  )\n}\n\nexport const AccordionNestedExample = () => {\n  return (\n    <ComponentBox data-visual-test=\"accordion-nested\">\n      <Accordion id=\"nested-accordion\" title=\"Accordion\" expanded space>\n        <P space={0}>Content A</P>\n        <Accordion\n          id=\"nested-accordion-1\"\n          title=\"Accordion nested 1\"\n          space\n        >\n          <P space={0}>I'm nested 1</P>\n        </Accordion>\n\n        <P space={0}>Content B</P>\n        <Accordion\n          id=\"nested-accordion-2\"\n          title=\"Accordion nested 2\"\n          space\n        >\n          <P space={0}>I'm nested 2</P>\n        </Accordion>\n      </Accordion>\n    </ComponentBox>\n  )\n}\n\nexport const AccordionDisabledExample = () => (\n  <ComponentBox data-visual-test=\"accordion-disabled\">\n    <Accordion\n      expanded\n      disabled\n      remember_state\n      title=\"Disabled (expanded)\"\n    >\n      <P>I am expanded, but disabled, so I can't be closed</P>\n    </Accordion>\n    <Accordion.Provider\n      top\n      disabled\n      remember_state\n      icon=\"chevron_down\"\n      icon_position=\"right\"\n    >\n      <Accordion title=\"Disabled (closed)\">\n        <P>You can't see this text because I am disabled and closed.</P>\n      </Accordion>\n    </Accordion.Provider>\n  </ComponentBox>\n)\n\nexport const AccordionDescriptionExample = () => (\n  <ComponentBox data-visual-test=\"accordion-description\">\n    <Accordion\n      expanded\n      title=\"Accordion title\"\n      description=\"Accordion description\"\n    >\n      <P>Accordion content</P>\n    </Accordion>\n    <Accordion\n      top\n      icon=\"chevron_down\"\n      icon_position=\"right\"\n      id=\"description-provider-accordion\"\n      title=\"Accordion title\"\n      description=\"Accordion description\"\n    >\n      <P>Accordion content</P>\n    </Accordion>\n  </ComponentBox>\n)\n\nexport const AccordionFilledExample = () => (\n  <ComponentBox data-visual-test=\"accordion-filled\">\n    <Accordion expanded title=\"Accordion title\" variant=\"filled\">\n      <P>Accordion content</P>\n    </Accordion>\n    <Accordion top title=\"Accordion title\" variant=\"filled\">\n      <P>Accordion content</P>\n    </Accordion>\n  </ComponentBox>\n)\n\nexport const AccordionInColumns = () => {\n  return (\n    <ComponentBox background=\"white\">\n      {() => {\n        const items = [\n          <Accordion key=\"one\" variant=\"filled\">\n            <Accordion.Header>\n              Sit amet suscipit ipsum tincidunt id?\n            </Accordion.Header>\n            <Accordion.Content space>\n              <P>\n                Sociis sapien sociosqu vel sollicitudin accumsan laoreet\n                gravida himenaeos nostra mollis volutpat bibendum convallis\n                cum condimentum dictumst blandit rutrum vehicula\n              </P>\n            </Accordion.Content>\n          </Accordion>,\n          <Accordion key=\"two\" variant=\"filled\">\n            <Accordion.Header>\n              Cras eget quam eget tortor placerat viverra?\n            </Accordion.Header>\n            <Accordion.Content space>\n              <P>\n                Morbi condimentum odio ut enim vulputate, rutrum\n                ullamcorper sem vestibulum. Ut luctus tempus leo vel\n                finibus. Pellentesque ultrices interdum nisi, sit amet\n                suscipit ipsum tincidunt id. Praesent sodales vel eros ut\n                accumsan.\n              </P>\n            </Accordion.Content>\n          </Accordion>,\n          <Accordion key=\"three\" variant=\"filled\">\n            <Accordion.Header>\n              Nam porta nec ipsum id porta\n            </Accordion.Header>\n            <Accordion.Content space>\n              <P>\n                Nam porta nec ipsum id porta. Cras eget quam eget tortor\n                placerat viverra.\n              </P>\n            </Accordion.Content>\n          </Accordion>,\n        ]\n\n        return (\n          <>\n            <Heading size=\"large\">Accordion in columns</Heading>\n            <Grid.Container columns={2} columnGap=\"small\" rowGap=\"x-small\">\n              <Grid.Item\n                span={{ small: [1, 2], medium: [1, 1], large: [1, 1] }}\n              >\n                <Flex.Stack gap=\"x-small\">{items}</Flex.Stack>\n              </Grid.Item>\n              <Grid.Item\n                span={{ small: [1, 2], medium: [2, 2], large: [2, 2] }}\n              >\n                <Flex.Stack gap=\"x-small\">\n                  {[...items].reverse()}\n                </Flex.Stack>\n              </Grid.Item>\n            </Grid.Container>\n          </>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport function AccordionCloseAllInGroup() {\n  const collapseAll = React.createRef<() => void>()\n\n  return (\n    <>\n      <Button\n        bottom=\"large\"\n        variant=\"secondary\"\n        onClick={() => collapseAll.current()}\n      >\n        Close All\n      </Button>\n      <Accordion.Group\n        expanded\n        allow_close_all\n        collapseAllHandleRef={collapseAll}\n      >\n        <Accordion>\n          <Accordion.Header>Accordion title 1</Accordion.Header>\n          <Accordion.Content>\n            <P>\n              Sociis sapien sociosqu vel sollicitudin accumsan laoreet\n              gravida himenaeos nostra mollis volutpat bibendum convallis\n              cum condimentum dictumst blandit rutrum vehicula\n            </P>\n          </Accordion.Content>\n        </Accordion>\n        <Accordion>\n          <Accordion.Header>Accordion title 2</Accordion.Header>\n          <Accordion.Content>\n            <P>\n              Nec sit mattis natoque interdum sagittis cubilia nibh nullam\n              etiam\n            </P>\n          </Accordion.Content>\n        </Accordion>\n        <Accordion>\n          <Accordion.Header>Accordion title 3</Accordion.Header>\n          <Accordion.Content>\n            <P>\n              Nec sit mattis natoque interdum sagittis cubilia nibh nullam\n              etiam\n            </P>\n          </Accordion.Content>\n        </Accordion>\n      </Accordion.Group>\n    </>\n  )\n}\n","import ComponentBox from '../../../../shared/tags/ComponentBox'\nimport {\n  Button,\n  Card,\n  Flex,\n  Grid,\n  H2,\n  Hr,\n  P,\n  Section,\n  Table,\n  Td,\n  Th,\n  Tr,\n} from '@dnb/eufemia/src'\nimport { Field, Form } from '@dnb/eufemia/src/extensions/forms'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      <Card data-visual-test=\"layout-card-border\">\n        <P>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi\n          cursus pharetra elit in bibendum.\n        </P>\n        <P>\n          Praesent nunc ipsum, convallis eget convallis gravida, vehicula\n          vitae metus.\n        </P>\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const WithTable = () => {\n  return (\n    <ComponentBox data-visual-test=\"layout-card-table\">\n      {() => {\n        const MyTable = () => (\n          <Table.ScrollView>\n            <Table border outline size=\"medium\">\n              <thead>\n                <Tr noWrap>\n                  <Th>Column 1</Th>\n                  <Th>Column 2</Th>\n                  <Th>Column 3</Th>\n                </Tr>\n              </thead>\n              <tbody>\n                <Tr>\n                  <Td>Row 1</Td>\n                  <Td>Row 1</Td>\n                  <Td>Row 1</Td>\n                </Tr>\n                <Tr>\n                  <Td colSpan={3} align=\"right\">\n                    <Button>Button</Button>\n                  </Td>\n                </Tr>\n                <Tr>\n                  <Td>Row 3</Td>\n                  <Td>Row 3</Td>\n                  <Td>Row 3</Td>\n                </Tr>\n              </tbody>\n            </Table>\n          </Table.ScrollView>\n        )\n\n        return (\n          <Card\n            title=\"Card title\"\n            responsive={false}\n            innerSpace={0}\n            filled\n          >\n            <MyTable />\n          </Card>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const WithGrid = () => {\n  return (\n    <ComponentBox data-visual-test=\"layout-card-grid\">\n      <Grid.Container\n        columns={{\n          small: 1,\n          medium: 3,\n          large: 3,\n        }}\n        columnGap=\"small\"\n      >\n        <Card stack>\n          <H2>Heading</H2>\n          <P>Text</P>\n        </Card>\n        <Card stack>\n          <H2>Heading</H2>\n          <P>\n            Pariatur officia sit adipisicing pariatur commodo enim do quis\n          </P>\n        </Card>\n        <Card stack>\n          <H2>Heading</H2>\n          <P>Text</P>\n        </Card>\n      </Grid.Container>\n    </ComponentBox>\n  )\n}\n\nexport const WithFlex = () => {\n  return (\n    <ComponentBox data-visual-test=\"layout-card-flex\">\n      <Flex.Container>\n        <Card\n          size={{\n            small: 'auto',\n            medium: 4,\n            large: 4,\n          }}\n          stack\n        >\n          <H2>Heading</H2>\n          <P>Text</P>\n        </Card>\n        <Card\n          size={{\n            small: 'auto',\n            medium: 4,\n            large: 4,\n          }}\n          stack\n        >\n          <H2>Heading</H2>\n          <P>\n            Pariatur officia sit adipisicing pariatur commodo enim do quis\n          </P>\n        </Card>\n        <Card\n          size={{\n            small: 'auto',\n            medium: 4,\n            large: 4,\n          }}\n          stack\n        >\n          <H2>Heading</H2>\n          <P>Text</P>\n        </Card>\n      </Flex.Container>\n    </ComponentBox>\n  )\n}\n\nexport const Stack = () => {\n  return (\n    <ComponentBox data-visual-test=\"layout-card-stack\">\n      <Card stack>\n        <Field.String label=\"Label\" value=\"Value\" />\n        <Field.String label=\"Label\" value=\"Value\" />\n        <Hr />\n        <Form.SubmitButton />\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const VerticalFields = () => {\n  return (\n    <ComponentBox>\n      <Card>\n        <Flex.Vertical>\n          <Field.String label=\"Label\" value=\"Value\" />\n          <Field.String label=\"Label\" value=\"Value\" />\n        </Flex.Vertical>\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const HorizontalFields = () => {\n  return (\n    <ComponentBox>\n      <Card>\n        <Flex.Horizontal>\n          <Field.String label=\"Label\" value=\"Value\" width=\"small\" />\n          <Field.String label=\"Label\" value=\"Value\" width=\"stretch\" />\n        </Flex.Horizontal>\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const WithHeadingsAndAriaLabel = () => {\n  return (\n    <ComponentBox hidePreview>\n      <Card aria-labelledby=\"unique-id\">\n        <Form.SubHeading id=\"unique-id\" space={0}>\n          Heading\n        </Form.SubHeading>\n        <P>Content inside a landmark ...</P>\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const WithNestedSection = () => {\n  return (\n    <ComponentBox data-visual-test=\"card-nested-section\">\n      <Flex.Stack>\n        <Card gap=\"x-small\" align=\"stretch\">\n          <Form.SubHeading>Card with a nested Section</Form.SubHeading>\n          <Section\n            variant=\"info\"\n            innerSpace={{ top: 'small', bottom: 'medium' }}\n          >\n            <Field.String width=\"medium\" label=\"In nested Section\" />\n          </Section>\n        </Card>\n\n        <Card innerSpace=\"x-large\" stack>\n          <Section\n            variant=\"info\"\n            innerSpace={{ top: 'small', bottom: 'medium' }}\n          >\n            <Field.String\n              width=\"medium\"\n              label=\"Card with a 'x-large' inner space\"\n            />\n          </Section>\n        </Card>\n\n        <Card innerSpace={false} align=\"stretch\">\n          <P>no inner space</P>\n          <Section innerSpace backgroundColor=\"var(--card-outline-color)\">\n            <Field.String\n              width=\"medium\"\n              label=\"Card with no inner space\"\n            />\n          </Section>\n          <P>no inner space</P>\n        </Card>\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport ComponentBox from '../../../shared/tags/ComponentBox'\nimport MediaQuery from '@dnb/eufemia/src/shared/MediaQuery'\nimport {\n  Input,\n  H2,\n  Button,\n  ToggleButton,\n  Flex,\n  Switch,\n  Textarea,\n  Slider,\n  Radio,\n  Checkbox,\n  IconPrimary,\n  DatePicker,\n  Autocomplete,\n  Dropdown,\n  Space,\n  Card,\n  Code,\n  Grid,\n  FormSet,\n  FormRow,\n} from '@dnb/eufemia/src'\nimport {\n  TestElement,\n  Field,\n  Form,\n  FieldBlock,\n} from '@dnb/eufemia/src/extensions/forms'\nimport { defaultBreakpoints } from '@dnb/eufemia/src/shared/MediaQueryUtils'\nimport { defaultQueries } from '@dnb/eufemia/src/shared/useMedia'\nimport { Provider, useMedia, useMediaQuery } from '@dnb/eufemia/src/shared'\nimport { SpacingElementProps } from '@dnb/eufemia/src/shared/types'\nimport { ScrollView } from '@dnb/eufemia/src/fragments'\n\nexport const LayoutComponents = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Field,\n        Form,\n      }}\n      hideCode\n    >\n      <Flex.Stack>\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Card stack>\n          <Form.SubHeading>Name</Form.SubHeading>\n\n          <Field.String label=\"Fornavn\" value=\"John\" />\n          <Field.String label=\"Etternavn\" value=\"Smith\" />\n        </Card>\n\n        <Card stack>\n          <Form.SubHeading>More information</Form.SubHeading>\n\n          <Field.NationalIdentityNumber value=\"20058512345\" />\n          <Field.Email value=\"john@smith.email\" />\n          <Field.PhoneNumber value=\"+47 98765432\" />\n        </Card>\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n\nexport const colors = [\n  { background: '#babeee' } as React.CSSProperties,\n  { background: '#dfe0ee' } as React.CSSProperties,\n  { background: '#90d2c3' } as React.CSSProperties,\n  { background: '#ecf4be' } as React.CSSProperties,\n]\n\nexport const HorizontalFlexItemResponsiveSize = () => {\n  return (\n    <ComponentBox\n      scope={{ colors, TestElement }}\n      hideCode\n      data-visual-test=\"flex-item-size\"\n    >\n      <Flex.Container>\n        <Flex.Item size={8}>\n          <TestElement style={colors[0]}>FlexItem (8)</TestElement>\n        </Flex.Item>\n        <Flex.Item size={4}>\n          <TestElement style={colors[1]}>FlexItem (4)</TestElement>\n        </Flex.Item>\n        <Flex.Item size={{ small: 12, medium: 4 }}>\n          <TestElement style={colors[2]}>\n            FlexItem (small: 8, medium: 4)\n          </TestElement>\n        </Flex.Item>\n        <Flex.Item size={{ small: 12, medium: 8 }}>\n          <TestElement style={colors[3]}>\n            FlexItem (small: 4, medium: 8)\n          </TestElement>\n        </Flex.Item>\n      </Flex.Container>\n    </ComponentBox>\n  )\n}\n\nexport const HorizontalFlexItemResponsiveSizeCustomColumns = () => {\n  return (\n    <ComponentBox\n      hideCode\n      scope={{\n        colors,\n        TestElement,\n        Field,\n        defaultBreakpoints,\n        defaultQueries,\n      }}\n      data-visual-test=\"flex-item-custom-size\"\n    >\n      {() => {\n        const breakpoints = {\n          ...defaultBreakpoints,\n          xsmall: '30em',\n        }\n\n        const queries = {\n          ...defaultQueries,\n          xsmall: { min: 0, max: 'xsmall' },\n          small: { min: 'xsmall', max: 'small' },\n        }\n\n        const CustomMediaQuery = styled.div`\n          display: flex;\n          flex-direction: column;\n          .dnb-flex-container[data-media-key='xsmall']\n            .dnb-flex-item--responsive {\n            --size: var(--xsmall);\n          }\n        `\n\n        return (\n          <CustomMediaQuery>\n            <Flex.Container\n              direction=\"horizontal\"\n              sizeCount={4}\n              breakpoints={breakpoints}\n              queries={queries}\n            >\n              <Flex.Item size={{ small: 2, medium: 3, large: 1 }}>\n                <TestElement style={colors[0]}>FlexItem</TestElement>\n              </Flex.Item>\n              <Flex.Item size={{ small: 2, medium: 1, large: 2 }}>\n                <TestElement style={colors[1]}>FlexItem</TestElement>\n              </Flex.Item>\n              <Flex.Item\n                size={{ xsmall: 4, small: 2, medium: 1, large: 1 }}\n              >\n                <TestElement style={colors[2]}>FlexItem</TestElement>\n              </Flex.Item>\n              <Flex.Item\n                size={{ xsmall: 4, small: 2, medium: 3, large: 4 }}\n              >\n                <TestElement style={colors[3]}>FlexItem</TestElement>\n              </Flex.Item>\n            </Flex.Container>\n          </CustomMediaQuery>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nconst useWindowWidth = () => {\n  const [innerWidth, setWidth] = React.useState(\n    typeof window !== 'undefined' ? window.innerWidth : 0,\n  )\n\n  React.useEffect(() => {\n    const resizeHandler = () => {\n      setWidth(window.innerWidth)\n    }\n    window.addEventListener('resize', resizeHandler)\n    return () => window.removeEventListener('resize', resizeHandler)\n  }, [])\n\n  return { innerWidth }\n}\n\nexport const MediaQueryUseMedia = () => (\n  <ComponentBox scope={{ useMedia, useWindowWidth }} hideCode>\n    {() => {\n      const Playground = () => {\n        const { isSmall, isMedium, isLarge, isSSR } = useMedia()\n        const { innerWidth } = useWindowWidth()\n\n        return (\n          <Code>\n            <pre>\n              {JSON.stringify(\n                { isSmall, isMedium, isLarge, isSSR, innerWidth },\n                null,\n                2,\n              )}\n            </pre>\n          </Code>\n        )\n      }\n      return <Playground />\n    }}\n  </ComponentBox>\n)\n\nexport const MediaQueryLiveExample = () => (\n  <ComponentBox scope={{ MediaQuery, useMediaQuery }} hideCode>\n    {() => {\n      const Playground = () => {\n        const [query, updateQuery] = React.useState({\n          screen: true,\n          not: true,\n          min: 'small',\n          max: 'large',\n        })\n\n        const match1 = useMediaQuery({\n          matchOnSSR: true,\n          when: query,\n        })\n        const match2 = useMediaQuery({\n          matchOnSSR: true,\n          not: true,\n          when: query,\n        })\n\n        React.useEffect(() => {\n          console.log('mediaQuery:', match1, match2)\n        }, [match1, match2])\n\n        return (\n          <>\n            <Button\n              onClick={() => {\n                updateQuery({\n                  ...query,\n                  screen: !query.screen,\n                })\n              }}\n              right\n            >\n              Switch\n            </Button>\n            <MediaQuery when={query}>\n              <Code>when</Code>\n            </MediaQuery>\n            <MediaQuery not when={query}>\n              <Code>not when</Code>\n            </MediaQuery>\n          </>\n        )\n      }\n      return <Playground />\n    }}\n  </ComponentBox>\n)\n\nexport const ResponsiveGridContainer = () => {\n  return (\n    <ComponentBox hideCode scope={{ TestElement, colors }}>\n      <Grid.Container rowGap columnGap>\n        <Grid.Item\n          span={{\n            small: [1, 2],\n            medium: [1, 3],\n            large: [1, 12],\n          }}\n          style={colors[0]}\n          element={TestElement}\n        >\n          Item A\n        </Grid.Item>\n\n        <Grid.Item\n          span={{\n            small: [3, 4],\n            medium: [4, 6],\n            large: [1, 4],\n          }}\n          style={colors[1]}\n          element={TestElement}\n        >\n          Item B\n        </Grid.Item>\n\n        <Grid.Item\n          span={{\n            small: [2, 3],\n            medium: [4, 6],\n            large: [5, 8],\n          }}\n          style={colors[2]}\n          element={TestElement}\n        >\n          Item C\n        </Grid.Item>\n\n        <Grid.Item\n          span={{\n            small: [1, 4],\n            medium: [4, 6],\n            large: [9, 12],\n          }}\n          style={colors[3]}\n          element={TestElement}\n        >\n          Item D\n        </Grid.Item>\n      </Grid.Container>\n    </ComponentBox>\n  )\n}\n\n// Deprecated – can be removed in v11\nexport const FormSetAlternativeBefore = () => (\n  <ComponentBox>\n    <FormSet label_direction=\"vertical\">\n      <H2 top={0}>Heading</H2>\n      <FormRow label={<span className=\"dnb-h--medium\">Legend</span>}>\n        <Input label=\"Label A\" right />\n        <Input label=\"Label B\" />\n      </FormRow>\n    </FormSet>\n  </ComponentBox>\n)\n\nexport const FormSetAlternativeAfter = () => (\n  <ComponentBox>\n    <Provider formElement={{ label_direction: 'vertical' }}>\n      <Form.Handler>\n        <H2 top={0}>Heading</H2>\n        <FieldBlock label={<span className=\"dnb-h--medium\">Legend</span>}>\n          <Flex.Horizontal>\n            <Input label=\"Label A\" />\n            <Input label=\"Label B\" />\n          </Flex.Horizontal>\n        </FieldBlock>\n      </Form.Handler>\n    </Provider>\n  </ComponentBox>\n)\n\nexport const FormSetAlternativeForms = () => (\n  <ComponentBox>\n    <Form.Handler>\n      <Flex.Stack>\n        <Form.MainHeading>Heading</Form.MainHeading>\n        <FieldBlock label={<span className=\"dnb-h--medium\">Legend</span>}>\n          <Flex.Horizontal>\n            <Field.String label=\"Label A\" width=\"medium\" />\n            <Field.String label=\"Label B\" width=\"large\" />\n          </Flex.Horizontal>\n        </FieldBlock>\n      </Flex.Stack>\n    </Form.Handler>\n  </ComponentBox>\n)\n\nconst AllComponents = ({\n  direction = 'vertical',\n  showText = false,\n  hideLabel = false,\n} = {}) => {\n  const params: SpacingElementProps = {\n    left: direction === 'horizontal' ? 'small' : null,\n    top: direction !== 'horizontal' ? 'small' : null,\n  }\n\n  let labels: Record<string, string> = {\n    datePicker: 'DatePicker:',\n    dropdown: 'Dropdown:',\n    autocomplete: 'Autocomplete:',\n    checkbox: 'Checkbox',\n    radio: 'Radio',\n    radioGroup: 'Radio Group:',\n    toggleButton: 'Toggle:',\n    toggleButtonGroup: 'Toggle Group:',\n    switch: 'Switch',\n    input: 'Input:',\n    textarea: 'Textarea:',\n    slider: 'Slider:',\n  }\n\n  if (hideLabel) {\n    labels = Object.entries(labels).reduce((acc, [k]) => {\n      acc[k] = ''\n      return acc\n    }, {})\n  }\n\n  const Components = () => (\n    <>\n      {showText && (\n        <>\n          <Space {...params} inline>\n            <p className=\"dnb-p\">\n              paragraph{' '}\n              <IconPrimary\n                icon=\"bell\"\n                size=\"medium\"\n                {...params}\n                style={{ margin: 0 }} // since this is not a block element\n              />\n            </p>\n          </Space>\n          text\n        </>\n      )}\n      <Button text=\"Button\" {...params} />\n      <Button icon=\"add\" {...params} />\n      <Input label={labels.input} {...params} />\n      <Dropdown\n        label={labels.dropdown}\n        data={['Item A', 'Item B', 'Item C']}\n        {...params}\n      />\n      <Autocomplete\n        label={labels.autocomplete}\n        data={['Item A', 'Item B', 'Item C']}\n        {...params}\n      />\n      <DatePicker label={labels.datePicker} {...params} />\n      <IconPrimary icon=\"bell\" size=\"medium\" {...params} />\n      <Checkbox label={labels.checkbox} {...params} />\n      <Radio label={labels.radio} {...params} />\n      <Radio.Group label={labels.radioGroup} {...params}>\n        <Radio label={labels.radio} value=\"a\" />\n        <Radio label={labels.radio} value=\"b\" />\n      </Radio.Group>\n      <ToggleButton\n        label={labels.toggleButton}\n        text=\"Toggle\"\n        {...params}\n      />\n      <ToggleButton.Group label={labels.toggleButtonGroup} {...params}>\n        <ToggleButton text=\"Toggle A\" value=\"a\" />\n        <ToggleButton text=\"Toggle B\" value=\"b\" />\n      </ToggleButton.Group>\n      <Switch label={labels.switch} {...params} />\n      <Textarea label={labels.textarea} rows=\"5\" {...params} />\n      <div style={{ display: 'inline-flex' }}>\n        <Slider label={labels.slider} value={50} {...params} />\n      </div>\n    </>\n  )\n\n  if (direction === 'horizontal') {\n    return (\n      <Flex.Horizontal style={{ padding: '1rem', whiteSpace: 'nowrap' }}>\n        <Components />\n      </Flex.Horizontal>\n    )\n  } else {\n    Components._supportsSpacingProps = true\n    return (\n      <Flex.Vertical style={{ padding: '1rem' }}>\n        <Components />\n      </Flex.Vertical>\n    )\n  }\n}\n\nexport const AllComponentsVerticalTestCase = (\n  props?: React.HTMLProps<HTMLDivElement>,\n) => (\n  <div data-visual-test=\"form-components-alignment-vertical\" {...props}>\n    <AllComponents direction=\"vertical\" />\n  </div>\n)\n\nexport const AllComponentsVerticalLabelsTestCase = (\n  props?: React.HTMLProps<HTMLDivElement>,\n) => (\n  <div\n    data-visual-test=\"form-components-alignment-vertical-labels\"\n    {...props}\n  >\n    <Provider formElement={{ label_direction: 'vertical' }}>\n      <AllComponents direction=\"vertical\" />\n    </Provider>\n  </div>\n)\n\nexport const AllComponentsHorizontalTestCase = (\n  props?: React.HTMLProps<HTMLDivElement>,\n) => (\n  <div data-visual-test=\"form-components-alignment-horizontal\" {...props}>\n    <ScrollView>\n      <AllComponents direction=\"horizontal\" />\n    </ScrollView>\n  </div>\n)\n","import React from 'react'\nimport classnames from 'classnames'\nimport { Space } from '../../../../components'\n\nexport default function TestElement({ className = null, ...props }) {\n  return (\n    <Space\n      className={classnames('dnb-forms-test-element', className)}\n      {...props}\n    />\n  )\n}\n\nTestElement._supportsSpacingProps = true\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","h3","p","a","code","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","children","_jsx","href","WithGrid","AccordionInColumns","id","component","Error","wrapper","MDXLayout","AccordionDefaultExample","_jsx2","ComponentBox","AccordionLargeContentExample","hideCode","AccordionCustomisationExample","scope","bell","AccordionGroupExample","AccordionPlainVariant","AddIcon","SubtractIcon","AccordionNestedExample","AccordionDisabledExample","AccordionDescriptionExample","AccordionFilledExample","background","noInline","AccordionCloseAllInGroup","collapseAll","React","Button","bottom","variant","onClick","current","Accordion","Group","expanded","allow_close_all","collapseAllHandleRef","Header","Content","P","Default","WithTable","WithFlex","Stack","VerticalFields","HorizontalFields","WithHeadingsAndAriaLabel","hidePreview","WithNestedSection","LayoutComponents","Field","Form","colors","HorizontalFlexItemResponsiveSize","TestElement","HorizontalFlexItemResponsiveSizeCustomColumns","defaultBreakpoints","defaultQueries","useWindowWidth","innerWidth","setWidth","window","resizeHandler","addEventListener","removeEventListener","MediaQueryUseMedia","useMedia","MediaQueryLiveExample","MediaQuery","useMediaQuery","ResponsiveGridContainer","FormSetAlternativeBefore","FormSetAlternativeAfter","FormSetAlternativeForms","AllComponents","_temp","direction","showText","hideLabel","params","left","top","labels","datePicker","dropdown","autocomplete","checkbox","radio","radioGroup","toggleButton","toggleButtonGroup","switch","input","textarea","slider","entries","reduce","acc","_ref","k","Components","Space","inline","className","IconPrimary","icon","size","style","margin","text","Input","label","Dropdown","data","Autocomplete","DatePicker","Checkbox","Radio","value","ToggleButton","Switch","Textarea","rows","display","Slider","Flex","padding","whiteSpace","_supportsSpacingProps","AllComponentsVerticalTestCase","AllComponentsVerticalLabelsTestCase","Provider","formElement","label_direction","AllComponentsHorizontalTestCase","ScrollView","classnames"],"sourceRoot":""}