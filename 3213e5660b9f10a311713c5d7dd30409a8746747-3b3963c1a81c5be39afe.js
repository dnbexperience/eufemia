"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[83790],{7075:function(e,n,t){t.d(n,{Ap:function(){return d},EH:function(){return i},Fd:function(){return s},T0:function(){return a},q6:function(){return r}});var o=t(19044);function r(e){return void 0===e&&(e=null),{withConfig(n,t){return n(e,t)}}}async function s(e,n){var t;const{generalConfig:o,parameters:r}=n||{},s=null==n||null===(t=n.preResponseResolver)||void 0===t?void 0:t.call(n,{value:e});if(void 0!==s)return s;const a=o.fetchConfig.url,i="function"==typeof a?await a(e,r):a,{data:d,response:l}=await async function(e,n){const{fetchConfig:t}=e,o=null==n?void 0:n.abortControllerRef;o&&(o.current&&(o.current.abort(),o.current=null),o.current||(o.current=new AbortController));const{signal:r}=(null==o?void 0:o.current)||{},s={method:"GET",headers:{Accept:"application/json",...t.headers},signal:r};try{const e=await fetch(t.url,s);return o&&(o.current=null),{response:e,data:await e.json()}}catch(a){if("AbortError"!==a.name)return a}}({...o,fetchConfig:{...o.fetchConfig,url:i}},n);if(!l)throw new Error("Please try again!");if(!l.ok)throw new Error(`${l.statusText} â€“ Status: ${l.status}`);return{data:d,status:l.status}}function a(e){var n;let{countryCode:t,additionalArgs:r}=e;const s=t||(null===(n=r.props)||void 0===n?void 0:n["data-country-code"])||o.DH;return{countryCode:r.getSourceValue(s)||t,countryCodeValue:s}}function i(e){var n;let{value:t,countryCode:o,additionalArgs:r,handler:s}=e;const{countryCode:i,countryCodeValue:d}=a({countryCode:o||(null===(n=r.props)||void 0===n?void 0:n["data-country-code"]),additionalArgs:r});return String(d).startsWith("/")&&r[s.name]!==s&&(r[s.name]=s,r.setFieldEventListener(d,"onPathChange",(()=>{s(t,r)}))),{countryCode:i}}function d(e,n){return!!e&&n.includes(String(e).toUpperCase())}},19869:function(e,n,t){t.r(n),t.d(n,{autofill:function(){return c},getMockData:function(){return h},preResponseResolver:function(){return d},responseResolver:function(){return l},supportedCountryCodes:function(){return a},unsupportedCountryCodeMessage:function(){return i},validator:function(){return u}});var o=t(4565),r=t(74180),s=t(7075);const a=["NO","DK","SE","FI","NL","DE","US","BE","FO","GL","IS","SJ"],i="Postal code verification is not supported for {countryCode}.",d=e=>{let{value:n}=e;if(!n)return{postal_codes:[]}},l=(e,n)=>{var t;const o=null==n?void 0:n.responseResolver;if("function"==typeof o)return o(e);const{postal_code:r,city:s}=(null==e||null===(t=e.postal_codes)||void 0===t?void 0:t[0])||{};return{matcher:e=>e===r,payload:{city:s}}};function c(e,n){const t={current:null};return async function o(i,c){if(!("string"==typeof i&&i.length>=4))return;const{countryCode:u}=(0,s.EH)({value:i,countryCode:null==n?void 0:n.countryCode,additionalArgs:c,handler:o});if((0,s.Ap)(u,a))try{var h;const o={countryCode:String(u).toLowerCase()},{data:a}=await(0,s.Fd)(i,{generalConfig:e,parameters:o,abortControllerRef:t,preResponseResolver:null!==(h=null==n?void 0:n.preResponseResolver)&&void 0!==h?h:d}),p=e=>{const{cityPath:t}=n||{};if(t){if(!c.dataContext)throw new Error("No data context found in the postalCode connector");const{dataContext:n}=c,o=n.internalDataRef.current;(r.zy(o,t)?r.Jt(o,t):void 0)||n.handlePathChangeUnvalidated(t,e.city)}},{matcher:f,payload:y}=l(a,n);if(f(i))return p(y)}catch(p){return p}}}function u(e,n){const t={current:null};return async function(r,c){if(!("string"==typeof r&&r.length>=4))return;const{countryCode:u}=(0,s.T0)({additionalArgs:c});if(!(0,s.Ap)(u,a))return new Error(i.replace("{countryCode}",u));try{var h;const a={countryCode:String(u).toLowerCase()},{data:i,status:c}=await(0,s.Fd)(r,{generalConfig:e,parameters:a,abortControllerRef:t,preResponseResolver:null!==(h=null==n?void 0:n.preResponseResolver)&&void 0!==h?h:d}),p=()=>new o.j("PostalCodeAndCity.invalidCode"),{matcher:f}=l(i,n),y=f(r);if(400!==c&&!y)return p()}catch(p){return p}}}function h(e){return"SE"===String(e).toUpperCase()?{postal_codes:[{city:"Stockholm",postal_code:"11432"}]}:{postal_codes:[{city:"Vollen",postal_code:"1391"}]}}},54481:function(e,n,t){t.r(n);var o=t(31085),r=t(71184),s=t(85383),a=t(86058),i=t(19869),d=t(85637);function l(e){const n=Object.assign({h2:"h2",p:"p",code:"code",a:"a",ul:"ul",li:"li",hr:"hr",pre:"pre",h3:"h3"},(0,r.R)(),e.components);return s||c("Examples",!1),s.Address||c("Examples.Address",!0),s.PostalCode||c("Examples.PostalCode",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{children:"Description"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"Bring"})," connector allows you to use the ",(0,o.jsx)(n.a,{href:"https://developer.bring.com/api/",children:"Bring API"})," to:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Verify a postal code: ",(0,o.jsx)(n.a,{href:"#postalcode-api",children:"PostalCode API"})]}),"\n",(0,o.jsxs)(n.li,{children:["Autofill a city name or street name: ",(0,o.jsx)(n.a,{href:"#postalcode-api",children:"PostalCode API"})]}),"\n",(0,o.jsxs)(n.li,{children:["Search for addresses with suggestions: ",(0,o.jsx)(n.a,{href:"#address-suggestions-api",children:"Address Suggestions API"})]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{children:"PostalCode API"}),"\n",(0,o.jsxs)(n.p,{children:["Here is an example of how to use the Bring ",(0,o.jsx)(n.a,{href:"https://developer.bring.com/api/postal-code/",children:"Postal Code API"})," to connect the ",(0,o.jsx)(n.a,{href:"/uilib/extensions/forms/feature-fields/PostalCodeAndCity/",children:"PostalCodeAndCity"})," field to a form."]}),"\n",(0,o.jsx)(n.p,{children:"First, create a context with the config:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Connectors, Field, Form } from '@dnb/eufemia/extensions/forms'\n\nconst { withConfig } = Connectors.createContext({\n  fetchConfig: {\n    url: (value, { countryCode }) => {\n      return `[YOUR-API-URL]/.../${countryCode}/.../${value}`\n      // Real-world example using Bring's Postal Code API's get postal code endpoint, directly without proxy:\n      // return `https://api.bring.com/address/api/{countryCode}/postal-codes/{value}`\n    },\n  },\n})\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"[YOUR-API-URL]"})," is the URL of your own API endpoint that proxies the Bring ",(0,o.jsx)(n.a,{href:"https://developer.bring.com/api/postal-code/",children:"Postal Code API"})," with a token."]}),"\n",(0,o.jsx)(n.h3,{children:"Supported countries"}),"\n",(0,o.jsxs)(n.p,{children:["The Bring API for PostalCode supports the ",(0,o.jsx)(n.a,{href:"https://developer.bring.com/api/postal-code/#supported-countries",children:"following countries"}),", by its country codes:"]}),"\n",i.supportedCountryCodes.join(", "),"\n",(0,o.jsx)(n.h3,{children:"Endpoints and response format"}),"\n",(0,o.jsxs)(n.p,{children:["Ensure you use one of the ",(0,o.jsx)(n.a,{href:"https://developer.bring.com/api/postal-code/#endpoints",children:"following endpoints"})," from Bring via your proxy API, returning a list of postal codes in the following format:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "postal_codes": [\n    {\n      "postal_code": "1391",\n      "city": "Vollen"\n      ...\n    }\n  ]\n}\n'})}),"\n",(0,o.jsx)(n.h3,{children:"How to verify a postal code"}),"\n",(0,o.jsxs)(n.p,{children:["Use the context to create a validator based on the ",(0,o.jsx)(n.code,{children:"validator"})," connector."]}),"\n",(0,o.jsxs)(n.p,{children:["You can use it for an ",(0,o.jsx)(n.code,{children:"onChangeValidator"})," or ",(0,o.jsx)(n.code,{children:"onBlurValidator"})," (recommended), depending on your use case."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const onBlurValidator = withConfig(Connectors.Bring.postalCode.validator)\n\nfunction MyForm() {\n  return (\n    <Form.Handler>\n      <Field.PostalCodeAndCity\n        postalCode={{\n          path: '/postalCode',\n          onBlurValidator,\n        }}\n      />\n    </Form.Handler>\n  )\n}\n"})}),"\n",(0,o.jsx)(n.h3,{children:"How to autofill a city name based on a postal code"}),"\n",(0,o.jsxs)(n.p,{children:["Use the context to create the ",(0,o.jsx)(n.code,{children:"onChange"})," event handler based on the ",(0,o.jsx)(n.code,{children:"autofill"})," connector."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const onChange = withConfig(Connectors.Bring.postalCode.autofill, {\n  cityPath: '/city',\n})\n\nfunction MyForm() {\n  return (\n    <Form.Handler>\n      <Field.PostalCodeAndCity\n        postalCode={{\n          path: '/postalCode',\n          onChange,\n        }}\n        city={{\n          path: '/city',\n        }}\n      />\n      <Form.SubmitButton />\n    </Form.Handler>\n  )\n}\n"})}),"\n",(0,o.jsx)(n.h3,{children:"Verify a postal code"}),"\n",(0,o.jsxs)(n.p,{children:["This demo contains only a mocked API call, so only a postal code of ",(0,o.jsx)(n.code,{children:"1391"})," for Norway and ",(0,o.jsx)(n.code,{children:"11432"})," for Sweden is valid."]}),"\n",(0,o.jsx)(s.PostalCode,{}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{children:"Address Suggestions API"}),"\n",(0,o.jsxs)(n.p,{children:["Here is an example of how to use the Bring ",(0,o.jsx)(n.a,{href:"https://developer.bring.com/api/address/#get-street-or-place-suggestions-get",children:"Address API"})," to connect the ",(0,o.jsx)(n.a,{href:"/uilib/extensions/forms/feature-fields/Address/",children:"Address"})," field to a form."]}),"\n",(0,o.jsx)(n.p,{children:"First, create a context with the config:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Connectors, Field, Form } from '@dnb/eufemia/extensions/forms'\n\nconst { withConfig } = Connectors.createContext({\n  fetchConfig: {\n    url: (value, { countryCode }) => {\n      return `[YOUR-API-URL]/.../${countryCode}/.../${value}`\n      // Real-world example using Bring's Address API's get address endpoint, directly without proxy:\n      // return `https://api.bring.com/address/api/{countryCode}/addresses/suggestions?q=${value}`\n    },\n  },\n})\n"})}),"\n",(0,o.jsx)(n.p,{children:"Then create an element that will be used to render the autocomplete component to show the suggestions."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const addressSuggestionsElement = withConfig(\n  Connectors.Bring.address.suggestionsElement,\n  {\n    countryCode: '/countryCode', // Can be \"NO\" or a path\n    cityPath: '/city',\n    postalCodePath: '/postalCode',\n  },\n)\n"})}),"\n",(0,o.jsx)(n.p,{children:"And use the element in the Address field:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'function MyForm() {\n  return (\n    <Form.Handler>\n      <Field.Address.Street\n        path="/streetAddress"\n        element={addressSuggestionsElement}\n      />\n    </Form.Handler>\n  )\n}\n'})}),"\n",(0,o.jsx)(n.h3,{children:"Populate data to PostalCodeAndCity"}),"\n",(0,o.jsx)(n.p,{children:"You can auto fill the address fields based on the selected address."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"function MyForm() {\n  return (\n    <Form.Handler>\n      <Field.Address.Street\n        path=\"/streetAddress\"\n        element={addressSuggestionsElement}\n      />\n\n      <Field.PostalCodeAndCity\n        postalCode={{ path: '/postalCode' }}\n        city={{ path: '/city' }}\n      />\n    </Form.Handler>\n  )\n}\n"})}),"\n",(0,o.jsx)(n.h3,{children:"Supported countries"}),"\n",(0,o.jsxs)(n.p,{children:["The Bring API for Address supports the ",(0,o.jsx)(n.a,{href:"https://developer.bring.com/api/address/",children:"following countries"}),", by its country codes:"]}),"\n",d.supportedCountryCodes.join(", "),"\n",(0,o.jsx)(n.h3,{children:"Endpoints and response format"}),"\n",(0,o.jsxs)(n.p,{children:["Ensure you use one of the ",(0,o.jsx)(n.a,{href:"https://developer.bring.com/api/address/#endpoints",children:"following endpoints"})," from Bring via your proxy API, returning a list of addresses in the following format:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "addresses": [\n    {\n      "address_id": "1398742",\n      "street_name": "Gransvea",\n      "house_number": 37,\n      "postal_code": "1391",\n      "city": "Vollen",\n      "county": "Akershus",\n      "municipality": "Asker",\n      "type": "STREET"\n    }\n  ]\n}\n'})}),"\n",(0,o.jsx)(n.h3,{children:"Translations"}),"\n",(0,o.jsx)(a.A,{localeKey:["StreetAddress.suggestionPlaceholder"]}),"\n",(0,o.jsx)(n.h3,{children:"Address suggestion demos"}),"\n",(0,o.jsx)(n.p,{children:"This demo contains only a mocked API call, so you can enter anything in the Street field."}),"\n",(0,o.jsx)(s.Address,{})]})}function c(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.R)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(l,e)})):l(e)}},85383:function(e,n,t){t.r(n),t.d(n,{Address:function(){return p},PostalCode:function(){return h}});var o={};t.r(o),t.d(o,{address:function(){return i},postalCode:function(){return a}});var r={};t.r(r),t.d(r,{Bring:function(){return o},createContext:function(){return d.q6},fetchData:function(){return d.Fd},getCountryCodeValue:function(){return d.T0},handleCountryPath:function(){return d.EH},isSupportedCountryCode:function(){return d.Ap}});var s=t(32065),a=t(19869),i=t(85637),d=t(7075),l=t(31085);let c=null;async function u(e,n){const t=globalThis.fetch;globalThis.fetch=()=>Promise.resolve({ok:!0,json:()=>Promise.resolve(n)}),await new Promise((e=>setTimeout(e,1e3))),clearTimeout(c),c=setTimeout((()=>{globalThis.fetch=t}),1100)}const h=()=>(0,l.jsx)(s.A,{scope:{Connectors:r,getMockDataPostalCode:a.getMockData,mockFetch:u},noInline:!0,children:"const { withConfig } = Connectors.createContext({\n  fetchConfig: {\n    url: async (value, { countryCode }) => {\n      await mockFetch(countryCode, getMockDataPostalCode(countryCode))\n      return `[YOUR-API-URL]/${value}`\n    },\n  },\n})\nconst onBlurValidator = withConfig(Connectors.Bring.postalCode.validator)\nconst onBlur = withConfig(Connectors.Bring.postalCode.autofill, {\n  cityPath: '/city',\n})\nrender(\n  <Form.Handler onSubmit={console.log}>\n    <Form.Card>\n      <Field.PostalCodeAndCity\n        countryCode=\"/countryCode\"\n        postalCode={{\n          path: '/postalCode',\n          onBlurValidator,\n          onBlur,\n          required: true,\n        }}\n        city={{\n          path: '/city',\n          required: true,\n        }}\n      />\n      <Field.SelectCountry\n        path=\"/countryCode\"\n        defaultValue=\"NO\"\n        filterCountries={({ iso }) => ['NO', 'SE'].includes(iso)}\n      />\n    </Form.Card>\n    <Form.SubmitButton />\n  </Form.Handler>,\n)\n"}),p=()=>(0,l.jsx)(s.A,{scope:{Connectors:r,getMockDataAddress:i.getMockData,mockFetch:u},noInline:!0,children:"const { withConfig } = Connectors.createContext({\n  fetchConfig: {\n    url: async (value, { countryCode }) => {\n      await mockFetch(countryCode, getMockDataAddress(countryCode))\n      return `[YOUR-API-URL]/${value}`\n    },\n  },\n})\nconst addressSuggestionsElement = withConfig(\n  Connectors.Bring.address.suggestionsElement,\n  {\n    countryCode: '/countryCode',\n    cityPath: '/city',\n    postalCodePath: '/postalCode',\n  },\n)\nrender(\n  <Form.Handler onSubmit={console.log}>\n    <Form.Card>\n      <Field.Address.Street\n        path=\"/streetAddress\"\n        element={addressSuggestionsElement}\n      />\n      <Field.PostalCodeAndCity\n        countryCode=\"/countryCode\"\n        postalCode={{\n          path: '/postalCode',\n          required: true,\n        }}\n        city={{\n          path: '/city',\n          required: true,\n        }}\n      />\n      <Field.SelectCountry\n        path=\"/countryCode\"\n        defaultValue=\"NO\"\n        filterCountries={({ iso }) => ['NO', 'SE'].includes(iso)}\n      />\n    </Form.Card>\n\n    <Form.SubmitButton />\n  </Form.Handler>,\n)\n"})},85637:function(e,n,t){t.r(n),t.d(n,{getMockData:function(){return p},preResponseResolver:function(){return l},responseResolver:function(){return c},suggestions:function(){return u},suggestionsElement:function(){return h},supportedCountryCodes:function(){return i},unsupportedCountryMessage:function(){return d}});var o=t(5793),r=t(72556),s=t(7075),a=t(31085);const i=["NO"],d="Postal code verification is not supported for {countryCode}.",l=e=>{let{value:n}=e;if(!n)return{addresses:[]}},c=(e,n)=>{const t=null==n?void 0:n.responseResolver;if("function"==typeof t)return t(e);return{payload:null==e?void 0:e.addresses.map((e=>{const n=[e.street_name,e.house_number].filter(Boolean).join(" "),t=[e.postal_code,e.city].filter(Boolean).join(" ");return{item:e,selected_value:n,selectedKey:n||e.address_id,content:[n,t]}}))}};function u(e,n){const t={current:null};return async function(e){return await o(e.value,e)};async function o(r,a){if("string"!=typeof r)return;const{countryCode:d}=(0,s.EH)({value:r,countryCode:null==n?void 0:n.countryCode,additionalArgs:a,handler:o});if((0,s.Ap)(d,i))try{var u;a.showIndicator();const o={countryCode:String(d).toLowerCase()},{data:i}=await(0,s.Fd)(r,{generalConfig:e,parameters:o,abortControllerRef:t,preResponseResolver:null!==(u=null==n?void 0:n.preResponseResolver)&&void 0!==u?u:l}),{payload:h}=c(i,n);a.updateData(h),a.hideIndicator()}catch(h){return a.hideIndicator(),h}}}function h(e,n){const t=u(e,n),s=(e,t)=>{const{cityPath:o,postalCodePath:r}=n||{},s=null==t?void 0:t.data;if(s){const e=t.dataContext;e.handlePathChangeUnvalidated(r,s.item.postal_code),e.handlePathChangeUnvalidated(o,s.item.city)}};return e=>{const{suggestionPlaceholder:n}=(0,r.A)().StreetAddress;return(0,a.jsx)(o.Ay,{variant:"autocomplete",...e,autocompleteProps:{mode:"async",disableFilter:!0,keepValue:!0,openOnFocus:!0,placeholder:n,onType:t,...null==e?void 0:e.autocompleteProps},onChange:s})}}function p(e){return"SE"===String(e).toUpperCase()?{addresses:[]}:{addresses:[{address_id:"1398742",street_name:"Gransvea",house_number:37,postal_code:"1391",city:"Vollen",county:"Akershus",municipality:"Asker",type:"STREET"},{address_id:"3168496",street_name:"Gransvegen",house_number:1,postal_code:"2090",city:"Hurdal",county:"Akershus",municipality:"Hurdal",type:"STREET"},{address_id:"325829",street_name:"Gransveien",house_number:2,postal_code:"1900",city:"Fetsund",county:"Akershus",municipality:"LillestrÃ¸m",type:"STREET"},{address_id:"325829",street_name:"Somewhere else",house_number:100,postal_code:"1234",city:"City",county:"County",municipality:"Municipality",type:"STREET"}]}}},86058:function(e,n,t){t.d(n,{A:function(){return j}});var o=t(42483),r=t(14041),s=t(42275),a=t(81908),i=t(92034),d=t(77352),l=t(29058),c=t(69094),u=t(21436),h=t(64034),p=t(1470),f=t(43350),y=t(15616),g=t(84196),C=t(97728),m=t(31085);const x=(0,o.A)(s.Ay,{target:"ejvypor0"})({name:"1qdk5x4",styles:"td{white-space:nowrap;}"});function j(e){let{localeKey:n,source:t=null}=e;t=(0,r.useMemo)((()=>t||Object.assign((0,u.zu)({},p.A,f.A),g._M)),[t]);const o={},j={},v=(Array.isArray(n)?n:[n]).map((e=>{if(e.includes(".")){const n=e.split(".")[0];return j[n]=j[n]||[],j[n].push(e),n}return e})),A=(e,n,t,r)=>{e=`${r}.${e}`,j[r]&&!j[r].includes(e)||(o[e]=Object.assign(o[e]||{},{[t]:n}))};Object.entries(t).forEach((e=>{let[n,t]=e;v.forEach((e=>{const o=t[e];o?Object.entries(o).forEach((t=>{let[o,r]=t;if("object"==typeof r){const t=`${e}.${o}`;Object.entries(r).forEach((e=>{let[o,r]=e;A(o,r,n,t)}))}else A(o,r,n,e)})):(0,h.R8)(`TranslationsTable: Could not find any translations for key: "${e}", perhaps you misspelled the key's name?`)}))}));const b=Object.keys(t),P=Object.entries(o).map((e=>{let[n,t]=e;return(0,m.jsxs)(a.A,{children:[(0,m.jsx)(i.A,{children:(0,m.jsx)(y.OH,{variant:"prop",children:n})}),Object.entries(t).map(((e,n)=>{let[t,o]=e;return(0,m.jsx)(i.A,{children:"string"==typeof o?o:(0,m.jsx)("pre",{children:JSON.stringify(o,null,2)})},n+t)}))]},n)}));if(0!=P.length)return(0,m.jsxs)(m.Fragment,{children:[(0,m.jsxs)(d.A,{children:["More info about translations can be found in the"," ",(0,m.jsx)(l.Ay,{href:"/uilib/usage/customisation/localization/",children:"general localization"})," ","and"," ",(0,m.jsx)(l.Ay,{href:"/uilib/extensions/forms/getting-started/#localization-and-translation",children:"Eufemia Forms localization"})," ","docs."]}),(0,m.jsx)(s.Ay.ScrollView,{children:(0,m.jsxs)(x,{children:[(0,m.jsx)("thead",{children:(0,m.jsxs)(a.A,{children:[(0,m.jsx)(c.A,{children:"Key"}),b.map((e=>{const{status:n}=C.R[e];return(0,m.jsxs)(c.A,{children:[e,n?` (${n})`:null]},e)}))]})}),(0,m.jsx)("tbody",{children:P})]})})]});(0,h.R8)(`TranslationsTable: Not able to find any translations for input : "${n}", hence not rendering the translations table.`)}}}]);
//# sourceMappingURL=3213e5660b9f10a311713c5d7dd30409a8746747-3b3963c1a81c5be39afe.js.map