{"version":3,"file":"3213e5660b9f10a311713c5d7dd30409a8746747-a7d7b04de3f227322e49.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Connectors/createContext.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Connectors/Bring/postalCode.ts","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Connectors/Bring/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Connectors/Bring/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Connectors/Bring/address.tsx","webpack://dnb-design-system-portal/./src/shared/parts/TranslationsTable.tsx"],"sourcesContent":["import { ReceiveAdditionalEventArgs } from '../types'\nimport { COUNTRY as defaultCountry } from '../../../shared/defaults'\n\nexport type UrlSecondParameter = {\n  countryCode: string\n}\nexport type GeneralConfig = {\n  fetchConfig?: {\n    url:\n      | string\n      | ((\n          value: string,\n          { countryCode }: UrlSecondParameter\n        ) => string | Promise<string>)\n    headers?: HeadersInit\n  }\n}\n\nexport function createContext<GeneralConfigGeneric = GeneralConfig>(\n  generalConfig: GeneralConfigGeneric = null\n) {\n  return {\n    withConfig<\n      HandlerMethod extends (\n        generalConfig: GeneralConfigGeneric,\n        handlerConfig: unknown\n      ) => ReturnType<HandlerMethod>,\n    >(fn: HandlerMethod, handlerConfig?: Parameters<HandlerMethod>[1]) {\n      return fn(generalConfig, handlerConfig)\n    },\n  }\n}\n\nexport type HandlerConfig = {\n  preResponseResolver?: PreResponseResolver\n  responseResolver?: ResponseResolver\n}\nexport type PreResponseResolver = (fromField: { value: string }) => unknown\nexport type ResponseResolver<\n  Response = unknown,\n  Payload = Record<string, unknown>,\n> = (\n  response: Response,\n  handlerConfig?: HandlerConfig\n) => {\n  /**\n   * The matcher to be used to determine if and how the connector,\n   * such as an validator for `onChangeValidator` or `onBlurValidator`,\n   * should validate the field value.\n   */\n  matcher?: (value: string) => boolean\n\n  /**\n   * The payload to be returned and used by the connector.\n   */\n  payload?: Payload\n}\n\nexport type FetchDataFromAPIOptions = {\n  generalConfig: GeneralConfig\n  parameters?: UrlSecondParameter\n  abortControllerRef?: { current: null | AbortController }\n  preResponseResolver?: PreResponseResolver\n}\n\nasync function fetchDataFromAPI<Data = unknown>(\n  generalConfig: GeneralConfig & { fetchConfig: { url: string } },\n  options?: FetchDataFromAPIOptions\n): Promise<{\n  data: Data\n  response: Response\n}> {\n  const { fetchConfig } = generalConfig\n\n  const controller = options?.abortControllerRef\n  if (controller) {\n    if (controller.current) {\n      controller.current.abort()\n      controller.current = null\n    }\n    if (!controller.current) {\n      controller.current = new AbortController()\n    }\n  }\n  const { signal } = controller?.current || {}\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      ...fetchConfig.headers,\n    },\n    signal,\n  }\n\n  try {\n    const response = await fetch(fetchConfig.url, fetchOptions)\n\n    if (controller) {\n      controller.current = null\n    }\n\n    return {\n      response,\n      data: await response.json(),\n    }\n  } catch (error) {\n    if (error.name !== 'AbortError') {\n      return error\n    }\n  }\n}\n\nexport type FetchDataReturnValue<Data = unknown> = {\n  data: Data\n  status: number\n}\n\nexport async function fetchData<Data = unknown>(\n  value: string,\n  options: FetchDataFromAPIOptions\n): Promise<FetchDataReturnValue<Data>> {\n  const { generalConfig, parameters } = options || {}\n\n  const result = options?.preResponseResolver?.({ value })\n  if (typeof result !== 'undefined') {\n    return result as FetchDataReturnValue<Data>\n  }\n\n  const u = generalConfig.fetchConfig.url\n  const url = typeof u === 'function' ? await u(value, parameters) : u\n\n  const { data, response } = await fetchDataFromAPI<Data>(\n    {\n      ...generalConfig,\n      fetchConfig: {\n        ...generalConfig.fetchConfig,\n        url,\n      },\n    },\n    options\n  )\n\n  if (!response) {\n    throw new Error('Please try again!')\n  }\n\n  // Check if the response status is in the range of 200-299\n  if (!response.ok) {\n    throw new Error(`${response.statusText} – Status: ${response.status}`)\n  }\n\n  return { data, status: response.status }\n}\n\nexport function getCountryCodeValue({\n  countryCode: givenCountryCode,\n  additionalArgs,\n}: {\n  countryCode?: string\n  additionalArgs: ReceiveAdditionalEventArgs<unknown>\n}) {\n  const countryCodeValue =\n    givenCountryCode ||\n    additionalArgs.props?.['data-country-code'] ||\n    defaultCountry\n  const countryCode =\n    additionalArgs.getSourceValue<string>(countryCodeValue) ||\n    givenCountryCode\n  return { countryCode, countryCodeValue }\n}\n\nexport function handleCountryPath({\n  value,\n  countryCode: givenCountryCode,\n  additionalArgs,\n  handler,\n}: {\n  value: string\n  countryCode?: string\n  additionalArgs: ReceiveAdditionalEventArgs<unknown>\n  handler: (\n    value: string,\n    additionalArgs: ReceiveAdditionalEventArgs<unknown>\n  ) => void\n}) {\n  const { countryCode, countryCodeValue } = getCountryCodeValue({\n    countryCode:\n      givenCountryCode || additionalArgs.props?.['data-country-code'],\n    additionalArgs,\n  })\n\n  if (\n    String(countryCodeValue).startsWith('/') &&\n    additionalArgs[handler.name] !== handler\n  ) {\n    additionalArgs[handler.name] = handler\n    additionalArgs.setFieldEventListener(\n      countryCodeValue,\n      'onPathChange',\n      () => {\n        handler(value, additionalArgs)\n      }\n    )\n  }\n\n  return { countryCode }\n}\n\nexport function isSupportedCountryCode(\n  countryCode: string,\n  supportedCountryCodes: readonly string[]\n) {\n  if (!countryCode) {\n    return false\n  }\n  return (supportedCountryCodes as unknown as Array<string>).includes(\n    String(countryCode).toUpperCase()\n  )\n}\n","import type { Path, PathStrict, UseFieldProps } from '../../types'\nimport { FormError } from '../../utils'\nimport pointer from '../../utils/json-pointer'\nimport {\n  GeneralConfig,\n  HandlerConfig,\n  PreResponseResolver,\n  ResponseResolver,\n  fetchData,\n  getCountryCodeValue,\n  handleCountryPath,\n  isSupportedCountryCode,\n} from '../createContext'\n\nexport const supportedCountryCodes = [\n  'NO', // Norway\n  'DK', // Denmark\n  'SE', // Sweden\n  'FI', // Finland\n  'NL', // Netherlands\n  'DE', // Germany\n  'US', // United States\n  'BE', // Belgium\n  'FO', // Faroe Islands\n  'GL', // Greenland\n  'IS', // Iceland\n  'SJ', // Svalbard and Jan Mayen\n] as const\nexport type SupportedCountries = (typeof supportedCountryCodes)[number]\n\ntype AutofillHandlerConfig = HandlerConfig & {\n  countryCode?:\n    | PathStrict\n    | SupportedCountries\n    | Lowercase<SupportedCountries>\n}\n\nexport const unsupportedCountryCodeMessage =\n  'Postal code verification is not supported for {countryCode}.'\n\nexport type PostalCodeResolverData = {\n  postal_codes: { postal_code: string; city: string }[]\n}\nexport type PostalCodeResolverPayload = {\n  city: string\n}\n\nexport const preResponseResolver: PreResponseResolver = ({ value }) => {\n  if (!value) {\n    return { postal_codes: [] }\n  }\n}\n\nexport const responseResolver: ResponseResolver<\n  PostalCodeResolverData,\n  PostalCodeResolverPayload\n> = (data, handlerConfig) => {\n  const resolver = handlerConfig?.responseResolver\n  if (typeof resolver === 'function') {\n    return resolver(data) as ReturnType<typeof resolver> & {\n      payload: PostalCodeResolverPayload\n    }\n  }\n\n  const { postal_code, city } = data?.postal_codes?.[0] || {}\n\n  return {\n    matcher: (value) => value === postal_code,\n    payload: { city },\n  }\n}\n\nexport function autofill(\n  generalConfig: GeneralConfig,\n  handlerConfig?: AutofillHandlerConfig & { cityPath: Path }\n): UseFieldProps<string>['onChange'] {\n  const abortControllerRef = { current: null }\n\n  return async function autofillHandler(value, additionalArgs) {\n    if (!(typeof value === 'string' && value.length >= 4)) {\n      return // stop here\n    }\n\n    // Get country code from path or use given countryCode value\n    const { countryCode } = handleCountryPath({\n      value,\n      countryCode: handlerConfig?.countryCode,\n      additionalArgs,\n      handler: autofillHandler,\n    })\n\n    if (!isSupportedCountryCode(countryCode, supportedCountryCodes)) {\n      return // stop here\n    }\n\n    try {\n      const parameters = {\n        countryCode: String(countryCode).toLowerCase(),\n      }\n      const { data } = await fetchData<PostalCodeResolverData>(value, {\n        generalConfig,\n        parameters,\n        abortControllerRef,\n        preResponseResolver:\n          handlerConfig?.preResponseResolver ?? preResponseResolver,\n      })\n\n      const onMatch = (payload: PostalCodeResolverPayload) => {\n        const { cityPath } = handlerConfig || {}\n        if (cityPath) {\n          if (!additionalArgs.dataContext) {\n            throw new Error(\n              'No data context found in the postalCode connector'\n            )\n          }\n          const { dataContext } = additionalArgs\n          const internalData = dataContext.internalDataRef.current\n          const value = pointer.has(internalData, cityPath)\n            ? pointer.get(internalData, cityPath)\n            : undefined\n          if (!value) {\n            dataContext.handlePathChangeUnvalidated(cityPath, payload.city)\n          }\n        }\n      }\n\n      const { matcher, payload } = responseResolver(data, handlerConfig)\n      const match = matcher(value)\n\n      if (match) {\n        return onMatch(payload)\n      }\n    } catch (error) {\n      return error\n    }\n  }\n}\n\nexport function validator(\n  generalConfig: GeneralConfig,\n  handlerConfig?: AutofillHandlerConfig\n):\n  | UseFieldProps<string>['onChangeValidator']\n  | UseFieldProps<string>['onBlurValidator'] {\n  const abortControllerRef = { current: null }\n\n  return async function validatorHandler(value, additionalArgs) {\n    if (!(typeof value === 'string' && value.length >= 4)) {\n      return // stop here\n    }\n\n    const { countryCode } = getCountryCodeValue({ additionalArgs })\n\n    if (!isSupportedCountryCode(countryCode, supportedCountryCodes)) {\n      return new Error(\n        unsupportedCountryCodeMessage.replace('{countryCode}', countryCode)\n      )\n    }\n\n    try {\n      const parameters = {\n        countryCode: String(countryCode).toLowerCase(),\n      }\n      const { data, status } = await fetchData<PostalCodeResolverData>(\n        value,\n        {\n          generalConfig,\n          parameters,\n          abortControllerRef,\n          preResponseResolver:\n            handlerConfig?.preResponseResolver ?? preResponseResolver,\n        }\n      )\n\n      const onMatch = () => {\n        return new FormError('PostalCodeAndCity.invalidCode')\n      }\n\n      const { matcher } = responseResolver(data, handlerConfig)\n      const match = matcher(value)\n\n      if (status !== 400 && !match) {\n        return onMatch()\n      }\n    } catch (error) {\n      return error\n    }\n  }\n}\n\nexport function getMockData(countryCode?: string) {\n  switch (String(countryCode).toUpperCase()) {\n    case 'SE':\n      return {\n        postal_codes: [\n          {\n            city: 'Stockholm',\n            postal_code: '11432',\n          },\n        ],\n      }\n    case 'NO':\n    default:\n      return {\n        postal_codes: [\n          {\n            city: 'Vollen',\n            postal_code: '1391',\n          },\n        ],\n      }\n  }\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nimport TranslationsTable from 'dnb-design-system-portal/src/shared/parts/TranslationsTable';\nimport {supportedCountryCodes as postalCode_supportedCountryCodes} from '@dnb/eufemia/src/extensions/forms/Connectors/Bring/postalCode';\nimport {supportedCountryCodes as address_supportedCountryCodes} from '@dnb/eufemia/src/extensions/forms/Connectors/Bring/address';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\",\n    pre: \"pre\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.Address) _missingMdxReference(\"Examples.Address\", true);\n  if (!Examples.PostalCode) _missingMdxReference(\"Examples.PostalCode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Bring\"\n      }), \" connector allows you to use the \", _jsx(_components.a, {\n        href: \"https://developer.bring.com/api/\",\n        children: \"Bring API\"\n      }), \" to:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Verify a postal code: \", _jsx(_components.a, {\n          href: \"#postalcode-api\",\n          children: \"PostalCode API\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Autofill a city name or street name: \", _jsx(_components.a, {\n          href: \"#postalcode-api\",\n          children: \"PostalCode API\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Search for addresses with suggestions: \", _jsx(_components.a, {\n          href: \"#address-suggestions-api\",\n          children: \"Address Suggestions API\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"PostalCode API\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example of how to use the Bring \", _jsx(_components.a, {\n        href: \"https://developer.bring.com/api/postal-code/\",\n        children: \"Postal Code API\"\n      }), \" to connect the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/feature-fields/PostalCodeAndCity/\",\n        children: \"PostalCodeAndCity\"\n      }), \" field to a form.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First, create a context with the config:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Connectors, Field, Form } from '@dnb/eufemia/extensions/forms'\\n\\nconst { withConfig } = Connectors.createContext({\\n  fetchConfig: {\\n    url: (value, { countryCode }) => {\\n      return `[YOUR-API-URL]/.../${countryCode}/.../${value}`\\n      // Real-world example using Bring's Postal Code API's get postal code endpoint, directly without proxy:\\n      // return `https://api.bring.com/address/api/{countryCode}/postal-codes/{value}`\\n    },\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"[YOUR-API-URL]\"\n      }), \" is the URL of your own API endpoint that proxies the Bring \", _jsx(_components.a, {\n        href: \"https://developer.bring.com/api/postal-code/\",\n        children: \"Postal Code API\"\n      }), \" with a token.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Supported countries\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Bring API for PostalCode supports the \", _jsx(_components.a, {\n        href: \"https://developer.bring.com/api/postal-code/#supported-countries\",\n        children: \"following countries\"\n      }), \", by its country codes:\"]\n    }), \"\\n\", postalCode_supportedCountryCodes.join(', '), \"\\n\", _jsx(_components.h3, {\n      children: \"Endpoints and response format\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Ensure you use one of the \", _jsx(_components.a, {\n        href: \"https://developer.bring.com/api/postal-code/#endpoints\",\n        children: \"following endpoints\"\n      }), \" from Bring via your proxy API, returning a list of postal codes in the following format:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"{\\n  \\\"postal_codes\\\": [\\n    {\\n      \\\"postal_code\\\": \\\"1391\\\",\\n      \\\"city\\\": \\\"Vollen\\\"\\n      ...\\n    }\\n  ]\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"How to verify a postal code\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the context to create a validator based on the \", _jsx(_components.code, {\n        children: \"validator\"\n      }), \" connector.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use it for an \", _jsx(_components.code, {\n        children: \"onChangeValidator\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"onBlurValidator\"\n      }), \" (recommended), depending on your use case.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const onBlurValidator = withConfig(Connectors.Bring.postalCode.validator)\\n\\nfunction MyForm() {\\n  return (\\n    <Form.Handler>\\n      <Field.PostalCodeAndCity\\n        postalCode={{\\n          path: '/postalCode',\\n          onBlurValidator,\\n        }}\\n      />\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"How to autofill a city name based on a postal code\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the context to create the \", _jsx(_components.code, {\n        children: \"onChange\"\n      }), \" event handler based on the \", _jsx(_components.code, {\n        children: \"autofill\"\n      }), \" connector.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const onChange = withConfig(Connectors.Bring.postalCode.autofill, {\\n  cityPath: '/city',\\n})\\n\\nfunction MyForm() {\\n  return (\\n    <Form.Handler>\\n      <Field.PostalCodeAndCity\\n        postalCode={{\\n          path: '/postalCode',\\n          onChange,\\n        }}\\n        city={{\\n          path: '/city',\\n        }}\\n      />\\n      <Form.SubmitButton />\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Verify a postal code\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This demo contains only a mocked API call, so only a postal code of \", _jsx(_components.code, {\n        children: \"1391\"\n      }), \" for Norway and \", _jsx(_components.code, {\n        children: \"11432\"\n      }), \" for Sweden is valid.\"]\n    }), \"\\n\", _jsx(Examples.PostalCode, {}), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Address Suggestions API\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example of how to use the Bring \", _jsx(_components.a, {\n        href: \"https://developer.bring.com/api/address/#get-street-or-place-suggestions-get\",\n        children: \"Address API\"\n      }), \" to connect the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/feature-fields/Address/\",\n        children: \"Address\"\n      }), \" field to a form.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First, create a context with the config:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Connectors, Field, Form } from '@dnb/eufemia/extensions/forms'\\n\\nconst { withConfig } = Connectors.createContext({\\n  fetchConfig: {\\n    url: (value, { countryCode }) => {\\n      return `[YOUR-API-URL]/.../${countryCode}/.../${value}`\\n      // Real-world example using Bring's Address API's get address endpoint, directly without proxy:\\n      // return `https://api.bring.com/address/api/{countryCode}/addresses/suggestions?q=${value}`\\n    },\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then create an element that will be used to render the autocomplete component to show the suggestions.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const addressSuggestionsElement = withConfig(\\n  Connectors.Bring.address.suggestionsElement,\\n  {\\n    countryCode: '/countryCode', // Can be \\\"NO\\\" or a path\\n    cityPath: '/city',\\n    postalCodePath: '/postalCode',\\n  },\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"And use the element in the Address field:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"function MyForm() {\\n  return (\\n    <Form.Handler>\\n      <Field.Address.Street\\n        path=\\\"/streetAddress\\\"\\n        element={addressSuggestionsElement}\\n      />\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Populate data to PostalCodeAndCity\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can auto fill the address fields based on the selected address.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"function MyForm() {\\n  return (\\n    <Form.Handler>\\n      <Field.Address.Street\\n        path=\\\"/streetAddress\\\"\\n        element={addressSuggestionsElement}\\n      />\\n\\n      <Field.PostalCodeAndCity\\n        postalCode={{ path: '/postalCode' }}\\n        city={{ path: '/city' }}\\n      />\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Supported countries\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Bring API for Address supports the \", _jsx(_components.a, {\n        href: \"https://developer.bring.com/api/address/\",\n        children: \"following countries\"\n      }), \", by its country codes:\"]\n    }), \"\\n\", address_supportedCountryCodes.join(', '), \"\\n\", _jsx(_components.h3, {\n      children: \"Endpoints and response format\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Ensure you use one of the \", _jsx(_components.a, {\n        href: \"https://developer.bring.com/api/address/#endpoints\",\n        children: \"following endpoints\"\n      }), \" from Bring via your proxy API, returning a list of addresses in the following format:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"{\\n  \\\"addresses\\\": [\\n    {\\n      \\\"address_id\\\": \\\"1398742\\\",\\n      \\\"street_name\\\": \\\"Gransvea\\\",\\n      \\\"house_number\\\": 37,\\n      \\\"postal_code\\\": \\\"1391\\\",\\n      \\\"city\\\": \\\"Vollen\\\",\\n      \\\"county\\\": \\\"Akershus\\\",\\n      \\\"municipality\\\": \\\"Asker\\\",\\n      \\\"type\\\": \\\"STREET\\\"\\n    }\\n  ]\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Translations\"\n    }), \"\\n\", _jsx(TranslationsTable, {\n      localeKey: ['StreetAddress.suggestionPlaceholder']\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Address suggestion demos\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This demo contains only a mocked API call, so you can enter anything in the Street field.\"\n    }), \"\\n\", _jsx(Examples.Address, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { getMockData as getMockDataPostalCode } from '@dnb/eufemia/src/extensions/forms/Connectors/Bring/postalCode'\nimport { getMockData as getMockDataAddress } from '@dnb/eufemia/src/extensions/forms/Connectors/Bring/address'\nimport { Form, Field, Connectors } from '@dnb/eufemia/src/extensions/forms'\n\nlet mockFetchTimeout = null\nasync function mockFetch(countryCode: string, data) {\n  const originalFetch = globalThis.fetch\n\n  globalThis.fetch = () => {\n    return Promise.resolve({\n      ok: true,\n      json: () => {\n        return Promise.resolve(data)\n      },\n    }) as any\n  }\n\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n\n  clearTimeout(mockFetchTimeout)\n  mockFetchTimeout = setTimeout(() => {\n    globalThis.fetch = originalFetch\n  }, 1100)\n}\n\nexport const PostalCode = () => {\n  return (\n    <ComponentBox scope={{ Connectors, getMockDataPostalCode, mockFetch }}>\n      {() => {\n        const { withConfig } = Connectors.createContext({\n          fetchConfig: {\n            url: async (value, { countryCode }) => {\n              await mockFetch(\n                countryCode,\n                getMockDataPostalCode(countryCode),\n              )\n              return `[YOUR-API-URL]/${value}`\n            },\n          },\n        })\n\n        const onBlurValidator = withConfig(\n          Connectors.Bring.postalCode.validator,\n        )\n\n        const onBlur = withConfig(Connectors.Bring.postalCode.autofill, {\n          cityPath: '/city',\n        })\n\n        return (\n          <Form.Handler onSubmit={console.log}>\n            <Form.Card>\n              <Field.PostalCodeAndCity\n                countryCode=\"/countryCode\"\n                postalCode={{\n                  path: '/postalCode',\n                  onBlurValidator,\n                  onBlur,\n                  required: true,\n                }}\n                city={{\n                  path: '/city',\n                  required: true,\n                }}\n              />\n              <Field.SelectCountry\n                path=\"/countryCode\"\n                defaultValue=\"NO\"\n                filterCountries={({ iso }) => ['NO', 'SE'].includes(iso)}\n              />\n            </Form.Card>\n            <Form.SubmitButton />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const Address = () => {\n  return (\n    <ComponentBox scope={{ Connectors, getMockDataAddress, mockFetch }}>\n      {() => {\n        const { withConfig } = Connectors.createContext({\n          fetchConfig: {\n            url: async (value, { countryCode }) => {\n              await mockFetch(countryCode, getMockDataAddress(countryCode))\n              return `[YOUR-API-URL]/${value}`\n            },\n          },\n        })\n\n        const addressSuggestionsElement = withConfig(\n          Connectors.Bring.address.suggestionsElement,\n          {\n            countryCode: '/countryCode',\n            cityPath: '/city',\n            postalCodePath: '/postalCode',\n          },\n        )\n\n        return (\n          <Form.Handler onSubmit={console.log}>\n            <Form.Card>\n              <Field.Address.Street\n                path=\"/streetAddress\"\n                element={addressSuggestionsElement}\n              />\n              <Field.PostalCodeAndCity\n                countryCode=\"/countryCode\"\n                postalCode={{\n                  path: '/postalCode',\n                  required: true,\n                }}\n                city={{\n                  path: '/city',\n                  required: true,\n                }}\n              />\n              <Field.SelectCountry\n                path=\"/countryCode\"\n                defaultValue=\"NO\"\n                filterCountries={({ iso }) => ['NO', 'SE'].includes(iso)}\n              />\n            </Form.Card>\n\n            <Form.SubmitButton />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n","import React from 'react'\nimport Selection, { Props as SelectionProps } from '../../Field/Selection'\nimport {\n  Path,\n  PathStrict,\n  ReceiveAdditionalEventArgs,\n  UseFieldProps,\n} from '../../types'\nimport useTranslation from '../../hooks/useTranslation'\nimport {\n  GeneralConfig,\n  HandlerConfig,\n  PreResponseResolver,\n  ResponseResolver,\n  fetchData,\n  handleCountryPath,\n  isSupportedCountryCode,\n} from '../createContext'\nimport type { DrawerListDataArrayObjectStrict } from '../../../../fragments/drawer-list/DrawerList'\n\nexport const supportedCountryCodes = [\n  'NO', // Norway\n] as const\nexport type SupportedCountries = (typeof supportedCountryCodes)[number]\n\nexport const unsupportedCountryMessage =\n  'Postal code verification is not supported for {countryCode}.'\n\nexport type AddressResolverData = {\n  addresses: {\n    street_name: string\n    house_number: string\n    postal_code: string\n    city: string\n  }[]\n}\nexport type AddressResolverPayload = Array<{\n  item: AddressResolverData['addresses'][0]\n  selected_value: string\n  selectedKey: string\n  content: string[]\n}>\n\ntype SuggestionsConnectorReturn = (\n  event: {\n    value: string\n    showIndicator: () => void\n    hideIndicator: () => void\n    updateData: (data: AddressResolverPayload) => void\n  } & ReceiveAdditionalEventArgs<string>\n) => Promise<void>\n\ntype SuggestionsHandlerConfig = HandlerConfig & {\n  countryCode?:\n    | PathStrict\n    | SupportedCountries\n    | Lowercase<SupportedCountries>\n  cityPath: Path\n  postalCodePath: Path\n}\n\nexport const preResponseResolver: PreResponseResolver = ({ value }) => {\n  if (!value) {\n    return { addresses: [] }\n  }\n}\n\nexport const responseResolver: ResponseResolver<\n  AddressResolverData,\n  AddressResolverPayload\n> = (data, handlerConfig) => {\n  const resolver = handlerConfig?.responseResolver\n  if (typeof resolver === 'function') {\n    return resolver(data) as ReturnType<typeof resolver> & {\n      payload: AddressResolverPayload\n    }\n  }\n\n  const payload = data?.addresses.map((item) => {\n    const street = [item.street_name, item.house_number]\n      .filter(Boolean)\n      .join(' ')\n    const city = [item.postal_code, item.city].filter(Boolean).join(' ')\n\n    return {\n      item,\n      selected_value: street,\n      selectedKey: street || item['address_id'],\n      content: [street, city],\n    } satisfies DrawerListDataArrayObjectStrict &\n      Pick<AddressResolverPayload[0], 'item'>\n  })\n\n  return {\n    payload,\n  }\n}\n\nexport function suggestions(\n  generalConfig: GeneralConfig,\n  handlerConfig?: SuggestionsHandlerConfig\n): SuggestionsConnectorReturn {\n  const abortControllerRef = { current: null }\n\n  return async function suggestionsHandlerWrapper(event) {\n    return await suggestionsHandler(event.value, event)\n  }\n\n  async function suggestionsHandler(\n    value: string,\n    additionalArgs: ReceiveAdditionalEventArgs<string> & {\n      showIndicator: () => void\n      hideIndicator: () => void\n      updateData: (data: AddressResolverPayload) => void\n    }\n  ) {\n    if (!(typeof value === 'string')) {\n      return // stop here\n    }\n\n    // Get country code from path or use given countryCode value\n    const { countryCode } = handleCountryPath({\n      value,\n      countryCode: handlerConfig?.countryCode,\n      additionalArgs,\n      handler: suggestionsHandler,\n    })\n\n    if (!isSupportedCountryCode(countryCode, supportedCountryCodes)) {\n      return // stop here\n    }\n\n    try {\n      additionalArgs.showIndicator()\n\n      const parameters = {\n        countryCode: String(countryCode).toLowerCase(),\n      }\n      const { data } = await fetchData<AddressResolverData>(value, {\n        generalConfig,\n        parameters,\n        abortControllerRef,\n        preResponseResolver:\n          handlerConfig?.preResponseResolver ?? preResponseResolver,\n      })\n\n      const { payload } = responseResolver(data, handlerConfig)\n\n      additionalArgs.updateData(payload)\n      additionalArgs.hideIndicator()\n    } catch (error) {\n      additionalArgs.hideIndicator()\n      return error\n    }\n  }\n}\n\nexport function suggestionsElement(\n  generalConfig: GeneralConfig,\n  handlerConfig?: SuggestionsHandlerConfig\n) {\n  const onType = suggestions(generalConfig, handlerConfig)\n  const onChange: UseFieldProps<string>['onChange'] = (\n    value,\n    additionalArgs\n  ) => {\n    const { cityPath, postalCodePath } = handlerConfig || {}\n    const data = additionalArgs?.data as AddressResolverPayload[0]\n    if (data) {\n      const dataContext = additionalArgs.dataContext\n\n      dataContext.handlePathChangeUnvalidated(\n        postalCodePath,\n        data.item.postal_code\n      )\n\n      dataContext.handlePathChangeUnvalidated(cityPath, data.item.city)\n    }\n  }\n\n  const Autocomplete = (props: SelectionProps) => {\n    const { suggestionPlaceholder } = useTranslation().StreetAddress\n    return (\n      <Selection\n        variant=\"autocomplete\"\n        {...props}\n        autocompleteProps={{\n          mode: 'async',\n          disableFilter: true,\n          keepValue: true,\n          openOnFocus: true,\n          placeholder: suggestionPlaceholder,\n          onType,\n          ...props?.autocompleteProps,\n        }}\n        onChange={onChange}\n      />\n    )\n  }\n\n  return Autocomplete\n}\n\nexport function getMockData(countryCode?: string) {\n  switch (String(countryCode).toUpperCase()) {\n    case 'SE':\n      return {\n        addresses: [],\n      }\n    case 'NO':\n    default:\n      return {\n        addresses: [\n          {\n            address_id: '1398742',\n            street_name: 'Gransvea',\n            house_number: 37,\n            postal_code: '1391',\n            city: 'Vollen',\n            county: 'Akershus',\n            municipality: 'Asker',\n            type: 'STREET',\n          },\n          {\n            address_id: '3168496',\n            street_name: 'Gransvegen',\n            house_number: 1,\n            postal_code: '2090',\n            city: 'Hurdal',\n            county: 'Akershus',\n            municipality: 'Hurdal',\n            type: 'STREET',\n          },\n          {\n            address_id: '325829',\n            street_name: 'Gransveien',\n            house_number: 2,\n            postal_code: '1900',\n            city: 'Fetsund',\n            county: 'Akershus',\n            municipality: 'Lillestrøm',\n            type: 'STREET',\n          },\n          {\n            address_id: '325829',\n            street_name: 'Somewhere else',\n            house_number: 100,\n            postal_code: '1234',\n            city: 'City',\n            county: 'County',\n            municipality: 'Municipality',\n            type: 'STREET',\n          },\n        ],\n      }\n  }\n}\n","import { useMemo } from 'react'\nimport styled from '@emotion/styled'\nimport { Anchor, P, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { extendDeep, warn } from '@dnb/eufemia/src/shared/component-helper'\nimport globalTranslations from '@dnb/eufemia/src/shared/locales'\nimport formsTranslations from '@dnb/eufemia/src/extensions/forms/constants/locales'\nimport { FormattedCode } from './PropertiesTable'\nimport { Translation } from '@dnb/eufemia/src/shared/Context'\nimport { translationsWithoutEnUS } from '../../core/PortalProviders'\nimport { languageDisplayNames } from '../../core/ChangeLocale'\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nexport default function TranslationsTable({\n  localeKey,\n  source = null,\n}: {\n  localeKey?: string | Array<string>\n  source?: Record<string, Translation>\n}) {\n  source = useMemo(() => {\n    return (\n      source ||\n      Object.assign(\n        extendDeep({}, globalTranslations, formsTranslations),\n        translationsWithoutEnUS,\n      )\n    )\n  }, [source])\n\n  const entries = {}\n  const allowList = {}\n  const localeKeys = (\n    Array.isArray(localeKey) ? localeKey : [localeKey]\n  ).map((key) => {\n    if (key.includes('.')) {\n      const first = key.split('.')[0]\n      allowList[first] = allowList[first] || []\n      allowList[first].push(key)\n      return first\n    }\n\n    return key\n  })\n\n  const addToEntries = (key, translation, locale, localeKey) => {\n    key = `${localeKey}.${key}`\n    if (allowList[localeKey] && !allowList[localeKey].includes(key)) {\n      return\n    }\n    entries[key] = Object.assign(entries[key] || {}, {\n      [locale]: translation,\n    })\n  }\n\n  Object.entries(source).forEach(([locale, translations]) => {\n    localeKeys.forEach((localeKey) => {\n      const translationsObj = translations[localeKey]\n      if (!translationsObj) {\n        warn(\n          `TranslationsTable: Could not find any translations for key: \"${localeKey}\", perhaps you misspelled the key's name?`,\n        )\n        return\n      }\n      Object.entries(translationsObj).forEach(([key, translation]) => {\n        if (typeof translation === 'object') {\n          const nestedKey = `${localeKey}.${key}`\n          Object.entries(translation).forEach(([key, translation]) => {\n            addToEntries(key, translation, locale, nestedKey)\n          })\n        } else {\n          addToEntries(key, translation, locale, localeKey)\n        }\n      })\n    })\n  })\n\n  const locales = Object.keys(source)\n  const tableRows = Object.entries(entries).map(([key, values]) => {\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode variant=\"prop\">{key}</FormattedCode>\n        </Td>\n        {Object.entries(values).map(([locale, value], i) => {\n          return (\n            <Td key={i + locale}>\n              {typeof value === 'string' ? (\n                value\n              ) : (\n                <pre>{JSON.stringify(value, null, 2)}</pre>\n              )}\n            </Td>\n          )\n        })}\n      </Tr>\n    )\n  })\n\n  if (tableRows.length == 0) {\n    warn(\n      `TranslationsTable: Not able to find any translations for input : \"${localeKey}\", hence not rendering the translations table.`,\n    )\n    return\n  }\n\n  return (\n    <>\n      <P>\n        More info about translations can be found in the{' '}\n        <Anchor href=\"/uilib/usage/customisation/localization/\">\n          general localization\n        </Anchor>{' '}\n        and{' '}\n        <Anchor href=\"/uilib/extensions/forms/getting-started/#localization-and-translation\">\n          Eufemia Forms localization\n        </Anchor>{' '}\n        docs.\n      </P>\n      <Table.ScrollView>\n        <StyledTable>\n          <thead>\n            <Tr>\n              <Th>Key</Th>\n              {locales.map((locale) => {\n                const { status } = languageDisplayNames[locale]\n                return (\n                  <Th key={locale}>\n                    {locale}\n                    {status ? ` (${status})` : null}\n                  </Th>\n                )\n              })}\n            </Tr>\n          </thead>\n          <tbody>{tableRows}</tbody>\n        </StyledTable>\n      </Table.ScrollView>\n    </>\n  )\n}\n"],"names":["createContext","generalConfig","withConfig","fn","handlerConfig","async","fetchData","value","options","_options$preResponseR","parameters","result","preResponseResolver","call","u","fetchConfig","url","data","response","controller","abortControllerRef","current","abort","AbortController","signal","fetchOptions","method","headers","Accept","fetch","json","error","name","fetchDataFromAPI","Error","ok","statusText","status","getCountryCodeValue","_ref","_additionalArgs$props","countryCode","givenCountryCode","additionalArgs","countryCodeValue","props","defaultCountry","getSourceValue","handleCountryPath","_ref2","_additionalArgs$props2","handler","String","startsWith","setFieldEventListener","isSupportedCountryCode","supportedCountryCodes","includes","toUpperCase","unsupportedCountryCodeMessage","postal_codes","responseResolver","_data$postal_codes","resolver","postal_code","city","matcher","payload","autofill","autofillHandler","length","_handlerConfig$preRes","toLowerCase","onMatch","cityPath","dataContext","internalData","internalDataRef","pointer","undefined","handlePathChangeUnvalidated","validator","replace","_handlerConfig$preRes2","FormError","match","getMockData","_createMdxContent","_components","Object","assign","h2","p","code","a","ul","li","hr","pre","h3","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","children","_jsx","href","className","postalCode_supportedCountryCodes","join","address_supportedCountryCodes","TranslationsTable","localeKey","id","component","wrapper","MDXLayout","mockFetchTimeout","mockFetch","originalFetch","globalThis","Promise","resolve","setTimeout","clearTimeout","PostalCode","ComponentBox","scope","Connectors","getMockDataPostalCode","noInline","Address","getMockDataAddress","unsupportedCountryMessage","addresses","map","item","street","street_name","house_number","filter","Boolean","selected_value","selectedKey","content","suggestions","event","suggestionsHandler","showIndicator","updateData","hideIndicator","suggestionsElement","onType","onChange","postalCodePath","suggestionPlaceholder","useTranslation","StreetAddress","Selection","variant","autocompleteProps","mode","disableFilter","keepValue","openOnFocus","placeholder","address_id","county","municipality","type","StyledTable","_styled","Table","target","styles","source","useMemo","extendDeep","globalTranslations","formsTranslations","translationsWithoutEnUS","entries","allowList","localeKeys","Array","isArray","key","first","split","push","addToEntries","translation","locale","forEach","translations","translationsObj","_ref3","nestedKey","_ref4","warn","locales","keys","tableRows","_ref5","values","Tr","Td","FormattedCode","_ref6","i","JSON","stringify","P","Anchor","Th","languageDisplayNames"],"sourceRoot":""}