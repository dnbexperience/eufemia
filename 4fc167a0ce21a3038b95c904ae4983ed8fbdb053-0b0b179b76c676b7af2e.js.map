{"version":3,"file":"4fc167a0ce21a3038b95c904ae4983ed8fbdb053-0b0b179b76c676b7af2e.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/DataContext/At/At.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/StepsContext.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/Step/Step.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/NextButton/NextButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/PreviousButton/PreviousButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/Buttons/Buttons.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/StepsLayout.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/index.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/Email/Email.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/NationalIdentityNumber/NationalIdentityNumber.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/PhoneNumber/PhoneNumber.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/String/String.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/utils/numbers.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/Number/Number.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/Boolean/Boolean.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/Currency/Currency.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/Date/Date.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/BankAccountNumber/BankAccountNumber.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/ValueBlock/ValueBlock.tsx"],"sourcesContent":["import React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { Input, Slider, Card, Flex } from '@dnb/eufemia/src'\nimport {\n  Form,\n  StepsLayout,\n  Field,\n  Value,\n  FieldBlock,\n  useDataValue,\n  DataContext,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport const CreateBasicFieldComponent = () => {\n  return (\n    <ComponentBox\n      scope={{\n        useDataValue,\n      }}\n      hideCode\n    >\n      {() => {\n        const MyCustomField = (props) => {\n          const fromInput = React.useCallback(({ value }) => value, [])\n\n          const preparedProps = {\n            ...props,\n            fromInput,\n            validator: (value) => {\n              return value === 'secret'\n                ? new Error('Do not reveal the secret!')\n                : undefined\n            },\n          }\n\n          const {\n            id,\n            info,\n            warning,\n            error,\n            value,\n            handleChange,\n            handleFocus,\n            handleBlur,\n          } = useDataValue(preparedProps)\n\n          return (\n            <FieldBlock\n              forId={id}\n              label=\"What is the secret of the custom field?\"\n              info={info}\n              warning={warning}\n              error={error}\n            >\n              <Input\n                id={id}\n                value={value}\n                on_change={handleChange}\n                on_focus={handleFocus}\n                on_blur={handleBlur}\n              />\n            </FieldBlock>\n          )\n        }\n\n        return (\n          <MyCustomField\n            value=\"Nothing to see here\"\n            onChange={(value) => console.log('onChange', value)}\n          />\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const GettingStarted = () => {\n  return (\n    <ComponentBox hideCode>\n      {() => {\n        const existingData = {\n          companyName: 'DNB',\n          companyOrganizationNumber: '123456789',\n          postalAddressSelect: 'companyAddress',\n        }\n\n        function Component() {\n          const { data } = Form.useData('company-form')\n          console.log('State:', data)\n\n          return (\n            <Form.Handler\n              id=\"company-form\"\n              data={existingData}\n              onChange={console.log}\n              onSubmit={console.log}\n            >\n              <Flex.Stack>\n                <Form.MainHeading>Bedrift</Form.MainHeading>\n                <Card spacing=\"medium\">\n                  <Field.String\n                    path=\"/companyName\"\n                    label=\"Bedriftens navn\"\n                    required\n                  />\n                  <Field.OrganizationNumber\n                    path=\"/companyOrganizationNumber\"\n                    required\n                  />\n                  <Field.Selection\n                    path=\"/postalAddressSelect\"\n                    label=\"Ønsket sted for tilsendt post\"\n                    variant=\"radio\"\n                  >\n                    <Field.Option\n                      value=\"companyAddress\"\n                      title=\"Samme som forretningsadresse\"\n                    />\n                    <Field.Option value=\"other\" title=\"Annet\" />\n                  </Field.Selection>\n                </Card>\n                <Form.ButtonRow>\n                  <Form.SubmitButton />\n                </Form.ButtonRow>\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <Component />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const CreateComposedFieldComponent = () => {\n  return (\n    <ComponentBox\n      scope={{\n        DataContext,\n        useDataValue,\n      }}\n      hideCode\n    >\n      {() => {\n        const MyComposedField = (props) => {\n          const birthYear = useDataValue({\n            path: '/birthYear',\n          })\n\n          const handleBirthYearChange = React.useCallback(\n            (sliderData) => {\n              birthYear.handleChange(sliderData.value)\n            },\n            [birthYear],\n          )\n\n          return (\n            <FieldBlock label={props.label ?? 'Name and age'}>\n              <Flex.Horizontal>\n                <Field.String\n                  path=\"/firstName\"\n                  label=\"First name\"\n                  width=\"medium\"\n                  minLength={2}\n                />\n                <Field.String\n                  path=\"/lastName\"\n                  label=\"Last name\"\n                  width=\"medium\"\n                  required\n                />\n                <FieldBlock width=\"large\">\n                  <Slider\n                    min={1900}\n                    max={new Date().getFullYear()}\n                    step={1}\n                    label=\"Birth year\"\n                    label_direction=\"vertical\"\n                    value={parseFloat(String(birthYear.value))}\n                    on_change={handleBirthYearChange}\n                    on_drag_start={birthYear.handleFocus}\n                    on_drag_end={birthYear.handleBlur}\n                    status={birthYear.error?.message}\n                    tooltip\n                  />\n                </FieldBlock>\n              </Flex.Horizontal>\n            </FieldBlock>\n          )\n        }\n\n        const data = {\n          firstName: 'John',\n          birthYear: 2000,\n        }\n\n        return (\n          <DataContext.Provider\n            data={data}\n            onChange={(data) => console.log('onChange', data)}\n          >\n            <MyComposedField label=\"My custom label\" />\n          </DataContext.Provider>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const BaseFieldComponents = () => {\n  return (\n    <ComponentBox\n      scope={{\n        StepsLayout,\n        Value,\n      }}\n    >\n      <Card stack>\n        <Field.String\n          label=\"Text field\"\n          value=\"Lorem Ipsum\"\n          onChange={(value) => console.log('onChange', value)}\n        />\n        <Field.Number\n          label=\"Number Field\"\n          value={789}\n          onChange={(value) => console.log('onChange', value)}\n        />\n        <Field.Boolean\n          label=\"Boolean Field\"\n          value={true}\n          onChange={(value) => console.log('onChange', value)}\n        />\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const FeatureFields = () => {\n  return (\n    <ComponentBox\n      scope={{\n        StepsLayout,\n        Value,\n      }}\n    >\n      <Card stack>\n        <Field.String label=\"Fornavn\" value=\"John\" />\n        <Field.String label=\"Etternavn\" value=\"Smith\" />\n        <Field.NationalIdentityNumber value=\"20058512345\" />\n        <Field.Email value=\"john@smith.email\" />\n        <Field.PhoneNumber value=\"+47 98765432\" />\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const LayoutComponents = () => {\n  return (\n    <ComponentBox\n      scope={{\n        StepsLayout,\n        Value,\n      }}\n    >\n      <Flex.Stack>\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Card stack>\n          <Form.SubHeading>Name</Form.SubHeading>\n\n          <Field.String label=\"Fornavn\" value=\"John\" />\n          <Field.String label=\"Etternavn\" value=\"Smith\" />\n        </Card>\n\n        <Card stack>\n          <Form.SubHeading>More information</Form.SubHeading>\n\n          <Field.NationalIdentityNumber value=\"20058512345\" />\n          <Field.Email value=\"john@smith.email\" />\n          <Field.PhoneNumber value=\"+47 98765432\" />\n        </Card>\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n\nexport const VisibilityBasedOnData = () => {\n  return (\n    <ComponentBox\n      scope={{\n        StepsLayout,\n        Value,\n      }}\n    >\n      <Form.Handler\n        data={{\n          firstName: undefined,\n          lastName: 'Smith',\n          advanced: false,\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Flex.Stack>\n          <Form.MainHeading>Profile</Form.MainHeading>\n\n          <Card stack>\n            <Form.SubHeading>Name</Form.SubHeading>\n\n            <Field.String path=\"/firstName\" label=\"Fornavn\" />\n            <Field.String path=\"/lastName\" label=\"Etternavn\" />\n          </Card>\n        </Flex.Stack>\n        <Field.Boolean\n          path=\"/advanced\"\n          variant=\"checkbox-button\"\n          label=\"More fields\"\n        />\n        <Form.Visibility pathTrue=\"/advanced\">\n          <Flex.Stack>\n            <Card stack>\n              <Form.SubHeading>More information</Form.SubHeading>\n\n              <Field.NationalIdentityNumber value=\"20058512345\" />\n              <Field.Email value=\"john@smith.email\" />\n              <Field.PhoneNumber value=\"+47 98765432\" />\n            </Card>\n          </Flex.Stack>\n        </Form.Visibility>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const UsingFormHandler = () => {\n  return (\n    <ComponentBox\n      scope={{\n        StepsLayout,\n        Value,\n      }}\n    >\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Smith',\n          ssn: '20058512345',\n          email: 'john@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Card stack>\n          <Field.String path=\"/firstName\" label=\"Fornavn\" />\n          <Field.String path=\"/lastName\" label=\"Etternavn\" />\n          <Field.NationalIdentityNumber path=\"/ssn\" />\n          <Field.Email path=\"/email\" />\n          <Field.PhoneNumber path=\"/phone\" />\n\n          <Form.ButtonRow>\n            <Form.SubmitButton />\n          </Form.ButtonRow>\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Validation = () => {\n  return (\n    <ComponentBox\n      scope={{\n        StepsLayout,\n        Value,\n      }}\n    >\n      <Form.Handler\n        data={{\n          firstName: undefined,\n          lastName: 'Smith',\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Card stack>\n          <Field.String path=\"/firstName\" label=\"Fornavn\" required />\n          <Field.String path=\"/lastName\" label=\"Etternavn\" required />\n          <Field.NationalIdentityNumber path=\"/ssn\" validateInitially />\n          <Field.Email path=\"/email\" validateInitially />\n          <Field.PhoneNumber path=\"/phone\" validateInitially />\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithSteps = () => {\n  return (\n    <ComponentBox\n      scope={{\n        StepsLayout,\n        Value,\n      }}\n    >\n      <Form.Handler\n        data={{\n          firstName: undefined,\n          lastName: 'Smith',\n          advanced: false,\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <StepsLayout mode=\"loose\">\n          <StepsLayout.Step title=\"Name\">\n            <Form.MainHeading>Profile</Form.MainHeading>\n\n            <Card stack>\n              <Form.SubHeading>Name</Form.SubHeading>\n\n              <Field.String path=\"/firstName\" label=\"Fornavn\" required />\n              <Field.String path=\"/lastName\" label=\"Etternavn\" required />\n            </Card>\n\n            <Form.ButtonRow>\n              <StepsLayout.NextButton />\n            </Form.ButtonRow>\n          </StepsLayout.Step>\n\n          <StepsLayout.Step title=\"More information\">\n            <Form.MainHeading>Profile</Form.MainHeading>\n\n            <Card stack>\n              <Form.SubHeading>More information</Form.SubHeading>\n\n              <Field.NationalIdentityNumber path=\"/ssn\" />\n              <Field.Email path=\"/email\" />\n              <Field.PhoneNumber path=\"/phone\" />\n            </Card>\n\n            <Form.ButtonRow>\n              <StepsLayout.PreviousButton />\n              <StepsLayout.NextButton />\n            </Form.ButtonRow>\n          </StepsLayout.Step>\n\n          <StepsLayout.Step title=\"Summary\">\n            <Form.MainHeading>Profile</Form.MainHeading>\n\n            <Card stack>\n              <Flex.Container>\n                <Value.String path=\"/firstName\" label=\"Fornavn\" />\n                <Value.String path=\"/lastName\" label=\"Etternavn\" />\n              </Flex.Container>\n\n              <Value.NationalIdentityNumber path=\"/ssn\" />\n              <Value.Email path=\"/email\" />\n              <Value.PhoneNumber path=\"/phone\" />\n            </Card>\n\n            <Form.ButtonRow>\n              <StepsLayout.PreviousButton />\n              <Form.SubmitButton />\n            </Form.ButtonRow>\n          </StepsLayout.Step>\n        </StepsLayout>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","import React, { useContext, useMemo } from 'react'\nimport pointer from 'json-pointer'\nimport type { ComponentProps } from '../../types'\nimport Context from '../Context'\n\nexport type Props = ComponentProps & {\n  /** JSON Pointer for where in the source dataset to point at in sub components */\n  path?: string\n  iterate?: boolean\n  children?: React.ReactNode\n}\n\nfunction At(props: Props) {\n  const { path = '/', iterate, children } = props\n  const dataContext = useContext(Context)\n  const { data: contextData, handlePathChange: contextHandlePathChange } =\n    dataContext\n\n  const data =\n    contextData && pointer.has(contextData, path)\n      ? pointer.get(contextData, path)\n      : undefined\n\n  const handlePathChange = useMemo(\n    () =>\n      contextHandlePathChange\n        ? (changePath, value) => {\n            contextHandlePathChange(`${path}${changePath}`, value)\n          }\n        : undefined,\n    [contextHandlePathChange, path]\n  )\n\n  if (iterate) {\n    if (!Array.isArray(data)) {\n      return null\n    }\n    return (\n      <>\n        {data.map((element, i) => {\n          const handlePathChange = contextHandlePathChange\n            ? (changePath, value) => {\n                contextHandlePathChange(`${path}/${i}${changePath}`, value)\n              }\n            : undefined\n\n          return (\n            <Context.Provider\n              key={`element${i}`}\n              value={{\n                ...dataContext,\n                data: element,\n                handlePathChange,\n              }}\n            >\n              {children}\n            </Context.Provider>\n          )\n        })}\n      </>\n    )\n  }\n\n  return (\n    <Context.Provider\n      value={{\n        ...dataContext,\n        data,\n        handlePathChange,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  )\n}\n\nAt._supportsSpacingProps = true\nexport default At\n","import React from 'react'\n\ninterface StepsContextState {\n  activeIndex: number\n  handlePrevious: () => void\n  handleNext: () => void\n}\n\nconst StepsContext = React.createContext<StepsContextState | undefined>(\n  undefined\n)\n\nexport default StepsContext\n","import React, { useContext } from 'react'\nimport classnames from 'classnames'\nimport { ComponentProps } from '../../types'\nimport {\n  Props as FlexContainerProps,\n  pickFlexContainerProps,\n} from '../../../../components/flex/Container'\nimport StepsContext from '../StepsContext'\nimport Flex from '../../../../components/flex/Flex'\n\nexport type Props = ComponentProps &\n  FlexContainerProps & {\n    index?: number\n    title?: string\n  }\n\nfunction Step(props: Props) {\n  const { className, index, children } = props\n  const stepsContext = useContext(StepsContext)\n\n  if (stepsContext?.activeIndex !== index) {\n    // Another step is active\n    return null\n  }\n\n  return (\n    <Flex.Container\n      className={classnames('dnb-forms-step', className)}\n      direction=\"vertical\"\n      {...pickFlexContainerProps(props)}\n    >\n      {children}\n    </Flex.Container>\n  )\n}\n\nStep._supportsSpacingProps = true\nexport default Step\n","import React, { useContext } from 'react'\nimport classnames from 'classnames'\nimport type { ComponentProps } from '../../types'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/button/Button'\nimport SharedContext from '../../../../shared/Context'\nimport StepsContext from '../StepsContext'\nimport ButtonRow from '../../Form/ButtonRow'\n\nexport type Props = ComponentProps &\n  ButtonProps & {\n    children?: string\n  }\n\nfunction NextButton(props: Props) {\n  const sharedContext = useContext(SharedContext)\n  const {\n    className,\n    variant = 'primary',\n    icon_position = 'right',\n    icon = 'chevron_right',\n    children = sharedContext?.translation.Forms.stepNext,\n  } = props\n  const stepsContext = useContext(StepsContext)\n\n  return (\n    <ButtonRow>\n      <Button\n        {...props}\n        className={classnames('dnb-forms-next-button', className)}\n        onClick={stepsContext?.handleNext}\n        variant={variant}\n        icon_position={icon_position}\n        icon={icon}\n      >\n        {children}\n      </Button>\n    </ButtonRow>\n  )\n}\n\nNextButton._supportsSpacingProps = true\nexport default NextButton\n","import React, { useContext } from 'react'\nimport classnames from 'classnames'\nimport type { ComponentProps } from '../../types'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/button/Button'\nimport SharedContext from '../../../../shared/Context'\nimport StepsContext from '../StepsContext'\nimport ButtonRow from '../../Form/ButtonRow'\n\nexport type Props = ComponentProps &\n  ButtonProps & {\n    children?: string\n  }\n\nfunction PreviousButton(props: Props) {\n  const sharedContext = useContext(SharedContext)\n  const {\n    className,\n    variant = 'tertiary',\n    icon_position = 'left',\n    icon = 'chevron_left',\n    children = sharedContext?.translation.Forms.stepPrevious,\n  } = props\n  const stepsContext = useContext(StepsContext)\n\n  return (\n    <ButtonRow>\n      <Button\n        {...props}\n        className={classnames('dnb-forms-previous-button', className)}\n        onClick={stepsContext?.handlePrevious}\n        variant={variant}\n        icon_position={icon_position}\n        icon={icon}\n      >\n        {children}\n      </Button>\n    </ButtonRow>\n  )\n}\n\nPreviousButton._supportsSpacingProps = true\nexport default PreviousButton\n","import React from 'react'\nimport classnames from 'classnames'\nimport { ComponentProps } from '../../types'\nimport ButtonRow from '../../Form/ButtonRow'\nimport NextButton from '../NextButton'\nimport PreviousButton from '../PreviousButton'\n\nexport type Props = ComponentProps & {\n  children?: string\n}\n\nfunction Buttons(props: Props) {\n  const { className } = props\n  return (\n    <ButtonRow\n      className={classnames('dnb-forms-buttons', className)}\n      {...props}\n    >\n      <PreviousButton />\n      <NextButton />\n    </ButtonRow>\n  )\n}\n\nButtons._supportsSpacingProps = true\nexport default Buttons\n","import React, { useContext, useState, useCallback } from 'react'\nimport classnames from 'classnames'\nimport { Space, StepIndicator } from '../../../components'\nimport { makeUniqueId } from '../../../shared/component-helper'\nimport { ComponentProps } from '../types'\nimport DataContext from '../DataContext/Context'\nimport Step, { Props as StepProps } from './Step'\nimport StepsContext from './StepsContext'\nimport NextButton from './NextButton'\nimport PreviousButton from './PreviousButton'\nimport Buttons from './Buttons'\n\nexport type Props = ComponentProps & {\n  id?: string\n  mode?: 'static' | 'strict' | 'loose'\n  scrollTopOnStepChange?: boolean\n  initialActiveIndex?: number\n  onStepChange?: (index: number) => void\n  children: React.ReactNode\n}\n\nfunction StepsLayout(props: Props) {\n  const {\n    className,\n    id = makeUniqueId(),\n    mode = 'strict',\n    scrollTopOnStepChange,\n    initialActiveIndex = 0,\n    onStepChange,\n    children,\n    ...rest\n  } = props\n  const dataContext = useContext(DataContext)\n  const [activeIndex, setActiveIndex] =\n    useState<number>(initialActiveIndex)\n\n  const handlePrevious = useCallback(() => {\n    setActiveIndex((activeIndex) => {\n      onStepChange?.(activeIndex - 1)\n      return activeIndex - 1\n    })\n    if (scrollTopOnStepChange) {\n      window?.scrollTo({ top: 0, behavior: 'smooth' })\n    }\n  }, [scrollTopOnStepChange, onStepChange])\n\n  const handleNext = useCallback(() => {\n    if (!dataContext.hasErrors()) {\n      setActiveIndex((activeIndex) => {\n        onStepChange?.(activeIndex + 1)\n        return activeIndex + 1\n      })\n      if (scrollTopOnStepChange) {\n        window?.scrollTo({ top: 0, behavior: 'smooth' })\n      }\n    } else {\n      dataContext.setShowAllErrors(true)\n    }\n  }, [dataContext, scrollTopOnStepChange, onStepChange])\n\n  const stepIndicatorData = React.Children.map(children, (child) => {\n    if (!React.isValidElement(child) || child.type !== Step) {\n      throw new Error('Only Step can be children of StepsLayout')\n    }\n    return child.props.title ?? 'Title missing'\n  }) as string[]\n\n  const handleChange = useCallback(({ current_step }) => {\n    setActiveIndex(current_step)\n  }, [])\n\n  return (\n    <StepsContext.Provider\n      value={{\n        activeIndex,\n        handlePrevious,\n        handleNext,\n      }}\n    >\n      <Space\n        className={classnames('dnb-forms-steps-layout', className)}\n        {...rest}\n      >\n        <aside className=\"dnb-forms-steps-layout__sidebar\">\n          <StepIndicator.Sidebar sidebar_id={id} />\n          <StepIndicator\n            bottom\n            current_step={activeIndex}\n            data={stepIndicatorData}\n            mode={mode}\n            no_animation\n            on_change={handleChange}\n            sidebar_id={id}\n            title=\"\"\n          />\n        </aside>\n        <div className=\"dnb-forms-steps-layout__contents\">\n          {React.Children.map(children, (child, i) => {\n            if (React.isValidElement(child) && child.type === Step) {\n              return React.cloneElement(\n                child as React.ReactElement<StepProps>,\n                {\n                  index: i,\n                }\n              )\n            }\n            return child\n          })}\n        </div>\n      </Space>\n    </StepsContext.Provider>\n  )\n}\n\nStepsLayout._supportsSpacingProps = true\n\nStepsLayout.Step = Step\nStepsLayout.NextButton = NextButton\nStepsLayout.PreviousButton = PreviousButton\nStepsLayout.Buttons = Buttons\n\nexport default StepsLayout\n","import StepsLayout from './StepsLayout'\nexport { default as StepsContext } from './StepsContext'\n\nexport default StepsLayout\n","import React, { useContext } from 'react'\nimport StringValue, { Props as StringValueProps } from '../String'\nimport SharedContext from '../../../../shared/Context'\n\nexport type Props = StringValueProps\n\nfunction Email(props: Props) {\n  const sharedContext = useContext(SharedContext)\n\n  const stringProps: Props = {\n    ...props,\n    label: props.label ?? sharedContext?.translation.Forms.emailLabel,\n  }\n  return <StringValue {...stringProps} />\n}\n\nEmail._supportsSpacingProps = true\nexport default Email\n","import React, { useContext } from 'react'\nimport StringValue, { Props as StringValueProps } from '../String'\nimport SharedContext from '../../../../shared/Context'\nimport {\n  format,\n  cleanNumber,\n} from '../../../../components/number-format/NumberUtils'\n\nexport type Props = StringValueProps\n\nfunction NationalIdentityNumber(props: Props) {\n  const sharedContext = useContext(SharedContext)\n\n  const stringValueProps: Props = {\n    ...props,\n    label:\n      props.label ??\n      (props.inline\n        ? undefined\n        : sharedContext?.translation.Forms.nationalIdentityNumberLabel),\n    prepare: (value) =>\n      format(cleanNumber(value), {\n        nin: true,\n      }).toString(),\n  }\n  return <StringValue {...stringValueProps} />\n}\n\nNationalIdentityNumber._supportsSpacingProps = true\nexport default NationalIdentityNumber\n","import React, { useContext } from 'react'\nimport StringValue, { Props as StringValueProps } from '../String'\nimport SharedContext from '../../../../shared/Context'\nimport {\n  format,\n  cleanNumber,\n} from '../../../../components/number-format/NumberUtils'\n\nexport type Props = StringValueProps\n\nfunction PhoneNumber(props: Props) {\n  const sharedContext = useContext(SharedContext)\n\n  const stringValueProps: Props = {\n    ...props,\n    label:\n      props.label ??\n      (props.inline\n        ? undefined\n        : sharedContext?.translation.Forms.phoneNumberLabel),\n    prepare: (value) =>\n      format(cleanNumber(value), {\n        phone: true,\n      }).toString(),\n  }\n  return <StringValue {...stringValueProps} />\n}\n\nPhoneNumber._supportsSpacingProps = true\nexport default PhoneNumber\n","import React from 'react'\nimport ValueBlock from '../../ValueBlock'\nimport { useDataValue } from '../../hooks'\nimport { ValueProps } from '../../types'\nimport { pickSpacingProps } from '../../../../components/flex/utils'\n\nexport type Props = ValueProps<string>\n\nfunction StringComponent(props: Props) {\n  const {\n    className,\n    label,\n    placeholder,\n    value,\n    inline,\n    showEmpty,\n    prepare = (value) => value,\n  } = useDataValue(props)\n\n  return (\n    <ValueBlock\n      className={className}\n      label={label}\n      showEmpty={showEmpty}\n      placeholder={placeholder}\n      inline={inline}\n      {...pickSpacingProps(props)}\n    >\n      {prepare(value)}\n    </ValueBlock>\n  )\n}\n\nStringComponent._supportsSpacingProps = true\nexport default StringComponent\n","interface FormatNumberOptions {\n  prefix?: string\n  suffix?: string\n  /** Character to use for separating groups of number. Like '12 345' for 12345. */\n  thousandSeparator?: string\n  /** Max number of decimals. For source numbers with higher number of decimals, the number will be rounded. Will not add leading zeros. */\n  decimalLimit?: number\n  /** Set a fixed number of decimals (rounding when more decimals, adding leading zeros when less). */\n  fixedDecimals?: number\n  /** Symbol to separate between digits and decimals. */\n  decimalSymbol?: string\n  /** For showing magnitude of original number. For instance, 23500000 with magnitude 6 displays as 23,5 */\n  magnitude?: number\n}\n\nexport function formatNumber(\n  value: number,\n  options?: FormatNumberOptions\n): string {\n  const {\n    thousandSeparator,\n    decimalLimit,\n    fixedDecimals,\n    decimalSymbol = ',', // Norwegian default format\n    magnitude,\n    prefix,\n    suffix,\n  } = options ?? {}\n\n  const withMagnitude =\n    magnitude !== undefined ? value / Math.pow(10, magnitude) : value\n\n  const withDecimals =\n    fixedDecimals !== undefined\n      ? withMagnitude.toFixed(fixedDecimals)\n      : decimalLimit\n      ? (\n          Math.round(withMagnitude * Math.pow(10, decimalLimit)) /\n          Math.pow(10, decimalLimit)\n        ).toString()\n      : withMagnitude.toString()\n\n  const withDecimalSymbol =\n    decimalSymbol !== undefined\n      ? withDecimals.replace('.', decimalSymbol)\n      : withDecimals\n\n  const withThousandSeparator =\n    thousandSeparator !== undefined\n      ? withDecimalSymbol.replace(\n          /\\B(?=(\\d{3})+(?!\\d))/g,\n          thousandSeparator\n        )\n      : withDecimalSymbol\n\n  const withPrefix =\n    prefix !== undefined\n      ? prefix + withThousandSeparator\n      : withThousandSeparator\n\n  const withSuffix =\n    suffix !== undefined ? withPrefix + suffix : withPrefix\n\n  return withSuffix\n}\n\nexport function parseFormattedNumber(\n  formattedValue: string,\n  options?: FormatNumberOptions\n): number {\n  const {\n    thousandSeparator,\n    decimalSymbol = ',', // Norwegian default format\n    magnitude,\n    prefix,\n    suffix,\n  } = options ?? {}\n\n  const parsedDecimalSymbol =\n    decimalSymbol !== undefined\n      ? formattedValue.replace(decimalSymbol, '.')\n      : formattedValue\n\n  const parsedThousandSeparator =\n    thousandSeparator !== undefined\n      ? parsedDecimalSymbol.split(thousandSeparator).join('')\n      : parsedDecimalSymbol\n\n  const parsedPrefix =\n    prefix !== undefined &&\n    parsedThousandSeparator.substring(0, prefix.length) === prefix\n      ? parsedThousandSeparator.substring(prefix.length)\n      : parsedThousandSeparator\n\n  const parsedSuffix =\n    suffix !== undefined &&\n    parsedPrefix.slice(suffix.length * -1) === suffix\n      ? parsedPrefix.substring(0, parsedPrefix.length - suffix.length)\n      : parsedPrefix\n\n  const parsedNumber = Number(parsedSuffix)\n\n  const parsedMagnitude =\n    magnitude !== undefined\n      ? // toFixed to avoid inaccuracies (like 10/5 = 1.999999999999998)\n        Number((parsedNumber * Math.pow(10, magnitude)).toFixed(6))\n      : parsedNumber\n\n  return parsedMagnitude\n}\n","import React from 'react'\nimport { formatNumber } from '../../utils'\nimport ValueBlock from '../../ValueBlock'\nimport { useDataValue } from '../../hooks'\nimport { ValueProps } from '../../types'\nimport { pickSpacingProps } from '../../../../components/flex/utils'\n\nexport type Props = ValueProps<number> & {\n  // Formatting\n  thousandSeparator?: string | true\n  decimalSymbol?: string\n  decimalLimit?: number\n  prefix?: string\n  suffix?: string\n}\n\nfunction NumberComponent(props: Props) {\n  const {\n    className,\n    label,\n    placeholder,\n    value,\n    inline,\n    showEmpty,\n    thousandSeparator,\n    decimalSymbol,\n    decimalLimit,\n    prefix,\n    suffix,\n  } = useDataValue(props)\n\n  return (\n    <ValueBlock\n      className={className}\n      label={label}\n      showEmpty={showEmpty}\n      placeholder={placeholder}\n      inline={inline}\n      {...pickSpacingProps(props)}\n    >\n      {value !== undefined\n        ? formatNumber(value, {\n            thousandSeparator:\n              thousandSeparator === true ? ' ' : thousandSeparator,\n            decimalSymbol,\n            decimalLimit,\n            prefix,\n            suffix,\n          })\n        : null}\n    </ValueBlock>\n  )\n}\n\nNumberComponent._supportsSpacingProps = true\nexport default NumberComponent\n","import React, { useContext } from 'react'\nimport ValueBlock from '../../ValueBlock'\nimport { useDataValue } from '../../hooks'\nimport { ValueProps } from '../../types'\nimport { pickSpacingProps } from '../../../../components/flex/utils'\nimport SharedContext from '../../../../shared/Context'\n\nexport type Props = ValueProps<boolean>\n\nfunction BooleanComponent(props: Props) {\n  const sharedContext = useContext(SharedContext)\n  const { className, label, placeholder, showEmpty, value, inline } =\n    useDataValue(props)\n\n  return (\n    <ValueBlock\n      className={className}\n      label={label}\n      showEmpty={showEmpty}\n      placeholder={placeholder}\n      inline={inline}\n      {...pickSpacingProps(props)}\n    >\n      {value === true || value === false\n        ? value === true\n          ? sharedContext?.translation.Forms.booleanYes\n          : sharedContext?.translation.Forms.booleanNo\n        : null}\n    </ValueBlock>\n  )\n}\n\nBooleanComponent._supportsSpacingProps = true\nexport default BooleanComponent\n","import React from 'react'\nimport NumberValue, { Props as NumberValueProps } from '../Number'\n\nexport type Props = NumberValueProps\n\nfunction Currency(props: Props) {\n  const numberProps: Props = {\n    ...props,\n    label: props.label,\n    thousandSeparator: props.thousandSeparator ?? ' ',\n    suffix: props.suffix ?? ' kr',\n  }\n  return <NumberValue {...numberProps} />\n}\n\nCurrency._supportsSpacingProps = true\nexport default Currency\n","import React, { useContext } from 'react'\nimport StringValue, { Props as StringValueProps } from '../String'\nimport SharedContext from '../../../../shared/Context'\n\nexport type Props = StringValueProps\n\nfunction DateComponent(props: Props) {\n  const sharedContext = useContext(SharedContext)\n\n  const stringProps: Props = {\n    ...props,\n    label: props.label ?? sharedContext?.translation.Forms.dateLabel,\n  }\n  return <StringValue {...stringProps} />\n}\n\nDateComponent._supportsSpacingProps = true\nexport default DateComponent\n","import React, { useContext } from 'react'\nimport StringValue, { Props as StringValueProps } from '../String'\nimport {\n  format,\n  cleanNumber,\n} from '../../../../components/number-format/NumberUtils'\nimport SharedContext from '../../../../shared/Context'\n\nexport type Props = StringValueProps\n\nfunction BankAccountNumber(props: Props) {\n  const sharedContext = useContext(SharedContext)\n\n  const stringValueProps: Props = {\n    ...props,\n    label:\n      props.label ??\n      (props.inline\n        ? undefined\n        : sharedContext?.translation.Forms.bankAccountNumberLabel),\n    prepare: (value) =>\n      format(cleanNumber(value), {\n        ban: true,\n      }).toString(),\n  }\n  return <StringValue {...stringValueProps} />\n}\n\nBankAccountNumber._supportsSpacingProps = true\nexport default BankAccountNumber\n","import React from 'react'\nimport { Span } from '../../../elements'\nimport { FormLabel } from '../../../components'\nimport classnames from 'classnames'\nimport { ValueProps } from '../types'\nimport { pickSpacingProps } from '../../../components/flex/utils'\n\nexport type Props = Omit<ValueProps<unknown>, 'value'> & {\n  children?: React.ReactNode\n}\n\nfunction ValueBlock(props: Props) {\n  const { className, label, inline, placeholder, showEmpty, children } =\n    props\n  if (\n    (children === undefined || children === null || children === false) &&\n    !showEmpty &&\n    !placeholder\n  ) {\n    return null\n  }\n\n  return (\n    <Span\n      className={classnames(\n        'dnb-forms-value',\n        inline && 'dnb-forms-value-block--inline',\n        className\n      )}\n      {...pickSpacingProps(props)}\n    >\n      {label && (\n        <FormLabel\n          className=\"dnb-forms-value-block__label\"\n          label_direction={inline ? 'horizontal' : 'vertical'}\n        >\n          {label}\n        </FormLabel>\n      )}\n      {children ?? (\n        <span className=\"dnb-forms-value-block__placeholder\">\n          {placeholder}\n        </span>\n      )}\n    </Span>\n  )\n}\n\nValueBlock._supportsSpacingProps = true\nexport default ValueBlock\n"],"names":["CreateBasicFieldComponent","_jsx","ComponentBox","scope","useDataValue","hideCode","noInline","children","GettingStarted","CreateComposedFieldComponent","DataContext","BaseFieldComponents","StepsLayout","Value","FeatureFields","LayoutComponents","VisibilityBasedOnData","UsingFormHandler","Validation","WithSteps","At","props","path","iterate","dataContext","useContext","Context","data","contextData","handlePathChange","contextHandlePathChange","pointer","undefined","useMemo","changePath","value","Array","isArray","_Fragment","map","element","i","Provider","_supportsSpacingProps","StepsContext","React","Step","className","index","stepsContext","activeIndex","Flex","classnames","direction","pickFlexContainerProps","NextButton","sharedContext","SharedContext","variant","icon_position","icon","translation","Forms","stepNext","ButtonRow","Button","onClick","handleNext","PreviousButton","stepPrevious","handlePrevious","Buttons","_jsxs","id","makeUniqueId","mode","scrollTopOnStepChange","initialActiveIndex","onStepChange","rest","setActiveIndex","useState","useCallback","_window","window","scrollTo","top","behavior","_window2","hasErrors","setShowAllErrors","stepIndicatorData","child","_child$props$title","type","Error","title","handleChange","_ref","current_step","Space","StepIndicator","Sidebar","sidebar_id","bottom","no_animation","on_change","Email","_props$label","stringProps","label","emailLabel","StringValue","NationalIdentityNumber","stringValueProps","inline","nationalIdentityNumberLabel","prepare","format","cleanNumber","nin","toString","PhoneNumber","phoneNumberLabel","phone","StringComponent","placeholder","showEmpty","ValueBlock","pickSpacingProps","formatNumber","options","thousandSeparator","decimalLimit","fixedDecimals","decimalSymbol","magnitude","prefix","suffix","withMagnitude","Math","pow","withDecimals","toFixed","round","withDecimalSymbol","replace","withThousandSeparator","withPrefix","NumberComponent","BooleanComponent","booleanYes","booleanNo","Currency","_props$thousandSepara","_props$suffix","numberProps","NumberValue","DateComponent","dateLabel","BankAccountNumber","bankAccountNumberLabel","ban","Span","FormLabel","label_direction"],"sourceRoot":""}