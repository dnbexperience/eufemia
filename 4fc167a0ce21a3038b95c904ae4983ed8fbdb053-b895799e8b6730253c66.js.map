{"version":3,"file":"4fc167a0ce21a3038b95c904ae4983ed8fbdb053-b895799e8b6730253c66.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/DataContext/At/At.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/StepsContext.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/Step/Step.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/NextButton/NextButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/PreviousButton/PreviousButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/Buttons/Buttons.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/StepsLayout.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/useStep.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/index.ts"],"sourcesContent":["import React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { Input, Slider, Card, Flex } from '@dnb/eufemia/src'\nimport {\n  Form,\n  StepsLayout,\n  Field,\n  Value,\n  FieldBlock,\n  useFieldProps,\n  DataContext,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport const CreateBasicFieldComponent = () => {\n  return (\n    <ComponentBox\n      scope={{\n        useFieldProps,\n      }}\n      hideCode\n    >\n      {() => {\n        const MyCustomField = (props) => {\n          const fromInput = React.useCallback(({ value }) => value, [])\n\n          const preparedProps = {\n            ...props,\n            fromInput,\n            validator: (value) => {\n              return value === 'secret'\n                ? new Error('Do not reveal the secret!')\n                : undefined\n            },\n          }\n\n          const {\n            id,\n            info,\n            warning,\n            error,\n            value,\n            handleChange,\n            handleFocus,\n            handleBlur,\n          } = useFieldProps(preparedProps)\n\n          return (\n            <FieldBlock\n              forId={id}\n              label=\"What is the secret of the custom field?\"\n              info={info}\n              warning={warning}\n              error={error}\n            >\n              <Input\n                id={id}\n                value={value}\n                on_change={handleChange}\n                on_focus={handleFocus}\n                on_blur={handleBlur}\n              />\n            </FieldBlock>\n          )\n        }\n\n        return (\n          <MyCustomField\n            value=\"Nothing to see here\"\n            onChange={(value) => console.log('onChange', value)}\n          />\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const GettingStarted = () => {\n  return (\n    <ComponentBox hideCode>\n      {() => {\n        const existingData = {\n          companyName: 'DNB',\n          companyOrganizationNumber: '123456789',\n          postalAddressSelect: 'companyAddress',\n        }\n\n        function Component() {\n          const { data } = Form.useData('company-form')\n          console.log('State:', data)\n\n          return (\n            <Form.Handler\n              id=\"company-form\"\n              data={existingData}\n              onChange={console.log}\n              onSubmit={console.log}\n            >\n              <Flex.Stack>\n                <Form.MainHeading>Bedrift</Form.MainHeading>\n                <Card spacing=\"medium\">\n                  <Field.String\n                    path=\"/companyName\"\n                    label=\"Bedriftens navn\"\n                    required\n                  />\n                  <Field.OrganizationNumber\n                    path=\"/companyOrganizationNumber\"\n                    required\n                  />\n                  <Field.Selection\n                    path=\"/postalAddressSelect\"\n                    label=\"Ønsket sted for tilsendt post\"\n                    variant=\"radio\"\n                  >\n                    <Field.Option\n                      value=\"companyAddress\"\n                      title=\"Samme som forretningsadresse\"\n                    />\n                    <Field.Option value=\"other\" title=\"Annet\" />\n                  </Field.Selection>\n                </Card>\n                <Form.ButtonRow>\n                  <Form.SubmitButton />\n                </Form.ButtonRow>\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <Component />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const CreateComposedFieldComponent = () => {\n  return (\n    <ComponentBox\n      scope={{\n        DataContext,\n        useFieldProps,\n      }}\n      hideCode\n    >\n      {() => {\n        const MyComposedField = (props) => {\n          const birthYear = useFieldProps({\n            path: '/birthYear',\n          })\n\n          const handleBirthYearChange = React.useCallback(\n            (sliderData) => {\n              birthYear.handleChange(sliderData.value)\n            },\n            [birthYear],\n          )\n\n          return (\n            <FieldBlock label={props.label ?? 'Name and age'}>\n              <Flex.Horizontal>\n                <Field.String\n                  path=\"/firstName\"\n                  label=\"First name\"\n                  width=\"medium\"\n                  minLength={2}\n                />\n                <Field.String\n                  path=\"/lastName\"\n                  label=\"Last name\"\n                  width=\"medium\"\n                  required\n                />\n                <FieldBlock width=\"large\">\n                  <Slider\n                    min={1900}\n                    max={new Date().getFullYear()}\n                    step={1}\n                    label=\"Birth year\"\n                    label_direction=\"vertical\"\n                    value={parseFloat(String(birthYear.value))}\n                    on_change={handleBirthYearChange}\n                    on_drag_start={birthYear.handleFocus}\n                    on_drag_end={birthYear.handleBlur}\n                    status={birthYear.error?.message}\n                    tooltip\n                  />\n                </FieldBlock>\n              </Flex.Horizontal>\n            </FieldBlock>\n          )\n        }\n\n        const data = {\n          firstName: 'John',\n          birthYear: 2000,\n        }\n\n        return (\n          <DataContext.Provider\n            data={data}\n            onChange={(data) => console.log('onChange', data)}\n          >\n            <MyComposedField label=\"My custom label\" />\n          </DataContext.Provider>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const BaseFieldComponents = () => {\n  return (\n    <ComponentBox\n      scope={{\n        StepsLayout,\n        Value,\n      }}\n    >\n      <Card stack>\n        <Field.String\n          label=\"Text field\"\n          value=\"Lorem Ipsum\"\n          onChange={(value) => console.log('onChange', value)}\n        />\n        <Field.Number\n          label=\"Number Field\"\n          value={789}\n          onChange={(value) => console.log('onChange', value)}\n        />\n        <Field.Boolean\n          label=\"Boolean Field\"\n          value={true}\n          onChange={(value) => console.log('onChange', value)}\n        />\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const FeatureFields = () => {\n  return (\n    <ComponentBox\n      scope={{\n        StepsLayout,\n        Value,\n      }}\n    >\n      <Card stack>\n        <Field.String label=\"Fornavn\" value=\"John\" />\n        <Field.String label=\"Etternavn\" value=\"Smith\" />\n        <Field.NationalIdentityNumber value=\"20058512345\" />\n        <Field.Email value=\"john@smith.email\" />\n        <Field.PhoneNumber value=\"+47 98765432\" />\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const LayoutComponents = () => {\n  return (\n    <ComponentBox\n      scope={{\n        StepsLayout,\n        Value,\n      }}\n    >\n      <Flex.Stack>\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Card stack>\n          <Form.SubHeading>Name</Form.SubHeading>\n\n          <Field.String label=\"Fornavn\" value=\"John\" />\n          <Field.String label=\"Etternavn\" value=\"Smith\" />\n        </Card>\n\n        <Card stack>\n          <Form.SubHeading>More information</Form.SubHeading>\n\n          <Field.NationalIdentityNumber value=\"20058512345\" />\n          <Field.Email value=\"john@smith.email\" />\n          <Field.PhoneNumber value=\"+47 98765432\" />\n        </Card>\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n\nexport const VisibilityBasedOnData = () => {\n  return (\n    <ComponentBox\n      scope={{\n        StepsLayout,\n        Value,\n      }}\n    >\n      <Form.Handler\n        data={{\n          firstName: undefined,\n          lastName: 'Smith',\n          advanced: false,\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Flex.Stack>\n          <Form.MainHeading>Profile</Form.MainHeading>\n\n          <Card stack>\n            <Form.SubHeading>Name</Form.SubHeading>\n\n            <Field.String path=\"/firstName\" label=\"Fornavn\" />\n            <Field.String path=\"/lastName\" label=\"Etternavn\" />\n          </Card>\n        </Flex.Stack>\n        <Field.Boolean\n          path=\"/advanced\"\n          variant=\"checkbox-button\"\n          label=\"More fields\"\n        />\n        <Form.Visibility pathTrue=\"/advanced\">\n          <Flex.Stack>\n            <Card stack>\n              <Form.SubHeading>More information</Form.SubHeading>\n\n              <Field.NationalIdentityNumber value=\"20058512345\" />\n              <Field.Email value=\"john@smith.email\" />\n              <Field.PhoneNumber value=\"+47 98765432\" />\n            </Card>\n          </Flex.Stack>\n        </Form.Visibility>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const UsingFormHandler = () => {\n  return (\n    <ComponentBox\n      scope={{\n        StepsLayout,\n        Value,\n      }}\n    >\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Smith',\n          ssn: '20058512345',\n          email: 'john@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Card stack>\n          <Field.String path=\"/firstName\" label=\"Fornavn\" />\n          <Field.String path=\"/lastName\" label=\"Etternavn\" />\n          <Field.NationalIdentityNumber path=\"/ssn\" />\n          <Field.Email path=\"/email\" />\n          <Field.PhoneNumber path=\"/phone\" />\n\n          <Form.ButtonRow>\n            <Form.SubmitButton />\n          </Form.ButtonRow>\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Validation = () => {\n  return (\n    <ComponentBox\n      scope={{\n        StepsLayout,\n        Value,\n      }}\n    >\n      <Form.Handler\n        data={{\n          firstName: undefined,\n          lastName: 'Smith',\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Card stack>\n          <Field.String path=\"/firstName\" label=\"Fornavn\" required />\n          <Field.String path=\"/lastName\" label=\"Etternavn\" required />\n          <Field.NationalIdentityNumber path=\"/ssn\" validateInitially />\n          <Field.Email path=\"/email\" validateInitially />\n          <Field.PhoneNumber path=\"/phone\" validateInitially />\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithSteps = () => {\n  return (\n    <ComponentBox\n      scope={{\n        StepsLayout,\n        Value,\n      }}\n    >\n      <Form.Handler\n        data={{\n          firstName: undefined,\n          lastName: 'Smith',\n          advanced: false,\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <StepsLayout mode=\"loose\">\n          <StepsLayout.Step title=\"Name\">\n            <Form.MainHeading>Profile</Form.MainHeading>\n\n            <Card stack>\n              <Form.SubHeading>Name</Form.SubHeading>\n\n              <Field.String path=\"/firstName\" label=\"Fornavn\" required />\n              <Field.String path=\"/lastName\" label=\"Etternavn\" required />\n            </Card>\n\n            <Form.ButtonRow>\n              <StepsLayout.NextButton />\n            </Form.ButtonRow>\n          </StepsLayout.Step>\n\n          <StepsLayout.Step title=\"More information\">\n            <Form.MainHeading>Profile</Form.MainHeading>\n\n            <Card stack>\n              <Form.SubHeading>More information</Form.SubHeading>\n\n              <Field.NationalIdentityNumber path=\"/ssn\" />\n              <Field.Email path=\"/email\" />\n              <Field.PhoneNumber path=\"/phone\" />\n            </Card>\n\n            <Form.ButtonRow>\n              <StepsLayout.PreviousButton />\n              <StepsLayout.NextButton />\n            </Form.ButtonRow>\n          </StepsLayout.Step>\n\n          <StepsLayout.Step title=\"Summary\">\n            <Form.MainHeading>Profile</Form.MainHeading>\n\n            <Card stack>\n              <Flex.Container>\n                <Value.String path=\"/firstName\" label=\"Fornavn\" />\n                <Value.String path=\"/lastName\" label=\"Etternavn\" />\n              </Flex.Container>\n\n              <Value.NationalIdentityNumber path=\"/ssn\" />\n              <Value.Email path=\"/email\" />\n              <Value.PhoneNumber path=\"/phone\" />\n            </Card>\n\n            <Form.ButtonRow>\n              <StepsLayout.PreviousButton />\n              <Form.SubmitButton />\n            </Form.ButtonRow>\n          </StepsLayout.Step>\n        </StepsLayout>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","import React, { useContext, useMemo } from 'react'\nimport pointer from 'json-pointer'\nimport type { ComponentProps } from '../../types'\nimport Context, { ContextState } from '../Context'\n\nexport type Props = ComponentProps & {\n  /** JSON Pointer for where in the source dataset to point at in sub components */\n  path?: string\n  iterate?: boolean\n  children?: React.ReactNode\n}\n\nfunction At(props: Props) {\n  const { path = '/', iterate, children } = props\n  const dataContext = useContext(Context)\n  const { data: contextData, handlePathChange: contextHandlePathChange } =\n    dataContext\n\n  const data =\n    contextData && pointer.has(contextData, path)\n      ? pointer.get(contextData, path)\n      : undefined\n\n  const handlePathChange = useMemo(\n    () =>\n      (contextHandlePathChange\n        ? (changePath, value) => {\n            contextHandlePathChange(`${path}${changePath}`, value)\n          }\n        : undefined) as ContextState['handlePathChange'],\n    [contextHandlePathChange, path]\n  )\n\n  if (iterate) {\n    if (!Array.isArray(data)) {\n      return null\n    }\n    return (\n      <>\n        {data.map((element, i) => {\n          const handlePathChange = (\n            contextHandlePathChange\n              ? (changePath, value) => {\n                  contextHandlePathChange(\n                    `${path}/${i}${changePath}`,\n                    value\n                  )\n                }\n              : undefined\n          ) as ContextState['handlePathChange']\n\n          return (\n            <Context.Provider\n              key={`element${i}`}\n              value={{\n                ...dataContext,\n                data: element,\n                handlePathChange,\n              }}\n            >\n              {children}\n            </Context.Provider>\n          )\n        })}\n      </>\n    )\n  }\n\n  return (\n    <Context.Provider\n      value={{\n        ...dataContext,\n        data,\n        handlePathChange,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  )\n}\n\nAt._supportsSpacingProps = true\nexport default At\n","import React from 'react'\n\nexport type StepIndex = number\nexport interface StepsContextState {\n  activeIndex?: StepIndex\n  handlePrevious?: () => void\n  handleNext?: () => void\n  setActiveIndex?: (index: StepIndex) => void\n}\n\nconst StepsContext = React.createContext<StepsContextState | undefined>({\n  activeIndex: 0,\n  setActiveIndex: () => null,\n  handlePrevious: () => null,\n  handleNext: () => null,\n})\n\nexport default StepsContext\n","import React, { useContext } from 'react'\nimport classnames from 'classnames'\nimport { ComponentProps } from '../../types'\nimport {\n  Props as FlexContainerProps,\n  pickFlexContainerProps,\n} from '../../../../components/flex/Container'\nimport StepsContext from '../StepsContext'\nimport Flex from '../../../../components/flex/Flex'\n\nexport type Props = ComponentProps &\n  FlexContainerProps & {\n    index?: number\n    title?: string\n  }\n\nfunction Step(props: Props) {\n  const { className, index, children } = props\n  const stepsContext = useContext(StepsContext)\n\n  if (stepsContext?.activeIndex !== index) {\n    // Another step is active\n    return null\n  }\n\n  return (\n    <Flex.Stack\n      className={classnames('dnb-forms-step', className)}\n      {...pickFlexContainerProps(props)}\n    >\n      {children}\n    </Flex.Stack>\n  )\n}\n\nStep._supportsSpacingProps = true\nexport default Step\n","import React, { useContext } from 'react'\nimport classnames from 'classnames'\nimport type { ComponentProps } from '../../types'\nimport { ButtonProps } from '../../../../components/button/Button'\nimport SharedContext from '../../../../shared/Context'\nimport StepsContext from '../StepsContext'\nimport ButtonRow from '../../Form/ButtonRow'\nimport SubmitButton from '../../Form/SubmitButton'\n\nexport type Props = ComponentProps & ButtonProps\n\nfunction NextButton(props: Props) {\n  const sharedContext = useContext(SharedContext)\n  const {\n    className,\n    variant = 'primary',\n    icon_position = 'right',\n    icon = 'chevron_right',\n    children = sharedContext?.translation.Forms.stepNext,\n  } = props\n  const stepsContext = useContext(StepsContext)\n\n  return (\n    <ButtonRow>\n      {/* Use SubmitButton to inherit the indicator functionality */}\n      <SubmitButton\n        type=\"button\"\n        className={classnames('dnb-forms-next-button', className)}\n        onClick={stepsContext?.handleNext}\n        variant={variant}\n        icon_position={icon_position}\n        icon={icon}\n        {...props}\n      >\n        {children}\n      </SubmitButton>\n    </ButtonRow>\n  )\n}\n\nNextButton._supportsSpacingProps = true\nexport default NextButton\n","import React, { useContext } from 'react'\nimport classnames from 'classnames'\nimport type { ComponentProps } from '../../types'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/button/Button'\nimport SharedContext from '../../../../shared/Context'\nimport StepsContext from '../StepsContext'\nimport ButtonRow from '../../Form/ButtonRow'\n\nexport type Props = ComponentProps & ButtonProps\n\nfunction PreviousButton(props: Props) {\n  const sharedContext = useContext(SharedContext)\n  const {\n    className,\n    variant = 'tertiary',\n    icon_position = 'left',\n    icon = 'chevron_left',\n    children = sharedContext?.translation.Forms.stepPrevious,\n  } = props\n  const stepsContext = useContext(StepsContext)\n\n  const params: Props = {}\n  if (stepsContext?.activeIndex === 0) {\n    params.disabled = true\n  }\n\n  return (\n    <ButtonRow>\n      <Button\n        className={classnames('dnb-forms-previous-button', className)}\n        onClick={stepsContext?.handlePrevious}\n        variant={variant}\n        icon_position={icon_position}\n        icon={icon}\n        {...params}\n        {...props}\n      >\n        {children}\n      </Button>\n    </ButtonRow>\n  )\n}\n\nPreviousButton._supportsSpacingProps = true\nexport default PreviousButton\n","import React from 'react'\nimport classnames from 'classnames'\nimport { ComponentProps } from '../../types'\nimport ButtonRow from '../../Form/ButtonRow'\nimport NextButton from '../NextButton'\nimport PreviousButton from '../PreviousButton'\n\nexport type Props = ComponentProps & {\n  children?: string\n}\n\nfunction Buttons(props: Props) {\n  const { className } = props\n  return (\n    <ButtonRow\n      className={classnames('dnb-forms-buttons', className)}\n      {...props}\n    >\n      <PreviousButton />\n      <NextButton />\n    </ButtonRow>\n  )\n}\n\nButtons._supportsSpacingProps = true\nexport default Buttons\n","import React, {\n  useContext,\n  useCallback,\n  useRef,\n  useReducer,\n  useMemo,\n  useEffect,\n} from 'react'\nimport classnames from 'classnames'\nimport { Space, StepIndicator } from '../../../components'\nimport { warn } from '../../../shared/component-helper'\nimport { isAsync } from '../../../shared/helpers/isAsync'\nimport useId from '../../../shared/helpers/useId'\nimport DataContext from '../DataContext/Context'\nimport Step, { Props as StepProps } from './Step'\nimport StepsContext, { StepIndex, StepsContextState } from './StepsContext'\nimport NextButton from './NextButton'\nimport PreviousButton from './PreviousButton'\nimport Buttons from './Buttons'\nimport Provider from '../DataContext/Provider'\nimport { useSharedState } from '../../../shared/helpers/useSharedState'\nimport { useStep } from './useStep'\nimport { ComponentProps, EventReturnWithStateObject } from '../types'\n\nexport type Props = ComponentProps & {\n  id?: string\n  mode?: 'static' | 'strict' | 'loose'\n  scrollTopOnStepChange?: boolean\n  initialActiveIndex?: StepIndex\n  onStepChange?: (\n    index: StepIndex,\n    mode: 'previous' | 'next'\n  ) =>\n    | EventReturnWithStateObject\n    | void\n    | Promise<EventReturnWithStateObject | void>\n  children: React.ReactNode\n  variant?: 'sidebar' | 'drawer'\n  noAnimation?: boolean\n  sidebarId?: string\n}\n\nfunction StepsLayout(props: Props) {\n  const {\n    className,\n    id: _id,\n    mode = 'strict',\n    scrollTopOnStepChange,\n    initialActiveIndex = 0,\n    onStepChange,\n    children,\n    noAnimation = true,\n    variant = 'sidebar',\n    sidebarId,\n    ...rest\n  } = props\n\n  const {\n    hasContext,\n    setFormState,\n    handleSubmitCall,\n    setShowAllErrors,\n    showAllErrors,\n    scrollToTop,\n  } = useContext(DataContext)\n\n  const id = useId(_id)\n  const [, forceUpdate] = useReducer(() => ({}), {})\n  const activeIndexRef = useRef<StepIndex>(initialActiveIndex)\n  const errorOnStepRef = useRef<Record<StepIndex, boolean>>({})\n\n  // Store the current state of showAllErrors\n  errorOnStepRef.current[activeIndexRef.current] = showAllErrors\n\n  const callOnStepChange = useCallback(\n    async (index: StepIndex, mode: 'previous' | 'next') => {\n      if (isAsync(onStepChange)) {\n        return await onStepChange(index, mode)\n      }\n\n      return onStepChange?.(index, mode)\n    },\n    [onStepChange]\n  )\n\n  const handleStepChange = useCallback(\n    ({\n      index,\n      skipErrorCheck,\n      mode,\n    }: {\n      index: StepIndex\n      skipErrorCheck: boolean\n      mode: 'previous' | 'next'\n    }) => {\n      handleSubmitCall({\n        skipErrorCheck,\n        skipFieldValidation: skipErrorCheck,\n        enableAsyncBehaviour: isAsync(onStepChange),\n        onSubmit: async () => {\n          const result = await callOnStepChange(index, mode)\n\n          // Hide async indicator\n          setFormState('abort')\n\n          if (!skipErrorCheck) {\n            // Set the showAllErrors to the step we got to\n            setShowAllErrors(errorOnStepRef.current[index])\n          }\n\n          if (!(result instanceof Error)) {\n            activeIndexRef.current = index\n            forceUpdate()\n          }\n\n          if (scrollTopOnStepChange) {\n            scrollToTop()\n          }\n\n          return result\n        },\n      })\n    },\n    [\n      callOnStepChange,\n      handleSubmitCall,\n      onStepChange,\n      scrollToTop,\n      scrollTopOnStepChange,\n      setFormState,\n      setShowAllErrors,\n    ]\n  )\n\n  const setActiveIndex = useCallback(\n    (index: StepIndex, options?: { skipErrorCheck: boolean }) => {\n      if (index === activeIndexRef.current) {\n        return\n      }\n\n      const mode = index > activeIndexRef.current ? 'next' : 'previous'\n\n      handleStepChange({\n        index,\n        skipErrorCheck: mode === 'previous',\n        mode,\n        ...options,\n      })\n    },\n    [handleStepChange]\n  )\n\n  const handlePrevious = useCallback(() => {\n    setActiveIndex(activeIndexRef.current - 1)\n  }, [setActiveIndex])\n\n  const handleNext = useCallback(() => {\n    setActiveIndex(activeIndexRef.current + 1)\n  }, [setActiveIndex])\n\n  const handleChange = useCallback(\n    ({ current_step }) => {\n      setActiveIndex(current_step, { skipErrorCheck: true })\n    },\n    [setActiveIndex]\n  )\n\n  const providerValue = useMemo(\n    () => ({\n      activeIndex: activeIndexRef.current,\n      setActiveIndex,\n      handlePrevious,\n      handleNext,\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [activeIndexRef.current, setActiveIndex, handlePrevious, handleNext]\n  )\n\n  // - Handle shared state\n  const sharedState = useSharedState<StepsContextState>(\n    hasContext && id ? id + '-steps' : undefined\n  )\n  const { extend } = sharedState\n  useEffect(() => {\n    if (hasContext && id) {\n      extend(providerValue)\n    }\n  }, [id, extend, providerValue]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (!hasContext) {\n    warn('You may wrap StepsLayout in Form.Handler')\n    return (\n      <Provider>\n        <StepsLayout {...props} id={id} />\n      </Provider>\n    )\n  }\n\n  const titles = []\n  const contents = React.Children.map(children, (child, i) => {\n    if (React.isValidElement(child)) {\n      let step = child\n\n      if (child?.type !== Step && typeof child.type === 'function') {\n        step = child.type.apply(child.type, [\n          child.props,\n        ]) as React.ReactElement\n\n        if (step?.type === Step) {\n          child = step\n        }\n      }\n\n      if (child?.type === Step) {\n        titles.push(child.props.title ?? 'Title missing')\n        return React.cloneElement(child as React.ReactElement<StepProps>, {\n          index: i,\n        })\n      }\n    }\n\n    return child\n  })\n\n  return (\n    <StepsContext.Provider value={providerValue}>\n      <Space\n        className={classnames(\n          'dnb-forms-steps-layout',\n          variant === 'drawer' && 'dnb-forms-steps-layout--drawer',\n          className\n        )}\n        {...rest}\n      >\n        <aside className=\"dnb-forms-steps-layout__sidebar\">\n          <StepIndicator.Sidebar sidebar_id={id} />\n          <StepIndicator\n            bottom\n            current_step={activeIndexRef.current}\n            data={titles}\n            mode={mode}\n            no_animation={noAnimation}\n            on_change={handleChange}\n            sidebar_id={\n              variant === 'drawer' && !sidebarId\n                ? ''\n                : sidebarId\n                ? sidebarId\n                : id\n            }\n          />\n        </aside>\n\n        <div className=\"dnb-forms-steps-layout__contents\">{contents}</div>\n      </Space>\n    </StepsContext.Provider>\n  )\n}\n\nStepsLayout._supportsSpacingProps = true\n\nStepsLayout.Step = Step\nStepsLayout.NextButton = NextButton\nStepsLayout.PreviousButton = PreviousButton\nStepsLayout.Buttons = Buttons\nStepsLayout.useStep = useStep\n\nexport default StepsLayout\n","import { useContext, useRef } from 'react'\nimport StepsContext, { StepsContextState } from './StepsContext'\nimport { Identifier } from '../types'\nimport { useSharedState } from '../../../shared/helpers/useSharedState'\n\nexport function useStep(id: Identifier = null) {\n  const sharedDataRef =\n    useRef<ReturnType<typeof useSharedState<StepsContextState>>>(null)\n  sharedDataRef.current = useSharedState<StepsContextState>(\n    id ? id + '-steps' : undefined\n  )\n\n  const context = useContext(StepsContext)\n  return sharedDataRef.current.data || context\n}\n","import StepsLayout from './StepsLayout'\nexport { default as StepsContext } from './StepsContext'\n\nexport default StepsLayout\n"],"names":["CreateBasicFieldComponent","_jsx","ComponentBox","scope","useFieldProps","hideCode","noInline","children","GettingStarted","CreateComposedFieldComponent","DataContext","BaseFieldComponents","StepsLayout","Value","FeatureFields","LayoutComponents","VisibilityBasedOnData","UsingFormHandler","Validation","WithSteps","At","props","path","iterate","dataContext","useContext","Context","data","contextData","handlePathChange","contextHandlePathChange","pointer","undefined","useMemo","changePath","value","Array","isArray","_Fragment","map","element","i","Provider","_supportsSpacingProps","StepsContext","React","activeIndex","setActiveIndex","handlePrevious","handleNext","Step","className","index","stepsContext","Flex","classnames","pickFlexContainerProps","NextButton","sharedContext","SharedContext","variant","icon_position","icon","translation","Forms","stepNext","ButtonRow","SubmitButton","type","onClick","PreviousButton","stepPrevious","params","disabled","Button","Buttons","_jsxs","id","_id","mode","scrollTopOnStepChange","initialActiveIndex","onStepChange","noAnimation","sidebarId","rest","hasContext","setFormState","handleSubmitCall","setShowAllErrors","showAllErrors","scrollToTop","useId","forceUpdate","useReducer","activeIndexRef","useRef","errorOnStepRef","current","callOnStepChange","useCallback","async","isAsync","handleStepChange","_ref","skipErrorCheck","skipFieldValidation","enableAsyncBehaviour","onSubmit","result","Error","options","handleChange","_ref2","current_step","providerValue","sharedState","useSharedState","extend","useEffect","warn","titles","contents","child","_child","_child2","step","_step","_child$props$title","apply","push","title","Space","StepIndicator","Sidebar","sidebar_id","bottom","no_animation","on_change","useStep","sharedDataRef","context"],"sourceRoot":""}