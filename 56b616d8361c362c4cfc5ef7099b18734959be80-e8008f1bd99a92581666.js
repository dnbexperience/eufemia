"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[89470],{48601:function(n,e,t){t.r(e),t.d(e,{default:function(){return nn}});var i={};t.r(i),t.d(i,{AutocompleteLabel:function(){return f},AutocompleteValidationRequired:function(){return w},ButtonDisabled:function(){return _},ButtonDisabledOptions:function(){return G},ButtonEmpty:function(){return N},ButtonError:function(){return Y},ButtonHorizontalOptionsLayout:function(){return I},ButtonLabel:function(){return q},ButtonNestingWithLogic:function(){return J},ButtonOptionSelected:function(){return P},ButtonWithAPath:function(){return $},ButtonWithData:function(){return U},DropdownDisabled:function(){return v},DropdownDisabledOptions:function(){return b},DropdownDynamicOptions:function(){return m},DropdownEmpty:function(){return r},DropdownError:function(){return x},DropdownHighNumberOfOptions:function(){return g},DropdownLabel:function(){return s},DropdownLabelAndOptionSelected:function(){return c},DropdownPlaceholder:function(){return d},DropdownTransformSelection:function(){return u},DropdownValidationRequired:function(){return O},DropdownWidths:function(){return F},DropdownWithAPath:function(){return j},DropdownWithData:function(){return S},HorizontalLayout:function(){return h},RadioDisabled:function(){return T},RadioDisabledOptions:function(){return W},RadioEmpty:function(){return y},RadioError:function(){return V},RadioHorizontalLayout:function(){return C},RadioHorizontalLayoutAndHorizontalOptionsLayout:function(){return R},RadioHorizontalOptionsLayout:function(){return D},RadioLabel:function(){return B},RadioList:function(){return E},RadioListWidths:function(){return A},RadioNestingAdvanced:function(){return M},RadioNestingWithLogic:function(){return k},RadioOptionSelected:function(){return L},RadioWithAPath:function(){return H},RadioWithData:function(){return z},SelectionErrorMessage:function(){return K},SelectionInfoMessage:function(){return Q},SelectionWarningMessage:function(){return X},WithHelp:function(){return p}});var o=t(31085),l=t(71184),a=(t(14041),t(67083));const r=()=>(0,o.jsx)(a.A,{children:'<Field.Selection\n  onFocus={(value) => console.log(\'onFocus\', value)}\n  onBlur={(value) => console.log(\'onBlur\', value)}\n  onChange={(value) => console.log(\'onChange\', value)}\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),d=()=>(0,o.jsx)(a.A,{children:'<Field.Selection\n  placeholder="Select something..."\n  onChange={(value) => console.log(\'onChange\', value)}\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),s=()=>(0,o.jsx)(a.A,{children:'<Field.Selection\n  label="Label text"\n  onChange={(value) => console.log(\'onChange\', value)}\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'});function u(){return(0,o.jsx)(a.A,{children:'<Field.Selection\n  label="Label"\n  value="bar"\n  transformSelection={({ title }) => {\n    return title\n  }}\n>\n  <Field.Option value="foo" title="Foo!" text="Additional text" />\n  <Field.Option value="bar" title="Baar!" text="Additional text" />\n</Field.Selection>\n'})}const c=()=>(0,o.jsx)(a.A,{"data-visual-test":"selection-dropdown-default",children:'<Field.Selection\n  value="bar"\n  label="Label text"\n  onChange={(value) => console.log(\'onChange\', value)}\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),p=()=>(0,o.jsx)(a.A,{"data-visual-test":"selection-dropdown-help",children:'<Field.Selection\n  value="bar"\n  label="Label text"\n  help={{\n    title: \'Help is available\',\n    content:\n      \'Somewhere along the way, we must learn that there is nothing greater than to do something for others.\',\n  }}\n  onChange={(value) => console.log(\'onChange\', value)}\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),h=()=>(0,o.jsx)(a.A,{"data-visual-test":"selection-dropdown-horizontal",children:'<Field.Selection\n  value="bar"\n  label="Label text"\n  layout="horizontal"\n  onChange={(value) => console.log(\'onChange\', value)}\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),F=()=>(0,o.jsx)(a.A,{hideCode:!0,"data-visual-test":"selection-dropdown-widths",children:'<Flex.Stack>\n  <Field.Selection label="Default width (property omitted)" value="bar">\n    <Field.Option value="foo" title="Foo!" />\n    <Field.Option value="bar" title="Baar!" />\n  </Field.Selection>\n  <Field.Selection\n    label="Small selection with a long label"\n    value="bar"\n    width="small"\n  >\n    <Field.Option value="foo" title="Foo!" />\n    <Field.Option value="bar" title="Baar!" />\n  </Field.Selection>\n  <Field.Selection label="Medium" value="bar" width="medium">\n    <Field.Option value="foo" title="Foo!" />\n    <Field.Option value="bar" title="Baar!" />\n  </Field.Selection>\n  <Field.Selection label="Large" value="bar" width="large">\n    <Field.Option value="foo" title="Foo!" />\n    <Field.Option value="bar" title="Baar!" />\n  </Field.Selection>\n  <Field.Selection label="Stretch" value="bar" width="stretch">\n    <Field.Option value="foo" title="Foo!" />\n    <Field.Option value="bar" title="Baar!" />\n  </Field.Selection>\n</Flex.Stack>\n'}),v=()=>(0,o.jsx)(a.A,{children:'<Field.Selection\n  value="bar"\n  label="Label text"\n  onChange={(value) => console.log(\'onChange\', value)}\n  disabled\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),b=()=>(0,o.jsx)(a.A,{noInline:!0,children:'const Example = () => {\n  return (\n    <Field.Selection label="Label text">\n      <Field.Option value="foo" title="Foo!" disabled />\n      <Field.Option value="bar" title="Baar!" />\n    </Field.Selection>\n  )\n}\nrender(<Example />)\n'}),x=()=>(0,o.jsx)(a.A,{children:'<Field.Selection\n  value="bar"\n  label="Label text"\n  onChange={(value) => console.log(\'onChange\', value)}\n  error={new Error(\'This is what is wrong...\')}\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),m=()=>(0,o.jsx)(a.A,{noInline:!0,children:'const Example = () => {\n  const [numOptions, setNumOptions] = React.useState(3)\n  return (\n    <>\n      <Field.Selection\n        value="option-15"\n        label="Label text"\n        onChange={(value) => console.log(\'onChange\', value)}\n      >\n        {Array.from(Array(numOptions).keys()).map((key) => (\n          <Field.Option\n            key={key}\n            value={key}\n            title={`Option ${key + 1}`}\n          />\n        ))}\n      </Field.Selection>\n\n      <p>\n        {[3, 4, 5].map((num, i) => (\n          <Button\n            key={i}\n            size="medium"\n            right="x-small"\n            variant={numOptions === num ? \'primary\' : \'secondary\'}\n            on_click={() => setNumOptions(num)}\n          >\n            {num} options\n          </Button>\n        ))}\n      </p>\n    </>\n  )\n}\nrender(<Example />)\n'}),g=()=>(0,o.jsx)(a.A,{children:'<Field.Selection\n  value="option-15"\n  label="Label text"\n  onChange={(value) => console.log(\'onChange\', value)}\n>\n  <Field.Option value="option-1" title="One" />\n  <Field.Option value="option-2" title="Two" />\n  <Field.Option value="option-3" title="Three" />\n  <Field.Option value="option-4" title="Four" />\n  <Field.Option value="option-5" title="Five" />\n  <Field.Option value="option-6" title="Six" />\n  <Field.Option value="option-7" title="Seven" />\n  <Field.Option value="option-8" title="Eight" />\n  <Field.Option value="option-9" title="Nine" />\n  <Field.Option value="option-10" title="Ten" />\n  <Field.Option value="option-11" title="Eleven" />\n  <Field.Option value="option-12" title="Twelve" />\n  <Field.Option value="option-13" title="Thirteen" />\n  <Field.Option value="option-14" title="Fourteen" />\n  <Field.Option value="option-15" title="Fifteen" />\n  <Field.Option value="option-16" title="Sixteen" />\n  <Field.Option value="option-17" title="Seventeen" />\n  <Field.Option value="option-18" title="Eighteen" />\n  <Field.Option value="option-19" title="Nineteen" />\n  <Field.Option value="option-20" title="Twenty" />\n  <Field.Option value="option-21" title="Twenty-one" />\n  <Field.Option value="option-22" title="Twenty-two" />\n  <Field.Option value="option-23" title="Twenty-three" />\n  <Field.Option value="option-24" title="Twenty-four" />\n  <Field.Option value="option-25" title="Twenty-five" />\n</Field.Selection>\n'}),O=()=>(0,o.jsx)(a.A,{children:'<Field.Selection\n  value="foo"\n  label="Label text"\n  onChange={(value) => console.log(\'onChange\', value)}\n  onFocus={(value) => console.log(\'onFocus\', value)}\n  onBlur={(value) => console.log(\'onBlur\', value)}\n  required\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),S=()=>(0,o.jsx)(a.A,{children:"<Field.Selection\n  label=\"Label text\"\n  data={[\n    {\n      title: 'One',\n      value: 'one',\n    },\n    {\n      title: 'Two',\n      value: 'two',\n    },\n  ]}\n/>\n"}),j=()=>(0,o.jsx)(a.A,{children:"<Form.Handler\n  data={{\n    example: {\n      list: [\n        {\n          title: 'One',\n          value: 'one',\n        },\n        {\n          title: 'Two',\n          value: 'two',\n        },\n      ],\n    },\n    selection: 'two',\n  }}\n>\n  <Field.Selection\n    label=\"Label text\"\n    path=\"/selection\"\n    dataPath=\"/example/list\"\n  >\n    <Field.Option value=\"foo\">Fooo</Field.Option>\n  </Field.Selection>\n</Form.Handler>\n"}),f=()=>(0,o.jsx)(a.A,{children:'<Field.Selection\n  variant="autocomplete"\n  label="Label text"\n  onChange={(value) => console.log(\'onChange\', value)}\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),w=()=>(0,o.jsx)(a.A,{children:'<Field.Selection\n  variant="autocomplete"\n  label="Label text"\n  onChange={(value) => console.log(\'onChange\', value)}\n  onFocus={(value) => console.log(\'onFocus\', value)}\n  onBlur={(value) => console.log(\'onBlur\', value)}\n  required\n  validateInitially\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),y=()=>(0,o.jsx)(a.A,{children:'<Field.Selection\n  variant="radio"\n  onChange={(value) => console.log(\'onChange\', value)}\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),B=()=>(0,o.jsx)(a.A,{"data-visual-test":"selection-radio-options-vertical",children:'<Field.Selection\n  variant="radio"\n  label="Label text"\n  onChange={(value) => console.log(\'onChange\', value)}\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),E=()=>(0,o.jsx)(a.A,{"data-visual-test":"selection-radio-list-options-vertical",children:'<Field.Selection\n  variant="radio-list"\n  label="Label text"\n  onChange={(value) => console.log(\'onChange\', value)}\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n  <Field.Option value="baz" title="Bazz!" />\n</Field.Selection>\n'}),A=()=>(0,o.jsx)(a.A,{hideCode:!0,"data-visual-test":"selection-radio-list-widths",children:'<Flex.Stack>\n  <Field.Selection\n    label="Default width (property omitted)"\n    value="bar"\n    variant="radio-list"\n  >\n    <Field.Option value="foo" title="Foo!" />\n    <Field.Option value="bar" title="Baar!" />\n  </Field.Selection>\n  <Field.Selection\n    label="Small selection with a long label"\n    value="bar"\n    variant="radio-list"\n    width="small"\n  >\n    <Field.Option value="foo" title="Foo!" />\n    <Field.Option value="bar" title="Baar!" />\n  </Field.Selection>\n  <Field.Selection\n    label="Medium"\n    value="bar"\n    variant="radio-list"\n    width="medium"\n  >\n    <Field.Option value="foo" title="Foo!" />\n    <Field.Option value="bar" title="Baar!" />\n  </Field.Selection>\n  <Field.Selection\n    label="Large"\n    value="bar"\n    variant="radio-list"\n    width="large"\n  >\n    <Field.Option value="foo" title="Foo!" />\n    <Field.Option value="bar" title="Baar!" />\n  </Field.Selection>\n  <Field.Selection\n    label="Stretch"\n    value="bar"\n    variant="radio-list"\n    width="stretch"\n  >\n    <Field.Option value="foo" title="Foo!" />\n    <Field.Option value="bar" title="Baar!" />\n  </Field.Selection>\n</Flex.Stack>\n'}),L=()=>(0,o.jsx)(a.A,{"data-visual-test":"selection-radio-vertical",children:'<Field.Selection\n  variant="radio"\n  label="Label text"\n  value="bar"\n  onChange={(value) => console.log(\'onChange\', value)}\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),C=()=>(0,o.jsx)(a.A,{"data-visual-test":"selection-radio-horizontal",children:'<Field.Selection\n  variant="radio"\n  label="Label text"\n  value="bar"\n  layout="horizontal"\n  onChange={(value) => console.log(\'onChange\', value)}\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),D=()=>(0,o.jsx)(a.A,{"data-visual-test":"selection-radio-options-horizontal",children:'<Field.Selection\n  variant="radio"\n  label="Label text"\n  value="bar"\n  optionsLayout="horizontal"\n  onChange={(value) => console.log(\'onChange\', value)}\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),R=()=>(0,o.jsx)(a.A,{children:'<Field.Selection\n  variant="radio"\n  label="Label text"\n  value="bar"\n  layout="horizontal"\n  optionsLayout="horizontal"\n  onChange={(value) => console.log(\'onChange\', value)}\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),T=()=>(0,o.jsx)(a.A,{children:'<Field.Selection\n  variant="radio"\n  value="bar"\n  label="Label text"\n  onChange={(value) => console.log(\'onChange\', value)}\n  disabled\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),W=()=>(0,o.jsx)(a.A,{noInline:!0,children:'const Example = () => {\n  return (\n    <Field.Selection label="Label text" variant="radio">\n      <Field.Option value="foo" title="Foo!" disabled />\n      <Field.Option value="bar" title="Baar!" />\n    </Field.Selection>\n  )\n}\nrender(<Example />)\n'}),V=()=>(0,o.jsx)(a.A,{children:'<Field.Selection\n  variant="radio"\n  value="bar"\n  label="Label text"\n  onChange={(value) => console.log(\'onChange\', value)}\n  error={new Error(\'This is what is wrong...\')}\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),z=()=>(0,o.jsx)(a.A,{children:"<Field.Selection\n  variant=\"radio\"\n  label=\"Label text\"\n  data={[\n    {\n      title: 'One',\n      value: 'one',\n    },\n    {\n      title: 'Two',\n      value: 'two',\n    },\n  ]}\n/>\n"}),H=()=>(0,o.jsx)(a.A,{children:"<Form.Handler\n  data={{\n    example: {\n      list: [\n        {\n          title: 'One',\n          value: 'one',\n        },\n        {\n          title: 'Two',\n          value: 'two',\n        },\n      ],\n    },\n    selection: 'two',\n  }}\n>\n  <Field.Selection\n    variant=\"radio\"\n    label=\"Label text\"\n    path=\"/selection\"\n    dataPath=\"/example/list\"\n  >\n    <Field.Option value=\"foo\">Fooo</Field.Option>\n  </Field.Selection>\n</Form.Handler>\n"}),k=()=>(0,o.jsx)(a.A,{hideCode:!0,"data-visual-test":"selection-radio-nesting-logic",children:'<Form.Handler onSubmit={console.log}>\n  <Form.Card>\n    <Field.Selection\n      variant="radio"\n      label="Make a selection"\n      path="/mySelection"\n      required\n    >\n      <Field.Option value="nothing" title="Nothing" />\n      <Field.Option value="showInput" title="Show an input" />\n      <Form.Visibility\n        visibleWhen={{\n          path: \'/mySelection\',\n          hasValue: \'showInput\',\n        }}\n        animate\n        compensateForGap="auto" // makes animation smooth\n      >\n        <Section variant="info" innerSpace>\n          <Field.String placeholder="Enter some value" required />\n        </Section>\n      </Form.Visibility>\n      <Field.Option\n        value="showAdditionalOption"\n        title="Show additional option"\n      />\n      <Form.Visibility\n        visibleWhen={{\n          path: \'/mySelection\',\n          hasValue: (value) =>\n            value === \'showAdditionalOption\' || value === \'showMeMore\',\n        }}\n        animate\n        compensateForGap="auto" // makes animation smooth\n      >\n        <Field.Option\n          value="showMeMore"\n          title="Show even more"\n          bottom="x-small"\n        />\n        <Form.Visibility\n          animate\n          visibleWhen={{\n            path: \'/mySelection\',\n            hasValue: \'showMeMore\',\n          }}\n        >\n          <Section variant="info" innerSpace>\n            <Field.String placeholder="Enter more info" required />\n          </Section>\n        </Form.Visibility>\n      </Form.Visibility>\n    </Field.Selection>\n  </Form.Card>\n\n  <Form.SubmitButton />\n</Form.Handler>\n'}),M=()=>(0,o.jsx)(a.A,{hideCode:!0,"data-visual-test":"selection-radio-advanced-nesting-logic",children:'<Form.Handler\n  defaultData={{\n    mySelection: \'first\',\n    firstSelection: \'first\',\n  }}\n  onSubmit={console.log}\n>\n  <Form.Card>\n    <Field.Selection path="/mySelection" variant="radio">\n      <Field.Option value="first" title="First" />\n      <Form.Visibility\n        visibleWhen={{\n          path: \'/mySelection\',\n          hasValue: \'first\',\n        }}\n        animate\n        compensateForGap="auto" // makes animation smooth\n      >\n        <Form.Card top bottom>\n          <Field.Number\n            path="/firstNumber"\n            label="First number"\n            value={1}\n            allowNegative={false}\n            required\n            exclusiveMinimum={900}\n            exclusiveMaximum={1000}\n          />\n          <Field.String\n            path="/firstString"\n            label="First String"\n            value="foo"\n            pattern="bar"\n            minLength={4}\n          />\n          <Field.Boolean\n            path="/firstBoolean"\n            label="First boolean"\n            variant="checkbox"\n            required\n          />\n          <Field.Selection\n            path="/firstSelection"\n            variant="radio"\n            required\n            label="First selection"\n          >\n            <Field.Option value="first" title="First nested" />\n            <Form.Visibility\n              visibleWhen={{\n                path: \'/firstSelection\',\n                hasValue: \'first\',\n              }}\n              animate\n              compensateForGap="auto" // makes animation smooth\n            >\n              <Form.Card top bottom>\n                <Field.Number\n                  path="/firstNestedNumber"\n                  label="First nested number"\n                  required\n                />\n              </Form.Card>\n            </Form.Visibility>\n            <Field.Option value="second" title="Second nested" />\n          </Field.Selection>\n        </Form.Card>\n      </Form.Visibility>\n\n      <Field.Option value="second" title="Second" />\n      <Field.Option value="third" title="Third" />\n    </Field.Selection>\n  </Form.Card>\n\n  <Form.SubmitButton />\n</Form.Handler>\n'}),N=()=>(0,o.jsx)(a.A,{children:'<Field.Selection\n  variant="button"\n  onChange={(value) => console.log(\'onChange\', value)}\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),q=()=>(0,o.jsx)(a.A,{"data-visual-test":"selection-button-options-vertical",children:'<Field.Selection\n  variant="button"\n  label="Label text"\n  onChange={(value) => console.log(\'onChange\', value)}\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),I=()=>(0,o.jsx)(a.A,{"data-visual-test":"selection-button-options-horizontal",children:'<Field.Selection\n  variant="button"\n  label="Label text"\n  optionsLayout="horizontal"\n  onChange={(value) => console.log(\'onChange\', value)}\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),P=()=>(0,o.jsx)(a.A,{"data-visual-test":"selection-button-vertical",children:'<Field.Selection\n  variant="button"\n  label="Label text"\n  value="bar"\n  onChange={(value) => console.log(\'onChange\', value)}\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),_=()=>(0,o.jsx)(a.A,{children:'<Field.Selection\n  variant="button"\n  value="bar"\n  label="Label text"\n  onChange={(value) => console.log(\'onChange\', value)}\n  disabled\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),G=()=>(0,o.jsx)(a.A,{noInline:!0,children:'const Example = () => {\n  return (\n    <Field.Selection label="Label text" variant="button">\n      <Field.Option value="foo" title="Foo!" disabled />\n      <Field.Option value="bar" title="Baar!" />\n    </Field.Selection>\n  )\n}\nrender(<Example />)\n'}),Y=()=>(0,o.jsx)(a.A,{children:'<Field.Selection\n  variant="button"\n  value="bar"\n  label="Label text"\n  onChange={(value) => console.log(\'onChange\', value)}\n  error={new Error(\'This is what is wrong...\')}\n>\n  <Field.Option value="foo" title="Foo!" />\n  <Field.Option value="bar" title="Baar!" />\n</Field.Selection>\n'}),U=()=>(0,o.jsx)(a.A,{children:"<Field.Selection\n  variant=\"button\"\n  label=\"Label text\"\n  data={[\n    {\n      title: 'One',\n      value: 'one',\n    },\n    {\n      title: 'Two',\n      value: 'two',\n    },\n  ]}\n/>\n"}),$=()=>(0,o.jsx)(a.A,{children:"<Form.Handler\n  data={{\n    example: {\n      list: [\n        {\n          title: 'One',\n          value: 'one',\n        },\n        {\n          title: 'Two',\n          value: 'two',\n        },\n      ],\n    },\n    selection: 'two',\n  }}\n>\n  <Field.Selection\n    variant=\"button\"\n    label=\"Label text\"\n    path=\"/selection\"\n    dataPath=\"/example/list\"\n  >\n    <Field.Option value=\"foo\">Fooo</Field.Option>\n  </Field.Selection>\n</Form.Handler>\n"}),J=()=>(0,o.jsx)(a.A,{"data-visual-test":"selection-button-nesting-logic",children:'<Form.Handler>\n  <Form.Card>\n    <Field.Selection\n      variant="button"\n      label="Make a selection"\n      path="/mySelection"\n    >\n      <Field.Option value="nothing" title="Nothing" />\n\n      <Field.Option value="showInput" title="Show an input" />\n      <Form.Visibility\n        animate\n        visibleWhen={{\n          path: \'/mySelection\',\n          hasValue: \'showInput\',\n        }}\n      >\n        <Section variant="info" innerSpace>\n          <Field.String placeholder="Enter some value" />\n        </Section>\n      </Form.Visibility>\n\n      <Field.Option\n        value="showAdditionalOption"\n        title="Show additional option"\n      />\n      <Form.Visibility\n        animate\n        visibleWhen={{\n          path: \'/mySelection\',\n          hasValue: (value) =>\n            value === \'showAdditionalOption\' || value === \'showMeMore\',\n        }}\n      >\n        <Field.Option\n          value="showMeMore"\n          title="Show even more"\n          bottom="x-small"\n        />\n        <Form.Visibility\n          animate\n          visibleWhen={{\n            path: \'/mySelection\',\n            hasValue: \'showMeMore\',\n          }}\n        >\n          <Section variant="info" innerSpace>\n            <Field.String placeholder="Enter more info" />\n          </Section>\n        </Form.Visibility>\n      </Form.Visibility>\n    </Field.Selection>\n  </Form.Card>\n</Form.Handler>\n'}),K=()=>(0,o.jsx)(a.A,{"data-visual-test":"selection-dropdown-error-message",children:'<Field.Selection label="Label" error="This is what is wrong...">\n  <Field.Option value="foo">Foo</Field.Option>\n  <Field.Option value="bar">Bar</Field.Option>\n</Field.Selection>\n'}),Q=()=>(0,o.jsx)(a.A,{"data-visual-test":"selection-dropdown-info-message",children:'<Field.Selection label="Label" info="Useful information (?)">\n  <Field.Option value="foo">Foo</Field.Option>\n  <Field.Option value="bar">Bar</Field.Option>\n</Field.Selection>\n'}),X=()=>(0,o.jsx)(a.A,{"data-visual-test":"selection-dropdown-warning-message",children:'<Field.Selection label="Label" warning="I\'m warning you...">\n  <Field.Option value="foo">Foo</Field.Option>\n  <Field.Option value="bar">Bar</Field.Option>\n</Field.Selection>\n'});function Z(n){const e=Object.assign({h2:"h2",h3:"h3",p:"p",h4:"h4",hr:"hr"},(0,l.R)(),n.components),{VisibleWhenVisualTest:t}=e;return i||en("Examples",!1),f||en("Examples.AutocompleteLabel",!0),w||en("Examples.AutocompleteValidationRequired",!0),_||en("Examples.ButtonDisabled",!0),G||en("Examples.ButtonDisabledOptions",!0),N||en("Examples.ButtonEmpty",!0),Y||en("Examples.ButtonError",!0),I||en("Examples.ButtonHorizontalOptionsLayout",!0),q||en("Examples.ButtonLabel",!0),J||en("Examples.ButtonNestingWithLogic",!0),P||en("Examples.ButtonOptionSelected",!0),$||en("Examples.ButtonWithAPath",!0),U||en("Examples.ButtonWithData",!0),v||en("Examples.DropdownDisabled",!0),b||en("Examples.DropdownDisabledOptions",!0),m||en("Examples.DropdownDynamicOptions",!0),r||en("Examples.DropdownEmpty",!0),x||en("Examples.DropdownError",!0),g||en("Examples.DropdownHighNumberOfOptions",!0),s||en("Examples.DropdownLabel",!0),c||en("Examples.DropdownLabelAndOptionSelected",!0),d||en("Examples.DropdownPlaceholder",!0),u||en("Examples.DropdownTransformSelection",!0),O||en("Examples.DropdownValidationRequired",!0),F||en("Examples.DropdownWidths",!0),j||en("Examples.DropdownWithAPath",!0),S||en("Examples.DropdownWithData",!0),h||en("Examples.HorizontalLayout",!0),T||en("Examples.RadioDisabled",!0),W||en("Examples.RadioDisabledOptions",!0),y||en("Examples.RadioEmpty",!0),V||en("Examples.RadioError",!0),C||en("Examples.RadioHorizontalLayout",!0),R||en("Examples.RadioHorizontalLayoutAndHorizontalOptionsLayout",!0),D||en("Examples.RadioHorizontalOptionsLayout",!0),B||en("Examples.RadioLabel",!0),E||en("Examples.RadioList",!0),A||en("Examples.RadioListWidths",!0),M||en("Examples.RadioNestingAdvanced",!0),k||en("Examples.RadioNestingWithLogic",!0),L||en("Examples.RadioOptionSelected",!0),H||en("Examples.RadioWithAPath",!0),z||en("Examples.RadioWithData",!0),K||en("Examples.SelectionErrorMessage",!0),Q||en("Examples.SelectionInfoMessage",!0),X||en("Examples.SelectionWarningMessage",!0),p||en("Examples.WithHelp",!0),t||en("VisibleWhenVisualTest",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:"Demos"}),"\n",(0,o.jsx)(e.h3,{children:"Variants summary"}),"\n",(0,o.jsx)(e.p,{children:"As there are many variants, they are split into separate sections. Here is a summary of the variants:"}),"\n",(0,o.jsx)(e.h4,{children:"Dropdown"}),"\n",(0,o.jsx)(s,{}),"\n",(0,o.jsx)(e.h4,{children:"Autocomplete"}),"\n",(0,o.jsx)(f,{}),"\n",(0,o.jsx)(e.h4,{children:"Radio buttons"}),"\n",(0,o.jsx)(B,{}),"\n",(0,o.jsx)(e.h4,{children:"Radio button list variant"}),"\n",(0,o.jsx)(E,{}),"\n",(0,o.jsx)(e.h4,{children:"Toggle buttons"}),"\n",(0,o.jsx)(q,{}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h3,{children:"Dropdown variant (default)"}),"\n",(0,o.jsx)(e.h4,{children:"Dropdown empty"}),"\n",(0,o.jsx)(r,{}),"\n",(0,o.jsx)(e.h4,{children:"Dropdown placeholder"}),"\n",(0,o.jsx)(d,{}),"\n",(0,o.jsx)(e.h4,{children:"Dropdown with a transformed selection text"}),"\n",(0,o.jsx)(u,{}),"\n",(0,o.jsx)(e.h4,{children:"Dropdown label and option selected"}),"\n",(0,o.jsx)(c,{}),"\n",(0,o.jsx)(e.h4,{children:"Dropdown with help"}),"\n",(0,o.jsx)(p,{}),"\n",(0,o.jsx)(e.h3,{children:"Horizontal layout"}),"\n",(0,o.jsx)(h,{}),"\n",(0,o.jsx)(e.h4,{children:"Dropdown disabled"}),"\n",(0,o.jsx)(v,{}),"\n",(0,o.jsx)(e.h4,{children:"Dropdown option disabled"}),"\n",(0,o.jsx)(b,{}),"\n",(0,o.jsx)(e.h4,{children:"Dropdown error"}),"\n",(0,o.jsx)(x,{}),"\n",(0,o.jsx)(e.h4,{children:"Dropdown dynamic options"}),"\n",(0,o.jsx)(m,{}),"\n",(0,o.jsx)(e.h4,{children:"Dropdown high number of options"}),"\n",(0,o.jsx)(g,{}),"\n",(0,o.jsx)(e.h4,{children:"Dropdown validation - Required"}),"\n",(0,o.jsx)(O,{}),"\n",(0,o.jsx)(e.h4,{children:"Dropdown button with a path to populate the data"}),"\n",(0,o.jsx)(j,{}),"\n",(0,o.jsx)(e.h4,{children:"Dropdown with the data property"}),"\n",(0,o.jsx)(S,{}),"\n",(0,o.jsx)(e.h3,{children:"Dropdown widths"}),"\n",(0,o.jsx)(F,{}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h3,{children:"Autocomplete variant"}),"\n",(0,o.jsx)(w,{}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h3,{children:"Radio variant"}),"\n",(0,o.jsx)(e.h4,{children:"Radio empty"}),"\n",(0,o.jsx)(y,{}),"\n",(0,o.jsx)(e.h4,{children:"Radio option selected"}),"\n",(0,o.jsx)(L,{}),"\n",(0,o.jsx)(e.h4,{children:"Radio horizontal layout"}),"\n",(0,o.jsx)(C,{}),"\n",(0,o.jsx)(e.h4,{children:"Radio horizontal options-layout"}),"\n",(0,o.jsx)(D,{}),"\n",(0,o.jsx)(e.h4,{children:"Radio horizontal layout and horizontal options-layout"}),"\n",(0,o.jsx)(R,{}),"\n",(0,o.jsx)(e.h4,{children:"Radio disabled"}),"\n",(0,o.jsx)(T,{}),"\n",(0,o.jsx)(e.h4,{children:"Radio option disabled"}),"\n",(0,o.jsx)(W,{}),"\n",(0,o.jsx)(e.h4,{children:"Radio error"}),"\n",(0,o.jsx)(V,{}),"\n",(0,o.jsx)(e.h4,{children:"Radio button with a path to populate the data"}),"\n",(0,o.jsx)(H,{}),"\n",(0,o.jsx)(e.h4,{children:"Radio with the data property"}),"\n",(0,o.jsx)(z,{}),"\n",(0,o.jsx)(e.h4,{children:"Radio nesting other fields with logic"}),"\n",(0,o.jsx)(e.p,{children:"You can nest other fields and show them based on your desired logic."}),"\n",(0,o.jsx)(k,{}),"\n",(0,o.jsx)(e.h4,{children:"Radio nesting advanced"}),"\n",(0,o.jsx)(M,{}),"\n",(0,o.jsx)(e.h4,{children:"Radio list variant widths"}),"\n",(0,o.jsx)(A,{}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h3,{children:"Buttons variant"}),"\n",(0,o.jsx)(e.h4,{children:"ToggleButton empty"}),"\n",(0,o.jsx)(N,{}),"\n",(0,o.jsx)(e.h4,{children:"ToggleButton option selected"}),"\n",(0,o.jsx)(P,{}),"\n",(0,o.jsx)(e.h4,{children:"ToggleButton horizontal options-layout"}),"\n",(0,o.jsx)(I,{}),"\n",(0,o.jsx)(e.h4,{children:"ToggleButton disabled"}),"\n",(0,o.jsx)(_,{}),"\n",(0,o.jsx)(e.h4,{children:"ToggleButton option disabled"}),"\n",(0,o.jsx)(G,{}),"\n",(0,o.jsx)(e.h4,{children:"ToggleButton error"}),"\n",(0,o.jsx)(Y,{}),"\n",(0,o.jsx)(e.h4,{children:"ToggleButton nesting other fields with logic"}),"\n",(0,o.jsx)(e.p,{children:"You can nest other fields and show them based on your desired logic."}),"\n",(0,o.jsx)(J,{}),"\n",(0,o.jsx)(e.h4,{children:"ToggleButton with a path to populate the data"}),"\n",(0,o.jsx)($,{}),"\n",(0,o.jsx)(e.h4,{children:"ToggleButton with the data property"}),"\n",(0,o.jsx)(U,{}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)(K,{}),(0,o.jsx)(Q,{}),(0,o.jsx)(X,{})]})]})}var nn=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,l.R)(),n.components);return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(Z,n)})):Z(n)};function en(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);
//# sourceMappingURL=56b616d8361c362c4cfc5ef7099b18734959be80-e8008f1bd99a92581666.js.map