{"version":3,"file":"59d10826bbfbcda16f8a0468998bff23ae0c0236-8e8c4b31ed5f85ef9d43.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Handler/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Handler/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/SubmitIndicator/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/icons/dnb/stop.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.AsyncChangeAndValidation) _missingMdxReference(\"Examples.AsyncChangeAndValidation\", true);\n  if (!Examples.AsyncSubmit) _missingMdxReference(\"Examples.AsyncSubmit\", true);\n  if (!Examples.AsyncSubmitComplete) _missingMdxReference(\"Examples.AsyncSubmitComplete\", true);\n  if (!Examples.Autofill) _missingMdxReference(\"Examples.Autofill\", true);\n  if (!Examples.FilterData) _missingMdxReference(\"Examples.FilterData\", true);\n  if (!Examples.Locale) _missingMdxReference(\"Examples.Locale\", true);\n  if (!Examples.RequiredAndOptionalFields) _missingMdxReference(\"Examples.RequiredAndOptionalFields\", true);\n  if (!Examples.SessionStorage) _missingMdxReference(\"Examples.SessionStorage\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Required and Optional Fields\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To make all fields required, set the \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop on the \", _jsx(_components.code, {\n        children: \"Form.Handler\"\n      }), \" component.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For fields that should remain optional, use \", _jsx(_components.code, {\n        children: \"required={false}\"\n      }), \" prop on the specific field. When doing so, it will append \\\"(optional)\\\" to the optional field's label(\", _jsx(_components.code, {\n        children: \"labelSuffix\"\n      }), \").\"]\n    }), \"\\n\", _jsx(Examples.RequiredAndOptionalFields, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"In combination with a SubmitButton\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This example uses an async \", _jsx(_components.code, {\n        children: \"onSubmit\"\n      }), \" event handler. It will disable all fields and show an indicator on the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/SubmitButton/\",\n        children: \"SubmitButton\"\n      }), \" while the form is pending.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With an async function, you can also handle the response from the server and update the form with the new data.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// Async function\\nconst onSubmit = async (data) => {\\n  try {\\n    const response = await fetch('https://api.example.com', {\\n      method: 'POST',\\n      body: JSON.stringify(data),\\n    })\\n    const data = await response.json()\\n    Form.setData('unique', data) // Whatever you want to do with the data\\n  } catch (error) {\\n    return error // Will display the error message in the form\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Examples.AsyncSubmit, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"New location after async submit\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This example is only for demo purpose and will NOT redirect to a new location. It will also time out after 10 seconds.\"\n    }), \"\\n\", _jsx(Examples.AsyncSubmitComplete, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Filter your data\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By using the \", _jsx(_components.code, {\n        children: \"filterData\"\n      }), \" method from the \", _jsx(_components.code, {\n        children: \"onSubmit\"\n      }), \" event callback you can filter out data that you don't want to send to your server.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"More info about \", _jsx(_components.code, {\n        children: \"filterData\"\n      }), \" can be found in the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/getting-started/#filter-data\",\n        children: \"Getting Started\"\n      }), \" section.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this example we filter out all fields that are disabled.\"\n    }), \"\\n\", _jsx(Examples.FilterData, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With session storage\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Changes you make to the fields are temporarily saved and loaded\\nwhen the browser reloads. The data is stored until the session storage is invalidated.\"\n    }), \"\\n\", _jsx(Examples.SessionStorage, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Locale and translations\"\n    }), \"\\n\", _jsx(Examples.Locale, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Autocomplete (autofill) user data\"\n    }), \"\\n\", _jsx(Examples.Autofill, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Complex async (autosave) example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This example demonstrates how to use async validation with an async \", _jsx(_components.code, {\n        children: \"onSubmit\"\n      }), \" and async \", _jsx(_components.code, {\n        children: \"onChange\"\n      }), \" event for both the \", _jsx(_components.code, {\n        children: \"Form.Handler\"\n      }), \" and a field itself.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"While you write, an async validation request is simulated to check if the input is valid. If it's not, an error message will be shown.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"During validation, only the relevant value will be evaluated. This means, when the delayed validation is done, and the value has changed, the validation result will be omitted.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"You can press enter to submit the form while you write. But only a string of \", _jsx(_components.code, {\n            children: \"valid\"\n          }), \" will be accepted to emit the form \", _jsx(_components.code, {\n            children: \"onSubmit\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"onChange\"\n          }), \".\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"You can start writing, wait a second or two and remove the whole text again and blur the field. The async validation return will be omitted and the \\\"required\\\" error message will be shown.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"It also shows some status messages after the validation and submit requests are done.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"This example does not include an async \", _jsx(_components.code, {\n            children: \"onBlurValidator\"\n          }), \" – but it's possible to add one into the mix as well.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"To access the \", _jsx(_components.code, {\n            children: \"date\"\n          }), \" \\\"in sync\\\" – you can use the \", _jsx(_components.a, {\n            href: \"/uilib/extensions/forms/Form/useData/\",\n            children: \"useData\"\n          }), \" hook.\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Examples.AsyncChangeAndValidation, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Form, Field, Value } from '@dnb/eufemia/src/extensions/forms'\nimport { stop as stopIcon } from '@dnb/eufemia/src/icons'\nimport { Button, Card, Flex, P, Section } from '@dnb/eufemia/src'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\nimport { createRequest } from '../SubmitIndicator/Examples'\n\nexport const RequiredAndOptionalFields = () => {\n  return (\n    <ComponentBox data-visual-test=\"required-and-optional-fields\">\n      <Form.Handler required>\n        <Card stack>\n          <Field.Email path=\"/email\" required={false} />\n          <Field.String\n            path=\"/custom\"\n            label=\"Label\"\n            labelDescription=\"\\nLabel description\"\n            required={false}\n          />\n          <Field.Currency path=\"/amount\" label=\"Amount\" />\n          <Form.SubmitButton />\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const AsyncSubmit = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        onSubmit={async (data) => console.log('onSubmit', data)}\n      >\n        <Card stack>\n          <Field.Email path=\"/email\" />\n          <Form.ButtonRow>\n            <Form.SubmitButton />\n          </Form.ButtonRow>\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const AsyncSubmitComplete = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        data={{ myField: 'Some value' }}\n        onSubmit={async (data) => {\n          console.log('onSubmit', data)\n\n          // Wait for 2 seconds\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n\n          // e.g. go to new location\n\n          // Optionally, you can return e.g. the \"pending\" status with an additional info\n          return {\n            info: 'Redirecting to a new location',\n\n            // Force the form to stay in pending state\n            status: 'pending',\n          }\n        }}\n        asyncSubmitTimeout={10000}\n      >\n        <Flex.Stack>\n          <Form.MainHeading>Heading</Form.MainHeading>\n          <Card>\n            <Value.String label=\"Summary\" path=\"/myField\" />\n          </Card>\n          <Form.ButtonRow>\n            <Form.SubmitButton />\n          </Form.ButtonRow>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const AsyncChangeAndValidation = () => {\n  return (\n    <ComponentBox scope={{ debounceAsync, createRequest, stopIcon }}>\n      {() => {\n        const validator = debounceAsync(async function secondValidator(\n          value: string,\n        ) {\n          try {\n            const request = createRequest()\n            const wasCanceled = this.addCancelEvent(request.cancel)\n            await request(2000) // Simulate a request\n\n            if (wasCanceled()) {\n              throw new Error('Validation request canceled')\n            }\n          } catch (error) {\n            return error\n          }\n\n          if (value !== 'valid') {\n            return new Error('Custom error with invalid value: ' + value) // Show this message\n          }\n        })\n\n        const cancelRequest = () => {\n          validator.cancel()\n        }\n\n        const onSubmit = async (data) => {\n          console.log('onSubmit', data)\n\n          // Wait for 2 seconds\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n\n          // For demo purposes, we show a message\n          return { info: 'Message from onSubmit return' }\n        }\n\n        const onChangeForm = async (data) => {\n          console.log('onChangeForm', data)\n\n          // Wait for 2 seconds\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n\n          // For demo purposes, we show a message\n          return { warning: 'Warning message' }\n        }\n\n        const onChangeField = async (data) => {\n          console.log('onChangeField', data)\n\n          // Wait for 2 seconds\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n\n          // For demo purposes, we show a message\n          return { info: 'Info message' }\n        }\n\n        const MyForm = () => {\n          const { data } = Form.useData('unique-id')\n          console.log('data', data)\n          return (\n            <Form.Handler\n              id=\"unique-id\"\n              onSubmit={onSubmit}\n              onChange={onChangeForm}\n            >\n              <Flex.Stack>\n                <Field.String\n                  label='Type \"valid\" to validate the field'\n                  path=\"/myField\"\n                  required\n                  validator={validator}\n                  onChange={onChangeField}\n                  autoComplete=\"off\"\n                />\n                <Form.ButtonRow>\n                  <Form.SubmitButton text=\"Save\" />\n                  <Button\n                    text=\"Stop async operations\"\n                    variant=\"tertiary\"\n                    icon={stopIcon}\n                    icon_position=\"left\"\n                    disabled={false}\n                    onClick={cancelRequest}\n                  />\n                </Form.ButtonRow>\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const SessionStorage = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        onSubmit={(data, { resetForm, clearData }) => {\n          console.log('onSubmit', data)\n\n          // Docs: https://eufemia.dnb.no/uilib/extensions/forms/DataContext/Provider/events/#onsubmit-parameters\n          resetForm()\n          clearData()\n        }}\n        sessionStorageId=\"session-key\"\n      >\n        <Card stack>\n          <Field.String label=\"Name\" path=\"/name\" />\n          <Field.Email path=\"/email\" />\n          <Form.ButtonRow>\n            <Form.SubmitButton />\n          </Form.ButtonRow>\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Autofill = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        onSubmit={(data) => console.log('onSubmit', data)}\n        autoComplete\n      >\n        <Flex.Stack>\n          <Form.MainHeading>Delivery address</Form.MainHeading>\n\n          <Card stack>\n            <Form.SubHeading>Your name</Form.SubHeading>\n\n            <Field.Name.First path=\"/firstName\" required />\n            <Field.Name.Last path=\"/lastName\" required />\n          </Card>\n\n          <Card stack>\n            <Form.SubHeading>Your address</Form.SubHeading>\n\n            <Field.Composition width=\"large\">\n              <Field.String\n                label=\"Street\"\n                width=\"stretch\"\n                path=\"/streetName\"\n                required\n              />\n              <Field.Number\n                label=\"Nr.\"\n                width=\"small\"\n                path=\"/streetNr\"\n                required\n              />\n            </Field.Composition>\n\n            <Field.PostalCodeAndCity\n              postalCode={{ required: true, path: '/postalCode' }}\n              city={{ required: true, path: '/city' }}\n            />\n          </Card>\n\n          <Card stack>\n            <P>More information about this form.</P>\n            <Form.ButtonRow>\n              <Form.SubmitButton />\n            </Form.ButtonRow>\n          </Card>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Locale = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const myTranslations = {\n          'nb-NO': { PhoneNumber: { label: 'Egendefinert 🚀' } },\n          'en-GB': { PhoneNumber: { label: 'Custom 🚀' } },\n        }\n\n        const MyForm = () => {\n          const { data } = Form.useData('my-form', {\n            locale: 'en-GB',\n          })\n\n          return (\n            <Form.Handler\n              id=\"my-form\"\n              locale={data?.locale}\n              translations={myTranslations}\n            >\n              <Card stack>\n                <Field.PhoneNumber />\n\n                <Field.Selection\n                  path=\"/locale\"\n                  variant=\"button\"\n                  optionsLayout=\"horizontal\"\n                >\n                  <Field.Option value=\"nb-NO\">Norsk</Field.Option>\n                  <Field.Option value=\"en-GB\">English</Field.Option>\n                </Field.Selection>\n              </Card>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const FilterData = () => {\n  return (\n    <ComponentBox scope={{ replaceUndefinedValues }}>\n      {() => {\n        const id = 'my-form'\n        const filterDataHandler = ({ props }) => !props.disabled\n\n        const MyForm = () => {\n          const { data } = Form.useData(id, {\n            disabled: false,\n            myField: 'Value',\n          })\n\n          return (\n            <Form.Handler\n              id={id}\n              onSubmit={(data, { filterData }) => {\n                console.log('onSubmit', filterData(filterDataHandler))\n              }}\n            >\n              <Flex.Stack>\n                <Field.Boolean label=\"Disabled\" path=\"/disabled\" />\n                <Field.String\n                  label=\"My Field\"\n                  path=\"/myField\"\n                  disabled={data.disabled}\n                />\n                <Form.ButtonRow>\n                  <Form.SubmitButton />\n                </Form.ButtonRow>\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        const Output = () => {\n          const { filterData } = Form.useData(id)\n          const { hasErrors } = Form.useError(id)\n\n          return (\n            <Section\n              top\n              innerSpace\n              backgroundColor=\"sand-yellow\"\n              breakout={false}\n              element=\"output\"\n            >\n              hasErrors: {JSON.stringify(hasErrors(), null, 2)}\n              <pre>\n                {JSON.stringify(\n                  replaceUndefinedValues(filterData(filterDataHandler)),\n                  null,\n                  2,\n                )}\n              </pre>\n            </Section>\n          )\n        }\n\n        return (\n          <>\n            <MyForm />\n            <Output />\n          </>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\n/**\n * Replaces undefined values in an object with a specified replacement value.\n * @param value - The value to check for undefined values.\n * @param replaceWith - The value to replace undefined values with. Default is null.\n * @returns The object with undefined values replaced.\n */\nfunction replaceUndefinedValues(\n  value: unknown,\n  replaceWith = null,\n): unknown {\n  if (typeof value === 'undefined') {\n    return replaceWith\n  } else if (typeof value === 'object' && value !== replaceWith) {\n    return {\n      ...value,\n      ...Object.fromEntries(\n        Object.entries(value).map(([k, v]) => [\n          k,\n          replaceUndefinedValues(v),\n        ]),\n      ),\n    }\n  } else {\n    return value\n  }\n}\n","import { Button, Card, Flex, FormLabel } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, FieldBlock, Form } from '@dnb/eufemia/src/extensions/forms'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      <Form.SubmitIndicator state=\"pending\" />\n    </ComponentBox>\n  )\n}\n\nexport const AsyncSubmitBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay}>\n            <Card stack>\n              <Field.String path=\"/myField\" label=\"Short label\" />\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AsyncChangeBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay} onChange={delay}>\n            <Card stack>\n              <Field.String\n                path=\"/myField1\"\n                label=\"Label (with async validation)\"\n                placeholder=\"Write something ...\"\n                validator={delay}\n              />\n              <FieldBlock width=\"medium\">\n                <Field.String\n                  path=\"/myField2\"\n                  width=\"stretch\"\n                  label=\"This is a long label\"\n                />\n              </FieldBlock>\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\ntype CreateRequestReturn = Promise<{ hasError: boolean; cancel?: boolean }>\n\nexport const createRequest = () => {\n  let timeout: NodeJS.Timeout | null\n  let resolvePromise: ((value?: unknown) => void) | undefined\n\n  const fn = (t: number): CreateRequestReturn => {\n    return new Promise((resolve) => {\n      resolvePromise = resolve\n      timeout = setTimeout(() => {\n        resolve({ hasError: false })\n      }, t)\n    })\n  }\n\n  fn.cancel = () => {\n    resolvePromise?.({ hasError: true })\n    clearTimeout(timeout)\n    timeout = null\n  }\n\n  return fn\n}\n\nexport const WithinOtherComponents = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Flex.Horizontal align=\"center\">\n          <Form.SubmitButton showIndicator />\n          <Button variant=\"secondary\" icon=\"chevron_right\">\n            Secondary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <Button variant=\"tertiary\">\n            Tertiary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <FormLabel>\n            Label\n            <Form.SubmitIndicator state=\"pending\" />\n          </FormLabel>\n        </Flex.Horizontal>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","/** This file is auto generated by convertSvgToJsx.ts */\n\nimport React from 'react'\nconst stop = (props) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={16}\n    height={16}\n    fill=\"none\"\n    viewBox=\"0 0 16 16\"\n    {...props}\n  >\n    <path\n      stroke=\"#000\"\n      strokeWidth={1.5}\n      d=\"M12.95 3.05a7 7 0 0 0-9.9 9.9m9.9-9.9a7 7 0 1 1-9.9 9.9m9.9-9.9-9.9 9.9\"\n    />\n  </svg>\n)\nexport default stop\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","h3","p","code","a","pre","ul","li","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","children","_jsx","href","className","id","component","Error","wrapper","MDXLayout","RequiredAndOptionalFields","ComponentBox","AsyncSubmit","AsyncSubmitComplete","AsyncChangeAndValidation","scope","debounceAsync","createRequest","stopIcon","noInline","SessionStorage","Autofill","Locale","FilterData","replaceUndefinedValues","value","replaceWith","fromEntries","entries","map","_ref","k","v","Default","AsyncSubmitBehavior","AsyncChangeBehavior","timeout","resolvePromise","fn","t","Promise","resolve","setTimeout","hasError","cancel","_resolvePromise","clearTimeout","WithinOtherComponents","xmlns","width","height","fill","viewBox","stroke","strokeWidth","d"],"sourceRoot":""}