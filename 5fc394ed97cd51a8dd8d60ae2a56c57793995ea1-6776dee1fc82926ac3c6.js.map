{"version":3,"file":"5fc394ed97cd51a8dd8d60ae2a56c57793995ea1-6776dee1fc82926ac3c6.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../../node_modules/date-fns/esm/_lib/toInteger/index.js","webpack://dnb-design-system-portal/../../node_modules/date-fns/esm/_lib/requiredArgs/index.js","webpack://dnb-design-system-portal/../../node_modules/date-fns/esm/toDate/index.js","webpack://dnb-design-system-portal/../../node_modules/date-fns/esm/addDays/index.js","webpack://dnb-design-system-portal/../../node_modules/date-fns/esm/startOfMonth/index.js","webpack://dnb-design-system-portal/../../node_modules/date-fns/esm/lastDayOfMonth/index.js","webpack://dnb-design-system-portal/../../node_modules/date-fns/esm/startOfWeek/index.js","webpack://dnb-design-system-portal/../../node_modules/date-fns/esm/lastDayOfWeek/index.js","webpack://dnb-design-system-portal/../../node_modules/date-fns/esm/isWeekend/index.js","webpack://dnb-design-system-portal/./src/docs/uilib/components/date-picker/Examples.tsx"],"sourcesContent":["export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name lastDayOfMonth\n * @category Month Helpers\n * @summary Return the last day of a month for the given date.\n *\n * @description\n * Return the last day of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of a month for 2 September 2014 11:55:00:\n * var result = lastDayOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 00:00:00\n */\n\nexport default function lastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name lastDayOfWeek\n * @category Week Helpers\n * @summary Return the last day of a week for the given date.\n *\n * @description\n * Return the last day of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the last day of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The last day of a week for 2 September 2014 11:55:00:\n * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the last day of the week for 2 September 2014 11:55:00:\n * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport default function lastDayOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setHours(0, 0, 0, 0);\n  date.setDate(date.getDate() + diff);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isWeekend\n * @category Weekday Helpers\n * @summary Does the given date fall on a weekend?\n *\n * @description\n * Does the given date fall on a weekend?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date falls on a weekend\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Does 5 October 2014 fall on a weekend?\n * const result = isWeekend(new Date(2014, 9, 5))\n * //=> true\n */\n\nexport default function isWeekend(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  return day === 0 || day === 6;\n}","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport styled from '@emotion/styled'\nimport addDays from 'date-fns/addDays'\nimport startOfMonth from 'date-fns/startOfMonth'\nimport lastDayOfMonth from 'date-fns/lastDayOfMonth'\nimport startOfWeek from 'date-fns/startOfWeek'\nimport lastDayOfWeek from 'date-fns/lastDayOfWeek'\nimport isWeekend from 'date-fns/isWeekend'\nimport { DatePicker, Flex, HelpButton } from '@dnb/eufemia/src'\nimport { Provider } from '@dnb/eufemia/src/shared'\n\nconst Wrapper = styled.div`\n  [data-visual-test='date-picker-calendar'] .dnb-date-picker__container,\n  [data-visual-test='date-picker-only-month'] .dnb-date-picker__container,\n  [data-visual-test='date-picker-year-navigation']\n    .dnb-date-picker__container {\n    display: block;\n    position: relative;\n    top: 0;\n  }\n  [data-visual-test='date-picker-calendar'] .dnb-date-picker,\n  [data-visual-test='date-picker-only-month'] .dnb-date-picker,\n  [data-visual-test='date-picker-year-navigation'] .dnb-date-picker {\n    margin-left: 1rem;\n  }\n`\n\nexport const DatePickerRange = () => (\n  <ComponentBox\n    scope={{\n      addDays,\n      startOfMonth,\n      lastDayOfMonth,\n      startOfWeek,\n      lastDayOfWeek,\n    }}\n  >\n    <DatePicker\n      label=\"DatePicker\"\n      startDate=\"2019-04-01\"\n      endDate=\"2019-05-17\"\n      range={true}\n      showInput={true}\n      onChange={({ start_date, end_date }) => {\n        console.log('onChange', start_date, end_date)\n      }}\n      onSubmit={({ start_date, end_date }) => {\n        console.log('onSubmit', start_date, end_date)\n      }}\n      onCancel={({ start_date, end_date }) => {\n        console.log('onCancel', start_date, end_date)\n      }}\n      onBlur={({\n        start_date,\n        end_date,\n        partialStartDate,\n        partialEndDate,\n      }) => {\n        console.log('onBlurPartial', partialStartDate, partialEndDate)\n        console.log('onBlurcomplete', start_date, end_date)\n      }}\n      shortcuts={[\n        {\n          title: 'Set date period',\n          start_date: '1969-07-15',\n          end_date: '1969-08-15',\n        },\n        {\n          title: 'Today',\n          start_date: new Date(),\n        },\n        {\n          title: 'This week',\n          start_date: startOfWeek(new Date()),\n          end_date: lastDayOfWeek(new Date()),\n        },\n        {\n          close_on_select: true,\n          title: 'This month',\n          start_date: startOfMonth(new Date()),\n          end_date: lastDayOfMonth(new Date()),\n        },\n        {\n          title: 'Relative +3 days',\n          start_date: ({ start_date }) => start_date || new Date(),\n          end_date: ({ end_date }) => addDays(end_date || new Date(), 3),\n        },\n      ]}\n    />\n  </ComponentBox>\n)\n\nexport const DatePickerWithInput = () => (\n  <ComponentBox>\n    <DatePicker\n      label=\"DatePicker\"\n      date={new Date()}\n      showInput={true}\n      showCancelButton={true}\n      showResetButton={true}\n      onChange={({ date }) => {\n        console.log('onChange', date)\n      }}\n      onCancel={({ date }) => {\n        console.log('onCancel', date)\n      }}\n      onBlur={({ date }) => {\n        console.log('onBlur', date)\n      }}\n    />\n  </ComponentBox>\n)\n\nexport const DatePickerTrigger = () => (\n  <Wrapper>\n    <ComponentBox data-visual-test=\"date-picker-trigger-default\">\n      <DatePicker\n        label=\"DatePicker\"\n        date=\"2019-05-05\"\n        returnFormat=\"dd-MM-yyyy\"\n        onChange={({ date }) => {\n          console.log('onChange', date)\n        }}\n        onShow={({ date }) => {\n          console.log('onShow', date)\n        }}\n        onBlur={({ start_date, end_date }) => {\n          console.log('onBlur', start_date, end_date)\n        }}\n      />\n    </ComponentBox>\n  </Wrapper>\n)\n\nexport const DatePickerHiddenNav = () => (\n  <ComponentBox>\n    <DatePicker\n      label=\"DatePicker\"\n      date=\"2022/05/05\"\n      minDate=\"2022/05/01\"\n      maxDate=\"2022/05/17\"\n      dateFormat=\"yyyy/MM/dd\"\n      returnFormat=\"dd/MM/yyyy\"\n      hideNavigation={true}\n      hideDays={true}\n      onChange={({ date }) => {\n        console.log('onChange', date)\n      }}\n      onHide={({ date }) => {\n        console.log('onHide', date)\n      }}\n      onBlur={({ date }) => {\n        console.log('onBlur', date)\n      }}\n    />\n  </ComponentBox>\n)\n\nexport const DatePickerMonthOnly = () => (\n  <ComponentBox>\n    <DatePicker\n      label=\"DatePicker\"\n      date=\"05/02/2019\"\n      dateFormat=\"MM/dd/yyyy\"\n      onlyMonth={true}\n    />\n  </ComponentBox>\n)\n\nexport const DatePickerStatusMessage = () => (\n  <ComponentBox>\n    <DatePicker\n      label=\"DatePicker\"\n      date={new Date()}\n      showInput={true}\n      status=\"Please select a valid date\"\n      statusState=\"info\"\n    />\n  </ComponentBox>\n)\n\nexport const DatePickerSuffix = () => (\n  <ComponentBox>\n    <DatePicker\n      label=\"DatePicker\"\n      date={new Date()}\n      showInput\n      suffix={<HelpButton title=\"Modal Title\">Modal content</HelpButton>}\n    />\n  </ComponentBox>\n)\n\nexport const DatePickerLinked = () => (\n  <Wrapper>\n    <ComponentBox data-visual-test=\"date-picker-input\">\n      <DatePicker label=\"DatePicker\" range link showInput />\n    </ComponentBox>\n  </Wrapper>\n)\n\nexport const DatePickerNoInputStatus = () => (\n  <Wrapper>\n    <ComponentBox data-visual-test=\"date-picker-trigger-error\">\n      <DatePicker\n        label=\"DatePicker\"\n        date=\"2019-05-05\"\n        hideNavigation={true}\n        status=\"Please select a valid date\"\n      />\n    </ComponentBox>\n  </Wrapper>\n)\n\nexport const DatePickerErrorMessage = () => (\n  <Wrapper>\n    <ComponentBox data-visual-test=\"date-picker-input-error\">\n      <DatePicker\n        label=\"DatePicker\"\n        date=\"2019-05-05\"\n        showInput={true}\n        showSubmitButton={true}\n        stretch={true}\n        status={\n          <span>\n            Status message with <b>HTML</b> inside\n          </span>\n        }\n      />\n    </ComponentBox>\n  </Wrapper>\n)\n\nexport const DatePickerErrorStatus = () => (\n  <ComponentBox>\n    <DatePicker\n      label=\"DatePicker\"\n      date={new Date()}\n      hideNavigation={true}\n      status=\"error\"\n    />\n  </ComponentBox>\n)\n\nexport const DatePickerCalendar = () => (\n  <Wrapper>\n    <ComponentBox data-visual-test=\"date-picker-calendar\">\n      <DatePicker\n        opened={true}\n        preventClose={true}\n        disableAutofocus={true}\n        range={true}\n        startDate=\"2019-05-05\"\n        endDate=\"2019-06-05\"\n        skipPortal\n      />\n    </ComponentBox>\n  </Wrapper>\n)\n\nexport const DatePickerScreenshotTestSizes = () => {\n  return (\n    <Wrapper>\n      <ComponentBox data-visual-test=\"date-picker-sizes\">\n        <Provider formElement={{ labelDirection: 'vertical' }}>\n          <Flex.Vertical>\n            <DatePicker\n              label=\"DatePicker\"\n              date={new Date('2022/06/10')}\n              showInput={true}\n            />\n            <DatePicker\n              size=\"small\"\n              label=\"DatePicker\"\n              date={new Date('2022/06/10')}\n              showInput={true}\n            />\n            <DatePicker\n              size=\"medium\"\n              label=\"DatePicker\"\n              date={new Date('2022/06/10')}\n              showInput={true}\n            />\n            <DatePicker\n              size=\"large\"\n              label=\"DatePicker\"\n              date={new Date('2022/06/10')}\n              showInput={true}\n            />\n          </Flex.Vertical>\n        </Provider>\n      </ComponentBox>\n    </Wrapper>\n  )\n}\n\nexport const DatePickerScreenshotTestDisabled = () => {\n  return (\n    <Wrapper>\n      <ComponentBox data-visual-test=\"date-picker-disabled\">\n        <Provider formElement={{ labelDirection: 'vertical' }}>\n          <Flex.Vertical>\n            <DatePicker disabled />\n            <DatePicker showInput={true} disabled />\n          </Flex.Vertical>\n        </Provider>\n      </ComponentBox>\n    </Wrapper>\n  )\n}\n\nexport const DatePickerDateFns = () => (\n  <ComponentBox scope={{ addDays }} hidePreview hideToolbar>\n    <DatePicker\n      shortcuts={[\n        { title: 'Set date', date: '1969-07-15' },\n        {\n          title: 'Relative +3 days',\n          date: ({ date }) => date && addDays(date, 3),\n        },\n      ]}\n    />\n  </ComponentBox>\n)\n\nexport const DatePickerDateFnsRange = () => (\n  <ComponentBox\n    scope={{ startOfMonth, lastDayOfMonth }}\n    hidePreview\n    hideToolbar\n  >\n    <DatePicker\n      shortcuts={[\n        {\n          title: 'Set date period',\n          start_date: '1969-07-15',\n          end_date: '1969-07-15',\n          close_on_select: true, // will close the picker\n        },\n        {\n          title: 'This month',\n          start_date: startOfMonth(new Date()),\n          end_date: lastDayOfMonth(new Date()),\n        },\n      ]}\n    />\n  </ComponentBox>\n)\n\nexport const DatePickerDateFnsRangeIsWeekend = () => (\n  <ComponentBox scope={{ isWeekend }} hidePreview>\n    <DatePicker\n      onDaysRender={(days, calendarNumber = 0) => {\n        return days.map((dayObject) => {\n          if (isWeekend(dayObject.date)) {\n            dayObject.isInactive = true\n            dayObject.className = 'dnb-date-picker__day--weekend' // custom css\n          }\n          return dayObject\n        })\n      }}\n    />\n  </ComponentBox>\n)\n\nexport const DatePickerLabelAlignmentRight = () => (\n  <ComponentBox data-visual-test=\"date-picker-label-alignment-right\">\n    <DatePicker label=\"Label\" labelAlignment=\"right\" />\n  </ComponentBox>\n)\n\nexport const DatePickerLabelAlignmentWithButtonRight = () => (\n  <ComponentBox data-visual-test=\"date-picker-with-button-label-alignment-right\">\n    <DatePicker label=\"Label\" labelAlignment=\"right\" showInput={true} />\n  </ComponentBox>\n)\n\nexport const DatePickerYearNavigation = () => (\n  <ComponentBox>\n    <DatePicker showInput yearNavigation />\n  </ComponentBox>\n)\n\nexport const DatePickerYearNavigationOpen = () => (\n  <Wrapper>\n    <ComponentBox data-visual-test=\"date-picker-year-navigation\">\n      <DatePicker\n        date=\"2025-05-12\"\n        yearNavigation\n        opened\n        skipPortal\n        preventClose\n        disableAutofocus\n      />\n    </ComponentBox>\n  </Wrapper>\n)\n\nexport const DatePickerOnlyMonthOpen = () => (\n  <Wrapper>\n    <ComponentBox data-visual-test=\"date-picker-only-month\">\n      <DatePicker date=\"2025-05-20\" onlyMonth opened skipPortal />\n    </ComponentBox>\n  </Wrapper>\n)\n"],"names":["toInteger","dirtyNumber","NaN","number","Number","isNaN","Math","ceil","floor","requiredArgs","required","args","length","TypeError","toDate","argument","arguments","argStr","Object","prototype","toString","call","Date","getTime","console","warn","Error","stack","addDays","dirtyDate","dirtyAmount","date","amount","setDate","getDate","startOfMonth","setHours","lastDayOfMonth","month","getMonth","setFullYear","getFullYear","startOfWeek","dirtyOptions","options","locale","localeWeekStartsOn","weekStartsOn","defaultWeekStartsOn","RangeError","day","getDay","diff","lastDayOfWeek","isWeekend","Wrapper","_styled","target","name","styles","DatePickerRange","_jsx2","ComponentBox","scope","children","DatePickerWithInput","DatePickerTrigger","_jsx","DatePickerHiddenNav","DatePickerMonthOnly","DatePickerStatusMessage","DatePickerSuffix","DatePickerLinked","DatePickerNoInputStatus","DatePickerErrorMessage","DatePickerErrorStatus","DatePickerCalendar","DatePickerScreenshotTestSizes","DatePickerScreenshotTestDisabled","DatePickerDateFns","hidePreview","hideToolbar","DatePickerDateFnsRange","DatePickerDateFnsRangeIsWeekend","DatePickerLabelAlignmentRight","DatePickerLabelAlignmentWithButtonRight","DatePickerYearNavigation","DatePickerYearNavigationOpen","DatePickerOnlyMonthOpen"],"sourceRoot":""}