"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[95716],{3869:function(e,n,t){t.r(n),t.d(n,{AsyncChangeBehavior:function(){return r},AsyncSubmitBehavior:function(){return s},Default:function(){return a},WithinALabel:function(){return p},WithinOtherComponents:function(){return d},createRequest:function(){return c}});var i=t(67083),l=t(60743),o=t(31085);const a=()=>(0,o.jsx)(i.A,{children:'<Form.SubmitIndicator state="pending" />\n'}),s=()=>(0,o.jsx)(i.A,{scope:{createRequest:c,debounceAsync:l.A},noInline:!0,children:'const delay = debounceAsync(async function () {\n  try {\n    const request = createRequest()\n    await request(1000) // Simulate a request\n  } catch (error) {\n    return error\n  }\n})\nrender(\n  <Form.Handler onSubmit={delay}>\n    <Form.Card>\n      <Field.String path="/myField" label="Short label" />\n      <Form.ButtonRow>\n        <Form.SubmitButton />\n        <Button variant="tertiary">Cancel</Button>\n      </Form.ButtonRow>\n    </Form.Card>\n  </Form.Handler>,\n)\n'}),r=()=>(0,o.jsx)(i.A,{scope:{createRequest:c,debounceAsync:l.A},noInline:!0,children:'const delay = debounceAsync(async function () {\n  try {\n    const request = createRequest()\n    await request(1000) // Simulate a request\n  } catch (error) {\n    return error\n  }\n})\nrender(\n  <Form.Handler onSubmit={delay} onChange={delay}>\n    <Form.Card>\n      <Field.String\n        path="/myField1"\n        label="Label (with async validation)"\n        placeholder="Write something ..."\n        onChangeValidator={delay}\n      />\n      <FieldBlock width="medium">\n        <Field.String\n          path="/myField2"\n          width="stretch"\n          label="This is a long label"\n        />\n      </FieldBlock>\n      <Form.ButtonRow>\n        <Form.SubmitButton />\n        <Button variant="tertiary">Cancel</Button>\n      </Form.ButtonRow>\n    </Form.Card>\n  </Form.Handler>,\n)\n'}),c=()=>{let e,n;const t=t=>new Promise((i=>{n=i,e=setTimeout((()=>{i({hasError:!1})}),t)}));return t.cancel=()=>{var t;null===(t=n)||void 0===t||t({hasError:!0}),clearTimeout(e),e=null},t},d=()=>(0,o.jsx)(i.A,{children:'<Form.Handler>\n  <Flex.Horizontal align="center">\n    <Form.SubmitButton showIndicator />\n    <Button variant="secondary" icon="chevron_right">\n      Secondary\n      <Form.SubmitIndicator state="pending" />\n    </Button>\n    <Button variant="tertiary">\n      Tertiary\n      <Form.SubmitIndicator state="pending" />\n    </Button>\n    <FormLabel>\n      Label\n      <Form.SubmitIndicator state="pending" />\n    </FormLabel>\n  </Flex.Horizontal>\n</Form.Handler>\n'}),p=()=>(0,o.jsx)(i.A,{"data-visual-test":"submit-indicator-with-label",children:'<Form.Handler>\n  <Form.SubmitIndicator state="pending" showLabel />\n</Form.Handler>\n'})},6366:function(e,n,t){t.d(n,{$R:function(){return v},$x:function(){return w},Fj:function(){return b},Fp:function(){return j},IT:function(){return g},LL:function(){return F},M3:function(){return c},M8:function(){return r},O_:function(){return k},RC:function(){return d},SR:function(){return h},_9:function(){return C},_H:function(){return u},cK:function(){return m},cN:function(){return p},dA:function(){return M},dX:function(){return x},eT:function(){return A},iX:function(){return f},jO:function(){return y},lN:function(){return s},lx:function(){return S},pK:function(){return a},qt:function(){return U}});t(14041);var i=t(67083),l=t(3869),o=t(31085);function a(e,n,t){var i;if("undefined"==typeof window||null===(i=window)||void 0===i||!i.File)return;const l=new File([],e,{type:t});return Object.defineProperty(l,"size",{get(){return n}}),l}const s=()=>(0,o.jsx)(i.A,{"data-visual-test":"upload-file-list",scope:{createMockFile:a},noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('file-list')\n  if (files.length) {\n    console.log('files', files)\n  }\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('fileName.png', 123, 'image/png'),\n        errorMessage: 'This is no real file!',\n      },\n    ])\n  }, [setFiles])\n  return <Upload acceptedFileTypes={['jpg', 'png']} id=\"file-list\" />\n}\nrender(<Component />)\n"}),r=()=>(0,o.jsx)(i.A,{"data-visual-test":"upload-basic",children:"<Upload\n  acceptedFileTypes={['jpg', 'png']}\n  onChange={({ files }) => console.log('onChange', files)}\n/>\n"}),c=()=>(0,o.jsx)(i.A,{"data-visual-test":"upload-basic-compact-variant",children:"<Upload\n  variant=\"compact\"\n  acceptedFileTypes={['jpg', 'png']}\n  onChange={({ files }) => console.log('onChange', files)}\n/>\n"}),d=()=>(0,o.jsx)(i.A,{"data-visual-test":"upload-basic-compact-variant-without-labels",children:"<Upload\n  variant=\"compact\"\n  acceptedFileTypes={['jpg', 'png']}\n  title={false}\n  text={false}\n  onChange={({ files }) => console.log('onChange', files)}\n/>\n"}),p=()=>(0,o.jsx)(i.A,{"data-visual-test":"upload-disabled",children:"<Upload\n  acceptedFileTypes={['jpg', 'png']}\n  disabled\n  onChange={({ files }) => console.log('onChange', files)}\n/>\n"}),u=()=>(0,o.jsx)(i.A,{noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-single-file')\n  if (files.length) {\n    console.log('files', files, setFiles)\n  }\n  return (\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-single-file\"\n      filesAmountLimit={1}\n    />\n  )\n}\nrender(<Component />)\n"}),m=()=>(0,o.jsx)(i.A,{scope:{createMockFile:a},"data-visual-test":"upload-files-amount-message",noInline:!0,children:"const Component = () => {\n  const { setInternalFiles, setFiles } = Upload.useUpload(\n    'upload-files-amount-message',\n  )\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('fileName1.png', 123, 'image/png'),\n      },\n      {\n        file: createMockFile('fileName2.png', 321, 'image/png'),\n      },\n    ])\n    setInternalFiles([\n      {\n        file: createMockFile('fileName1.png', 123, 'image/png'),\n        id: '1',\n        exists: false,\n      },\n      {\n        file: createMockFile('fileName2.png', 321, 'image/png'),\n        id: '2',\n        exists: false,\n      },\n    ])\n  }, [])\n  return (\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-files-amount-message\"\n      filesAmountLimit={1}\n    />\n  )\n}\nrender(<Component />)\n"}),f=()=>(0,o.jsx)(i.A,{scope:{createMockFile:a},"data-visual-test":"upload-files-amount-limit",noInline:!0,children:"const Component = () => {\n  const { setInternalFiles, setFiles } = Upload.useUpload(\n    'upload-files-amount-limit',\n  )\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('fileName1.png', 123, 'image/png'),\n      },\n      {\n        file: createMockFile('fileName2.png', 321, 'image/png'),\n      },\n    ])\n    setInternalFiles([\n      {\n        file: createMockFile('fileName1.png', 123, 'image/png'),\n        id: '1',\n        exists: false,\n      },\n      {\n        file: createMockFile('fileName2.png', 321, 'image/png'),\n        id: '2',\n        exists: false,\n      },\n    ])\n  }, [])\n  return (\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-files-amount-limit\"\n      filesAmountLimit={2}\n    />\n  )\n}\nrender(<Component />)\n"}),h=()=>(0,o.jsx)(i.A,{noInline:!0,children:"const Component = () => {\n  const myUploadId = 'unique-id' // or a function, object or React Context reference.\n  const { files, setFiles } = Upload.useUpload(myUploadId) // id is needed when wanting to connect with the useUpload hook.\n\n  return (\n    <>\n      <Upload acceptedFileTypes={['jpg', 'png']} id={myUploadId} />\n\n      <Button\n        top=\"small\"\n        disabled={files.length < 1}\n        onClick={() => setFiles([])}\n      >\n        Remove selected files\n      </Button>\n\n      <Preview files={files} />\n    </>\n  )\n  function Preview({ files }) {\n    const [images, setImages] = React.useState([])\n    React.useEffect(() => {\n      files.map(({ file }) => {\n        let reader = new FileReader()\n        reader.addEventListener(\n          'load',\n          (event) => {\n            images.push({\n              blob: event.target,\n              file,\n            })\n            setImages([...images])\n            reader = null\n          },\n          false,\n        )\n        reader.readAsDataURL(file)\n      })\n    }, [files])\n    return (\n      <Section aria-label=\"List of chosen images\">\n        {images.map((img, i) => (\n          <Img\n            top\n            key={i}\n            src={img.blob.result}\n            alt={img.file.name}\n            height={100}\n          />\n        ))}\n      </Section>\n    )\n  }\n}\nrender(<Component />)\n"}),g=()=>(0,o.jsx)(i.A,{"data-visual-test":"upload-is-loading",scope:{createMockFile:a},noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-is-loading')\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('fileName.png', 123, 'image/png'),\n        isLoading: true,\n      },\n    ])\n  }, [])\n  return (\n    <>\n      <Upload acceptedFileTypes={['jpg', 'png']} id=\"upload-is-loading\" />\n      <ToggleButton\n        top=\"small\"\n        disabled={files.length < 1}\n        on_change={({ checked }) =>\n          setFiles(\n            files.map((fileItem) => {\n              return {\n                ...fileItem,\n                isLoading: checked,\n              }\n            }),\n          )\n        }\n      >\n        Files is loading toggle\n      </ToggleButton>\n    </>\n  )\n}\nrender(<Component />)\n"}),F=()=>(0,o.jsx)(i.A,{"data-visual-test":"upload-error-message",noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-error-message')\n  return (\n    <>\n      <Upload\n        acceptedFileTypes={['jpg', 'png']}\n        id=\"upload-error-message\"\n      />\n      <ToggleButton\n        top=\"small\"\n        disabled={files.length < 1}\n        on_change={({ checked }) => {\n          setFiles(\n            files.map((fileItem) => {\n              return {\n                ...fileItem,\n                errorMessage: checked ? 'custom error message' : null,\n              }\n            }),\n          )\n        }}\n      >\n        Toggle error message\n      </ToggleButton>\n    </>\n  )\n}\nrender(<Component />)\n"}),y=()=>(0,o.jsx)(i.A,{noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-accepted-formats')\n  if (files.length) {\n    console.log('files', files, setFiles)\n  }\n  return (\n    <Upload\n      acceptedFileTypes={['png', 'jpg', 'pdf']}\n      id=\"upload-accepted-formats\"\n    />\n  )\n}\nrender(<Component />)\n"}),x=()=>(0,o.jsx)(i.A,{"data-visual-test":"upload-file-max-size-based-on-file-format",hideCode:!0,children:"<Upload\n  fileMaxSize={99}\n  acceptedFileTypes={[\n    {\n      fileType: 'jpg',\n      fileMaxSize: 1,\n    },\n    {\n      fileType: 'doc',\n      fileMaxSize: 1,\n    },\n    {\n      fileType: 'svg',\n      fileMaxSize: 1,\n    },\n    {\n      fileType: 'gif',\n      fileMaxSize: 1,\n    },\n    {\n      fileType: 'doc',\n      fileMaxSize: 4,\n    },\n    {\n      fileType: 'docx',\n      fileMaxSize: 4,\n    },\n    {\n      fileType: 'tiff',\n      fileMaxSize: 5,\n    },\n    {\n      fileType: 'tif',\n      fileMaxSize: 5,\n    },\n    {\n      fileType: 'html',\n      fileMaxSize: 6,\n    },\n    {\n      fileType: 'htm',\n      fileMaxSize: 6,\n    },\n    {\n      fileType: 'xls',\n      fileMaxSize: 7,\n    },\n    {\n      fileType: 'xlsx',\n      fileMaxSize: 7,\n    },\n    {\n      fileType: 'odt',\n    },\n    {\n      fileType: 'pdf',\n    },\n    {\n      fileType: 'text',\n      fileMaxSize: false,\n    },\n    {\n      fileType: 'txt',\n      fileMaxSize: 0,\n    },\n    {\n      fileType: 'zip',\n      fileMaxSize: 99,\n    },\n  ]}\n/>\n"}),j=()=>(0,o.jsx)(i.A,{children:"<Upload\n  acceptedFileTypes={[\n    {\n      fileType: 'jpg',\n      fileMaxSize: 0,\n    },\n    {\n      fileType: 'doc',\n      fileMaxSize: false,\n    },\n    {\n      fileType: 'svg',\n    },\n  ]}\n/>\n"}),v=()=>(0,o.jsx)(i.A,{"data-visual-test":"upload-disabled-file-max-size",children:"<Upload acceptedFileTypes={['jpg', 'pdf']} fileMaxSize={false} />\n"}),b=()=>(0,o.jsx)(i.A,{"data-visual-test":"upload-no-title-no-text",children:"<Upload title={false} text={false} acceptedFileTypes={['jpg', 'png']} />\n"}),k=()=>(0,o.jsx)(i.A,{scope:{createRequest:l.createRequest},noInline:!0,children:"async function mockAsyncFileRemoval({ fileItem }) {\n  const request = createRequest()\n  console.log('making API request to remove:', fileItem.file.name)\n  await request(3000) // Simulate a request\n  const mockResponse = {\n    successful_removal: Math.random() < 0.5, // Randomly fails to remove the file\n  }\n\n  if (!mockResponse.successful_removal) {\n    throw new Error('Unable to remove this file')\n  }\n}\nrender(\n  <Upload\n    onFileDelete={mockAsyncFileRemoval}\n    acceptedFileTypes={['jpg', 'png']}\n  />,\n)\n"}),M=()=>(0,o.jsx)(i.A,{scope:{createMockFile:a,createRequest:l.createRequest},"data-visual-test":"upload-on-file-click",noInline:!0,children:"const Component = () => {\n  const { setFiles } = Upload.useUpload('upload-on-file-click')\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('1501870.jpg', 123, 'image/png'),\n        id: '1',\n      },\n      {\n        file: createMockFile(\n          'file-name-that-is-very-long-and-has-letters.png',\n          123,\n          'image/png',\n        ),\n        id: '2',\n      },\n    ])\n  }, [setFiles])\n  async function mockAsyncFileFetching({ fileItem }) {\n    const request = createRequest()\n    console.log(\n      'making API request to fetch the url of the file:',\n      fileItem.file.name,\n    )\n    await request(2000) // Simulate a request\n    window.open(\n      `https://eufemia.dnb.no/images/avatars/${fileItem.file.name}`,\n      '_blank',\n    )\n  }\n  return (\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-on-file-click\"\n      onFileClick={mockAsyncFileFetching}\n    />\n  )\n}\nrender(<Component />)\n"}),U=()=>(0,o.jsx)(i.A,{scope:{createMockFile:a,createRequest:l.createRequest},"data-visual-test":"upload-file-empty-size",noInline:!0,children:"const Component = () => {\n  const { setFiles } = Upload.useUpload('upload-file-size-empty')\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('1501870.jpg', 0, 'image/png'),\n        id: '1',\n      },\n      {\n        file: createMockFile(\n          'file-name-that-is-very-long-and-has-letters.png',\n          0,\n          'image/png',\n        ),\n        id: '2',\n      },\n    ])\n  }, [setFiles])\n  return (\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-file-size-empty\"\n    />\n  )\n}\nrender(<Component />)\n"}),A=()=>(0,o.jsx)(i.A,{"data-visual-test":"upload-disabled-drag-and-drop",children:"<Upload\n  disableDragAndDrop\n  acceptedFileTypes={['jpg', 'png']}\n  onChange={({ files }) => console.log('onChange', files)}\n/>\n"}),C=()=>(0,o.jsx)(i.A,{scope:{createMockFile:a,createRequest:l.createRequest},"data-visual-test":"upload-description",noInline:!0,children:"const Component = () => {\n  const { setFiles } = Upload.useUpload('upload-description')\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('1501870.jpg', 0, 'image/png'),\n        id: '1',\n        description: 'This is my description',\n      },\n      {\n        file: createMockFile(\n          'file-name-that-is-very-long-and-has-letters.png',\n          0,\n          'image/png',\n        ),\n        id: '2',\n      },\n      {\n        file: createMockFile('123.jpg', 0, 'image/png'),\n        id: '3',\n        description: 'This is my description',\n      },\n      {\n        file: createMockFile('321.jpg', 0, 'image/png'),\n        id: '4',\n      },\n    ])\n  }, [setFiles])\n  return (\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-description\"\n      onChange={({ files }) =>\n        setFiles(\n          files.map((fileItem) => {\n            return {\n              ...fileItem,\n              description: 'This is my description',\n            }\n          }),\n        )\n      }\n    />\n  )\n}\nrender(<Component />)\n"}),S=()=>(0,o.jsx)(i.A,{scope:{createMockFile:a,createRequest:l.createRequest},"data-visual-test":"upload-remove-delete-button",noInline:!0,children:"const Component = () => {\n  const { setFiles } = Upload.useUpload('upload-remove-delete-button')\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('1501870.jpg', 0, 'image/png'),\n        id: '1',\n      },\n      {\n        file: createMockFile(\n          'file-name-that-is-very-very-very-very-very-very-very-verylong-to-display-that-when-remove-button-is-hidden-file-name-will-take-full-width.png',\n          0,\n          'image/png',\n        ),\n        description:\n          'Description that is very very very very very very very very long to display that when delete button is removed, file description will take full width.',\n        removeDeleteButton: true,\n      },\n      {\n        file: createMockFile('123.jpg', 0, 'image/png'),\n        id: '3',\n      },\n      {\n        file: createMockFile('321.jpg', 0, 'image/png'),\n        id: '4',\n        removeDeleteButton: true,\n      },\n    ])\n  }, [setFiles])\n  return (\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-remove-delete-button\"\n      onChange={({ files }) =>\n        setFiles(\n          files.map((fileItem) => {\n            return {\n              ...fileItem,\n              removeDeleteButton: true,\n            }\n          }),\n        )\n      }\n    />\n  )\n}\nrender(<Component />)\n"}),w=()=>(0,o.jsx)(i.A,{scope:{createMockFile:a,createRequest:l.createRequest},"data-visual-test":"upload-compact-variant-files-list",noInline:!0,children:"const Component = () => {\n  const { setFiles } = Upload.useUpload('upload-compact-variant-files')\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('1501870.jpg', 0, 'image/png'),\n        id: '1',\n      },\n      {\n        file: createMockFile(\n          'file-name-that-is-very-long-and-has-letters.png',\n          0,\n          'image/png',\n        ),\n        id: '2',\n      },\n      {\n        file: createMockFile('123.jpg', 0, 'image/png'),\n        id: '3',\n      },\n      {\n        file: createMockFile('321.jpg', 0, 'image/png'),\n        id: '4',\n      },\n    ])\n  }, [setFiles])\n  return (\n    <Upload\n      variant=\"compact\"\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-compact-variant-files\"\n    />\n  )\n}\nrender(<Component />)\n"})},9487:function(e,n,t){t.r(n),t.d(n,{default:function(){return U}});var i={};t.r(i),t.d(i,{BasicUsage:function(){return c},CompactVariant:function(){return d},CompactVariantHelpButton:function(){return p},Customized:function(){return h},Required:function(){return u},SessionStorage:function(){return v},Width:function(){return k},WithAsyncFileHandler:function(){return F},WithAsyncOnFileClick:function(){return j},WithAsyncOnFileDelete:function(){return x},WithFileItemOptions:function(){return b},WithHelp:function(){return m},WithHelpWithoutLabelDescription:function(){return f},WithPath:function(){return g},WithSyncFileHandler:function(){return y}});var l=t(31085),o=t(71184),a=t(67083),s=t(6366),r=t(3869);const c=()=>(0,l.jsx)(a.A,{children:'<Form.Handler>\n  <Field.Upload\n    label="My custom label"\n    labelDescription="My description"\n    onChange={(files) => console.log(\'onChange\', files)}\n  />\n</Form.Handler>\n'}),d=()=>(0,l.jsx)(a.A,{children:'<Form.Handler>\n  <Field.Upload\n    variant="compact"\n    label="My custom label"\n    labelDescription="My description"\n    onChange={(files) => console.log(\'onChange\', files)}\n  />\n</Form.Handler>\n'}),p=()=>(0,l.jsx)(a.A,{"data-visual-test":"upload-field-compact-help-button",children:'<Form.Handler>\n  <Field.Upload\n    help={{\n      open: true,\n      title: \'Hva betyr lånebeløp?\',\n      content: (\n        <>\n          Dette er hvor mye du har tenkt å låne{\' \'}\n          <Anchor href="#test">totalt</Anchor>.\n        </>\n      ),\n    }}\n    variant="compact"\n    label="My custom label"\n    labelDescription="My description"\n    onChange={(files) => console.log(\'onChange\', files)}\n  />\n</Form.Handler>\n'}),u=()=>(0,l.jsx)(a.A,{children:"<Form.Handler onSubmit={(data) => console.log('onSubmit', data)}>\n  <Flex.Stack>\n    <Field.Upload path=\"/myFiles\" required />\n    <Form.SubmitButton />\n  </Flex.Stack>\n</Form.Handler>\n"}),m=()=>(0,l.jsx)(a.A,{"data-visual-test":"upload-field-help-button",children:"<Field.Upload\n  help={{\n    open: true,\n    title: 'Help title',\n    content: 'Help content',\n  }}\n/>\n"}),f=()=>(0,l.jsx)(a.A,{"data-visual-test":"upload-field-help-button-without-label-description",children:"<Field.Upload\n  labelDescription={false}\n  help={{\n    open: true,\n    title: 'Help title',\n    content: 'Help content',\n  }}\n/>\n"}),h=()=>(0,l.jsx)(a.A,{"data-visual-test":"upload-field-customized",children:'<Field.Upload\n  title="My custom title"\n  text="My text with a help button"\n  width="large"\n  help={{\n    title: \'Help title\',\n    content: \'Help content\',\n    open: true,\n  }}\n  warning="Warning message"\n  acceptedFileTypes={[\'pdf\']}\n  filesAmountLimit={1}\n  fileMaxSize={1}\n/>\n'}),g=()=>(0,l.jsx)(a.A,{scope:{createMockFile:s.pK},children:"<Form.Handler\n  onChange={(data) => console.log('onChange', data)}\n  data={{\n    myFiles: [\n      {\n        file: createMockFile('fileName-1.png', 100, 'image/png'),\n      },\n    ],\n  }}\n>\n  <Field.Upload path=\"/myFiles\" />\n</Form.Handler>\n"}),F=()=>(0,l.jsx)(a.A,{scope:{createRequest:r.createRequest},noInline:!0,children:"const MyForm = () => {\n  return (\n    <Form.Handler onSubmit={async (form) => console.log(form)}>\n      <Flex.Stack>\n        <Field.Upload\n          path=\"/attachments\"\n          labelDescription=\"Upload multiple files at once to see the upload error message. This demo has been set up so that every other file in a batch will fail.\"\n          fileHandler={mockAsyncFileUpload}\n          required\n        />\n        <Form.SubmitButton />\n        <Tools.Log />\n      </Flex.Stack>\n    </Form.Handler>\n  )\n}\nasync function mockAsyncFileUpload(\n  newFiles: UploadValue,\n): Promise<UploadValue> {\n  const updatedFiles: UploadValue = []\n  for (const [, file] of Object.entries(newFiles)) {\n    const formData = new FormData()\n    formData.append('file', file.file, file.file.name)\n    const request = createRequest()\n    await request(Math.floor(Math.random() * 2000) + 1000) // Simulate a request\n\n    try {\n      const mockResponse = {\n        ok: false,\n        // Fails virus check\n        json: async () => ({\n          server_generated_id: file.file.name + '_' + crypto.randomUUID(),\n        }),\n      }\n      if (!mockResponse.ok) {\n        throw new Error('Unable to upload this file')\n      }\n      const data = await mockResponse.json()\n      updatedFiles.push({\n        ...file,\n        id: data.server_generated_id,\n      })\n    } catch (error) {\n      updatedFiles.push({\n        ...file,\n        errorMessage: error.message,\n      })\n    }\n  }\n  return updatedFiles\n}\nrender(<MyForm />)\n"}),y=()=>(0,l.jsx)(a.A,{noInline:!0,children:"const MyForm = () => {\n  return (\n    <Form.Handler onSubmit={async (form) => console.log(form)}>\n      <Flex.Stack>\n        <Field.Upload\n          path=\"/myattachments\"\n          fileHandler={mockSyncFileUpload}\n          required\n        />\n        <Form.SubmitButton />\n        <Tools.Log />\n      </Flex.Stack>\n    </Form.Handler>\n  )\n}\nfunction mockSyncFileUpload(newFiles: UploadValue) {\n  return newFiles.map((file) => {\n    if (file.file.name.length > 5) {\n      file.errorMessage = 'File name is too long'\n    }\n    return file\n  })\n}\nrender(<MyForm />)\n"}),x=()=>(0,l.jsx)(a.A,{scope:{createRequest:r.createRequest},noInline:!0,children:"async function mockAsyncFileRemoval({ fileItem }) {\n  const request = createRequest()\n  console.log(`making API request to remove: ${fileItem.file.name}`)\n  await request(3000) // Simulate a request\n  const mockResponse = {\n    successful_removal: Math.random() < 0.5, // Randomly fails to remove the file\n  }\n\n  if (!mockResponse.successful_removal) {\n    throw new Error('Unable to remove this file')\n  }\n}\nrender(\n  <Field.Upload\n    onFileDelete={mockAsyncFileRemoval}\n    acceptedFileTypes={['jpg', 'png']}\n  />,\n)\n"}),j=()=>(0,l.jsx)(a.A,{scope:{createRequest:r.createRequest,createMockFile:s.pK},noInline:!0,children:"async function mockAsyncFileClick({ fileItem }) {\n  const request = createRequest()\n  console.log(\n    `making API request to fetch the url of the file: ${fileItem.file.name}`,\n  )\n  await request(2000) // Simulate a request\n  window.open(\n    `https://eufemia.dnb.no/images/avatars/${fileItem.file.name}`,\n    '_blank',\n  )\n}\nrender(\n  <Form.Handler\n    data={{\n      myFiles: [\n        {\n          file: createMockFile('1501870.jpg', 100, 'image/png'),\n          id: '1',\n        },\n      ],\n    }}\n  >\n    <Field.Upload path=\"/myFiles\" onFileClick={mockAsyncFileClick} />\n  </Form.Handler>,\n)\n"});function v(){return(0,l.jsx)(a.A,{children:'<Form.Handler sessionStorageId="documents">\n  <Flex.Stack>\n    <Form.Card>\n      <Field.Upload path="/documents" />\n      <Value.Upload\n        path="/documents"\n        label="Uploaded files"\n        placeholder="No files uploaded."\n        variant="ol"\n        showEmpty\n      />\n    </Form.Card>\n\n    <Form.SubmitButton />\n    <Tools.Log />\n  </Flex.Stack>\n</Form.Handler>\n'})}const b=()=>(0,l.jsx)(a.A,{scope:{createMockFile:s.pK},noInline:!0,children:"const MyForm = () => {\n  return (\n    <Form.Handler\n      data={{\n        myFiles: [\n          {\n            file: createMockFile('fileName-1.png', 100, 'image/png'),\n            id: '1',\n            description: 'My description',\n            errorMessage: 'My error message',\n            removeDeleteButton: true,\n          },\n        ],\n      }}\n    >\n      <Field.Upload\n        path=\"/myFiles\"\n        fileHandler={mockFileHandler}\n        required\n      />\n    </Form.Handler>\n  )\n}\nfunction mockFileHandler(newFiles: UploadValue) {\n  return newFiles.map((file) => {\n    file.errorMessage = 'File has a problem'\n    file.description = 'File description'\n    file.removeDeleteButton = true\n    return file\n  })\n}\nrender(<MyForm />)\n"}),k=()=>(0,l.jsx)(a.A,{scope:{createMockFile:s.pK},"data-visual-test":"upload-field-width",children:'<Form.Handler\n  data={{\n    myFiles: [\n      {\n        file: createMockFile(\'fileName-1.png\', 100, \'image/png\'),\n      },\n    ],\n  }}\n>\n  <Form.Card>\n    <Field.String width="stretch" />\n    <Field.Upload path="/myFiles" label="default" />\n    <Field.Upload path="/myFiles" width="large" label="large" />\n    <Field.Upload path="/myFiles" width="stretch" label="stretch" />\n  </Form.Card>\n</Form.Handler>\n'});function M(e){const n=Object.assign({h2:"h2",h3:"h3",code:"code",p:"p",a:"a"},(0,o.R)(),e.components),{VisibleWhenVisualTest:t}=n;return i||A("Examples",!1),c||A("Examples.BasicUsage",!0),d||A("Examples.CompactVariant",!0),p||A("Examples.CompactVariantHelpButton",!0),h||A("Examples.Customized",!0),u||A("Examples.Required",!0),v||A("Examples.SessionStorage",!0),k||A("Examples.Width",!0),F||A("Examples.WithAsyncFileHandler",!0),j||A("Examples.WithAsyncOnFileClick",!0),x||A("Examples.WithAsyncOnFileDelete",!0),b||A("Examples.WithFileItemOptions",!0),m||A("Examples.WithHelp",!0),f||A("Examples.WithHelpWithoutLabelDescription",!0),g||A("Examples.WithPath",!0),y||A("Examples.WithSyncFileHandler",!0),t||A("VisibleWhenVisualTest",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{children:"Demos"}),"\n",(0,l.jsx)(n.h3,{children:"Basic usage"}),"\n",(0,l.jsx)(c,{}),"\n",(0,l.jsxs)(n.h3,{children:["Variant ",(0,l.jsx)(n.code,{children:"compact"})]}),"\n",(0,l.jsx)(d,{}),"\n",(0,l.jsx)(n.h3,{children:"Required"}),"\n",(0,l.jsx)(u,{}),"\n",(0,l.jsx)(n.h3,{children:"Path usage"}),"\n",(0,l.jsx)(g,{}),"\n",(0,l.jsx)(n.h3,{children:"With help"}),"\n",(0,l.jsx)(m,{}),"\n",(0,l.jsx)(n.h3,{children:"Customized"}),"\n",(0,l.jsx)(h,{}),"\n",(0,l.jsx)(n.h3,{children:"Session storage support"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"sessionStorageId"})," property can be used to store the files in the session storage so they persist between page reloads."]}),"\n",(0,l.jsx)(v,{}),"\n",(0,l.jsx)(n.h3,{children:"With asynchronous file handler"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"fileHandler"})," property supports an asynchronous function, and can be used for handling/validating files asynchronously, like to upload files to a virus checker and display errors based on the outcome:"]}),"\n",(0,l.jsx)(F,{}),"\n",(0,l.jsx)(n.h3,{children:"With synchronous file handler"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"fileHandler"})," property supports a synchronous function, and can be used for handling/validating files synchronously, like to check for file names that's too long:"]}),"\n",(0,l.jsx)(y,{}),"\n",(0,l.jsxs)(n.h3,{children:["With asynchronous ",(0,l.jsx)(n.code,{children:"onFileDelete"})]}),"\n",(0,l.jsx)(x,{}),"\n",(0,l.jsxs)(n.h3,{children:["With asynchronous ",(0,l.jsx)(n.code,{children:"onFileClick"})]}),"\n",(0,l.jsx)(j,{}),"\n",(0,l.jsxs)(n.h3,{children:["With ",(0,l.jsx)(n.a,{href:"/uilib/components/upload/properties/#fileitem",children:"FileItem"})," options"]}),"\n",(0,l.jsx)(b,{}),"\n",(0,l.jsxs)(t,{children:[(0,l.jsx)(k,{}),(0,l.jsx)(f,{}),(0,l.jsx)(p,{})]})]})}var U=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,o.R)(),e.components);return n?(0,l.jsx)(n,Object.assign({},e,{children:(0,l.jsx)(M,e)})):M(e)};function A(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);
//# sourceMappingURL=631f57192054c67d9a3beba410fec58a29454165-20652a6af18969223841.js.map