{"version":3,"file":"631f57192054c67d9a3beba410fec58a29454165-6543607aacd74e99ba0b.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/more-fields/Upload/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/more-fields/Upload/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/upload/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/SubmitIndicator/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/GenerateSchema.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/ListAllProps.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/Log.tsx"],"sourcesContent":["import { Flex } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../../shared/tags/ComponentBox'\nimport { Field, Form, Tools } from '@dnb/eufemia/src/extensions/forms'\nimport { createMockFile } from '../../../../../../../docs/uilib/components/upload/Examples'\nimport useUpload from '@dnb/eufemia/src/components/upload/useUpload'\nimport { UploadValue } from '@dnb/eufemia/src/extensions/forms/Field/Upload'\nimport { createRequest } from '../../../Form/SubmitIndicator/Examples'\n\nexport const BasicUsage = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Field.Upload\n          label=\"My custom label\"\n          labelDescription=\"My description\"\n        />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Required = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler onSubmit={(data) => console.log('onSubmit', data)}>\n        <Flex.Stack>\n          <Field.Upload path=\"/myFiles\" required />\n          <Form.SubmitButton />\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithHelp = () => {\n  return (\n    <ComponentBox>\n      <Field.Upload\n        help={{\n          title: 'Help title',\n          content: 'Help content',\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Customized = () => {\n  return (\n    <ComponentBox data-visual-test=\"upload-field-customized\">\n      <Field.Upload\n        title=\"My custom title\"\n        text=\"My text with a help button\"\n        width=\"large\"\n        help={{\n          title: 'Help title',\n          content: 'Help content',\n        }}\n        warning=\"Warning message\"\n        acceptedFileTypes={['pdf']}\n        filesAmountLimit={1}\n        fileMaxSize={1}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithPath = () => {\n  return (\n    <ComponentBox scope={{ createMockFile }}>\n      <Form.Handler\n        onChange={(data) => console.log('onChange', data)}\n        data={{\n          myFiles: [\n            { file: createMockFile('fileName-1.png', 100, 'image/png') },\n          ],\n        }}\n      >\n        <Field.Upload path=\"/myFiles\" />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithAsyncFileHandler = () => {\n  return (\n    <ComponentBox scope={{ createRequest, useUpload, Tools }}>\n      {() => {\n        const MyForm = () => {\n          return (\n            <Form.Handler onSubmit={async (form) => console.log(form)}>\n              <Flex.Stack>\n                <Field.Upload\n                  path=\"/attachments\"\n                  labelDescription=\"Upload multiple files at once to see the upload error message. This demo has been set up so that every other file in a batch will fail.\"\n                  fileHandler={mockAsyncFileUpload}\n                  required\n                />\n                <Form.SubmitButton />\n                <Tools.Log />\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        async function mockAsyncFileUpload(\n          newFiles: UploadValue,\n        ): Promise<UploadValue> {\n          const updatedFiles: UploadValue = []\n\n          for (const [, file] of Object.entries(newFiles)) {\n            const formData = new FormData()\n            formData.append('file', file.file, file.file.name)\n\n            const request = createRequest()\n            await request(Math.floor(Math.random() * 2000) + 1000) // Simulate a request\n\n            try {\n              const mockResponse = {\n                ok: false, // Fails virus check\n                json: async () => ({\n                  server_generated_id:\n                    file.file.name + '_' + crypto.randomUUID(),\n                }),\n              }\n\n              if (!mockResponse.ok) {\n                throw new Error('Unable to upload this file')\n              }\n\n              const data = await mockResponse.json()\n              updatedFiles.push({\n                ...file,\n                id: data.server_generated_id,\n              })\n            } catch (error) {\n              updatedFiles.push({\n                ...file,\n                errorMessage: error.message,\n              })\n            }\n          }\n\n          return updatedFiles\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const WithSyncFileHandler = () => {\n  return (\n    <ComponentBox scope={{ createRequest, useUpload, Tools }}>\n      {() => {\n        const MyForm = () => {\n          return (\n            <Form.Handler onSubmit={async (form) => console.log(form)}>\n              <Flex.Stack>\n                <Field.Upload\n                  path=\"/myattachments\"\n                  fileHandler={mockSyncFileUpload}\n                  required\n                />\n                <Form.SubmitButton />\n                <Tools.Log />\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        function mockSyncFileUpload(newFiles: UploadValue) {\n          return newFiles.map((file) => {\n            if (file.file.name.length > 5) {\n              file.errorMessage = 'File name is too long'\n            }\n            return file\n          })\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.BasicUsage) _missingMdxReference(\"Examples.BasicUsage\", true);\n  if (!Examples.Customized) _missingMdxReference(\"Examples.Customized\", true);\n  if (!Examples.Required) _missingMdxReference(\"Examples.Required\", true);\n  if (!Examples.WithAsyncFileHandler) _missingMdxReference(\"Examples.WithAsyncFileHandler\", true);\n  if (!Examples.WithHelp) _missingMdxReference(\"Examples.WithHelp\", true);\n  if (!Examples.WithPath) _missingMdxReference(\"Examples.WithPath\", true);\n  if (!Examples.WithSyncFileHandler) _missingMdxReference(\"Examples.WithSyncFileHandler\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Basic usage\"\n    }), \"\\n\", _jsx(Examples.BasicUsage, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Required\"\n    }), \"\\n\", _jsx(Examples.Required, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Path usage\"\n    }), \"\\n\", _jsx(Examples.WithPath, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With help\"\n    }), \"\\n\", _jsx(Examples.WithHelp, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Customized\"\n    }), \"\\n\", _jsx(Examples.Customized, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With asynchronous file handler\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"fileHandler\"\n      }), \" property supports an asynchronous function, and can be used for handling/validating files asynchronously, like to upload files to a virus checker and display errors based on the outcome:\"]\n    }), \"\\n\", _jsx(Examples.WithAsyncFileHandler, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With synchronous file handler\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"fileHandler\"\n      }), \" property supports a synchronous function, and can be used for handling/validating files synchronously, like to check for file names that's too long:\"]\n    }), \"\\n\", _jsx(Examples.WithSyncFileHandler, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport {\n  Button,\n  ToggleButton,\n  Img,\n  Section,\n  Upload,\n} from '@dnb/eufemia/src'\n\nexport function createMockFile(name: string, size: number, type: string) {\n  const file = new File([], name, { type })\n  Object.defineProperty(file, 'size', {\n    get() {\n      return size\n    },\n  })\n  return file\n}\n\nconst useMockFiles = (setFiles, extend) => {\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('fileName.png', 123, 'image/png'),\n        ...extend,\n      },\n    ])\n  }, [])\n}\n\nexport const UploadPrefilledFileList = () => (\n  <ComponentBox\n    data-visual-test=\"upload-file-list\"\n    scope={{ useMockFiles }}\n  >\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('file-list')\n\n        if (files.length) {\n          console.log('files', files)\n        }\n\n        useMockFiles(setFiles, { errorMessage: 'This is no real file!' })\n\n        return <Upload acceptedFileTypes={['jpg', 'png']} id=\"file-list\" />\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadBasic = () => (\n  <ComponentBox data-visual-test=\"upload-basic\">\n    <Upload acceptedFileTypes={['jpg', 'png']} id=\"upload-basic\" />\n  </ComponentBox>\n)\n\nexport const UploadSingleFile = () => (\n  <ComponentBox>\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-single-file')\n\n        if (files.length) {\n          console.log('files', files, setFiles)\n        }\n\n        return (\n          <Upload\n            acceptedFileTypes={['jpg', 'png']}\n            id=\"upload-single-file\"\n            filesAmountLimit={1}\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadRemoveFile = () => (\n  <ComponentBox data-visual-test=\"upload-remove-files\">\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-remove-files')\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-remove-files\"\n            />\n\n            <Button\n              top=\"small\"\n              disabled={files.length < 1}\n              onClick={() => setFiles([])}\n            >\n              Remove selected files\n            </Button>\n\n            <Preview files={files} />\n          </>\n        )\n\n        function Preview({ files }) {\n          const [images, setImages] = React.useState([])\n\n          React.useEffect(() => {\n            files.map(({ file }) => {\n              let reader = new FileReader()\n\n              reader.addEventListener(\n                'load',\n                (event) => {\n                  images.push({ blob: event.target, file })\n                  setImages([...images])\n                  reader = null\n                },\n                false,\n              )\n\n              reader.readAsDataURL(file)\n            })\n          }, [files])\n\n          return (\n            <Section aria-label=\"List of chosen images\">\n              {images.map((img, i) => (\n                <Img\n                  top\n                  key={i}\n                  src={img.blob.result}\n                  alt={img.file.name}\n                  height={100}\n                />\n              ))}\n            </Section>\n          )\n        }\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadIsLoading = () => (\n  <ComponentBox\n    scope={{ useMockFiles }}\n    data-visual-test=\"upload-is-loading\"\n  >\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-is-loading')\n\n        useMockFiles(setFiles, { isLoading: true })\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-is-loading\"\n            />\n            <ToggleButton\n              top=\"small\"\n              disabled={files.length < 1}\n              on_change={({ checked }) =>\n                setFiles(\n                  files.map((fileItem) => {\n                    return { ...fileItem, isLoading: checked }\n                  }),\n                )\n              }\n            >\n              Files is loading toggle\n            </ToggleButton>\n          </>\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadErrorMessage = () => (\n  <ComponentBox data-visual-test=\"upload-error-message\">\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload(\n          'upload-error-message',\n        )\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-error-message\"\n            />\n            <ToggleButton\n              top=\"small\"\n              disabled={files.length < 1}\n              on_change={({ checked }) => {\n                setFiles(\n                  files.map((fileItem) => {\n                    return {\n                      ...fileItem,\n                      errorMessage: checked\n                        ? 'custom error message'\n                        : null,\n                    }\n                  }),\n                )\n              }}\n            >\n              Toggle error message\n            </ToggleButton>\n          </>\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadAcceptedFormats = () => (\n  <ComponentBox>\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload(\n          'upload-accepted-formats',\n        )\n\n        if (files.length) {\n          console.log('files', files, setFiles)\n        }\n\n        return (\n          <Upload\n            acceptedFileTypes={['png', 'jpg', 'pdf']}\n            id=\"upload-accepted-formats\"\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadFileMaxSizeBasedOnFileType = () => (\n  <ComponentBox\n    data-visual-test=\"upload-file-max-size-based-on-file-format\"\n    hideCode\n  >\n    <Upload\n      id=\"upload-file-max-size-based-on-file-format\"\n      fileMaxSize={99}\n      acceptedFileTypes={[\n        { fileType: 'jpg', fileMaxSize: 1 },\n        { fileType: 'doc', fileMaxSize: 1 },\n        { fileType: 'svg', fileMaxSize: 1 },\n        { fileType: 'gif', fileMaxSize: 1 },\n        { fileType: 'doc', fileMaxSize: 4 },\n        { fileType: 'docx', fileMaxSize: 4 },\n        { fileType: 'tiff', fileMaxSize: 5 },\n        { fileType: 'tif', fileMaxSize: 5 },\n        { fileType: 'html', fileMaxSize: 6 },\n        { fileType: 'htm', fileMaxSize: 6 },\n        { fileType: 'xls', fileMaxSize: 7 },\n        { fileType: 'xlsx', fileMaxSize: 7 },\n        { fileType: 'odt' },\n        { fileType: 'pdf' },\n        { fileType: 'text', fileMaxSize: false },\n        { fileType: 'txt', fileMaxSize: 0 },\n        { fileType: 'zip', fileMaxSize: 99 },\n      ]}\n    />\n  </ComponentBox>\n)\n\nexport const UploadFileMaxSizeBasedOnFileTypeDisabled = () => (\n  <ComponentBox>\n    <Upload\n      id=\"upload-file-max-size-based-on-file-format-disabled\"\n      acceptedFileTypes={[\n        { fileType: 'jpg', fileMaxSize: 0 },\n        { fileType: 'doc', fileMaxSize: false },\n        { fileType: 'svg' },\n      ]}\n    />\n  </ComponentBox>\n)\n\nexport const UploadDisabledFileMaxSize = () => (\n  <ComponentBox data-visual-test=\"upload-disabled-file-max-size\">\n    <Upload\n      acceptedFileTypes={['jpg', 'pdf']}\n      id=\"upload-disabled-file-max-size\"\n      fileMaxSize={false}\n    />\n  </ComponentBox>\n)\n\nexport const UploadNoTitleNoText = () => (\n  <ComponentBox data-visual-test=\"upload-no-title-no-text\">\n    <Upload\n      title={false}\n      text={false}\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-no-title-no-text\"\n    />\n  </ComponentBox>\n)\n","import { Button, Flex, FormLabel } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, FieldBlock, Form } from '@dnb/eufemia/src/extensions/forms'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      <Form.SubmitIndicator state=\"pending\" />\n    </ComponentBox>\n  )\n}\n\nexport const AsyncSubmitBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay}>\n            <Form.Card>\n              <Field.String path=\"/myField\" label=\"Short label\" />\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Form.Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AsyncChangeBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay} onChange={delay}>\n            <Form.Card>\n              <Field.String\n                path=\"/myField1\"\n                label=\"Label (with async validation)\"\n                placeholder=\"Write something ...\"\n                onChangeValidator={delay}\n              />\n              <FieldBlock width=\"medium\">\n                <Field.String\n                  path=\"/myField2\"\n                  width=\"stretch\"\n                  label=\"This is a long label\"\n                />\n              </FieldBlock>\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Form.Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\ntype CreateRequestReturn = Promise<{ hasError: boolean; cancel?: boolean }>\n\nexport const createRequest = () => {\n  let timeout: NodeJS.Timeout | null\n  let resolvePromise: ((value?: unknown) => void) | undefined\n\n  const fn = (t: number): CreateRequestReturn => {\n    return new Promise((resolve) => {\n      resolvePromise = resolve\n      timeout = setTimeout(() => {\n        resolve({ hasError: false })\n      }, t)\n    })\n  }\n\n  fn.cancel = () => {\n    resolvePromise?.({ hasError: true })\n    clearTimeout(timeout)\n    timeout = null\n  }\n\n  return fn\n}\n\nexport const WithinOtherComponents = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Flex.Horizontal align=\"center\">\n          <Form.SubmitButton showIndicator />\n          <Button variant=\"secondary\" icon=\"chevron_right\">\n            Secondary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <Button variant=\"tertiary\">\n            Tertiary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <FormLabel>\n            Label\n            <Form.SubmitIndicator state=\"pending\" />\n          </FormLabel>\n        </Flex.Horizontal>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","import { useCallback, useContext, useRef } from 'react'\nimport pointer, { JsonObject } from '../utils/json-pointer'\nimport DataContext, { FilterData } from '../DataContext/Context'\nimport { JSONSchema } from '../types'\n\nexport type GenerateSchemaReturn = {\n  schema: JSONSchema\n  data: JsonObject\n  propsOfFields: JsonObject\n  propsOfValues: JsonObject\n}\nexport type GenerateSchemaProps = {\n  log?: boolean\n  generateRef?: React.MutableRefObject<() => GenerateSchemaReturn>\n  filterData?: FilterData\n  children: React.ReactNode\n}\nexport type GenerateRef = GenerateSchemaProps['generateRef']['current']\n\nexport const schemaParams = [\n  'minLength',\n  'maxLength',\n  'pattern',\n  'description',\n  'min',\n  'max',\n  'multipleOf',\n  'exclusiveMinimum',\n  'exclusiveMaximum',\n]\n\nexport default function GenerateSchema(props: GenerateSchemaProps) {\n  const { generateRef, filterData, log, children } = props || {}\n  const { fieldPropsRef, valuePropsRef, data, hasContext } =\n    useContext(DataContext)\n\n  const dataRef = useRef<JsonObject>({})\n  dataRef.current = data\n\n  const generate = useCallback(() => {\n    const schema = Object.entries(fieldPropsRef?.current || {}).reduce(\n      (acc, [path, props]) => {\n        if (path.startsWith('/')) {\n          const objectKey = path.substring(1)\n\n          const pathList = objectKey.split('/')\n          const slashCount = pathList.length\n\n          const type = props.valueType || 'string'\n          const propertyValue = {\n            type,\n          }\n\n          for (const prop of schemaParams) {\n            if (props[prop]) {\n              propertyValue[prop] = props[prop]\n            }\n          }\n\n          if (slashCount > 1) {\n            const nestedPath = ['']\n            for (const path of pathList) {\n              nestedPath.push(path)\n              const pathToSet = nestedPath.join('/properties/')\n              const isLast = nestedPath.length - 1 === pathList.length\n\n              const existingValue = pointer.has(acc, pathToSet)\n                ? pointer.get(acc, pathToSet)\n                : null\n\n              const pathValue = isLast ? propertyValue : existingValue\n\n              if (isLast) {\n                if (filterData?.[pathToSet] !== false) {\n                  pointer.set(acc, pathToSet, pathValue)\n                }\n              } else {\n                const pathValue = {\n                  type: 'object',\n                  ...existingValue,\n                }\n\n                // - Add required\n                const required = []\n                if (props.required) {\n                  required.push(pathList.at(-1))\n                }\n                if (existingValue?.required) {\n                  required.push(...existingValue.required)\n                }\n                if (required.length > 0) {\n                  pathValue.required = required\n                }\n\n                if (filterData?.[pathToSet] !== false) {\n                  pointer.set(acc, pathToSet, pathValue)\n                }\n              }\n            }\n          } else {\n            if (filterData?.[path] !== false) {\n              pointer.set(acc.properties, path, propertyValue)\n            }\n            if (props.required) {\n              acc.required.push(objectKey)\n            }\n          }\n        }\n\n        return acc\n      },\n      { type: 'object', properties: {}, required: [] }\n    )\n\n    const propsOfFields = Object.entries(\n      fieldPropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function'\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        pointer.set(acc, path, propertyValue)\n      }\n\n      return acc\n    }, {})\n\n    const propsOfValues = Object.entries(\n      valuePropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function'\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        pointer.set(acc, path, propertyValue)\n      }\n\n      return acc\n    }, {})\n\n    if (schema.required.length === 0) {\n      delete schema.required\n    }\n\n    return {\n      schema,\n      data: dataRef.current,\n      propsOfFields,\n      propsOfValues,\n    } as GenerateSchemaReturn\n  }, [fieldPropsRef, filterData, valuePropsRef])\n\n  if (hasContext) {\n    if (log) {\n      console.log(generate().schema)\n    }\n\n    if (generateRef) {\n      generateRef.current = generate\n    }\n  }\n\n  return children\n}\n","import { isValidElement, useCallback, useContext, useRef } from 'react'\nimport pointer, { JsonObject } from '../utils/json-pointer'\nimport DataContext, { FilterData } from '../DataContext/Context'\n\nexport type ListAllPropsReturn<Data> = {\n  propsOfFields: Data\n  propsOfValues: Data\n}\nexport type ListAllPropsProps<Data> = {\n  log?: boolean\n  generateRef?: React.MutableRefObject<() => ListAllPropsReturn<Data>>\n  filterData?: FilterData\n  children: React.ReactNode\n}\nexport type GenerateRef<Data extends JsonObject = JsonObject> =\n  ListAllPropsProps<Data>['generateRef']['current']\n\nexport default function ListAllProps<Data extends JsonObject = JsonObject>(\n  props: ListAllPropsProps<Data>\n) {\n  const { log, generateRef, filterData, children } = props || {}\n  const { fieldPropsRef, valuePropsRef, data, hasContext } =\n    useContext(DataContext)\n\n  const dataRef = useRef<JsonObject>({})\n  dataRef.current = data\n\n  const generate = useCallback(() => {\n    const propsOfFields = Object.entries(\n      fieldPropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function' &&\n            !isValidElement(props[prop])\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        if (filterData?.[path] !== false) {\n          pointer.set(acc, path, propertyValue)\n        }\n      }\n\n      return acc\n    }, {})\n\n    const propsOfValues = Object.entries(\n      valuePropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function' &&\n            !isValidElement(props[prop])\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        if (filterData?.[path] !== false) {\n          pointer.set(acc, path, propertyValue)\n        }\n      }\n\n      return acc\n    }, {})\n\n    return { propsOfFields, propsOfValues } as ListAllPropsReturn<Data>\n  }, [fieldPropsRef, filterData, valuePropsRef])\n\n  if (hasContext) {\n    if (log) {\n      console.log(generate())\n    }\n\n    if (generateRef) {\n      generateRef.current = generate\n    }\n  }\n\n  return children\n}\n","import React, { useContext } from 'react'\nimport DataContext from '../DataContext/Context'\nimport Section, { SectionAllProps } from '../../../components/Section'\nimport { FormLabel } from '../../../components'\n\nfunction Log({\n  placeholder,\n  label,\n  data: logData,\n  ...props\n}: Omit<SectionAllProps, 'data' | 'label'> & {\n  data?: unknown\n  label?: React.ReactNode\n  placeholder?: React.ReactNode\n}) {\n  const { data } = useContext(DataContext)\n\n  return (\n    <Section\n      element=\"output\"\n      backgroundColor=\"sand-yellow\"\n      style={{ maxWidth: '80vw' }}\n      innerSpace\n      {...props}\n    >\n      {label && (\n        <FormLabel bottom>\n          <b>{label}</b>\n        </FormLabel>\n      )}\n      <pre>\n        {placeholder && Object.keys((logData ?? data) || {}).length === 0\n          ? placeholder\n          : JSON.stringify(\n              replaceUndefinedValues(logData ?? data),\n              null,\n              2\n            )}\n        {' ' /* Ensure one line of spacing */}\n      </pre>\n    </Section>\n  )\n}\n\n/**\n * Replaces undefined values in an object with a specified replacement value.\n * @param value - The value to check for undefined values.\n * @param replaceWith - The value to replace undefined values with. Default is null.\n * @returns The object with undefined values replaced.\n */\nfunction replaceUndefinedValues(\n  value: unknown,\n  replaceWith = 'undefined' as unknown\n): unknown {\n  if (typeof value === 'undefined') {\n    return replaceWith\n  } else if (value && typeof value === 'object' && value !== replaceWith) {\n    return {\n      ...value,\n      ...Object.fromEntries(\n        Object.entries(value).map(([k, v]) => [\n          k,\n          replaceUndefinedValues(v),\n        ])\n      ),\n    }\n  } else {\n    return value\n  }\n}\n\nLog._supportsSpacingProps = true\nexport default Log\n"],"names":["BasicUsage","_jsx","ComponentBox","children","Required","WithHelp","Customized","WithPath","scope","createMockFile","WithAsyncFileHandler","createRequest","useUpload","Tools","noInline","WithSyncFileHandler","_createMdxContent","props","_components","Object","assign","h2","h3","p","code","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error","name","size","type","file","File","defineProperty","get","useMockFiles","setFiles","extend","React","UploadPrefilledFileList","UploadBasic","UploadSingleFile","UploadRemoveFile","UploadIsLoading","UploadErrorMessage","UploadAcceptedFormats","UploadFileMaxSizeBasedOnFileType","hideCode","UploadFileMaxSizeBasedOnFileTypeDisabled","UploadDisabledFileMaxSize","UploadNoTitleNoText","Default","AsyncSubmitBehavior","debounceAsync","AsyncChangeBehavior","timeout","resolvePromise","fn","t","Promise","resolve","setTimeout","hasError","cancel","_resolvePromise","clearTimeout","WithinOtherComponents","schemaParams","GenerateSchema","generateRef","filterData","log","fieldPropsRef","valuePropsRef","data","hasContext","useContext","DataContext","dataRef","useRef","current","generate","useCallback","schema","entries","reduce","acc","_ref","path","startsWith","objectKey","substring","pathList","split","slashCount","length","propertyValue","valueType","prop","nestedPath","push","pathToSet","join","isLast","existingValue","pointer","pathValue","required","at","apply","_toConsumableArray","properties","propsOfFields","_ref2","undefined","propsOfValues","_ref3","console","ListAllProps","isValidElement","Log","placeholder","label","logData","Section","element","backgroundColor","style","maxWidth","innerSpace","FormLabel","bottom","keys","JSON","stringify","replaceUndefinedValues","value","replaceWith","fromEntries","map","k","v","_supportsSpacingProps"],"sourceRoot":""}