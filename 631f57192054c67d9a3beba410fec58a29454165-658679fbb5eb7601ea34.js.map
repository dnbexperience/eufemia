{"version":3,"file":"631f57192054c67d9a3beba410fec58a29454165-658679fbb5eb7601ea34.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/more-fields/Upload/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/more-fields/Upload/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/upload/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/SubmitIndicator/Examples.tsx"],"sourcesContent":["import { Flex } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../../shared/tags/ComponentBox'\nimport {\n  Field,\n  Form,\n  Tools,\n  Value,\n} from '@dnb/eufemia/src/extensions/forms'\nimport { createMockFile } from '../../../../../../../docs/uilib/components/upload/Examples'\nimport useUpload from '@dnb/eufemia/src/components/upload/useUpload'\nimport { UploadValue } from '@dnb/eufemia/src/extensions/forms/Field/Upload'\nimport { createRequest } from '../../../Form/SubmitIndicator/Examples'\n\nexport const BasicUsage = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Field.Upload\n          label=\"My custom label\"\n          labelDescription=\"My description\"\n        />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Required = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler onSubmit={(data) => console.log('onSubmit', data)}>\n        <Flex.Stack>\n          <Field.Upload path=\"/myFiles\" required />\n          <Form.SubmitButton />\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithHelp = () => {\n  return (\n    <ComponentBox>\n      <Field.Upload\n        help={{\n          title: 'Help title',\n          content: 'Help content',\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Customized = () => {\n  return (\n    <ComponentBox data-visual-test=\"upload-field-customized\">\n      <Field.Upload\n        title=\"My custom title\"\n        text=\"My text with a help button\"\n        width=\"large\"\n        help={{\n          title: 'Help title',\n          content: 'Help content',\n        }}\n        warning=\"Warning message\"\n        acceptedFileTypes={['pdf']}\n        filesAmountLimit={1}\n        fileMaxSize={1}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithPath = () => {\n  return (\n    <ComponentBox scope={{ createMockFile }}>\n      <Form.Handler\n        onChange={(data) => console.log('onChange', data)}\n        data={{\n          myFiles: [\n            { file: createMockFile('fileName-1.png', 100, 'image/png') },\n          ],\n        }}\n      >\n        <Field.Upload path=\"/myFiles\" />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithAsyncFileHandler = () => {\n  return (\n    <ComponentBox scope={{ createRequest, useUpload }}>\n      {() => {\n        const MyForm = () => {\n          return (\n            <Form.Handler onSubmit={async (form) => console.log(form)}>\n              <Flex.Stack>\n                <Field.Upload\n                  path=\"/attachments\"\n                  labelDescription=\"Upload multiple files at once to see the upload error message. This demo has been set up so that every other file in a batch will fail.\"\n                  fileHandler={mockAsyncFileUpload}\n                  required\n                />\n                <Form.SubmitButton />\n                <Tools.Log />\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        async function mockAsyncFileUpload(\n          newFiles: UploadValue,\n        ): Promise<UploadValue> {\n          const updatedFiles: UploadValue = []\n\n          for (const [, file] of Object.entries(newFiles)) {\n            const formData = new FormData()\n            formData.append('file', file.file, file.file.name)\n\n            const request = createRequest()\n            await request(Math.floor(Math.random() * 2000) + 1000) // Simulate a request\n\n            try {\n              const mockResponse = {\n                ok: false, // Fails virus check\n                json: async () => ({\n                  server_generated_id:\n                    file.file.name + '_' + crypto.randomUUID(),\n                }),\n              }\n\n              if (!mockResponse.ok) {\n                throw new Error('Unable to upload this file')\n              }\n\n              const data = await mockResponse.json()\n              updatedFiles.push({\n                ...file,\n                id: data.server_generated_id,\n              })\n            } catch (error) {\n              updatedFiles.push({\n                ...file,\n                errorMessage: error.message,\n              })\n            }\n          }\n\n          return updatedFiles\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const WithSyncFileHandler = () => {\n  return (\n    <ComponentBox scope={{ createRequest, useUpload }}>\n      {() => {\n        const MyForm = () => {\n          return (\n            <Form.Handler onSubmit={async (form) => console.log(form)}>\n              <Flex.Stack>\n                <Field.Upload\n                  path=\"/myattachments\"\n                  fileHandler={mockSyncFileUpload}\n                  required\n                />\n                <Form.SubmitButton />\n                <Tools.Log />\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        function mockSyncFileUpload(newFiles: UploadValue) {\n          return newFiles.map((file) => {\n            if (file.file.name.length > 5) {\n              file.errorMessage = 'File name is too long'\n            }\n            return file\n          })\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const WithAsyncOnFileDelete = () => {\n  return (\n    <ComponentBox scope={{ createRequest }}>\n      {() => {\n        async function mockAsyncFileRemoval({ fileItem }) {\n          const request = createRequest()\n          console.log(\n            'making API request to remove: ' + fileItem.file.name,\n          )\n          await request(3000) // Simulate a request\n          const mockResponse = {\n            successful_removal: Math.random() < 0.5, // Randomly fails to remove the file\n          }\n          if (!mockResponse.successful_removal) {\n            throw new Error('Unable to remove this file')\n          }\n        }\n\n        return (\n          <Field.Upload\n            onFileDelete={mockAsyncFileRemoval}\n            acceptedFileTypes={['jpg', 'png']}\n          />\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const WithAsyncOnFileClick = () => {\n  return (\n    <ComponentBox scope={{ createRequest, createMockFile }}>\n      {() => {\n        async function mockAsyncFileClick({ fileItem }) {\n          const request = createRequest()\n          console.log(\n            'making API request to fetch the url of the file: ' +\n              fileItem.file.name,\n          )\n          await request(2000) // Simulate a request\n          window.open(\n            'https://eufemia.dnb.no/images/avatars/' + fileItem.file.name,\n            '_blank',\n          )\n        }\n\n        return (\n          <Form.Handler\n            data={{\n              myFiles: [\n                {\n                  file: createMockFile('1501870.jpg', 100, 'image/png'),\n                  id: '1',\n                },\n              ],\n            }}\n          >\n            <Field.Upload\n              path=\"/myFiles\"\n              onFileClick={mockAsyncFileClick}\n            />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport function SessionStorage() {\n  return (\n    <ComponentBox>\n      <Form.Handler sessionStorageId=\"documents\">\n        <Flex.Stack>\n          <Form.Card>\n            <Field.Upload path=\"/documents\" />\n            <Value.Upload\n              path=\"/documents\"\n              label=\"Uploaded files\"\n              placeholder=\"No files uploaded.\"\n              variant=\"ol\"\n              showEmpty\n            />\n          </Form.Card>\n\n          <Form.SubmitButton />\n          <Tools.Log />\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.BasicUsage) _missingMdxReference(\"Examples.BasicUsage\", true);\n  if (!Examples.Customized) _missingMdxReference(\"Examples.Customized\", true);\n  if (!Examples.Required) _missingMdxReference(\"Examples.Required\", true);\n  if (!Examples.SessionStorage) _missingMdxReference(\"Examples.SessionStorage\", true);\n  if (!Examples.WithAsyncFileHandler) _missingMdxReference(\"Examples.WithAsyncFileHandler\", true);\n  if (!Examples.WithAsyncOnFileClick) _missingMdxReference(\"Examples.WithAsyncOnFileClick\", true);\n  if (!Examples.WithAsyncOnFileDelete) _missingMdxReference(\"Examples.WithAsyncOnFileDelete\", true);\n  if (!Examples.WithHelp) _missingMdxReference(\"Examples.WithHelp\", true);\n  if (!Examples.WithPath) _missingMdxReference(\"Examples.WithPath\", true);\n  if (!Examples.WithSyncFileHandler) _missingMdxReference(\"Examples.WithSyncFileHandler\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Basic usage\"\n    }), \"\\n\", _jsx(Examples.BasicUsage, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Required\"\n    }), \"\\n\", _jsx(Examples.Required, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Path usage\"\n    }), \"\\n\", _jsx(Examples.WithPath, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With help\"\n    }), \"\\n\", _jsx(Examples.WithHelp, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Customized\"\n    }), \"\\n\", _jsx(Examples.Customized, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Session storage support\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"sessionStorageId\"\n      }), \" property can be used to store the files in the session storage so they persist between page reloads.\"]\n    }), \"\\n\", _jsx(Examples.SessionStorage, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With asynchronous file handler\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"fileHandler\"\n      }), \" property supports an asynchronous function, and can be used for handling/validating files asynchronously, like to upload files to a virus checker and display errors based on the outcome:\"]\n    }), \"\\n\", _jsx(Examples.WithAsyncFileHandler, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With synchronous file handler\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"fileHandler\"\n      }), \" property supports a synchronous function, and can be used for handling/validating files synchronously, like to check for file names that's too long:\"]\n    }), \"\\n\", _jsx(Examples.WithSyncFileHandler, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"With asynchronous \", _jsx(_components.code, {\n        children: \"onFileDelete\"\n      })]\n    }), \"\\n\", _jsx(Examples.WithAsyncOnFileDelete, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"With asynchronous \", _jsx(_components.code, {\n        children: \"onFileClick\"\n      })]\n    }), \"\\n\", _jsx(Examples.WithAsyncOnFileClick, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport {\n  Button,\n  ToggleButton,\n  Img,\n  Section,\n  Upload,\n} from '@dnb/eufemia/src'\nimport { createRequest } from '../../extensions/forms/Form/SubmitIndicator/Examples'\n\nexport function createMockFile(name: string, size: number, type: string) {\n  const file = new File([], name, { type })\n  Object.defineProperty(file, 'size', {\n    get() {\n      return size\n    },\n  })\n  return file\n}\n\nexport const UploadPrefilledFileList = () => (\n  <ComponentBox\n    data-visual-test=\"upload-file-list\"\n    scope={{ createMockFile }}\n  >\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('file-list')\n\n        if (files.length) {\n          console.log('files', files)\n        }\n\n        React.useEffect(() => {\n          setFiles([\n            {\n              file: createMockFile('fileName.png', 123, 'image/png'),\n              errorMessage: 'This is no real file!',\n            },\n          ])\n        }, [setFiles])\n\n        return <Upload acceptedFileTypes={['jpg', 'png']} id=\"file-list\" />\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadBasic = () => (\n  <ComponentBox data-visual-test=\"upload-basic\">\n    <Upload acceptedFileTypes={['jpg', 'png']} />\n  </ComponentBox>\n)\n\nexport const UploadSingleFile = () => (\n  <ComponentBox>\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-single-file')\n\n        if (files.length) {\n          console.log('files', files, setFiles)\n        }\n\n        return (\n          <Upload\n            acceptedFileTypes={['jpg', 'png']}\n            id=\"upload-single-file\"\n            filesAmountLimit={1}\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadRemoveFile = () => (\n  <ComponentBox data-visual-test=\"upload-remove-files\">\n    {() => {\n      const Component = () => {\n        const myUploadId = 'unique-id' // or a function, object or React Context reference.\n        const { files, setFiles } = Upload.useUpload(myUploadId) // id is needed when wanting to connect with the useUpload hook.\n\n        return (\n          <>\n            <Upload acceptedFileTypes={['jpg', 'png']} id={myUploadId} />\n\n            <Button\n              top=\"small\"\n              disabled={files.length < 1}\n              onClick={() => setFiles([])}\n            >\n              Remove selected files\n            </Button>\n\n            <Preview files={files} />\n          </>\n        )\n\n        function Preview({ files }) {\n          const [images, setImages] = React.useState([])\n\n          React.useEffect(() => {\n            files.map(({ file }) => {\n              let reader = new FileReader()\n\n              reader.addEventListener(\n                'load',\n                (event) => {\n                  images.push({ blob: event.target, file })\n                  setImages([...images])\n                  reader = null\n                },\n                false,\n              )\n\n              reader.readAsDataURL(file)\n            })\n          }, [files, images])\n\n          return (\n            <Section aria-label=\"List of chosen images\">\n              {images.map((img, i) => (\n                <Img\n                  top\n                  key={i}\n                  src={img.blob.result}\n                  alt={img.file.name}\n                  height={100}\n                />\n              ))}\n            </Section>\n          )\n        }\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadIsLoading = () => (\n  <ComponentBox\n    data-visual-test=\"upload-is-loading\"\n    scope={{ createMockFile }}\n  >\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-is-loading')\n\n        React.useEffect(() => {\n          setFiles([\n            {\n              file: createMockFile('fileName.png', 123, 'image/png'),\n              isLoading: true,\n            },\n          ])\n        }, [])\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-is-loading\"\n            />\n            <ToggleButton\n              top=\"small\"\n              disabled={files.length < 1}\n              on_change={({ checked }) =>\n                setFiles(\n                  files.map((fileItem) => {\n                    return { ...fileItem, isLoading: checked }\n                  }),\n                )\n              }\n            >\n              Files is loading toggle\n            </ToggleButton>\n          </>\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadErrorMessage = () => (\n  <ComponentBox data-visual-test=\"upload-error-message\">\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload(\n          'upload-error-message',\n        )\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-error-message\"\n            />\n            <ToggleButton\n              top=\"small\"\n              disabled={files.length < 1}\n              on_change={({ checked }) => {\n                setFiles(\n                  files.map((fileItem) => {\n                    return {\n                      ...fileItem,\n                      errorMessage: checked\n                        ? 'custom error message'\n                        : null,\n                    }\n                  }),\n                )\n              }}\n            >\n              Toggle error message\n            </ToggleButton>\n          </>\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadAcceptedFormats = () => (\n  <ComponentBox>\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload(\n          'upload-accepted-formats',\n        )\n\n        if (files.length) {\n          console.log('files', files, setFiles)\n        }\n\n        return (\n          <Upload\n            acceptedFileTypes={['png', 'jpg', 'pdf']}\n            id=\"upload-accepted-formats\"\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadFileMaxSizeBasedOnFileType = () => (\n  <ComponentBox\n    data-visual-test=\"upload-file-max-size-based-on-file-format\"\n    hideCode\n  >\n    <Upload\n      fileMaxSize={99}\n      acceptedFileTypes={[\n        { fileType: 'jpg', fileMaxSize: 1 },\n        { fileType: 'doc', fileMaxSize: 1 },\n        { fileType: 'svg', fileMaxSize: 1 },\n        { fileType: 'gif', fileMaxSize: 1 },\n        { fileType: 'doc', fileMaxSize: 4 },\n        { fileType: 'docx', fileMaxSize: 4 },\n        { fileType: 'tiff', fileMaxSize: 5 },\n        { fileType: 'tif', fileMaxSize: 5 },\n        { fileType: 'html', fileMaxSize: 6 },\n        { fileType: 'htm', fileMaxSize: 6 },\n        { fileType: 'xls', fileMaxSize: 7 },\n        { fileType: 'xlsx', fileMaxSize: 7 },\n        { fileType: 'odt' },\n        { fileType: 'pdf' },\n        { fileType: 'text', fileMaxSize: false },\n        { fileType: 'txt', fileMaxSize: 0 },\n        { fileType: 'zip', fileMaxSize: 99 },\n      ]}\n    />\n  </ComponentBox>\n)\n\nexport const UploadFileMaxSizeBasedOnFileTypeDisabled = () => (\n  <ComponentBox>\n    <Upload\n      acceptedFileTypes={[\n        { fileType: 'jpg', fileMaxSize: 0 },\n        { fileType: 'doc', fileMaxSize: false },\n        { fileType: 'svg' },\n      ]}\n    />\n  </ComponentBox>\n)\n\nexport const UploadDisabledFileMaxSize = () => (\n  <ComponentBox data-visual-test=\"upload-disabled-file-max-size\">\n    <Upload acceptedFileTypes={['jpg', 'pdf']} fileMaxSize={false} />\n  </ComponentBox>\n)\n\nexport const UploadNoTitleNoText = () => (\n  <ComponentBox data-visual-test=\"upload-no-title-no-text\">\n    <Upload\n      title={false}\n      text={false}\n      acceptedFileTypes={['jpg', 'png']}\n    />\n  </ComponentBox>\n)\n\nexport const UploadOnFileDeleteAsync = () => (\n  <ComponentBox scope={{ createRequest }}>\n    {() => {\n      async function mockAsyncFileRemoval({ fileItem }) {\n        const request = createRequest()\n        console.log('making API request to remove: ' + fileItem.file.name)\n        await request(3000) // Simulate a request\n        const mockResponse = {\n          successful_removal: Math.random() < 0.5, // Randomly fails to remove the file\n        }\n        if (!mockResponse.successful_removal) {\n          throw new Error('Unable to remove this file')\n        }\n      }\n\n      return (\n        <Upload\n          onFileDelete={mockAsyncFileRemoval}\n          acceptedFileTypes={['jpg', 'png']}\n        />\n      )\n    }}\n  </ComponentBox>\n)\n\nexport const UploadOnFileClick = () => (\n  <ComponentBox\n    scope={{ createMockFile, createRequest }}\n    data-visual-test=\"upload-on-file-click\"\n  >\n    {() => {\n      const Component = () => {\n        const { setFiles } = Upload.useUpload('upload-on-file-click')\n\n        React.useEffect(() => {\n          setFiles([\n            {\n              file: createMockFile('1501870.jpg', 123, 'image/png'),\n              id: '1',\n            },\n            {\n              file: createMockFile(\n                'file-name-that-is-very-long-and-has-letters.png',\n                123,\n                'image/png',\n              ),\n              id: '2',\n            },\n          ])\n        }, [setFiles])\n\n        async function mockAsyncFileFetching({ fileItem }) {\n          const request = createRequest()\n          console.log(\n            'making API request to fetch the url of the file: ' +\n              fileItem.file.name,\n          )\n          await request(2000) // Simulate a request\n          window.open(\n            'https://eufemia.dnb.no/images/avatars/' + fileItem.file.name,\n            '_blank',\n          )\n        }\n\n        return (\n          <Upload\n            acceptedFileTypes={['jpg', 'png']}\n            id=\"upload-on-file-click\"\n            onFileClick={mockAsyncFileFetching}\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n","import { Button, Flex, FormLabel } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, FieldBlock, Form } from '@dnb/eufemia/src/extensions/forms'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      <Form.SubmitIndicator state=\"pending\" />\n    </ComponentBox>\n  )\n}\n\nexport const AsyncSubmitBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay}>\n            <Form.Card>\n              <Field.String path=\"/myField\" label=\"Short label\" />\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Form.Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AsyncChangeBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay} onChange={delay}>\n            <Form.Card>\n              <Field.String\n                path=\"/myField1\"\n                label=\"Label (with async validation)\"\n                placeholder=\"Write something ...\"\n                onChangeValidator={delay}\n              />\n              <FieldBlock width=\"medium\">\n                <Field.String\n                  path=\"/myField2\"\n                  width=\"stretch\"\n                  label=\"This is a long label\"\n                />\n              </FieldBlock>\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Form.Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\ntype CreateRequestReturn = Promise<{ hasError: boolean; cancel?: boolean }>\n\nexport const createRequest = () => {\n  let timeout: NodeJS.Timeout | null\n  let resolvePromise: ((value?: unknown) => void) | undefined\n\n  const fn = (t: number): CreateRequestReturn => {\n    return new Promise((resolve) => {\n      resolvePromise = resolve\n      timeout = setTimeout(() => {\n        resolve({ hasError: false })\n      }, t)\n    })\n  }\n\n  fn.cancel = () => {\n    resolvePromise?.({ hasError: true })\n    clearTimeout(timeout)\n    timeout = null\n  }\n\n  return fn\n}\n\nexport const WithinOtherComponents = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Flex.Horizontal align=\"center\">\n          <Form.SubmitButton showIndicator />\n          <Button variant=\"secondary\" icon=\"chevron_right\">\n            Secondary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <Button variant=\"tertiary\">\n            Tertiary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <FormLabel>\n            Label\n            <Form.SubmitIndicator state=\"pending\" />\n          </FormLabel>\n        </Flex.Horizontal>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithinALabel = () => {\n  return (\n    <ComponentBox data-visual-test=\"submit-indicator-with-label\">\n      <Form.Handler>\n        <Form.SubmitIndicator state=\"pending\" showLabel />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n"],"names":["BasicUsage","_jsx","ComponentBox","children","Required","WithHelp","Customized","WithPath","scope","createMockFile","WithAsyncFileHandler","createRequest","useUpload","noInline","WithSyncFileHandler","WithAsyncOnFileDelete","WithAsyncOnFileClick","SessionStorage","_createMdxContent","props","_components","Object","assign","h2","h3","p","code","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error","name","size","type","file","File","defineProperty","get","UploadPrefilledFileList","UploadBasic","UploadSingleFile","UploadRemoveFile","UploadIsLoading","UploadErrorMessage","UploadAcceptedFormats","UploadFileMaxSizeBasedOnFileType","hideCode","UploadFileMaxSizeBasedOnFileTypeDisabled","UploadDisabledFileMaxSize","UploadNoTitleNoText","UploadOnFileDeleteAsync","UploadOnFileClick","Default","AsyncSubmitBehavior","debounceAsync","AsyncChangeBehavior","timeout","resolvePromise","fn","t","Promise","resolve","setTimeout","hasError","cancel","_resolvePromise","clearTimeout","WithinOtherComponents","WithinALabel"],"sourceRoot":""}