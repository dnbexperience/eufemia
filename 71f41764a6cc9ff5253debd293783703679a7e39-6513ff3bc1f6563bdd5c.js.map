{"version":3,"file":"71f41764a6cc9ff5253debd293783703679a7e39-6513ff3bc1f6563bdd5c.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/components/Input.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/input-masked/hooks/useHandleCursorPosition.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/input-masked/MultiInputMask.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/input-masked/hooks/useMultiInputValues.ts","webpack://dnb-design-system-portal/./src/docs/uilib/components/input-masked/Examples.tsx"],"sourcesContent":["/**\n * ATTENTION: This file is auto generated by using \"prepareTemplates\".\n * Do not change the content!\n *\n */\n\n/**\n * Library Index input to autogenerate all the components and extensions\n * Used by \"prepareInputs\"\n */\n\nimport Input from './input/Input'\nexport * from './input/Input'\nexport default Input\n","import { MutableRefObject, useEffect, useRef } from 'react'\n\nfunction useHandleCursorPosition(\n  inputRefs: MutableRefObject<HTMLInputElement>[],\n  keysToHandle?: RegExp | { [inputId: string]: RegExp[] }\n) {\n  const inputList = useRef(refsToInputList(inputRefs))\n\n  // To keep the refs.current in synch with component of use, or else it wont be possible to navigate to the next input, without triggering a re-render first.\n  useEffect(() => {\n    inputList.current = refsToInputList(inputRefs)\n  }, [inputRefs])\n\n  function onKeyDown(event: React.KeyboardEvent) {\n    const inputs = inputList.current\n    const input = event.target as HTMLInputElement\n\n    const pressedKey = event.key\n\n    const hasPressedKeysToHandle =\n      getKeysToHandle({ keysToHandle, input })?.test(pressedKey) ||\n      /(ArrowRight|ArrowLeft|Backspace)/.test(pressedKey)\n\n    const initialSelectionStart = input.selectionStart\n\n    const inputPosition = getInputPosition(input, inputs)\n\n    window.requestAnimationFrame(() => {\n      const caretPosition = getCaretPosition(input)\n\n      if (!hasPressedKeysToHandle) {\n        return // stop here\n      }\n\n      if (\n        caretPosition === 'last' &&\n        inputPosition !== 'last' &&\n        !(initialSelectionStart === 1 && pressedKey === 'ArrowRight')\n      ) {\n        return goToInput('next', input, inputs)\n      }\n\n      if (\n        caretPosition === 'first' &&\n        inputPosition !== 'first' &&\n        !(\n          initialSelectionStart === 1 &&\n          (pressedKey === 'ArrowLeft' || pressedKey === 'Backspace')\n        )\n      ) {\n        return goToInput('previous', input, inputs)\n      }\n    })\n  }\n\n  return { onKeyDown }\n}\n\n// Helpers\nfunction refsToInputList(inputRefs: MutableRefObject<HTMLInputElement>[]) {\n  return inputRefs.map((ref) => ref.current).filter(Boolean)\n}\n\ntype GetKeysToHandleParams = {\n  keysToHandle: RegExp | { [inputId: string]: RegExp[] }\n  input: HTMLInputElement\n}\n\nfunction getKeysToHandle({ keysToHandle, input }: GetKeysToHandleParams) {\n  if (!keysToHandle) {\n    return undefined\n  }\n\n  if (keysToHandle instanceof RegExp) {\n    return keysToHandle\n  }\n\n  const masks = keysToHandle[input.id]\n\n  const selection =\n    input.selectionStart === input.selectionEnd\n      ? input.selectionStart\n      : undefined\n\n  if (!selection) {\n    return undefined\n  }\n\n  const maskIndex = selection === input.size ? masks.length - 1 : selection\n\n  return masks[maskIndex]\n}\n\nfunction getInputPosition(\n  input: HTMLInputElement,\n  inputs: HTMLInputElement[]\n) {\n  const firstInput = inputs[0]\n  const lastInput = inputs[inputs.length - 1]\n\n  if (input === firstInput) {\n    return 'first'\n  }\n\n  if (input === lastInput) {\n    return 'last'\n  }\n\n  return 'non-initial'\n}\n\nfunction getSelectionPositions(input: HTMLInputElement) {\n  return { start: 0, end: Number(input.size) }\n}\n\nfunction getCaretPosition(input: HTMLInputElement) {\n  const { start, end } = getSelectionPositions(input)\n\n  const selectionStart = input.selectionStart\n  const selectionEnd = input.selectionEnd\n\n  if (selectionStart === start && selectionEnd === start) {\n    return 'first'\n  }\n\n  if (selectionStart === end && selectionEnd === end) {\n    return 'last'\n  }\n\n  return 'non-initial'\n}\n\nfunction goToInput(\n  to: 'next' | 'previous',\n  input: HTMLInputElement,\n  inputs: HTMLInputElement[]\n) {\n  const currentInputIndex = inputs.indexOf(input)\n\n  const siblingIndex =\n    to === 'next'\n      ? currentInputIndex + 1\n      : to === 'previous'\n      ? currentInputIndex - 1\n      : 0\n\n  const siblingInput = inputs[siblingIndex]\n\n  const { start, end } = getSelectionPositions(siblingInput)\n\n  siblingInput.focus()\n\n  if (to === 'next') {\n    return siblingInput.setSelectionRange(start, start)\n  }\n\n  if (to === 'previous') {\n    return siblingInput.setSelectionRange(end, end)\n  }\n}\n\nexport default useHandleCursorPosition\n","import React, { Fragment, MutableRefObject, useRef } from 'react'\nimport Input from '../Input'\nimport TextMask from './TextMask'\nimport useHandleCursorPosition from './hooks/useHandleCursorPosition'\nimport classnames from 'classnames'\nimport FormLabel from '../FormLabel'\nimport { SpacingProps } from '../space/types'\nimport { createSpacingClasses } from '../space/SpacingHelper'\nimport { FormStatusState, FormStatusText } from '../FormStatus'\nimport { useMultiInputValue } from './hooks/useMultiInputValues'\n\nexport type MultiInputMaskInput<T extends string> = {\n  /**\n   * Defines the id for the input. This id is also used to map the input value to the correct property on the objects used for `values` and `onChange` parameters.\n   */\n  id: T\n  /**\n   * Label used by the input. The label itself is hidden, but required to uphold accessibility standards for screen readers.\n   */\n  label: React.ReactNode\n  /**\n   * Each RegExp item in the array defines what the mask should be for each subsequent character in the input. The length sets the size of the input, so an array of two items would produce an input of two characters\n   */\n  mask: RegExp[]\n  /**\n   * Sets the placeholder character used for the input.\n   */\n  placeholderCharacter: string\n}\n\nexport type MultiInputMaskValue<T extends string> = {\n  // eslint-disable-next-line no-unused-vars\n  [K in T]: string\n}\n\nexport type MultiInputMaskProps<T extends string> = {\n  /**\n   * The label describing the group of inputs inside the components.\n   */\n  label?: React.ReactNode\n  /**\n   * Use to change the label layout direction. Defaults to `horizontal`.\n   */\n  labelDirection?: 'vertical' | 'horizontal'\n  /**\n   * Used to define the different inputs representing the inputs in the component. The id's defined here is used to map input value to correct property in `values` parameters used in `onChange`\n   */\n  inputs: MultiInputMaskInput<T>[]\n  /**\n   * Values used for the inputs inside the component. Expects an object with keys matching the id's defined in `inputs`\n   */\n  values?: MultiInputMaskValue<T>\n  /**\n   * Defines the delimiter used to separate the inputs inside the component.\n   */\n  delimiter?: string\n  /**\n   * Runs when the input value changes. Has an object parameter with keys matching the id's defined in `inputs`. i.e. `{month: string, year: string}`\n   */\n  onChange?: (values: MultiInputMaskValue<T>) => void\n  /**\n   * Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.\n   */\n  status?: FormStatusText\n  /**\n   * Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.\n   */\n  statusState?: FormStatusState\n} & Omit<\n  React.HTMLProps<HTMLInputElement>,\n  'onChange' | 'ref' | 'value' | 'label'\n> &\n  SpacingProps\n\nfunction MultiInputMask<T extends string>({\n  label,\n  labelDirection = 'horizontal',\n  inputs,\n  delimiter,\n  onChange: onChangeExternal,\n  disabled,\n  status,\n  statusState,\n  values: defaultValues,\n  className,\n  ...props\n}: MultiInputMaskProps<T>) {\n  const [values, onChange] = useMultiInputValue({\n    inputs,\n    defaultValues,\n    callback: onChangeExternal,\n  })\n\n  const inputRefs = useRef<Array<MutableRefObject<HTMLInputElement>>>([])\n\n  const { onKeyDown } = useHandleCursorPosition(\n    inputRefs.current,\n    getKeysToHandle()\n  )\n\n  const WrapperElement = label ? 'fieldset' : 'div'\n\n  return (\n    <WrapperElement\n      className={classnames(\n        'dnb-multi-input-mask__fieldset',\n        labelDirection === 'horizontal' &&\n          'dnb-multi-input-mask__fieldset--horizontal',\n        createSpacingClasses(props)\n      )}\n    >\n      {label && (\n        <FormLabel\n          className={classnames(\n            'dnb-multi-input-mask__legend',\n            labelDirection === 'horizontal' &&\n              'dnb-multi-input-mask__legend--horizontal'\n          )}\n          element=\"legend\"\n          onClick={onLegendClick}\n          disabled={disabled}\n          vertical={labelDirection === 'vertical'}\n        >\n          {/* This <span/> wrapper is needed to make hover work in Safari Desktop */}\n          <span>{label}</span>\n        </FormLabel>\n      )}\n      <Input\n        {...props}\n        className={classnames('dnb-multi-input-mask', className)}\n        disabled={disabled}\n        status={status}\n        status_state={statusState}\n        input_element={inputs.map((input, index) => (\n          <Fragment key={input.id}>\n            <MultiInputMaskInput\n              {...input}\n              value={values[input.id]}\n              delimiter={\n                index !== inputs.length - 1 ? delimiter : undefined\n              }\n              onKeyDown={onKeyDown}\n              onChange={onChange}\n              disabled={disabled}\n              inputRef={getInputRef}\n            />\n          </Fragment>\n        ))}\n      />\n    </WrapperElement>\n  )\n\n  // Event handlers\n  function onLegendClick() {\n    if (disabled) {\n      return\n    }\n\n    const firstInput = inputRefs.current[0].current\n\n    firstInput.focus()\n    firstInput.setSelectionRange(0, 0)\n  }\n\n  // Utilities\n  function getInputRef(ref: any) {\n    const inputRef = ref?.inputRef\n\n    if (inputRef && !inputRefs.current.includes(inputRef)) {\n      inputRefs.current.push(inputRef)\n    }\n  }\n\n  function getKeysToHandle() {\n    const uniqueMasks = getUniqueMasks()\n\n    // Return the only one RegExp since all the inputs are using the same mask\n    if (uniqueMasks.size === 1) {\n      const pattern = uniqueMasks.values().next().value.replace(/\\//g, '')\n      return new RegExp(pattern)\n    }\n\n    // If there are multiple types of masks used, then map the maps to an object based on input ids\n    // So that useHandleCursorPosition can do a per character test to see if the pressed key should be handled or not\n    return inputs.reduce(\n      (keys, { id, mask }) => {\n        keys[`${id}__input`] = mask\n\n        return keys\n      },\n      {} as Record<`${T}__input`, RegExp[]>\n    )\n  }\n\n  function getUniqueMasks() {\n    const masks = new Set()\n\n    inputs.forEach((input) => {\n      input.mask.forEach((pattern) => masks.add(String(pattern)))\n    })\n\n    return masks\n  }\n}\n\ntype MultiInputMaskInputProps<T extends string> =\n  MultiInputMaskInput<T> & {\n    id: MultiInputMaskInput<T>['id']\n    label: MultiInputMaskInput<T>['label']\n    value: string\n    mask: MultiInputMaskInput<T>['mask']\n    placeholderCharacter: MultiInputMaskInput<T>['placeholderCharacter']\n    delimiter?: MultiInputMaskProps<T>['delimiter']\n    disabled: boolean\n    onKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => void\n    onChange: (\n      id: string,\n      placeholderCharacter: MultiInputMaskInput<T>['placeholderCharacter']\n    ) => void\n    inputRef: any\n  }\n\nfunction MultiInputMaskInput<T extends string>({\n  id,\n  label,\n  value,\n  mask,\n  placeholderCharacter,\n  delimiter,\n  disabled,\n  inputRef,\n  onKeyDown,\n  onChange,\n}: MultiInputMaskInputProps<T>) {\n  return (\n    <>\n      <TextMask\n        id={`${id}__input`}\n        className={classnames(\n          'dnb-input__input',\n          'dnb-multi-input-mask__input',\n          value && 'dnb-multi-input-mask__input--highlight'\n        )}\n        disabled={disabled}\n        size={mask.length}\n        mask={mask}\n        value={value ?? ''}\n        placeholderChar={placeholderCharacter}\n        guide={true}\n        showMask={true}\n        keepCharPositions={false} // so we can overwrite next value, if it already exists\n        aria-labelledby={`${id}__label`}\n        ref={inputRef}\n        onKeyDown={onKeyDown}\n        onFocus={onFocus}\n        onChange={(event) => {\n          onChange(\n            id,\n            removePlaceholder(event.target.value, placeholderCharacter)\n          )\n        }}\n      />\n      <label id={`${id}__label`} htmlFor={`${id}__input`} hidden>\n        {label}\n      </label>\n      {delimiter && (\n        <span\n          aria-hidden\n          className={classnames(\n            'dnb-multi-input-mask__delimiter',\n            value && 'dnb-multi-input-mask__delimiter--highlight'\n          )}\n        >\n          {delimiter}\n        </span>\n      )}\n    </>\n  )\n\n  function removePlaceholder(value: string, placeholder: string) {\n    return value.replace(RegExp(placeholder, 'gm'), '')\n  }\n\n  function onFocus({ target }: React.FocusEvent<HTMLInputElement>) {\n    target.focus()\n    target.select()\n  }\n}\n\nexport default MultiInputMask\n","import { useState } from 'react'\nimport {\n  MultiInputMaskProps,\n  MultiInputMaskValue,\n} from '../MultiInputMask'\n\ntype SteppedValuesHook<T extends string> = {\n  inputs: MultiInputMaskProps<T>['inputs']\n  defaultValues?: MultiInputMaskProps<T>['values']\n  callback?: (values: MultiInputMaskProps<T>['values']) => void\n}\n\nexport function useMultiInputValue<T extends string>({\n  inputs,\n  defaultValues,\n  callback,\n}: SteppedValuesHook<T>) {\n  const [values, setValues] = useState<MultiInputMaskValue<T>>(\n    defaultValues ? defaultValues : createDefaultValues()\n  )\n\n  function createDefaultValues() {\n    return inputs.reduce((values, input) => {\n      values[input.id] = ''\n\n      return values\n    }, {} as MultiInputMaskValue<T>)\n  }\n\n  function onChange(id: string, value: string) {\n    const updatedValues = { ...values, [id]: value }\n\n    setValues(updatedValues)\n    if (callback) {\n      callback(updatedValues)\n    }\n  }\n\n  return [values, onChange] as const\n}\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport styled from '@emotion/styled'\nimport { Provider } from '@dnb/eufemia/src/shared'\nimport { Flex, InputMasked } from '@dnb/eufemia/src'\nimport { MultiInputMask } from '@dnb/eufemia/src/components/input-masked'\n\n// https://github.com/text-mask/text-mask\n// How to use masks: https://github.com/text-mask/text-mask/blob/master/componentDocumentation.md#readme\n// import createNumberMask from '@dnb/eufemia/src/components/input-masked/addons/createNumberMask'\n\nexport const InputMaskedExampleNumberLocale = () => (\n  <Wrapper>\n    <ComponentBox data-visual-test=\"input-masked-number\">\n      <Provider formElement={{ label_direction: 'vertical' }}>\n        <Flex.Vertical>\n          <InputMasked\n            label=\"Number:\"\n            as_number\n            mask_options={{ allowNegative: false }}\n            value=\"1234.50\"\n            on_change={({ numberValue }) => {\n              console.log(numberValue)\n            }}\n          />\n          <InputMasked\n            label=\"Number (decimal limit):\"\n            as_number\n            number_mask={{ decimalLimit: 2 }}\n            value=\"1234.016\"\n            on_change={({ numberValue }) => {\n              console.log(numberValue)\n            }}\n          />\n          <InputMasked\n            label=\"Percentage:\"\n            as_percent\n            number_mask={{ decimalLimit: 1 }}\n            value=\"1234.016\"\n            on_change={({ numberValue }) => {\n              console.log(numberValue)\n            }}\n          />\n        </Flex.Vertical>\n      </Provider>\n    </ComponentBox>\n  </Wrapper>\n)\n\nexport const InputMaskedExampleCurrencyLocale = () => (\n  <Wrapper>\n    <ComponentBox data-visual-test=\"input-masked-currency\">\n      <Provider formElement={{ label_direction: 'vertical' }}>\n        <Flex.Vertical>\n          <InputMasked\n            label=\"Currency:\"\n            as_currency=\"EUR\"\n            value=\"1234.50\"\n            on_change={({ numberValue }) => {\n              console.log(numberValue)\n            }}\n          />\n          <Provider\n            locale=\"en-GB\"\n            InputMasked={{\n              currency_mask: {\n                decimalLimit: 3,\n              },\n            }}\n          >\n            <InputMasked\n              label=\"Currency:\"\n              as_currency=\"USD\"\n              value=\"1234.567\"\n              on_change={({ numberValue }) => {\n                console.log(numberValue)\n              }}\n            />\n          </Provider>\n        </Flex.Vertical>\n      </Provider>\n    </ComponentBox>\n  </Wrapper>\n)\n\nexport const InputMaskedExampleCurrencyMask = () => (\n  <Wrapper>\n    <ComponentBox data-visual-test=\"input-masked-currency_mask\">\n      <Provider formElement={{ label_direction: 'vertical' }}>\n        <Flex.Vertical>\n          <InputMasked\n            label=\"Left aligned (default):\"\n            show_mask\n            currency_mask=\"kr\"\n            on_change={({ numberValue }) => {\n              console.log(numberValue)\n            }}\n          />\n          <InputMasked\n            label=\"Right aligned:\"\n            show_mask\n            currency_mask={{ currency: 'NOK' }}\n            align=\"right\"\n            on_change={({ numberValue }) => {\n              console.log(numberValue)\n            }}\n          />\n        </Flex.Vertical>\n      </Provider>\n    </ComponentBox>\n  </Wrapper>\n)\n\nexport const InputMaskedExampleCustomNumberMask = () => (\n  <Wrapper>\n    <ComponentBox>\n      <InputMasked\n        label=\"Masked amount:\"\n        show_mask\n        number_mask={{\n          suffix: ' kr',\n          allowDecimal: true,\n        }}\n        placeholder_char={null}\n        on_change={({ numberValue }) => {\n          console.log(numberValue)\n        }}\n      />\n    </ComponentBox>\n  </Wrapper>\n)\n\nexport const InputMaskedExampleNumberMask = () => (\n  <Wrapper>\n    <ComponentBox data-visual-test=\"input-masked-number_mask\">\n      <InputMasked\n        label=\"Masked input:\"\n        value=\"1000000\"\n        number_mask={{\n          suffix: ',-',\n          allowDecimal: false,\n        }}\n        suffix=\"kr\"\n        on_change={({ numberValue }) => {\n          console.log(parseInt(numberValue || 0, 10))\n        }}\n      />\n    </ComponentBox>\n  </Wrapper>\n)\n\nexport const InputMaskedExamplePrefix = () => (\n  <Wrapper>\n    <ComponentBox>\n      <InputMasked\n        label=\"Masked input:\"\n        number_mask={{\n          prefix: 'NOK ',\n        }}\n        stretch={true}\n        placeholder=\"Enter a number\"\n        on_change={({ numberValue }) => {\n          console.log(numberValue)\n        }}\n      />\n    </ComponentBox>\n  </Wrapper>\n)\n\nexport const InputMaskedExamplePhone = () => (\n  <Wrapper>\n    <ComponentBox data-visual-test=\"input-masked-phone\">\n      <InputMasked\n        label=\"Masked input:\"\n        mask={[\n          '0',\n          '0',\n          /[4]/, // have to start with 4\n          /[5-7]/, // can be 5,6 or 7\n          ' ',\n          /[49]/, // have to start with 4 or 9\n          /\\\\d/,\n          ' ',\n          /\\\\d/,\n          /\\\\d/,\n          ' ',\n          /\\\\d/,\n          /\\\\d/,\n          ' ',\n          /\\\\d/,\n          /\\\\d/,\n        ]}\n        show_mask\n        placeholder_char=\"_\"\n        keep_char_positions\n        on_change={({ numberValue }) => {\n          console.log(numberValue)\n        }}\n      />\n    </ComponentBox>\n  </Wrapper>\n)\n\nconst Wrapper = styled.div`\n  display: block;\n  width: 100%;\n\n  .dnb-masked-input {\n    margin: 1rem 0;\n  }\n  .dnb-form-label + .dnb-masked-input {\n    margin-top: 0;\n  }\n`\n\nexport const InputMaskedInfoInputMode = () => (\n  <Wrapper>\n    <ComponentBox hidePreview hideToolbar>\n      <InputMasked mask_options={{ allowNegative: false }} />\n    </ComponentBox>\n  </Wrapper>\n)\n\nexport const InputMaskedInfoCleanNumberValues = () => (\n  <Wrapper>\n    <ComponentBox hidePreview>\n      <InputMasked as_currency=\"EUR\" value=\"1234.50\" />\n    </ComponentBox>\n  </Wrapper>\n)\n\nexport const InputMaskedInfoCleanNumberValues2 = () => (\n  <Wrapper>\n    <ComponentBox hidePreview>\n      <InputMasked\n        as_currency=\"EUR\"\n        value=\"1234.50\"\n        on_change={({ numberValue }) => {\n          console.log(numberValue) // type of float\n        }}\n      />\n    </ComponentBox>\n  </Wrapper>\n)\n\nexport const InputMaskedInfoDecimalsCurrencyProvider = () => (\n  <Wrapper>\n    <ComponentBox hidePreview>\n      <Provider\n        locale=\"en-GB\"\n        InputMasked={{\n          currency_mask: {\n            decimalLimit: 1, // defaults to 2\n          },\n        }}\n      >\n        <InputMasked as_currency=\"USD\" value=\"1234.567\" />\n      </Provider>\n    </ComponentBox>\n  </Wrapper>\n)\n\nexport const InputMaskedInfoDecimalsNumberProvider = () => (\n  <Wrapper>\n    <ComponentBox hidePreview>\n      <Provider\n        locale=\"en-GB\"\n        InputMasked={{\n          number_mask: {\n            decimalLimit: 2, // defaults to no decimals\n          },\n        }}\n      >\n        <InputMasked as_number value=\"1234.567\" />\n      </Provider>\n    </ComponentBox>\n  </Wrapper>\n)\n\nexport const InputMaskedInfoRemoveDecimalLimit = () => (\n  <Wrapper>\n    <ComponentBox hidePreview>\n      <InputMasked\n        as_number\n        mask_options={{\n          allowDecimal: true,\n          decimalLimit: null,\n        }}\n        value=\"1234.567\"\n      />\n    </ComponentBox>\n  </Wrapper>\n)\n\nexport const InputMaskedExampleMulti = () => (\n  <Wrapper>\n    <ComponentBox scope={{ MultiInputMask }}>\n      <MultiInputMask\n        label=\"Date\"\n        delimiter=\"/\"\n        onChange={({ month, year, suffix }) =>\n          console.log({ month, year, suffix })\n        }\n        inputs={[\n          {\n            id: 'month',\n            label: 'the month',\n            placeholderCharacter: 'd',\n            mask: [/[0-9]/, /[0-9]/],\n          },\n          {\n            id: 'year',\n            label: 'the year',\n            placeholderCharacter: 'm',\n            mask: [/[0-9]/, /[0-9]/],\n          },\n          {\n            id: 'suffix',\n            label: 'suffix text',\n            placeholderCharacter: '-',\n            mask: [/[a-zA-Z]/, /[a-zA-Z]/, /[a-zA-Z]/],\n          },\n        ]}\n      />\n    </ComponentBox>\n  </Wrapper>\n)\n"],"names":["refsToInputList","inputRefs","map","ref","current","filter","Boolean","getSelectionPositions","input","start","end","Number","size","goToInput","to","inputs","currentInputIndex","indexOf","siblingInput","focus","setSelectionRange","keysToHandle","inputList","useRef","useEffect","onKeyDown","event","_getKeysToHandle","target","pressedKey","key","hasPressedKeysToHandle","_ref","RegExp","masks","id","selection","selectionStart","selectionEnd","undefined","maskIndex","length","getKeysToHandle","test","initialSelectionStart","inputPosition","firstInput","lastInput","getInputPosition","window","requestAnimationFrame","caretPosition","getCaretPosition","MultiInputMaskInput","_ref3","label","value","mask","placeholderCharacter","delimiter","disabled","inputRef","onChange","_jsxs","_Fragment","children","_jsx","TextMask","className","classnames","placeholderChar","guide","showMask","keepCharPositions","onFocus","_ref4","select","placeholder","replace","removePlaceholder","htmlFor","hidden","labelDirection","onChangeExternal","status","statusState","values","defaultValues","props","callback","setValues","useState","reduce","updatedValues","useMultiInputValue","useHandleCursorPosition","uniqueMasks","Set","forEach","pattern","add","String","getUniqueMasks","next","keys","_ref2","WrapperElement","createSpacingClasses","FormLabel","element","onClick","vertical","Input","status_state","input_element","index","Fragment","getInputRef","includes","push","InputMaskedExampleNumberLocale","Wrapper","_jsx2","ComponentBox","InputMaskedExampleCurrencyLocale","InputMaskedExampleCurrencyMask","InputMaskedExampleCustomNumberMask","InputMaskedExampleNumberMask","InputMaskedExamplePrefix","InputMaskedExamplePhone","_styled","name","styles","InputMaskedInfoInputMode","hidePreview","hideToolbar","InputMaskedInfoCleanNumberValues","InputMaskedInfoCleanNumberValues2","InputMaskedInfoDecimalsCurrencyProvider","InputMaskedInfoDecimalsNumberProvider","InputMaskedInfoRemoveDecimalLimit","InputMaskedExampleMulti","scope","MultiInputMask"],"sourceRoot":""}