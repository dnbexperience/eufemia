{"version":3,"file":"7bfce8e11b98baa776c4acadf46198852c01700c-d958c6fa9734e3d965ab.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/./src/shared/parts/TranslationsTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colorValue = 'var(--color-success-green)'\nconst colorString = 'var(--color-fire-red)'\nconst colorType = 'var(--color-violet)'\nconst colorUndefined = 'var(--color-black-55)'\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = children.startsWith(`'`) ? colorString : colorType\n        // falls through\n      }\n      case 'value': {\n        style.color = children.startsWith(`'`)\n          ? colorString\n          : children === 'undefined' || children === 'null'\n          ? colorUndefined\n          : colorValue\n        // falls through\n      }\n      default: {\n        style.background = 'none'\n        style.boxShadow = 'none'\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('/')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","import styled from '@emotion/styled'\nimport { Anchor, P, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { extendDeep, warn } from '@dnb/eufemia/src/shared/component-helper'\nimport globalTranslations from '@dnb/eufemia/src/shared/locales'\nimport formsTranslations from '@dnb/eufemia/src/extensions/forms/constants/locales'\nimport { FormattedCode } from './PropertiesTable'\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst allTranslations = extendDeep(\n  {},\n  globalTranslations,\n  formsTranslations,\n)\n\nexport default function TranslationsTable({\n  localeKey,\n}: {\n  localeKey?: string | Array<string>\n}) {\n  const entries = {}\n  const allowList = {}\n  const localeKeys = (\n    Array.isArray(localeKey) ? localeKey : [localeKey]\n  ).map((key) => {\n    if (key.includes('.')) {\n      const first = key.split('.')[0]\n      allowList[first] = allowList[first] || []\n      allowList[first].push(key)\n      return first\n    }\n\n    return key\n  })\n\n  Object.entries(allTranslations).forEach(([locale, translations]) => {\n    localeKeys.forEach((localeKey) => {\n      const translationsObj = translations[localeKey]\n      if (!translationsObj) {\n        warn(\n          `TranslationsTable: Could not find any translations for key: \"${localeKey}\", perhaps you misspelled the key's name?`,\n        )\n        return\n      }\n      Object.entries(translationsObj).forEach(([key, translation]) => {\n        key = `${localeKey}.${key}`\n        if (allowList[localeKey] && !allowList[localeKey].includes(key)) {\n          return\n        }\n        entries[key] = Object.assign(entries[key] || {}, {\n          [locale]: translation,\n        })\n      })\n    })\n  })\n\n  const locales = Object.keys(allTranslations)\n  const tableRows = Object.entries(entries).map(([key, values]) => {\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode variant=\"prop\">{key}</FormattedCode>\n        </Td>\n        {Object.entries(values).map(([locale, value], i) => {\n          return (\n            <Td key={i + locale}>\n              {typeof value === 'string' ? (\n                value\n              ) : (\n                <pre>{JSON.stringify(value, null, 2)}</pre>\n              )}\n            </Td>\n          )\n        })}\n      </Tr>\n    )\n  })\n\n  if (tableRows.length == 0) {\n    warn(\n      `TranslationsTable: Not able to find any translations for input : \"${localeKey}\", hence not rendering the translations table.`,\n    )\n    return\n  }\n\n  return (\n    <>\n      <P>\n        More info about translations can be found in the{' '}\n        <Anchor href=\"/uilib/usage/customisation/localization/\">\n          general localization\n        </Anchor>{' '}\n        and{' '}\n        <Anchor href=\"/uilib/extensions/forms/getting-started/#localization-and-translation\">\n          Eufemia Forms localization\n        </Anchor>{' '}\n        docs.\n      </P>\n      <Table.ScrollView>\n        <StyledTable>\n          <thead>\n            <Tr>\n              <Th>Key</Th>\n              {locales.map((locale) => (\n                <Th key={locale}>{locale}</Th>\n              ))}\n            </Tr>\n          </thead>\n          <tbody>{tableRows}</tbody>\n        </StyledTable>\n      </Table.ScrollView>\n    </>\n  )\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["components","basicComponents","p","props","_jsx","StyledTable","_styled","Table","target","name","styles","colorString","FormattedCode","_ref","variant","strikethrough","children","style","rest","textDecoration","color","startsWith","background","boxShadow","code","PropertiesTable","_ref2","valueType","camelCase","omit","showDefaultValue","keys","Object","tableRows","entries","map","_ref3","key","type","defaultValue","doc","status","includes","_jsxs","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","_Fragment","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp","allTranslations","extendDeep","globalTranslations","formsTranslations","TranslationsTable","localeKey","allowList","localeKeys","first","split","push","locale","translations","translationsObj","translation","assign","warn","locales","_ref4","values","_ref5","value","JSON","stringify","length","P","Anchor","href"],"sourceRoot":""}