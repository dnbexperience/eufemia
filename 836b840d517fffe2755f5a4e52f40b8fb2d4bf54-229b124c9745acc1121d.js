"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[49266],{38019:function(e,t,o){o.d(t,{$:function(){return n},g:function(){return a}});const a={label:{doc:"Field label to show above / before the input feature.",type:"string",status:"optional"},labelDescription:{doc:'A more discreet text displayed beside the label (i.e for "(optional)").',type:"string",status:"optional"},labelDescriptionInline:{doc:"If true, the `labelDescription` will be displayed on the same line as the label.",type:"boolean",status:"optional"},labelSrOnly:{doc:"Use `true` to make the label only readable by screen readers.",type:"boolean",status:"optional"},labelSize:{doc:"Define the font-size of the label based on the [font-size](/uilib/typography/font-size/) table.",type:["medium","large"],status:"optional"},help:{doc:"Provide help content for the field using `title` and `content` as a string or React.Node. Additionally, you can set `open` to `true` to display the inline help, set the `breakout` property to `false` to disable the breakout of the inline help content, or use `renderAs` set to `dialog` to render the content in a [Dialog](/uilib/components/dialog/) (recommended for larger amounts of content).",type:"object",status:"optional"},layout:{doc:"Layout for the label and input. Can be `horizontal` or `vertical`.",type:"string",status:"optional"},layoutOptions:{doc:'Use this to set additional options for the `horizontal` layout. E.g. `{ width: "medium" }`. You can also use a custom width `{number}rem`. Instead of a width, you can use a min/max width. E.g. `{ minWidth: "6rem", maxWidth: "12rem" }`.',type:"object",status:"optional"},width:{doc:"Will set the width for the whole block. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.",type:["string","false"],status:"optional"},contentWidth:{doc:"Will set the width for its contents. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.",type:["string","false"],status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},n={...a,labelSize:{doc:"Define one of the following [heading sizes](/uilib/elements/heading/): `medium` or `large`.",type:["string","false"],status:"optional"},labelHeight:{doc:"Defines the height of an component (size prop), so the label can be aligned correctly. Can be `default`, `small`, `medium`, `large`.",type:"string",status:"optional"},asFieldset:{doc:"Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.",type:"boolean",status:"optional"},align:{doc:"`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.",type:["string","false"],status:"optional"},disableStatusSummary:{doc:"Use `true` to disable the error summary.",type:"boolean",status:"optional"},composition:{doc:"Use `true` for when you have more than one field wrapped.",type:"true",status:"optional"},disabled:{doc:"Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.",type:"boolean",status:"optional"}}},52685:function(e,t,o){o.d(t,{I:function(){return a},O:function(){return n}});const a={value:{doc:"Source data value for the field. Will take precedence over the path value given in the data context.",type:"{valueType}",status:"optional"},defaultValue:{doc:"Default source data value for the field. Will not take precedence over the path value given in the data context.",type:"{valueType}",status:"optional"},path:{doc:"JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.",type:"string",status:"optional"},info:{doc:"Info message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`",type:["React.Node","Array<React.Node>","function"],status:"optional"},warning:{doc:"Warning message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`",type:["React.Node","Array<React.Node>","function"],status:"optional"},error:{doc:"Error message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`",type:["Error","FormError","Array<Error | FormError>","function"],status:"optional"},disabled:{doc:"Set `true` to show the field but without the possibility of changing the value.",type:"boolean",status:"optional"},emptyValue:{doc:"The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.",type:["{valueType}","undefined"],status:"optional"},required:{doc:'When set to `true`, the field will give an error if the value fails the required validation. When set to `false`, the field will not be required, but will add a "(optional)" suffix to the label.',type:"boolean",status:"optional"},labelSuffix:{doc:'Will append an additional text to the label, like "(optional)". When using `inheritLabel`, the suffix will not be inherited. NB: The visual appearance of the `labelSuffix` may change in the future.',type:"React.Node",status:"optional"},schema:{doc:"Custom JSON Schema for validating the value.",type:"object",status:"optional"},validateInitially:{doc:"Set to `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.",type:"boolean",status:"optional"},validateUnchanged:{doc:"Set to `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.",type:"boolean",status:"optional"},validateContinuously:{doc:"Set to `true` to show validation based errors continuously while writing, not just when blurring the field.",type:"boolean",status:"optional"},errorMessages:{doc:"Custom error messages for each type of error, overriding default messages. The messages can be a React.ReactNode or a string.",type:"object",status:"optional"},onChangeValidator:{doc:"Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered on every change done by the user. The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.",type:"function",status:"optional"},onBlurValidator:{doc:"Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered when the user leaves a field (e.g., blurring a text input or closing a dropdown). The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.",type:"function",status:"optional"},transformIn:{doc:"Transforms the `value` before its displayed in the field (e.g. input).",type:"function",status:"optional"},transformOut:{doc:"Transforms the value before it gets forwarded to the form data object (context) or returned as the `onChange` value parameter. The first parameter is the internal value. Some fields to support a second parameter, like the SelectCountry, where the country object is given.",type:"function",status:"optional"}},n={onChange:{doc:"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).",type:"(value) => void",status:"optional"},onFocus:{doc:"Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).",type:"(value) => void",status:"optional"},onBlur:{doc:"Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).",type:"(value) => void",status:"optional"}}},53964:function(e,t,o){o.d(t,{h:function(){return s},r:function(){return i}});var a=o(91135),n=o(56115);const i={currencies:{doc:"List only a certain set of currencies: `Scandinavia`, `Nordic`, `Europe` or `Prioritized`(all currencies [sorted by priority](/uilib/extensions/forms/feature-fields/SelectCurrency/#filter-or-prioritize-currency-listing)). Defaults to `Prioritized`.",type:"string",status:"optional"},filterCurrencies:{doc:"Use this prop to filter out certain currencies. The function receives the currency object and should return a boolean. Returning `false` will omit the currency.",type:"function",status:"optional"},size:{...n.g.size,doc:`${n.g.size.doc} Consider rather setting field sizes with [Form.Appearance](/uilib/extensions/forms/Form/Appearance/).`}},s=(0,a.j7)({type:"string",optional:!0},{type:"object",optional:!0})},56115:function(e,t,o){o.d(t,{Q:function(){return n},g:function(){return a}});const a={mode:{doc:'If set to `async`, it prevents showing the "no options" message during typing / filtering. Defaults to `sync`.',type:"string",status:"optional"},input_value:{doc:'Lets you define a custom input value. Setting it to an empty string `""` will reset the input value.',type:"string",status:"optional"},placeholder:{doc:'Use this to define the pre-filled placeholder text in the input. Defaults to `title="Skriv og velg"`.',type:"string",status:"optional"},title:{doc:"Give a title to let the user know what they have to do. Defaults to `Skriv og få alternativer`.",type:"React.Node",status:"optional"},disable_filter:{doc:"If set to `true`, word highlighting will still be active, but no options will be filtered out. Defaults to `false`.",type:"boolean",status:"optional"},disable_highlighting:{doc:"If set to `true`, word highlighting will be disabled, but the options will still get filtered. Defaults to `false`.",type:"boolean",status:"optional"},disable_reorder:{doc:"If set to `true`, reordering of search results will be disabled. Defaults to `false`.",type:"boolean",status:"optional"},search_numbers:{doc:"If set to `true` and `search_in_word_index` is not set, the user will be able to more easily search and filter e.g. bank account numbers. Defaults to `false`.",type:"boolean",status:"optional"},search_in_word_index:{doc:'This gives you the possibility to change the threshold number, which defines from what word on we search "inside words". Defaults to `3`.',type:"boolean",status:"optional"},keep_value:{doc:"Use `true` to not remove the typed value on input blur, if it is invalid. By default, the typed value will disappear / replaced by a selected value from the data list during the input field blur. Defaults to `false`.",type:"boolean",status:"optional"},keep_selection:{doc:"Use `true` to not remove selected item on input blur, when the input value is empty. Defaults to `false`.",type:"boolean",status:"optional"},keep_value_and_selection:{doc:"Like `keep_value` – but would not reset to the selected value during input field blur. Also, the selected value would still be kept. Defaults to `false`.",type:"boolean",status:"optional"},prevent_selection:{doc:"If set to `true`, no permanent selection will be made. Also, the typed value will not disappear on input blur (like `keep_value`). Defaults to `false`.",type:"boolean",status:"optional"},show_clear_button:{doc:"If set to `true`, a clear button is shown inside the input field. Defaults to `false`.",type:"boolean",status:"optional"},icon:{doc:"To be included in the autocomplete input.",type:["string","React.Node"],status:"optional"},icon_size:{doc:"Change the size of the icon pragmatically.",type:"string",status:"optional"},icon_position:{doc:"Position of the icon inside the autocomplete. Set to `left` or `right`. Defaults to `left`.",type:"string",status:"optional"},input_icon:{doc:"Same as `icon`.",type:["string","React.Node"],status:"optional"},triangle_position:{doc:"Position of icon arrow / triangle the drawer. Set to `left` or `right`. Defaults to `left`.",type:"string",status:"optional"},size:{doc:"Define the height of the Autocomplete. Can be set to `small`, `default`, `medium` and `large`. Defaults to `default`.",type:"string",status:"optional"},drawer_class:{doc:"Define a custom class for the internal drawer-list. This makes it possible more easily customize the drawer-list style with styled-components and the `css` style method. Defaults to `null`.",type:"string",status:"optional"},show_submit_button:{doc:"Use `true` to show a Autocomplete button to toggle the [DrawerList](/uilib/components/fragments/drawer-list). Defaults to `false`.",type:"boolean",status:"optional"},align_autocomplete:{doc:"Use `right` to change the options alignment direction. Defaults to `left`.",type:"string",status:"optional"},no_options:{doc:'Text show in the "no options" item. Defaults to `Ingen alternativer`.',type:"boolean",status:"optional"},aria_live_options:{doc:"Text read out by screen readers. This way users with screen readers know how many options they got during typing. Defaults to `%s alternativer`.",type:"React.Node",status:"optional"},show_all:{doc:"Text that lets a user unravel all the available options. Defaults to `Vis alt`.",type:"boolean",status:"optional"},indicator_label:{doc:'Text show on indicator "options" item. Defaults to `Henter data ...`.',type:"React.Node",status:"optional"},show_options_sr:{doc:"Only for screen readers. Title of the button to show the suggestions / options. It is always present and when activating, it opens the DrawerList and sets the focus on it. Defaults to `Bla gjennom alternativer`.",type:"string",status:"optional"},selected_sr:{doc:"Only for screen readers (VoiceOver). The label used to announce the selected item. Defaults to `Valgt:`.",type:"string",status:"optional"},selectall:{doc:"If set to `true`, then the whole input value gets selected on the entry focus. A second click will place the cursor on the wanted position.",type:"boolean",status:"optional"},submit_button_title:{doc:"Title on submit button. Defaults to `Vis alternativer`.",type:"React.Node",status:"optional"},submit_button_icon:{doc:"The icon used in the submit button. Defaults to `chevron_down`.",type:["string","React.Element"],status:"optional"},submit_element:{doc:"Replace the dropdown / submit button with a custom React element. Defaults to the input SubmitButton `import { SubmitButton } from &#39;@dnb/eufemia/components/input/Input&#39;`.",type:"React.Node",status:"optional"},opened:{doc:"If set to `true`, the Autocomplete will be rendered initially with a visible and accessible data list / options.",type:"boolean",status:"optional"},open_on_focus:{doc:"Use `true` to auto open the list once the user is entering the input field with the keyboard.",type:"boolean",status:"optional"},stretch:{doc:"If set to `true`, then the autocomplete will be 100% in available `width`.",type:"boolean",status:"optional"},skip_portal:{doc:"Set to `true` to disable the React Portal behavior. Defaults to `false`.",type:"string",status:"optional"},status:{doc:"Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.",type:["error","info","boolean"],status:"optional"},status_state:{doc:"Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.",type:["error","info"],status:"optional"},status_props:{doc:"Use an object to define additional FormStatus properties.",type:"object",status:"optional"},globalStatus:{doc:"The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).",type:"object",status:"optional"},label:{doc:"Prepends the Form Label component. If no ID is provided, a random ID is created.",type:"React.Node",status:"optional"},label_direction:{doc:'Use `label_direction="vertical"` to change the label layout direction. Defaults to `horizontal`.',type:"React.Node",status:"optional"},label_sr_only:{doc:"Use `true` to make the label only readable by screen readers.",type:"boolean",status:"optional"},suffix:{doc:"Text describing the content of the Autocomplete more than the label. You can also send in a React component, so it gets wrapped inside the Autocomplete component.",type:"React.Node",status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown.",type:"boolean",status:"optional"},input_ref:{doc:"Use a React.Ref to get access to the `input` DOM element.",type:"React.RefObject",status:"optional"},input_element:{doc:"Lets you provide a custom React element as the input HTML element.",type:["string","React.Element"],status:"optional"},"[DrawerList](/uilib/components/fragments/drawer-list/properties)":{doc:"all DrawerList properties.",type:"Various",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},n={on_type:{doc:"Will be called for every key change the users makes. Returns an object with the input `value` inside `{ value, event, attributes }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data)",type:"function",status:"optional"},on_focus:{doc:"Will be called on user generated focus action. Returns an object with the input `value` inside `{ value, event, attributes }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data).",type:"function",status:"optional"},on_blur:{doc:"Will be called on user generated blur action. Returns an object with the input `value` inside `{ value, event, attributes }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data).",type:"function",status:"optional"},on_change:{doc:"Will be called on state changes made by the user. Returns an object with the new selected `data` item `{ data, event, attributes, value }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data).",type:"function",status:"optional"},on_select:{doc:'Will be called once the users focuses or selects an item by a click or keyboard navigation. Returns an object with the new selected `data` item `{ data, event, attributes, value, active_item }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data). The "active_item" property is the currently selected item by keyboard navigation',type:"function",status:"optional"},on_show:{doc:"Will be called once the user presses the autocomplete. Returns the data item `{ data, attributes }`.",type:"function",status:"optional"},on_hide:{doc:"Will be called once the user presses the autocomplete again, or clicks somewhere else. Returns the data item `{ data, attributes }`.",type:"function",status:"optional"}}},69094:function(e,t,o){var a=o(23722);t.A=a.A},81908:function(e,t,o){var a=o(94515);t.A=a.A},91135:function(e,t,o){o.d(t,{IE:function(){return s},j7:function(){return l},mT:function(){return i}});var a=o(38019),n=o(52685);const i={...n.I,...a.g},s={...n.O},l=function(e,t){void 0===e&&(e=void 0),void 0===t&&(t=void 0);const o=`(${e?`value${e.optional?"?":""}: ${e.type}`:"value"}${t?`, additionalArgs${t.optional?"?":""}: ${t.type}`:""}) => void`;return{...s,onChange:{...s.onChange,type:o},onFocus:{...s.onFocus,type:o},onBlur:{...s.onBlur,type:o}}}},92034:function(e,t,o){var a=o(31666);t.A=a.A}}]);
//# sourceMappingURL=836b840d517fffe2755f5a4e52f40b8fb2d4bf54-229b124c9745acc1121d.js.map