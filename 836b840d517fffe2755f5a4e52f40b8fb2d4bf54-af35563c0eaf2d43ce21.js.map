{"version":3,"file":"836b840d517fffe2755f5a4e52f40b8fb2d4bf54-af35563c0eaf2d43ce21.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueWritePropsDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/SelectCurrency/SelectCurrencyDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/autocomplete/AutocompleteDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../../shared/types'\n\nexport const FieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescriptionInline: {\n    doc: 'If true, the `labelDescription` will be displayed on the same line as the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSize: {\n    doc: 'Define the font-size of the label based on the [font-size](/uilib/typography/font-size/) table.',\n    type: ['medium', 'large'],\n    status: 'optional',\n  },\n  help: {\n    doc: 'Provide help content for the field using `title` and `content` as a string or React.Node. Additionally, you can set `open` to `true` to display the inline help, set the `breakout` property to `false` to disable the breakout of the inline help content, or use `renderAs` set to `dialog` to render the content in a [Dialog](/uilib/components/dialog/) (recommended for larger amounts of content).',\n    type: 'object',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  layoutOptions: {\n    doc: 'Use this to set additional options for the `horizontal` layout. E.g. `{ width: \"medium\" }`. You can also use a custom width `{number}rem`. Instead of a width, you can use a min/max width. E.g. `{ minWidth: \"6rem\", maxWidth: \"12rem\" }`.',\n    type: 'object',\n    status: 'optional',\n  },\n  width: {\n    doc: 'Will set the width for the whole block. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: 'Will set the width for its contents. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\n/** For internal use only */\nexport const FieldBlockProperties: PropertiesTableProps = {\n  ...FieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading sizes](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  labelHeight: {\n    doc: 'Defines the height of an component (size prop), so the label can be aligned correctly. Can be `default`, `small`, `medium`, `large`.',\n    type: 'string',\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  disableStatusSummary: {\n    doc: 'Use `true` to disable the error summary.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'true',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const DataValueWritePropsProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: \"Info message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  warning: {\n    doc: \"Warning message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  error: {\n    doc: \"Error message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['Error', 'FormError', 'Array<Error | FormError>', 'function'],\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set to `true`, the field will give an error if the value fails the required validation. When set to `false`, the field will not be required, but will add a \"(optional)\" suffix to the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSuffix: {\n    doc: 'Will append an additional text to the label, like \"(optional)\". When using `inheritLabel`, the suffix will not be inherited. NB: The visual appearance of the `labelSuffix` may change in the future.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set to `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set to `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateContinuously: {\n    doc: 'Set to `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages. The messages can be a React.ReactNode or a string.',\n    type: 'object',\n    status: 'optional',\n  },\n  onChangeValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered on every change done by the user. The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered when the user leaves a field (e.g., blurring a text input or closing a dropdown). The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'Transforms the value before it gets forwarded to the form data object (context) or returned as the `onChange` value parameter. The first parameter is the internal value. Some fields do support a second parameter, like the SelectCountry, where the country object is given.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const DataValueWritePropsEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).\",\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../../shared/types'\nimport { getFieldEventsWithTypes } from '../FieldDocs'\nimport { AutocompleteProperties } from '../../../../components/autocomplete/AutocompleteDocs'\n\nexport const SelectCurrencyProperties: PropertiesTableProps = {\n  currencies: {\n    doc: 'List only a certain set of currencies: `Scandinavia`, `Nordic`, `Europe` or `Prioritized`(all currencies [sorted by priority](/uilib/extensions/forms/feature-fields/SelectCurrency/#filter-or-prioritize-currency-listing)). Defaults to `Prioritized`.',\n    type: 'string',\n    status: 'optional',\n  },\n  filterCurrencies: {\n    doc: 'Use this prop to filter out certain currencies. The function receives the currency object and should return a boolean. Returning `false` will omit the currency.',\n    type: 'function',\n    status: 'optional',\n  },\n  size: {\n    ...AutocompleteProperties.size,\n    doc: `${AutocompleteProperties.size.doc} Consider rather setting field sizes with [Form.Appearance](/uilib/extensions/forms/Form/Appearance/).`,\n  },\n}\n\nexport const SelectCurrencyGeneralEvents = getFieldEventsWithTypes(\n  { type: 'string', optional: true },\n  { type: 'object', optional: true }\n)\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const AutocompleteProperties = {\n  mode: {\n    doc: 'If set to `async`, it prevents showing the \"no options\" message during typing / filtering. Defaults to `sync`.',\n    type: 'string',\n    status: 'optional',\n  },\n  input_value: {\n    doc: 'Lets you define a custom input value. Setting it to an empty string `\"\"` will reset the input value.',\n    type: 'string',\n    status: 'optional',\n  },\n  placeholder: {\n    doc: 'Use this to define the pre-filled placeholder text in the input. Defaults to `title=\"Skriv og velg\"`.',\n    type: 'string',\n    status: 'optional',\n  },\n  title: {\n    doc: 'Give a title to let the user know what they have to do. Defaults to `Skriv og få alternativer`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  disable_filter: {\n    doc: 'If set to `true`, word highlighting will still be active, but no options will be filtered out. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  disable_highlighting: {\n    doc: 'If set to `true`, word highlighting will be disabled, but the options will still get filtered. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  disable_reorder: {\n    doc: 'If set to `true`, reordering of search results will be disabled. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  search_numbers: {\n    doc: 'If set to `true` and `search_in_word_index` is not set, the user will be able to more easily search and filter e.g. bank account numbers. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  search_in_word_index: {\n    doc: 'This gives you the possibility to change the threshold number, which defines from what word on we search \"inside words\". Defaults to `3`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  keep_value: {\n    doc: 'Use `true` to not remove the typed value on input blur, if it is invalid. By default, the typed value will disappear / replaced by a selected value from the data list during the input field blur. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  keep_selection: {\n    doc: 'Use `true` to not remove selected item on input blur, when the input value is empty. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  keep_value_and_selection: {\n    doc: 'Like `keep_value` – but would not reset to the selected value during input field blur. Also, the selected value would still be kept. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  prevent_selection: {\n    doc: 'If set to `true`, no permanent selection will be made. Also, the typed value will not disappear on input blur (like `keep_value`). Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  show_clear_button: {\n    doc: 'If set to `true`, a clear button is shown inside the input field. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  icon: {\n    doc: 'To be included in the autocomplete input.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'Change the size of the icon pragmatically.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon_position: {\n    doc: 'Position of the icon inside the autocomplete. Set to `left` or `right`. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  input_icon: {\n    doc: 'Same as `icon`.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  triangle_position: {\n    doc: 'Position of icon arrow / triangle the drawer. Set to `left` or `right`. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  size: {\n    doc: 'Define the height of the Autocomplete. Can be set to `small`, `default`, `medium` and `large`. Defaults to `default`.',\n    type: 'string',\n    status: 'optional',\n  },\n  drawer_class: {\n    doc: 'Define a custom class for the internal drawer-list. This makes it possible more easily customize the drawer-list style with styled-components and the `css` style method. Defaults to `null`.',\n    type: 'string',\n    status: 'optional',\n  },\n  show_submit_button: {\n    doc: 'Use `true` to show a Autocomplete button to toggle the [DrawerList](/uilib/components/fragments/drawer-list). Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align_autocomplete: {\n    doc: 'Use `right` to change the options alignment direction. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  no_options: {\n    doc: 'Text show in the \"no options\" item. If set to `false`, the list will not be rendered when there are no options available. Defaults to `Ingen alternativer`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  aria_live_options: {\n    doc: 'Text read out by screen readers. This way users with screen readers know how many options they got during typing. Defaults to `%s alternativer`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  show_all: {\n    doc: 'Text that lets a user unravel all the available options. Defaults to `Vis alt`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  indicator_label: {\n    doc: 'Text show on indicator \"options\" item. Defaults to `Henter data ...`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  show_options_sr: {\n    doc: 'Only for screen readers. Title of the button to show the suggestions / options. It is always present and when activating, it opens the DrawerList and sets the focus on it. Defaults to `Bla gjennom alternativer`.',\n    type: 'string',\n    status: 'optional',\n  },\n  selected_sr: {\n    doc: 'Only for screen readers (VoiceOver). The label used to announce the selected item. Defaults to `Valgt:`.',\n    type: 'string',\n    status: 'optional',\n  },\n  selectall: {\n    doc: 'If set to `true`, then the whole input value gets selected on the entry focus. A second click will place the cursor on the wanted position.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  submit_button_title: {\n    doc: 'Title on submit button. Defaults to `Vis alternativer`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  submit_button_icon: {\n    doc: 'The icon used in the submit button. Defaults to `chevron_down`.',\n    type: ['string', 'React.Element'],\n    status: 'optional',\n  },\n  submit_element: {\n    doc: 'Replace the dropdown / submit button with a custom React element. Defaults to the input SubmitButton `import { SubmitButton } from &#39;@dnb/eufemia/components/input/Input&#39;`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  opened: {\n    doc: 'If set to `true`, the Autocomplete will be rendered initially with a visible and accessible data list / options.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  open_on_focus: {\n    doc: 'Use `true` to auto open the list once the user is entering the input field with the keyboard.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  stretch: {\n    doc: 'If set to `true`, then the autocomplete will be 100% in available `width`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skip_portal: {\n    doc: 'Set to `true` to disable the React Portal behavior. Defaults to `false`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status: {\n    doc: 'Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: ['error', 'info', 'boolean'],\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.',\n    type: ['error', 'info'],\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'object',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Prepends the Form Label component. If no ID is provided, a random ID is created.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  label_direction: {\n    doc: 'Use `label_direction=\"vertical\"` to change the label layout direction. Defaults to `horizontal`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  label_sr_only: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the Autocomplete more than the label. You can also send in a React component, so it gets wrapped inside the Autocomplete component.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  input_ref: {\n    doc: 'Use a React.Ref to get access to the `input` DOM element.',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  input_element: {\n    doc: 'Lets you provide a custom React element as the input HTML element.',\n    type: ['string', 'React.Element'],\n    status: 'optional',\n  },\n  '[DrawerList](/uilib/components/fragments/drawer-list/properties)': {\n    doc: 'all DrawerList properties.',\n    type: 'Various',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n} satisfies PropertiesTableProps\n\nexport const AutocompleteEvents = {\n  on_type: {\n    doc: 'Will be called for every key change the users makes. Returns an object with the input `value` inside `{ value, event, attributes }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data)',\n    type: 'function',\n    status: 'optional',\n  },\n  on_focus: {\n    doc: 'Will be called on user generated focus action. Returns an object with the input `value` inside `{ value, event, attributes }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data).',\n    type: 'function',\n    status: 'optional',\n  },\n  on_blur: {\n    doc: 'Will be called on user generated blur action. Returns an object with the input `value` inside `{ value, event, attributes }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data).',\n    type: 'function',\n    status: 'optional',\n  },\n  on_change: {\n    doc: 'Will be called on state changes made by the user. Returns an object with the new selected `data` item `{ data, event, attributes, value }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data).',\n    type: 'function',\n    status: 'optional',\n  },\n  on_select: {\n    doc: 'Will be called once the users focuses or selects an item by a click or keyboard navigation. Returns an object with the new selected `data` item `{ data, event, attributes, value, active_item }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data). The \"active_item\" property is the currently selected item by keyboard navigation',\n    type: 'function',\n    status: 'optional',\n  },\n  on_show: {\n    doc: 'Will be called once the user presses the autocomplete. Returns the data item `{ data, attributes }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_hide: {\n    doc: 'Will be called once the user presses the autocomplete again, or clicks somewhere else. Returns the data item `{ data, attributes }`.',\n    type: 'function',\n    status: 'optional',\n  },\n} satisfies PropertiesTableProps\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { FieldBlockSharedProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  DataValueWritePropsEvents,\n  DataValueWritePropsProperties,\n} from '../hooks/DataValueWritePropsDocs'\n\nexport const FieldProperties: PropertiesTableProps = {\n  ...DataValueWritePropsProperties,\n  ...FieldBlockSharedProperties,\n}\n\nexport const FieldEvents: PropertiesTableProps = {\n  ...DataValueWritePropsEvents,\n}\n\nexport const getFieldEventsWithTypes = (\n  valueType: { type: string; optional?: boolean } = undefined,\n  additionalArgsType: { type: string; optional?: boolean } = undefined\n): PropertiesTableProps => {\n  const value = valueType\n    ? `value${valueType.optional ? '?' : ''}: ${valueType.type}`\n    : 'value'\n\n  const add = additionalArgsType\n    ? `, additionalArgs${additionalArgsType.optional ? '?' : ''}: ${\n        additionalArgsType.type\n      }`\n    : ''\n\n  const typeString = `(${value}${add}) => void`\n\n  return {\n    ...FieldEvents,\n    onChange: {\n      ...FieldEvents.onChange,\n      type: typeString,\n    },\n    onFocus: {\n      ...FieldEvents.onFocus,\n      type: typeString,\n    },\n    onBlur: {\n      ...FieldEvents.onBlur,\n      type: typeString,\n    },\n  }\n}\n"],"names":["FieldBlockSharedProperties","label","doc","type","status","labelDescription","labelDescriptionInline","labelSrOnly","labelSize","help","layout","layoutOptions","width","contentWidth","FieldBlockProperties","labelHeight","asFieldset","align","disableStatusSummary","composition","disabled","DataValueWritePropsProperties","value","defaultValue","path","info","warning","error","emptyValue","required","labelSuffix","schema","validateInitially","validateUnchanged","validateContinuously","errorMessages","onChangeValidator","onBlurValidator","transformIn","transformOut","DataValueWritePropsEvents","onChange","onFocus","onBlur","SelectCurrencyProperties","currencies","filterCurrencies","size","AutocompleteProperties","SelectCurrencyGeneralEvents","getFieldEventsWithTypes","optional","mode","input_value","placeholder","title","disable_filter","disable_highlighting","disable_reorder","search_numbers","search_in_word_index","keep_value","keep_selection","keep_value_and_selection","prevent_selection","show_clear_button","icon","icon_size","icon_position","input_icon","triangle_position","drawer_class","show_submit_button","align_autocomplete","no_options","aria_live_options","show_all","indicator_label","show_options_sr","selected_sr","selectall","submit_button_title","submit_button_icon","submit_element","opened","open_on_focus","stretch","skip_portal","status_state","status_props","globalStatus","label_direction","label_sr_only","suffix","skeleton","input_ref","input_element","AutocompleteEvents","on_type","on_focus","on_blur","on_change","on_select","on_show","on_hide","FieldProperties","FieldEvents","valueType","additionalArgsType","undefined","typeString"],"sourceRoot":""}