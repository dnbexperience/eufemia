{"version":3,"file":"9ac00f793ed64ad2ab42bb1a8210c63484834d52-fb0b1b9481d06ee14dd0.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/autocomplete/AutocompleteDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colorValue = 'var(--color-success-green)'\nconst colorString = 'var(--color-fire-red)'\nconst colorType = 'var(--color-violet)'\nconst colorUndefined = 'var(--color-black-55)'\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = children.startsWith(`'`) ? colorString : colorType\n        // falls through\n      }\n      case 'value': {\n        style.color = children.startsWith(`'`)\n          ? colorString\n          : children === 'undefined' || children === 'null'\n          ? colorUndefined\n          : colorValue\n        // falls through\n      }\n      default: {\n        style.background = 'none'\n        style.boxShadow = 'none'\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('/')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const autocompleteProperties: PropertiesTableProps = {\n  mode: {\n    doc: 'If set to `async`, it prevents showing the \"no options\" message during typing / filtering. Defaults to `sync`.',\n    type: 'string',\n    status: 'optional',\n  },\n  input_value: {\n    doc: 'Lets you define a custom input value.',\n    type: 'string',\n    status: 'optional',\n  },\n  placeholder: {\n    doc: 'Use this to define the pre-filled placeholder text in the input. Defaults to `title=\"Skriv og velg\"`.',\n    type: 'string',\n    status: 'optional',\n  },\n  title: {\n    doc: 'Give a title to let the user know what they have to do. Defaults to `Skriv og få alternativer`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  disable_filter: {\n    doc: 'If set to `true`, word highlighting will still be active, but no options will be filtered out. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  disable_highlighting: {\n    doc: 'If set to `true`, word highlighting will be disabled, but the options will still get filtered. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  disable_reorder: {\n    doc: 'If set to `true`, reordering of search results will be disabled. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  search_numbers: {\n    doc: 'If set to `true` and `search_in_word_index` is not set, the user will be able to more easily search and filter e.g. bank account numbers. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  search_in_word_index: {\n    doc: 'This gives you the possibility to change the threshold number, which defines from what word on we search \"inside words\". Defaults to `3`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  keep_value: {\n    doc: 'Use `true` to not remove the typed value on input blur, if it is invalid. By default, the typed value will disappear / replaced by a selected value from the data list during the input field blur. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  keep_selection: {\n    doc: 'Use `true` to not remove selected item on input blur, when the input value is empty. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  keep_value_and_selection: {\n    doc: 'Like `keep_value` – but would not reset to the selected value during input field blur. Also, the selected value would still be kept. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  prevent_selection: {\n    doc: 'If set to `true`, no permanent selection will be made. Also, the typed value will not disappear on input blur (like `keep_value`). Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  show_clear_button: {\n    doc: 'If set to `true`, a clear button is shown inside the input field. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  icon: {\n    doc: 'To be included in the autocomplete input.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'Change the size of the icon pragmatically.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon_position: {\n    doc: 'Position of the icon inside the autocomplete. Set to `left` or `right`. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  input_icon: {\n    doc: 'Same as `icon`.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  triangle_position: {\n    doc: 'Position of icon arrow / triangle the drawer. Set to `left` or `right`. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  size: {\n    doc: 'Define the height of the Autocomplete. Can be set to `small`, `default`, `medium` and `large`. Defaults to `default`.',\n    type: 'string',\n    status: 'optional',\n  },\n  drawer_class: {\n    doc: 'Define a custom class for the internal drawer-list. This makes it possible more easily customize the drawer-list style with styled-components and the `css` style method. Defaults to `null`.',\n    type: 'string',\n    status: 'optional',\n  },\n  show_submit_button: {\n    doc: 'Use `true` to show a Autocomplete button to toggle the <a href=\"/uilib/components/fragments/drawer-list\">DrawerList</a>. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align_autocomplete: {\n    doc: 'Use `right` to change the options alignment direction. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  no_options: {\n    doc: 'Text show in the \"no options\" item. Defaults to `Ingen alternativer`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  aria_live_options: {\n    doc: 'Text read out by screen readers. This way users with screen readers know how many options they got during typing. Defaults to `%s alternativer`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  show_all: {\n    doc: 'Text that lets a user unravel all the available options. Defaults to `Vis alt`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  indicator_label: {\n    doc: 'Text show on indicator \"options\" item. Defaults to `Henter data ...`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  show_options_sr: {\n    doc: 'Only for screen readers. Title of the button to show the suggestions / options. It is always present and when activating, it opens the DrawerList and sets the focus on it. Defaults to `Bla gjennom alternativer`.',\n    type: 'string',\n    status: 'optional',\n  },\n  selected_sr: {\n    doc: 'Only for screen readers (VoiceOver). The label used to announce the selected item. Defaults to `Valgt:`.',\n    type: 'string',\n    status: 'optional',\n  },\n  submit_button_title: {\n    doc: 'Title on submit button. Defaults to `Vis alternativer`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  submit_button_icon: {\n    doc: 'The icon used in the submit button. Defaults to `chevron_down`.',\n    type: ['string', 'React.Element'],\n    status: 'optional',\n  },\n  submit_element: {\n    doc: 'Replace the dropdown / submit button with a custom React element. Defaults to the input SubmitButton `import { SubmitButton } from &#39;@dnb/eufemia/components/input/Input&#39;`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  opened: {\n    doc: 'If set to `true`, the Autocomplete will be rendered initially with a visible and accessible data list / options.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  open_on_focus: {\n    doc: 'Use `true` to auto open the list once the user is entering the input field with the keyboard.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  stretch: {\n    doc: 'If set to `true`, then the autocomplete will be 100% in available `width`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skip_portal: {\n    doc: 'Set to `true` to disable the React Portal behavior. Defaults to `false`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status: {\n    doc: 'Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The <a href=\"/uilib/components/global-status/properties/#configuration-object\">configuration</a> used for the target <a href=\"/uilib/components/global-status\">GlobalStatus</a>.',\n    type: 'object',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Prepends the Form Label component. If no ID is provided, a random ID is created.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  label_direction: {\n    doc: 'Use `label_direction=\"vertical\"` to change the label layout direction. Defaults to `horizontal`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  label_sr_only: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the Autocomplete more than the label. You can also send in a React component, so it gets wrapped inside the Autocomplete component.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  input_ref: {\n    doc: 'Use a React.Ref to get access to the `input` DOM element.',\n    type: 'React.Ref',\n    status: 'optional',\n  },\n  input_element: {\n    doc: 'Lets you provide a custom React element as the input HTML element.',\n    type: ['string', 'React.Element'],\n    status: 'optional',\n  },\n  '[DrawerList](/uilib/components/fragments/drawer-list/properties)': {\n    doc: 'all DrawerList properties.',\n    type: 'Various',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const AutocompleteEvents: PropertiesTableProps = {\n  on_type: {\n    doc: 'Will be called for every key change the users makes. Returns an object with the input `value` inside `{ value, event, attributes }` including <a href=\"/uilib/components/autocomplete/events#dynamically-change-data\">these methods</a>.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_focus: {\n    doc: 'Will be called on user generated focus action. Returns an object with the input `value` inside `{ value, event, attributes }` including <a href=\"/uilib/components/autocomplete/events#dynamically-change-data\">these methods</a>.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_blur: {\n    doc: 'Will be called on user generated blur action. Returns an object with the input `value` inside `{ value, event, attributes }` including <a href=\"/uilib/components/autocomplete/events#dynamically-change-data\">these methods</a>.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_change: {\n    doc: 'Will be called on state changes made by the user. Returns an object with the new selected `data` item `{ data, event, attributes, value }` including <a href=\"/uilib/components/autocomplete/events#dynamically-change-data\">these methods</a>.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_select: {\n    doc: 'Will be called once the users selects an item by a click or keyboard navigation. Returns an object with the new selected `data` item `{ data, event, attributes, value, active_item }` including <a href=\"/uilib/components/autocomplete/events#dynamically-change-data\">these methods</a>. The \"active_item\" property is the currently selected item by keyboard navigation',\n    type: 'function',\n    status: 'optional',\n  },\n  on_show: {\n    doc: 'Will be called once the user presses the autocomplete. Returns the data item `{ data, attributes }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_hide: {\n    doc: 'Will be called once the user presses the autocomplete again, or clicks somewhere else. Returns the data item `{ data, attributes }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["components","basicComponents","p","props","_jsx","StyledTable","_styled","Table","target","name","styles","colorString","FormattedCode","_ref","variant","strikethrough","children","style","rest","textDecoration","color","startsWith","background","boxShadow","code","PropertiesTable","_ref2","valueType","camelCase","omit","showDefaultValue","keys","Object","tableRows","entries","map","_ref3","key","type","defaultValue","doc","status","includes","_jsxs","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","_Fragment","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp","autocompleteProperties","mode","input_value","placeholder","title","disable_filter","disable_highlighting","disable_reorder","search_numbers","search_in_word_index","keep_value","keep_selection","keep_value_and_selection","prevent_selection","show_clear_button","icon","icon_size","icon_position","input_icon","triangle_position","size","drawer_class","show_submit_button","align_autocomplete","no_options","aria_live_options","show_all","indicator_label","show_options_sr","selected_sr","submit_button_title","submit_button_icon","submit_element","opened","open_on_focus","stretch","skip_portal","status_state","status_props","globalStatus","label","label_direction","label_sr_only","suffix","skeleton","input_ref","input_element","AutocompleteEvents","on_type","on_focus","on_blur","on_change","on_select","on_show","on_hide"],"sourceRoot":""}