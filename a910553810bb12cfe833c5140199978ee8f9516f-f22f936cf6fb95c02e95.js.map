{"version":3,"file":"a910553810bb12cfe833c5140199978ee8f9516f-f22f936cf6fb95c02e95.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/Array/Array.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/PushButton/PushButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/AnimatedContainer/ElementBlockContext.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/RemoveButton/RemoveButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/EditContainer/EditToolbarTools.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/AnimatedContainer/ElementBlock.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/Toolbar/Toolbar.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/EditContainer/EditContainer.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/ViewContainer/ViewToolbarTools.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/ViewContainer/ViewContainer.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/AnimatedContainer/AnimatedContainer.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/Count/Count.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/index.ts"],"sourcesContent":["import React, {\n  useMemo,\n  useRef,\n  useEffect,\n  useReducer,\n  createRef,\n  useContext,\n  Fragment,\n} from 'react'\nimport classnames from 'classnames'\nimport pointer from 'json-pointer'\nimport { useFieldProps } from '../../hooks'\nimport { makeUniqueId } from '../../../../shared/component-helper'\nimport { Flex } from '../../../../components'\nimport { pickSpacingProps } from '../../../../components/flex/utils'\nimport {\n  BasicProps as FlexContainerProps,\n  Props as FlexContainerAllProps,\n  pickFlexContainerProps,\n} from '../../../../components/flex/Container'\nimport IterateElementContext, {\n  IterateElementContextState,\n} from '../IterateElementContext'\nimport SummaryListContext from '../../Value/SummaryList/SummaryListContext'\nimport ValueBlockContext from '../../ValueBlock/ValueBlockContext'\nimport FieldBoundaryProvider from '../../DataContext/FieldBoundary/FieldBoundaryProvider'\n\nimport type { ContainerMode, ElementChild, Props, Value } from './types'\nimport type { Identifier, Path } from '../../types'\n\n/**\n * Deprecated, as it is supported by all major browsers and Node.js >=v18\n * So its a question of time, when we will remove this polyfill\n */\nimport structuredClone from '@ungap/structured-clone'\nimport useDataValue from '../../hooks/useDataValue'\n\nexport type * from './types'\n\nfunction ArrayComponent(props: Props) {\n  const [salt, forceUpdate] = useReducer(() => ({}), {})\n\n  const summaryListContext = useContext(SummaryListContext)\n  const valueBlockContext = useContext(ValueBlockContext)\n\n  const { getValue } = useDataValue()\n  const preparedProps = useMemo(() => {\n    const {\n      path,\n      countPath,\n      countPathLimit = Infinity,\n      countPathTransform,\n    } = props\n\n    if (countPath) {\n      const arrayValue = getValue(path)\n      let countValue = parseFloat(getValue(countPath))\n      if (!(countValue >= 0)) {\n        countValue = 0\n      }\n      if (countValue > countPathLimit) {\n        countValue = countPathLimit\n      }\n      if (arrayValue?.length !== countValue) {\n        const newValue = []\n        for (let i = 0, l = countValue; i < l; i++) {\n          const value = arrayValue?.[i]\n          newValue.push(countPathTransform?.({ value, index: i }))\n        }\n\n        return {\n          ...props,\n          value: newValue,\n        }\n      }\n    }\n\n    return props\n  }, [getValue, props])\n\n  const {\n    path,\n    value: arrayValue,\n    withoutFlex,\n    emptyValue,\n    placeholder,\n    handleChange,\n    onChange,\n    children,\n  } = useFieldProps<Value, Props>(preparedProps)\n\n  const idsRef = useRef<Array<Identifier>>([])\n  const isNewRef = useRef<Record<string, boolean>>({})\n  const modesRef = useRef<Record<Identifier, ContainerMode>>({})\n  const valueWhileClosingRef = useRef<Array<unknown>>()\n  const valueCountRef = useRef(arrayValue)\n  const containerRef = useRef<HTMLDivElement>()\n  const hadPushRef = useRef<boolean>()\n  const innerRefs = useRef<\n    Record<string, React.RefObject<HTMLDivElement>>\n  >({})\n\n  const omitFlex = withoutFlex ?? (summaryListContext || valueBlockContext)\n\n  useEffect(() => {\n    // Update inside the useEffect, to support React.StrictMode\n    valueCountRef.current = arrayValue || []\n  }, [arrayValue])\n\n  const elementData = useMemo(() => {\n    return ((valueWhileClosingRef.current || arrayValue) ?? []).map(\n      (value, index) => {\n        const id = idsRef.current[index] || makeUniqueId()\n\n        const hasNewItems =\n          arrayValue.length > valueCountRef.current?.length\n\n        if (!idsRef.current[index]) {\n          isNewRef.current[id] = hasNewItems\n          idsRef.current.push(id)\n        }\n\n        const isNew = isNewRef.current[id] || false\n        if (!modesRef.current[id]) {\n          modesRef.current[id] = isNew ? 'edit' : 'view'\n        }\n\n        return {\n          id,\n          path,\n          value,\n          index,\n          arrayValue,\n          containerRef,\n          isNew,\n          containerMode: modesRef.current[id],\n          switchContainerMode: (mode: ContainerMode) => {\n            modesRef.current[id] = mode\n            delete isNewRef.current?.[id]\n            forceUpdate()\n          },\n          handleChange: (path: Path, value: unknown) => {\n            const newArrayValue = structuredClone(arrayValue)\n\n            // Make sure we have a new object reference,\n            // else two new objects will be the same\n            newArrayValue[index] = { ...newArrayValue[index] }\n\n            pointer.set(newArrayValue, path, value)\n            handleChange(newArrayValue)\n          },\n          handlePush: (element: unknown) => {\n            hadPushRef.current = true\n            handleChange([...(arrayValue ?? []), element])\n          },\n          handleRemove: ({ keepItems = false } = {}) => {\n            if (keepItems) {\n              // Add a backup as the array value while animating\n              valueWhileClosingRef.current = arrayValue\n            }\n\n            const newArrayValue = structuredClone(arrayValue)\n            newArrayValue.splice(index, 1)\n            handleChange(newArrayValue)\n          },\n\n          // - Called after animation end\n          fulfillRemove: () => {\n            valueWhileClosingRef.current = null\n            delete modesRef.current?.[id]\n            delete isNewRef.current?.[id]\n            const findIndex = idsRef.current.indexOf(id)\n            idsRef.current.splice(findIndex, 1)\n            forceUpdate()\n          },\n\n          // - Called when cancel button press\n          restoreOriginalValue: (value: unknown) => {\n            const newArrayValue = structuredClone(arrayValue)\n            newArrayValue[index] = value\n            handleChange(newArrayValue)\n          },\n        } as IterateElementContextState\n      }\n    )\n\n    // In order to update \"valueWhileClosingRef\" we need to have \"salt\" in the deps array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [salt, arrayValue, path, handleChange])\n\n  // - Call the onChange callback when a new element is added without calling \"handlePush\"\n  useMemo(() => {\n    const last = elementData?.[elementData.length - 1]\n    if (last?.isNew && !hadPushRef.current) {\n      onChange?.(arrayValue)\n    } else {\n      hadPushRef.current = false\n    }\n  }, [arrayValue, elementData, onChange])\n\n  const flexProps: FlexContainerProps & {\n    innerRef: FlexContainerAllProps['innerRef']\n  } = {\n    className: classnames(\n      'dnb-forms-iterate',\n      'dnb-forms-section',\n      props?.className\n    ),\n    ...pickFlexContainerProps(props as FlexContainerProps),\n    ...pickSpacingProps(props),\n    innerRef: containerRef,\n  }\n\n  const WrapperElement = omitFlex ? Fragment : Flex.Stack\n\n  return (\n    <WrapperElement {...(omitFlex ? null : flexProps)}>\n      {arrayValue === emptyValue || props?.value?.length === 0\n        ? placeholder\n        : elementData.map((elementProps) => {\n            const { id, value, index } = elementProps\n            const elementRef = (innerRefs.current[id] =\n              innerRefs.current[id] || createRef<HTMLDivElement>())\n\n            const renderChildren = (elementChild: ElementChild) => {\n              return typeof elementChild === 'function'\n                ? elementChild(value, index)\n                : elementChild\n            }\n\n            const contextValue = {\n              ...elementProps,\n              elementRef,\n            }\n\n            const content = Array.isArray(children)\n              ? children.map((child) => renderChildren(child))\n              : renderChildren(children)\n\n            if (omitFlex) {\n              return (\n                <IterateElementContext.Provider\n                  key={`element-${id}`}\n                  value={contextValue}\n                >\n                  <FieldBoundaryProvider>{content}</FieldBoundaryProvider>\n                </IterateElementContext.Provider>\n              )\n            }\n\n            return (\n              <Flex.Item\n                className=\"dnb-forms-iterate__element\"\n                tabIndex={-1}\n                innerRef={elementRef}\n                key={`element-${id}`}\n              >\n                <IterateElementContext.Provider value={contextValue}>\n                  <FieldBoundaryProvider>{content}</FieldBoundaryProvider>\n                </IterateElementContext.Provider>\n              </Flex.Item>\n            )\n          })}\n    </WrapperElement>\n  )\n}\n\nArrayComponent._supportsSpacingProps = true\nexport default ArrayComponent\n","import React, { useCallback, useContext } from 'react'\nimport classnames from 'classnames'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/Button'\nimport IterateElementContext from '../IterateElementContext'\nimport { useFieldProps } from '../../hooks'\nimport {\n  DataValueReadWriteComponentProps,\n  omitDataValueReadWriteProps,\n} from '../../types'\nimport { add } from '../../../../icons'\n\nexport type Props = ButtonProps &\n  DataValueReadWriteComponentProps<unknown[]> & {\n    pushValue: unknown | ((value: unknown) => void)\n  }\n\nfunction PushButton(props: Props) {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { handlePush } = iterateElementContext ?? {}\n\n  const { pushValue, className, ...restProps } = props\n  const buttonProps = omitDataValueReadWriteProps(restProps)\n  const { value, handleChange, children } = useFieldProps(restProps)\n\n  if (value !== undefined && !Array.isArray(value)) {\n    throw new Error('PushButton received a non-array value')\n  }\n\n  const handleClick = useCallback(() => {\n    const newValue =\n      typeof pushValue === 'function' ? pushValue(value) : pushValue\n\n    if (handlePush) {\n      // Inside an Iterate element - make the change through the Iterate component\n      handlePush(newValue)\n      return // stop here\n    }\n\n    // If not inside an iterate, it could still manipulate a source data set through useFieldProps\n    handleChange([...(value ?? []), newValue])\n  }, [value, pushValue, handlePush, handleChange])\n\n  return (\n    <Button\n      className={classnames('dnb-forms-iterate-push-button', className)}\n      variant=\"secondary\"\n      icon={add}\n      icon_position=\"left\"\n      on_click={handleClick}\n      {...buttonProps}\n    >\n      {children}\n    </Button>\n  )\n}\n\nPushButton._supportsSpacingProps = true\nexport default PushButton\n","import { createContext } from 'react'\n\ntype ElementBlockContext = {\n  handleRemoveBlock?: () => void\n}\n\nconst ElementBlockContext = createContext<ElementBlockContext>(null)\n\nexport default ElementBlockContext\n","import React, { useCallback, useContext } from 'react'\nimport classnames from 'classnames'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/Button'\nimport IterateElementContext from '../IterateElementContext'\nimport { useFieldProps, useTranslation } from '../../hooks'\nimport ElementBlockContext from '../AnimatedContainer/ElementBlockContext'\nimport {\n  DataValueReadWriteComponentProps,\n  omitDataValueReadWriteProps,\n} from '../../types'\nimport { trash } from '../../../../icons'\n\nexport type Props = ButtonProps &\n  DataValueReadWriteComponentProps<unknown[]>\n\nfunction RemoveButton(props: Props) {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { handleRemove } = iterateElementContext ?? {}\n\n  if (!iterateElementContext) {\n    throw new Error('RemoveButton must be inside an Iterate.Array')\n  }\n\n  const { className, ...restProps } = props\n  const { children, text } = useFieldProps(restProps)\n  const buttonProps = omitDataValueReadWriteProps(restProps)\n  const translation = useTranslation().RemoveButton\n  const textContent = text || children || translation.text\n\n  const elementBlockContext = useContext(ElementBlockContext)\n  const { handleRemoveBlock } = elementBlockContext ?? {}\n\n  const handleClick = useCallback(() => {\n    if (handleRemoveBlock) {\n      handleRemoveBlock()\n    } else {\n      handleRemove()\n    }\n  }, [handleRemove, handleRemoveBlock])\n\n  return (\n    <Button\n      className={classnames(\n        'dnb-forms-iterate-remove-element-button',\n        className\n      )}\n      variant={textContent ? 'tertiary' : 'secondary'}\n      icon={trash}\n      icon_position=\"left\"\n      on_click={handleClick}\n      {...buttonProps}\n    >\n      {textContent}\n    </Button>\n  )\n}\n\nRemoveButton._supportsSpacingProps = true\nexport default RemoveButton\n","import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport { Button, Flex, FormStatus } from '../../../../components'\nimport useTranslation from '../../hooks/useTranslation'\nimport IterateElementContext from '../IterateElementContext'\nimport { check, close } from '../../../../icons'\nimport RemoveButton from '../RemoveButton'\nimport { ContainerMode } from '../Array/types'\nimport FieldBoundaryContext from '../../DataContext/FieldBoundary/FieldBoundaryContext'\n\nexport default function EditToolbarTools() {\n  const {\n    restoreOriginalValue,\n    switchContainerMode,\n    containerMode,\n    arrayValue,\n    index,\n    isNew,\n  } = useContext(IterateElementContext) || {}\n  const { hasVisibleError } = useContext(FieldBoundaryContext) || {}\n\n  const translation = useTranslation().IterateEditContainer\n  const valueBackupRef = useRef<unknown>()\n  const wasNew = useWasNew({ isNew, containerMode })\n  const [showError, setShowError] = useState(false)\n\n  useEffect(() => {\n    if (containerMode === 'edit' && !valueBackupRef.current) {\n      valueBackupRef.current = arrayValue?.[index]\n    }\n    if (containerMode === 'view') {\n      valueBackupRef.current = null\n    }\n  }, [arrayValue, containerMode, index])\n\n  const cancelHandler = useCallback(() => {\n    if (valueBackupRef.current) {\n      restoreOriginalValue?.(valueBackupRef.current)\n    }\n    setShowError(false)\n    switchContainerMode?.('view')\n  }, [restoreOriginalValue, switchContainerMode])\n  const doneHandler = useCallback(() => {\n    if (hasVisibleError) {\n      setShowError(true)\n    } else {\n      setShowError(false)\n      switchContainerMode?.('view')\n    }\n  }, [hasVisibleError, switchContainerMode])\n\n  return (\n    <>\n      <FormStatus show={showError && hasVisibleError} no_animation={false}>\n        {translation.errorInSection}\n      </FormStatus>\n      <Flex.Horizontal gap=\"large\">\n        <Button\n          variant=\"tertiary\"\n          icon={check}\n          icon_position=\"left\"\n          on_click={doneHandler}\n        >\n          {translation.doneButton}\n        </Button>\n\n        {wasNew ? (\n          <RemoveButton text={translation.removeButton} />\n        ) : (\n          <Button\n            variant=\"tertiary\"\n            icon={close}\n            icon_position=\"left\"\n            on_click={cancelHandler}\n          >\n            {translation.cancelButton}\n          </Button>\n        )}\n      </Flex.Horizontal>\n    </>\n  )\n}\n\nexport function useWasNew({\n  isNew,\n  containerMode,\n}: {\n  isNew: boolean\n  containerMode: ContainerMode\n}) {\n  const wasNewRef = useRef<unknown>(isNew)\n\n  useEffect(() => {\n    if (containerMode === 'view') {\n      wasNewRef.current = false\n    }\n  }, [isNew, containerMode])\n\n  return wasNewRef.current\n}\n","import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useReducer,\n  useRef,\n} from 'react'\nimport classnames from 'classnames'\nimport { Flex, HeightAnimation } from '../../../../components'\nimport IterateElementContext, {\n  IterateElementContextState,\n} from '../IterateElementContext'\nimport ElementBlockContext from './ElementBlockContext'\nimport FieldBoundaryContext from '../../DataContext/FieldBoundary/FieldBoundaryContext'\nimport { Props as FlexContainerProps } from '../../../../components/flex/Container'\nimport { ContainerMode } from '../Array/types'\n\nexport type ElementSectionProps = {\n  /**\n   * Defines the variant of the ViewContainer or EditContainer. Can be `outline`.\n   * Defaults to `outline`.\n   */\n  variant?: 'outline' | 'basic'\n}\n\nexport type Props = {\n  mode: ContainerMode\n  open?: boolean | undefined\n  ariaLabel?: string\n  openDelay?: number\n} & ElementSectionProps\n\nfunction ElementBlock(props: Props & FlexContainerProps) {\n  const [, forceUpdate] = useReducer(() => ({}), {})\n\n  const contextRef = useRef<\n    IterateElementContextState & {\n      hasError?: boolean\n      hasSubmitError?: boolean\n    }\n  >()\n  contextRef.current = useContext(IterateElementContext) || {}\n\n  const { hasError, hasSubmitError } =\n    useContext(FieldBoundaryContext) || {}\n  contextRef.current.hasError = hasError\n  contextRef.current.hasSubmitError = hasSubmitError\n\n  // - Set the container mode to \"edit\" if we have an error\n  if (hasSubmitError) {\n    contextRef.current.containerMode = 'edit'\n  }\n\n  const { handleRemove, switchContainerMode, containerMode, isNew } =\n    contextRef.current\n\n  const {\n    mode,\n    open,\n    ariaLabel,\n    onAnimationEnd,\n    className,\n    children,\n    openDelay = 100,\n    variant = 'outline',\n    ...restProps\n  } = props\n\n  const openRef = useRef(open ?? (containerMode === mode && !isNew))\n  const isRemoving = useRef(false)\n\n  const setOpenState = useCallback((open: boolean) => {\n    openRef.current = open\n    forceUpdate()\n  }, [])\n\n  useEffect(() => {\n    if (!isRemoving.current) {\n      // - Set the open state, if it's controlled\n      if (typeof open !== 'undefined') {\n        setOpenState(open)\n      } else {\n        // - Open the block with animation, if it's in the right mode\n        if (openRef.current !== (containerMode === mode)) {\n          if (isNew) {\n            setTimeout(() => {\n              setOpenState(containerMode === mode)\n            }, openDelay) // in order to apply the animation\n          } else {\n            setOpenState(containerMode === mode)\n          }\n        }\n      }\n    }\n  }, [containerMode, isNew, mode, open, openDelay, setOpenState])\n\n  // - Remove the block with animation, if it's in the right mode\n  const handleAnimationEnd = useCallback(\n    (state) => {\n      // - Keep the block open if we have an error\n      if (contextRef.current.hasSubmitError) {\n        switchContainerMode?.('edit')\n      }\n\n      const preventFocusOnErrorOpening = !contextRef.current.hasSubmitError\n      if (preventFocusOnErrorOpening) {\n        if (state === 'opened') {\n          contextRef.current?.elementRef?.current?.focus?.()\n        } else {\n          // Wait until the element is removed, then check if we can set focus\n          window.requestAnimationFrame(() => {\n            // try to focus on the second last element\n            try {\n              if (\n                // But not when we focus is already inside our element\n                !document.activeElement?.closest(\n                  '.dnb-forms-iterate__element'\n                )\n              ) {\n                const elements =\n                  contextRef.current?.containerRef.current.querySelectorAll<HTMLDivElement>(\n                    '.dnb-forms-iterate__element'\n                  )\n                elements[elements.length - 1].focus()\n              }\n            } catch (e) {\n              /**/\n            }\n          })\n        }\n      }\n\n      if (!openRef.current && isRemoving.current) {\n        isRemoving.current = false\n        contextRef.current?.fulfillRemove?.()\n      }\n\n      onAnimationEnd?.(state)\n    },\n    [onAnimationEnd, switchContainerMode]\n  )\n  const handleRemoveBlock = useCallback(() => {\n    isRemoving.current = true\n    handleRemove?.({ keepItems: true })\n    setOpenState(false)\n  }, [handleRemove, setOpenState])\n\n  return (\n    <ElementBlockContext.Provider value={{ handleRemoveBlock }}>\n      <HeightAnimation\n        className={classnames(\n          'dnb-forms-section-block',\n          variant && `dnb-forms-section-block--variant-${variant}`,\n          isNew && 'dnb-forms-section-block--new',\n          contextRef.current.hasSubmitError &&\n            'dnb-forms-section-block--error',\n          className\n        )}\n        open={openRef.current}\n        onAnimationEnd={handleAnimationEnd}\n        duration={450}\n        keepInDOM // Ensure fields get mounted so they will sync with the data context\n      >\n        <Flex.Stack\n          className=\"dnb-forms-section-block__inner\"\n          {...restProps}\n          element=\"section\"\n          aria-label={ariaLabel}\n        >\n          {children}\n        </Flex.Stack>\n      </HeightAnimation>\n    </ElementBlockContext.Provider>\n  )\n}\n\nElementBlock._supportsSpacingProps = true\nexport default ElementBlock\n","import React from 'react'\nimport classnames from 'classnames'\nimport { Hr } from '../../../../elements'\nimport { Flex, Space } from '../../../../components'\nimport { SpaceAllProps } from '../../../../components/Space'\n\nexport type Props = SpaceAllProps\n\nexport default function Toolbar(props: Props) {\n  const { children, className, ...rest } = props || {}\n\n  return (\n    <Space\n      top=\"medium\"\n      className={classnames('dnb-forms-iterate-toolbar', className)}\n      {...rest}\n    >\n      <Hr space={0} />\n\n      <Flex.Horizontal top=\"x-small\" gap=\"large\">\n        {children}\n      </Flex.Horizontal>\n    </Space>\n  )\n}\n\nToolbar._supportsSpacingProps = true\n","import React, { useContext, useEffect, useMemo, useRef } from 'react'\nimport classnames from 'classnames'\nimport { convertJsxToString } from '../../../../shared/component-helper'\nimport { Lead } from '../../../../elements'\nimport { Props as FlexContainerProps } from '../../../../components/flex/Container'\nimport IterateElementContext from '../IterateElementContext'\nimport EditToolbarTools from './EditToolbarTools'\nimport ElementBlock, {\n  ElementSectionProps,\n} from '../AnimatedContainer/ElementBlock'\nimport Toolbar from '../Toolbar'\n\nexport type Props = {\n  /**\n   * The title of the EditContainer.\n   */\n  title?: React.ReactNode\n\n  /**\n   * The title for a new item show within the EditContainer.\n   */\n  titleWhenNew?: React.ReactNode\n\n  /**\n   * If the EditContainer is open or not.\n   * Used internally.\n   */\n  open?: boolean\n\n  /**\n   * The toolbar to be shown in the EditContainer.\n   * Used internally.\n   */\n  toolbar?: React.ReactNode\n}\n\nexport type AllProps = Props & FlexContainerProps & ElementSectionProps\n\nexport default function EditContainer(props: AllProps) {\n  return (\n    <EditContainerWithoutToolbar\n      toolbar={\n        <Toolbar>\n          <EditToolbarTools />\n        </Toolbar>\n      }\n      {...props}\n    />\n  )\n}\n\nexport function EditContainerWithoutToolbar(\n  props: Props & FlexContainerProps & { toolbar?: React.ReactNode }\n) {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { containerMode, isNew } = iterateElementContext ?? {}\n\n  const {\n    children,\n    className,\n    title,\n    titleWhenNew,\n    toolbar,\n    ...restProps\n  } = props || {}\n\n  const wasNewRef = useRef<unknown>(isNew)\n\n  useEffect(() => {\n    if (containerMode === 'view') {\n      wasNewRef.current = false\n    }\n  }, [isNew, containerMode])\n\n  const blockTitle =\n    wasNewRef.current && titleWhenNew ? titleWhenNew : title\n  const ariaLabel = useMemo(\n    () => convertJsxToString(blockTitle),\n    [blockTitle]\n  )\n\n  return (\n    <ElementBlock\n      mode=\"edit\"\n      className={classnames('dnb-forms-section-edit-block', className)}\n      ariaLabel={ariaLabel}\n      {...restProps}\n    >\n      {blockTitle && <Lead size=\"basis\">{blockTitle}</Lead>}\n      {children}\n      {toolbar}\n    </ElementBlock>\n  )\n}\n\nEditContainer._supportsSpacingProps = true\nEditContainerWithoutToolbar._supportsSpacingProps = true\n","import React, { useCallback, useContext } from 'react'\nimport { Button, Flex } from '../../../../components'\nimport RemoveButton from '../RemoveButton'\nimport useTranslation from '../../hooks/useTranslation'\nimport IterateElementContext from '../IterateElementContext'\nimport { edit } from '../../../../icons'\n\nexport default function ViewToolbarTools() {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { switchContainerMode } = iterateElementContext ?? {}\n\n  const translation = useTranslation().IterateViewContainer\n\n  const editHandler = useCallback(() => {\n    switchContainerMode?.('edit')\n  }, [switchContainerMode])\n\n  return (\n    <Flex.Horizontal gap=\"large\">\n      <Button\n        variant=\"tertiary\"\n        icon={edit}\n        icon_position=\"left\"\n        on_click={editHandler}\n      >\n        {translation.editButton}\n      </Button>\n\n      <RemoveButton text={translation.removeButton} />\n    </Flex.Horizontal>\n  )\n}\n","import React, { useMemo } from 'react'\nimport classnames from 'classnames'\nimport { convertJsxToString } from '../../../../shared/component-helper'\nimport { Flex } from '../../../../components'\nimport { Props as FlexContainerProps } from '../../../../components/flex/Container'\nimport { Lead } from '../../../../elements'\nimport ElementBlock, {\n  ElementSectionProps,\n} from '../AnimatedContainer/ElementBlock'\nimport Toolbar from '../Toolbar'\nimport ViewToolbarTools from './ViewToolbarTools'\n\nexport type Props = {\n  /**\n   * The title of the ViewContainer.\n   */\n  title?: React.ReactNode\n}\n\nexport type AllProps = Props & FlexContainerProps & ElementSectionProps\n\nfunction ViewContainer(props: AllProps) {\n  const { children, className, title, ...restProps } = props || {}\n  const ariaLabel = useMemo(() => convertJsxToString(title), [title])\n\n  return (\n    <ElementBlock\n      mode=\"view\"\n      ariaLabel={ariaLabel}\n      className={classnames('dnb-forms-section-view-block', className)}\n      {...restProps}\n    >\n      <Flex.Stack>\n        {title && <Lead size=\"basis\">{title}</Lead>}\n        {children}\n        <Toolbar>\n          <ViewToolbarTools />\n        </Toolbar>\n      </Flex.Stack>\n    </ElementBlock>\n  )\n}\n\nViewContainer._supportsSpacingProps = true\nexport default ViewContainer\n","import React, { useContext } from 'react'\nimport IterateElementContext from '../IterateElementContext'\nimport { EditContainerWithoutToolbar, AllProps } from '../EditContainer'\n\nfunction AnimatedContainer(props: AllProps) {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { isNew } = iterateElementContext ?? {}\n\n  return (\n    <EditContainerWithoutToolbar\n      open={!isNew ? true : undefined}\n      {...props}\n    />\n  )\n}\n\nAnimatedContainer._supportsSpacingProps = true\nexport default AnimatedContainer\n","import { useCallback } from 'react'\nimport pointer from 'json-pointer'\nimport { Identifier, Path } from '../../types'\nimport { useData, getData } from '../../Form'\n\nexport type Props = {\n  /**\n   * The path (JSON Pointer) to the array or object to count.\n   */\n  path: Path\n\n  /**\n   * A Form.Handler or DataContext `id` for when called outside of the context.\n   */\n  id?: Identifier\n\n  /**\n   * A filter function to filter the data before counting.\n   */\n  filter?: (item: unknown) => boolean\n}\n\nexport function Count(props: Props) {\n  const { data } = useData(props.id)\n  return countData(data, props)\n}\n\nfunction countData(data: unknown, { path, filter }: Props) {\n  if (pointer.has(data, path)) {\n    const value = pointer.get(data, path)\n    if (Array.isArray(value)) {\n      return filter ? value.filter(filter).length : value.length\n    } else if (typeof value === 'object' && value) {\n      return filter\n        ? Object.entries(value).filter(filter).length\n        : Object.keys(value).length\n    }\n  }\n\n  return NaN\n}\n\nexport function count(props: Props) {\n  const { data } = getData(props.id)\n  return countData(data, props)\n}\n\nexport function useCount(id: Identifier = undefined) {\n  const { data } = useData(id)\n\n  const count = useCallback(\n    (path: Props['path'], filter?: Props['filter']) => {\n      return countData(data, { path, filter })\n    },\n    [data]\n  )\n\n  return { count }\n}\n","import PushButton from './PushButton'\nimport RemoveButton from './RemoveButton'\n\nexport { default as Array } from './Array'\nexport { default as PushButton } from './PushButton'\nexport { default as RemoveButton } from './RemoveButton'\nexport { default as EditContainer } from './EditContainer'\nexport { default as ViewContainer } from './ViewContainer'\nexport { default as AnimatedContainer } from './AnimatedContainer'\nexport { default as Toolbar } from './Toolbar'\nexport { useCount, count, Count } from './Count'\nexport { default as IterateElementContext } from './IterateElementContext'\n\n/**\n * Deprecated and will be removed in v11\n *\n * @deprecated use \"PushButton\" instead\n */\nexport const ArrayPushButton = PushButton\n\n/**\n * Deprecated and will be removed in v11\n *\n * @deprecated use \"RemoveButton\" instead\n */\nexport const ArrayRemoveElementButton = RemoveButton\n"],"names":["ArrayComponent","props","_props$value","salt","forceUpdate","useReducer","summaryListContext","useContext","SummaryListContext","valueBlockContext","ValueBlockContext","getValue","useDataValue","preparedProps","useMemo","path","countPath","countPathLimit","Infinity","countPathTransform","arrayValue","countValue","parseFloat","length","newValue","i","l","value","push","index","withoutFlex","emptyValue","placeholder","handleChange","onChange","children","useFieldProps","idsRef","useRef","isNewRef","modesRef","valueWhileClosingRef","valueCountRef","containerRef","hadPushRef","innerRefs","omitFlex","useEffect","current","elementData","_ref","map","_valueCountRef$curren","id","makeUniqueId","hasNewItems","isNew","containerMode","switchContainerMode","mode","_isNewRef$current","newArrayValue","structuredClone","pointer","handlePush","element","concat","_toConsumableArray","handleRemove","_temp","keepItems","splice","fulfillRemove","_modesRef$current","_isNewRef$current2","findIndex","indexOf","restoreOriginalValue","last","flexProps","className","classnames","pickFlexContainerProps","pickSpacingProps","innerRef","WrapperElement","Fragment","Flex","_jsx","elementProps","elementRef","createRef","renderChildren","elementChild","contextValue","content","Array","isArray","child","IterateElementContext","Provider","FieldBoundaryProvider","tabIndex","_supportsSpacingProps","PushButton","iterateElementContext","pushValue","restProps","buttonProps","omitDataValueReadWriteProps","undefined","Error","handleClick","useCallback","Button","variant","icon","add","icon_position","on_click","createContext","RemoveButton","text","translation","useTranslation","textContent","elementBlockContext","ElementBlockContext","handleRemoveBlock","trash","EditToolbarTools","hasVisibleError","FieldBoundaryContext","IterateEditContainer","valueBackupRef","wasNew","wasNewRef","useWasNew","showError","setShowError","useState","cancelHandler","doneHandler","_jsxs","_Fragment","FormStatus","show","no_animation","errorInSection","gap","check","doneButton","removeButton","close","cancelButton","ElementBlock","contextRef","hasError","hasSubmitError","open","ariaLabel","onAnimationEnd","openDelay","openRef","isRemoving","setOpenState","setTimeout","handleAnimationEnd","state","_contextRef$current","_contextRef$current$e","_contextRef$current$e2","_contextRef$current$e3","_contextRef$current3","_contextRef$current3$","focus","call","window","requestAnimationFrame","_document$activeEleme","document","activeElement","closest","_contextRef$current2","elements","querySelectorAll","e","HeightAnimation","duration","keepInDOM","Toolbar","rest","Space","top","Hr","space","EditContainer","EditContainerWithoutToolbar","toolbar","title","titleWhenNew","blockTitle","convertJsxToString","Lead","size","ViewToolbarTools","IterateViewContainer","editHandler","edit","editButton","ViewContainer","AnimatedContainer","Count","data","useData","countData","filter","Object","entries","keys","NaN","count","getData","useCount","ArrayPushButton","ArrayRemoveElementButton"],"sourceRoot":""}