{"version":3,"file":"aa713f2760519224770d6078664fec62dfe632b8-fa7b69c62736ce3f32b3.js","mappings":"0PAeA,MAAMA,GAASC,EAAAA,EAAAA,GAAA,OAAAC,OAAA,YAAAD,CAAA,wFAOQE,GAAUA,EAAMC,OAAS,UAAQ,2HAU3CC,EAA2BA,KAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,yCAAAC,SAAA,gMAc3BC,EAAgCA,KAAAH,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAG,UAAA,EAAAF,SAAA,iNAchCG,EAA4BA,KAAAL,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAK,MAAA,CACzCZ,aACAQ,SAAA,oVAiBMK,EAAa,GACnB,IAAK,IAAIC,EAAI,EAAGA,GAAK,IAAKA,IACxBD,EAAWE,KAAK,CAAEC,IAAKF,EAAGG,KAAMC,OAAOJ,GAAIK,UAAU,IC7EvD,SAASC,EAAkBjB,GACzB,MAAMkB,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,EAAG,MACFC,EAAAA,EAAAA,MAAsBzB,EAAM0B,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBvB,SAAU,EAACwB,EAAAA,EAAAA,KAAKX,EAAYG,GAAI,CAC9BhB,SAAU,UACR,MAAMwB,EAAAA,EAAAA,KAAKX,EAAYI,GAAI,CAC7BjB,SAAU,uBACR,MAAMwB,EAAAA,EAAAA,KAAK3B,EAA0B,CAAC,GAAI,MAAM2B,EAAAA,EAAAA,KAAKX,EAAYK,EAAG,CACtElB,SAAU,yEACR,MAAMwB,EAAAA,EAAAA,KAAKvB,EAA+B,CAAC,GAAI,MAAMuB,EAAAA,EAAAA,KAAKX,EAAYI,GAAI,CAC5EjB,SAAU,0CACR,MAAMwB,EAAAA,EAAAA,KAAKX,EAAYK,EAAG,CAC5BlB,SAAU,qGACR,MAAMwB,EAAAA,EAAAA,KAAKrB,EAA2B,CAAC,GAAI,MAAMqB,EAAAA,EAAAA,KAAKX,EAAYI,GAAI,CACxEjB,SAAU,4BACR,MAAMsB,EAAAA,EAAAA,MAAMT,EAAYK,EAAG,CAC7BlB,SAAU,CAAC,cAAcwB,EAAAA,EAAAA,KAAKX,EAAYM,EAAG,CAC3CM,KAAM,iDACNzB,SAAU,oCACR,SAGV,CAOA,MANA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAO+B,QAASC,GAAab,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBzB,EAAM0B,YAC3E,OAAOM,GAAYH,EAAAA,EAAAA,KAAKG,EAAWb,OAAOC,OAAO,CAAC,EAAGpB,EAAO,CAC1DK,UAAUwB,EAAAA,EAAAA,KAAKZ,EAAmBjB,MAC9BiB,EAAkBjB,EAC1B,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/pagination/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/pagination/demos.mdx"],"sourcesContent":["/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport styled from '@emotion/styled'\n\nimport { P, Pagination, Table, Button } from '@dnb/eufemia/src'\nimport { hasSelectedText } from '@dnb/eufemia/src/shared/helpers'\n\nimport { createPagination } from '@dnb/eufemia/src/components/pagination/Pagination'\n\nconst LargePage = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  height: 15vw;\n\n  background-color: ${(props) => props.color || 'tomato'};\n  font-size: 15vw;\n  font-weight: var(--font-weight-bold);\n  font-feature-settings:\n    'pnum' on,\n    'lnum' on;\n\n  color: var(--color-white);\n`\n\nexport const PaginationExampleDefault = () => (\n  <ComponentBox data-visual-test=\"pagination-default\">\n    <Pagination\n      page_count={888}\n      current_page={4}\n      on_change={({ pageNumber }) => {\n        console.log('on_change:', pageNumber)\n      }}\n    >\n      <P>Current Page Content</P>\n    </Pagination>\n  </ComponentBox>\n)\n\nexport const PaginationExampleWithCallback = () => (\n  <ComponentBox hideCode>\n    <Pagination\n      page_count={5}\n      startup_page={3}\n      on_change={({ pageNumber }) => {\n        console.log('on_change:', pageNumber)\n      }}\n    >\n      {({ pageNumber }) => <P>Page {pageNumber}</P>}\n    </Pagination>\n  </ComponentBox>\n)\n\nexport const PaginationExampleCentered = () => (\n  <ComponentBox scope={{ LargePage }}>\n    <Pagination align=\"center\" page_count={30}>\n      {({ pageNumber, setContent }) => {\n        // simulate server communication delay\n        const timeout = setTimeout(\n          () => {\n            setContent(pageNumber, <LargePage>{pageNumber}</LargePage>)\n          },\n          Math.ceil(Math.random() * 500),\n        )\n\n        return () => clearTimeout(timeout)\n      }}\n    </Pagination>\n  </ComponentBox>\n)\n\n// create our items\nconst tableItems = []\nfor (let i = 1; i <= 300; i++) {\n  tableItems.push({ ssn: i, text: String(i), expanded: false })\n}\n\nexport const InfinityPaginationTable = ({ tableItems, ...props }) => {\n  const startupPage = 3 // what we start with\n  const perPageCount = 10 // how many items per page\n  const maxPagesCount = Math.floor(tableItems?.length / perPageCount)\n\n  // create our Pagination instance\n  const [\n    { Pagination, setContent, resetContent, resetInfinity, endInfinity },\n  ] = React.useState(createPagination)\n  const [orderDirection, setOrderDirection] = React.useState('asc')\n  const [currentPage, setLocalPage] = React.useState(null)\n  const [cacheHash, forceRerender] = React.useState(null) // eslint-disable-line\n\n  React.useEffect(() => {\n    // Could also be set as \"startup_page\" in <Pagination startup_page={startupPage} ...>\n    setLocalPage(startupPage)\n  }, [])\n\n  // ascending / descending\n  tableItems = reorderDirection(tableItems, orderDirection)\n\n  const onToggleExpanded = (\n    { ssn: _ssn },\n    { pageNumber, element = null, onExpanded = null },\n  ) => {\n    const index = tableItems.findIndex(({ ssn }) => ssn === _ssn)\n    if (index > -1) {\n      const item = tableItems[index]\n\n      // update only the current item\n      tableItems[index] = {\n        ...item,\n        expanded: !item.expanded,\n      }\n\n      // define what page should update\n      // used to update the page inside the Pagination Component\n      setLocalPage(pageNumber)\n\n      // force re-render of this component\n      forceRerender(new Date().getTime())\n\n      // set new height\n      if (element) {\n        setHeight({ element, expanded: !item.expanded })\n      }\n\n      setTimeout(onExpanded, 10)\n    }\n  }\n  // set the startup height\n  const onMounted = (items) => {\n    items.forEach(({ element: { current: element }, expanded }) =>\n      setHeight({ element, expanded, animation: false }),\n    )\n  }\n\n  // This limits the items to perPageCount\n  const content = (\n    <InfinityPagination\n      items={tableItems}\n      perPageCount={perPageCount}\n      currentPage={currentPage}\n      onToggleExpanded={onToggleExpanded}\n      onMounted={onMounted}\n      endInfinity={endInfinity}\n    />\n  )\n\n  setContent(currentPage, content)\n  let serverDelayTimeout\n  React.useEffect(() => () => clearTimeout(serverDelayTimeout))\n\n  const action = ({ pageNumber }) => {\n    console.log('on_change: with page', pageNumber)\n\n    // simulate server delay\n    clearTimeout(serverDelayTimeout)\n    serverDelayTimeout = setTimeout(\n      () => {\n        if (pageNumber === currentPage) {\n          // once we set current page, we force a re-render, and sync of data\n          // but only if we are on the same page\n          forceRerender(new Date().getTime())\n        } else {\n          setLocalPage(pageNumber)\n        }\n      },\n      Math.ceil(Math.random() * 1e3),\n    ) // simulate random delay\n  }\n\n  return (\n    <StyledTable sticky>\n      <thead>\n        <tr>\n          <th scope=\"col\">\n            <Button\n              size=\"small\"\n              icon=\"reset\"\n              icon_position=\"left\"\n              variant=\"secondary\"\n              on_click={() => {\n                clearTimeout(serverDelayTimeout) // stop the server delay simulation\n\n                resetInfinity()\n                resetContent()\n\n                // re-render our component to get back the default state\n                setOrderDirection('asc')\n\n                // re-render our component to get back the default state\n                forceRerender(new Date().getTime())\n              }}\n            >\n              Reset everything\n            </Button>\n          </th>\n          <th\n            scope=\"col\"\n            className={`dnb-table--sortable dnb-table--active ${\n              orderDirection === 'desc' ? ' dnb-table--reversed' : ''\n            }`}\n          >\n            <Button\n              variant=\"tertiary\"\n              icon=\"arrow-down\"\n              text=\"Sortable\"\n              title=\"Sort table row\"\n              on_click={() => {\n                // 1. empty\n                resetContent()\n\n                setOrderDirection((o) => (o === 'asc' ? 'desc' : 'asc'))\n              }}\n            />\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <Pagination\n          mode=\"infinity\"\n          // use_load_button // disables infinity scroller, but will add a button to do so\n          marker_element=\"tr\"\n          fallback_element={({ className, ...props }) => (\n            <TableRow className={className}>\n              <TableData colSpan={2} {...props} />\n            </TableRow>\n          )} // in order to show the injected \"indicator\" and \"load button\" in the middle of the orw\n          current_page={currentPage}\n          page_count={maxPagesCount}\n          {...props}\n          on_startup={action}\n          on_change={action}\n        />\n      </tbody>\n    </StyledTable>\n  )\n}\nInfinityPaginationTable.propTypes = {\n  tableItems: PropTypes.array.isRequired,\n}\n\nconst InfinityPagination = ({\n  children = null,\n  items,\n  currentPage,\n  perPageCount,\n  onToggleExpanded,\n  onMounted,\n  endInfinity,\n  ...props\n}) => {\n  const mountedItems = []\n  if (onMounted) {\n    React.useEffect(() => onMounted && onMounted(mountedItems), []) // eslint-disable-line\n  }\n\n  items = items.filter((cur, idx) => {\n    const floor = (currentPage - 1) * perPageCount\n    const ceil = floor + perPageCount\n    return idx >= floor && idx < ceil\n  })\n\n  if (items.length === 0) {\n    endInfinity()\n    return null\n  }\n\n  return items.map((item, i) => {\n    const params = {\n      onClick: (e) => {\n        if (\n          !hasSelectedText() ||\n          /button/.test(document.activeElement.tagName)\n        ) {\n          let element = e.currentTarget\n          onToggleExpanded(item, {\n            pageNumber: currentPage,\n            // element,\n            onExpanded: () => {\n              try {\n                // rather find the next tr\n                element = element.nextElementSibling\n                setHeight({ element, expanded: !item.expanded })\n                element.focus() // for better ally we set the focus to the new content\n              } catch (e) {\n                //\n              }\n            },\n          })\n        }\n      },\n    }\n\n    // we do this only to have a working useEffect, so we can call onMounted\n    const trRef = React.createRef<HTMLTableRowElement>()\n    mountedItems.push({ ...item, element: trRef })\n\n    return (\n      <React.Fragment key={item.ssn}>\n        <TableRow\n          {...props}\n          {...params}\n          className={`dnb-table--${i % 2 ? 'even' : 'odd'} ${\n            item.expanded ? 'expanded' : ''\n          }`}\n          ref={trRef}\n        >\n          <TableData>\n            {/* The button \"bubbles\" the event just down */}\n            <Button\n              title={item.expanded ? 'Hide details' : 'Show more details'}\n              icon=\"chevron_down\"\n              size=\"small\"\n              right=\"large\"\n            />\n          </TableData>\n          <TableData>\n            <P>\n              {item.text} {children}\n            </P>\n          </TableData>\n        </TableRow>\n\n        <TableRow\n          className={`expanded-content dnb-no-focus ${\n            item.expanded ? 'expanded' : ''\n          }`}\n          tabIndex={-1}\n        >\n          <TableData colSpan={2}>\n            {item.expanded && (\n              <div className=\"expanded-content__outer\">\n                <div className=\"expanded-content__inner\">\n                  <P>What ever content ...</P>\n                  <Button variant=\"secondary\" top>\n                    {'🔥'}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </TableData>\n        </TableRow>\n      </React.Fragment>\n    )\n  })\n}\n\nconst StyledTable = styled(Table)`\n  table-layout: fixed;\n`\n\nconst TableRow = styled.tr`\n  &:not(.expanded-content):hover {\n    cursor: pointer;\n    opacity: 0.8;\n  }\n\n  .dnb-icon {\n    transition: transform 300ms ease-out;\n  }\n  &.expanded {\n    .dnb-icon {\n      transform: rotate(-180deg);\n    }\n  }\n\n  &.expanded-content {\n    /*\n      This is our expanded height (maxHeight)\n      NB: we can use max-height, because max-height is not supported in tr\n    */\n    max-height: 10rem;\n\n    transform: translateY(-10px);\n    opacity: 0;\n\n    transition:\n      height 400ms ease-out,\n      opacity 600ms ease-out,\n      transform 400ms ease-out;\n\n    td {\n      height: inherit;\n      padding: 0;\n      background-color: var(--color-white);\n\n      .expanded-content__outer {\n        height: inherit;\n      }\n\n      /* If we don't wrap with an additional inner, then we get a jump in the animation */\n      .expanded-content__inner {\n        height: inherit;\n        padding: 2rem 0 2rem 3rem;\n\n        background-color: tomato;\n      }\n    }\n  }\n  &.expanded.expanded-content {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`\n\nconst TableData = styled.td`\n  .dnb-pagination__loadbar {\n    justify-content: flex-start;\n  }\n  .dnb-pagination__indicator,\n  .dnb-pagination__loadbar {\n    height: 6rem;\n  }\n\n  .dnb-p {\n    cursor: text;\n\n    font-feature-settings:\n      'pnum' on,\n      'lnum' on;\n    font-weight: var(--font-weight-bold);\n    font-size: var(--font-size-large);\n\n    /** reset css specificity */\n    .dnb-spacing &.dnb-h--large:not([class*='space__bottom']),\n    .dnb-core-style\n      .dnb-spacing\n      &.dnb-h--large:not([class*='space__bottom']) {\n      margin: 0;\n    }\n  }\n`\n\nconst setHeight = ({ element, expanded = false, animation = true }) => {\n  if (\n    element &&\n    typeof window !== 'undefined' &&\n    window.requestAnimationFrame\n  ) {\n    // get tr element\n    if (String(element.nodeName).toLowerCase() === 'td') {\n      element = element.parentElement\n    }\n\n    // get the new height\n    const newHeight = expanded\n      ? window.getComputedStyle(element)['max-height'] // maxHeight\n      : element.scrollHeight\n\n    // make the animation\n    window.requestAnimationFrame(() => {\n      if (animation) {\n        element.style.height = '1px'\n      }\n      window.requestAnimationFrame(\n        () => (element.style.height = newHeight),\n      )\n    })\n  }\n}\n\nconst reorderDirection = (items, dir) =>\n  items.sort(({ text: A }, { text: B }) => {\n    const a = parseFloat(A)\n    const b = parseFloat(B)\n    return (dir === 'asc' ? a > b : a < b) ? 1 : -1\n  })\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {PaginationExampleDefault, PaginationExampleWithCallback, PaginationExampleCentered} from 'Docs/uilib/components/pagination/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Default pagination\"\n    }), \"\\n\", _jsx(PaginationExampleDefault, {}), \"\\n\", _jsx(_components.p, {\n      children: \"If you need to access methods provided by the render prop arguments.\"\n    }), \"\\n\", _jsx(PaginationExampleWithCallback, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Centered Pagination with random delay\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Note that we keep the height of the previous page. All pages can for sure have their own height.\"\n    }), \"\\n\", _jsx(PaginationExampleCentered, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Infinity scroller demos\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Check out \", _jsx(_components.a, {\n        href: \"/uilib/components/pagination/infinity-scroller\",\n        children: \"demos for the Infinity Scroller\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["LargePage","_styled","target","props","color","PaginationExampleDefault","_jsx2","ComponentBox","children","PaginationExampleWithCallback","hideCode","PaginationExampleCentered","scope","tableItems","i","push","ssn","text","String","expanded","_createMdxContent","_components","Object","assign","h2","h3","p","a","_provideComponents","components","_jsxs","_Fragment","_jsx","href","wrapper","MDXLayout"],"sourceRoot":""}