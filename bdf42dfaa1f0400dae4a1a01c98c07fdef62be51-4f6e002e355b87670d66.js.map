{"version":3,"file":"bdf42dfaa1f0400dae4a1a01c98c07fdef62be51-4f6e002e355b87670d66.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/AccordionProviderContext.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/defaultProps.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/AccordionGroup.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/AccordionContext.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/AccordionHeader.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/AccordionContent.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/AccordionStore.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/Accordion.tsx"],"sourcesContent":["/**\n * Web AccordionGroup Context\n *\n */\n\nimport React from 'react'\n\ntype AccordionGroupContextProps = {\n  expanded?: boolean\n  group?: string\n  expanded_ssr?: boolean\n  remember_state?: boolean\n  flush_remembered_state?: boolean\n  expanded_id?: string\n  onChange?: (...params: unknown[]) => void\n  onInit?: (...args: any[]) => any\n}\n\nconst AccordionGroupContext =\n  React.createContext<AccordionGroupContextProps>({})\n\nexport default AccordionGroupContext\n","import { AccordionProps, GroupProps } from './Accordion'\n\nexport const accordionDefaultProps: AccordionProps & GroupProps = {\n  variant: 'outlined',\n  icon_size: 'medium',\n} as const\n","/**\n * Web AccordionGroup Component\n *\n */\n\nimport React, { useContext } from 'react'\n\nimport classnames from 'classnames'\nimport {\n  isTrue,\n  makeUniqueId,\n  extendPropsWithContext,\n  validateDOMAttributes,\n  dispatchCustomElementEvent,\n} from '../../shared/component-helper'\nimport { createSpacingClasses } from '../space/SpacingHelper'\n\nimport Context from '../../shared/Context'\nimport AccordionGroupContext from './AccordionProviderContext'\n\nimport type { GroupProps } from './Accordion'\nimport { accordionDefaultProps } from './defaultProps'\n\nexport type AccordionGroupProps = React.HTMLProps<HTMLElement> &\n  GroupProps & {\n    onInit?: (...args: any[]) => any\n  }\n\nconst AccordionGroup = (props: AccordionGroupProps) => {\n  const context = useContext(Context)\n  const id = props.id || makeUniqueId()\n\n  const thisInstance = {\n    _id: id,\n    props,\n    context,\n    onChangeHandler,\n  }\n\n  function onChangeHandler(event) {\n    dispatchCustomElementEvent(thisInstance, 'on_change', {\n      id: event.id,\n      expanded: event.expanded,\n      event,\n    })\n  }\n\n  // use only the props from context, who are available here anyway\n  const extendedProps = extendPropsWithContext(\n    props,\n    accordionDefaultProps,\n    context.Accordion,\n    context.getTranslation(props)['Accordion']\n  )\n\n  const {\n    expanded, // eslint-disable-line\n    expanded_id, // eslint-disable-line\n    prerender, // eslint-disable-line\n    prevent_rerender, // eslint-disable-line\n    single_container, // eslint-disable-line\n    contentRef, // eslint-disable-line\n    allow_close_all, // eslint-disable-line\n    remember_state, // eslint-disable-line\n    flush_remembered_state, // eslint-disable-line\n    disabled, // eslint-disable-line\n    group, // eslint-disable-line\n    onInit, // eslint-disable-line\n    className,\n\n    id: _id, // eslint-disable-line\n    children, // eslint-disable-line\n\n    ...restOfExtendedProps\n  } = extendedProps\n\n  const classes = classnames(\n    'dnb-accordion-group',\n    isTrue(single_container) && 'dnb-accordion-group--single-container',\n    createSpacingClasses(extendedProps),\n    className\n  )\n\n  const params = {\n    ...restOfExtendedProps,\n  }\n\n  // also used for code markup simulation\n  validateDOMAttributes(props, params)\n\n  if (!extendedProps?.group && isTrue(props.single_container)) {\n    extendedProps.group = makeUniqueId()\n  }\n\n  const contextForProvider = {\n    ...extendedProps,\n    id,\n    onChange: onChangeHandler,\n  }\n\n  return (\n    <AccordionGroupContext.Provider value={contextForProvider}>\n      <div className={classes}>\n        <span\n          id={id}\n          className=\"dnb-accordion-group__shell\"\n          role=\"group\"\n          {...params}\n        >\n          <span className=\"dnb-accordion-group__children\">{children}</span>\n        </span>\n      </div>\n    </AccordionGroupContext.Provider>\n  )\n}\n\nAccordionGroup._supportsSpacingProps = true\n\nexport default AccordionGroup\n","/**\n * Web AccordionGroup Context\n *\n */\n\nimport React from 'react'\nimport { SkeletonContextProps } from '../skeleton/SkeletonHelper'\nimport { AccordionProps } from './Accordion'\n\nexport type AccordionContextProps = AccordionProps &\n  SkeletonContextProps & {\n    allow_close_all?: boolean\n    callOnChange?: (parameters: {\n      id: string\n      group: string\n      expanded: boolean\n      event:\n        | React.MouseEvent<HTMLElement>\n        | React.KeyboardEvent<HTMLElement>\n    }) => void\n  }\n\nconst AccordionContext = React.createContext<AccordionContextProps>({})\n\nexport default AccordionContext\n","/**\n * Web Accordion Component\n *\n */\n\nimport React, { HTMLProps, useContext, useState } from 'react'\nimport type { SpacingProps } from '../space/types'\n\nimport {\n  validateDOMAttributes,\n  extendPropsWithContext,\n} from '../../shared/component-helper'\nimport IconPrimary from '../icon-primary/IconPrimary'\nimport classnames from 'classnames'\nimport AccordionContext from './AccordionContext'\nimport { createSpacingClasses } from '../space/SpacingHelper'\nimport {\n  skeletonDOMAttributes,\n  createSkeletonClass,\n} from '../skeleton/SkeletonHelper'\n\nimport type { HeadingLevel } from '../Heading'\nimport type { IconSize } from '../Icon'\nimport type { SkeletonShow } from '../Skeleton'\nimport type {\n  AccordionIcon,\n  AccordionIconPosition,\n  AccordionVariant,\n} from './Accordion'\n\nexport type AccordionHeaderTitleProps = SpacingProps & {\n  children?: React.ReactNode\n}\n\nfunction AccordionHeaderTitle({\n  children = null,\n  ...rest\n}: AccordionHeaderTitleProps) {\n  return (\n    <span\n      className={classnames(\n        'dnb-accordion__header__title',\n        createSpacingClasses(rest)\n      )}\n    >\n      {children}\n    </span>\n  )\n}\n\nexport type AccordionHeaderDescriptionProps = SpacingProps & {\n  children?: React.ReactNode\n}\n\nfunction AccordionHeaderDescription({\n  children = null,\n  ...rest\n}: AccordionHeaderDescriptionProps) {\n  return children ? (\n    <span\n      className={classnames(\n        'dnb-accordion__header__description',\n        createSpacingClasses(rest)\n      )}\n    >\n      {children}\n    </span>\n  ) : null\n}\n\nexport type AccordionHeaderContainerProps = SpacingProps & {\n  children?: React.ReactNode\n}\n\nfunction AccordionHeaderContainer({\n  children = null,\n  ...rest\n}: AccordionHeaderContainerProps) {\n  return children ? (\n    <span\n      className={classnames(\n        'dnb-accordion__header__container',\n        createSpacingClasses(rest)\n      )}\n    >\n      {children}\n    </span>\n  ) : null\n}\n\ntype AccordionHeaderIconIcon =\n  | React.ReactNode\n  | ((...args: any[]) => React.ReactNode)\n  | {\n      closed?: React.ReactNode | ((...args: any[]) => React.ReactNode)\n      expanded?: React.ReactNode | ((...args: any[]) => React.ReactNode)\n    }\n\nexport type AccordionHeaderIconProps = {\n  icon?: AccordionHeaderIconIcon\n  size?: IconSize\n  expanded?: boolean\n  icon_position?: AccordionIconPosition\n}\n\nfunction AccordionHeaderIcon({\n  icon,\n  expanded,\n  size = 'medium',\n  icon_position,\n}: AccordionHeaderIconProps) {\n  return (\n    <span\n      className={classnames(\n        'dnb-accordion__header__icon',\n        icon_position && `dnb-accordion__header__icon--${icon_position}`\n      )}\n    >\n      <IconPrimary\n        size={size}\n        // There has to be a better way than to do so much casting\n        icon={\n          icon &&\n          typeof icon === 'object' &&\n          'expanded' in icon &&\n          typeof icon?.expanded !== 'undefined'\n            ? icon[expanded ? 'expanded' : 'closed']\n            : (icon as React.ReactNode | ((...args: any[]) => any)) ||\n              'chevron-down'\n        }\n        aria-hidden\n      />\n    </span>\n  )\n}\n\nexport type AccordionHeaderTitle =\n  | string\n  | React.ReactNode\n  | ((...args: any[]) => any)\nexport type AccordionHeaderDescription =\n  | string\n  | React.ReactNode\n  | ((...args: any[]) => any)\nexport type AccordionHeaderLeftComponent =\n  | string\n  | React.ReactNode\n  | ((...args: any[]) => any)\nexport type AccordionHeaderElement =\n  | string\n  | React.ReactNode\n  | ((...args: any[]) => any)\nexport type AccordionHeaderHeading =\n  | boolean\n  | string\n  | React.ReactNode\n  | ((...args: any[]) => any)\nexport type AccordionHeaderIcon =\n  | React.ReactNode\n  | ((...args: any[]) => any)\n  | {\n      closed?: React.ReactNode | ((...args: any[]) => any)\n      expanded?: React.ReactNode | ((...args: any[]) => any)\n    }\n\nexport type AccordionHeaderProps = React.HTMLProps<HTMLElement> &\n  SpacingProps & {\n    title?: AccordionHeaderTitle\n    expanded?: boolean\n    description?: AccordionHeaderDescription\n    left_component?: AccordionHeaderLeftComponent\n    element?: AccordionHeaderElement\n    heading?: AccordionHeaderHeading\n    heading_level?: HeadingLevel\n    icon?: AccordionIcon\n    icon_position?: AccordionIconPosition\n    icon_size?: IconSize\n    disabled?: boolean\n    skeleton?: SkeletonShow\n    no_animation?: boolean\n    className?: string\n    children?: string | React.ReactNode | ((...args: any[]) => any)\n    variant?: AccordionVariant\n  }\n\nconst accordionHeaderDefaultProps = {\n  icon_size: 'medium',\n}\n\nexport const AccordionHeader = ({\n  icon_size: icon_size_default = 'medium',\n  ...restOfProps\n}: AccordionHeaderProps) => {\n  const props = { icon_size: icon_size_default, ...restOfProps }\n\n  const [isHovering, setIsHovering] = useState<boolean>(false)\n  const [hasClicked, setHasClicked] = useState<boolean>(false)\n\n  const context = useContext(AccordionContext)\n\n  function onKeyDownHandler(event: React.KeyboardEvent<HTMLElement>) {\n    const keyPressed = event.key\n\n    if (keyPressed === 'Enter' || keyPressed === ' ') {\n      event.preventDefault()\n      onClickHandler(event)\n    }\n  }\n\n  function onClickHandler(\n    event: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>\n  ) {\n    const { id, group } = context\n\n    if (canClick()) {\n      const expanded = !context.expanded\n      context.callOnChange({ id, group, expanded, event })\n\n      setHasClicked(true)\n    }\n  }\n\n  function onMouseOverHandler() {\n    setIsHovering(true)\n  }\n\n  function onMouseOutHandler() {\n    setIsHovering(false)\n    setHasClicked(false)\n  }\n\n  function canClick() {\n    const { expanded, allow_close_all, group } = context\n    return !group || (group && !expanded) || allow_close_all\n  }\n\n  const extendedProps = extendPropsWithContext(\n    props,\n    accordionHeaderDefaultProps,\n    context as Record<string, unknown>\n  )\n\n  const {\n    id,\n\n    // 1. these props should be the same as ...\n    left_component,\n    expanded, // eslint-disable-line\n    title,\n    description,\n    element,\n    heading,\n    heading_level,\n    icon,\n    icon_size,\n    disabled,\n    skeleton,\n    no_animation,\n    variant,\n  } = extendedProps\n\n  let { icon_position } = extendedProps\n\n  const {\n    children,\n    className,\n\n    // 2. ... these\n    left_component: _left_component, // eslint-disable-line\n    expanded: _expanded, // eslint-disable-line\n    title: _title, // eslint-disable-line\n    description: _description, // eslint-disable-line\n    icon: _icon, // eslint-disable-line\n    icon_size: _icon_size, // eslint-disable-line\n    disabled: _disabled, // eslint-disable-line\n\n    ...rest\n  } = props\n\n  const defaultParts = [\n    <AccordionHeaderIcon\n      key=\"icon\"\n      icon={icon}\n      size={icon_size}\n      expanded={context.expanded}\n      icon_position={icon_position}\n    />,\n    <AccordionHeaderContainer key=\"container\">\n      {left_component as React.ReactNode}\n    </AccordionHeaderContainer>,\n    <AccordionHeaderTitle key=\"title\">\n      {title ||\n        (Array.isArray(children)\n          ? children.filter((cur) => !React.isValidElement(cur))\n          : children)}\n    </AccordionHeaderTitle>,\n    <AccordionHeaderDescription key=\"description\">\n      {description as React.ReactNode}\n    </AccordionHeaderDescription>,\n  ]\n\n  if (Array.isArray(children)) {\n    const removeParts = []\n    children.forEach((cur) => {\n      if (React.isValidElement(cur)) {\n        const part = defaultParts.find((c) => c.type === cur.type)\n        if (part) {\n          removeParts.push(part)\n        }\n\n        // if (cur.type === AccordionHeaderTitle) {\n        //   defaultParts.unshift(cur)\n        // } else {\n        //   defaultParts.push(cur)\n        // }\n\n        defaultParts.push(cur)\n      }\n    })\n    removeParts.forEach((part) => {\n      const index = defaultParts.findIndex((c) => c === part)\n      if (index > -1) {\n        defaultParts.splice(index, 1)\n      }\n    })\n  }\n\n  const partsToRender = []\n  const wrapperParts = []\n  const wrapperComp = (\n    <span className=\"dnb-accordion__header__wrapper\" key=\"wrapper\">\n      {wrapperParts}\n    </span>\n  )\n\n  defaultParts.forEach((part) => {\n    if (\n      React.isValidElement(part) &&\n      (part.type === AccordionHeaderTitle ||\n        part.type === AccordionHeaderDescription)\n    ) {\n      wrapperParts.push(part)\n      if (partsToRender.findIndex((c) => c === wrapperComp) === -1) {\n        partsToRender.push(wrapperComp)\n      }\n    } else {\n      partsToRender.push(part)\n    }\n  })\n\n  // position the icon to the right, if the element is not in the beginning\n  if (icon_position === undefined) {\n    const iconIndex = partsToRender.findIndex(\n      (c) => c.type === AccordionHeaderIcon\n    )\n    // because of the container at the beginning, we use 1\n    if (iconIndex > 1) {\n      icon_position = 'right'\n    }\n\n    if (left_component) {\n      icon_position = 'right'\n    }\n  }\n\n  const headerParams = {\n    id: `${id}-header`,\n    'aria-controls': `${id}-content`,\n    'aria-expanded': context.expanded,\n    role: 'button',\n    tabIndex: 0,\n    className: classnames(\n      'dnb-accordion__header',\n      variant && `dnb-accordion__header--${variant}`,\n      context.expanded && 'dnb-accordion__header--expanded',\n      icon_position && `dnb-accordion__header--icon-${icon_position}`,\n      isHovering &&\n        hasClicked &&\n        context.expanded &&\n        'dnb-accordion__header--after-click',\n      !canClick() && 'dnb-accordion__header--prevent-click',\n      description && 'dnb-accordion__header--description',\n      no_animation && 'dnb-accordion__header--no-animation',\n      createSkeletonClass('font', skeleton, context),\n      createSpacingClasses(rest),\n      className\n    ),\n    disabled,\n    ...rest,\n  } satisfies HTMLProps<HTMLElement>\n\n  if (disabled || skeleton) {\n    headerParams.tabIndex = -1\n    headerParams.disabled = true\n    headerParams['aria-disabled'] = true\n  } else {\n    headerParams.onClick = onClickHandler\n    headerParams.onKeyDown = onKeyDownHandler\n    headerParams.onMouseOver = onMouseOverHandler\n    headerParams.onMouseOut = onMouseOutHandler\n  }\n\n  skeletonDOMAttributes(headerParams, skeleton, context)\n\n  validateDOMAttributes(props, headerParams)\n\n  let Element = 'div'\n\n  // (String(heading) === 'true' || String(heading) === '1') extracted from isTrue function\n  if (heading && (String(heading) === 'true' || String(heading) === '1')) {\n    headerParams.role = 'heading'\n    headerParams['aria-level'] = heading_level ? Number(heading_level) : 2\n  } else if (heading) {\n    headerParams.role = null\n    Element = heading as string\n  } else if (element) {\n    headerParams.role = null\n    Element = element as string\n  }\n\n  return <Element {...headerParams}>{partsToRender}</Element>\n}\n\nAccordionHeader.Container = AccordionHeaderContainer\nAccordionHeader.Icon = AccordionHeaderIcon\nAccordionHeader.Title = AccordionHeaderTitle\nAccordionHeader.Description = AccordionHeaderDescription\n\nAccordionHeader._supportsSpacingProps = true\n\nexport default AccordionHeader\n","/**\n * Web Accordion Component\n *\n */\n\nimport React, { HTMLProps } from 'react'\nimport classnames from 'classnames'\nimport {\n  warn,\n  validateDOMAttributes,\n  processChildren,\n  getPreviousSibling,\n} from '../../shared/component-helper'\nimport { useMediaQuery } from '../../shared'\nimport AccordionContext, {\n  AccordionContextProps,\n} from './AccordionContext'\nimport { createSpacingClasses } from '../space/SpacingHelper'\nimport HeightAnimation from '../height-animation/HeightAnimation'\nimport { SpacingProps } from '../space/types'\n\nexport type AccordionContentProps = Omit<\n  React.HTMLProps<HTMLElement>,\n  'onAnimationStart' | 'onAnimationEnd' | 'children'\n> &\n  SpacingProps & {\n    instance?: React.MutableRefObject<unknown>\n    className?: string\n    children?: React.ReactNode | ((...args: any[]) => any)\n  }\n\nexport default function AccordionContent(props: AccordionContentProps) {\n  const context = React.useContext<AccordionContextProps>(AccordionContext)\n\n  const {\n    id,\n    expanded,\n    prerender,\n    prevent_rerender,\n    single_container,\n    disabled,\n    no_animation,\n    contentRef,\n  } = context\n\n  const { className, children, instance, ...rest } = props\n\n  let elementRef = React.useRef(null)\n  const cacheRef = React.useRef(null)\n\n  if (contentRef) {\n    elementRef = contentRef\n  }\n\n  const setContainerHeight = () => {\n    const { single_container } = context\n\n    if (single_container) {\n      const contentElem = elementRef.current\n      if (contentElem) {\n        try {\n          contentElem.style.height = ''\n\n          const containerElement = getPreviousSibling(\n            'dnb-accordion-group--single-container',\n            contentElem\n          ) as HTMLElement\n\n          if (no_animation) {\n            containerElement.style.transitionDuration = '1ms'\n          }\n\n          const minHeight =\n            (contentElem.offsetHeight + contentElem.offsetTop) / 16\n          containerElement.style.minHeight = `${minHeight}rem`\n        } catch (e) {\n          warn(e)\n        }\n      }\n    }\n  }\n\n  const renderContent = () => {\n    const children = processChildren(props)\n\n    const {\n      expanded,\n      prerender,\n      prevent_rerender,\n      prevent_rerender_conditional,\n    } = context\n\n    let content = children\n\n    if (typeof content === 'string') {\n      content = <p className=\"dnb-p\">{content}</p>\n    }\n\n    if (prevent_rerender) {\n      /**\n       * Ensure we do not render, if it is not expanded\n       */\n      if (!(expanded || prerender)) {\n        content = null\n      }\n\n      // update the cache if children is not the same anymore\n      if (prevent_rerender_conditional && cacheRef.current !== content) {\n        cacheRef.current = content\n      }\n\n      if (cacheRef.current) {\n        content = cacheRef.current\n      } else {\n        cacheRef.current = content\n      }\n    }\n\n    return content\n  }\n\n  React.useEffect(() => {\n    if (expanded && single_container) {\n      setContainerHeight()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [children, expanded, single_container])\n\n  React.useState(() => {\n    if (\n      instance &&\n      Object.prototype.hasOwnProperty.call(instance, 'current')\n    ) {\n      instance.current = { setContainerHeight }\n    }\n  })\n\n  const isSmallScreen = useMediaQuery({\n    when: { max: 'small' },\n  })\n\n  const content = renderContent()\n\n  const wrapperParams = {\n    className: classnames('dnb-accordion__content', className),\n    ...rest,\n  }\n\n  const keepInDOM = prerender || prevent_rerender\n\n  const innerParams = {\n    id: `${id}-content`,\n    'aria-labelledby': `${id}-header`,\n    className: classnames(\n      'dnb-accordion__content__inner',\n      createSpacingClasses(rest)\n    ),\n  } as HTMLProps<HTMLElement>\n\n  if (expanded) {\n    innerParams['aria-expanded'] = true\n  }\n\n  if (!expanded || disabled) {\n    innerParams.disabled = true\n    innerParams['aria-hidden'] = true\n  }\n\n  // to remove spacing props\n  validateDOMAttributes(props, wrapperParams)\n  validateDOMAttributes(null, innerParams)\n\n  const animate =\n    !no_animation && (single_container ? isSmallScreen : true)\n\n  return (\n    <HeightAnimation\n      {...wrapperParams}\n      open={expanded}\n      animate={animate}\n      keepInDOM={keepInDOM}\n      innerRef={elementRef}\n    >\n      <section {...innerParams}>{content}</section>\n    </HeightAnimation>\n  )\n}\n\nAccordionContent._supportsSpacingProps = true\n","import { warn } from '../../shared/component-helper'\n\ntype AccordionStoreInstance = {\n  _id: string\n  close: () => void\n}\nexport class AccordionStore {\n  _instances: Array<AccordionStoreInstance>\n  _id: string\n  constructor(id: string) {\n    this._id = id\n    this._instances = []\n  }\n  onChange({ id }: { id: string }) {\n    this._instances.forEach((inst) => {\n      if (inst._id !== id) {\n        inst.close()\n      }\n    })\n  }\n  addInstance(instance: AccordionStoreInstance) {\n    this._instances.push(instance)\n  }\n  removeInstance(instance) {\n    this._instances = this._instances.filter((inst) => inst !== instance)\n  }\n}\n\nexport type StoreDataReturn = {\n  id: string\n  expanded: boolean\n}\nexport type StoreOptions = {\n  force?: boolean\n}\n\ntype StoreProps = {\n  id?: string\n  group?: string\n}\n\nexport class Store {\n  id?: string\n  group?: string\n\n  constructor({ id, group }: StoreProps) {\n    this.id = id\n    this.group = group\n    return this\n  }\n\n  storeId(id = this.id) {\n    if (this.group) {\n      // Skip using the random ID\n      if (this.group[0] === '#') {\n        return null\n      }\n      id = this.group\n    }\n    return `dnb-accordion-${id}`\n  }\n\n  saveState(expanded: boolean, id = this.id, opts: StoreOptions = {}) {\n    if (id) {\n      try {\n        const store = this.getData() || ({} as StoreDataReturn)\n\n        if (this.group) {\n          if (expanded) {\n            store.id = id\n          } else if (opts && opts.force) {\n            store.id = null\n          }\n        } else {\n          store.expanded = expanded\n        }\n\n        const storeId = this.storeId(id)\n        if (storeId) {\n          window.localStorage.setItem(storeId, JSON.stringify(store))\n        }\n      } catch (e) {\n        //\n      }\n    } else {\n      rememberWarning()\n    }\n  }\n\n  getData(id = this.id): StoreDataReturn {\n    const storeId = this.storeId(id)\n\n    if (storeId) {\n      try {\n        if (\n          Object.prototype.hasOwnProperty.call(\n            window.localStorage,\n            storeId\n          )\n        ) {\n          return JSON.parse(window.localStorage.getItem(storeId))\n        }\n      } catch (e) {\n        //\n      }\n    }\n\n    return null\n  }\n\n  getState(id = this.id) {\n    let state = null\n\n    const store = this.getData(id)\n\n    if (store) {\n      if (typeof store.id !== 'undefined') {\n        state = id === store.id\n      } else if (typeof store.expanded !== 'undefined') {\n        state = store.expanded\n      }\n    }\n\n    return state\n  }\n\n  flush(id = this.id) {\n    if (id) {\n      try {\n        const storeId = this.storeId(id)\n        if (storeId) {\n          window.localStorage.setItem(storeId, null)\n        }\n      } catch (e) {\n        //\n      }\n    }\n  }\n}\n\nexport function rememberWarning(type = 'accordion') {\n  warn(`Missing \"id\" prop the ${type}! \"remember_state\" is enabled.`)\n}\n","/**\n * Web Accordion Component\n *\n */\n\nimport React, {\n  useContext,\n  useState,\n  useEffect,\n  useRef,\n  HTMLProps,\n} from 'react'\n\nimport classnames from 'classnames'\nimport {\n  makeUniqueId,\n  findElementInChildren,\n  extendPropsWithContext,\n  validateDOMAttributes,\n  dispatchCustomElementEvent,\n} from '../../shared/component-helper'\nimport { createSpacingClasses } from '../space/SpacingHelper'\n\nimport type { ButtonIconPosition } from '../Button'\nimport type { HeadingLevel } from '../Heading'\nimport type { IconIcon, IconSize } from '../Icon'\nimport type { SkeletonShow } from '../Skeleton'\nimport type { SpacingProps } from '../space/types'\n\nimport AccordionGroup from './AccordionGroup'\nimport AccordionHeader from './AccordionHeader'\nimport AccordionContent from './AccordionContent'\nimport AccordionContext from './AccordionContext'\nimport AccordionProviderContext from './AccordionProviderContext'\nimport Context from '../../shared/Context'\n\nimport { AccordionStore, Store, rememberWarning } from './AccordionStore'\nimport { accordionDefaultProps } from './defaultProps'\n\nexport type AccordionVariant = 'plain' | 'default' | 'outlined' | 'filled'\n\nexport type AccordionHeading = boolean | React.ReactNode\n\nexport type AccordionIcon =\n  | IconIcon\n  | {\n      closed?: React.ReactNode | ((...args: any[]) => any)\n      /**\n       * If set to `true` the accordion will be expanded as its initial state.\n       */\n      expanded?: React.ReactNode | ((...args: any[]) => any)\n    }\n\nexport type AccordionAttributes = string | Record<string, unknown>\n\nexport type AccordionIconPosition = ButtonIconPosition\n\nexport type AccordionProps = Omit<React.HTMLProps<HTMLElement>, 'ref'> &\n  SpacingProps & {\n    /**\n     * A title as a string or React element. It will be used as the button text.\n     */\n    title?: React.ReactNode\n    description?: React.ReactNode\n    /**\n     * If set to `true` the accordion will be expanded as its initial state.\n     */\n    expanded?: boolean\n    /**\n     * If set to `true`, the open and close animation will be omitted.\n     */\n    no_animation?: boolean\n    /**\n     * If set to `true` the accordion will be expanded during SSR. Can be potentially useful for SEO, although it will disturb client hydration, where React expects the same state. But that&#39;s mainly a technical aspect to consider.\n     */\n    expanded_ssr?: boolean\n    /**\n     */\n    prerender?: boolean\n    /**\n     * If set to `true` the accordion component will not re-render its content – can be useful for widgets you don&#39;t have control of storing the temporary state during an interaction.\n     */\n    prevent_rerender?: boolean\n    /**\n     * Use this prop together with `prevent_rerender` – and if it is to `true`, the accordion component will re-render if the children are a new React element and does not match the previous one anymore.\n     */\n    prevent_rerender_conditional?: boolean\n    /**\n     * If set to `true`, it will remember a changed state initiated by the user. It requires a unique `id`. It will store the sate in the local storage.\n     */\n    remember_state?: boolean\n    /**\n     * Send along a custom React Ref for `.dnb-accordion__content`.\n     */\n    contentRef?: React.MutableRefObject<unknown>\n    /**\n     * If set to `true`, the saved (remembered) will be removed and the initial component state will be used and set.\n     */\n    flush_remembered_state?: boolean\n    /**\n     * If set to `true`, a group of accordions will be wrapped to sidebar looking menu for medium and larger screens.\n     */\n    single_container?: boolean\n    /**\n     * Defines the used styling. As of now, only `outlined` is available. Use `plain` for no styles. It defaults to `outlined`.\n     */\n    variant?: AccordionVariant\n    /**\n     * Will add a React element on the left side of the `title`, inside `AccordionHeaderContainer`.\n     */\n    left_component?: React.ReactNode\n    /**\n     * If set to `true`, the accordion button will be disabled (dimmed).\n     */\n    disabled?: boolean\n    /**\n     * If set to `true`, an overlaying skeleton with animation will be shown.\n     */\n    skeleton?: SkeletonShow\n    /**\n     * A unique `id` that will be used on the button element. If you use `remember_state`, an id is required.\n     */\n    id?: string\n    group?: string\n    /**\n     * Gives you the option to replace the used `button` element. Provide a React element, including a string (HTML element). Defaults to a `div` with all the needed accessibility features included.\n     */\n    element?: React.ReactNode\n    /**\n     * If set to `true`, level 2 (h2) will be used. You can provide your own HTML heading (`h3`), or provide a `heading_level` property.\n     */\n    heading?: AccordionHeading\n    /**\n     * If `heading` is set to `true`, you can provide a numeric value to define a different heading level. Defaults to `2`.\n     */\n    heading_level?: HeadingLevel\n    /**\n     * Will replace the `chevron` icon. The icon will still rotate (by CSS). You can use an object to use two different icons, one for the closed state and one for the expanded state `{ closed, expanded }`.\n     */\n    icon?: AccordionIcon\n    /**\n     * Will set the placement of the icon. Defaults to `left`.\n     */\n    icon_position?: AccordionIconPosition\n    /**\n     * Define a different icon size. Defaults to `medium` (1.5rem).\n     */\n    icon_size?: IconSize\n    attributes?: AccordionAttributes\n    className?: string\n    children?: React.ReactNode\n    /**\n     * Will be called by user click interaction. Returns an object with a boolean state `expanded` inside `{ expanded, id, event, ...event }`.\n     */\n    on_change?: (...args: any[]) => any\n    on_state_update?: (...args: any[]) => any\n  }\n\nfunction Accordion({\n  variant = 'outlined',\n  icon_size = 'medium',\n  ...restOfProps\n}: AccordionProps) {\n  const props = { variant, icon_size, ...restOfProps }\n\n  const context = useContext(AccordionProviderContext)\n\n  const group = props.group || context?.group\n  const id = useRef(props.id || makeUniqueId()).current\n\n  const store = new Store({ id: props.id, group })\n\n  // States ordered last here to make sure that the getInitialExpandedState have access to the store\n  const [previousExpanded, setPreviousExpanded] = useState(props.expanded)\n  const [expanded, setExpanded] = useState<boolean>(\n    getInitialExpandedState()\n  )\n\n  // replacement for getDerivedStateFromProps\n  if (props.expanded !== previousExpanded) {\n    setExpanded(props.expanded !== undefined ? props.expanded : false)\n    setPreviousExpanded(props.expanded)\n  }\n\n  const thisInstance = {\n    _id: id,\n    context,\n    handleDisabledClick,\n    callOnChange,\n    callOnChangeHandler,\n    close,\n    setExpandedState,\n    state: { expanded, group },\n    props,\n    store,\n  }\n\n  // Constructor\n  useEffect(() => {\n    if (group && typeof window !== 'undefined') {\n      window['__dnbAccordion'] = window['__dnbAccordion'] || {}\n      window['__dnbAccordion'][group] =\n        window['__dnbAccordion'][group] || new AccordionStore(group)\n\n      window['__dnbAccordion'][group].addInstance(thisInstance)\n    }\n\n    if (context && typeof context?.onInit === 'function') {\n      context.onInit(thisInstance)\n    }\n\n    return () => {\n      if (group && typeof window !== 'undefined') {\n        window?.['__dnbAccordion'][group]?.removeInstance(thisInstance)\n      }\n    }\n  }, [])\n\n  // componentDidUpdate\n  useEffect(() => {\n    if (context.flush_remembered_state) {\n      store.flush()\n      setExpanded(props.expanded)\n    }\n\n    if (context?.expanded_id && context.expanded_id === props.id) {\n      setExpanded(true)\n    }\n  }, [context.flush_remembered_state, context.expanded_id])\n\n  // Gets the initial expanded sate, to prevent the opening and closing of Accordion\n  // That happens when if we put this logic in a useEffect that runs after the initial expanded state is set\n  // Since useEffect runs after every render\n  function getInitialExpandedState() {\n    if (props.expanded_ssr || context?.expanded_ssr) {\n      return typeof window === 'undefined'\n    }\n\n    if (props.remember_state || context.remember_state) {\n      const storedExpanded = store.getState()\n\n      if (props.expanded && storedExpanded === false) {\n        return false\n      }\n\n      if (storedExpanded) {\n        return true\n      }\n    }\n\n    return props.expanded !== undefined\n      ? props.expanded\n      : context?.expanded !== undefined\n      ? context.expanded\n      : false\n  }\n\n  function setExpandedState(expanded: boolean) {\n    setExpanded(expanded)\n  }\n\n  function close() {\n    changeOpened(false)\n  }\n\n  function changeOpened(expanded: boolean) {\n    setExpanded(expanded)\n\n    // check if a event exists, because, then it's a user click\n    if (props.remember_state || context.remember_state) {\n      store.saveState(expanded)\n    }\n  }\n\n  function handleDisabledClick(e: React.MouseEvent<HTMLElement>) {\n    e.preventDefault()\n    return false\n  }\n\n  function callOnChangeHandler(...params: any[]) {\n    callOnChange(...params)\n    if (context?.onChange) {\n      context?.onChange(...params)\n    }\n    if (group && typeof window !== 'undefined') {\n      window?.['__dnbAccordion'][group]?.onChange(...params)\n    }\n  }\n\n  function callOnChange(...params: any[]) {\n    const { expanded, event } = params[0]\n\n    changeOpened(expanded)\n\n    dispatchCustomElementEvent(thisInstance, 'on_change', {\n      expanded,\n      event,\n    })\n  }\n\n  return (\n    <Context.Consumer>\n      {(globalContext) => (\n        <AccordionContext.Consumer>\n          {(nestedContext) => {\n            // use only the props from context, who are available here anyway\n            let expandedState = expanded\n\n            const extendedProps = extendPropsWithContext(\n              props,\n              accordionDefaultProps,\n              context, // group context\n              nestedContext as Record<string, unknown>, // internal context\n              { skeleton: globalContext?.skeleton },\n              globalContext.Accordion, // global context\n              globalContext.translation['Accordion']\n            )\n\n            if (expandedState === undefined && globalContext.Accordion) {\n              if (globalContext.Accordion.expanded) {\n                expandedState = extendedProps.expanded\n              }\n            }\n\n            const {\n              variant,\n              className,\n              prerender,\n              prevent_rerender,\n              prevent_rerender_conditional,\n              single_container,\n              remember_state,\n              disabled,\n              skeleton,\n              no_animation,\n              expanded_ssr: _expanded_ssr, // eslint-disable-line\n              children,\n\n              id: _id, // eslint-disable-line\n              group: _group, // eslint-disable-line\n              // expanded: _expanded, // eslint-disable-line\n\n              title, // eslint-disable-line\n              description, // eslint-disable-line\n              left_component, // eslint-disable-line\n              icon, // eslint-disable-line\n              icon_position, // eslint-disable-line\n              icon_size, // eslint-disable-line\n              on_change, // eslint-disable-line\n              on_state_update, // eslint-disable-line\n\n              contentRef, // eslint-disable-line\n\n              ...restOfExtendedProps\n            } = extendedProps\n\n            const mainParams = {\n              id,\n              className: classnames(\n                'dnb-accordion',\n                expandedState && 'dnb-accordion--expanded',\n                variant && `dnb-accordion__variant--${variant}`,\n                prerender && 'dnb-accordion--prerender',\n                createSpacingClasses(extendedProps),\n                className\n              ),\n            } as HTMLProps<HTMLDivElement>\n\n            if (disabled) {\n              mainParams.onClick = handleDisabledClick\n            }\n\n            // to remove spacing props\n            validateDOMAttributes(props, restOfExtendedProps)\n\n            const extendedPropsForContext = extendPropsWithContext(\n              props,\n              accordionDefaultProps,\n              { expanded, group },\n              context\n            )\n\n            const accordionContext = {\n              ...extendedPropsForContext,\n              id,\n              expanded: expandedState,\n              prerender: prerender,\n              prevent_rerender: prevent_rerender,\n              prevent_rerender_conditional: prevent_rerender_conditional,\n              single_container: single_container,\n              remember_state: remember_state,\n              disabled: disabled,\n              skeleton: skeleton,\n              no_animation: no_animation,\n              callOnChange: callOnChangeHandler,\n            }\n\n            return (\n              <AccordionContext.Provider value={accordionContext}>\n                <div {...mainParams}>\n                  {findElementInChildren(\n                    children,\n                    (cur) => cur.type === AccordionHeader\n                  ) ? null : (\n                    <AccordionHeader />\n                  )}\n                  {findElementInChildren(\n                    children,\n                    (cur) => cur.type === AccordionContent\n                  ) ? (\n                    children\n                  ) : (\n                    <AccordionContent>{children}</AccordionContent>\n                  )}\n                </div>\n              </AccordionContext.Provider>\n            )\n          }}\n        </AccordionContext.Consumer>\n      )}\n    </Context.Consumer>\n  )\n}\n// TEMPORARY SOLUTION (defaultProps will be deprecated at one point). Needs to replacement with default prop parameters for example \"({expanded: null})\"\n// Only solved this way to prevent tests from failing, for when expanded is undefined instead of null\nAccordion.defaultProps = accordionDefaultProps\n\nexport type GroupProps = AccordionProps & {\n  allow_close_all?: boolean\n  expanded_id?: string\n}\n\nconst Group = (props: GroupProps) => {\n  if (props.remember_state && !props.id) {\n    rememberWarning('accordion group')\n  }\n\n  const [expandedId, setExpandedId] = useState<string | null>(null)\n\n  const instanceIDs = useRef<string[]>([])\n\n  const group = props?.id\n    ? props.id\n    : !props.group\n    ? '#' + makeUniqueId()\n    : undefined\n\n  const store = new Store({ group })\n\n  // Set stored expanded_id on mount\n  useEffect(() => {\n    const storedData = store.getData()\n    const currentIDs = instanceIDs?.current\n\n    if (!storedData?.id) {\n      return\n    }\n\n    if (currentIDs.includes(storedData?.id)) {\n      return\n    }\n\n    // 1. get the fallback id\n    const fallbackId = currentIDs[0]\n\n    if (!fallbackId) {\n      return\n    }\n\n    // 2. set the fallback ids\n    setExpandedId(fallbackId)\n  }, [])\n\n  // Store and reset fallback id\n  useEffect(() => {\n    if (!expandedId) {\n      return\n    }\n\n    // 3. save the fallback id\n    store.saveState(true, expandedId)\n\n    // 4. and reset the fallback id\n    setExpandedId(null)\n  }, [expandedId])\n\n  function onInit(instance) {\n    if (\n      instance.props.id &&\n      !instanceIDs.current.includes(instance.props.id)\n    ) {\n      instanceIDs.current.push(instance.props.id)\n    }\n  }\n\n  return (\n    <AccordionGroup\n      onInit={onInit}\n      {...props}\n      group={group}\n      expanded_id={expandedId || props.expanded_id}\n    />\n  )\n}\n\nAccordion.Provider = AccordionGroup\nAccordion.Header = AccordionHeader\nAccordion.Content = AccordionContent\n\nAccordion.Group = Group\n\nGroup.Store = (group: string, id: string = null) => {\n  return new Store({ group, id })\n}\n\nAccordion.Store = (id: string) => {\n  return new Store({ id })\n}\n\nAccordion._supportsSpacingProps = true\n\nexport default Accordion\n"],"names":["React","accordionDefaultProps","variant","icon_size","AccordionGroup","props","context","useContext","Context","id","makeUniqueId","thisInstance","_id","onChangeHandler","event","dispatchCustomElementEvent","expanded","extendedProps","extendPropsWithContext","Accordion","getTranslation","expanded_id","prerender","prevent_rerender","single_container","contentRef","allow_close_all","remember_state","flush_remembered_state","disabled","group","onInit","className","children","restOfExtendedProps","classes","classnames","isTrue","createSpacingClasses","params","validateDOMAttributes","contextForProvider","onChange","_jsx","AccordionGroupContext","Provider","value","role","_supportsSpacingProps","AccordionHeaderTitle","_ref","rest","AccordionHeaderDescription","_ref2","AccordionHeaderContainer","_ref3","AccordionHeaderIcon","_ref4","icon","size","icon_position","IconPrimary","accordionHeaderDefaultProps","AccordionHeader","_ref5","icon_size_default","restOfProps","isHovering","setIsHovering","useState","hasClicked","setHasClicked","AccordionContext","onClickHandler","canClick","callOnChange","left_component","title","description","element","heading","heading_level","skeleton","no_animation","_left_component","_expanded","_title","_description","_icon","_icon_size","_disabled","defaultParts","Array","isArray","filter","cur","removeParts","forEach","part","find","c","type","push","index","findIndex","splice","partsToRender","wrapperParts","wrapperComp","undefined","headerParams","tabIndex","createSkeletonClass","onClick","onKeyDown","keyPressed","key","preventDefault","onMouseOver","onMouseOut","skeletonDOMAttributes","Element","String","Number","Container","Icon","Title","Description","AccordionContent","instance","elementRef","cacheRef","setContainerHeight","contentElem","current","style","height","containerElement","getPreviousSibling","transitionDuration","minHeight","offsetHeight","offsetTop","e","warn","Object","prototype","hasOwnProperty","call","isSmallScreen","useMediaQuery","when","max","content","renderContent","processChildren","prevent_rerender_conditional","wrapperParams","keepInDOM","innerParams","animate","HeightAnimation","open","innerRef","AccordionStore","this","_instances","_proto","inst","close","addInstance","removeInstance","Store","_proto2","storeId","saveState","opts","store","getData","force","window","localStorage","setItem","JSON","stringify","rememberWarning","parse","getItem","getState","state","flush","AccordionProviderContext","useRef","previousExpanded","setPreviousExpanded","setExpanded","expanded_ssr","storedExpanded","getInitialExpandedState","handleDisabledClick","callOnChangeHandler","changeOpened","setExpandedState","_len","arguments","length","_key","_window2","_window2$__dnbAccordi","apply","useEffect","_window","_window$__dnbAccordio","Consumer","globalContext","nestedContext","expandedState","translation","_expanded_ssr","_group","on_change","on_state_update","mainParams","accordionContext","_jsxs","findElementInChildren","defaultProps","Group","expandedId","setExpandedId","instanceIDs","storedData","currentIDs","includes","fallbackId","Header","Content"],"sourceRoot":""}