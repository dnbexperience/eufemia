{"version":3,"file":"ca64b74007eb1f5eaba259daf06b03c8c6ad7389-af931ae46657e050622e.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/./src/shared/parts/TranslationsTable.tsx"],"sourcesContent":["import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colors = {\n  type: {\n    default: 'var(--color-success-green)',\n    primitive: 'var(--color-success-green)',\n    string: 'var(--color-fire-red)',\n  },\n  value: {\n    default: 'var(--color-success-green)',\n    undefined: 'var(--color-black-55)',\n    string: 'var(--color-fire-red)',\n  },\n}\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = isString(children)\n          ? colors.type.string\n          : isPrimitive(children)\n          ? colors.type.primitive\n          : colors.type.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n      case 'value': {\n        style.color = isString(children)\n          ? colors.value.string\n          : children === 'undefined' || children === 'null'\n          ? colors.value.undefined\n          : colors.value.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\nfunction isString(str: string) {\n  return [\"'\", '\"', '`'].includes(str.substring(0, 1))\n}\n\nfunction isPrimitive(type: string) {\n  return [\n    'boolean',\n    'true',\n    'false',\n    'number',\n    'bigint',\n    'string',\n    'symbol',\n  ].includes(typeWithoutArray(type))\n}\n\nfunction typeWithoutArray(type: string) {\n  if (type.endsWith('[]')) {\n    return type.slice(0, -2)\n  } else if (type.startsWith('Array<') && type.endsWith('>')) {\n    return type.slice(6, -1)\n  }\n  return type\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('[')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","import styled from '@emotion/styled'\nimport { Anchor, P, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { extendDeep, warn } from '@dnb/eufemia/src/shared/component-helper'\nimport globalTranslations from '@dnb/eufemia/src/shared/locales'\nimport formsTranslations from '@dnb/eufemia/src/extensions/forms/constants/locales'\nimport { FormattedCode } from './PropertiesTable'\nimport { Translation } from '@dnb/eufemia/src/shared/Context'\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nexport default function TranslationsTable({\n  localeKey,\n  source = null,\n}: {\n  localeKey?: string | Array<string>\n  source?: Record<string, Translation>\n}) {\n  if (!source) {\n    source = extendDeep({}, globalTranslations, formsTranslations)\n  }\n\n  const entries = {}\n  const allowList = {}\n  const localeKeys = (\n    Array.isArray(localeKey) ? localeKey : [localeKey]\n  ).map((key) => {\n    if (key.includes('.')) {\n      const first = key.split('.')[0]\n      allowList[first] = allowList[first] || []\n      allowList[first].push(key)\n      return first\n    }\n\n    return key\n  })\n\n  const addToEntries = (key, translation, locale, localeKey) => {\n    key = `${localeKey}.${key}`\n    if (allowList[localeKey] && !allowList[localeKey].includes(key)) {\n      return\n    }\n    entries[key] = Object.assign(entries[key] || {}, {\n      [locale]: translation,\n    })\n  }\n\n  Object.entries(source).forEach(([locale, translations]) => {\n    localeKeys.forEach((localeKey) => {\n      const translationsObj = translations[localeKey]\n      if (!translationsObj) {\n        warn(\n          `TranslationsTable: Could not find any translations for key: \"${localeKey}\", perhaps you misspelled the key's name?`,\n        )\n        return\n      }\n      Object.entries(translationsObj).forEach(([key, translation]) => {\n        if (typeof translation === 'object') {\n          const nestedKey = `${localeKey}.${key}`\n          Object.entries(translation).forEach(([key, translation]) => {\n            addToEntries(key, translation, locale, nestedKey)\n          })\n        } else {\n          addToEntries(key, translation, locale, localeKey)\n        }\n      })\n    })\n  })\n\n  const locales = Object.keys(source)\n  const tableRows = Object.entries(entries).map(([key, values]) => {\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode variant=\"prop\">{key}</FormattedCode>\n        </Td>\n        {Object.entries(values).map(([locale, value], i) => {\n          return (\n            <Td key={i + locale}>\n              {typeof value === 'string' ? (\n                value\n              ) : (\n                <pre>{JSON.stringify(value, null, 2)}</pre>\n              )}\n            </Td>\n          )\n        })}\n      </Tr>\n    )\n  })\n\n  if (tableRows.length == 0) {\n    warn(\n      `TranslationsTable: Not able to find any translations for input : \"${localeKey}\", hence not rendering the translations table.`,\n    )\n    return\n  }\n\n  return (\n    <>\n      <P>\n        More info about translations can be found in the{' '}\n        <Anchor href=\"/uilib/usage/customisation/localization/\">\n          general localization\n        </Anchor>{' '}\n        and{' '}\n        <Anchor href=\"/uilib/extensions/forms/getting-started/#localization-and-translation\">\n          Eufemia Forms localization\n        </Anchor>{' '}\n        docs.\n      </P>\n      <Table.ScrollView>\n        <StyledTable>\n          <thead>\n            <Tr>\n              <Th>Key</Th>\n              {locales.map((locale) => (\n                <Th key={locale}>{locale}</Th>\n              ))}\n            </Tr>\n          </thead>\n          <tbody>{tableRows}</tbody>\n        </StyledTable>\n      </Table.ScrollView>\n    </>\n  )\n}\n"],"names":["components","basicComponents","p","props","_jsx","StyledTable","_styled","Table","target","name","styles","colors","default","primitive","string","undefined","FormattedCode","_ref","variant","strikethrough","children","style","rest","textDecoration","color","isString","includes","type","endsWith","slice","startsWith","typeWithoutArray","background","boxShadow","code","PropertiesTable","_ref2","valueType","camelCase","omit","showDefaultValue","keys","Object","tableRows","entries","map","_ref3","key","defaultValue","doc","status","_jsxs","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","_Fragment","ReactMarkdown","convertToCamelCase","Th","str","substring","forEach","replace","RegExp","TranslationsTable","localeKey","source","extendDeep","globalTranslations","formsTranslations","allowList","localeKeys","first","split","push","addToEntries","translation","locale","assign","translations","translationsObj","nestedKey","_ref4","warn","locales","_ref5","values","_ref6","value","JSON","stringify","length","P","Anchor","href"],"sourceRoot":""}