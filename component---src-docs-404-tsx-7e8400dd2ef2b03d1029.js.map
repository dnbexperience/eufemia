{"version":3,"file":"component---src-docs-404-tsx-7e8400dd2ef2b03d1029.js","mappings":"yOAUe,SAASA,EAAYC,GAAe,IAAd,SAAEC,GAAUD,EAC/C,MAAM,SAAEE,GAAaD,EAErB,OACEE,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CACPC,aAAc,CACZ,QAAS,CACPC,YAAa,CACX,IAAK,CACHC,KAAO,kCAAiCL,OAI9C,QAAS,CACPI,YAAa,CACX,IAAK,CACHC,KAAO,mCAAkCL,OAI/C,QAAS,CACPI,YAAa,CACX,IAAK,CACHC,KAAO,qCAAoCL,QAIjDM,UAEFL,EAAAA,EAAAA,KAACM,EAAAA,EAAM,CAAcR,SAAUA,EAAUS,aAAW,EAAAF,UAClDL,EAAAA,EAAAA,KAACG,EAAAA,EAAW,CAACK,QAAM,EAACC,WAAW,SADrB,WAKlB,C,uMC0DA,MAAMC,EAAe,CAEnBC,OAAQ,MACRF,WAAY,OAGC,SAASN,EAAYS,GAElC,MAAMC,EAAUC,EAAAA,WAAiBC,EAAAA,IAE3BC,EAAcH,EAAQI,eAAeL,GACxCT,YAGGe,GAAWC,EAAAA,EAAAA,IACfP,EACAF,EACAG,aAAO,EAAPA,EAASV,YACTa,EACAA,EACEJ,EAAWD,QAAUC,EAAWH,YAAcC,EAAaD,YAE7D,CAAEW,SAAUP,aAAO,EAAPA,EAASO,YAGjB,OACJT,EAAM,WACNF,EAAU,SACVW,EAAQ,OACRZ,EAAM,UACNa,EAAS,MAETC,EAAK,KACLC,EAAI,KACJC,EAAI,iBACJC,EAAgB,MAChBC,EAAK,KACLtB,KAEGuB,GACDT,EAGEU,EAAcjB,IAAWD,EAAaC,OAASA,EAASF,EAExDoB,EAAgD,CAAC,EACnC,iBAATzB,EACTyB,EAAWC,wBAA0B,CAAEC,OAAQ3B,GAE/CyB,EAAWxB,SAAWD,EAGxB,MAAM4B,GAAiBC,EAAAA,EAAAA,IAAqBN,GAEtCO,EAAS,CACbb,UAAWc,IACT,mBACC,qBAAoBP,IACrBpB,GAAU,4BACVyB,EAAAA,EAAAA,IAAqBN,GACrBN,EACAW,MAECL,GAGCS,GAAoBC,EAAAA,EAAAA,IAAgBnB,GAGpCoB,EAAwBC,OAAOC,UAAUC,eAAeC,KAC5D9B,EACA,QAGF,OACEZ,EAAAA,EAAAA,KAAC2C,EAAAA,EAAQ,IAAKT,EAAQU,KAAMxB,EAAUyB,QAAQ,UAASxC,UACrDyC,EAAAA,EAAAA,MAAA,OAAKzB,UAAU,0BAAyBhB,SAAA,EACtCyC,EAAAA,EAAAA,MAAA,OAAKzB,UAAU,mCAAkChB,SAAA,EAC/CL,EAAAA,EAAAA,KAAC+C,EAAAA,EAAE,CAACC,KAAK,UAAUC,KAAG,EAACC,QAAM,EAAA7C,SAC1BiB,KAEHtB,EAAAA,EAAAA,KAACmD,EAAAA,EAAC,CAACD,QAAM,KAAKrB,IACbS,GAAyBd,IACxBsB,EAAAA,EAAAA,MAACK,EAAAA,EAAC,CAACD,QAAM,EAAC7B,UAAU,2BAA0BhB,SAAA,CAC3CmB,EAAK,IAAEI,IAAe5B,EAAAA,EAAAA,KAACoD,EAAAA,EAAI,CAAA/C,SAAEuB,QAGhCU,GAAyBb,IACzBzB,EAAAA,EAAAA,KAACmD,EAAAA,EAAC,CAACD,QAAM,EAAC7B,UAAU,2BAA0BhB,SAC3CgD,OAAO5B,GAAkB6B,QACxB,cACA1B,KAILL,IAAQG,aAAK,EAALA,EAAO6B,UACdvD,EAAAA,EAAAA,KAACmD,EAAAA,EAAC,CAACF,IAAI,SAASC,QAAM,EAAA7C,SACnBkB,IAGJA,IAAQG,aAAK,EAALA,EAAO6B,UACdvD,EAAAA,EAAAA,KAACmD,EAAAA,EAAC,CAACD,OAAO,QAAQ7B,UAAU,0BAAyBhB,SAClDqB,EAAM8B,KAAI3D,IAAoB,IAAnB,KAAEO,EAAI,IAAEqD,GAAK5D,EACvB,OACEG,EAAAA,EAAAA,KAAC0D,EAAAA,GAAM,CAAYC,KAAMF,EAAIpD,SAC1BD,GADUA,EAEJ,SAMlBgC,MAIT,CAEAjC,EAAYyD,uBAAwB,C,2LCtMQ,IAEvBjB,EAAQ,SAAAkB,GAqC3B,SAAAlB,EAAYmB,GAAQ,IAADC,EAEoB,OADrCA,EAAAF,EAAAnB,KAAA,KAAMoB,IAAM,MACPE,MAAQ,CAAEC,eAAgB,MAAMF,CACvC,EAxC2BG,EAAAA,EAAAA,GAAAvB,EAAAkB,GAwC1B,IAAAM,EAAAxB,EAAAH,UAqHA,OArHA2B,EAEDC,qBAAA,WACEC,aAAaC,KAAKC,uBACpB,EAACJ,EAEDK,mBAAA,SAAmBC,GACbA,EAAU7B,OAAS0B,KAAKR,MAAMlB,MAChC0B,KAAKI,mBAET,EAACP,EAEDQ,SAAA,SAASb,EAAoBjD,GAC3B,YADY,IAALiD,IAAAA,EAAQQ,KAAKR,YAAc,IAAPjD,IAAAA,EAAUyD,KAAKzD,UACnC+D,EAAAA,EAAAA,IACLd,EACAnB,EAASjC,aACT,CACEU,SAAUP,EAAQ8B,UAAY9B,EAAQO,SACtCyD,aAAchE,EAAQiE,uBAExBjE,EAAQI,eAAe6C,GAAOnB,SAElC,EAACwB,EAEDO,kBAAA,WAEEL,aAAaC,KAAKC,wBAClBD,KAAKC,uBAAyBQ,YAAW,KACvC,MAAM,UAAEC,EAAS,WAAEC,GAAeX,KAAKK,WAEvC,IAAIO,EAAY,KAGdA,GADEC,EAAAA,EAAAA,IAAOb,KAAKR,MAAMlB,MACRoC,EAEAC,EAGVC,IACFZ,KAAKc,SAAS,CACZnB,eAAgBiB,IAElBZ,KAAKC,uBAAyBQ,YAAW,KACvCT,KAAKc,SAAS,CACZnB,eAAgB,MAChB,GACD,KACL,GACC,IACL,EAACE,EAEDkB,OAAA,WAEE,MAAMvB,EAAQQ,KAAKK,YAEb,KACJ/B,EAAI,aACJiC,EAAY,OACZS,EAAM,SACNlE,EAAQ,UACR4D,EAAS,WACTC,EAAU,UACV5D,EAAS,SACThB,KAEGsB,GACDmC,GAEE,eAAEG,GAAmBK,KAAKN,MAE1BuB,EACY,kBAAT3C,GAAsC,iBAATA,GAChCuC,EAAAA,EAAAA,IAAOvC,GACPxB,EAEAc,EAAS,CACbb,UAAWc,IACTmD,EAAS,uBAAyB,sBAClCH,EAAAA,EAAAA,IAAOI,IAAiB,gBACxBJ,EAAAA,EAAAA,IAAON,IAAiB,8BACxB5C,EAAAA,EAAAA,IAAqB6B,GACrBzC,GAGF,YAAakE,EACb,aAAcA,EAAeP,OAAYQ,EACzCC,KAAMnB,KAAKzD,QAAQ6E,QAAUC,EAAAA,MAC1BhE,GAKL,OAFAiE,EAAAA,EAAAA,IAAsB9B,EAAO5B,IAG3BY,EAAAA,EAAAA,MAAC+C,EAAAA,EAAK,IAAK3D,EAAM7B,SAAA,CACdiF,EACCC,EACoB,mBAAXD,EACLA,IAEAA,EAGFjF,GAGFL,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CACPmB,SAAUmE,EACVT,sBAAuBD,EAAaxE,SAEnCA,KAGLL,EAAAA,EAAAA,KAAA,QAAMqB,UAAU,cAAc,YAAU,YAAWhB,SAChD4D,MAIT,EAACtB,CAAA,CA7J0B,CAAS7B,EAAAA,eAAjB6B,EACZmD,YAAc/E,EAAAA,GADF4B,EAyBZjC,aAAe,CACpBkC,KAAM,KACNxB,SAAU,KACVyD,aAAc,KACdS,OAAQ,KACRN,UAAW,KACXC,WAAY,KACZpC,QAAS,KACTxB,UAAW,KACXhB,SAAU,MAkIdsC,EAASoD,QAJT,SAAiBjC,GACf,OAAO9D,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,IAAK6D,EAAO1C,UAAU,GACxC,EAIAuB,EAASiB,uBAAwB,C","sources":["webpack://dnb-design-system-portal/./src/docs/404.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/global-error/GlobalError.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/skeleton/Skeleton.js"],"sourcesContent":["/**\n * Page not found\n *\n */\n\nimport React from 'react'\nimport { GlobalError } from '@dnb/eufemia/src/components'\nimport { Provider } from '@dnb/eufemia/src/shared'\nimport Layout from '../shared/parts/Layout'\n\nexport default function PageNotFound({ location }) {\n  const { pathname } = location\n\n  return (\n    <Provider\n      translations={{\n        'nb-NO': {\n          GlobalError: {\n            404: {\n              text: `Det er ingen side på adressen: ${pathname}`,\n            },\n          },\n        },\n        'en-GB': {\n          GlobalError: {\n            404: {\n              text: `There's no page at the address: ${pathname}`,\n            },\n          },\n        },\n        'sv-SE': {\n          GlobalError: {\n            404: {\n              text: `Det finns ingen sida på adressen: ${pathname}`,\n            },\n          },\n        },\n      }}\n    >\n      <Layout key=\"layout\" location={location} hideSidebar>\n        <GlobalError center statusCode=\"404\" />\n      </Layout>\n    </Provider>\n  )\n}\n","/**\n * Web GlobalError Component\n *\n */\n\nimport React from 'react'\nimport classnames from 'classnames'\nimport Context, { GetTranslationProps } from '../../shared/Context'\nimport {\n  processChildren,\n  extendPropsWithContext,\n} from '../../shared/component-helper'\nimport { createSpacingClasses } from '../space/SpacingHelper'\nimport Anchor from '../anchor/Anchor'\nimport Skeleton, { SkeletonShow } from '../skeleton/Skeleton'\nimport { H1, P, Code } from '../../elements'\nimport type { SpacingProps } from '../../shared/types'\n\nexport type GlobalErrorLink = {\n  text: string\n  url: string\n}\n\nexport type GlobalErrorProps = {\n  /**\n   * When `404` or `500` is given, a predefined text will be shown.\n   * Defaults to `404`.\n   */\n  statusCode?: '404' | '500' | string\n\n  /**\n   *\n   * When `404` or `500` is given, a predefined text will be shown.\n   * Defaults to `404`.\n   * @deprecated – Replaced with statusCode, status can be removed in v11.\n   */\n  status?: '404' | '500' | string\n\n  /**\n   * Will overwrite the default title.\n   */\n  title?: React.ReactNode\n\n  /**\n   * Will overwrite the default text.\n   */\n  text?: React.ReactNode\n\n  /**\n   * Will overwrite the default error message code.\n   */\n  errorMessageCode?: React.ReactNode\n\n  /**\n   * Will overwrite the default error message code.\n   * @deprecated – Replaced with errorMessageCode, code can be removed in v11.\n   */\n  code?: React.ReactNode\n\n  /**\n   * Will overwrite the default additional help text.\n   */\n  help?: React.ReactNode\n\n  /**\n   * Provide an array with objects `{ text: 'Text', url: 'https://...' }` to display a list of anchor links.\n   */\n  links?: Array<GlobalErrorLink>\n\n  /**\n   * If true, it will use 80vh as the height and center its content.\n   */\n  center?: boolean\n\n  /**\n   * Skeleton should be applied when loading content\n   * Default: null\n   */\n  skeleton?: SkeletonShow\n}\n\nexport type GlobalErrorAllProps = GlobalErrorProps &\n  Omit<React.HTMLProps<HTMLElement>, 'ref'> &\n  SpacingProps &\n  GetTranslationProps\n\nexport type GlobalErrorTranslationContent = {\n  /**\n   * Defining a `title` will overwrite the default provided by `status_content`.\n   */\n  title?: React.ReactNode\n\n  /**\n   * Defining a `text` will overwrite the default provided by `status_content`.\n   */\n  text?: React.ReactNode\n}\nexport type GlobalErrorTranslation = {\n  404?: GlobalErrorTranslationContent\n  500?: GlobalErrorTranslationContent\n}\n\nconst defaultProps = {\n  // deprecated – Replaced with statusCode, status can be removed in v11.\n  status: '404',\n  statusCode: '404',\n}\n\nexport default function GlobalError(localProps: GlobalErrorAllProps) {\n  // Every component should have a context\n  const context = React.useContext(Context)\n\n  const translation = context.getTranslation(localProps)\n    .GlobalError as GlobalErrorTranslation\n\n  // Extract additional props from global context\n  const allProps = extendPropsWithContext(\n    localProps,\n    defaultProps,\n    context?.GlobalError,\n    translation,\n    translation[\n      localProps.status || localProps.statusCode || defaultProps.statusCode\n    ],\n    { skeleton: context?.skeleton }\n  )\n\n  const {\n    status,\n    statusCode,\n    skeleton,\n    center,\n    className,\n\n    title,\n    help,\n    code,\n    errorMessageCode,\n    links,\n    text,\n\n    ...attributes\n  } = allProps\n\n  // When status is deprecated, we just use the statusCode\n  const statusToUse = status !== defaultProps.status ? status : statusCode\n\n  const textParams: React.HTMLAttributes<HTMLElement> = {}\n  if (typeof text === 'string') {\n    textParams.dangerouslySetInnerHTML = { __html: text }\n  } else {\n    textParams.children = text\n  }\n\n  const spacingClasses = createSpacingClasses(attributes)\n\n  const params = {\n    className: classnames(\n      'dnb-global-error',\n      `dnb-global-error--${statusToUse}`,\n      center && 'dnb-global-error--center',\n      createSpacingClasses(attributes),\n      className,\n      spacingClasses\n    ),\n    ...attributes,\n  } as Record<string, unknown>\n\n  const additionalContent = processChildren(allProps)\n\n  // deprecated – Replaced with errorMessageCode, code and the line below can be removed in v11.\n  const userProvidedCodeValue = Object.prototype.hasOwnProperty.call(\n    localProps,\n    'code'\n  )\n\n  return (\n    <Skeleton {...params} show={skeleton} element=\"section\">\n      <div className=\"dnb-global-error__inner\">\n        <div className=\"dnb-global-error__inner__content\">\n          <H1 size=\"x-large\" top bottom>\n            {title}\n          </H1>\n          <P bottom {...textParams} />\n          {userProvidedCodeValue && code && (\n            <P bottom className=\"dnb-global-error__status\">\n              {code} {statusToUse && <Code>{statusToUse}</Code>}\n            </P>\n          )}\n          {!userProvidedCodeValue && errorMessageCode && (\n            <P bottom className=\"dnb-global-error__status\">\n              {String(errorMessageCode).replace(\n                '%statusCode',\n                statusToUse\n              )}\n            </P>\n          )}\n          {help && links?.length && (\n            <P top=\"medium\" bottom>\n              {help}\n            </P>\n          )}\n          {help && links?.length && (\n            <P bottom=\"large\" className=\"dnb-global-error__links\">\n              {links.map(({ text, url }) => {\n                return (\n                  <Anchor key={text} href={url}>\n                    {text}\n                  </Anchor>\n                )\n              })}\n            </P>\n          )}\n        </div>\n        {additionalContent}\n      </div>\n    </Skeleton>\n  )\n}\n\nGlobalError._supportsSpacingProps = true\n","/**\n * Web Skeleton Component\n *\n * This is a legacy component.\n * For referencing while developing new features, please use a Functional component.\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {\n  extendPropsWithContextInClassComponent,\n  validateDOMAttributes,\n  isTrue,\n} from '../../shared/component-helper'\nimport { LOCALE } from '../../shared/defaults'\nimport Space from '../space/Space'\nimport {\n  spacingPropTypes,\n  createSpacingClasses,\n} from '../space/SpacingHelper'\nimport Context from '../../shared/Context'\nimport Provider from '../../shared/Provider'\n\nexport default class Skeleton extends React.PureComponent {\n  static contextType = Context\n\n  static propTypes = {\n    show: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    no_animation: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    figure: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    aria_busy: PropTypes.string,\n    aria_ready: PropTypes.string,\n    element: PropTypes.node,\n\n    ...spacingPropTypes,\n\n    className: PropTypes.string,\n    children: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n  }\n\n  static defaultProps = {\n    show: null,\n    skeleton: null, // only to make sure we process extendPropsWithContextInClassComponent\n    no_animation: null,\n    figure: null,\n    aria_busy: null,\n    aria_ready: null,\n    element: null,\n    className: null,\n    children: null,\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = { ariaLiveUpdate: null }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this._ariaLiveUpdateTimeout)\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.show !== this.props.show) {\n      this.setAriaLiveUpdate()\n    }\n  }\n\n  getProps(props = this.props, context = this.context) {\n    return extendPropsWithContextInClassComponent(\n      props,\n      Skeleton.defaultProps,\n      {\n        skeleton: context.Skeleton || context.skeleton,\n        no_animation: context.skeleton_no_animation,\n      },\n      context.getTranslation(props).Skeleton\n    )\n  }\n\n  setAriaLiveUpdate() {\n    // this is only to make a better screen reader ux\n    clearTimeout(this._ariaLiveUpdateTimeout)\n    this._ariaLiveUpdateTimeout = setTimeout(() => {\n      const { aria_busy, aria_ready } = this.getProps()\n\n      let newString = null\n\n      if (isTrue(this.props.show)) {\n        newString = aria_busy\n      } else {\n        newString = aria_ready\n      }\n\n      if (newString) {\n        this.setState({\n          ariaLiveUpdate: newString,\n        })\n        this._ariaLiveUpdateTimeout = setTimeout(() => {\n          this.setState({\n            ariaLiveUpdate: null,\n          })\n        }, 1e3)\n      }\n    }, 1e3) // so that the input gets read out first, and then the results\n  }\n\n  render() {\n    // consume the skeleton context\n    const props = this.getProps()\n\n    const {\n      show,\n      no_animation,\n      figure,\n      skeleton,\n      aria_busy,\n      aria_ready, // eslint-disable-line\n      className,\n      children,\n\n      ...attributes\n    } = props\n\n    const { ariaLiveUpdate } = this.state\n\n    const showSkeleton =\n      typeof show === 'boolean' || typeof show === 'string'\n        ? isTrue(show)\n        : skeleton\n\n    const params = {\n      className: classnames(\n        figure ? 'dnb-skeleton__figure' : 'dnb-skeleton__root',\n        isTrue(showSkeleton) && 'dnb-skeleton',\n        isTrue(no_animation) && 'dnb-skeleton--no-animation',\n        createSpacingClasses(props),\n        className\n      ),\n      // role: 'status',// is not needed as for now\n      'aria-busy': showSkeleton,\n      'aria-label': showSkeleton ? aria_busy : undefined,\n      lang: this.context.locale || LOCALE,\n      ...attributes,\n    }\n\n    validateDOMAttributes(props, params)\n\n    return (\n      <Space {...params}>\n        {figure ? (\n          showSkeleton ? (\n            typeof figure === 'function' ? (\n              figure()\n            ) : (\n              figure\n            )\n          ) : (\n            children\n          )\n        ) : (\n          <Provider\n            skeleton={showSkeleton}\n            skeleton_no_animation={no_animation}\n          >\n            {children}\n          </Provider>\n        )}\n        <span className=\"dnb-sr-only\" aria-live=\"assertive\">\n          {ariaLiveUpdate}\n        </span>\n      </Space>\n    )\n  }\n}\n\nfunction Exclude(props) {\n  return <Provider {...props} skeleton={false} />\n}\n\nSkeleton.Exclude = Exclude\n\nSkeleton._supportsSpacingProps = true\n"],"names":["PageNotFound","_ref","location","pathname","_jsx","Provider","translations","GlobalError","text","children","Layout","hideSidebar","center","statusCode","defaultProps","status","localProps","context","React","Context","translation","getTranslation","allProps","extendPropsWithContext","skeleton","className","title","help","code","errorMessageCode","links","attributes","statusToUse","textParams","dangerouslySetInnerHTML","__html","spacingClasses","createSpacingClasses","params","classnames","additionalContent","processChildren","userProvidedCodeValue","Object","prototype","hasOwnProperty","call","Skeleton","show","element","_jsxs","H1","size","top","bottom","P","Code","String","replace","length","map","url","Anchor","href","_supportsSpacingProps","_React$PureComponent","props","_this","state","ariaLiveUpdate","_inheritsLoose","_proto","componentWillUnmount","clearTimeout","this","_ariaLiveUpdateTimeout","componentDidUpdate","prevProps","setAriaLiveUpdate","getProps","extendPropsWithContextInClassComponent","no_animation","skeleton_no_animation","setTimeout","aria_busy","aria_ready","newString","isTrue","setState","render","figure","showSkeleton","undefined","lang","locale","LOCALE","validateDOMAttributes","Space","contextType","Exclude"],"sourceRoot":""}