{"version":3,"file":"component---src-docs-404-tsx-9d3c18bf4080007fcd3a.js","mappings":"8NASe,SAASA,EAAYC,GAAe,IAAd,SAAEC,GAAUD,EAC/C,MAAM,SAAEE,GAAaD,EAErB,OACEE,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAAcH,SAAUA,EAAUI,aAAW,EAAAC,UAClDH,EAAAA,EAAAA,KAACI,EAAAA,EAAW,CACVC,QAAM,EACNC,OAAO,MACPC,MAAM,8BACNC,MACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAP,SAAA,CAAE,0BACsBH,EAAAA,EAAAA,KAAA,QAAAG,SAAOJ,UAPzB,SAahB,C,uMC8DA,MAAMY,EAAe,CACnBL,OAAQ,OAGK,SAASF,EAAYQ,GAElC,MAAMC,EAAUC,EAAAA,WAAiBC,EAAAA,GAE3BC,EAAcH,EAAQI,eAAeL,GACxCR,YAGGc,GAAWC,EAAAA,EAAAA,GACfP,EACAD,EACAE,aAAO,EAAPA,EAAST,YACTY,EACAA,EAAYJ,EAAWN,QAAUK,EAAaL,QAC9C,CAAEc,SAAUP,aAAO,EAAPA,EAASO,YAGjB,OACJd,EAAM,SACNc,EAAQ,OACRf,EAAM,UACNgB,EAAS,MAETd,EAAK,KACLe,EAAI,KACJC,EAAI,MACJC,EAAK,KACLhB,KAEGiB,GACDP,EAEEQ,EAAgD,CAAC,EACnC,iBAATlB,EACTkB,EAAWC,wBAA0B,CAAEC,OAAQpB,GAE/CkB,EAAWvB,SAAWK,EAGxB,MAAMqB,GAAiBC,EAAAA,EAAAA,IAAqBL,GAEtCM,EAAS,CACbV,UAAWW,IACT,mBACC,qBAAoB1B,IACrBD,GAAU,4BACVyB,EAAAA,EAAAA,IAAqBL,GACrBJ,EACAQ,MAECJ,GAGCQ,GAAoBC,EAAAA,EAAAA,IAAgBhB,GAE1C,OACElB,EAAAA,EAAAA,KAACmC,EAAAA,EAAQ,IAAKJ,EAAQK,KAAMhB,EAAUiB,QAAQ,UAASlC,UACrDM,EAAAA,EAAAA,MAAA,OAAKY,UAAU,0BAAyBlB,SAAA,EACtCM,EAAAA,EAAAA,MAAA,OAAKY,UAAU,mCAAkClB,SAAA,EAC/CH,EAAAA,EAAAA,KAACsC,EAAAA,EAAE,CAACC,KAAK,UAAUC,KAAG,EAACC,QAAM,EAAAtC,SAC1BI,KAEHP,EAAAA,EAAAA,KAAC0C,EAAAA,EAAC,CAACD,QAAM,KAAKf,IACbH,IACCd,EAAAA,EAAAA,MAACiC,EAAAA,EAAC,CAACD,QAAM,EAACpB,UAAU,2BAA0BlB,SAAA,CAC3CoB,EAAK,KAACvB,EAAAA,EAAAA,KAAC2C,EAAAA,EAAI,CAAAxC,SAAEG,OAGjBgB,IAAQE,aAAK,EAALA,EAAOoB,UACd5C,EAAAA,EAAAA,KAAC0C,EAAAA,EAAC,CAACF,IAAI,SAASC,QAAM,EAAAtC,SACnBmB,IAGJA,IAAQE,aAAK,EAALA,EAAOoB,UACd5C,EAAAA,EAAAA,KAAC0C,EAAAA,EAAC,CAACD,OAAO,QAAQpB,UAAU,0BAAyBlB,SAClDqB,EAAMqB,KAAIhD,IAAoB,IAAnB,KAAEW,EAAI,IAAEsC,GAAKjD,EACvB,OACEG,EAAAA,EAAAA,KAAC+C,EAAAA,GAAM,CAAYC,KAAMF,EAAI3C,SAC1BK,GADUA,EAEJ,SAMlByB,MAIT,CAEA7B,EAAY6C,uBAAwB,C,4LCjKQ,IAEvBd,EAAQ,SAAAe,GAuC3B,SAAAf,EAAYgB,GAAQ,IAADC,EAEoB,OADrCA,EAAAF,EAAAG,KAAA,KAAMF,IAAM,MACPG,MAAQ,CAAEC,eAAgB,MAAMH,CACvC,EA1C2BI,EAAAA,EAAAA,GAAArB,EAAAe,GA0C1B,IAAAO,EAAAtB,EAAAuB,UAuHA,OAvHAD,EAEDE,qBAAA,WACEC,aAAaC,KAAKC,uBACpB,EAACL,EAEDM,mBAAA,SAAmBC,GACbA,EAAU5B,OAASyB,KAAKV,MAAMf,MAChCyB,KAAKI,mBAET,EAACR,EAEDS,SAAA,SAASf,EAAoBtC,GAC3B,YADY,IAALsC,IAAAA,EAAQU,KAAKV,YAAc,IAAPtC,IAAAA,EAAUgD,KAAKhD,UACnCsD,EAAAA,EAAAA,GACLhB,EACAhB,EAASxB,aACT,CACES,SAAUP,EAAQsB,UAAYtB,EAAQO,SACtCgD,aAAcvD,EAAQwD,uBAExBxD,EAAQI,eAAekC,GAAOhB,SAElC,EAACsB,EAEDQ,kBAAA,WAEEL,aAAaC,KAAKC,wBAClBD,KAAKC,uBAAyBQ,YAAW,KACvC,MAAM,UAAEC,EAAS,WAAEC,GAAeX,KAAKK,WAEvC,IAAIO,EAAY,KAGdA,GADEC,EAAAA,EAAAA,IAAOb,KAAKV,MAAMf,MACRmC,EAEAC,EAGVC,IACFZ,KAAKc,SAAS,CACZpB,eAAgBkB,IAElBZ,KAAKC,uBAAyBQ,YAAW,KACvCT,KAAKc,SAAS,CACZpB,eAAgB,MAChB,GACD,KACL,GACC,IACL,EAACE,EAEDmB,OAAA,WAEE,MAAMzB,EAAQU,KAAKK,YAEb,KACJ9B,EAAI,aACJgC,EAAY,OACZS,EAAM,SACNzD,EAAQ,UACRmD,EAAS,WACTC,EAAU,UACVnD,EACAyD,MAAOC,EAAU,SACjB5E,KAEGsB,GACD0B,GAEE,eAAEI,GAAmBM,KAAKP,MAE1B0B,EACY,kBAAT5C,GAAsC,iBAATA,GAChCsC,EAAAA,EAAAA,IAAOtC,GACPhB,EAEAW,EAAS,CACbV,UAAWW,IACT6C,EAAS,uBAAyB,sBAClCH,EAAAA,EAAAA,IAAOM,IAAiB,gBACxBN,EAAAA,EAAAA,IAAON,IAAiB,8BACxBtC,EAAAA,EAAAA,IAAqBqB,GACrB9B,EACA0D,GAGF,YAAaC,EACb,aAAcA,EAAeT,OAAYU,EACzCC,KAAMrB,KAAKhD,QAAQsE,QAAUC,EAAAA,MAC1B3D,GAKL,OAFA4D,EAAAA,EAAAA,IAAsBlC,EAAOpB,IAG3BtB,EAAAA,EAAAA,MAAC6E,EAAAA,EAAK,IAAKvD,EAAM5B,SAAA,CACd0E,EACCG,EACoB,mBAAXH,EACLA,IAEAA,EAGF1E,GAGFH,EAAAA,EAAAA,KAACuF,EAAAA,EAAQ,CACPnE,SAAU4D,EACVX,sBAAuBD,EAAajE,SAEnCA,KAGLH,EAAAA,EAAAA,KAAA,QAAMqB,UAAU,cAAc,YAAU,YAAWlB,SAChDoD,MAIT,EAACpB,CAAA,CAjK0B,CAASrB,EAAAA,eAAjBqB,EACZqD,YAAczE,EAAAA,EADFoB,EA0BZxB,aAAe,CACpByB,KAAM,KACNhB,SAAU,KACVgD,aAAc,KACdS,OAAQ,KACRN,UAAW,KACXC,WAAY,KACZnC,QAAS,KACTyC,MAAO,KACPzD,UAAW,KACXlB,SAAU,MAoIdgC,EAASsD,QAJT,SAAiBtC,GACf,OAAOnD,EAAAA,EAAAA,KAACuF,EAAAA,EAAQ,IAAKpC,EAAO/B,UAAU,GACxC,EAIAe,EAASc,uBAAwB,C","sources":["webpack://dnb-design-system-portal/./src/docs/404.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/global-error/GlobalError.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/skeleton/Skeleton.js"],"sourcesContent":["/**\n * Page not found\n *\n */\n\nimport React from 'react'\nimport { GlobalError } from '@dnb/eufemia/src/components'\nimport Layout from '../shared/parts/Layout'\n\nexport default function PageNotFound({ location }) {\n  const { pathname } = location\n\n  return (\n    <Layout key=\"layout\" location={location} hideSidebar>\n      <GlobalError\n        center\n        status=\"404\"\n        title=\"We couldn't find that page!\"\n        text={\n          <>\n            There's not a page at <code>{pathname}</code>\n          </>\n        }\n      />\n    </Layout>\n  )\n}\n","/**\n * Web GlobalError Component\n *\n */\n\nimport React from 'react'\nimport classnames from 'classnames'\nimport Context, { GetTranslationProps } from '../../shared/Context'\nimport {\n  processChildren,\n  extendPropsWithContext,\n} from '../../shared/component-helper'\nimport { createSpacingClasses } from '../space/SpacingHelper'\nimport Anchor from '../anchor/Anchor'\nimport Skeleton, { SkeletonShow } from '../skeleton/Skeleton'\nimport { H1, P, Code } from '../../elements'\nimport type { SpacingProps } from '../../shared/types'\n\nexport type GlobalErrorLink = {\n  text: string\n  url: string\n}\n\nexport type GlobalErrorProps = {\n  /**\n   * When `404` or `500` is given, a predefined text will be shown.\n   * Defaults to `400`.\n   */\n  status?: '404' | '500' | string\n\n  /**\n   * Will overwrite the default title.\n   */\n  title?: React.ReactNode\n\n  /**\n   * Will overwrite the default text.\n   */\n  text?: React.ReactNode\n\n  /**\n   * Will overwrite the default error message code.\n   */\n  code?: React.ReactNode\n\n  /**\n   * Will overwrite the default additional help text.\n   */\n  help?: React.ReactNode\n\n  /**\n   * Provide an array with objects `{ text: 'Text', url: 'https://...' }` to display a list of anchor links.\n   */\n  links?: Array<GlobalErrorLink>\n\n  /**\n   * If true, it will use 80vh as the height and center its content.\n   */\n  center?: boolean\n\n  /**\n   * Skeleton should be applied when loading content\n   * Default: null\n   */\n  skeleton?: SkeletonShow\n}\n\nexport type GlobalErrorAllProps = GlobalErrorProps &\n  Omit<React.HTMLProps<HTMLElement>, 'ref'> &\n  SpacingProps &\n  GetTranslationProps\n\nexport type GlobalErrorTranslationContent = {\n  /**\n   * Defining a `title` will overwrite the default provided by `status_content`.\n   */\n  title?: React.ReactNode\n\n  /**\n   * Defining a `text` will overwrite the default provided by `status_content`.\n   */\n  text?: React.ReactNode\n}\nexport type GlobalErrorTranslation = {\n  404?: GlobalErrorTranslationContent\n  500?: GlobalErrorTranslationContent\n}\n\nconst defaultProps = {\n  status: '404',\n}\n\nexport default function GlobalError(localProps: GlobalErrorAllProps) {\n  // Every component should have a context\n  const context = React.useContext(Context)\n\n  const translation = context.getTranslation(localProps)\n    .GlobalError as GlobalErrorTranslation\n\n  // Extract additional props from global context\n  const allProps = extendPropsWithContext(\n    localProps,\n    defaultProps,\n    context?.GlobalError,\n    translation,\n    translation[localProps.status || defaultProps.status],\n    { skeleton: context?.skeleton }\n  )\n\n  const {\n    status,\n    skeleton,\n    center,\n    className,\n\n    title,\n    help,\n    code,\n    links,\n    text,\n\n    ...attributes\n  } = allProps\n\n  const textParams: React.HTMLAttributes<HTMLElement> = {}\n  if (typeof text === 'string') {\n    textParams.dangerouslySetInnerHTML = { __html: text }\n  } else {\n    textParams.children = text\n  }\n\n  const spacingClasses = createSpacingClasses(attributes)\n\n  const params = {\n    className: classnames(\n      'dnb-global-error',\n      `dnb-global-error--${status}`,\n      center && 'dnb-global-error--center',\n      createSpacingClasses(attributes),\n      className,\n      spacingClasses\n    ),\n    ...attributes,\n  } as Record<string, unknown>\n\n  const additionalContent = processChildren(allProps)\n\n  return (\n    <Skeleton {...params} show={skeleton} element=\"section\">\n      <div className=\"dnb-global-error__inner\">\n        <div className=\"dnb-global-error__inner__content\">\n          <H1 size=\"x-large\" top bottom>\n            {title}\n          </H1>\n          <P bottom {...textParams} />\n          {code && (\n            <P bottom className=\"dnb-global-error__status\">\n              {code} <Code>{status}</Code>\n            </P>\n          )}\n          {help && links?.length && (\n            <P top=\"medium\" bottom>\n              {help}\n            </P>\n          )}\n          {help && links?.length && (\n            <P bottom=\"large\" className=\"dnb-global-error__links\">\n              {links.map(({ text, url }) => {\n                return (\n                  <Anchor key={text} href={url}>\n                    {text}\n                  </Anchor>\n                )\n              })}\n            </P>\n          )}\n        </div>\n        {additionalContent}\n      </div>\n    </Skeleton>\n  )\n}\n\nGlobalError._supportsSpacingProps = true\n","/**\n * Web Skeleton Component\n *\n * This is a legacy component.\n * For refferencing while developing new features, please use a Functional component.\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport {\n  extendPropsWithContextInClassComponent,\n  validateDOMAttributes,\n  isTrue,\n} from '../../shared/component-helper'\nimport { LOCALE } from '../../shared/defaults'\nimport Space from '../space/Space'\nimport {\n  spacingPropTypes,\n  createSpacingClasses,\n} from '../space/SpacingHelper'\nimport Context from '../../shared/Context'\nimport Provider from '../../shared/Provider'\n\nexport default class Skeleton extends React.PureComponent {\n  static contextType = Context\n\n  static propTypes = {\n    show: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    no_animation: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    figure: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n    aria_busy: PropTypes.string,\n    aria_ready: PropTypes.string,\n    element: PropTypes.node,\n\n    ...spacingPropTypes,\n\n    class: PropTypes.string,\n    className: PropTypes.string,\n    children: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n      PropTypes.node,\n    ]),\n  }\n\n  static defaultProps = {\n    show: null,\n    skeleton: null, // only to make sure we process extendPropsWithContextInClassComponent\n    no_animation: null,\n    figure: null,\n    aria_busy: null,\n    aria_ready: null,\n    element: null,\n    class: null,\n    className: null,\n    children: null,\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = { ariaLiveUpdate: null }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this._ariaLiveUpdateTimeout)\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.show !== this.props.show) {\n      this.setAriaLiveUpdate()\n    }\n  }\n\n  getProps(props = this.props, context = this.context) {\n    return extendPropsWithContextInClassComponent(\n      props,\n      Skeleton.defaultProps,\n      {\n        skeleton: context.Skeleton || context.skeleton,\n        no_animation: context.skeleton_no_animation,\n      },\n      context.getTranslation(props).Skeleton\n    )\n  }\n\n  setAriaLiveUpdate() {\n    // this is only to make a better screen reader ux\n    clearTimeout(this._ariaLiveUpdateTimeout)\n    this._ariaLiveUpdateTimeout = setTimeout(() => {\n      const { aria_busy, aria_ready } = this.getProps()\n\n      let newString = null\n\n      if (isTrue(this.props.show)) {\n        newString = aria_busy\n      } else {\n        newString = aria_ready\n      }\n\n      if (newString) {\n        this.setState({\n          ariaLiveUpdate: newString,\n        })\n        this._ariaLiveUpdateTimeout = setTimeout(() => {\n          this.setState({\n            ariaLiveUpdate: null,\n          })\n        }, 1e3)\n      }\n    }, 1e3) // so that the input gets read out first, and then the results\n  }\n\n  render() {\n    // consume the skeleton context\n    const props = this.getProps()\n\n    const {\n      show,\n      no_animation,\n      figure,\n      skeleton,\n      aria_busy,\n      aria_ready, // eslint-disable-line\n      className,\n      class: _className,\n      children,\n\n      ...attributes\n    } = props\n\n    const { ariaLiveUpdate } = this.state\n\n    const showSkeleton =\n      typeof show === 'boolean' || typeof show === 'string'\n        ? isTrue(show)\n        : skeleton\n\n    const params = {\n      className: classnames(\n        figure ? 'dnb-skeleton__figure' : 'dnb-skeleton__root',\n        isTrue(showSkeleton) && 'dnb-skeleton',\n        isTrue(no_animation) && 'dnb-skeleton--no-animation',\n        createSpacingClasses(props),\n        className,\n        _className\n      ),\n      // role: 'status',// is not needed as for now\n      'aria-busy': showSkeleton,\n      'aria-label': showSkeleton ? aria_busy : undefined,\n      lang: this.context.locale || LOCALE,\n      ...attributes,\n    }\n\n    validateDOMAttributes(props, params)\n\n    return (\n      <Space {...params}>\n        {figure ? (\n          showSkeleton ? (\n            typeof figure === 'function' ? (\n              figure()\n            ) : (\n              figure\n            )\n          ) : (\n            children\n          )\n        ) : (\n          <Provider\n            skeleton={showSkeleton}\n            skeleton_no_animation={no_animation}\n          >\n            {children}\n          </Provider>\n        )}\n        <span className=\"dnb-sr-only\" aria-live=\"assertive\">\n          {ariaLiveUpdate}\n        </span>\n      </Space>\n    )\n  }\n}\n\nfunction Exclude(props) {\n  return <Provider {...props} skeleton={false} />\n}\n\nSkeleton.Exclude = Exclude\n\nSkeleton._supportsSpacingProps = true\n"],"names":["PageNotFound","_ref","location","pathname","_jsx","Layout","hideSidebar","children","GlobalError","center","status","title","text","_jsxs","_Fragment","defaultProps","localProps","context","React","Context","translation","getTranslation","allProps","extendPropsWithContext","skeleton","className","help","code","links","attributes","textParams","dangerouslySetInnerHTML","__html","spacingClasses","createSpacingClasses","params","classnames","additionalContent","processChildren","Skeleton","show","element","H1","size","top","bottom","P","Code","length","map","url","Anchor","href","_supportsSpacingProps","_React$PureComponent","props","_this","call","state","ariaLiveUpdate","_inheritsLoose","_proto","prototype","componentWillUnmount","clearTimeout","this","_ariaLiveUpdateTimeout","componentDidUpdate","prevProps","setAriaLiveUpdate","getProps","extendPropsWithContextInClassComponent","no_animation","skeleton_no_animation","setTimeout","aria_busy","aria_ready","newString","isTrue","setState","render","figure","class","_className","showSkeleton","undefined","lang","locale","LOCALE","validateDOMAttributes","Space","Provider","contextType","Exclude"],"sourceRoot":""}