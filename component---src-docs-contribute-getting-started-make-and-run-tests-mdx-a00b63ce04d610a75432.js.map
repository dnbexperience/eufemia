{"version":3,"file":"component---src-docs-contribute-getting-started-make-and-run-tests-mdx-a00b63ce04d610a75432.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/contribute/getting-started/make-and-run-tests.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    em: \"em\",\n    a: \"a\",\n    h2: \"h2\",\n    ol: \"ol\",\n    pre: \"pre\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Make and run tests\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Make tests for the new component (or for your current issue) and set up screenshot tests from the Eufemia portal. The tests should be located under \", _jsx(_components.code, {\n        children: \"__tests__\"\n      }), \" in the component folder.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Tip 1: Create tests for each \", _jsx(_components.em, {\n          children: \"prop\"\n        }), \" that change your component.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Tip 2: Always check and make the tests fail when you are writing tests.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"More on testing in the \", _jsx(_components.a, {\n        href: \"/uilib/usage/best-practices/for-testing#testing-frontend-code\",\n        children: \"UI Library\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Running tests locally\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Run the commands from the repository's root folder. Replace \", _jsx(_components.code, {\n        children: \"breadcrumb\"\n      }), \" with your component's name in the commands.\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Run the integration tests:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"# Run all tests\\nyarn test\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"# Execute the tests on file (git) changes\\nyarn test:watch\\n\\n# Run all tests including the word 'breadcrumb'\\nyarn test breadcrumb\\n\\n# Or be more specific\\nyarn test /breadcrumb.test.tsx\\n\\n# Run several together\\nyarn test breadcrumb avatar button\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Update the changed snapshots:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"yarn test:update\\n\\n# More specific\\nyarn test:update breadcrumb avatar\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Jest integration tests uses this naming convention: \", _jsx(_components.code, {\n        children: \"/__tests__/{ComponentName}.test.tsx\"\n      })]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Run visual and end-to-end test:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"NB:\"\n      }), \" Make sure you have the portal running locally on port 8000.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Visual tests:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"# 1. First start the portal\\nyarn start\\n\\n# 2. Then run screenshot tests for e.g. 'breadcrumb' or 'avatar'\\nyarn test:screenshots breadcrumb avatar\\n\\n# You can also start it in watch mode\\nyarn test:screenshots:watch breadcrumb avatar\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Visual tests uses this naming convention: \", _jsx(_components.code, {\n        children: \"/__tests__/{ComponentName}.e2e.spec.ts\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Playwright end-to-end tests:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"# 1. First start the portal\\nyarn start\\n\\n# 2. Then run Playwright tests including 'Slider' or 'Button'\\nyarn test:e2e /Slider\\\\|Button/\\n\\n# You can also start it in watch mode\\nyarn test:e2e:watch\\n\\n# Or run the tests for the portal\\nyarn test:e2e:portal\\nyarn test:e2e:portal:watch\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Playwright uses this naming convention: \", _jsx(_components.code, {\n        children: \"/__tests__/{ComponentName}.screenshot.test.ts\"\n      })]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"4\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Update eventually new or valid visual PNG snapshots:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"# Update screenshot tests including 'breadcrumb'\\nyarn test:screenshots:update breadcrumb\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also press the \", _jsx(_components.code, {\n        children: \"u\"\n      }), \" during a watch mode to update outdated snapshots.\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"5\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"How to deal with failing visual tests?\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When a visual test fails, a visual comparison file (diff) will be created. Its location and name will be:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"**/__tests__/__image_snapshots__/__diff_output__/*.snap-diff.png\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"you can find a report entry (\", _jsx(_components.code, {\n        children: \"index.html\"\n      }), \"), that lists all of the failed tests here:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"/packages/dnb-eufemia/jest-visual-diff-report/index.html\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You may check out the CI/CLI logs for more details.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"GitHub Actions:\"\n      }), \" If visual screenshot test is failing on the CI, you can navigate to the test \\\"Summary\\\" where you can find \\\"Artifacts\\\". There you can download the \", _jsx(_components.strong, {\n        children: \"visual-test-artifact\"\n      }), \" zip file, containing the visual diff files as well as the report entry inside \", _jsx(_components.code, {\n        children: \"/jest-visual-diff-report\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Support SCSS snapshot test\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Add a similar code snippet to your tests for watching changes in the SCSS you just created.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"import { loadScss } from '../../../core/jest/jestSetup'\\ndescribe('Button scss', () => {\\n  it('has to match style dependencies css', () => {\\n    const css = loadScss(require.resolve('../style/deps.scss'))\\n    expect(css).toMatchSnapshot()\\n  })\\n\\n  it.each(['ui', 'sbanken'])(\\n    'has to match theme css for %s',\\n    (themeName) => {\\n      const css = loadScss(\\n        require.resolve(\\n          `../style/themes/dnb-button-theme-${themeName}.scss`,\\n        ),\\n      )\\n      expect(css).toMatchSnapshot()\\n    },\\n  )\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Support Axe test\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Add a similar code snippet to your tests (as the last test). It will test the accessibility of your new component. Read more on \", _jsx(_components.a, {\n        href: \"https://github.com/nickcolley/jest-axe\",\n        children: \"Jest Axe\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"describe('Breadcrumb aria', () => {\\n  it('should validate', async () => {\\n    const Component = render(\\n      <Breadcrumb\\n        data={[\\n          { href: '/' },\\n          { href: '/page1', text: 'Page 1' },\\n          { href: '/page1/page2', text: 'Page 2' },\\n        ]}\\n        variant=\\\"collapse\\\"\\n        isCollapsed={false}\\n      />,\\n    )\\n    expect(await axeComponent(Component)).toHaveNoViolations()\\n  })\\n})\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","code","ul","li","em","a","h2","ol","pre","strong","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","className","start","wrapper","MDXLayout"],"sourceRoot":""}