"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[79812],{59028:function(e,n,i){i.r(n);var s=i(31085),t=i(71184);function o(e){const n=Object.assign({h1:"h1",p:"p",a:"a",h2:"h2",ul:"ul",li:"li",code:"code",pre:"pre",ol:"ol"},(0,t.R)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{children:"Code guide"}),"\n",(0,s.jsx)(n.p,{children:"To assure that the source code remains consistent regardless of the amount of contributors, a set of code principles has been established."}),"\n",(0,s.jsxs)(n.p,{children:["The set of main code principles within JS, CSS, Typography and testing are located in the ",(0,s.jsx)(n.a,{href:"/uilib/usage/best-practices",children:"UI Library - Best practices"}),". Below is more related to further developing the Eufemia repository."]}),"\n",(0,s.jsx)(n.h2,{children:"Recommended Tools"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.a,{href:"https://volta.sh/",children:"Volta"})," for ",(0,s.jsx)(n.a,{href:"https://nodejs.org/",children:"Node.js"})," version handling."]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.a,{href:"https://eslint.org/docs/user-guide/integrations",children:"ESLint"})," and ",(0,s.jsx)(n.a,{href:"https://prettier.io/docs/en/editors.html",children:"Prettier"})," plugins in your favorite code editor to show related issues inline."]}),"\n",(0,s.jsxs)(n.li,{children:["See the helpers section about ",(0,s.jsx)(n.a,{href:"/uilib/helpers/tools",children:"Eufemia tools"})," for more recommendations."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{children:"Linting"}),"\n",(0,s.jsxs)(n.p,{children:["JavaScript and Style linting is mandatory for merging commits in Eufemia. During a commit (locally), your commit content (code) should be tested with both static and integration tests. You may run ",(0,s.jsx)(n.code,{children:"yarn test"})," or ",(0,s.jsx)(n.code,{children:"yarn test:update"})," before you try to commit. You may also write new tests for your code before committing."]}),"\n",(0,s.jsx)(n.p,{children:"The Code Base is based on several Static Tests to help the code to be uniform:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Prettier"}),"\n",(0,s.jsx)(n.li,{children:"ESLint"}),"\n",(0,s.jsx)(n.li,{children:"StyleLint"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"You may consider to install plugins for your editor of choice - to visualize and run the code formatters and linters based on the given config files. This way you can immediately see how the code will and have to consist."}),"\n",(0,s.jsx)(n.p,{children:"Either include the plugins in your code editor, or run the following command after you made changes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"yarn workspace dnb/eufemia lint:js && yarn workspace @dnb/eufemia lint:styles\n"})}),"\n",(0,s.jsxs)(n.p,{children:["For only checking valid formatting, you can run ",(0,s.jsx)(n.code,{children:"yarn workspace @dnb/eufemia prettier:check"}),". You may want to run ",(0,s.jsx)(n.code,{children:"yarn workspace @dnb/eufemia prettier:write"})," to format all relevant files."]}),"\n",(0,s.jsx)(n.p,{children:"Fix the resulted warnings and error before you commit and merge."}),"\n",(0,s.jsxs)(n.p,{children:["The same command as above applies to the workspace: ",(0,s.jsx)(n.code,{children:"yarn workspace dnb-design-system-portal ..."}),"."]}),"\n",(0,s.jsx)(n.h2,{children:"TypeScript and type checking"}),"\n",(0,s.jsx)(n.p,{children:"TypeScript types are mandatory for merging commits in Eufemia. During a commit (locally), your commit content (code) should be tested. You may run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"yarn workspace @dnb/eufemia test:types\n"})}),"\n",(0,s.jsx)(n.p,{children:"Fix the resulted warnings and errors before you commit and merge."}),"\n",(0,s.jsx)(n.h2,{children:"CSS code formatting"}),"\n",(0,s.jsxs)(n.p,{children:["Eufemia uses ",(0,s.jsx)(n.a,{href:"/uilib/usage/best-practices/for-styling/#styling-structure",children:"CSS rational order"}),"."]}),"\n",(0,s.jsx)(n.h2,{children:"Code comments"}),"\n",(0,s.jsx)(n.p,{children:"Commenting code can be a helpful hint to understand written code for other developers trying to get a picture of whats going on. But code comments can also be quickly an extra layer of complexity while reading code."}),"\n",(0,s.jsx)(n.p,{children:"Follow this list below to increase consistent code:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"An intro at the start of a file can give an overview."}),"\n",(0,s.jsx)(n.li,{children:"Enhance the naming of variables and functions over comments."}),"\n",(0,s.jsx)(n.li,{children:"Do not explain what code does, but rather what is the rationale behind a block of code."}),"\n",(0,s.jsx)(n.li,{children:"Code comments should be optional to consume while reading the code. They should be a helping hand â€“ if needed."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Eufemia has some (",(0,s.jsx)(n.code,{children:"multiline-comment-style"})," and ",(0,s.jsx)(n.code,{children:"spaced-comment"}),") ESLint and StyleLint rules to enhance consistent code comment styles."]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.R)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(o,e)})):o(e)}}}]);
//# sourceMappingURL=component---src-docs-contribute-style-guides-coding-mdx-ad906b05222d0c4522f1.js.map