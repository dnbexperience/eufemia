{"version":3,"file":"component---src-docs-contribute-style-guides-coding-mdx-ad906b05222d0c4522f1.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/contribute/style-guides/coding.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    pre: \"pre\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Code guide\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To assure that the source code remains consistent regardless of the amount of contributors, a set of code principles has been established.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The set of main code principles within JS, CSS, Typography and testing are located in the \", _jsx(_components.a, {\n        href: \"/uilib/usage/best-practices\",\n        children: \"UI Library - Best practices\"\n      }), \". Below is more related to further developing the Eufemia repository.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Recommended Tools\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Use \", _jsx(_components.a, {\n          href: \"https://volta.sh/\",\n          children: \"Volta\"\n        }), \" for \", _jsx(_components.a, {\n          href: \"https://nodejs.org/\",\n          children: \"Node.js\"\n        }), \" version handling.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use \", _jsx(_components.a, {\n          href: \"https://eslint.org/docs/user-guide/integrations\",\n          children: \"ESLint\"\n        }), \" and \", _jsx(_components.a, {\n          href: \"https://prettier.io/docs/en/editors.html\",\n          children: \"Prettier\"\n        }), \" plugins in your favorite code editor to show related issues inline.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"See the helpers section about \", _jsx(_components.a, {\n          href: \"/uilib/helpers/tools\",\n          children: \"Eufemia tools\"\n        }), \" for more recommendations.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Linting\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"JavaScript and Style linting is mandatory for merging commits in Eufemia. During a commit (locally), your commit content (code) should be tested with both static and integration tests. You may run \", _jsx(_components.code, {\n        children: \"yarn test\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"yarn test:update\"\n      }), \" before you try to commit. You may also write new tests for your code before committing.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Code Base is based on several Static Tests to help the code to be uniform:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Prettier\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ESLint\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"StyleLint\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You may consider to install plugins for your editor of choice - to visualize and run the code formatters and linters based on the given config files. This way you can immediately see how the code will and have to consist.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Either include the plugins in your code editor, or run the following command after you made changes:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"yarn workspace dnb/eufemia lint:js && yarn workspace @dnb/eufemia lint:styles\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For only checking valid formatting, you can run \", _jsx(_components.code, {\n        children: \"yarn workspace @dnb/eufemia prettier:check\"\n      }), \". You may want to run \", _jsx(_components.code, {\n        children: \"yarn workspace @dnb/eufemia prettier:write\"\n      }), \" to format all relevant files.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Fix the resulted warnings and error before you commit and merge.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The same command as above applies to the workspace: \", _jsx(_components.code, {\n        children: \"yarn workspace dnb-design-system-portal ...\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"TypeScript and type checking\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"TypeScript types are mandatory for merging commits in Eufemia. During a commit (locally), your commit content (code) should be tested. You may run:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"yarn workspace @dnb/eufemia test:types\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Fix the resulted warnings and errors before you commit and merge.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"CSS code formatting\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Eufemia uses \", _jsx(_components.a, {\n        href: \"/uilib/usage/best-practices/for-styling/#styling-structure\",\n        children: \"CSS rational order\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Code comments\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Commenting code can be a helpful hint to understand written code for other developers trying to get a picture of whats going on. But code comments can also be quickly an extra layer of complexity while reading code.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Follow this list below to increase consistent code:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"An intro at the start of a file can give an overview.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Enhance the naming of variables and functions over comments.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Do not explain what code does, but rather what is the rationale behind a block of code.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Code comments should be optional to consume while reading the code. They should be a helping hand – if needed.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Eufemia has some (\", _jsx(_components.code, {\n        children: \"multiline-comment-style\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"spaced-comment\"\n      }), \") ESLint and StyleLint rules to enhance consistent code comment styles.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","a","h2","ul","li","code","pre","ol","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","className","wrapper","MDXLayout"],"sourceRoot":""}