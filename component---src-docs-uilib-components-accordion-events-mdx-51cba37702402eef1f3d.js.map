{"version":3,"file":"component---src-docs-uilib-components-accordion-events-mdx-51cba37702402eef1f3d.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/accordion/events.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/AccordionDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {AccordionEvents} from '@dnb/eufemia/src/components/accordion/AccordionDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Events\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: AccordionEvents\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colors = {\n  type: {\n    default: 'var(--color-success-green)',\n    primitive: 'var(--color-success-green)',\n    string: 'var(--color-fire-red)',\n  },\n  value: {\n    default: 'var(--color-success-green)',\n    undefined: 'var(--color-black-55)',\n    string: 'var(--color-fire-red)',\n  },\n}\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = isString(children)\n          ? colors.type.string\n          : isPrimitive(children)\n          ? colors.type.primitive\n          : colors.type.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n      case 'value': {\n        style.color = isString(children)\n          ? colors.value.string\n          : children === 'undefined' || children === 'null'\n          ? colors.value.undefined\n          : colors.value.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\nfunction isString(str: string) {\n  return [\"'\", '\"', '`'].includes(str.substring(0, 1))\n}\n\nfunction isPrimitive(type: string) {\n  return [\n    'boolean',\n    'true',\n    'false',\n    'number',\n    'bigint',\n    'string',\n    'symbol',\n  ].includes(typeWithoutArray(type))\n}\n\nfunction typeWithoutArray(type: string) {\n  if (type.endsWith('[]')) {\n    return type.slice(0, -2)\n  } else if (type.startsWith('Array<') && type.endsWith('>')) {\n    return type.slice(6, -1)\n  }\n  return type\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('[')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const AccordionProperties: PropertiesTableProps = {\n  id: {\n    doc: 'A unique `id` that will be used on the button element. If you use `remember_state`, an id is required.',\n    type: 'string',\n    status: 'optional',\n  },\n  title: {\n    doc: 'A title as a string or React element. It will be used as the button text.',\n    type: 'string',\n    status: 'optional',\n  },\n  expanded: {\n    doc: 'If set to `true` the accordion will be expanded as its initial state.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  expanded_ssr: {\n    doc: \"If set to `true` the accordion will be expanded during SSR. Can be potentially useful for SEO, although it will disturb client hydration, where React expects the same state. But that's mainly a technical aspect to consider.\",\n    type: 'boolean',\n    status: 'optional',\n  },\n  remember_state: {\n    doc: 'If set to `true`, it will remember a changed state initiated by the user. It requires a unique `id`. It will store the state in the local storage.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  flush_remembered_state: {\n    doc: 'If set to `true`, the saved (remembered) state will be removed and the initial component state will be used and set.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  no_animation: {\n    doc: 'If set to `true`, the open and close animation will be omitted.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  variant: {\n    doc: 'Defines the used styling. `Outlined`, `filled`, or `plain` (no styling). Defaults to `outlined`.',\n    type: ['outlined', 'filled', 'plain'],\n    status: 'optional',\n  },\n  icon: {\n    doc: 'Will replace the `chevron` icon. The icon will still rotate (by CSS). You can use an object to use two different icons, one for the closed state and one for the expanded state `{ closed, expanded }`.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  icon_position: {\n    doc: 'Will set the placement of the icon. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'Define a different icon size. Defaults to `medium` (1.5rem).',\n    type: 'string',\n    status: 'optional',\n  },\n  left_component: {\n    doc: 'Will add a React element on the left side of the `title`, inside `AccordionHeaderContainer`.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  prerender: {\n    doc: 'If set to `true` the content will be present, even the accordion is not expanded. Can be useful for assistive technology or SEO.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  prevent_rerender: {\n    doc: \"If set to `true` the accordion component will not re-render its content – can be useful for components you don't have control of storing the temporary state during an interaction.\",\n    type: 'boolean',\n    status: 'optional',\n  },\n  prevent_rerender_conditional: {\n    doc: 'Use this prop together with `prevent_rerender` – and if it is set to `true`, the accordion component will re-render if the children are a new React element and do not match the previous one anymore.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  single_container: {\n    doc: 'If set to `true`, a group of accordions will be wrapped to a sidebar looking menu for medium and larger screens.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  element: {\n    doc: 'Gives you the option to replace the used `button` element. Provide a React element, including a string (HTML element). Defaults to a `div` with all the needed accessibility features included.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  heading: {\n    doc: 'If set to `true`, level 2 (h2) will be used. You can provide your own HTML heading (`h3`), or provide a `heading_level` property.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  heading_level: {\n    doc: 'If `heading` is set to `true`, you can provide a numeric value to define a different heading level. Defaults to `2`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'If set to `true`, the accordion button will be disabled (dimmed).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  contentRef: {\n    doc: 'Send along a custom React Ref for `.dnb-accordion__content`.',\n    type: 'function',\n    status: 'optional',\n  },\n  collapseAllHandleRef: {\n    doc: 'Ref handle to collapse all expanded accordions. Send in a ref and use `.current()` to collapse all accordions. Default: `undefined`.',\n    type: 'React.MutableRefObject<() => void>',\n    status: 'optional',\n  },\n  space: {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const AccordionProviderGroupProperties: PropertiesTableProps = {\n  group: {\n    doc: \"Define a unique id, it will be used to 'group' several accordions into one.\",\n    type: 'string',\n    status: 'optional',\n  },\n  allow_close_all: {\n    doc: 'If set to `true`, the group of accordions will allow all to close.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  expandBehaviour: {\n    doc: 'Use `expandBehavior` instead.',\n    type: ['single', 'multiple'],\n    status: 'deprecated',\n  },\n  expandBehavior: {\n    doc: 'Determines how many accordions can be expanded at once. Defaults to `single`.',\n    type: ['single', 'multiple'],\n    status: 'optional',\n  },\n  expanded_id: {\n    doc: 'Define an `id` of a nested accordion that will get expanded.',\n    type: 'string',\n    status: 'optional',\n  },\n  space: {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const AccordionEvents: PropertiesTableProps = {\n  on_change: {\n    doc: 'Will be called by user click interaction. Returns an object with a boolean state `expanded` inside `{ expanded, id, event, ...event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","AccordionEvents","wrapper","MDXLayout","basicComponents","p","StyledTable","_styled","Table","target","name","styles","colors","default","primitive","string","undefined","FormattedCode","_ref","variant","strikethrough","style","rest","textDecoration","color","isString","includes","type","endsWith","slice","startsWith","typeWithoutArray","background","boxShadow","code","_ref2","valueType","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","defaultValue","doc","status","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","str","substring","forEach","replace","RegExp","AccordionProperties","id","title","expanded","expanded_ssr","remember_state","flush_remembered_state","no_animation","icon","icon_position","icon_size","left_component","prerender","prevent_rerender","prevent_rerender_conditional","single_container","element","heading","heading_level","disabled","skeleton","contentRef","collapseAllHandleRef","space","AccordionProviderGroupProperties","group","allow_close_all","expandBehaviour","expandBehavior","expanded_id","on_change"],"sourceRoot":""}