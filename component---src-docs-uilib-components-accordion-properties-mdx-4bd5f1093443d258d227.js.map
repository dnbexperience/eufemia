{"version":3,"file":"component---src-docs-uilib-components-accordion-properties-mdx-4bd5f1093443d258d227.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/accordion/properties.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/AccordionDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {AccordionProperties, AccordionProviderGroupProperties} from '@dnb/eufemia/src/components/accordion/AccordionDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"These properties can send along with the \", _jsx(_components.code, {\n        children: \"Accordion.Provider\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"Accordion.Group\"\n      }), \". It will affect every nested \", _jsx(_components.code, {\n        children: \"Accordion\"\n      }), \".\"]\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: AccordionProperties\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Accordion.Provider and Accordion.Group Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: AccordionProviderGroupProperties\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const AccordionProperties: PropertiesTableProps = {\n  id: {\n    doc: 'A unique `id` that will be used on the button element. If you use `remember_state`, an id is required.',\n    type: 'string',\n    status: 'optional',\n  },\n  title: {\n    doc: 'A title as a string or React element. It will be used as the button text.',\n    type: 'string',\n    status: 'optional',\n  },\n  expanded: {\n    doc: 'If set to `true` the accordion will be expanded as its initial state.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  expanded_ssr: {\n    doc: \"If set to `true` the accordion will be expanded during SSR. Can be potentially useful for SEO, although it will disturb client hydration, where React expects the same state. But that's mainly a technical aspect to consider.\",\n    type: 'boolean',\n    status: 'optional',\n  },\n  remember_state: {\n    doc: 'If set to `true`, it will remember a changed state initiated by the user. It requires a unique `id`. It will store the state in the local storage.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  flush_remembered_state: {\n    doc: 'If set to `true`, the saved (remembered) state will be removed and the initial component state will be used and set.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  no_animation: {\n    doc: 'If set to `true`, the open and close animation will be omitted.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  variant: {\n    doc: 'Defines the used styling. `Outlined`, `filled`, or `plain` (no styling). Defaults to `outlined`.',\n    type: ['outlined', 'filled', 'plain'],\n    status: 'optional',\n  },\n  icon: {\n    doc: 'Will replace the `chevron` icon. The icon will still rotate (by CSS). You can use an object to use two different icons, one for the closed state and one for the expanded state `{ closed, expanded }`.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  icon_position: {\n    doc: 'Will set the placement of the icon. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'Define a different icon size. Defaults to `medium` (1.5rem).',\n    type: 'string',\n    status: 'optional',\n  },\n  left_component: {\n    doc: 'Will add a React element on the left side of the `title`, inside `AccordionHeaderContainer`.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  prerender: {\n    doc: 'If set to `true` the content will be present, even the accordion is not expanded. Can be useful for assistive technology or SEO.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  prevent_rerender: {\n    doc: \"If set to `true` the accordion component will not re-render its content – can be useful for components you don't have control of storing the temporary state during an interaction.\",\n    type: 'boolean',\n    status: 'optional',\n  },\n  prevent_rerender_conditional: {\n    doc: 'Use this prop together with `prevent_rerender` – and if it is set to `true`, the accordion component will re-render if the children are a new React element and do not match the previous one anymore.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  single_container: {\n    doc: 'If set to `true`, a group of accordions will be wrapped to a sidebar looking menu for medium and larger screens.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  element: {\n    doc: 'Gives you the option to replace the used `button` element. Provide a React element, including a string (HTML element). Defaults to a `div` with all the needed accessibility features included.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  heading: {\n    doc: 'If set to `true`, level 2 (h2) will be used. You can provide your own HTML heading (`h3`), or provide a `heading_level` property.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  heading_level: {\n    doc: 'If `heading` is set to `true`, you can provide a numeric value to define a different heading level. Defaults to `2`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'If set to `true`, the accordion button will be disabled (dimmed).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  contentRef: {\n    doc: 'Send along a custom React Ref for `.dnb-accordion__content`.',\n    type: 'function',\n    status: 'optional',\n  },\n  collapseAllHandleRef: {\n    doc: 'Ref handle to collapse all expanded accordions. Send in a ref and use `.current()` to collapse all accordions. Default: `undefined`.',\n    type: 'React.MutableRefObject<() => void>',\n    status: 'optional',\n  },\n  space: {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const AccordionProviderGroupProperties: PropertiesTableProps = {\n  group: {\n    doc: \"Define a unique id, it will be used to 'group' several accordions into one.\",\n    type: 'string',\n    status: 'optional',\n  },\n  allow_close_all: {\n    doc: 'If set to `true`, the group of accordions will allow all to close.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  expandBehaviour: {\n    doc: 'Use `expandBehavior` instead.',\n    type: ['single', 'multiple'],\n    status: 'deprecated',\n  },\n  expandBehavior: {\n    doc: 'Determines how many accordions can be expanded at once. Defaults to `single`.',\n    type: ['single', 'multiple'],\n    status: 'optional',\n  },\n  expanded_id: {\n    doc: 'Define an `id` of a nested accordion that will get expanded.',\n    type: 'string',\n    status: 'optional',\n  },\n  space: {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const AccordionEvents: PropertiesTableProps = {\n  on_change: {\n    doc: 'Will be called by user click interaction. Returns an object with a boolean state `expanded` inside `{ expanded, id, event, ...event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","AccordionProperties","AccordionProviderGroupProperties","wrapper","MDXLayout","id","doc","type","status","title","expanded","expanded_ssr","remember_state","flush_remembered_state","no_animation","variant","icon","icon_position","icon_size","left_component","prerender","prevent_rerender","prevent_rerender_conditional","single_container","element","heading","heading_level","disabled","skeleton","contentRef","collapseAllHandleRef","space","group","allow_close_all","expandBehaviour","expandBehavior","expanded_id","AccordionEvents","on_change","Td","Th","Tr"],"sourceRoot":""}