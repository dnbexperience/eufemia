"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[11008],{52085:function(e,t,o){o.r(t);var n=o(52322),a=o(45392),i=o(85179),s=o(39800);function r(e){const t=Object.assign({h2:"h2",p:"p",code:"code"},(0,a.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{children:"Properties"}),"\n",(0,n.jsxs)(t.p,{children:["These properties can send along with the ",(0,n.jsx)(t.code,{children:"Accordion.Provider"})," or ",(0,n.jsx)(t.code,{children:"Accordion.Group"}),". It will affect every nested ",(0,n.jsx)(t.code,{children:"Accordion"}),"."]}),"\n",(0,n.jsx)(i.ZP,{props:s.oN}),"\n",(0,n.jsx)(t.h2,{children:"Accordion.Provider and Accordion.Group Properties"}),"\n",(0,n.jsx)(i.ZP,{props:s.qJ})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.ah)(),e.components);return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(r,e)})):r(e)}},85179:function(e,t,o){o.d(t,{Kw:function(){return b},ZP:function(){return y}});var n=o(70894),a=o(61185),i=o(55560),s=o(41676),r=o(6210),l=o(64223),c=o(37339),d=o(595),u=o(52322);const p={...d.L,p:e=>(0,u.jsx)("span",{...e})},h=(0,n.Z)(i.ZP,{target:"e13h2c840"})({name:"1qdk5x4",styles:"td{white-space:nowrap;}"}),f="var(--color-fire-red)",b=e=>{let{variant:t,strikethrough:o,children:n,style:a={},...i}=e;if(o&&(a.textDecoration="line-through"),"string"==typeof n)switch(t){case"prop":break;case"type":a.color=n.startsWith("'")?f:"var(--color-violet)";case"value":a.color=n.startsWith("'")?f:"undefined"===n||"null"===n?"var(--color-black-55)":"var(--color-success-green)";default:a.background="none",a.boxShadow="none"}return p.code({children:n,style:a,...i})};function y(e){let{props:t,valueType:o="string",camelCase:n,omit:d,showDefaultValue:f=!1}=e;const y=Object.keys(t||{}),x=Object.entries(t||{}).map((e=>{let[t,i]=e;if(!i)return null;const{type:l,defaultValue:h,doc:x,status:v}=i;return d&&d.includes(t)?null:(0,u.jsxs)(s.Z,{children:[(0,u.jsx)(r.Z,{children:(0,u.jsx)(b,{variant:"prop",strikethrough:"deprecated"===v,children:g(n?(0,c.zW)(t):t)})}),(0,u.jsx)(r.Z,{children:(Array.isArray(l)?l:[l]).map((e=>{if("string"==typeof e){if(String(e).includes("{valueType}")){if(Array.isArray(o))return o.map(((e,t)=>(0,u.jsx)(b,{variant:"type",children:e},e+t))).reduce(((e,t)=>(0,u.jsxs)(u.Fragment,{children:[e," ",(0,u.jsx)("br",{})," ",t]})));e=o}return(0,u.jsx)(b,{variant:"type",children:e},e)}})).reduce(((e,t)=>(0,u.jsxs)(u.Fragment,{children:[e," ",(0,u.jsx)("br",{})," ",t]})))}),f&&(0,u.jsx)(r.Z,{children:h?(0,u.jsx)(b,{variant:"value",children:h}):"required"===v&&"REQUIRED"}),(0,u.jsxs)(r.Z,{children:[(!f||"deprecated"===v)&&(0,u.jsxs)("em",{children:["(",v,") "]}),(0,u.jsx)(a.D,{components:p,children:n?m(x,y):x})]})]},t)}));return(0,u.jsx)(i.ZP.ScrollView,{children:(0,u.jsxs)(h,{children:[(0,u.jsx)("thead",{children:(0,u.jsxs)(s.Z,{children:[(0,u.jsx)(l.Z,{children:"Property"}),(0,u.jsx)(l.Z,{children:"Type"}),f&&(0,u.jsx)(l.Z,{children:"Default value"}),(0,u.jsx)(l.Z,{children:"Description"})]})}),(0,u.jsx)("tbody",{children:x})]})})}function m(e,t){return t.forEach((t=>{e=e.replace(new RegExp(t,"g"),(0,c.zW)(t))})),e}function g(e){return e.includes("/")?(0,u.jsx)(a.D,{components:p,children:e}):e}},39800:function(e,t,o){o.d(t,{Nh:function(){return i},oN:function(){return n},qJ:function(){return a}});const n={id:{doc:"A unique `id` that will be used on the button element. If you use `remember_state`, an id is required.",type:"string",status:"optional"},title:{doc:"A title as a string or React element. It will be used as the button text.",type:"string",status:"optional"},expanded:{doc:"If set to `true` the accordion will be expanded as its initial state.",type:"boolean",status:"optional"},expanded_ssr:{doc:"If set to `true` the accordion will be expanded during SSR. Can be potentially useful for SEO, although it will disturb client hydration, where React expects the same state. But that's mainly a technical aspect to consider.",type:"boolean",status:"optional"},remember_state:{doc:"If set to `true`, it will remember a changed state initiated by the user. It requires a unique `id`. It will store the state in the local storage.",type:"boolean",status:"optional"},flush_remembered_state:{doc:"If set to `true`, the saved (remembered) state will be removed and the initial component state will be used and set.",type:"boolean",status:"optional"},no_animation:{doc:"If set to `true`, the open and close animation will be omitted.",type:"boolean",status:"optional"},variant:{doc:"Defines the used styling. `Outlined`, `filled`, or `plain` (no styling). Defaults to `outlined`.",type:["outlined","filled","plain"],status:"optional"},icon:{doc:"Will replace the `chevron` icon. The icon will still rotate (by CSS). You can use an object to use two different icons, one for the closed state and one for the expanded state `{ closed, expanded }`.",type:"React.ReactNode",status:"optional"},icon_position:{doc:"Will set the placement of the icon. Defaults to `left`.",type:"string",status:"optional"},icon_size:{doc:"Define a different icon size. Defaults to `medium` (1.5rem).",type:"string",status:"optional"},left_component:{doc:"Will add a React element on the left side of the `title`, inside `AccordionHeaderContainer`.",type:"React.ReactNode",status:"optional"},prerender:{doc:"If set to `true` the content will be present, even the accordion is not expanded. Can be useful for assistive technology or SEO.",type:"boolean",status:"optional"},prevent_rerender:{doc:"If set to `true` the accordion component will not re-render its content – can be useful for components you don't have control of storing the temporary state during an interaction.",type:"boolean",status:"optional"},prevent_rerender_conditional:{doc:"Use this prop together with `prevent_rerender` – and if it is set to `true`, the accordion component will re-render if the children are a new React element and do not match the previous one anymore.",type:"boolean",status:"optional"},single_container:{doc:"If set to `true`, a group of accordions will be wrapped to a sidebar looking menu for medium and larger screens.",type:"boolean",status:"optional"},element:{doc:"Gives you the option to replace the used `button` element. Provide a React element, including a string (HTML element). Defaults to a `div` with all the needed accessibility features included.",type:"React.ReactNode",status:"optional"},heading:{doc:"If set to `true`, level 2 (h2) will be used. You can provide your own HTML heading (`h3`), or provide a `heading_level` property.",type:"boolean",status:"optional"},heading_level:{doc:"If `heading` is set to `true`, you can provide a numeric value to define a different heading level. Defaults to `2`.",type:"boolean",status:"optional"},disabled:{doc:"If set to `true`, the accordion button will be disabled (dimmed).",type:"boolean",status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown.",type:"boolean",status:"optional"},contentRef:{doc:"Send along a custom React Ref for `.dnb-accordion__content`.",type:"function",status:"optional"},collapseAllHandleRef:{doc:"Ref handle to collapse all expanded accordions. Send in a ref and use `.current()` to collapse all accordions. Default: `undefined`.",type:"React.MutableRefObject<() => void>",status:"optional"},space:{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},a={group:{doc:"Define a unique id, it will be used to 'group' several accordions into one.",type:"string",status:"optional"},allow_close_all:{doc:"If set to `true`, the group of accordions will allow all to close.",type:"boolean",status:"optional"},expandBehaviour:{doc:"Use `expandBehavior` instead.",type:["single","multiple"],status:"deprecated"},expandBehavior:{doc:"Determines how many accordions can be expanded at once. Defaults to `single`.",type:["single","multiple"],status:"optional"},expanded_id:{doc:"Define an `id` of a nested accordion that will get expanded.",type:"string",status:"optional"},space:{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},i={on_change:{doc:"Will be called by user click interaction. Returns an object with a boolean state `expanded` inside `{ expanded, id, event, ...event }`.",type:"function",status:"optional"}}},6210:function(e,t,o){var n=o(30600);t.Z=n.Z},64223:function(e,t,o){var n=o(91859);t.Z=n.Z},41676:function(e,t,o){var n=o(35610);t.Z=n.Z}}]);
//# sourceMappingURL=component---src-docs-uilib-components-accordion-properties-mdx-66eabc7f24365d7edff0.js.map