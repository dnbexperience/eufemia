{"version":3,"file":"component---src-docs-uilib-components-accordion-properties-mdx-87e173e68ab0f094cb36.js","mappings":"mMAKA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKX,EAAYG,GAAI,CAC9BO,SAAU,eACR,MAAMF,EAAAA,EAAAA,MAAMR,EAAYI,EAAG,CAC7BM,SAAU,CAAC,6CAA6CC,EAAAA,EAAAA,KAAKX,EAAYK,KAAM,CAC7EK,SAAU,uBACR,QAAQC,EAAAA,EAAAA,KAAKX,EAAYK,KAAM,CACjCK,SAAU,oBACR,kCAAkCC,EAAAA,EAAAA,KAAKX,EAAYK,KAAM,CAC3DK,SAAU,cACR,OACF,MAAMC,EAAAA,EAAAA,KAAKC,EAAAA,GAAiB,CAC9Bb,MAAOc,EAAAA,KACL,MAAMF,EAAAA,EAAAA,KAAKX,EAAYG,GAAI,CAC7BO,SAAU,sDACR,MAAMC,EAAAA,EAAAA,KAAKC,EAAAA,GAAiB,CAC9Bb,MAAOe,EAAAA,OAGb,CAOA,UANA,SAAoBf,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOgB,QAASC,GAAaf,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOS,GAAYL,EAAAA,EAAAA,KAAKK,EAAWf,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DW,UAAUC,EAAAA,EAAAA,KAAKb,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,qLC7BA,MAAMQ,EAAa,IACdU,EAAAA,EACHb,EAAIL,IAAUY,EAAAA,EAAAA,KAAA,WAAUZ,KAGpBmB,GAAcC,EAAAA,EAAAA,GAAOC,EAAAA,GAAK,CAAAC,OAAA,aAAZF,CAAa,CAAAG,KAAA,UAAAC,OAAA,4BAO3BC,EAAc,wBAIPC,EAAgBC,IAWtB,IAXuB,QAC5BC,EAAO,cACPC,EAAa,SACblB,EAAQ,MACRmB,EAAQ,CAAC,KACNC,GAMJJ,EAIC,GAHIE,IACFC,EAAME,eAAiB,gBAED,iBAAbrB,EACT,OAAQiB,GACN,IAAK,OACH,MAEF,IAAK,OACHE,EAAMG,MAAQtB,EAASuB,WAAY,KAAMT,EAxB/B,sBA2BZ,IAAK,QACHK,EAAMG,MAAQtB,EAASuB,WAAY,KAC/BT,EACa,cAAbd,GAAyC,SAAbA,EA7BjB,wBAHJ,6BAqCb,QACEmB,EAAMK,WAAa,OACnBL,EAAMM,UAAY,OAIxB,OAAO5B,EAAWF,KAAK,CAAEK,WAAUmB,WAAUC,GAAO,EAGvC,SAASlB,EAAewB,GAYnC,IAZoC,MACtCrC,EAAK,UACLsC,EAAY,SAAQ,UACpBC,EAAS,KACTC,EAAI,iBACJC,GAAmB,GAOpBJ,EACC,MAAMK,EAAOxC,OAAOwC,KAAK1C,GACnB2C,EAAYzC,OAAO0C,QAAQ5C,GAAO6C,KAAIC,IAAmB,IAAjBC,EAAK/C,GAAM8C,EACvD,IAAK9C,EACH,OAAO,KAET,MAAM,KAAEgD,EAAI,aAAEC,EAAY,IAAEC,EAAG,OAAEC,GAAWnD,EAC5C,OAAIwC,GAAQA,EAAKY,SAASL,GACjB,MAIPtC,EAAAA,EAAAA,MAAC4C,EAAAA,EAAE,CAAA1C,SAAA,EACDC,EAAAA,EAAAA,KAAC0C,EAAAA,EAAE,CAAA3C,UACDC,EAAAA,EAAAA,KAACc,EAAa,CACZE,QAAQ,OACRC,cAA0B,eAAXsB,EAAwBxC,SAEtC4C,EAAWhB,GAAYiB,EAAAA,EAAAA,IAAYT,GAAOA,QAG/CnC,EAAAA,EAAAA,KAAC0C,EAAAA,EAAE,CAAA3C,UACC8C,MAAMC,QAAQV,GAAQA,EAAO,CAACA,IAC7BH,KAAKc,IACJ,GAAiB,iBAANA,EAAgB,CACzB,GAAIC,OAAOD,GAAGP,SAAS,eAAgB,CACrC,GAAIK,MAAMC,QAAQpB,GAChB,OAAOA,EACJO,KAAI,CAACc,EAAGE,KAELjD,EAAAA,EAAAA,KAACc,EAAa,CAAaE,QAAQ,OAAMjB,SACtCgD,GADiBA,EAAIE,KAK3BC,QAAO,CAACC,EAAMC,KACbvD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGoD,EAAK,KAACnD,EAAAA,EAAAA,KAAA,SAAM,IAAEoD,OAKvBL,EAAIrB,CACN,CAEA,OACE1B,EAAAA,EAAAA,KAACc,EAAa,CAASE,QAAQ,OAAMjB,SAClCgD,GADiBA,EAIxB,KAEDG,QAAO,CAACC,EAAMC,KACbvD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGoD,EAAK,KAACnD,EAAAA,EAAAA,KAAA,SAAM,IAAEoD,SAItBvB,IACC7B,EAAAA,EAAAA,KAAC0C,EAAAA,EAAE,CAAA3C,SACAsC,GACCrC,EAAAA,EAAAA,KAACc,EAAa,CAACE,QAAQ,QAAOjB,SAAEsC,IAErB,aAAXE,GAAyB,cAI/B1C,EAAAA,EAAAA,MAAC6C,EAAAA,EAAE,CAAA3C,SAAA,GACE8B,GAA+B,eAAXU,KACrB1C,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,IAAEwC,EAAO,SAEfvC,EAAAA,EAAAA,KAACqD,EAAAA,EAAa,CAACzD,WAAYA,EAAWG,SACnC4B,EAAY2B,EAAmBhB,EAAKR,GAAQQ,SA5D1CH,EA+DJ,IAIT,OACEnC,EAAAA,EAAAA,KAACS,EAAAA,GAAAA,WAAgB,CAAAV,UACfF,EAAAA,EAAAA,MAACU,EAAW,CAAAR,SAAA,EACVC,EAAAA,EAAAA,KAAA,SAAAD,UACEF,EAAAA,EAAAA,MAAC4C,EAAAA,EAAE,CAAA1C,SAAA,EACDC,EAAAA,EAAAA,KAACuD,EAAAA,EAAE,CAAAxD,SAAC,cACJC,EAAAA,EAAAA,KAACuD,EAAAA,EAAE,CAAAxD,SAAC,SACH8B,IAAoB7B,EAAAA,EAAAA,KAACuD,EAAAA,EAAE,CAAAxD,SAAC,mBACzBC,EAAAA,EAAAA,KAACuD,EAAAA,EAAE,CAAAxD,SAAC,sBAGRC,EAAAA,EAAAA,KAAA,SAAAD,SAAQgC,QAIhB,CAGA,SAASuB,EAAmBhB,EAAaR,GAIvC,OAHAA,EAAK0B,SAASrB,IACZG,EAAMA,EAAImB,QAAQ,IAAIC,OAAOvB,EAAK,MAAMS,EAAAA,EAAAA,IAAYT,GAAK,IAEpDG,CACT,CAEO,SAASK,EAAWhC,GACzB,OAAIA,EAAK6B,SAAS,MACTxC,EAAAA,EAAAA,KAACqD,EAAAA,EAAa,CAACzD,WAAYA,EAAWG,SAAEY,IAG1CA,CACT,C,yGCxLO,MAAMT,EAA4C,CACvDyD,GAAI,CACFrB,IAAK,yGACLF,KAAM,SACNG,OAAQ,YAEVqB,MAAO,CACLtB,IAAK,4EACLF,KAAM,SACNG,OAAQ,YAEVsB,SAAU,CACRvB,IAAK,wEACLF,KAAM,UACNG,OAAQ,YAEVuB,aAAc,CACZxB,IAAK,kOACLF,KAAM,UACNG,OAAQ,YAEVwB,eAAgB,CACdzB,IAAK,qJACLF,KAAM,UACNG,OAAQ,YAEVyB,uBAAwB,CACtB1B,IAAK,uHACLF,KAAM,UACNG,OAAQ,YAEV0B,aAAc,CACZ3B,IAAK,kEACLF,KAAM,UACNG,OAAQ,YAEVvB,QAAS,CACPsB,IAAK,mGACLF,KAAM,CAAC,WAAY,SAAU,SAC7BG,OAAQ,YAEV2B,KAAM,CACJ5B,IAAK,0MACLF,KAAM,kBACNG,OAAQ,YAEV4B,cAAe,CACb7B,IAAK,0DACLF,KAAM,SACNG,OAAQ,YAEV6B,UAAW,CACT9B,IAAK,+DACLF,KAAM,SACNG,OAAQ,YAEV8B,eAAgB,CACd/B,IAAK,+FACLF,KAAM,kBACNG,OAAQ,YAEV+B,UAAW,CACThC,IAAK,mIACLF,KAAM,UACNG,OAAQ,YAEVgC,iBAAkB,CAChBjC,IAAK,mLACLF,KAAM,UACNG,OAAQ,YAEViC,6BAA8B,CAC5BlC,IAAK,yMACLF,KAAM,UACNG,OAAQ,YAEVkC,iBAAkB,CAChBnC,IAAK,mHACLF,KAAM,UACNG,OAAQ,YAEVmC,QAAS,CACPpC,IAAK,kMACLF,KAAM,kBACNG,OAAQ,YAEVoC,QAAS,CACPrC,IAAK,oIACLF,KAAM,UACNG,OAAQ,YAEVqC,cAAe,CACbtC,IAAK,uHACLF,KAAM,UACNG,OAAQ,YAEVsC,SAAU,CACRvC,IAAK,oEACLF,KAAM,UACNG,OAAQ,YAEVuC,SAAU,CACRxC,IAAK,yEACLF,KAAM,UACNG,OAAQ,YAEVwC,WAAY,CACVzC,IAAK,+DACLF,KAAM,WACNG,OAAQ,YAEVyC,qBAAsB,CACpB1C,IAAK,uIACLF,KAAM,qCACNG,OAAQ,YAEV0C,MAAO,CACL3C,IAAK,2DACLF,KAAM,CAAC,SAAU,UACjBG,OAAQ,aAICpC,EAAyD,CACpE+E,MAAO,CACL5C,IAAK,8EACLF,KAAM,SACNG,OAAQ,YAEV4C,gBAAiB,CACf7C,IAAK,qEACLF,KAAM,UACNG,OAAQ,YAGV6C,gBAAiB,CACf9C,IAAK,+EACLF,KAAM,CAAC,SAAU,YACjBG,OAAQ,YAEV8C,YAAa,CACX/C,IAAK,+DACLF,KAAM,SACNG,OAAQ,YAEV0C,MAAO,CACL3C,IAAK,2DACLF,KAAM,CAAC,SAAU,UACjBG,OAAQ,aAIC+C,EAAwC,CACnDC,UAAW,CACTjD,IAAK,0IACLF,KAAM,WACNG,OAAQ,Y,sCCvJZ,IAAeG,EAAE,C,uCCAjB,IAAea,EAAE,C,uCCAjB,IAAed,EAAE,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/accordion/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/accordion/AccordionDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {AccordionProperties, AccordionProviderGroupProperties} from '@dnb/eufemia/src/components/accordion/AccordionDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"These properties can send along with the \", _jsx(_components.code, {\n        children: \"Accordion.Provider\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"Accordion.Group\"\n      }), \". It will affect every nested \", _jsx(_components.code, {\n        children: \"Accordion\"\n      }), \".\"]\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: AccordionProperties\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Accordion.Provider and Accordion.Group Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: AccordionProviderGroupProperties\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colorValue = 'var(--color-success-green)'\nconst colorString = 'var(--color-fire-red)'\nconst colorType = 'var(--color-violet)'\nconst colorUndefined = 'var(--color-black-55)'\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = children.startsWith(`'`) ? colorString : colorType\n        // falls through\n      }\n      case 'value': {\n        style.color = children.startsWith(`'`)\n          ? colorString\n          : children === 'undefined' || children === 'null'\n          ? colorUndefined\n          : colorValue\n        // falls through\n      }\n      default: {\n        style.background = 'none'\n        style.boxShadow = 'none'\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props)\n  const tableRows = Object.entries(props).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('/')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const AccordionProperties: PropertiesTableProps = {\n  id: {\n    doc: 'A unique `id` that will be used on the button element. If you use `remember_state`, an id is required.',\n    type: 'string',\n    status: 'optional',\n  },\n  title: {\n    doc: 'A title as a string or React element. It will be used as the button text.',\n    type: 'string',\n    status: 'optional',\n  },\n  expanded: {\n    doc: 'If set to `true` the accordion will be expanded as its initial state.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  expanded_ssr: {\n    doc: \"If set to `true` the accordion will be expanded during SSR. Can be potentially useful for SEO, although it will disturb client hydration, where React expects the same state. But that's mainly a technical aspect to consider.\",\n    type: 'boolean',\n    status: 'optional',\n  },\n  remember_state: {\n    doc: 'If set to `true`, it will remember a changed state initiated by the user. It requires a unique `id`. It will store the state in the local storage.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  flush_remembered_state: {\n    doc: 'If set to `true`, the saved (remembered) state will be removed and the initial component state will be used and set.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  no_animation: {\n    doc: 'If set to `true`, the open and close animation will be omitted.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  variant: {\n    doc: 'Defines the used styling. `Outlined`, `filled`, or `plain` (no styling). Defaults to `outlined`.',\n    type: ['outlined', 'filled', 'plain'],\n    status: 'optional',\n  },\n  icon: {\n    doc: 'Will replace the `chevron` icon. The icon will still rotate (by CSS). You can use an object to use two different icons, one for the closed state and one for the expanded state `{ closed, expanded }`.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  icon_position: {\n    doc: 'Will set the placement of the icon. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'Define a different icon size. Defaults to `medium` (1.5rem).',\n    type: 'string',\n    status: 'optional',\n  },\n  left_component: {\n    doc: 'Will add a React element on the left side of the `title`, inside `AccordionHeaderContainer`.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  prerender: {\n    doc: 'If set to `true` the content will be present, even the accordion is not expanded. Can be useful for assistive technology or SEO.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  prevent_rerender: {\n    doc: \"If set to `true` the accordion component will not re-render its content – can be useful for widgets you don't have control of storing the temporary state during an interaction.\",\n    type: 'boolean',\n    status: 'optional',\n  },\n  prevent_rerender_conditional: {\n    doc: 'Use this prop together with `prevent_rerender` – and if it is set to `true`, the accordion component will re-render if the children are a new React element and do not match the previous one anymore.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  single_container: {\n    doc: 'If set to `true`, a group of accordions will be wrapped to a sidebar looking menu for medium and larger screens.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  element: {\n    doc: 'Gives you the option to replace the used `button` element. Provide a React element, including a string (HTML element). Defaults to a `div` with all the needed accessibility features included.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  heading: {\n    doc: 'If set to `true`, level 2 (h2) will be used. You can provide your own HTML heading (`h3`), or provide a `heading_level` property.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  heading_level: {\n    doc: 'If `heading` is set to `true`, you can provide a numeric value to define a different heading level. Defaults to `2`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'If set to `true`, the accordion button will be disabled (dimmed).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  contentRef: {\n    doc: 'Send along a custom React Ref for `.dnb-accordion__content`.',\n    type: 'function',\n    status: 'optional',\n  },\n  collapseAllHandleRef: {\n    doc: 'Ref handle to collapse all expanded accordions. Send in a ref and use `.current()` to collapse all accordions. Default: `undefined`.',\n    type: 'React.MutableRefObject<() => void>',\n    status: 'optional',\n  },\n  space: {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const AccordionProviderGroupProperties: PropertiesTableProps = {\n  group: {\n    doc: \"Define a unique id, it will be used to 'group' several accordions into one.\",\n    type: 'string',\n    status: 'optional',\n  },\n  allow_close_all: {\n    doc: 'If set to `true`, the group of accordions will allow all to close.',\n    type: 'boolean',\n    status: 'optional',\n  },\n\n  expandBehaviour: {\n    doc: 'Determines how many accordions can be expanded at once. Defaults to `single`',\n    type: ['single', 'multiple'],\n    status: 'optional',\n  },\n  expanded_id: {\n    doc: 'Define an `id` of a nested accordion that will get expanded.',\n    type: 'string',\n    status: 'optional',\n  },\n  space: {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const AccordionEvents: PropertiesTableProps = {\n  on_change: {\n    doc: 'Will be called by user click interaction. Returns an object with a boolean state `expanded` inside `{ expanded, id, event, ...event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","AccordionProperties","AccordionProviderGroupProperties","wrapper","MDXLayout","basicComponents","StyledTable","_styled","Table","target","name","styles","colorString","FormattedCode","_ref","variant","strikethrough","style","rest","textDecoration","color","startsWith","background","boxShadow","_ref2","valueType","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","type","defaultValue","doc","status","includes","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp","id","title","expanded","expanded_ssr","remember_state","flush_remembered_state","no_animation","icon","icon_position","icon_size","left_component","prerender","prevent_rerender","prevent_rerender_conditional","single_container","element","heading","heading_level","disabled","skeleton","contentRef","collapseAllHandleRef","space","group","allow_close_all","expandBehaviour","expanded_id","AccordionEvents","on_change"],"sourceRoot":""}