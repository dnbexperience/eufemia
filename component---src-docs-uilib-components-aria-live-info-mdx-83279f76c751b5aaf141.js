"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[88147],{58290:function(e,n,i){i.r(n);var r=i(52322),s=i(45392);function t(e){const n=Object.assign({h2:"h2",pre:"pre",code:"code",p:"p"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{children:"Import"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { AriaLive } from '@dnb/eufemia'\n"})}),"\n",(0,r.jsx)(n.h2,{children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"AriaLive is a React component and hook that helps make your web app more accessible by adding or defining an ARIA live region that announces dynamic changes to screen readers."}),"\n",(0,r.jsx)(n.p,{children:"Use it to manually inform users using a screen reader, about changes on the screen that isn't normally covered by screen readers."}),"\n",(0,r.jsxs)(n.p,{children:["By default, the ",(0,r.jsx)(n.code,{children:"AriaLive"})," component will announce changes to the screen reader in a polite manner. This means that the announcement will wait until the screen reader is idle. This is the recommended way to use the component."]}),"\n",(0,r.jsx)(n.h2,{children:"Usage"}),"\n",(0,r.jsx)(n.p,{children:"For invisible text content:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { AriaLive } from '@dnb/eufemia'\nrender(<AriaLive>invisible message to announce</AriaLive>)\n"})}),"\n",(0,r.jsx)(n.p,{children:"For content that is visible, but where changes need to be announced:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { AriaLive } from '@dnb/eufemia'\nrender(\n  <AriaLive variant=\"content\">\n    <ul>\n      <li>item one</li>\n      <li>item two</li>\n      {/* When item three appears, it will be announced */}\n    </ul>\n  </AriaLive>,\n)\n"})}),"\n",(0,r.jsx)(n.h2,{children:"Priority"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"priority"})," prop in the ",(0,r.jsx)(n.code,{children:"AriaLive"})," component is used to control the urgency of the announcement. It can be set to ",(0,r.jsx)(n.code,{children:"high"})," (defaults to ",(0,r.jsx)(n.code,{children:"low"}),"). This allows you to control how assertive the announcement should be, helping to create a better user experience for users who rely on screen readers."]}),"\n",(0,r.jsx)(n.h2,{children:"AriaLive Hook"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"useAriaLive"})," hook is a part of the ",(0,r.jsx)(n.code,{children:"AriaLive"})," component. It can be used to make announcements in functional components. In this example ",(0,r.jsx)(n.code,{children:"<section>"})," is turned into an ARIA live region with all the functionality of the ",(0,r.jsx)(n.code,{children:"<AriaLive>"})," component:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import useAriaLive from '@dnb/eufemia/components/aria-live/useAriaLive'\n\nfunction MyCustomAriaLive(props) {\n  const ariaAttributes = useAriaLive(props)\n  return <section {...ariaAttributes} />\n}\n"})})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(t,e)})):t(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-aria-live-info-mdx-83279f76c751b5aaf141.js.map