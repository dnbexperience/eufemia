{"version":3,"file":"component---src-docs-uilib-components-aria-live-mdx-138289636af5417b2c9a.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/aria-live.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/aria-live/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/aria-live/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/aria-live/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport AriaLiveInfo from 'Docs/uilib/components/aria-live/info';\nimport AriaLiveDemos from 'Docs/uilib/components/aria-live/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(AriaLiveInfo, {}), \"\\n\", _jsx(AriaLiveDemos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport { Field, FieldBlock, Form } from '@dnb/eufemia/src/extensions/forms'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { AriaLive, Button, Flex, P } from '@dnb/eufemia/src'\n\nexport const AriaLivePlayground = () => (\n  <ComponentBox hideCode>\n    {() => {\n      const priorities = ['low', 'high']\n      const contents = {\n        default: 'This is a default announcement',\n        second: 'And a second one',\n        third: 'A third one',\n        fourth: 'And a fourth one',\n      }\n      const priority: 'low' | 'high' = 'low'\n      const defaultData = {\n        enabled: false,\n        content: contents.default,\n        priority,\n      }\n\n      function AriaLiveExample() {\n        const { data } = Form.useData('aria-live-playground', defaultData)\n\n        return (\n          <Form.Handler id=\"aria-live-playground\">\n            <Flex.Stack>\n              <Field.Boolean label=\"Enabled\" path=\"/enabled\" />\n              <Field.Selection\n                variant=\"button\"\n                optionsLayout=\"horizontal\"\n                label=\"Priority\"\n                path=\"/priority\"\n              >\n                {priorities.map((content) => {\n                  return (\n                    <Field.Option\n                      key={content}\n                      title={content}\n                      value={content}\n                    />\n                  )\n                })}\n              </Field.Selection>\n\n              <Field.Selection\n                optionsLayout=\"horizontal\"\n                label=\"Content\"\n                path=\"/content\"\n              >\n                {Object.entries(contents).map(([key, value]) => {\n                  return (\n                    <Field.Option key={key} title={key} value={value} />\n                  )\n                })}\n              </Field.Selection>\n\n              <Field.String\n                label=\"Content as freetext\"\n                path=\"/content\"\n                multiline\n              />\n\n              <Flex.Item>\n                Output:{' '}\n                <AriaLive\n                  delay={1000}\n                  disabled={!data.enabled}\n                  priority={data.priority}\n                  showAnnouncement\n                >\n                  Message: {data.content}\n                </AriaLive>\n              </Flex.Item>\n            </Flex.Stack>\n          </Form.Handler>\n        )\n      }\n\n      return <AriaLiveExample />\n    }}\n  </ComponentBox>\n)\n\nexport const AriaLiveAdditions = () => (\n  <ComponentBox hideCode>\n    {() => {\n      const defaultData = {\n        enabled: false,\n        content: [<P key=\"one\">Line 1</P>],\n      }\n\n      function AriaLiveExample() {\n        const { data, update } = Form.useData(\n          'aria-live-additions',\n          defaultData,\n        )\n\n        return (\n          <Form.Handler id=\"aria-live-additions\">\n            <Flex.Stack>\n              <Field.Boolean label=\"Enabled\" path=\"/enabled\" />\n\n              <FieldBlock label=\"Content\">\n                <Form.ButtonRow>\n                  <Button\n                    text=\"Add more content\"\n                    variant=\"secondary\"\n                    icon=\"add\"\n                    icon_position=\"left\"\n                    on_click={() => {\n                      update('/content', (content) => {\n                        const c = content.length + 1\n                        content.push(<P key={c}>Line {c}</P>)\n                        return content\n                      })\n                    }}\n                  />\n                  <Button\n                    text=\"Remove content\"\n                    variant=\"tertiary\"\n                    icon=\"subtract\"\n                    icon_position=\"left\"\n                    on_click={() => {\n                      update('/content', (content) => {\n                        content.pop()\n                        return content\n                      })\n                    }}\n                  />\n                </Form.ButtonRow>\n              </FieldBlock>\n\n              <Flex.Item>\n                Output:{' '}\n                <AriaLive variant=\"content\" disabled={!data.enabled}>\n                  Message: {data.content}\n                </AriaLive>\n              </Flex.Item>\n            </Flex.Stack>\n          </Form.Handler>\n        )\n      }\n\n      return <AriaLiveExample />\n    }}\n  </ComponentBox>\n)\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.AriaLiveAdditions) _missingMdxReference(\"Examples.AriaLiveAdditions\", true);\n  if (!Examples.AriaLivePlayground) _missingMdxReference(\"Examples.AriaLivePlayground\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Playground\"\n    }), \"\\n\", _jsx(Examples.AriaLivePlayground, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Additions\"\n    }), \"\\n\", _jsx(Examples.AriaLiveAdditions, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Import\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { AriaLive } from '@dnb/eufemia'\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"AriaLive is a React component and hook that helps make your web app more accessible by adding or defining an ARIA live region that announces dynamic changes to screen readers.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use it to manually inform users using a screen reader, about changes on the screen that isn't normally covered by screen readers.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, the \", _jsx(_components.code, {\n        children: \"AriaLive\"\n      }), \" component will announce changes to the screen reader in a polite manner. This means that the announcement will wait until the screen reader is idle. This is the recommended way to use the component.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Usage\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For invisible text content:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { AriaLive } from '@dnb/eufemia'\\nrender(<AriaLive>invisible message to announce</AriaLive>)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For content that is visible, but where changes need to be announced:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { AriaLive } from '@dnb/eufemia'\\nrender(\\n  <AriaLive variant=\\\"content\\\">\\n    <ul>\\n      <li>item one</li>\\n      <li>item two</li>\\n      {/* When item three appears, it will be announced */}\\n    </ul>\\n  </AriaLive>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Priority\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"priority\"\n      }), \" property in the \", _jsx(_components.code, {\n        children: \"AriaLive\"\n      }), \" component is used to control the urgency of the announcement. It can be set to \", _jsx(_components.code, {\n        children: \"high\"\n      }), \" (defaults to \", _jsx(_components.code, {\n        children: \"low\"\n      }), \"). This allows you to control how assertive the announcement should be, helping to create a better user experience for users who rely on screen readers.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"AriaLive Hook\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useAriaLive\"\n      }), \" hook is a part of the \", _jsx(_components.code, {\n        children: \"AriaLive\"\n      }), \" component. It can be used to make announcements in functional components. In this example \", _jsx(_components.code, {\n        children: \"<section>\"\n      }), \" is turned into an ARIA live region with all the functionality of the \", _jsx(_components.code, {\n        children: \"<AriaLive>\"\n      }), \" component:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import useAriaLive from '@dnb/eufemia/components/aria-live/useAriaLive'\\n\\nfunction MyCustomAriaLive(props) {\\n  const ariaAttributes = useAriaLive(props)\\n  return <section {...ariaAttributes} />\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","AriaLiveInfo","AriaLiveDemos","wrapper","MDXLayout","Object","assign","_provideComponents","components","AriaLivePlayground","ComponentBox","hideCode","noInline","AriaLiveAdditions","_components","h2","h3","Examples","_missingMdxReference","id","component","Error","pre","code","p","className"],"sourceRoot":""}