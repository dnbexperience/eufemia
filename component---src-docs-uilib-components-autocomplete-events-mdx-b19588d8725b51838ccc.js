"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[47888,53205],{33012:function(e,t,o){o.r(t);var s=o(31085),n=o(71184);function i(e){const t=Object.assign({h2:"h2",p:"p",code:"code",h3:"h3",ul:"ul",li:"li",a:"a",pre:"pre"},(0,n.R)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{children:"Dynamically change data"}),"\n",(0,s.jsxs)(t.p,{children:["You can manipulate the used data dynamically, either by changing the ",(0,s.jsx)(t.code,{children:"data"})," property or during user events like ",(0,s.jsx)(t.code,{children:"on_type"})," or ",(0,s.jsx)(t.code,{children:"on_focus"}),". The following properties and methods are there to use:"]}),"\n",(0,s.jsx)(t.h3,{children:"Methods"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"updateData"})," replace all data entries."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"emptyData"})," remove all data entries."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"resetSelectedItem"})," will invalidate the selected key."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"revalidateSelectedItem"})," will re-validate the internal selected key on the given ",(0,s.jsx)(t.code,{children:"value"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"revalidateInputValue"})," will re-validate the current input value and update it – based on the given ",(0,s.jsx)(t.code,{children:"value"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"setInputValue"})," update the input value."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"clearInputValue"})," will set the current input value to an empty string."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"focusInput"})," will set focus on the input element."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"showIndicator"})," shows a progress indicator instead of the icon (inside the input)."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"hideIndicator"})," hides the progress indicator inside the input."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"showIndicatorItem"})," shows an item with a ",(0,s.jsx)(t.a,{href:"/uilib/components/progress-indicator",children:"ProgressIndicator"})," status as an data option item."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"showNoOptionsItem"}),' shows the "no entries found" status as an data option item.']}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"setVisible"})," shows the ",(0,s.jsx)(t.a,{href:"/uilib/components/fragments/drawer-list",children:"DrawerList"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"setHidden"})," hides the ",(0,s.jsx)(t.a,{href:"/uilib/components/fragments/drawer-list",children:"DrawerList"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"showAllItems"})," shows all ",(0,s.jsx)(t.a,{href:"/uilib/components/fragments/drawer-list",children:"DrawerList"})," items."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"setMode"})," switch the mode during runtime."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"debounce"})," a debounce method with a cancel invocation method on repeating calls. There is ",(0,s.jsx)(t.a,{href:"/uilib/helpers/functions/#debounce",children:"more documentation"})," about this method."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{children:"Properties"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"dataList"})," contains all the data entries."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"<Autocomplete\n  on_focus={({ updateData, showIndicator }) => {\n    showIndicator()\n    setTimeout(() => {\n      updateData(topMovies)\n    }, 1e3)\n  }}\n  on_type={({ value /* updateData, ... */ }) => {\n    console.log('on_type', value)\n  }}\n/>\n"})})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,n.R)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}},34799:function(e,t,o){o.r(t);var s=o(31085),n=o(71184),i=o(15616),a=o(56115),l=o(33012);function r(e){const t=Object.assign({h2:"h2",h3:"h3",code:"code",p:"p",ul:"ul",li:"li",strong:"strong"},(0,n.R)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{children:"Events"}),"\n",(0,s.jsx)(i.Ay,{props:a.Q}),"\n",(0,s.jsxs)(t.h3,{children:["The ",(0,s.jsx)(t.code,{children:"on_change"})," vs ",(0,s.jsx)(t.code,{children:"on_select"})," difference"]}),"\n",(0,s.jsxs)(t.p,{children:["The difference between ",(0,s.jsx)(t.code,{children:"on_change"})," and ",(0,s.jsx)(t.code,{children:"on_select"})," is:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"on_change"})," will be called when the state changes, either with a ",(0,s.jsx)(t.strong,{children:"click"})," or ",(0,s.jsx)(t.strong,{children:"space/enter"})," keypress confirmation."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"on_select"})," differs most when the user is navigating by keyboard. Once the user is pressing e.g. the arrow keys, the selection is changing, but not the state."]}),"\n"]}),"\n",(0,s.jsx)(l.default,{})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,n.R)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(r,e)})):r(e)}},56115:function(e,t,o){o.d(t,{Q:function(){return n},g:function(){return s}});const s={mode:{doc:'If set to `async`, it prevents showing the "no options" message during typing / filtering. Defaults to `sync`.',type:"string",status:"optional"},input_value:{doc:'Lets you define a custom input value. Setting it to an empty string `""` will reset the input value.',type:"string",status:"optional"},placeholder:{doc:'Use this to define the pre-filled placeholder text in the input. Defaults to `title="Skriv og velg"`.',type:"string",status:"optional"},title:{doc:"Give a title to let the user know what they have to do. Defaults to `Skriv og få alternativer`.",type:"React.Node",status:"optional"},disable_filter:{doc:"If set to `true`, word highlighting will still be active, but no options will be filtered out. Defaults to `false`.",type:"boolean",status:"optional"},disable_highlighting:{doc:"If set to `true`, word highlighting will be disabled, but the options will still get filtered. Defaults to `false`.",type:"boolean",status:"optional"},disable_reorder:{doc:"If set to `true`, reordering of search results will be disabled. Defaults to `false`.",type:"boolean",status:"optional"},search_numbers:{doc:"If set to `true` and `search_in_word_index` is not set, the user will be able to more easily search and filter e.g. bank account numbers. Defaults to `false`.",type:"boolean",status:"optional"},search_in_word_index:{doc:'This gives you the possibility to change the threshold number, which defines from what word on we search "inside words". Defaults to `3`.',type:"boolean",status:"optional"},keep_value:{doc:"Use `true` to not remove the typed value on input blur, if it is invalid. By default, the typed value will disappear / replaced by a selected value from the data list during the input field blur. Defaults to `false`.",type:"boolean",status:"optional"},keep_selection:{doc:"Use `true` to not remove selected item on input blur, when the input value is empty. Defaults to `false`.",type:"boolean",status:"optional"},keep_value_and_selection:{doc:"Like `keep_value` – but would not reset to the selected value during input field blur. Also, the selected value would still be kept. Defaults to `false`.",type:"boolean",status:"optional"},prevent_selection:{doc:"If set to `true`, no permanent selection will be made. Also, the typed value will not disappear on input blur (like `keep_value`). Defaults to `false`.",type:"boolean",status:"optional"},show_clear_button:{doc:"If set to `true`, a clear button is shown inside the input field. Defaults to `false`.",type:"boolean",status:"optional"},icon:{doc:"To be included in the autocomplete input.",type:["string","React.Node"],status:"optional"},icon_size:{doc:"Change the size of the icon pragmatically.",type:"string",status:"optional"},icon_position:{doc:"Position of the icon inside the autocomplete. Set to `left` or `right`. Defaults to `left`.",type:"string",status:"optional"},input_icon:{doc:"Same as `icon`.",type:["string","React.Node"],status:"optional"},triangle_position:{doc:"Position of icon arrow / triangle the drawer. Set to `left` or `right`. Defaults to `left`.",type:"string",status:"optional"},size:{doc:"Define the height of the Autocomplete. Can be set to `small`, `default`, `medium` and `large`. Defaults to `default`.",type:"string",status:"optional"},drawer_class:{doc:"Define a custom class for the internal drawer-list. This makes it possible more easily customize the drawer-list style with styled-components and the `css` style method. Defaults to `null`.",type:"string",status:"optional"},show_submit_button:{doc:"Use `true` to show a Autocomplete button to toggle the [DrawerList](/uilib/components/fragments/drawer-list). Defaults to `false`.",type:"boolean",status:"optional"},align_autocomplete:{doc:"Use `right` to change the options alignment direction. Defaults to `left`.",type:"string",status:"optional"},no_options:{doc:'Text show in the "no options" item. Defaults to `Ingen alternativer`.',type:"boolean",status:"optional"},aria_live_options:{doc:"Text read out by screen readers. This way users with screen readers know how many options they got during typing. Defaults to `%s alternativer`.",type:"React.Node",status:"optional"},show_all:{doc:"Text that lets a user unravel all the available options. Defaults to `Vis alt`.",type:"boolean",status:"optional"},indicator_label:{doc:'Text show on indicator "options" item. Defaults to `Henter data ...`.',type:"React.Node",status:"optional"},show_options_sr:{doc:"Only for screen readers. Title of the button to show the suggestions / options. It is always present and when activating, it opens the DrawerList and sets the focus on it. Defaults to `Bla gjennom alternativer`.",type:"string",status:"optional"},selected_sr:{doc:"Only for screen readers (VoiceOver). The label used to announce the selected item. Defaults to `Valgt:`.",type:"string",status:"optional"},selectall:{doc:"If set to `true`, then the whole input value gets selected on the entry focus. A second click will place the cursor on the wanted position.",type:"boolean",status:"optional"},submit_button_title:{doc:"Title on submit button. Defaults to `Vis alternativer`.",type:"React.Node",status:"optional"},submit_button_icon:{doc:"The icon used in the submit button. Defaults to `chevron_down`.",type:["string","React.Element"],status:"optional"},submit_element:{doc:"Replace the dropdown / submit button with a custom React element. Defaults to the input SubmitButton `import { SubmitButton } from &#39;@dnb/eufemia/components/input/Input&#39;`.",type:"React.Node",status:"optional"},opened:{doc:"If set to `true`, the Autocomplete will be rendered initially with a visible and accessible data list / options.",type:"boolean",status:"optional"},open_on_focus:{doc:"Use `true` to auto open the list once the user is entering the input field with the keyboard.",type:"boolean",status:"optional"},stretch:{doc:"If set to `true`, then the autocomplete will be 100% in available `width`.",type:"boolean",status:"optional"},skip_portal:{doc:"Set to `true` to disable the React Portal behavior. Defaults to `false`.",type:"string",status:"optional"},status:{doc:"Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.",type:["error","info","boolean"],status:"optional"},status_state:{doc:"Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.",type:["error","info"],status:"optional"},status_props:{doc:"Use an object to define additional FormStatus properties.",type:"object",status:"optional"},globalStatus:{doc:"The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).",type:"object",status:"optional"},label:{doc:"Prepends the Form Label component. If no ID is provided, a random ID is created.",type:"React.Node",status:"optional"},label_direction:{doc:'Use `label_direction="vertical"` to change the label layout direction. Defaults to `horizontal`.',type:"React.Node",status:"optional"},label_sr_only:{doc:"Use `true` to make the label only readable by screen readers.",type:"boolean",status:"optional"},suffix:{doc:"Text describing the content of the Autocomplete more than the label. You can also send in a React component, so it gets wrapped inside the Autocomplete component.",type:"React.Node",status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown.",type:"boolean",status:"optional"},input_ref:{doc:"Use a React.Ref to get access to the `input` DOM element.",type:"React.RefObject",status:"optional"},input_element:{doc:"Lets you provide a custom React element as the input HTML element.",type:["string","React.Element"],status:"optional"},"[DrawerList](/uilib/components/fragments/drawer-list/properties)":{doc:"all DrawerList properties.",type:"Various",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},n={on_type:{doc:"Will be called for every key change the users makes. Returns an object with the input `value` inside `{ value, event, attributes }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data)",type:"function",status:"optional"},on_focus:{doc:"Will be called on user generated focus action. Returns an object with the input `value` inside `{ value, event, attributes }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data).",type:"function",status:"optional"},on_blur:{doc:"Will be called on user generated blur action. Returns an object with the input `value` inside `{ value, event, attributes }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data).",type:"function",status:"optional"},on_change:{doc:"Will be called on state changes made by the user. Returns an object with the new selected `data` item `{ data, event, attributes, value }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data).",type:"function",status:"optional"},on_select:{doc:'Will be called once the users focuses or selects an item by a click or keyboard navigation. Returns an object with the new selected `data` item `{ data, event, attributes, value, active_item }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data). The "active_item" property is the currently selected item by keyboard navigation',type:"function",status:"optional"},on_show:{doc:"Will be called once the user presses the autocomplete. Returns the data item `{ data, attributes }`.",type:"function",status:"optional"},on_hide:{doc:"Will be called once the user presses the autocomplete again, or clicks somewhere else. Returns the data item `{ data, attributes }`.",type:"function",status:"optional"}}},69094:function(e,t,o){var s=o(23722);t.A=s.A},81908:function(e,t,o){var s=o(94515);t.A=s.A},92034:function(e,t,o){var s=o(31666);t.A=s.A}}]);
//# sourceMappingURL=component---src-docs-uilib-components-autocomplete-events-mdx-b19588d8725b51838ccc.js.map