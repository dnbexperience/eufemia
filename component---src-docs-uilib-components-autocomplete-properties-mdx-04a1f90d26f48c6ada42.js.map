{"version":3,"file":"component---src-docs-uilib-components-autocomplete-properties-mdx-04a1f90d26f48c6ada42.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/autocomplete/properties.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/autocomplete/AutocompleteDocs.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport TranslationsTable from 'dnb-design-system-portal/src/shared/parts/TranslationsTable';\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {AutocompleteProperties} from '@dnb/eufemia/src/components/autocomplete/AutocompleteDocs';\nimport {DrawerListProperties} from '@dnb/eufemia/src/fragments/drawer-list/DrawerListDocs';\nimport DrawerListDataDoc from '../fragments/drawer-list/_prop-data.mdx';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You may check out the \", _jsx(_components.a, {\n        href: \"#drawerlist-properties\",\n        children: \"DrawerList Properties\"\n      }), \" down below as well as the \", _jsx(_components.a, {\n        href: \"#the-data-property\",\n        children: \"Data structure examples\"\n      }), \".\"]\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: AutocompleteProperties\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"DrawerList Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: DrawerListProperties\n    }), \"\\n\", _jsx(DrawerListDataDoc, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Translations\"\n    }), \"\\n\", _jsx(TranslationsTable, {\n      localeKey: ['Autocomplete', 'DrawerList']\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const AutocompleteProperties = {\n  mode: {\n    doc: 'If set to `async`, it prevents showing the \"no options\" message during typing / filtering. Defaults to `sync`.',\n    type: 'string',\n    status: 'optional',\n  },\n  input_value: {\n    doc: 'Lets you define a custom input value. Setting it to an empty string `\"\"` will reset the input value.',\n    type: 'string',\n    status: 'optional',\n  },\n  placeholder: {\n    doc: 'Use this to define the pre-filled placeholder text in the input. Defaults to `title=\"Skriv og velg\"`.',\n    type: 'string',\n    status: 'optional',\n  },\n  title: {\n    doc: 'Give a title to let the user know what they have to do. Defaults to `Skriv og få alternativer`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  disable_filter: {\n    doc: 'If set to `true`, word highlighting will still be active, but no options will be filtered out. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  disable_highlighting: {\n    doc: 'If set to `true`, word highlighting will be disabled, but the options will still get filtered. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  disable_reorder: {\n    doc: 'If set to `true`, reordering of search results will be disabled. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  search_numbers: {\n    doc: 'If set to `true` and `search_in_word_index` is not set, the user will be able to more easily search and filter e.g. bank account numbers. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  search_in_word_index: {\n    doc: 'This gives you the possibility to change the threshold number, which defines from what word on we search \"inside words\". Defaults to `3`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  keep_value: {\n    doc: 'Use `true` to not remove the typed value on input blur, if it is invalid. By default, the typed value will disappear / replaced by a selected value from the data list during the input field blur. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  keep_selection: {\n    doc: 'Use `true` to not remove selected item on input blur, when the input value is empty. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  keep_value_and_selection: {\n    doc: 'Like `keep_value` – but would not reset to the selected value during input field blur. Also, the selected value would still be kept. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  prevent_selection: {\n    doc: 'If set to `true`, no permanent selection will be made. Also, the typed value will not disappear on input blur (like `keep_value`). Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  show_clear_button: {\n    doc: 'If set to `true`, a clear button is shown inside the input field. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  icon: {\n    doc: 'To be included in the autocomplete input.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'Change the size of the icon pragmatically.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon_position: {\n    doc: 'Position of the icon inside the autocomplete. Set to `left` or `right`. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  input_icon: {\n    doc: 'Same as `icon`.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  triangle_position: {\n    doc: 'Position of icon arrow / triangle the drawer. Set to `left` or `right`. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  size: {\n    doc: 'Define the height of the Autocomplete. Can be set to `small`, `default`, `medium` and `large`. Defaults to `default`.',\n    type: 'string',\n    status: 'optional',\n  },\n  drawer_class: {\n    doc: 'Define a custom class for the internal drawer-list. This makes it possible more easily customize the drawer-list style with styled-components and the `css` style method. Defaults to `null`.',\n    type: 'string',\n    status: 'optional',\n  },\n  show_submit_button: {\n    doc: 'Use `true` to show a Autocomplete button to toggle the [DrawerList](/uilib/components/fragments/drawer-list). Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align_autocomplete: {\n    doc: 'Use `right` to change the options alignment direction. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  no_options: {\n    doc: 'Text show in the \"no options\" item. If set to `false`, the list will not be rendered when there are no options available. Defaults to `Ingen alternativer`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  aria_live_options: {\n    doc: 'Text read out by screen readers. This way users with screen readers know how many options they got during typing. Defaults to `%s alternativer`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  show_all: {\n    doc: 'Text that lets a user unravel all the available options. Defaults to `Vis alt`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  indicator_label: {\n    doc: 'Text show on indicator \"options\" item. Defaults to `Henter data ...`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  show_options_sr: {\n    doc: 'Only for screen readers. Title of the button to show the suggestions / options. It is always present and when activating, it opens the DrawerList and sets the focus on it. Defaults to `Bla gjennom alternativer`.',\n    type: 'string',\n    status: 'optional',\n  },\n  selected_sr: {\n    doc: 'Only for screen readers (VoiceOver). The label used to announce the selected item. Defaults to `Valgt:`.',\n    type: 'string',\n    status: 'optional',\n  },\n  selectall: {\n    doc: 'If set to `true`, then the whole input value gets selected on the entry focus. A second click will place the cursor on the wanted position.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  submit_button_title: {\n    doc: 'Title on submit button. Defaults to `Vis alternativer`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  submit_button_icon: {\n    doc: 'The icon used in the submit button. Defaults to `chevron_down`.',\n    type: ['string', 'React.Element'],\n    status: 'optional',\n  },\n  submit_element: {\n    doc: 'Replace the dropdown / submit button with a custom React element. Defaults to the input SubmitButton `import { SubmitButton } from &#39;@dnb/eufemia/components/input/Input&#39;`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  opened: {\n    doc: 'If set to `true`, the Autocomplete will be rendered initially with a visible and accessible data list / options.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  open_on_focus: {\n    doc: 'Use `true` to auto open the list once the user is entering the input field with the keyboard.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  stretch: {\n    doc: 'If set to `true`, then the autocomplete will be 100% in available `width`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skip_portal: {\n    doc: 'Set to `true` to disable the React Portal behavior. Defaults to `false`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status: {\n    doc: 'Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: ['error', 'info', 'boolean'],\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.',\n    type: ['error', 'info'],\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'object',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Prepends the Form Label component. If no ID is provided, a random ID is created.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  label_direction: {\n    doc: 'Use `label_direction=\"vertical\"` to change the label layout direction. Defaults to `horizontal`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  label_sr_only: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the Autocomplete more than the label. You can also send in a React component, so it gets wrapped inside the Autocomplete component.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  input_ref: {\n    doc: 'Use a React.Ref to get access to the `input` DOM element.',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  input_element: {\n    doc: 'Lets you provide a custom React element as the input HTML element.',\n    type: ['string', 'React.Element'],\n    status: 'optional',\n  },\n  '[DrawerList](/uilib/components/fragments/drawer-list/properties)': {\n    doc: 'all DrawerList properties.',\n    type: 'Various',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n} satisfies PropertiesTableProps\n\nexport const AutocompleteEvents = {\n  on_type: {\n    doc: 'Will be called for every key change the users makes. Returns an object with the input `value` inside `{ value, event, attributes }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data)',\n    type: 'function',\n    status: 'optional',\n  },\n  on_focus: {\n    doc: 'Will be called on user generated focus action. Returns an object with the input `value` inside `{ value, event, attributes }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data).',\n    type: 'function',\n    status: 'optional',\n  },\n  on_blur: {\n    doc: 'Will be called on user generated blur action. Returns an object with the input `value` inside `{ value, event, attributes }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data).',\n    type: 'function',\n    status: 'optional',\n  },\n  on_change: {\n    doc: 'Will be called on state changes made by the user. Returns an object with the new selected `data` item `{ data, event, attributes, value }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data).',\n    type: 'function',\n    status: 'optional',\n  },\n  on_select: {\n    doc: 'Will be called once the users focuses or selects an item by a click or keyboard navigation. Returns an object with the new selected `data` item `{ data, event, attributes, value, active_item }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data). The \"active_item\" property is the currently selected item by keyboard navigation',\n    type: 'function',\n    status: 'optional',\n  },\n  on_show: {\n    doc: 'Will be called once the user presses the autocomplete. Returns the data item `{ data, attributes }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_hide: {\n    doc: 'Will be called once the user presses the autocomplete again, or clicks somewhere else. Returns the data item `{ data, attributes }`.',\n    type: 'function',\n    status: 'optional',\n  },\n} satisfies PropertiesTableProps\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","a","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","PropertiesTable","AutocompleteProperties","DrawerListProperties","DrawerListDataDoc","TranslationsTable","localeKey","wrapper","MDXLayout","mode","doc","type","status","input_value","placeholder","title","disable_filter","disable_highlighting","disable_reorder","search_numbers","search_in_word_index","keep_value","keep_selection","keep_value_and_selection","prevent_selection","show_clear_button","icon","icon_size","icon_position","input_icon","triangle_position","size","drawer_class","show_submit_button","align_autocomplete","no_options","aria_live_options","show_all","indicator_label","show_options_sr","selected_sr","selectall","submit_button_title","submit_button_icon","submit_element","opened","open_on_focus","stretch","skip_portal","status_state","status_props","globalStatus","label","label_direction","label_sr_only","suffix","skeleton","input_ref","input_element","AutocompleteEvents","on_type","on_focus","on_blur","on_change","on_select","on_show","on_hide"],"sourceRoot":""}