{"version":3,"file":"component---src-docs-uilib-components-autocomplete-properties-mdx-bcd16b94718c75a1be59.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/autocomplete/properties.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/autocomplete/AutocompleteDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/fragments/drawer-list/DrawerListDocs.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport TranslationsTable from 'dnb-design-system-portal/src/shared/parts/TranslationsTable';\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {autocompleteProperties} from '@dnb/eufemia/src/components/autocomplete/AutocompleteDocs';\nimport {DrawerListProperties} from '@dnb/eufemia/src/fragments/drawer-list/DrawerListDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You may check out the \", _jsx(_components.a, {\n        href: \"#drawerlist-properties\",\n        children: \"DrawerList Properties\"\n      }), \" down below as well as the \", _jsx(_components.a, {\n        href: \"#data-structure\",\n        children: \"Data structure examples\"\n      }), \".\"]\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: autocompleteProperties\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"DrawerList Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: DrawerListProperties\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Data structure\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// 1. as array\\nconst data = [\\n  // Every data item can, beside \\\"content\\\" - contain what ever\\n  {\\n    // (optional) can be what ever\\n    selected_key: 'key_0',\\n\\n    // (optional) is show instead of \\\"content\\\", once selected\\n    selected_value: 'Item 1 Value',\\n    suffix_value: 'Addition 1',\\n\\n    // Item content as a string, array or React Element\\n    content: 'Item 1 Content',\\n  },\\n\\n  // more items ...\\n  {\\n    selected_key: 'key_1',\\n    content: (\\n      <>\\n        <IconPrimary icon=\\\"bell\\\" />\\n        <span className=\\\"dnb-typo-bold\\\">Searchable content</span>\\n      </>\\n    ),\\n  },\\n  {\\n    selected_key: 'key_2',\\n    selected_value: 'Item 3 Value',\\n    suffix_value: 'Addition 3',\\n    content: (\\n      <Autocomplete.HorizontalItem>\\n        <IconPrimary icon=\\\"bell\\\" />\\n        <span className=\\\"dnb-typo-bold\\\">Searchable content</span>\\n      </Autocomplete.HorizontalItem>\\n    ),\\n  },\\n  {\\n    selected_key: 'key_3',\\n    selected_value: 'Item 4 Value',\\n    suffix_value: 'Addition 4',\\n    content: ['Item 4 Content A', <>Custom Component</>],\\n  },\\n]\\n\\n// 2. as object\\nconst data = {\\n  a: 'A',\\n  b: 'B',\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Translations\"\n    }), \"\\n\", _jsx(TranslationsTable, {\n      localeKey: \"Autocomplete\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const autocompleteProperties: PropertiesTableProps = {\n  mode: {\n    doc: 'If set to `async`, it prevents showing the \"no options\" message during typing / filtering. Defaults to `sync`.',\n    type: 'string',\n    status: 'optional',\n  },\n  input_value: {\n    doc: 'Lets you define a custom input value.',\n    type: 'string',\n    status: 'optional',\n  },\n  placeholder: {\n    doc: 'Use this to define the pre-filled placeholder text in the input. Defaults to `title=\"Skriv og velg\"`.',\n    type: 'string',\n    status: 'optional',\n  },\n  title: {\n    doc: 'Give a title to let the user know what they have to do. Defaults to `Skriv og få alternativer`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  disable_filter: {\n    doc: 'If set to `true`, word highlighting will still be active, but no options will be filtered out. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  disable_highlighting: {\n    doc: 'If set to `true`, word highlighting will be disabled, but the options will still get filtered. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  disable_reorder: {\n    doc: 'If set to `true`, reordering of search results will be disabled. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  search_numbers: {\n    doc: 'If set to `true` and `search_in_word_index` is not set, the user will be able to more easily search and filter e.g. bank account numbers. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  search_in_word_index: {\n    doc: 'This gives you the possibility to change the threshold number, which defines from what word on we search \"inside words\". Defaults to `3`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  keep_value: {\n    doc: 'Use `true` to not remove the typed value on input blur, if it is invalid. By default, the typed value will disappear / replaced by a selected value from the data list during the input field blur. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  keep_selection: {\n    doc: 'Use `true` to not remove selected item on input blur, when the input value is empty. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  keep_value_and_selection: {\n    doc: 'Like `keep_value` – but would not reset to the selected value during input field blur. Also, the selected value would still be kept. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  prevent_selection: {\n    doc: 'If set to `true`, no permanent selection will be made. Also, the typed value will not disappear on input blur (like `keep_value`). Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  show_clear_button: {\n    doc: 'If set to `true`, a clear button is shown inside the input field. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  icon: {\n    doc: 'To be included in the autocomplete input.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'Change the size of the icon pragmatically.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon_position: {\n    doc: 'Position of the icon inside the autocomplete. Set to `left` or `right`. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  input_icon: {\n    doc: 'Same as `icon`.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  triangle_position: {\n    doc: 'Position of icon arrow / triangle the drawer. Set to `left` or `right`. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  size: {\n    doc: 'Define the height of the Autocomplete. Can be set to `small`, `default`, `medium` and `large`. Defaults to `default`.',\n    type: 'string',\n    status: 'optional',\n  },\n  drawer_class: {\n    doc: 'Define a custom class for the internal drawer-list. This makes it possible more easily customize the drawer-list style with styled-components and the `css` style method. Defaults to `null`.',\n    type: 'string',\n    status: 'optional',\n  },\n  show_submit_button: {\n    doc: 'Use `true` to show a Autocomplete button to toggle the [DrawerList](/uilib/components/fragments/drawer-list). Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align_autocomplete: {\n    doc: 'Use `right` to change the options alignment direction. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  no_options: {\n    doc: 'Text show in the \"no options\" item. Defaults to `Ingen alternativer`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  aria_live_options: {\n    doc: 'Text read out by screen readers. This way users with screen readers know how many options they got during typing. Defaults to `%s alternativer`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  show_all: {\n    doc: 'Text that lets a user unravel all the available options. Defaults to `Vis alt`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  indicator_label: {\n    doc: 'Text show on indicator \"options\" item. Defaults to `Henter data ...`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  show_options_sr: {\n    doc: 'Only for screen readers. Title of the button to show the suggestions / options. It is always present and when activating, it opens the DrawerList and sets the focus on it. Defaults to `Bla gjennom alternativer`.',\n    type: 'string',\n    status: 'optional',\n  },\n  selected_sr: {\n    doc: 'Only for screen readers (VoiceOver). The label used to announce the selected item. Defaults to `Valgt:`.',\n    type: 'string',\n    status: 'optional',\n  },\n  submit_button_title: {\n    doc: 'Title on submit button. Defaults to `Vis alternativer`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  submit_button_icon: {\n    doc: 'The icon used in the submit button. Defaults to `chevron_down`.',\n    type: ['string', 'React.Element'],\n    status: 'optional',\n  },\n  submit_element: {\n    doc: 'Replace the dropdown / submit button with a custom React element. Defaults to the input SubmitButton `import { SubmitButton } from &#39;@dnb/eufemia/components/input/Input&#39;`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  opened: {\n    doc: 'If set to `true`, the Autocomplete will be rendered initially with a visible and accessible data list / options.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  open_on_focus: {\n    doc: 'Use `true` to auto open the list once the user is entering the input field with the keyboard.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  stretch: {\n    doc: 'If set to `true`, then the autocomplete will be 100% in available `width`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skip_portal: {\n    doc: 'Set to `true` to disable the React Portal behavior. Defaults to `false`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status: {\n    doc: 'Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'object',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Prepends the Form Label component. If no ID is provided, a random ID is created.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  label_direction: {\n    doc: 'Use `label_direction=\"vertical\"` to change the label layout direction. Defaults to `horizontal`.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  label_sr_only: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the Autocomplete more than the label. You can also send in a React component, so it gets wrapped inside the Autocomplete component.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  input_ref: {\n    doc: 'Use a React.Ref to get access to the `input` DOM element.',\n    type: 'React.Ref',\n    status: 'optional',\n  },\n  input_element: {\n    doc: 'Lets you provide a custom React element as the input HTML element.',\n    type: ['string', 'React.Element'],\n    status: 'optional',\n  },\n  '[DrawerList](/uilib/components/fragments/drawer-list/properties)': {\n    doc: 'all DrawerList properties.',\n    type: 'Various',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const AutocompleteEvents: PropertiesTableProps = {\n  on_type: {\n    doc: 'Will be called for every key change the users makes. Returns an object with the input `value` inside `{ value, event, attributes }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data)',\n    type: 'function',\n    status: 'optional',\n  },\n  on_focus: {\n    doc: 'Will be called on user generated focus action. Returns an object with the input `value` inside `{ value, event, attributes }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data).',\n    type: 'function',\n    status: 'optional',\n  },\n  on_blur: {\n    doc: 'Will be called on user generated blur action. Returns an object with the input `value` inside `{ value, event, attributes }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data).',\n    type: 'function',\n    status: 'optional',\n  },\n  on_change: {\n    doc: 'Will be called on state changes made by the user. Returns an object with the new selected `data` item `{ data, event, attributes, value }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data).',\n    type: 'function',\n    status: 'optional',\n  },\n  on_select: {\n    doc: 'Will be called once the users selects an item by a click or keyboard navigation. Returns an object with the new selected `data` item `{ data, event, attributes, value, active_item }` including [these methods](/uilib/components/autocomplete/events#dynamically-change-data). The \"active_item\" property is the currently selected item by keyboard navigation',\n    type: 'function',\n    status: 'optional',\n  },\n  on_show: {\n    doc: 'Will be called once the user presses the autocomplete. Returns the data item `{ data, attributes }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_hide: {\n    doc: 'Will be called once the user presses the autocomplete again, or clicks somewhere else. Returns the data item `{ data, attributes }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const DrawerListProperties: PropertiesTableProps = {\n  data: {\n    doc: \"The data we want to fill the list with. Provide the data as a JSON string, array, or object in the specified data structure. If you don't have to define a value, you can also send in a function which will be called once the user opens the DrawerList.\",\n    type: 'string | object | function',\n    status: 'required',\n  },\n  value: {\n    doc: 'Define a preselected data entry (index) or key inside an array item. Can be a string or integer.',\n    type: ['string', 'number'],\n    status: 'optional',\n  },\n  default_value: {\n    doc: 'Define a startup value or handle a re-render without handling the state during the re-render by yourself. Defaults to null.',\n    type: 'number',\n    status: 'optional',\n  },\n  triangle_position: {\n    doc: \"Position of the arrow icon/triangle inside the drawer-list. Set to 'left' or 'right'. Defaults to 'left' if not set.\",\n    type: 'string',\n    status: 'optional',\n  },\n  direction: {\n    doc: \"Defines the direction of how the drawer-list shows the options list. Can be 'bottom' or 'top'. Defaults to 'auto'.\",\n    type: 'string',\n    status: 'optional',\n  },\n  label_direction: {\n    doc: \"The direction of the label. If set to 'horizontal', the label will be positioned horizontally next to the input element. If set to 'vertical', the label will be positioned vertically above the input element.\",\n    type: 'string',\n    status: 'optional',\n  },\n  prevent_selection: {\n    doc: 'If set to `true`, the DrawerList will then not make any permanent selection.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  focusable: {\n    doc: 'If set to `true`, the element is then focusable by assertive technologies.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  prevent_close: {\n    doc: 'If set to `true`, the DrawerList will not close on any events.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  keep_open: {\n    doc: 'If set to `true`, the DrawerList will close on outside clicks, but not on selection.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  independent_width: {\n    doc: 'If set to `true`, the DrawerList will handle its width and position independently of the parent/mother element.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  fixed_position: {\n    doc: 'If set to `true`, the DrawerList will be fixed in its scroll position by using CSS `position: fixed;`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  enable_body_lock: {\n    doc: 'If set to `true`, the HTML body will get locked from scrolling when the Dropdown is open.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skip_keysearch: {\n    doc: 'If set to `true`, search items by the first key will be ignored.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  ignore_events: {\n    doc: 'If set to `true`, all keyboard and mouse events will be ignored.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align_drawer: {\n    doc: \"Use 'right' to change the options alignment direction. Makes only sense to use in combination with `prevent_selection` or `more_menu` - or if an independent width is used.\",\n    type: 'string',\n    status: 'optional',\n  },\n  list_class: {\n    doc: 'Define an HTML class that will be set on the list, beside `dnb-drawer-list__list`.',\n    type: 'string',\n    status: 'optional',\n  },\n  portal_class: {\n    doc: 'Define an HTML class that will be set on the DOM portal beside `dnb-drawer-list__portal__style`. Can be useful to handle e.g. a custom `z-index` in relation to a header.',\n    type: 'string',\n    status: 'optional',\n  },\n  scrollable: {\n    doc: 'Defines if the options list should be scrollable (the `max-height` is set by default to `50vh`).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  no_scroll_animation: {\n    doc: 'To disable scrolling animation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  no_animation: {\n    doc: 'To disable appear/disappear (show/hide) animation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skip_portal: {\n    doc: 'To disable the React Portal behavior.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  min_height: {\n    doc: 'Defines the minimum height (in `rem`) of the options list.',\n    type: 'string',\n    status: 'optional',\n  },\n  max_height: {\n    doc: 'Defines the maximum height (in `rem`) of the options list.',\n    type: 'string',\n    status: 'optional',\n  },\n  page_offset: {\n    doc: 'Defines the available scrollable height. If scrolling should not change the height of the drawer-list, then set it to `0` (useful if the DrawerList is used in fixed positions on contrast to a scrollable page content).',\n    type: 'string',\n    status: 'optional',\n  },\n  observer_element: {\n    doc: 'Set a HTML element, either as a selector or a DOM element. Can be used to send in an element which will be used to make the direction calculation on.',\n    type: 'string',\n    status: 'optional',\n  },\n  cache_hash: {\n    doc: 'Set a `cache_hash` as a string to enable internal memorizing of the list to enhance rerendering performance. Components like Autocomplete are using this because of the huge data changes due to search and reorder.',\n    type: 'string',\n    status: 'optional',\n  },\n  wrapper_element: {\n    doc: \"Has to be an HTML Element, ideally a mother element, used to calculate sizes and distances. Also used for the 'click outside' detection. Clicking on the `wrapper_element` will not trigger an outside click.\",\n    type: 'HTMLElement',\n    status: 'optional',\n  },\n  options_render: {\n    doc: 'Has to be a function, returning the items again. See [example](/uilib/components/fragments/drawer-list#example-usage-of-options_render). This can be used to add additional options above the actual rendered list.',\n    type: 'function',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const DrawerListEvents: PropertiesTableProps = {\n  on_pre_change: {\n    doc: 'Will be called before `on_change`, this way you can return false to prevent selection and to prevent `on_change` execution.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_change: {\n    doc: 'Will be called on state changes made by the user.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_select: {\n    doc: 'Will be called once the user selects an item by a click or keyboard navigation.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_show: {\n    doc: 'Will be called once the user presses the drawer-list.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_hide: {\n    doc: 'Will be called once the user presses the drawer-list again, or clicks somewhere else.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","a","pre","code","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","PropertiesTable","autocompleteProperties","DrawerListProperties","className","TranslationsTable","localeKey","wrapper","MDXLayout","mode","doc","type","status","input_value","placeholder","title","disable_filter","disable_highlighting","disable_reorder","search_numbers","search_in_word_index","keep_value","keep_selection","keep_value_and_selection","prevent_selection","show_clear_button","icon","icon_size","icon_position","input_icon","triangle_position","size","drawer_class","show_submit_button","align_autocomplete","no_options","aria_live_options","show_all","indicator_label","show_options_sr","selected_sr","submit_button_title","submit_button_icon","submit_element","opened","open_on_focus","stretch","skip_portal","status_state","status_props","globalStatus","label","label_direction","label_sr_only","suffix","skeleton","input_ref","input_element","AutocompleteEvents","on_type","on_focus","on_blur","on_change","on_select","on_show","on_hide","Td","Th","Tr","data","value","default_value","direction","focusable","prevent_close","keep_open","independent_width","fixed_position","enable_body_lock","skip_keysearch","ignore_events","align_drawer","list_class","portal_class","scrollable","no_scroll_animation","no_animation","min_height","max_height","page_offset","observer_element","cache_hash","wrapper_element","options_render","DrawerListEvents","on_pre_change"],"sourceRoot":""}