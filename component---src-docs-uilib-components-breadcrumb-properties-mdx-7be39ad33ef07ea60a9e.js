"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[26809],{4497:function(e,t,n){n.r(t);var o=n(52322),s=n(45392),a=n(85179),i=n(68230),r=n(76071);function c(e){const t=Object.assign({h2:"h2",h3:"h3",code:"code",p:"p",strong:"strong",a:"a"},(0,s.a)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{children:"Properties"}),"\n",(0,o.jsxs)(t.h3,{children:[(0,o.jsx)(t.code,{children:"Breadcrumb"})," properties"]}),"\n",(0,o.jsx)(a.ZP,{props:r.ge}),"\n",(0,o.jsxs)(t.h3,{children:[(0,o.jsx)(t.code,{children:"Breadcrumb.Item"})," properties"]}),"\n",(0,o.jsx)(a.ZP,{props:r.TB}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"NB:"})," When interactive, the item is an inherited ",(0,o.jsx)(t.a,{href:"/uilib/components/button/",children:"Button"}),". You can therefore swap out the underlying HTML element, by providing a new ",(0,o.jsx)(t.code,{children:"element"})," or use other Button properties, such as ",(0,o.jsx)(t.code,{children:"to"})," instead of ",(0,o.jsx)(t.code,{children:"href"}),"."]}),"\n",(0,o.jsx)(t.h2,{children:"Translations"}),"\n",(0,o.jsx)(i.Z,{localeKey:"Breadcrumb"})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,s.a)(),e.components);return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(c,e)})):c(e)}},68230:function(e,t,n){n.d(t,{Z:function(){return x}});var o=n(70894),s=n(2784),a=n(55560),i=n(41676),r=n(6210),c=n(88268),l=n(36946),p=n(64223),d=n(64411),u=n(80945),h=n(88065),m=n(45270),f=n(85179),b=n(82623),y=n(52476),g=n(52322);const j=(0,o.Z)(a.ZP,{target:"ejvypor0"})({name:"1qdk5x4",styles:"td{white-space:nowrap;}"});function x(e){let{localeKey:t,source:n=null}=e;n=(0,s.useMemo)((()=>n||Object.assign((0,d.rM)({},h.Z,m.Z),b.hc)),[n]);const o={},x={},v=(Array.isArray(t)?t:[t]).map((e=>{if(e.includes(".")){const t=e.split(".")[0];return x[t]=x[t]||[],x[t].push(e),t}return e})),k=(e,t,n,s)=>{e=`${s}.${e}`,x[s]&&!x[s].includes(e)||(o[e]=Object.assign(o[e]||{},{[n]:t}))};Object.entries(n).forEach((e=>{let[t,n]=e;v.forEach((e=>{const o=n[e];o?Object.entries(o).forEach((n=>{let[o,s]=n;if("object"==typeof s){const n=`${e}.${o}`;Object.entries(s).forEach((e=>{let[o,s]=e;k(o,s,t,n)}))}else k(o,s,t,e)})):(0,u.ZK)(`TranslationsTable: Could not find any translations for key: "${e}", perhaps you misspelled the key's name?`)}))}));const Z=Object.keys(n),w=Object.entries(o).map((e=>{let[t,n]=e;return(0,g.jsxs)(i.Z,{children:[(0,g.jsx)(r.Z,{children:(0,g.jsx)(f.Kw,{variant:"prop",children:t})}),Object.entries(n).map(((e,t)=>{let[n,o]=e;return(0,g.jsx)(r.Z,{children:"string"==typeof o?o:(0,g.jsx)("pre",{children:JSON.stringify(o,null,2)})},t+n)}))]},t)}));if(0!=w.length)return(0,g.jsxs)(g.Fragment,{children:[(0,g.jsxs)(c.Z,{children:["More info about translations can be found in the"," ",(0,g.jsx)(l.ZP,{href:"/uilib/usage/customisation/localization/",children:"general localization"})," ","and"," ",(0,g.jsx)(l.ZP,{href:"/uilib/extensions/forms/getting-started/#localization-and-translation",children:"Eufemia Forms localization"})," ","docs."]}),(0,g.jsx)(a.ZP.ScrollView,{children:(0,g.jsxs)(j,{children:[(0,g.jsx)("thead",{children:(0,g.jsxs)(i.Z,{children:[(0,g.jsx)(p.Z,{children:"Key"}),Z.map((e=>{const{status:t}=y.R[e];return(0,g.jsxs)(p.Z,{children:[e,t?` (${t})`:null]},e)}))]})}),(0,g.jsx)("tbody",{children:w})]})})]});(0,u.ZK)(`TranslationsTable: Not able to find any translations for input : "${t}", hence not rendering the translations table.`)}},76071:function(e,t,n){n.d(t,{TB:function(){return a},UN:function(){return i},ge:function(){return o},v3:function(){return s}});const o={data:{doc:"List of pages to render as breadcrumbitems. Each object in data can include all properties from [BreadcrumbItem properties](/uilib/components/breadcrumb/properties#breadcrumbitem-properties).",type:"Array<BreadcrumbItemProps>",status:"optional"},children:{doc:"Content of the component. Can be used instead of property `data`, by adding Breadcrumbitem children `<Breadcrumb.Item {...props} />`.",type:"React.ReactNode",status:"optional"},variant:{doc:"Defaults to 'responsive' or 'single' depending on content. Options: `responsive` | `single` | `multiple` | `collapse` .",type:["responsive","single","multiple","collapse"],status:"optional"},href:{doc:"For variant `single`, set `href` for button click. Can be used instead of event/property `onClick`.",type:"string",status:"optional"},navText:{doc:"Every `<nav>` on a page needs an unique aria-label text.",type:"React.ReactNode",status:"optional"},goBackText:{doc:"Override with a custom 'Back' text for variant `single` (Not recommended).",type:"React.ReactNode",status:"optional"},homeText:{doc:"Override with a custom 'Home' text (Not recommended)",type:"React.ReactNode",status:"optional"},backToText:{doc:"Override with a custom 'Back to...' text (Not recommended).",type:"React.ReactNode",status:"optional"},styleType:{doc:"Use one of the Section component style types (style_type). Defaults to `transparent`.",type:"Various",status:"optional"},collapsedStyleType:{doc:"Use one of the Section component variants. Defaults to `info`.",type:["error","info","warning","success"],status:"optional"},className:{doc:"Custom className for the component root.",type:"string",status:"optional"},isCollapsed:{doc:"For variant `collapse`, override isCollapsed for the collapsed content by updating this value using the provided property `onClick`.",type:"boolean",status:"optional"},spacing:{doc:"Include spacing properties from [Section](/uilib/components/section/properties) in breadcrumb. If only `true` is given, the spacing will be `small`. Defaults to `false`.",type:"Various",status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown.",type:"boolean",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},s={onClick:{doc:'will be called by user click interaction, to handle click event on "Back" for variant `single` and "Back to..." for variant `collapse`.',type:"function",status:"optional"}},a={text:{doc:"Text displaying inside Breadcrumb item.",type:"React.ReactNode",status:"optional"},variant:{doc:"The component variant. Options: `home` | `previous` | `current`.",type:["home","previous","current"],status:"optional"},icon:{doc:"Override icon displaying on the left side (Not recommended). Default: `chevron_left`.",type:"React.ReactNode",status:"optional"},href:{doc:"Set what happens when the user clicks on the item. Also see `onClick` event.",type:"string",status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown.",type:"boolean",status:"optional"}},i={onClick:{doc:"will be called by user click interaction.",type:"function",status:"optional"}}},6210:function(e,t,n){var o=n(30600);t.Z=o.Z},64223:function(e,t,n){var o=n(91859);t.Z=o.Z},41676:function(e,t,n){var o=n(76711);t.Z=o.Z}}]);
//# sourceMappingURL=component---src-docs-uilib-components-breadcrumb-properties-mdx-7be39ad33ef07ea60a9e.js.map