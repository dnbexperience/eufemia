{"version":3,"file":"component---src-docs-uilib-components-button-events-mdx-f860d7074f9032245b5d.js","mappings":"mMAKA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,OACHC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKT,EAAYG,GAAI,CAC9BK,SAAU,WACR,MAAMC,EAAAA,EAAAA,KAAKC,EAAAA,GAAiB,CAC9BX,MAAOY,EAAAA,MAGb,CAOA,UANA,SAAoBZ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOQ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWZ,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DS,UAAUC,EAAAA,EAAAA,KAAKX,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,+ECpBO,MAAMe,EAAyC,CACpDC,KAAM,CACJC,IAAK,oEACLD,KAAM,CAAC,SAAU,QAAS,UAC1BE,OAAQ,YAEVC,KAAM,CACJF,IAAK,gEACLD,KAAM,CAAC,SAAU,mBACjBE,OAAQ,YAEV,aAAc,CACZD,IAAK,4KACLD,KAAM,SACNE,OAAQ,YAEVE,MAAO,CACLH,IAAK,4KACLD,KAAM,SACNE,OAAQ,YAEVG,QAAS,CACPJ,IAAK,wJACLD,KAAM,CAAC,UAAW,YAAa,WAAY,UAC3CE,OAAQ,YAEVI,KAAM,CACJL,IAAK,qFACLD,KAAM,CAAC,QAAS,SAAU,UAAW,SACrCE,OAAQ,YAEVK,KAAM,CACJN,IAAK,mKACLD,KAAM,CAAC,SAAU,mBACjBE,OAAQ,YAEVM,cAAe,CACbP,IAAK,6IACLD,KAAM,CAAC,OAAQ,QAAS,OACxBE,OAAQ,YAEVO,UAAW,CACTR,IAAK,kDACLD,KAAM,SACNE,OAAQ,YAEVQ,KAAM,CACJT,IAAK,4HACLD,KAAM,SACNE,OAAQ,YAEVS,OAAQ,CACNV,IAAK,sKACLD,KAAM,CAAC,QAAS,SAAU,UAAW,QACrCE,OAAQ,YAEVU,IAAK,CACHX,IAAK,mMACLD,KAAM,SACNE,OAAQ,YAEVW,GAAI,CACFZ,IAAK,8IACLD,KAAM,SACNE,OAAQ,YAEVY,KAAM,CACJb,IAAK,oHACLD,KAAM,UACNE,OAAQ,YAEVa,QAAS,CACPd,IAAK,6FACLD,KAAM,UACNE,OAAQ,YAEVc,SAAU,CACRf,IAAK,4PACLD,KAAM,UACNE,OAAQ,YAEVe,QAAS,CACPhB,IAAK,4GACLD,KAAM,SACNE,OAAQ,YAEVgB,eAAgB,CACdjB,IAAK,uJACLD,KAAM,kBACNE,OAAQ,YAEViB,SAAU,CACRlB,IAAK,yEACLD,KAAM,UACNE,OAAQ,YAEVkB,QAAS,CACPnB,IAAK,0EACLD,KAAM,CAAC,SAAU,mBACjBE,OAAQ,YAEVA,OAAQ,CACND,IAAK,iLACLD,KAAM,CAAC,QAAS,OAAQ,WACxBE,OAAQ,YAEVmB,aAAc,CACZpB,IAAK,0GACLD,KAAM,CAAC,QAAS,QAChBE,OAAQ,YAEVoB,aAAc,CACZrB,IAAK,4DACLD,KAAM,SACNE,OAAQ,YAEVqB,aAAc,CACZtB,IAAK,6JACLD,KAAM,SACNE,OAAQ,YAEV,0CAA2C,CACzCD,IAAK,2DACLD,KAAM,CAAC,SAAU,UACjBE,OAAQ,aAICN,EAAqC,CAChD4B,SAAU,CACRvB,IAAK,yFACLD,KAAM,WACNE,OAAQ,Y,sCC/HZ,IAAeuB,EAAE,C,uCCAjB,IAAeC,EAAE,C,uCCAjB,IAAeC,EAAE,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/button/events.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/button/ButtonDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {ButtonEvents} from '@dnb/eufemia/src/components/button/ButtonDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Events\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: ButtonEvents\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const ButtonProperties: PropertiesTableProps = {\n  type: {\n    doc: 'The type HTML attribute. Defaults to `button` for legacy reasons.',\n    type: ['button', 'reset', 'submit'],\n    status: 'optional',\n  },\n  text: {\n    doc: 'The content of the button can be a string or a React Element.',\n    type: ['string', 'React.ReactNode'],\n    status: 'optional',\n  },\n  'aria-label': {\n    doc: 'Required if there is no text in the button. If `text` and `children` are undefined, setting the `title` property will automatically set `aria-label` with the same value.',\n    type: 'string',\n    status: 'optional',\n  },\n  title: {\n    doc: 'Required if there is no text in the button. If `text` and `children` are undefined, setting the `title` property will automatically set `aria-label` with the same value.',\n    type: 'string',\n    status: 'optional',\n  },\n  variant: {\n    doc: 'Defines the kind of button. Possible values are `primary`, `secondary`, `tertiary` and `signal`. Defaults to `primary` (or `secondary` if icon only).',\n    type: ['primary', 'secondary', 'tertiary', 'signal'],\n    status: 'optional',\n  },\n  size: {\n    doc: 'The size of the button. For now there is `small`, `medium`, `default` and `large`.',\n    type: ['small', 'medium', 'default', 'large'],\n    status: 'optional',\n  },\n  icon: {\n    doc: 'To be included in the button. [Primary Icons](/icons/primary) can be set as a string (e.g. `icon=\"chevron_right\"`), other icons should be set as React elements.',\n    type: ['string', 'React.ReactNode'],\n    status: 'optional',\n  },\n  icon_position: {\n    doc: 'Position of icon inside the button. Set to `left` or `right`. Tertiary button variant also supports `top`. Defaults to `right` if not set.',\n    type: ['left', 'right', 'top'],\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'Define icon width and height. Defaults to 16px.',\n    type: 'string',\n    status: 'optional',\n  },\n  href: {\n    doc: 'If you want the button to behave as a link. Use with caution! A link should normally visually be a link and not a button.',\n    type: 'string',\n    status: 'optional',\n  },\n  target: {\n    doc: 'When button behaves as a link. Used to specify where to open the linked document, specified by `href`. Possible values are `_self`, `_blank`, `_parent` and `_top`.',\n    type: ['_self', '_blank', '_parent', '_top'],\n    status: 'optional',\n  },\n  rel: {\n    doc: 'When button behaves as a link. Used to specify the relationship between a linked resource and the current document. Examples(non-exhaustive list) of values are `nofollow`, `search`, and `tag`.',\n    type: 'string',\n    status: 'optional',\n  },\n  to: {\n    doc: 'Use this property only if you are using a router Link component as the `element` that uses the `to` property to declare the navigation url.',\n    type: 'string',\n    status: 'optional',\n  },\n  wrap: {\n    doc: 'If set to `true` the button text will wrap in to new lines if the overflow point is reached. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  stretch: {\n    doc: 'Set it to `true` in order to stretch the button to the available space. Defaults to false.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  bounding: {\n    doc: 'Set it to `true` in order to extend the bounding box (above the visual button background). You may also look into the HTML class `dnb-button__bounding` if it needs some CSS customization in order to get the particular button right for your use-case.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  element: {\n    doc: 'Only meant to be used for special use cases. Defaults to `button` or `a` depending if href is set or not.',\n    type: 'string',\n    status: 'optional',\n  },\n  custom_content: {\n    doc: 'If you need to inject completely custom markup (React Element) into the button component. You have then to handle alignment and styling by yourself.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  tooltip: {\n    doc: 'Provide a string or a React Element to be shown as the tooltip content.',\n    type: ['string', 'React.ReactNode'],\n    status: 'optional',\n  },\n  status: {\n    doc: 'Set it to either `status=\"error\"` or a text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: ['error', 'info', 'boolean'],\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently there are two statuses `[error, info]`. Defaults to `error`.',\n    type: ['error', 'info'],\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'object',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const ButtonEvents: PropertiesTableProps = {\n  on_click: {\n    doc: 'will be called on a click event. Returns an object with the native event: `{ event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","ButtonEvents","wrapper","MDXLayout","ButtonProperties","type","doc","status","text","title","variant","size","icon","icon_position","icon_size","href","target","rel","to","wrap","stretch","bounding","element","custom_content","skeleton","tooltip","status_state","status_props","globalStatus","on_click","Td","Th","Tr"],"sourceRoot":""}