"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[15440],{38831:function(e,t,s){s.r(t);var n=s(52322),d=s(45392);function i(e){const t=Object.assign({h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",em:"em",a:"a",h3:"h3",p:"p"},(0,d.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{children:"Properties"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Properties"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"type"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," ",(0,n.jsx)(t.code,{children:"button"}),", ",(0,n.jsx)(t.code,{children:"reset"})," or ",(0,n.jsx)(t.code,{children:"submit"})," for the ",(0,n.jsx)(t.code,{children:"type"})," HTML attribute. Defaults to ",(0,n.jsx)(t.code,{children:"button"})," for legacy reasons."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.code,{children:"text"})," or ",(0,n.jsx)(t.code,{children:"children"})]}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," the content of the button can be a string or a React Element."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.code,{children:"aria-label"})," or ",(0,n.jsx)(t.code,{children:"title"})]}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," required if there is no text in the button. If ",(0,n.jsx)(t.code,{children:"text"})," and ",(0,n.jsx)(t.code,{children:"children"})," are undefined, setting the ",(0,n.jsx)(t.code,{children:"title"})," prop will automatically set ",(0,n.jsx)(t.code,{children:"aria-label"})," with the same value."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"variant"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," defines the kind of button. Possible values are ",(0,n.jsx)(t.code,{children:"primary"}),", ",(0,n.jsx)(t.code,{children:"secondary"}),", ",(0,n.jsx)(t.code,{children:"tertiary"})," and ",(0,n.jsx)(t.code,{children:"signal"}),". Defaults to ",(0,n.jsx)(t.code,{children:"primary"})," (or ",(0,n.jsx)(t.code,{children:"secondary"})," if icon only)."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"size"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," the size of the button. For now there is ",(0,n.jsx)(t.code,{children:"small"}),", ",(0,n.jsx)(t.code,{children:"medium"}),", ",(0,n.jsx)(t.code,{children:"default"})," and ",(0,n.jsx)(t.code,{children:"large"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"icon"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," to be included in the button. ",(0,n.jsx)(t.a,{href:"/icons/primary",children:"Primary Icons"})," can be set as a string (e.g. ",(0,n.jsx)(t.code,{children:'icon="chevron_right"'}),"), other icons should be set as React elements."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"icon_position"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," position of icon inside the button. Set to ",(0,n.jsx)(t.code,{children:"left"})," or ",(0,n.jsx)(t.code,{children:"right"}),". Tertiary button variant also supports ",(0,n.jsx)(t.code,{children:"top"}),". Defaults to ",(0,n.jsx)(t.code,{children:"right"})," if not set."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"icon_size"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," define icon width and height. Defaults to 16px."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"href"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," if you want the button to behave as a link. Use with caution! A link should normally visually be a link and not a button."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"target"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," When button behaves as a link. Used to specify where to open the linked document, specified by ",(0,n.jsx)(t.code,{children:"href"}),". Possible values are ",(0,n.jsx)(t.code,{children:"_self"}),", ",(0,n.jsx)(t.code,{children:"_blank"}),", ",(0,n.jsx)(t.code,{children:"_parent"})," and ",(0,n.jsx)(t.code,{children:"_top"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"rel"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," When button behaves as a link. Used to specify the relationship between a linked resource and the current document. Examples(non-exhaustive list) of values are ",(0,n.jsx)(t.code,{children:"nofollow"}),", ",(0,n.jsx)(t.code,{children:"search"}),", and ",(0,n.jsx)(t.code,{children:"tag"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"to"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," use this prop only if you are using a router Link component as the ",(0,n.jsx)(t.code,{children:"element"})," that uses the ",(0,n.jsx)(t.code,{children:"to"})," property to declare the navigation url."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"wrap"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," if set to ",(0,n.jsx)(t.code,{children:"true"})," the button text will wrap in to new lines if the overflow point is reached. Defaults to ",(0,n.jsx)(t.code,{children:"false"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"stretch"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," set it to ",(0,n.jsx)(t.code,{children:"true"})," in order to stretch the button to the available space. Defaults to false."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"bounding"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," set it to ",(0,n.jsx)(t.code,{children:"true"})," in order to extend the bounding box (above the visual button background). You may also look into the HTML class ",(0,n.jsx)(t.code,{children:"dnb-button__bounding"})," if it needs some CSS customization in order to get the particular button right for your use-case."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"element"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," only meant to be used for special use cases. Defaults to ",(0,n.jsx)(t.code,{children:"button"})," or ",(0,n.jsx)(t.code,{children:"a"})," depending if href is set or not."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"custom_content"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," if you need to inject completely custom markup (React Element) into the button component. You have then to handle alignment and styling by yourself."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"skeleton"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," if set to ",(0,n.jsx)(t.code,{children:"true"}),", an overlaying skeleton with animation will be shown."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"tooltip"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," Provide a string or a React Element to be shown as the tooltip content."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"status"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," set it to either ",(0,n.jsx)(t.code,{children:'status="error"'})," or a text with a status message. The style defaults to an error message. You can use ",(0,n.jsx)(t.code,{children:"true"})," to only get the status color, without a message."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"status_state"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," defines the state of the status. Currently there are two statuses ",(0,n.jsx)(t.code,{children:"[error, info]"}),". Defaults to ",(0,n.jsx)(t.code,{children:"error"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"status_props"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," use an object to define additional FormStatus properties."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"globalStatus"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," the ",(0,n.jsx)(t.a,{href:"/uilib/components/global-status/properties/#configuration-object",children:"configuration"})," used for the target ",(0,n.jsx)(t.a,{href:"/uilib/components/global-status",children:"GlobalStatus"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"/uilib/layout/space/properties",children:"Space"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," spacing properties like ",(0,n.jsx)(t.code,{children:"top"})," or ",(0,n.jsx)(t.code,{children:"bottom"})," are supported."]})]})]})]}),"\n",(0,n.jsx)(t.h3,{children:"Unstyled variant"}),"\n",(0,n.jsxs)(t.p,{children:["In cases where it makes sense to use the button component, but with very different styles, you can use ",(0,n.jsx)(t.code,{children:"unstyled"})," as a variant. For now, it is only meant to be used internally."]})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,d.ah)(),e.components);return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(i,e)})):i(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-button-properties-mdx-6629cc685f0880d0bc83.js.map