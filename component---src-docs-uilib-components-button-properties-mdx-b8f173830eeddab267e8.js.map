{"version":3,"file":"component---src-docs-uilib-components-button-properties-mdx-b8f173830eeddab267e8.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/button/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/button/ButtonDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {ButtonProperties} from '@dnb/eufemia/src/components/button/ButtonDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: ButtonProperties\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Unstyled variant\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In cases where it makes sense to use the button component, but with very different styles, you can use \", _jsx(_components.code, {\n        children: \"unstyled\"\n      }), \" as a variant. For now, it is only meant to be used internally.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colorValue = 'var(--color-success-green)'\nconst colorString = 'var(--color-fire-red)'\nconst colorType = 'var(--color-violet)'\nconst colorUndefined = 'var(--color-black-55)'\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = children.startsWith(`'`) ? colorString : colorType\n        // falls through\n      }\n      case 'value': {\n        style.color = children.startsWith(`'`)\n          ? colorString\n          : children === 'undefined' || children === 'null'\n          ? colorUndefined\n          : colorValue\n        // falls through\n      }\n      default: {\n        style.background = 'none'\n        style.boxShadow = 'none'\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('[')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const ButtonProperties: PropertiesTableProps = {\n  type: {\n    doc: 'The type HTML attribute. Defaults to `button` for legacy reasons.',\n    type: ['button', 'reset', 'submit'],\n    status: 'optional',\n  },\n  text: {\n    doc: 'The content of the button can be a string or a React Element.',\n    type: ['string', 'React.ReactNode'],\n    status: 'optional',\n  },\n  'aria-label': {\n    doc: 'Required if there is no text in the button. If `text` and `children` are undefined, setting the `title` property will automatically set `aria-label` with the same value.',\n    type: 'string',\n    status: 'optional',\n  },\n  title: {\n    doc: 'Required if there is no text in the button. If `text` and `children` are undefined, setting the `title` property will automatically set `aria-label` with the same value.',\n    type: 'string',\n    status: 'optional',\n  },\n  variant: {\n    doc: 'Defines the kind of button. Possible values are `primary`, `secondary`, `tertiary` and `signal`. Defaults to `primary` (or `secondary` if icon only).',\n    type: ['primary', 'secondary', 'tertiary', 'signal'],\n    status: 'optional',\n  },\n  size: {\n    doc: 'The size of the button. For now there is `small`, `medium`, `default` and `large`.',\n    type: ['small', 'medium', 'default', 'large'],\n    status: 'optional',\n  },\n  icon: {\n    doc: 'To be included in the button. [Primary Icons](/icons/primary) can be set as a string (e.g. `icon=\"chevron_right\"`), other icons should be set as React elements.',\n    type: ['string', 'React.ReactNode'],\n    status: 'optional',\n  },\n  icon_position: {\n    doc: 'Position of icon inside the button. Set to `left` or `right`. Tertiary button variant also supports `top`. Defaults to `right` if not set.',\n    type: ['left', 'right', 'top'],\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'Define icon width and height. Defaults to 16px.',\n    type: 'string',\n    status: 'optional',\n  },\n  href: {\n    doc: 'If you want the button to behave as a link. Use with caution! A link should normally visually be a link and not a button.',\n    type: 'string',\n    status: 'optional',\n  },\n  target: {\n    doc: 'When button behaves as a link. Used to specify where to open the linked document, specified by `href`. Possible values are `_self`, `_blank`, `_parent` and `_top`.',\n    type: ['_self', '_blank', '_parent', '_top'],\n    status: 'optional',\n  },\n  rel: {\n    doc: 'When button behaves as a link. Used to specify the relationship between a linked resource and the current document. Examples(non-exhaustive list) of values are `nofollow`, `search`, and `tag`.',\n    type: 'string',\n    status: 'optional',\n  },\n  to: {\n    doc: 'Use this property only if you are using a router Link component as the `element` that uses the `to` property to declare the navigation url.',\n    type: 'string',\n    status: 'optional',\n  },\n  wrap: {\n    doc: 'If set to `true` the button text will wrap in to new lines if the overflow point is reached. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  stretch: {\n    doc: 'Set it to `true` in order to stretch the button to the available space. Defaults to false.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  bounding: {\n    doc: 'Set it to `true` in order to extend the bounding box (above the visual button background). You may also look into the HTML class `dnb-button__bounding` if it needs some CSS customization in order to get the particular button right for your use-case.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  element: {\n    doc: 'Only meant to be used for special use cases. Defaults to `button` or `a` depending if href is set or not.',\n    type: 'string',\n    status: 'optional',\n  },\n  custom_content: {\n    doc: 'If you need to inject completely custom markup (React Element) into the button component. You have then to handle alignment and styling by yourself.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  tooltip: {\n    doc: 'Provide a string or a React Element to be shown as the tooltip content.',\n    type: ['string', 'React.ReactNode'],\n    status: 'optional',\n  },\n  status: {\n    doc: 'Set it to either `status=\"error\"` or a text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: ['error', 'info', 'boolean'],\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently there are two statuses `[error, info]`. Defaults to `error`.',\n    type: ['error', 'info'],\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'object',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","h3","p","code","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","ButtonProperties","wrapper","MDXLayout","basicComponents","StyledTable","_styled","Table","target","name","styles","colorString","FormattedCode","_ref","variant","strikethrough","style","rest","textDecoration","color","startsWith","background","boxShadow","_ref2","valueType","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","type","defaultValue","doc","status","includes","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp","text","title","size","icon","icon_position","icon_size","href","rel","to","wrap","stretch","bounding","element","custom_content","skeleton","tooltip","status_state","status_props","globalStatus"],"sourceRoot":""}