{"version":3,"file":"component---src-docs-uilib-components-card-demos-mdx-a389f9746a95af5b8b18.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/card/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/card/demos.mdx"],"sourcesContent":["import ComponentBox from '../../../../shared/tags/ComponentBox'\nimport {\n  Button,\n  Card,\n  Flex,\n  Grid,\n  H2,\n  P,\n  Section,\n  Table,\n  Td,\n  Th,\n  Tr,\n} from '@dnb/eufemia/src'\nimport { Field, Form } from '@dnb/eufemia/src/extensions/forms'\n\nexport const Default = () => {\n  return (\n    <ComponentBox data-visual-test=\"layout-card-border\">\n      <Card>\n        <P>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi\n          cursus pharetra elit in bibendum.\n        </P>\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const NestedCards = () => {\n  return (\n    <ComponentBox data-visual-test=\"layout-card-nested\">\n      <Card stack>\n        <P>First Card</P>\n        <Card stack>\n          <P>Second Card</P>\n          <Card stack>\n            <P>Third Card (for edge cases only)</P>\n          </Card>\n        </Card>\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const WithTable = () => {\n  return (\n    <ComponentBox data-visual-test=\"layout-card-table\">\n      {() => {\n        const MyTable = () => (\n          <Table.ScrollView>\n            <Table border outline size=\"medium\">\n              <thead>\n                <Tr noWrap>\n                  <Th>Column 1</Th>\n                  <Th>Column 2</Th>\n                  <Th>Column 3</Th>\n                </Tr>\n              </thead>\n              <tbody>\n                <Tr>\n                  <Td>Row 1</Td>\n                  <Td>Row 1</Td>\n                  <Td>Row 1</Td>\n                </Tr>\n                <Tr>\n                  <Td colSpan={3} align=\"right\">\n                    <Button>Button</Button>\n                  </Td>\n                </Tr>\n                <Tr>\n                  <Td>Row 3</Td>\n                  <Td>Row 3</Td>\n                  <Td>Row 3</Td>\n                </Tr>\n              </tbody>\n            </Table>\n          </Table.ScrollView>\n        )\n\n        return (\n          <Card\n            title=\"Card title\"\n            responsive={false}\n            innerSpace={0}\n            filled\n          >\n            <MyTable />\n          </Card>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const WithGrid = () => {\n  return (\n    <ComponentBox data-visual-test=\"layout-card-grid\">\n      <Grid.Container\n        columns={{\n          small: 1,\n          medium: 3,\n          large: 3,\n        }}\n        columnGap=\"small\"\n      >\n        <Card stack>\n          <H2>Heading</H2>\n          <P>Text</P>\n        </Card>\n        <Card stack>\n          <H2>Heading</H2>\n          <P>\n            Pariatur officia sit adipisicing pariatur commodo enim do quis\n          </P>\n        </Card>\n        <Card stack>\n          <H2>Heading</H2>\n          <P>Text</P>\n        </Card>\n      </Grid.Container>\n    </ComponentBox>\n  )\n}\n\nexport const WithFlex = () => {\n  return (\n    <ComponentBox data-visual-test=\"layout-card-flex\">\n      <Flex.Container>\n        <Card\n          size={{\n            small: 'auto',\n            medium: 4,\n            large: 4,\n          }}\n          stack\n        >\n          <H2>Heading</H2>\n          <P>Text</P>\n        </Card>\n        <Card\n          size={{\n            small: 'auto',\n            medium: 4,\n            large: 4,\n          }}\n          stack\n        >\n          <H2>Heading</H2>\n          <P>\n            Pariatur officia sit adipisicing pariatur commodo enim do quis\n          </P>\n        </Card>\n        <Card\n          size={{\n            small: 'auto',\n            medium: 4,\n            large: 4,\n          }}\n          stack\n        >\n          <H2>Heading</H2>\n          <P>Text</P>\n        </Card>\n      </Flex.Container>\n    </ComponentBox>\n  )\n}\n\nexport const Stack = () => {\n  return (\n    <ComponentBox data-visual-test=\"layout-card-stack\">\n      <Card stack>\n        <P>Stacked content</P>\n        <P>Stacked content</P>\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const VerticalFields = () => {\n  return (\n    <ComponentBox>\n      <Form.Card>\n        <Field.String label=\"Label\" value=\"Value\" />\n        <Field.String label=\"Label\" value=\"Value\" />\n      </Form.Card>\n    </ComponentBox>\n  )\n}\n\nexport const HorizontalFields = () => {\n  return (\n    <ComponentBox>\n      <Form.Card>\n        <Flex.Horizontal>\n          <Field.String label=\"Label\" value=\"Value\" width=\"small\" />\n          <Field.String label=\"Label\" value=\"Value\" width=\"stretch\" />\n        </Flex.Horizontal>\n      </Form.Card>\n    </ComponentBox>\n  )\n}\n\nexport const WithHeadingsAndAriaLabel = () => {\n  return (\n    <ComponentBox hidePreview>\n      <Card aria-labelledby=\"unique-id\">\n        <Form.SubHeading id=\"unique-id\" space={0}>\n          Heading\n        </Form.SubHeading>\n        <P>Content inside a landmark ...</P>\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const WithoutPadding = () => {\n  return (\n    <ComponentBox>\n      <Card innerSpace={false} align=\"stretch\">\n        <P>no inner space</P>\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const WithNestedSection = () => {\n  return (\n    <ComponentBox data-visual-test=\"card-nested-section\">\n      <Flex.Stack>\n        <Card gap=\"x-small\" align=\"stretch\">\n          <Form.SubHeading>Card with a nested Section</Form.SubHeading>\n          <Section\n            variant=\"info\"\n            innerSpace={{ top: 'small', bottom: 'medium' }}\n          >\n            <Field.String width=\"medium\" label=\"In nested Section\" />\n          </Section>\n        </Card>\n\n        <Card innerSpace=\"x-large\" stack>\n          <Section\n            variant=\"info\"\n            innerSpace={{ top: 'small', bottom: 'medium' }}\n          >\n            <Field.String\n              width=\"medium\"\n              label=\"Card with a 'x-large' inner space\"\n            />\n          </Section>\n        </Card>\n\n        <Card innerSpace={false} align=\"stretch\">\n          <P>no inner space</P>\n          <Section innerSpace backgroundColor=\"var(--card-outline-color)\">\n            <Field.String\n              width=\"medium\"\n              label=\"Card with no inner space\"\n            />\n          </Section>\n          <P>no inner space</P>\n        </Card>\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n\nexport const WithOutset = () => {\n  return (\n    <ComponentBox data-visual-test=\"layout-card-outset\">\n      <Flex.Vertical>\n        <Form.MainHeading>I'm left aligned</Form.MainHeading>\n        <Card stack outset>\n          <P>Card content</P>\n          <Card>\n            <P>Nested card</P>\n          </Card>\n        </Card>\n        <Form.SubmitButton text=\"I'm also left aligned\" />\n      </Flex.Vertical>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.Default) _missingMdxReference(\"Examples.Default\", true);\n  if (!Examples.HorizontalFields) _missingMdxReference(\"Examples.HorizontalFields\", true);\n  if (!Examples.NestedCards) _missingMdxReference(\"Examples.NestedCards\", true);\n  if (!Examples.Stack) _missingMdxReference(\"Examples.Stack\", true);\n  if (!Examples.VerticalFields) _missingMdxReference(\"Examples.VerticalFields\", true);\n  if (!Examples.WithFlex) _missingMdxReference(\"Examples.WithFlex\", true);\n  if (!Examples.WithGrid) _missingMdxReference(\"Examples.WithGrid\", true);\n  if (!Examples.WithNestedSection) _missingMdxReference(\"Examples.WithNestedSection\", true);\n  if (!Examples.WithOutset) _missingMdxReference(\"Examples.WithOutset\", true);\n  if (!Examples.WithTable) _missingMdxReference(\"Examples.WithTable\", true);\n  if (!Examples.WithoutPadding) _missingMdxReference(\"Examples.WithoutPadding\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Default border\"\n    }), \"\\n\", _jsx(Examples.Default, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Stack\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When \", _jsx(_components.code, {\n        children: \"stack\"\n      }), \" is set to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \", the Card will add a gap between its children and stretch them to the full.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For \", _jsx(_components.a, {\n        href: \"uilib/extensions/forms/\",\n        children: \"form components\"\n      }), \", you should use \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Card/\",\n        children: \"Form.Card\"\n      }), \" instead of the original Card component.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When \", _jsx(_components.code, {\n        children: \"stack\"\n      }), \" is set to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \", the Card will add a gap between its children and stretch them to the full.\"]\n    }), \"\\n\", _jsx(Examples.Stack, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Vertical fields\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When using Eufemia Forms, you may want to use \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Card/\",\n        children: \"Form.Card\"\n      }), \" instead of the original Card component.\"]\n    }), \"\\n\", _jsx(Examples.VerticalFields, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Horizontal fields\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When using Eufemia Forms, you may want to use \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Card/\",\n        children: \"Form.Card\"\n      }), \" instead of the original Card component.\"]\n    }), \"\\n\", _jsx(Examples.HorizontalFields, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Nested Cards\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Nested cards have \", _jsx(_components.code, {\n        children: \"responsive={false}\"\n      }), \" by default and will not behave responsive.\"]\n    }), \"\\n\", _jsx(Examples.NestedCards, {}), \"\\n\", _jsxs(_components.h2, {\n      children: [\"With \", _jsx(_components.code, {\n        children: \"outset\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When using \", _jsx(_components.code, {\n        children: \"outset\"\n      }), \", the Card will break out of the layout container.\\nOn small screens (mobile) the outset is removed.\"]\n    }), \"\\n\", _jsx(Examples.WithOutset, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Without padding\"\n    }), \"\\n\", _jsx(Examples.WithoutPadding, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With nested Section\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Card components needs to have \", _jsx(_components.code, {\n        children: \"stack={true}\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"align=\\\"stretch\\\"\"\n      }), \" in order to stretch its children components.\"]\n    }), \"\\n\", _jsx(Examples.WithNestedSection, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With Table\"\n    }), \"\\n\", _jsx(Examples.WithTable, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With Grid\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Grid wraps the Cards nicely on smaller screens.\"\n    }), \"\\n\", _jsx(Examples.WithGrid, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With Flex\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"While Flex has the horizontal direction, it uses rowGap when wrapping. So it's the container spacing the Cards then. This is not ideal, because the Cards should ideally have no gap, like in the Grid example above.\"\n    }), \"\\n\", _jsx(Examples.WithFlex, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["Default","_jsx","ComponentBox","children","NestedCards","WithTable","noInline","WithGrid","WithFlex","Stack","VerticalFields","HorizontalFields","WithHeadingsAndAriaLabel","hidePreview","WithoutPadding","WithNestedSection","WithOutset","_createMdxContent","props","_components","Object","assign","h2","h3","p","code","a","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","href","id","component","Error","wrapper","MDXLayout"],"sourceRoot":""}