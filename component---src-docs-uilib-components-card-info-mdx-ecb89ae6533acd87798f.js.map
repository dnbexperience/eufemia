{"version":3,"file":"component---src-docs-uilib-components-card-info-mdx-ecb89ae6533acd87798f.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/card/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/card/Examples.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.WithHeadingsAndAriaLabel) _missingMdxReference(\"Examples.WithHeadingsAndAriaLabel\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Import\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Card } from '@dnb/eufemia'\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Card\"\n      }), \" is a block section element showing the white box with rounded gray borders, adding spacing automatically.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It uses \", _jsx(_components.a, {\n        href: \"/uilib/layout/flex/item\",\n        children: \"Flex.Item\"\n      }), \" under the hood. When one of these properties were given, \", _jsx(_components.code, {\n        children: \"stack\"\n      }), \", \", _jsx(_components.code, {\n        children: \"direction\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"spacing\"\n      }), \" â€“ the \", _jsx(_components.a, {\n        href: \"/uilib/layout/flex/container\",\n        children: \"Flex.Container\"\n      }), \" will be used.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Card } from '@dnb/eufemia'\\nimport { Form, Field } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Handler data={existingData} onSubmit={submitHandler}>\\n    <Card>\\n      <Field.Email path=\\\"/dataPath\\\" />\\n      <Form.ButtonRow>\\n        <Form.SubmitButton />\\n      </Form.ButtonRow>\\n    </Card>\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It uses a \", _jsx(_components.code, {\n        children: \"section\"\n      }), \" element. Which allows you to add an \", _jsx(_components.code, {\n        children: \"aria-label\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"aria-labelledby\"\n      }), \" to provide screen readers with landmarks.\"]\n    }), \"\\n\", _jsx(Examples.WithHeadingsAndAriaLabel, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import ComponentBox from '../../../../shared/tags/ComponentBox'\nimport {\n  Button,\n  Card,\n  Flex,\n  Grid,\n  H2,\n  Hr,\n  P,\n  Section,\n  Table,\n  Td,\n  Th,\n  Tr,\n} from '@dnb/eufemia/src'\nimport { Field, Form } from '@dnb/eufemia/src/extensions/forms'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      <Card data-visual-test=\"layout-card-border\">\n        <P>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi\n          cursus pharetra elit in bibendum.\n        </P>\n        <P>\n          Praesent nunc ipsum, convallis eget convallis gravida, vehicula\n          vitae metus.\n        </P>\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const NestedCards = () => {\n  return (\n    <ComponentBox data-visual-test=\"layout-card-nested\">\n      <Card>\n        <P>First Card</P>\n        <Card top>\n          <P>Second Card</P>\n          <Card top>\n            <P>Third Card (for edge cases only)</P>\n          </Card>\n        </Card>\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const WithTable = () => {\n  return (\n    <ComponentBox data-visual-test=\"layout-card-table\">\n      {() => {\n        const MyTable = () => (\n          <Table.ScrollView>\n            <Table border outline size=\"medium\">\n              <thead>\n                <Tr noWrap>\n                  <Th>Column 1</Th>\n                  <Th>Column 2</Th>\n                  <Th>Column 3</Th>\n                </Tr>\n              </thead>\n              <tbody>\n                <Tr>\n                  <Td>Row 1</Td>\n                  <Td>Row 1</Td>\n                  <Td>Row 1</Td>\n                </Tr>\n                <Tr>\n                  <Td colSpan={3} align=\"right\">\n                    <Button>Button</Button>\n                  </Td>\n                </Tr>\n                <Tr>\n                  <Td>Row 3</Td>\n                  <Td>Row 3</Td>\n                  <Td>Row 3</Td>\n                </Tr>\n              </tbody>\n            </Table>\n          </Table.ScrollView>\n        )\n\n        return (\n          <Card\n            title=\"Card title\"\n            responsive={false}\n            innerSpace={0}\n            filled\n          >\n            <MyTable />\n          </Card>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const WithGrid = () => {\n  return (\n    <ComponentBox data-visual-test=\"layout-card-grid\">\n      <Grid.Container\n        columns={{\n          small: 1,\n          medium: 3,\n          large: 3,\n        }}\n        columnGap=\"small\"\n      >\n        <Card stack>\n          <H2>Heading</H2>\n          <P>Text</P>\n        </Card>\n        <Card stack>\n          <H2>Heading</H2>\n          <P>\n            Pariatur officia sit adipisicing pariatur commodo enim do quis\n          </P>\n        </Card>\n        <Card stack>\n          <H2>Heading</H2>\n          <P>Text</P>\n        </Card>\n      </Grid.Container>\n    </ComponentBox>\n  )\n}\n\nexport const WithFlex = () => {\n  return (\n    <ComponentBox data-visual-test=\"layout-card-flex\">\n      <Flex.Container>\n        <Card\n          size={{\n            small: 'auto',\n            medium: 4,\n            large: 4,\n          }}\n          stack\n        >\n          <H2>Heading</H2>\n          <P>Text</P>\n        </Card>\n        <Card\n          size={{\n            small: 'auto',\n            medium: 4,\n            large: 4,\n          }}\n          stack\n        >\n          <H2>Heading</H2>\n          <P>\n            Pariatur officia sit adipisicing pariatur commodo enim do quis\n          </P>\n        </Card>\n        <Card\n          size={{\n            small: 'auto',\n            medium: 4,\n            large: 4,\n          }}\n          stack\n        >\n          <H2>Heading</H2>\n          <P>Text</P>\n        </Card>\n      </Flex.Container>\n    </ComponentBox>\n  )\n}\n\nexport const Stack = () => {\n  return (\n    <ComponentBox data-visual-test=\"layout-card-stack\">\n      <Card stack>\n        <Field.String label=\"Label\" value=\"Value\" />\n        <Field.String label=\"Label\" value=\"Value\" />\n        <Hr />\n        <Form.SubmitButton />\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const VerticalFields = () => {\n  return (\n    <ComponentBox>\n      <Card>\n        <Flex.Vertical>\n          <Field.String label=\"Label\" value=\"Value\" />\n          <Field.String label=\"Label\" value=\"Value\" />\n        </Flex.Vertical>\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const HorizontalFields = () => {\n  return (\n    <ComponentBox>\n      <Card>\n        <Flex.Horizontal>\n          <Field.String label=\"Label\" value=\"Value\" width=\"small\" />\n          <Field.String label=\"Label\" value=\"Value\" width=\"stretch\" />\n        </Flex.Horizontal>\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const WithHeadingsAndAriaLabel = () => {\n  return (\n    <ComponentBox hidePreview>\n      <Card aria-labelledby=\"unique-id\">\n        <Form.SubHeading id=\"unique-id\" space={0}>\n          Heading\n        </Form.SubHeading>\n        <P>Content inside a landmark ...</P>\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const WithoutPadding = () => {\n  return (\n    <ComponentBox>\n      <Card innerSpace={false} align=\"stretch\">\n        <P>no inner space</P>\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const WithNestedSection = () => {\n  return (\n    <ComponentBox data-visual-test=\"card-nested-section\">\n      <Flex.Stack>\n        <Card gap=\"x-small\" align=\"stretch\">\n          <Form.SubHeading>Card with a nested Section</Form.SubHeading>\n          <Section\n            variant=\"info\"\n            innerSpace={{ top: 'small', bottom: 'medium' }}\n          >\n            <Field.String width=\"medium\" label=\"In nested Section\" />\n          </Section>\n        </Card>\n\n        <Card innerSpace=\"x-large\" stack>\n          <Section\n            variant=\"info\"\n            innerSpace={{ top: 'small', bottom: 'medium' }}\n          >\n            <Field.String\n              width=\"medium\"\n              label=\"Card with a 'x-large' inner space\"\n            />\n          </Section>\n        </Card>\n\n        <Card innerSpace={false} align=\"stretch\">\n          <P>no inner space</P>\n          <Section innerSpace backgroundColor=\"var(--card-outline-color)\">\n            <Field.String\n              width=\"medium\"\n              label=\"Card with no inner space\"\n            />\n          </Section>\n          <P>no inner space</P>\n        </Card>\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","pre","code","p","a","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","children","_jsx","className","href","id","component","Error","wrapper","MDXLayout","Default","ComponentBox","NestedCards","WithTable","noInline","WithGrid","WithFlex","Stack","VerticalFields","HorizontalFields","WithHeadingsAndAriaLabel","hidePreview","WithoutPadding","WithNestedSection"],"sourceRoot":""}