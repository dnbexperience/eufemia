{"version":3,"file":"component---src-docs-uilib-components-checkbox-events-mdx-45148d230fff8272fc72.js","mappings":"mMAKA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,OACHC,EAAAA,EAAAA,KAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKT,EAAYG,GAAI,CAC9BK,SAAU,WACR,MAAMC,EAAAA,EAAAA,KAAKC,EAAAA,GAAiB,CAC9BX,MAAOY,EAAAA,MAGb,CAOA,UANA,SAAoBZ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,KAAsBL,EAAMM,YAC3E,OAAOQ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWZ,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DS,UAAUC,EAAAA,EAAAA,KAAKX,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,+ECpBO,MAAMe,EAA2C,CACtDC,QAAS,CACPC,IAAK,4EACLC,KAAM,UACNC,OAAQ,YAEVC,MAAO,CACLH,IAAK,oFACLC,KAAM,YACNC,OAAQ,YAEVE,MAAO,CACLJ,IAAK,2DACLC,KAAM,YACNC,OAAQ,YAEVG,cAAe,CACbL,IAAK,0FACLC,KAAM,SACNC,OAAQ,YAEVI,YAAa,CACXN,IAAK,gEACLC,KAAM,SACNC,OAAQ,YAEVK,KAAM,CACJP,IAAK,6EACLC,KAAM,CAAC,SAAU,UACjBC,OAAQ,YAEVM,cAAe,CACbR,IAAK,uDACLC,KAAM,UACNC,OAAQ,YAEVA,OAAQ,CACNF,IAAK,0IACLC,KAAM,CAAC,QAAS,OAAQ,WACxBC,OAAQ,YAEVO,YAAa,CACXT,IAAK,2GACLC,KAAM,CAAC,QAAS,QAChBC,OAAQ,YAEVQ,YAAa,CACXV,IAAK,wHACLC,KAAM,kBACNC,OAAQ,YAEVS,aAAc,CACZX,IAAK,4JACLC,KAAM,SACNC,OAAQ,YAEVU,SAAU,CACRZ,IAAK,yEACLC,KAAM,UACNC,OAAQ,YAEVW,OAAQ,CACNb,IAAK,6JACLC,KAAM,YACNC,OAAQ,YAEVY,SAAU,CACRd,IAAK,yJACLC,KAAM,kBACNC,OAAQ,YAEV,0CAA2C,CACzCF,IAAK,2DACLC,KAAM,CAAC,SAAU,UACjBC,OAAQ,aAICP,EAAuC,CAClDoB,SAAU,CACRf,IAAK,oDACLC,KAAM,qDACNC,OAAQ,YAEVc,QAAS,CACPhB,IAAK,2BACLC,KAAM,gFACNC,OAAQ,Y,sCClFZ,IAAee,EAAE,C,uCCAjB,IAAeC,EAAE,C,uCCAjB,IAAeC,EAAE,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/checkbox/events.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/checkbox/CheckboxDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {CheckboxEvents} from '@dnb/eufemia/src/components/checkbox/CheckboxDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Events\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: CheckboxEvents\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const CheckboxProperties: PropertiesTableProps = {\n  checked: {\n    doc: 'Determine whether the checkbox is checked or not. The default is `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  title: {\n    doc: 'The `title` of the input - describing it a bit further for accessibility reasons.',\n    type: 'ReactNode',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Use either the `label` property or provide a custom one.',\n    type: 'ReactNode',\n    status: 'optional',\n  },\n  labelPosition: {\n    doc: 'Defines the position of the `label`. Use either `left` or `right`. Defaults to `right`.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'string',\n    status: 'optional',\n  },\n  size: {\n    doc: 'The size of the checkbox. For now there is \"medium\" (default) and \"large\".',\n    type: ['string', 'number'],\n    status: 'optional',\n  },\n  indeterminate: {\n    doc: 'Controls the checkbox indeterminate (partial) state.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  status: {\n    doc: 'Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: ['error', 'info', 'boolean'],\n    status: 'optional',\n  },\n  statusState: {\n    doc: 'Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.',\n    type: ['error', 'info'],\n    status: 'optional',\n  },\n  statusProps: {\n    doc: 'Use an object to define additional FormStatus properties. See [FormStatus](/uilib/components/form-status/properties/)',\n    type: 'FormStatusProps',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status)',\n    type: 'object',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the Checkbox more than the label. You can also send in a React component, so it gets wrapped inside the Checkbox component.',\n    type: 'ReactNode',\n    status: 'optional',\n  },\n  innerRef: {\n    doc: 'By providing a React.ref we can get the internally used input element (DOM). E.g. `innerRef={myRef}` by using `React.createRef()` or `React.useRef()`.',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const CheckboxEvents: PropertiesTableProps = {\n  onChange: {\n    doc: 'Will be called on state changes made by the user.',\n    type: '({ checked: boolean; event: ChangeEvent }) => void',\n    status: 'optional',\n  },\n  onClick: {\n    doc: 'Will be called on click.',\n    type: '({ checked: boolean; event: MouseEvent, preventDefault: () => void }) => void',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","CheckboxEvents","wrapper","MDXLayout","CheckboxProperties","checked","doc","type","status","title","label","labelPosition","labelSrOnly","size","indeterminate","statusState","statusProps","globalStatus","skeleton","suffix","innerRef","onChange","onClick","Td","Th","Tr"],"sourceRoot":""}