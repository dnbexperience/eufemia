{"version":3,"file":"component---src-docs-uilib-components-dialog-events-mdx-1468d525052330c001e0.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/dialog/events.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/modal/event-table-camel-case.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/dialog/DialogDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/modal/ModalDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport ModalEventTable from 'Docs/uilib/components/modal/event-table-camel-case';\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {DialogEvents} from '@dnb/eufemia/src/components/dialog/DialogDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Events\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: DialogEvents\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Dialog also includes the same events as \", _jsx(_components.a, {\n        href: \"/uilib/components/modal\",\n        children: \"Modal\"\n      }), \", only formatted as camel case.\"]\n    }), \"\\n\", _jsx(ModalEventTable, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {ModalEvents} from '@dnb/eufemia/src/components/modal/ModalDocs';\nfunction _createMdxContent(props) {\n  return _jsx(PropertiesTable, {\n    props: ModalEvents\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const DialogProperties: PropertiesTableProps = {\n  variant: {\n    doc: 'The dialog variant. Can either be `information` or `confirmation`. Defaults to `information`.',\n    type: 'string',\n    status: 'optional',\n  },\n  title: {\n    doc: 'The dialog title. Displays on the very top of the content.',\n    type: 'string',\n    status: 'optional',\n  },\n  minWidth: {\n    doc: \"The minimum Dialog content width, defined by a CSS width value like `50vw` (50% of the viewport). Be careful on using fixed `minWidth` so you don't break responsiveness. Defaults to `30rem` (average width is set to `60vw`).\",\n    type: 'string',\n    status: 'optional',\n  },\n  maxWidth: {\n    doc: 'The maximum Dialog content width, defined by a CSS width value like `20rem`. Defaults to `60rem` (average width is set to `60vw`).',\n    type: 'string',\n    status: 'optional',\n  },\n  className: {\n    doc: 'Give the Dialog content a class name (maps to `dnb-dialog`).',\n    type: 'string',\n    status: 'optional',\n  },\n  spacing: {\n    doc: 'If set to `false` then the dialog content will be shown without any spacing. Defaults to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  preventCoreStyle: {\n    doc: 'By default the dialog content gets added the core style class `dnb-core-style`. Use `false` to disable this behavior.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  navContent: {\n    doc: 'The content which will appear in the navigation, above the header, and side-by-side the close button.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  headerContent: {\n    doc: 'The content which will appear in the header of the dialog.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  modalContent: {\n    doc: 'The content which will appear when triggering the dialog.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  description: {\n    doc: 'A description will be positioned below the title, but before the content. Used for Dialog variant `confirmation` to further describe what the actions will do.',\n    type: 'string',\n    status: 'optional',\n  },\n  verticalAlignment: {\n    doc: 'Define the vertical alignment of the container. Can be set to `top` or `center`. Defaults to `center`.',\n    type: 'string',\n    status: 'optional',\n  },\n  alignContent: {\n    doc: 'Define the inner horizontal alignment of the content. Can be set to `left`, `center`, `right` and `centered`. If `centered`, then the content will also be centered vertically. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  fullscreen: {\n    doc: 'If set to `true` then the dialog content will be shown as fullscreen, without showing the original content behind. Can be set to `false` to omit the auto fullscreen. Defaults to `auto`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  icon: {\n    doc: 'An icon to display at the top of the component. Should be of size medium, so make sure you import the `_medium` version of the Eufemia icon.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  confirmType: {\n    doc: 'For variant confirmation, the dialog is either an informational (`info`) or a warning (`warning`) message. Defaults to `info`.',\n    type: 'string',\n    status: 'optional',\n  },\n  declineText: {\n    doc: 'For dialog actions, give a custom text for the decline button.',\n    type: 'string',\n    status: 'optional',\n  },\n  confirmText: {\n    doc: 'For dialog actions, give a custom text for the confirmation button.',\n    type: 'string',\n    status: 'optional',\n  },\n  hideDecline: {\n    doc: 'For variant confirmation, hide the default decline button and only show the confirmation button.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  hideConfirm: {\n    doc: 'For variant confirmation, hide the default confirm button and only show the decline button.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  scrollRef: {\n    doc: 'To get the scroll Element, pass in your own React ref.',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  contentRef: {\n    doc: 'To get the inner content Element, pass in your own React ref.',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const DialogEvents: PropertiesTableProps = {\n  onConfirm: {\n    doc: 'For variant confirmation, handle the confirm action click. Provided with the mouse event and the Modal function `close` as arguments.',\n    type: 'function',\n    status: 'optional',\n  },\n  onDecline: {\n    doc: 'For variant confirmation, handle the decline action click. Provided with the mouse event and the Modal function `close` as arguments.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const ModalProperties: PropertiesTableProps = {\n  id: {\n    doc: 'The id used internal for the trigger button and Modal component.',\n    type: 'string',\n    status: 'optional',\n  },\n  rootId: {\n    doc: 'The id used internal in the modal root element. Defaults to `root`, so the element id will be `dnb-modal-root`.',\n    type: 'string',\n    status: 'optional',\n  },\n  contentId: {\n    doc: 'Defines an unique identifier to a modal. Use it in case you have to refer in some way to the modal content.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelledBy: {\n    doc: 'The ID of the trigger component, describing the modal content. Defaults to the internal `trigger`, so make sure you define the `title` in `triggerAttributes`.',\n    type: 'string',\n    status: 'optional',\n  },\n  children: {\n    doc: 'the content which will appear when triggering open the modal. If a function is given, you get a close method `() => ({ close })` in the arguments.',\n    type: ['React.ReactNode', 'function'],\n    status: 'optional',\n  },\n  fullscreen: {\n    doc: 'If set to `true` then the modal content will be shown as fullscreen, without showing the original content behind. Can be set to `false` to omit the auto fullscreen. Defaults to `auto`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  openState: {\n    doc: 'use this property to control the open/close state by setting either: `opened` / `closed` or `true` / `false`.',\n    type: ['boolean', 'opened', 'closed'],\n    status: 'optional',\n  },\n  openDelay: {\n    doc: 'forces the modal to delay the opening. The delay is given in `ms`.',\n    type: ['number', 'string'],\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Will disable the trigger button.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  noAnimation: {\n    doc: 'if set to `true`, no open/close animation will be shown. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  noAnimationOnMobile: {\n    doc: 'same as `noAnimation`, but gets triggered only if the viewport width is less than `40em`. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  animationDuration: {\n    doc: 'Duration of animation open/close in ms. Defaults to 300ms.',\n    type: ['number', 'string'],\n    status: 'optional',\n  },\n  preventClose: {\n    doc: \"if set to `true` (boolean or string), then the user can't close the modal.\",\n    type: 'boolean',\n    status: 'optional',\n  },\n  preventOverlayClose: {\n    doc: 'Disable clicking the background overlay to close the modal. PS! Pressing `esc` key will still close the modal.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  openModal: {\n    doc: 'set a function to call the callback function, once the modal should open: `openModal={(open) => open()}`.',\n    type: 'function',\n    status: 'optional',\n  },\n  closeModal: {\n    doc: 'set a function to call the callback function, once the modal should close: `closeModal={(close) => close()}`.',\n    type: 'function',\n    status: 'optional',\n  },\n  focusSelector: {\n    doc: 'The Modal handles the first focus – automatically. However, you can define a custom focus selector the will be used instead `focusSelector=\".css-selector\"`.',\n    type: 'string',\n    status: 'optional',\n  },\n  overlayClass: {\n    doc: 'give the page overlay a custom class name (maps to `dnb-modal__overlay`).',\n    type: 'string',\n    status: 'optional',\n  },\n  contentClass: {\n    doc: 'give the content wrapper a custom class name (maps to `dnb-modal__content`).',\n    type: 'string',\n    status: 'optional',\n  },\n  omitTriggerButton: {\n    doc: 'omits default showing trigger button.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  trigger: {\n    doc: 'provide a custom trigger component. Like `trigger={<Anchor href=\"/\" />}`. It will set the focus on it when the modal gets closed.',\n    type: ['React.ReactNode', 'function'],\n    status: 'optional',\n  },\n  triggerAttributes: {\n    doc: 'send along with custom HTML attributes or properties to the trigger button.',\n    type: 'Various',\n    status: 'optional',\n  },\n  dialogTitle: {\n    doc: 'The aria label of the dialog when no labelledBy and no title is given. Defaults to `Vindu`.',\n    type: 'string',\n    status: 'optional',\n  },\n  directDomReturn: {\n    doc: 'If true, the modal will not open in a new DOM but directly in current DOM. Defaults to `false`. Be aware of the side effects of setting this property to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  bypassInvalidationSelectors: {\n    doc: \"Define an array with HTML class selectors (`['.element-selector']`) which should not get invalidated when the modal opens/closes. Use this in order to let some parts of your site still be accessible by screen readers.\",\n    type: 'boolean',\n    status: 'optional',\n  },\n  scrollRef: {\n    doc: 'To get the scroll Element, pass in your own React ref.',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  contentRef: {\n    doc: 'To get the inner content Element, pass in your own React ref.',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n  spacing: {\n    doc: 'if set to `false` then the modal content will be shown without any spacing. Defaults to `true`.',\n    type: 'boolean',\n    status: 'deprecated',\n  },\n  closeTitle: {\n    doc: 'the title of the close button. Defaults to _Lukk_.',\n    type: 'string',\n    status: 'deprecated',\n  },\n  hideCloseButton: {\n    doc: 'if true, the close button will not be shown.',\n    type: 'boolean',\n    status: 'deprecated',\n  },\n  class: {\n    doc: 'give the inner content wrapper a class name (maps to `dnb-modal__content__inner`).',\n    type: 'string',\n    status: 'optional',\n  },\n  className: {\n    doc: 'give the inner content wrapper a class name (maps to `dnb-modal__content__inner`).',\n    type: 'string',\n    status: 'optional',\n  },\n}\n\nexport const ModalEvents: PropertiesTableProps = {\n  onOpen: {\n    doc: 'This event gets triggered once the modal shows up. Returns the modal id: `{ id }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  onClose: {\n    doc: 'This event gets triggered once the modal gets closed. Returns the modal id: `{ id, event, triggeredBy }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  onClosePrevent: {\n    doc: 'This event gets triggered once the user tries to close the modal, but `preventClose` is set to **true**. Returns a callback `close` you can call to trigger the close mechanism. More details below. Returns the modal id: `{ id, event, close: Method, triggeredBy }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","a","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","DialogEvents","href","ModalEventTable","wrapper","MDXLayout","ModalEvents","DialogProperties","variant","doc","type","status","title","minWidth","maxWidth","className","spacing","preventCoreStyle","navContent","headerContent","modalContent","description","verticalAlignment","alignContent","fullscreen","icon","confirmType","declineText","confirmText","hideDecline","hideConfirm","scrollRef","contentRef","onConfirm","onDecline","ModalProperties","id","rootId","contentId","labelledBy","openState","openDelay","disabled","noAnimation","noAnimationOnMobile","animationDuration","preventClose","preventOverlayClose","openModal","closeModal","focusSelector","overlayClass","contentClass","omitTriggerButton","trigger","triggerAttributes","dialogTitle","directDomReturn","bypassInvalidationSelectors","closeTitle","hideCloseButton","class","onOpen","onClose","onClosePrevent","Td","Th","Tr"],"sourceRoot":""}