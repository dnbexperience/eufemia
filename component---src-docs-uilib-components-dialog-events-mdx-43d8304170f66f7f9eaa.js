"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[52894,22130],{87357:function(t,e,o){o.r(e);var n=o(52322),a=o(45392),i=o(41649),s=o(85179),l=o(35729);function r(t){const e=Object.assign({h2:"h2",p:"p",a:"a"},(0,a.ah)(),t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:"Events"}),"\n",(0,n.jsx)(s.ZP,{props:l.F}),"\n",(0,n.jsxs)(e.p,{children:["Dialog also includes the same events as ",(0,n.jsx)(e.a,{href:"/uilib/components/modal",children:"Modal"}),", only formatted as camel case."]}),"\n",(0,n.jsx)(i.default,{})]})}e.default=function(t){void 0===t&&(t={});const{wrapper:e}=Object.assign({},(0,a.ah)(),t.components);return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(r,t)})):r(t)}},41649:function(t,e,o){o.r(e);var n=o(52322),a=o(45392),i=o(85179),s=o(82493);function l(t){return(0,n.jsx)(i.ZP,{props:s.D5})}e.default=function(t){void 0===t&&(t={});const{wrapper:e}=Object.assign({},(0,a.ah)(),t.components);return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(l,t)})):l()}},35729:function(t,e,o){o.d(e,{F:function(){return a},S:function(){return n}});const n={variant:{doc:"The dialog variant. Can either be `information` or `confirmation`. Defaults to `information`.",type:"string",status:"optional"},title:{doc:"The dialog title. Displays on the very top of the content.",type:"string",status:"optional"},minWidth:{doc:"The minimum Dialog content width, defined by a CSS width value like `50vw` (50% of the viewport). Be careful on using fixed `minWidth` so you don't break responsiveness. Defaults to `30rem` (average width is set to `60vw`).",type:"string",status:"optional"},maxWidth:{doc:"The maximum Dialog content width, defined by a CSS width value like `20rem`. Defaults to `60rem` (average width is set to `60vw`).",type:"string",status:"optional"},className:{doc:"Give the Dialog content a class name (maps to `dnb-dialog`).",type:"string",status:"optional"},spacing:{doc:"If set to `false` then the dialog content will be shown without any spacing. Defaults to `true`.",type:"boolean",status:"optional"},preventCoreStyle:{doc:"By default the dialog content gets added the core style class `dnb-core-style`. Use `false` to disable this behavior.",type:"boolean",status:"optional"},navContent:{doc:"The content which will appear in the navigation, above the header, and side-by-side the close button.",type:"React.Node",status:"optional"},headerContent:{doc:"The content which will appear in the header of the dialog.",type:"React.Node",status:"optional"},modalContent:{doc:"The content which will appear when triggering the dialog.",type:"React.Node",status:"optional"},description:{doc:"A description will be positioned below the title, but before the content. Used for Dialog variant `confirmation` to further describe what the actions will do.",type:"string",status:"optional"},verticalAlignment:{doc:"Define the vertical alignment of the container. Can be set to `top` or `center`. Defaults to `center`.",type:"string",status:"optional"},alignContent:{doc:"Define the inner horizontal alignment of the content. Can be set to `left`, `center`, `right` and `centered`. If `centered`, then the content will also be centered vertically. Defaults to `left`.",type:"string",status:"optional"},fullscreen:{doc:"If set to `true` then the dialog content will be shown as fullscreen, without showing the original content behind. Can be set to `false` to omit the auto fullscreen. Defaults to `auto`.",type:"boolean",status:"optional"},icon:{doc:"An icon to display at the top of the component. Should be of size medium, so make sure you import the `_medium` version of the Eufemia icon.",type:"React.Node",status:"optional"},confirmType:{doc:"For variant confirmation, the dialog is either an informational (`info`) or a warning (`warning`) message. Defaults to `info`.",type:"string",status:"optional"},declineText:{doc:"For dialog actions, give a custom text for the decline button.",type:"string",status:"optional"},confirmText:{doc:"For dialog actions, give a custom text for the confirmation button.",type:"string",status:"optional"},hideDecline:{doc:"For variant confirmation, hide the default decline button and only show the confirmation button.",type:"boolean",status:"optional"},hideConfirm:{doc:"For variant confirmation, hide the default confirm button and only show the decline button.",type:"boolean",status:"optional"},scrollRef:{doc:"To get the scroll Element, pass in your own React ref.",type:"React.RefObject",status:"optional"},contentRef:{doc:"To get the inner content Element, pass in your own React ref.",type:"React.RefObject",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},a={onConfirm:{doc:"For variant confirmation, handle the confirm action click. Provided with the mouse event and the Modal function `close` as arguments.",type:"function",status:"optional"},onDecline:{doc:"For variant confirmation, handle the decline action click. Provided with the mouse event and the Modal function `close` as arguments.",type:"function",status:"optional"}}},82493:function(t,e,o){o.d(e,{D5:function(){return l},Zn:function(){return s},sT:function(){return i},yG:function(){return r}});var n=o(64411);const a=t=>Object.fromEntries(Object.entries(t).map((t=>{let[e,o]=t;return[e!==e.toLowerCase()?`${e} / ${(0,n.D1)(e)}`:e,o]}))),i={id:{doc:"The id used internal for the trigger button and Modal component.",type:"string",status:"optional"},rootId:{doc:"The id used internal in the modal root element. Defaults to `root`, so the element id will be `dnb-modal-root`.",type:"string",status:"optional"},contentId:{doc:"Defines an unique identifier to a modal. Use it in case you have to refer in some way to the modal content.",type:"string",status:"optional"},labelledBy:{doc:"The ID of the trigger component, describing the modal content. Defaults to the internal `trigger`, so make sure you define the `title` in `triggerAttributes`.",type:"string",status:"optional"},children:{doc:"the content which will appear when triggering open the modal. If a function is given, you get a close method `() => ({ close })` in the arguments.",type:["React.ReactNode","function"],status:"optional"},fullscreen:{doc:"If set to `true` then the modal content will be shown as fullscreen, without showing the original content behind. Can be set to `false` to omit the auto fullscreen. Defaults to `auto`.",type:"boolean",status:"optional"},openState:{doc:"use this property to control the open/close state by setting either: `opened` / `closed` or `true` / `false`.",type:["boolean","opened","closed"],status:"optional"},openDelay:{doc:"forces the modal to delay the opening. The delay is given in `ms`.",type:["number","string"],status:"optional"},disabled:{doc:"Will disable the trigger button.",type:"boolean",status:"optional"},noAnimation:{doc:"if set to `true`, no open/close animation will be shown. Defaults to `false`.",type:"boolean",status:"optional"},noAnimationOnMobile:{doc:"same as `noAnimation`, but gets triggered only if the viewport width is less than `40em`. Defaults to `false`.",type:"boolean",status:"optional"},animationDuration:{doc:"Duration of animation open/close in ms. Defaults to 300ms.",type:["number","string"],status:"optional"},preventClose:{doc:"if set to `true` (boolean or string), then the user can't close the modal.",type:"boolean",status:"optional"},preventOverlayClose:{doc:"Disable clicking the background overlay to close the modal. PS! Pressing `esc` key will still close the modal.",type:"boolean",status:"optional"},openModal:{doc:"set a function to call the callback function, once the modal should open: `openModal={(open) => open()}`.",type:"function",status:"optional"},closeModal:{doc:"set a function to call the callback function, once the modal should close: `closeModal={(close) => close()}`.",type:"function",status:"optional"},focusSelector:{doc:'The Modal handles the first focus â€“ automatically. However, you can define a custom focus selector the will be used instead `focusSelector=".css-selector"`.',type:"string",status:"optional"},overlayClass:{doc:"give the page overlay a custom class name (maps to `dnb-modal__overlay`).",type:"string",status:"optional"},contentClass:{doc:"give the content wrapper a custom class name (maps to `dnb-modal__content`).",type:"string",status:"optional"},omitTriggerButton:{doc:"omits default showing trigger button.",type:"boolean",status:"optional"},trigger:{doc:'provide a custom trigger component. Like `trigger={<Anchor href="/" />}`. It will set the focus on it when the modal gets closed.',type:["React.ReactNode","function"],status:"optional"},triggerAttributes:{doc:"send along with custom HTML attributes or properties to the trigger button.",type:"Various",status:"optional"},dialogTitle:{doc:"The aria label of the dialog when no labelledBy and no title is given. Defaults to `Vindu`.",type:"string",status:"optional"},directDomReturn:{doc:"If true, the modal will not open in a new DOM but directly in current DOM. Defaults to `false`. Be aware of the side effects of setting this property to `true`.",type:"boolean",status:"optional"},bypassInvalidationSelectors:{doc:"Define an array with HTML class selectors (`['.element-selector']`) which should not get invalidated when the modal opens/closes. Use this in order to let some parts of your site still be accessible by screen readers.",type:"boolean",status:"optional"},scrollRef:{doc:"To get the scroll Element, pass in your own React ref.",type:"React.RefObject",status:"optional"},contentRef:{doc:"To get the inner content Element, pass in your own React ref.",type:"React.RefObject",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"},spacing:{doc:"if set to `false` then the modal content will be shown without any spacing. Defaults to `true`.",type:"boolean",status:"deprecated"},closeTitle:{doc:"the title of the close button. Defaults to _Lukk_.",type:"string",status:"deprecated"},hideCloseButton:{doc:"if true, the close button will not be shown.",type:"boolean",status:"deprecated"},class:{doc:"give the inner content wrapper a class name (maps to `dnb-modal__content__inner`).",type:"string",status:"optional"},className:{doc:"give the inner content wrapper a class name (maps to `dnb-modal__content__inner`).",type:"string",status:"optional"}},s=a(i),l={onOpen:{doc:"This event gets triggered once the modal shows up. Returns the modal id: `{ id }`.",type:"function",status:"optional"},onClose:{doc:"This event gets triggered once the modal gets closed. Returns the modal id: `{ id, event, triggeredBy }`.",type:"function",status:"optional"},onClosePrevent:{doc:"This event gets triggered once the user tries to close the modal, but `preventClose` is set to **true**. Returns a callback `close` you can call to trigger the close mechanism. More details below. Returns the modal id: `{ id, event, close: Method, triggeredBy }`.",type:"function",status:"optional"}},r=a(l)},6210:function(t,e,o){var n=o(30600);e.Z=n.Z},64223:function(t,e,o){var n=o(91859);e.Z=n.Z},41676:function(t,e,o){var n=o(35610);e.Z=n.Z}}]);
//# sourceMappingURL=component---src-docs-uilib-components-dialog-events-mdx-43d8304170f66f7f9eaa.js.map