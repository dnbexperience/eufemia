"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[52894,22130],{87357:function(t,e,n){n.r(e);var o=n(52322),i=n(45392),a=n(41649),s=n(85179),l=n(35729);function r(t){const e=Object.assign({h2:"h2",p:"p",a:"a"},(0,i.ah)(),t.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:"Events"}),"\n",(0,o.jsx)(s.ZP,{props:l.F}),"\n",(0,o.jsxs)(e.p,{children:["Dialog also includes the same events as ",(0,o.jsx)(e.a,{href:"/uilib/components/modal",children:"Modal"}),", only formatted as camel case."]}),"\n",(0,o.jsx)(a.default,{})]})}e.default=function(t){void 0===t&&(t={});const{wrapper:e}=Object.assign({},(0,i.ah)(),t.components);return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(r,t)})):r(t)}},41649:function(t,e,n){n.r(e);var o=n(52322),i=n(45392);function a(t){const e=Object.assign({table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",em:"em",strong:"strong"},(0,i.ah)(),t.components);return(0,o.jsxs)(e.table,{children:[(0,o.jsx)(e.thead,{children:(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.th,{children:"Events"}),(0,o.jsx)(e.th,{children:"Description"})]})}),(0,o.jsxs)(e.tbody,{children:[(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:"onOpen"})}),(0,o.jsxs)(e.td,{children:[(0,o.jsx)(e.em,{children:"(optional)"})," This event gets triggered once the modal shows up. Returns the modal id: ",(0,o.jsx)(e.code,{children:"{ id }"}),"."]})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:"onClose"})}),(0,o.jsxs)(e.td,{children:[(0,o.jsx)(e.em,{children:"(optional)"})," This event gets triggered once the modal gets closed. Returns the modal id: ",(0,o.jsx)(e.code,{children:"{ id, event, triggeredBy }"}),"."]})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:(0,o.jsx)(e.code,{children:"onClosePrevent"})}),(0,o.jsxs)(e.td,{children:[(0,o.jsx)(e.em,{children:"(optional)"})," This event gets triggered once the user tries to close the modal, but ",(0,o.jsx)(e.code,{children:"preventClose"})," is set to ",(0,o.jsx)(e.strong,{children:"true"}),". Returns a callback ",(0,o.jsx)(e.code,{children:"close"})," you can call to trigger the close mechanism. More details below. Returns the modal id: ",(0,o.jsx)(e.code,{children:"{ id, event, close: Method, triggeredBy }"})]})]})]})]})}e.default=function(t){void 0===t&&(t={});const{wrapper:e}=Object.assign({},(0,i.ah)(),t.components);return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(a,t)})):a(t)}},35729:function(t,e,n){n.d(e,{F:function(){return i},S:function(){return o}});const o={variant:{doc:"The dialog variant. Can either be `information` or `confirmation`. Defaults to `information`.",type:"string",status:"optional"},title:{doc:"The dialog title. Displays on the very top of the content.",type:"string",status:"optional"},minWidth:{doc:"The minimum Dialog content width, defined by a CSS width value like `50vw` (50% of the viewport). Be careful on using fixed `minWidth` so you don't break responsiveness. Defaults to `30rem` (average width is set to `60vw`).",type:"string",status:"optional"},maxWidth:{doc:"The maximum Dialog content width, defined by a CSS width value like `20rem`. Defaults to `60rem` (average width is set to `60vw`).",type:"string",status:"optional"},className:{doc:"Give the Dialog content a class name (maps to `dnb-dialog`).",type:"string",status:"optional"},spacing:{doc:"If set to `false` then the dialog content will be shown without any spacing. Defaults to `true`.",type:"boolean",status:"optional"},preventCoreStyle:{doc:"By default the dialog content gets added the core style class `dnb-core-style`. Use `false` to disable this behavior.",type:"boolean",status:"optional"},navContent:{doc:"The content which will appear in the navigation, above the header, and side-by-side the close button.",type:"React.Node",status:"optional"},headerContent:{doc:"The content which will appear in the header of the dialog.",type:"React.Node",status:"optional"},modalContent:{doc:"The content which will appear when triggering the dialog.",type:"React.Node",status:"optional"},description:{doc:"A description will be positioned below the title, but before the content. Used for Dialog variant `confirmation` to further describe what the actions will do.",type:"string",status:"optional"},verticalAlignment:{doc:"Define the vertical alignment of the container. Can be set to `top` or `center`. Defaults to `center`.",type:"string",status:"optional"},alignContent:{doc:"Define the inner horizontal alignment of the content. Can be set to `left`, `center`, `right` and `centered`. If `centered`, then the content will also be centered vertically. Defaults to `left`.",type:"string",status:"optional"},fullscreen:{doc:"If set to `true` then the dialog content will be shown as fullscreen, without showing the original content behind. Can be set to `false` to omit the auto fullscreen. Defaults to `auto`.",type:"boolean",status:"optional"},icon:{doc:"An icon to display at the top of the component. Should be of size medium, so make sure you import the `_medium` version of the Eufemia icon.",type:"React.Node",status:"optional"},confirmType:{doc:"For variant confirmation, the dialog is either an informational (`info`) or a warning (`warning`) message. Defaults to `info`.",type:"string",status:"optional"},declineText:{doc:"For dialog actions, give a custom text for the decline button.",type:"string",status:"optional"},confirmText:{doc:"For dialog actions, give a custom text for the confirmation button.",type:"string",status:"optional"},hideDecline:{doc:"For variant confirmation, hide the default decline button and only show the confirmation button.",type:"boolean",status:"optional"},hideConfirm:{doc:"For variant confirmation, hide the default confirm button and only show the decline button.",type:"boolean",status:"optional"},scrollRef:{doc:"To get the scroll Element, pass in your own React ref.",type:"React.Ref",status:"optional"},contentRef:{doc:"To get the inner content Element, pass in your own React ref.",type:"React.Ref",status:"optional"}},i={onConfirm:{doc:"For variant confirmation, handle the confirm action click. Provided with the mouse event and the Modal function `close` as arguments.",type:"function",status:"optional"},onDecline:{doc:"For variant confirmation, handle the decline action click. Provided with the mouse event and the Modal function `close` as arguments.",type:"function",status:"optional"}}},6210:function(t,e,n){var o=n(30600);e.Z=o.Z},64223:function(t,e,n){var o=n(91859);e.Z=o.Z},41676:function(t,e,n){var o=n(35610);e.Z=o.Z}}]);
//# sourceMappingURL=component---src-docs-uilib-components-dialog-events-mdx-6355628bf90e191f7d43.js.map