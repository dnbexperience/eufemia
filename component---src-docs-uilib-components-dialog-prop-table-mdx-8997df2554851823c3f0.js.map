{"version":3,"file":"component---src-docs-uilib-components-dialog-prop-table-mdx-8997df2554851823c3f0.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/components/dialog/DialogDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/components/dialog/prop-table.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../shared/types'\n\nexport const DialogProperties: PropertiesTableProps = {\n  variant: {\n    doc: 'The dialog variant. Can either be `information` or `confirmation`. Defaults to `information`.',\n    type: 'string',\n    status: 'optional',\n  },\n  title: {\n    doc: 'The dialog title. Displays on the very top of the content.',\n    type: 'string',\n    status: 'optional',\n  },\n  minWidth: {\n    doc: \"The minimum Dialog content width, defined by a CSS width value like `50vw` (50% of the viewport). Be careful on using fixed `minWidth` so you don't break responsiveness. Defaults to `30rem` (average width is set to `60vw`).\",\n    type: 'string',\n    status: 'optional',\n  },\n  maxWidth: {\n    doc: 'The maximum Dialog content width, defined by a CSS width value like `20rem`. Defaults to `60rem` (average width is set to `60vw`).',\n    type: 'string',\n    status: 'optional',\n  },\n  className: {\n    doc: 'Give the Dialog content a class name (maps to `dnb-dialog`).',\n    type: 'string',\n    status: 'optional',\n  },\n  spacing: {\n    doc: 'If set to `false` then the dialog content will be shown without any spacing. Defaults to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  preventCoreStyle: {\n    doc: 'By default the dialog content gets added the core style class `dnb-core-style`. Use `false` to disable this behavior.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  navContent: {\n    doc: 'The content which will appear in the navigation, above the header, and side-by-side the close button.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  headerContent: {\n    doc: 'The content which will appear in the header of the dialog.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  modalContent: {\n    doc: 'The content which will appear when triggering the dialog.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  description: {\n    doc: 'A description will be positioned below the title, but before the content. Used for Dialog variant `confirmation` to further describe what the actions will do.',\n    type: 'string',\n    status: 'optional',\n  },\n  verticalAlignment: {\n    doc: 'Define the vertical alignment of the container. Can be set to `top` or `center`. Defaults to `center`.',\n    type: 'string',\n    status: 'optional',\n  },\n  alignContent: {\n    doc: 'Define the inner horizontal alignment of the content. Can be set to `left`, `center`, `right` and `centered`. If `centered`, then the content will also be centered vertically. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  fullscreen: {\n    doc: 'If set to `true` then the dialog content will be shown as fullscreen, without showing the original content behind. Can be set to `false` to omit the auto fullscreen. Defaults to `auto`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  icon: {\n    doc: 'An icon to display at the top of the component. Should be of size medium, so make sure you import the `_medium` version of the Eufemia icon.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  confirmType: {\n    doc: 'For variant confirmation, the dialog is either an informational (`info`) or a warning (`warning`) message. Defaults to `info`.',\n    type: 'string',\n    status: 'optional',\n  },\n  declineText: {\n    doc: 'For dialog actions, give a custom text for the decline button.',\n    type: 'string',\n    status: 'optional',\n  },\n  confirmText: {\n    doc: 'For dialog actions, give a custom text for the confirmation button.',\n    type: 'string',\n    status: 'optional',\n  },\n  hideDecline: {\n    doc: 'For variant confirmation, hide the default decline button and only show the confirmation button.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  hideConfirm: {\n    doc: 'For variant confirmation, hide the default confirm button and only show the decline button.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  scrollRef: {\n    doc: 'To get the scroll Element, pass in your own React ref.',\n    type: 'React.Ref',\n    status: 'optional',\n  },\n  contentRef: {\n    doc: 'To get the inner content Element, pass in your own React ref.',\n    type: 'React.Ref',\n    status: 'optional',\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {DialogProperties} from '@dnb/eufemia/src/components/dialog/DialogDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: DialogProperties\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colorValue = 'var(--color-success-green)'\nconst colorString = 'var(--color-fire-red)'\nconst colorType = 'var(--color-violet)'\nconst colorUndefined = 'var(--color-black-55)'\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = children.startsWith(`'`) ? colorString : colorType\n        // falls through\n      }\n      case 'value': {\n        style.color = children.startsWith(`'`)\n          ? colorString\n          : children === 'undefined' || children === 'null'\n          ? colorUndefined\n          : colorValue\n        // falls through\n      }\n      default: {\n        style.background = 'none'\n        style.boxShadow = 'none'\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('/')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["DialogProperties","variant","doc","type","status","title","minWidth","maxWidth","className","spacing","preventCoreStyle","navContent","headerContent","modalContent","description","verticalAlignment","alignContent","fullscreen","icon","confirmType","declineText","confirmText","hideDecline","hideConfirm","scrollRef","contentRef","_createMdxContent","props","_components","Object","assign","h2","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","wrapper","MDXLayout","basicComponents","p","StyledTable","_styled","Table","target","name","styles","colorString","FormattedCode","_ref","strikethrough","style","rest","textDecoration","color","startsWith","background","boxShadow","code","_ref2","valueType","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","defaultValue","includes","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp"],"sourceRoot":""}