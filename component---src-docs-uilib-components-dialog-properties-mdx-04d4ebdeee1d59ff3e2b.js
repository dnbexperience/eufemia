"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[67241,70522,83477],{50155:function(t,e,o){o.r(e);var n=o(31085),a=o(71184),s=o(86058),i=o(57160),l=o(53575);function r(t){const e=Object.assign({h2:"h2",h3:"h3",p:"p",a:"a"},(0,a.R)(),t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:"Properties"}),"\n",(0,n.jsx)(i.default,{}),"\n",(0,n.jsx)(e.h3,{children:"More properties"}),"\n",(0,n.jsxs)(e.p,{children:["The properties of ",(0,n.jsx)(e.a,{href:"/uilib/components/modal",children:"Modal"})," formatted as camel case are also provided.\nSee the table below:"]}),"\n",(0,n.jsx)(l.default,{}),"\n",(0,n.jsx)(e.h2,{children:"Translations"}),"\n",(0,n.jsx)(s.A,{localeKey:["Dialog","Modal"]})]})}e.default=function(t){void 0===t&&(t={});const{wrapper:e}=Object.assign({},(0,a.R)(),t.components);return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(r,t)})):r(t)}},53575:function(t,e,o){o.r(e);var n=o(31085),a=o(71184),s=o(15616),i=o(54641);function l(t){return(0,n.jsx)(s.Ay,{props:i.j0})}e.default=function(t){void 0===t&&(t={});const{wrapper:e}=Object.assign({},(0,a.R)(),t.components);return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(l,t)})):l()}},54641:function(t,e,o){o.d(e,{Do:function(){return l},FO:function(){return r},j0:function(){return s},z5:function(){return i}});var n=o(21436);const a=t=>Object.fromEntries(Object.entries(t).map((t=>{let[e,o]=t;return[e!==e.toLowerCase()?`${e} / ${(0,n.uc)(e)}`:e,o]}))),s={id:{doc:"The id used internal for the trigger button and Modal component.",type:"string",status:"optional"},rootId:{doc:"The id used internal in the modal root element. Defaults to `root`, so the element id will be `dnb-modal-root`.",type:"string",status:"optional"},contentId:{doc:"Defines an unique identifier to a modal. Use it in case you have to refer in some way to the modal content.",type:"string",status:"optional"},labelledBy:{doc:"The ID of the trigger component, describing the modal content. Defaults to the internal `trigger`, so make sure you define the `title` in `triggerAttributes`.",type:"string",status:"optional"},children:{doc:"the content which will appear when triggering open the modal. If a function is given, you get a close method `() => ({ close })` in the arguments.",type:["React.ReactNode","function"],status:"optional"},fullscreen:{doc:"If set to `true` then the modal content will be shown as fullscreen, without showing the original content behind. Can be set to `false` to omit the auto fullscreen. Defaults to `auto`.",type:"boolean",status:"optional"},openState:{doc:"use this property to control the open/close state by setting either: `opened` / `closed` or `true` / `false`.",type:["boolean","opened","closed"],status:"optional"},openDelay:{doc:"forces the modal to delay the opening. The delay is given in `ms`.",type:["number","string"],status:"optional"},disabled:{doc:"Will disable the trigger button.",type:"boolean",status:"optional"},noAnimation:{doc:"if set to `true`, no open/close animation will be shown. Defaults to `false`.",type:"boolean",status:"optional"},noAnimationOnMobile:{doc:"same as `noAnimation`, but gets triggered only if the viewport width is less than `40em`. Defaults to `false`.",type:"boolean",status:"optional"},animationDuration:{doc:"Duration of animation open/close in ms. Defaults to 300ms.",type:["number","string"],status:"optional"},preventClose:{doc:"if set to `true` (boolean or string), then the user can't close the modal.",type:"boolean",status:"optional"},preventOverlayClose:{doc:"Disable clicking the background overlay to close the modal. PS! Pressing `esc` key will still close the modal.",type:"boolean",status:"optional"},openModal:{doc:"set a function to call the callback function, once the modal should open: `openModal={(open) => open()}`.",type:"function",status:"optional"},closeModal:{doc:"set a function to call the callback function, once the modal should close: `closeModal={(close) => close()}`.",type:"function",status:"optional"},focusSelector:{doc:'The Modal handles the first focus â€“ automatically. However, you can define a custom focus selector the will be used instead `focusSelector=".css-selector"`.',type:"string",status:"optional"},overlayClass:{doc:"give the page overlay a custom class name (maps to `dnb-modal__overlay`).",type:"string",status:"optional"},contentClass:{doc:"give the content wrapper a custom class name (maps to `dnb-modal__content`).",type:"string",status:"optional"},omitTriggerButton:{doc:"omits default showing trigger button.",type:"boolean",status:"optional"},trigger:{doc:'provide a custom trigger component. Like `trigger={<Anchor href="/" />}`. It will set the focus on it when the modal gets closed.',type:["React.ReactNode","function"],status:"optional"},triggerAttributes:{doc:"send along with custom HTML attributes or properties to the trigger button.",type:"Various",status:"optional"},dialogTitle:{doc:"The aria label of the dialog when no labelledBy and no title is given. Defaults to `Vindu`.",type:"string",status:"optional"},directDomReturn:{doc:"If true, the modal will not open in a new DOM but directly in current DOM. Defaults to `false`. Be aware of the side effects of setting this property to `true`.",type:"boolean",status:"optional"},bypassInvalidationSelectors:{doc:"Define an array with HTML class selectors (`['.element-selector']`) which should not get invalidated when the modal opens/closes. Use this in order to let some parts of your site still be accessible by screen readers.",type:"boolean",status:"optional"},scrollRef:{doc:"To get the scroll Element, pass in your own React ref.",type:"React.RefObject",status:"optional"},contentRef:{doc:"To get the inner content Element, pass in your own React ref.",type:"React.RefObject",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"},spacing:{doc:"if set to `false` then the modal content will be shown without any spacing. Defaults to `true`.",type:"boolean",status:"optional"},closeTitle:{doc:"the title of the close button. Defaults to _Lukk_.",type:"string",status:"optional"},hideCloseButton:{doc:"if true, the close button will not be shown.",type:"boolean",status:"optional"},class:{doc:"give the inner content wrapper a class name (maps to `dnb-modal__content__inner`).",type:"string",status:"optional"},className:{doc:"give the inner content wrapper a class name (maps to `dnb-modal__content__inner`).",type:"string",status:"optional"}},i=a(s),l={onOpen:{doc:"This event gets triggered once the modal shows up. Returns the modal id: `{ id }`.",type:"function",status:"optional"},onClose:{doc:"This event gets triggered once the modal gets closed. Returns the modal id: `{ id, event, triggeredBy }`.",type:"function",status:"optional"},onClosePrevent:{doc:"This event gets triggered once the user tries to close the modal, but `preventClose` is set to **true**. Returns a callback `close` you can call to trigger the close mechanism. More details below. Returns the modal id: `{ id, event, close: Method, triggeredBy }`.",type:"function",status:"optional"}},r=a(l)},57160:function(t,e,o){o.r(e);var n=o(31085),a=o(71184),s=o(15616),i=o(75795);function l(t){return(0,n.jsx)(s.Ay,{props:i.Q})}e.default=function(t){void 0===t&&(t={});const{wrapper:e}=Object.assign({},(0,a.R)(),t.components);return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(l,t)})):l()}},69094:function(t,e,o){var n=o(23722);e.A=n.A},75795:function(t,e,o){o.d(e,{Q:function(){return n},w:function(){return a}});const n={variant:{doc:"The dialog variant. Can either be `information` or `confirmation`. Defaults to `information`.",type:"string",status:"optional"},title:{doc:"The dialog title. Displays on the very top of the content.",type:"string",status:"optional"},minWidth:{doc:"The minimum Dialog content width, defined by a CSS width value like `50vw` (50% of the viewport). Be careful on using fixed `minWidth` so you don't break responsiveness. Defaults to `30rem` (average width is set to `60vw`).",type:"string",status:"optional"},maxWidth:{doc:"The maximum Dialog content width, defined by a CSS width value like `20rem`. Defaults to `60rem` (average width is set to `60vw`).",type:"string",status:"optional"},className:{doc:"Give the Dialog content a class name (maps to `dnb-dialog`).",type:"string",status:"optional"},spacing:{doc:"If set to `false` then the dialog content will be shown without any spacing. Defaults to `true`.",type:"boolean",status:"optional"},preventCoreStyle:{doc:"By default the dialog content gets added the core style class `dnb-core-style`. Use `false` to disable this behavior.",type:"boolean",status:"optional"},navContent:{doc:"The content which will appear in the navigation, above the header, and side-by-side the close button.",type:"React.Node",status:"optional"},headerContent:{doc:"The content which will appear in the header of the dialog.",type:"React.Node",status:"optional"},modalContent:{doc:"The content which will appear when triggering the dialog.",type:"React.Node",status:"optional"},description:{doc:"A description will be positioned below the title, but before the content. Used for Dialog variant `confirmation` to further describe what the actions will do.",type:"string",status:"optional"},verticalAlignment:{doc:"Define the vertical alignment of the container. Can be set to `top` or `center`. Defaults to `center`.",type:"string",status:"optional"},alignContent:{doc:"Define the inner horizontal alignment of the content. Can be set to `left`, `center`, `right` and `centered`. If `centered`, then the content will also be centered vertically. Defaults to `left`.",type:"string",status:"optional"},fullscreen:{doc:"If set to `true` then the dialog content will be shown as fullscreen, without showing the original content behind. Can be set to `false` to omit the auto fullscreen. Defaults to `auto`.",type:"boolean",status:"optional"},icon:{doc:"An icon to display at the top of the component. Should be of size medium, so make sure you import the `_medium` version of the Eufemia icon.",type:"React.Node",status:"optional"},confirmType:{doc:"For variant confirmation, the dialog is either an informational (`info`) or a warning (`warning`) message. Defaults to `info`.",type:"string",status:"optional"},declineText:{doc:"For dialog actions, give a custom text for the decline button.",type:"string",status:"optional"},confirmText:{doc:"For dialog actions, give a custom text for the confirmation button.",type:"string",status:"optional"},hideDecline:{doc:"For variant confirmation, hide the default decline button and only show the confirmation button.",type:"boolean",status:"optional"},hideConfirm:{doc:"For variant confirmation, hide the default confirm button and only show the decline button.",type:"boolean",status:"optional"},scrollRef:{doc:"To get the scroll Element, pass in your own React ref.",type:"React.RefObject",status:"optional"},contentRef:{doc:"To get the inner content Element, pass in your own React ref.",type:"React.RefObject",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},a={onConfirm:{doc:"For variant confirmation, handle the confirm action click. Provided with the mouse event and the Modal function `close` as arguments.",type:"function",status:"optional"},onDecline:{doc:"For variant confirmation, handle the decline action click. Provided with the mouse event and the Modal function `close` as arguments.",type:"function",status:"optional"}}},81908:function(t,e,o){var n=o(94515);e.A=n.A},86058:function(t,e,o){o.d(e,{A:function(){return v}});var n=o(42483),a=o(14041),s=o(42275),i=o(81908),l=o(92034),r=o(77352),c=o(29058),d=o(69094),u=o(21436),p=o(64034),h=o(1470),f=o(43350),g=o(15616),m=o(84196),y=o(97728),b=o(31085);const w=(0,n.A)(s.Ay,{target:"ejvypor0"})({name:"1qdk5x4",styles:"td{white-space:nowrap;}"});function v(t){let{localeKey:e,source:o=null}=t;o=(0,a.useMemo)((()=>o||Object.assign((0,u.zu)({},h.A,f.A),m._M)),[o]);const n={},v={},j=(Array.isArray(e)?e:[e]).map((t=>{if(t.includes(".")){const e=t.split(".")[0];return v[e]=v[e]||[],v[e].push(t),e}return t})),x=(t,e,o,a)=>{t=`${a}.${t}`,v[a]&&!v[a].includes(t)||(n[t]=Object.assign(n[t]||{},{[o]:e}))};Object.entries(o).forEach((t=>{let[e,o]=t;j.forEach((t=>{const n=o[t];n?Object.entries(n).forEach((o=>{let[n,a]=o;if("object"==typeof a){const o=`${t}.${n}`;Object.entries(a).forEach((t=>{let[n,a]=t;x(n,a,e,o)}))}else x(n,a,e,t)})):(0,p.R8)(`TranslationsTable: Could not find any translations for key: "${t}", perhaps you misspelled the key's name?`)}))}));const D=Object.keys(o),R=Object.entries(n).map((t=>{let[e,o]=t;return(0,b.jsxs)(i.A,{children:[(0,b.jsx)(l.A,{children:(0,b.jsx)(g.OH,{variant:"prop",children:e})}),Object.entries(o).map(((t,e)=>{let[o,n]=t;return(0,b.jsx)(l.A,{children:"string"==typeof n?n:(0,b.jsx)("pre",{children:JSON.stringify(n,null,2)})},e+o)}))]},e)}));if(0!=R.length)return(0,b.jsxs)(b.Fragment,{children:[(0,b.jsxs)(r.A,{children:["More info about translations can be found in the"," ",(0,b.jsx)(c.Ay,{href:"/uilib/usage/customisation/localization/",children:"general localization"})," ","and"," ",(0,b.jsx)(c.Ay,{href:"/uilib/extensions/forms/getting-started/#localization-and-translation",children:"Eufemia Forms localization"})," ","docs."]}),(0,b.jsx)(s.Ay.ScrollView,{children:(0,b.jsxs)(w,{children:[(0,b.jsx)("thead",{children:(0,b.jsxs)(i.A,{children:[(0,b.jsx)(d.A,{children:"Key"}),D.map((t=>{const{status:e}=y.R[t];return(0,b.jsxs)(d.A,{children:[t,e?` (${e})`:null]},t)}))]})}),(0,b.jsx)("tbody",{children:R})]})})]});(0,p.R8)(`TranslationsTable: Not able to find any translations for input : "${e}", hence not rendering the translations table.`)}},92034:function(t,e,o){var n=o(31666);e.A=n.A}}]);
//# sourceMappingURL=component---src-docs-uilib-components-dialog-properties-mdx-04d4ebdeee1d59ff3e2b.js.map