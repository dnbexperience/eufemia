"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[58592,47809,58583],{70002:function(e,t,n){n.r(t),n.d(t,{default:function(){return d}});var o=n(52322),s=n(45392),i=n(85179);const l={variant:{doc:"The dialog variant. Can either be `information` or `confirmation`. Defaults to `information`.",type:"string",status:"optional"},title:{doc:"The dialog title. Displays on the very top of the content.",type:"string",status:"optional"},minWidth:{doc:"The minimum Dialog content width, defined by a CSS width value like `50vw` (50% of the viewport). Be careful on using fixed `minWidth` so you don't break responsiveness. Defaults to `30rem` (average width is set to `60vw`).",type:"string",status:"optional"},maxWidth:{doc:"The maximum Dialog content width, defined by a CSS width value like `20rem`. Defaults to `60rem` (average width is set to `60vw`).",type:"string",status:"optional"},className:{doc:"Give the Dialog content a class name (maps to `dnb-dialog`).",type:"string",status:"optional"},spacing:{doc:"If set to `false` then the dialog content will be shown without any spacing. Defaults to `true`.",type:"boolean",status:"optional"},preventCoreStyle:{doc:"By default the dialog content gets added the core style class `dnb-core-style`. Use `false` to disable this behavior.",type:"boolean",status:"optional"},navContent:{doc:"The content which will appear in the navigation, above the header, and side-by-side the close button.",type:"React.Node",status:"optional"},headerContent:{doc:"The content which will appear in the header of the dialog.",type:"React.Node",status:"optional"},modalContent:{doc:"The content which will appear when triggering the dialog.",type:"React.Node",status:"optional"},description:{doc:"A description will be positioned below the title, but before the content. Used for Dialog variant `confirmation` to further describe what the actions will do.",type:"string",status:"optional"},verticalAlignment:{doc:"Define the vertical alignment of the container. Can be set to `top` or `center`. Defaults to `center`.",type:"string",status:"optional"},alignContent:{doc:"Define the inner horizontal alignment of the content. Can be set to `left`, `center`, `right` and `centered`. If `centered`, then the content will also be centered vertically. Defaults to `left`.",type:"string",status:"optional"},fullscreen:{doc:"If set to `true` then the dialog content will be shown as fullscreen, without showing the original content behind. Can be set to `false` to omit the auto fullscreen. Defaults to `auto`.",type:"boolean",status:"optional"},icon:{doc:"An icon to display at the top of the component. Should be of size medium, so make sure you import the `_medium` version of the Eufemia icon.",type:"React.Node",status:"optional"},confirmType:{doc:"For variant confirmation, the dialog is either an informational (`info`) or a warning (`warning`) message. Defaults to `info`.",type:"string",status:"optional"},declineText:{doc:"For dialog actions, give a custom text for the decline button.",type:"string",status:"optional"},confirmText:{doc:"For dialog actions, give a custom text for the confirmation button.",type:"string",status:"optional"},hideDecline:{doc:"For variant confirmation, hide the default decline button and only show the confirmation button.",type:"boolean",status:"optional"},hideConfirm:{doc:"For variant confirmation, hide the default confirm button and only show the decline button.",type:"boolean",status:"optional"},scrollRef:{doc:"To get the scroll Element, pass in your own React ref.",type:"React.Ref",status:"optional"},contentRef:{doc:"To get the inner content Element, pass in your own React ref.",type:"React.Ref",status:"optional"}};function r(e){return(0,o.jsx)(i.ZP,{props:l})}var d=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,s.ah)(),e.components);return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(r,e)})):r()}},97868:function(e,t,n){n.r(t);var o=n(52322),s=n(45392),i=n(68230),l=n(70002),r=n(89170);function d(e){const t=Object.assign({h2:"h2",h3:"h3",p:"p",a:"a"},(0,s.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{children:"Properties"}),"\n",(0,o.jsx)(l.default,{}),"\n",(0,o.jsx)(t.h3,{children:"More properties"}),"\n",(0,o.jsxs)(t.p,{children:["The properties of ",(0,o.jsx)(t.a,{href:"/uilib/components/modal",children:"Modal"})," formatted as camel case are also provided.\nSee the table below:"]}),"\n",(0,o.jsx)(r.default,{}),"\n",(0,o.jsx)(t.h2,{children:"Translations"}),"\n",(0,o.jsx)(i.Z,{localeKey:"Dialog"})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,s.ah)(),e.components);return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(d,e)})):d(e)}},89170:function(e,t,n){n.r(t);var o=n(52322),s=n(45392);function i(e){const t=Object.assign({table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",em:"em",a:"a"},(0,s.ah)(),e.components);return(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Properties"}),(0,o.jsx)(t.th,{children:"Description"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"id"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," The id used internal for the trigger button and Modal component."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"rootId"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," The id used internal in the modal root element. Defaults to ",(0,o.jsx)(t.code,{children:"root"}),", so the element id will be ",(0,o.jsx)(t.code,{children:"dnb-modal-root"}),"."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"contentId"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," Defines an unique identifier to a modal. Use it in case you have to refer in some way to the modal content."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"labelledBy"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," The ID of the trigger component, describing the modal content. Defaults to the internal ",(0,o.jsx)(t.code,{children:"trigger"}),", so make sure you define the ",(0,o.jsx)(t.code,{children:"title"})," in ",(0,o.jsx)(t.code,{children:"triggerAttributes"}),"."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.code,{children:"children"})," or ",(0,o.jsx)(t.code,{children:"function"})]}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," the content which will appear when triggering open the modal. If a function is given, you get a close method ",(0,o.jsx)(t.code,{children:"() => ({ close })"})," in the arguments."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"fullscreen"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," If set to ",(0,o.jsx)(t.code,{children:"true"})," then the modal content will be shown as fullscreen, without showing the original content behind. Can be set to ",(0,o.jsx)(t.code,{children:"false"})," to omit the auto fullscreen. Defaults to ",(0,o.jsx)(t.code,{children:"auto"}),"."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"openState"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," use this property to control the open/close state by setting either: ",(0,o.jsx)(t.code,{children:"opened"})," / ",(0,o.jsx)(t.code,{children:"closed"})," or ",(0,o.jsx)(t.code,{children:"true"})," / ",(0,o.jsx)(t.code,{children:"false"}),"."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"openDelay"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," forces the modal to delay the opening. The delay is given in ",(0,o.jsx)(t.code,{children:"ms"}),"."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"disabled"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," Will disable the trigger button."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"noAnimation"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," if set to ",(0,o.jsx)(t.code,{children:"true"}),", no open/close animation will be shown. Defaults to ",(0,o.jsx)(t.code,{children:"false"}),"."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"noAnimationOnMobile"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," same as ",(0,o.jsx)(t.code,{children:"noAnimation"}),", but gets triggered only if the viewport width is less than ",(0,o.jsx)(t.code,{children:"40em"}),". Defaults to ",(0,o.jsx)(t.code,{children:"false"}),"."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"animationDuration"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," Duration of animation open/close in ms. Defaults to 300ms."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"preventClose"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," if set to ",(0,o.jsx)(t.code,{children:"true"})," (boolean or string), then the user can't close the modal."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"preventOverlayClose"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," Disable clicking the background overlay to close the modal. PS! Pressing ",(0,o.jsx)(t.code,{children:"esc"})," key will still close the modal."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"openModal"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," set a function to call the callback function, once the modal should open: ",(0,o.jsx)(t.code,{children:"openModal={(open) => open()}"})]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"closeModal"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," set a function to call the callback function, once the modal should close: ",(0,o.jsx)(t.code,{children:"closeModal={(close) => close()}"})]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"focusSelector"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," The Modal handles the first focus – automatically. However, you can define a custom focus selector the will be used instead ",(0,o.jsx)(t.code,{children:'focusSelector=".css-selector"'}),"."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"overlayClass"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," give the page overlay a custom class name (maps to ",(0,o.jsx)(t.code,{children:"dnb-modal__overlay"}),")."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"contentClass"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," give the content wrapper a custom class name (maps to ",(0,o.jsx)(t.code,{children:"dnb-modal__content"}),")."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"omitTriggerButton"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," omits default showing trigger button."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"trigger"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," provide a custom trigger component. Like ",(0,o.jsx)(t.code,{children:'trigger={<Anchor href="/" />}'}),". It will set the focus on it when the modal gets closed."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"triggerAttributes"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," send along with custom HTML attributes or properties to the trigger button."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"dialogTitle"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," The aria label of the dialog when no labelledBy and no title is given. Defaults to ",(0,o.jsx)(t.code,{children:"Vindu"}),"."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"directDomReturn"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," If true, the modal will not open in a new DOM but directly in current DOM. Defaults to ",(0,o.jsx)(t.code,{children:"false"}),". Be aware of the side effects of setting this property to ",(0,o.jsx)(t.code,{children:"true"}),"."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"bypassInvalidationSelectors"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," Define an array with HTML class selectors (",(0,o.jsx)(t.code,{children:"['.element-selector']"}),") which should not get invalidated when the modal opens/closes. Use this in order to let some parts of your site still be accessible by screen readers."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"scrollRef"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," To get the scroll Element, pass in your own React ref."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"contentRef"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," To get the inner content Element, pass in your own React ref."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.a,{href:"/uilib/layout/space/properties",children:"Space"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," spacing properties like ",(0,o.jsx)(t.code,{children:"top"})," or ",(0,o.jsx)(t.code,{children:"bottom"})," are supported."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"spacing"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(deprecated/optional)"})," if set to ",(0,o.jsx)(t.code,{children:"false"})," then the modal content will be shown without any spacing. Defaults to ",(0,o.jsx)(t.code,{children:"true"}),"."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"closeTitle"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(deprecated/optional)"})," the title of the close button. Defaults to ",(0,o.jsx)(t.em,{children:"Lukk"}),"."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"hideCloseButton"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(deprecated/optional)"})," if true, the close button will not be shown."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.code,{children:"class"})," or ",(0,o.jsx)(t.code,{children:"className"})]}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(deprecated/optional)"})," give the inner content wrapper a class name (maps to ",(0,o.jsx)(t.code,{children:"dnb-modal__content__inner"}),")."]})]})]})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,s.ah)(),e.components);return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(i,e)})):i(e)}},68230:function(e,t,n){n.d(t,{Z:function(){return m}});var o=n(70894),s=n(55560),i=n(41676),l=n(6210),r=n(88268),d=n(36946),c=n(64223),a=n(37339),h=n(80945),j=n(88065),x=n(45270),u=n(85179),p=n(52322);const f=(0,o.Z)(s.ZP,{target:"ejvypor0"})({name:"1qdk5x4",styles:"td{white-space:nowrap;}"});function m(e){let{localeKey:t,source:n=null}=e;n||(n=(0,a.rM)({},j.Z,x.Z));const o={},m={},g=(Array.isArray(t)?t:[t]).map((e=>{if(e.includes(".")){const t=e.split(".")[0];return m[t]=m[t]||[],m[t].push(e),t}return e})),b=(e,t,n,s)=>{e=`${s}.${e}`,m[s]&&!m[s].includes(e)||(o[e]=Object.assign(o[e]||{},{[n]:t}))};Object.entries(n).forEach((e=>{let[t,n]=e;g.forEach((e=>{const o=n[e];o?Object.entries(o).forEach((n=>{let[o,s]=n;if("object"==typeof s){const n=`${e}.${o}`;Object.entries(s).forEach((e=>{let[o,s]=e;b(o,s,t,n)}))}else b(o,s,t,e)})):(0,h.ZK)(`TranslationsTable: Could not find any translations for key: "${e}", perhaps you misspelled the key's name?`)}))}));const y=Object.keys(n),w=Object.entries(o).map((e=>{let[t,n]=e;return(0,p.jsxs)(i.Z,{children:[(0,p.jsx)(l.Z,{children:(0,p.jsx)(u.Kw,{variant:"prop",children:t})}),Object.entries(n).map(((e,t)=>{let[n,o]=e;return(0,p.jsx)(l.Z,{children:"string"==typeof o?o:(0,p.jsx)("pre",{children:JSON.stringify(o,null,2)})},t+n)}))]},t)}));if(0!=w.length)return(0,p.jsxs)(p.Fragment,{children:[(0,p.jsxs)(r.Z,{children:["More info about translations can be found in the"," ",(0,p.jsx)(d.ZP,{href:"/uilib/usage/customisation/localization/",children:"general localization"})," ","and"," ",(0,p.jsx)(d.ZP,{href:"/uilib/extensions/forms/getting-started/#localization-and-translation",children:"Eufemia Forms localization"})," ","docs."]}),(0,p.jsx)(s.ZP.ScrollView,{children:(0,p.jsxs)(f,{children:[(0,p.jsx)("thead",{children:(0,p.jsxs)(i.Z,{children:[(0,p.jsx)(c.Z,{children:"Key"}),y.map((e=>(0,p.jsx)(c.Z,{children:e},e)))]})}),(0,p.jsx)("tbody",{children:w})]})})]});(0,h.ZK)(`TranslationsTable: Not able to find any translations for input : "${t}", hence not rendering the translations table.`)}},6210:function(e,t,n){var o=n(30600);t.Z=o.Z},64223:function(e,t,n){var o=n(91859);t.Z=o.Z},41676:function(e,t,n){var o=n(35610);t.Z=o.Z}}]);
//# sourceMappingURL=component---src-docs-uilib-components-dialog-properties-mdx-d515e5923aaee4bebb7b.js.map