{"version":3,"file":"component---src-docs-uilib-components-drawer-properties-mdx-217cf7bd5c91fa38ebe9.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/components/drawer/DrawerDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/components/drawer/prop-table.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/drawer/properties.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/modal/prop-table-camel-case.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/modal/ModalDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../shared/types'\n\nexport const DrawerProperties: PropertiesTableProps = {\n  containerPlacement: {\n    doc: 'Defines on what side the Drawer should be opened. Can be set to `left`, `right`, `top` and `bottom`. Defaults to `right`.',\n    type: ['left', 'right', 'top', 'bottom'],\n    status: 'optional',\n  },\n  title: {\n    doc: 'The drawer title. Displays on the very top of the content.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  minWidth: {\n    doc: \"The minimum Drawer content width, defined by a CSS width value like `50vw` (50% of the viewport). Be careful on using fixed `minWidth` so you don't break responsiveness. Defaults to `30rem` (average width is set to `60vw`).\",\n    type: ['string', 'number'],\n    status: 'optional',\n  },\n  maxWidth: {\n    doc: 'The maximum Drawer content width, defined by a CSS width value like `20rem`. Defaults to `60rem` (average width is set to `60vw`).',\n    type: ['string', 'number'],\n    status: 'optional',\n  },\n  className: {\n    doc: 'Give the Drawer content a class name (maps to `dnb-drawer`).',\n    type: 'string',\n    status: 'optional',\n  },\n  spacing: {\n    doc: 'If set to `false` then the drawer content will be shown without any spacing. Defaults to `true`. ',\n    type: 'boolean',\n    status: 'optional',\n  },\n  preventCoreStyle: {\n    doc: 'By default the drawer content gets added the core style class `dnb-core-style`. Use `false` to disable this behavior.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  navContent: {\n    doc: 'The content which will appear in the navigation, above the header, and side-by-side the close button.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  headerContent: {\n    doc: 'The content which will appear in the header of the drawer.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  modalContent: {\n    doc: 'The content which will appear when triggering the drawer.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  alignContent: {\n    doc: 'Define the inner horizontal alignment of the content. Can be set to `left`, `center`, `right` and `centered`. If `centered`, then the content will also be centered vertically. Defaults to `left`.',\n    type: ['left', 'right', 'centered', 'center'],\n    status: 'optional',\n  },\n  fullscreen: {\n    doc: 'If set to `true` then the drawer content will be shown as fullscreen, without showing the original content behind. Can be set to `false` to omit the auto fullscreen. Defaults to `auto`. ',\n    type: ['boolean', 'string'],\n    status: 'optional',\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {DrawerProperties} from '@dnb/eufemia/src/components/drawer/DrawerDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: DrawerProperties\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport DrawerPropTable from 'Docs/uilib/components/drawer/prop-table';\nimport ModalPropTable from 'Docs/uilib/components/modal/prop-table-camel-case';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(DrawerPropTable, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"More properties\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The properties of \", _jsx(_components.a, {\n        href: \"/uilib/components/modal\",\n        children: \"Modal\"\n      }), \" formatted as camel case are also provided.\\nSee the table below:\"]\n    }), \"\\n\", _jsx(ModalPropTable, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Drawer sizes\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Drawer is responsive with the following properties:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-css\",\n        children: \"--drawer-width: 40vw;\\n--drawer-min-width: 384px;\\n--drawer-max-width: 40rem;\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {ModalProperties} from '@dnb/eufemia/src/components/modal/ModalDocs';\nfunction _createMdxContent(props) {\n  return _jsx(PropertiesTable, {\n    props: ModalProperties\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const ModalProperties: PropertiesTableProps = {\n  id: {\n    doc: 'The id used internal for the trigger button and Modal component.',\n    type: 'string',\n    status: 'optional',\n  },\n  rootId: {\n    doc: 'The id used internal in the modal root element. Defaults to `root`, so the element id will be `dnb-modal-root`.',\n    type: 'string',\n    status: 'optional',\n  },\n  contentId: {\n    doc: 'Defines an unique identifier to a modal. Use it in case you have to refer in some way to the modal content.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelledBy: {\n    doc: 'The ID of the trigger component, describing the modal content. Defaults to the internal `trigger`, so make sure you define the `title` in `triggerAttributes`.',\n    type: 'string',\n    status: 'optional',\n  },\n  children: {\n    doc: 'the content which will appear when triggering open the modal. If a function is given, you get a close method `() => ({ close })` in the arguments.',\n    type: ['React.ReactNode', 'function'],\n    status: 'optional',\n  },\n  fullscreen: {\n    doc: 'If set to `true` then the modal content will be shown as fullscreen, without showing the original content behind. Can be set to `false` to omit the auto fullscreen. Defaults to `auto`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  openState: {\n    doc: 'use this property to control the open/close state by setting either: `opened` / `closed` or `true` / `false`.',\n    type: ['boolean', 'opened', 'closed'],\n    status: 'optional',\n  },\n  openDelay: {\n    doc: 'forces the modal to delay the opening. The delay is given in `ms`.',\n    type: ['number', 'string'],\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Will disable the trigger button.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  noAnimation: {\n    doc: 'if set to `true`, no open/close animation will be shown. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  noAnimationOnMobile: {\n    doc: 'same as `noAnimation`, but gets triggered only if the viewport width is less than `40em`. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  animationDuration: {\n    doc: 'Duration of animation open/close in ms. Defaults to 300ms.',\n    type: ['number', 'string'],\n    status: 'optional',\n  },\n  preventClose: {\n    doc: \"if set to `true` (boolean or string), then the user can't close the modal.\",\n    type: 'boolean',\n    status: 'optional',\n  },\n  preventOverlayClose: {\n    doc: 'Disable clicking the background overlay to close the modal. PS! Pressing `esc` key will still close the modal.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  openModal: {\n    doc: 'set a function to call the callback function, once the modal should open: `openModal={(open) => open()}`.',\n    type: 'function',\n    status: 'optional',\n  },\n  closeModal: {\n    doc: 'set a function to call the callback function, once the modal should close: `closeModal={(close) => close()}`.',\n    type: 'function',\n    status: 'optional',\n  },\n  focusSelector: {\n    doc: 'The Modal handles the first focus – automatically. However, you can define a custom focus selector the will be used instead `focusSelector=\".css-selector\"`.',\n    type: 'string',\n    status: 'optional',\n  },\n  overlayClass: {\n    doc: 'give the page overlay a custom class name (maps to `dnb-modal__overlay`).',\n    type: 'string',\n    status: 'optional',\n  },\n  contentClass: {\n    doc: 'give the content wrapper a custom class name (maps to `dnb-modal__content`).',\n    type: 'string',\n    status: 'optional',\n  },\n  omitTriggerButton: {\n    doc: 'omits default showing trigger button.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  trigger: {\n    doc: 'provide a custom trigger component. Like `trigger={<Anchor href=\"/\" />}`. It will set the focus on it when the modal gets closed.',\n    type: ['React.ReactNode', 'function'],\n    status: 'optional',\n  },\n  triggerAttributes: {\n    doc: 'send along with custom HTML attributes or properties to the trigger button.',\n    type: 'Various',\n    status: 'optional',\n  },\n  dialogTitle: {\n    doc: 'The aria label of the dialog when no labelledBy and no title is given. Defaults to `Vindu`.',\n    type: 'string',\n    status: 'optional',\n  },\n  directDomReturn: {\n    doc: 'If true, the modal will not open in a new DOM but directly in current DOM. Defaults to `false`. Be aware of the side effects of setting this property to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  bypassInvalidationSelectors: {\n    doc: \"Define an array with HTML class selectors (`['.element-selector']`) which should not get invalidated when the modal opens/closes. Use this in order to let some parts of your site still be accessible by screen readers.\",\n    type: 'boolean',\n    status: 'optional',\n  },\n  scrollRef: {\n    doc: 'To get the scroll Element, pass in your own React ref.',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  contentRef: {\n    doc: 'To get the inner content Element, pass in your own React ref.',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n  spacing: {\n    doc: 'if set to `false` then the modal content will be shown without any spacing. Defaults to `true`.',\n    type: 'boolean',\n    status: 'deprecated',\n  },\n  closeTitle: {\n    doc: 'the title of the close button. Defaults to _Lukk_.',\n    type: 'string',\n    status: 'deprecated',\n  },\n  hideCloseButton: {\n    doc: 'if true, the close button will not be shown.',\n    type: 'boolean',\n    status: 'deprecated',\n  },\n  class: {\n    doc: 'give the inner content wrapper a class name (maps to `dnb-modal__content__inner`).',\n    type: 'string',\n    status: 'optional',\n  },\n  className: {\n    doc: 'give the inner content wrapper a class name (maps to `dnb-modal__content__inner`).',\n    type: 'string',\n    status: 'optional',\n  },\n}\n\nexport const ModalEvents: PropertiesTableProps = {\n  onOpen: {\n    doc: 'This event gets triggered once the modal shows up. Returns the modal id: `{ id }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  onClose: {\n    doc: 'This event gets triggered once the modal gets closed. Returns the modal id: `{ id, event, triggeredBy }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  onClosePrevent: {\n    doc: 'This event gets triggered once the user tries to close the modal, but `preventClose` is set to **true**. Returns a callback `close` you can call to trigger the close mechanism. More details below. Returns the modal id: `{ id, event, close: Method, triggeredBy }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["DrawerProperties","containerPlacement","doc","type","status","title","minWidth","maxWidth","className","spacing","preventCoreStyle","navContent","headerContent","modalContent","alignContent","fullscreen","_createMdxContent","props","_components","Object","assign","h2","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","wrapper","MDXLayout","h3","p","a","pre","code","DrawerPropTable","href","ModalPropTable","ModalProperties","id","rootId","contentId","labelledBy","openState","openDelay","disabled","noAnimation","noAnimationOnMobile","animationDuration","preventClose","preventOverlayClose","openModal","closeModal","focusSelector","overlayClass","contentClass","omitTriggerButton","trigger","triggerAttributes","dialogTitle","directDomReturn","bypassInvalidationSelectors","scrollRef","contentRef","closeTitle","hideCloseButton","class","ModalEvents","onOpen","onClose","onClosePrevent","Td","Th","Tr"],"sourceRoot":""}