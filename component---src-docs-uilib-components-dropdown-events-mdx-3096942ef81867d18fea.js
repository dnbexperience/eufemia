"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[29607],{97656:function(e,s,n){n.r(s);var t=n(52322),c=n(45392);function d(e){const s=Object.assign({h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",em:"em",strong:"strong",h3:"h3",p:"p",ul:"ul",li:"li"},(0,c.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{children:"Events"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Events"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"on_change"})}),(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.em,{children:"(optional)"})," will be called on state changes made by the user. Returns an object with the new selected ",(0,t.jsx)(s.code,{children:"data"})," item ",(0,t.jsx)(s.code,{children:"{ data, event, attributes, value }"}),"."]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"on_select"})}),(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.em,{children:"(optional)"})," will be called once the user focuses or selects an item by a click or keyboard navigation. Returns an object with the new selected ",(0,t.jsx)(s.code,{children:"data"})," item ",(0,t.jsx)(s.code,{children:"{ data, event, attributes, value, active_item }"}),". The ",(0,t.jsx)(s.strong,{children:"active_item"})," property is the currently selected item by keyboard navigation"]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"on_show"})}),(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.em,{children:"(optional)"})," will be called once the user presses the dropdown. Returns the data item ",(0,t.jsx)(s.code,{children:"{ data, attributes }"}),"."]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"on_hide"})}),(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.em,{children:"(optional)"})," will be called once the user presses the dropdown again, or clicks somewhere else. Returns the data item ",(0,t.jsx)(s.code,{children:"{ data, attributes }"}),"."]})]})]})]}),"\n",(0,t.jsxs)(s.h3,{children:["The ",(0,t.jsx)(s.code,{children:"on_change"})," vs ",(0,t.jsx)(s.code,{children:"on_select"})," difference"]}),"\n",(0,t.jsxs)(s.p,{children:["The difference between ",(0,t.jsx)(s.code,{children:"on_change"})," and ",(0,t.jsx)(s.code,{children:"on_select"})," is:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"on_change"})," will be called when the state changes, either with a ",(0,t.jsx)(s.strong,{children:"click"})," or ",(0,t.jsx)(s.strong,{children:"space/enter"})," keypress confirmation."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"on_select"})," differs most when the user is navigating by keyboard. Once the user is pressing e.g. the arrow keys, the selection is changing, but not the state."]}),"\n"]})]})}s.default=function(e){void 0===e&&(e={});const{wrapper:s}=Object.assign({},(0,c.ah)(),e.components);return s?(0,t.jsx)(s,Object.assign({},e,{children:(0,t.jsx)(d,e)})):d(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-dropdown-events-mdx-3096942ef81867d18fea.js.map