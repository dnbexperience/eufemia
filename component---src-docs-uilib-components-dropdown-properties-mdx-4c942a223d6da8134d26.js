"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[85535],{51085:function(e,t,n){n.r(t);var s=n(52322),o=n(45392),i=n(68230),r=n(85179),l=n(56394),a=n(58027);function d(e){const t=Object.assign({h2:"h2",p:"p",a:"a",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",em:"em"},(0,o.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{children:"Properties"}),"\n",(0,s.jsxs)(t.p,{children:["You may check out the ",(0,s.jsx)(t.a,{href:"#drawerlist-properties",children:"DrawerList Properties"})," down below as well as the ",(0,s.jsx)(t.a,{href:"#data-structure",children:"Data structure examples"}),"."]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Properties"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"title"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," give a title to let the users know what they have to do. Defaults to ",(0,s.jsx)(t.code,{children:"Valgmeny"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"value"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," define a preselected data entry (index). More info down below."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"variant"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," defines the kind of dropdown. Possible values are ",(0,s.jsx)(t.code,{children:"primary"}),", ",(0,s.jsx)(t.code,{children:"secondary"}),", ",(0,s.jsx)(t.code,{children:"tertiary"})," and ",(0,s.jsx)(t.code,{children:"signal"}),". Defaults to ",(0,s.jsx)(t.code,{children:"secondary"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"icon"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," icon to be included in the dropdown."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"icon_size"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," change the size of the icon pragmatically."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"icon_position"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," position of the icon inside the dropdown. Set to ",(0,s.jsx)(t.code,{children:"left"})," or ",(0,s.jsx)(t.code,{children:"right"}),". Defaults to ",(0,s.jsx)(t.code,{children:"right"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"triangle_position"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," position of arrow / triangle of the drawer. Set to ",(0,s.jsx)(t.code,{children:"left"})," or ",(0,s.jsx)(t.code,{children:"right"}),". Defaults to ",(0,s.jsx)(t.code,{children:"right"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"size"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," define the height of the Dropdown. Can be set to ",(0,s.jsx)(t.code,{children:"small"}),", ",(0,s.jsx)(t.code,{children:"default"}),", ",(0,s.jsx)(t.code,{children:"medium"})," and ",(0,s.jsx)(t.code,{children:"large"}),". Defaults to ",(0,s.jsx)(t.code,{children:"default"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"opened"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," if set to ",(0,s.jsx)(t.code,{children:"true"}),", the Dropdown will be rendered initially with a visible and accessible data list / options."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"open_on_focus"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," if set to ",(0,s.jsx)(t.code,{children:"true"}),", the Dropdown will be opened when the users enter the trigger button with a focus action."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"prevent_selection"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," if set to ",(0,s.jsx)(t.code,{children:"true"}),", no permanent selection will be made. Defaults to ",(0,s.jsx)(t.code,{children:"false"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"action_menu"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," same as ",(0,s.jsx)(t.code,{children:"prevent_selection"}),", but the DrawerList will be opened from the bottom of the page for mobile devices. Defaults to ",(0,s.jsx)(t.code,{children:"false"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"more_menu"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," same as ",(0,s.jsx)(t.code,{children:"prevent_selection"}),', but the "selection area" (given title) will not be visible and the icon ',(0,s.jsx)(t.code,{children:"more"})," (three dots) is used. Defaults to ",(0,s.jsx)(t.code,{children:"false"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"align_dropdown"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," use ",(0,s.jsx)(t.code,{children:"right"})," to change the options alignment direction. Makes only sense to use in combination with ",(0,s.jsx)(t.code,{children:"prevent_selection"})," or ",(0,s.jsx)(t.code,{children:"more_menu"}),". Defaults to ",(0,s.jsx)(t.code,{children:"left"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"independent_width"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," If set to ",(0,s.jsx)(t.code,{children:"true"}),", the Dropdown will handle it's width independent to the content width. Defaults to ",(0,s.jsx)(t.code,{children:"false"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"skip_portal"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," set to ",(0,s.jsx)(t.code,{children:"true"})," to disable the React Portal behavior. Defaults to ",(0,s.jsx)(t.code,{children:"false"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"stretch"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," if set to ",(0,s.jsx)(t.code,{children:"true"}),", then the dropdown will be 100% in available ",(0,s.jsx)(t.code,{children:"width"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"status"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," text with a status message. The style defaults to an error message. You can use ",(0,s.jsx)(t.code,{children:"true"})," to only get the status color, without a message."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"status_state"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," defines the state of the status. It's two statuses ",(0,s.jsx)(t.code,{children:"[error, info]"}),". Defaults to ",(0,s.jsx)(t.code,{children:"error"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"status_props"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," use an object to define additional FormStatus properties."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"globalStatus"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," the ",(0,s.jsx)(t.a,{href:"/uilib/components/global-status/properties/#configuration-object",children:"configuration"})," used for the target ",(0,s.jsx)(t.a,{href:"/uilib/components/global-status",children:"GlobalStatus"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"label"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," prepends the Form Label component. If no ID is provided, a random ID is created."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"label_direction"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," use ",(0,s.jsx)(t.code,{children:'label_direction="vertical"'})," to change the label layout direction. Defaults to ",(0,s.jsx)(t.code,{children:"horizontal"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"label_sr_only"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," use ",(0,s.jsx)(t.code,{children:"true"})," to make the label only readable by screen readers."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"suffix"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," text describing the content of the Dropdown more than the label. You can also send in a React component, so it gets wrapped inside the Dropdown component."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"trigger_element"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," lets you provide a custom React element as the trigger HTML element."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"innerRef"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," by providing a React.ref you can get the internally used main element (DOM). E.g. ",(0,s.jsx)(t.code,{children:"innerRef={myRef}"})," by using ",(0,s.jsx)(t.code,{children:"React.createRef()"})," or ",(0,s.jsx)(t.code,{children:"React.useRef()"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"buttonRef"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," by providing a React.ref you can get the internally used button element (DOM). E.g. ",(0,s.jsx)(t.code,{children:"buttonRef={myRef}"})," by using ",(0,s.jsx)(t.code,{children:"React.createRef()"})," or ",(0,s.jsx)(t.code,{children:"React.useRef()"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"skeleton"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," if set to ",(0,s.jsx)(t.code,{children:"true"}),", an overlaying skeleton with animation will be shown."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/uilib/components/fragments/drawer-list/properties",children:"DrawerList"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," all DrawerList properties."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/uilib/layout/space/properties",children:"Space"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," spacing properties like ",(0,s.jsx)(t.code,{children:"top"})," or ",(0,s.jsx)(t.code,{children:"bottom"})," are supported."]})]})]})]}),"\n",(0,s.jsx)(t.h2,{children:"DrawerList Properties"}),"\n",(0,s.jsx)(r.ZP,{props:l.T4}),"\n",(0,s.jsx)(t.h2,{children:"Value"}),"\n",(0,s.jsxs)(t.p,{children:["Should either be an index (integer) of the data array or a key – defined by ",(0,s.jsx)(t.code,{children:"selectedKey"})," (the deprecated ",(0,s.jsx)(t.code,{children:"selected_key"})," should not start with a number) inside an array item."]}),"\n",(0,s.jsxs)(t.p,{children:["If ",(0,s.jsx)(t.code,{children:"data"})," is an object, use the object key as the ",(0,s.jsx)(t.code,{children:"value"})," to define the selected item. Can be a string or integer."]}),"\n",(0,s.jsx)(a.Z,{}),"\n",(0,s.jsx)(t.h2,{children:"Translations"}),"\n",(0,s.jsx)(i.Z,{localeKey:"Dropdown"})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,o.ah)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(d,e)})):d(e)}},58027:function(e,t,n){var s=n(52322),o=n(45392),i=n(85179),r=n(56394);function l(e){const t=Object.assign({h2:"h2",code:"code",p:"p",ul:"ul",li:"li",h3:"h3",pre:"pre",h4:"h4"},(0,o.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.h2,{children:["The ",(0,s.jsx)(t.code,{children:"data"})," property"]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"data"})," can be structured in two main ways:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"As an array"}),"\n",(0,s.jsx)(t.li,{children:"As an object."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"An array is preferred as it gives you the most options."}),"\n",(0,s.jsxs)(t.h3,{children:[(0,s.jsx)(t.code,{children:"data"})," as an array"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"// an array can contain complex items and offers the most control\nconst data = [\n  {\n    content: \"Item 1\",\n  },\n  {\n    content: <span>Item 2</span>\n  },\n  {\n    content: [\"Item 3\", \"Line 2\", <span>Line 3</span>]\n  },\n  {\n    content: ['Main account', '1234 12 12345'],\n    selected_value: 'Main account (605,22 kr)',\n    suffix_value: '605,22 kr',\n  },\n  {\n    content: ['Old account', <i>Closed</i>],\n    disabled: true,\n    suffix_value: '0,00 kr',\n  },\n]\n\n// If you only use the `content` property, you can use it directly in the array.\n// This list is identical to the one above:\nconst data = [\n  \"Item 1\",\n  <span>Item 2</span>,\n  [\"Item 3\", \"Line 2\", <span>Line 3</span>],\n  {\n    content: ['Main account', '1234 12 12345'],\n    selected_value: 'Main account (605,22 kr)',\n    suffix_value: '605,22 kr',\n  },\n  {\n    content: ['Old account', <i>Closed</i>],\n    disabled: true,\n    suffix_value: '0,00 kr',\n  },\n]\n\nconst onChange = ({ data, value }) => {\n  console.log(data) // returns the item as it appears in the array\n  console.log(value) // returns the index of the item\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"Each object in the array have the following properties:"}),"\n",(0,s.jsx)(i.ZP,{props:r.u$}),"\n",(0,s.jsxs)(t.h3,{children:[(0,s.jsx)(t.code,{children:"data"})," as an object"]}),"\n",(0,s.jsx)(t.p,{children:"A simpler alternative, but with less options"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'// Each entry can contain the same type of value as the array\'s `content` property\nconst data = {\n  first: "Item 1",,\n  second: <span>Item 2</span>,\n  last: ["Item 3", "Line 2", <span>Line 3</span>],\n}\n\nconst onChange = ({ data, value }) => {\n  console.log(data)\n  // returns a generated object representing the item:\n  // {\n  //   selectedKey: \'first\',\n  //   value: \'first\',\n  //   content: \'Item 1\',\n  //   type: \'object\'\n  // }\n\n  console.log(value) // returns the key ("first", "second", or "last"), instead of an index\n\n}\n\n'})}),"\n",(0,s.jsxs)(t.h3,{children:[(0,s.jsx)(t.code,{children:"data"})," types overview"]}),"\n",(0,s.jsxs)(t.p,{children:["The following is an overview of all the types that the ",(0,s.jsx)(t.code,{children:"data"})," prop accepts. (These are not actual names of actual types in the library.)"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'// The visual content that is shown in one DrawerList item.\n// An array can be used to define multiple lines.\ntype CONTENT = string | React.Node | (string | React.Node)[]\n\n// An array item\ntype ARRAY_OBJECT = {\n  content: CONTENT\n  disabled?: boolean\n  selectedKey?: string | number\n  selected_value?: string | React.Node\n  suffix_value?: string | React.Node\n  style?: React.CSSProperties\n}\n\n// `data` as an array. A list of "ARRAY_OBJECT" types is preferred,\n// but the "CONTENT" type can be useful for simple lists.\ntype ARRAY = (CONTENT | ARRAY_OBJECT)[]\n\n// `data` as an object. Can only contain the "CONTENT" type.\n// Each `key` behaves like the "ARRAY_OBJECT"\'s `selectedKey`.\ntype RECORD = Record<string, CONTENT>\n\n// An object or array that represents the entire DrawerList list.\ntype DATA = ARRAY | RECORD\n\n// The final type of the `data` prop:\nlet data: DATA | () => DATA\n'})}),"\n",(0,s.jsx)(t.h4,{children:"JSON string"}),"\n",(0,s.jsxs)(t.p,{children:["There is technically support for sending in a JSON string of the data to the ",(0,s.jsx)(t.code,{children:"data"})," prop. But this is an old functionality that we do not really support anymore."]})]})}t.Z=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,o.ah)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(l,e)})):l(e)}},68230:function(e,t,n){n.d(t,{Z:function(){return b}});var s=n(70894),o=n(55560),i=n(41676),r=n(6210),l=n(88268),a=n(36946),d=n(64223),c=n(37339),h=n(80945),p=n(88065),u=n(45270),x=n(85179),j=n(52322);const f=(0,s.Z)(o.ZP,{target:"ejvypor0"})({name:"1qdk5x4",styles:"td{white-space:nowrap;}"});function b(e){let{localeKey:t,source:n=null}=e;n||(n=(0,c.rM)({},p.Z,u.Z));const s={},b={},m=(Array.isArray(t)?t:[t]).map((e=>{if(e.includes(".")){const t=e.split(".")[0];return b[t]=b[t]||[],b[t].push(e),t}return e})),y=(e,t,n,o)=>{e=`${o}.${e}`,b[o]&&!b[o].includes(e)||(s[e]=Object.assign(s[e]||{},{[n]:t}))};Object.entries(n).forEach((e=>{let[t,n]=e;m.forEach((e=>{const s=n[e];s?Object.entries(s).forEach((n=>{let[s,o]=n;if("object"==typeof o){const n=`${e}.${s}`;Object.entries(o).forEach((e=>{let[s,o]=e;y(s,o,t,n)}))}else y(s,o,t,e)})):(0,h.ZK)(`TranslationsTable: Could not find any translations for key: "${e}", perhaps you misspelled the key's name?`)}))}));const g=Object.keys(n),w=Object.entries(s).map((e=>{let[t,n]=e;return(0,j.jsxs)(i.Z,{children:[(0,j.jsx)(r.Z,{children:(0,j.jsx)(x.Kw,{variant:"prop",children:t})}),Object.entries(n).map(((e,t)=>{let[n,s]=e;return(0,j.jsx)(r.Z,{children:"string"==typeof s?s:(0,j.jsx)("pre",{children:JSON.stringify(s,null,2)})},t+n)}))]},t)}));if(0!=w.length)return(0,j.jsxs)(j.Fragment,{children:[(0,j.jsxs)(l.Z,{children:["More info about translations can be found in the"," ",(0,j.jsx)(a.ZP,{href:"/uilib/usage/customisation/localization/",children:"general localization"})," ","and"," ",(0,j.jsx)(a.ZP,{href:"/uilib/extensions/forms/getting-started/#localization-and-translation",children:"Eufemia Forms localization"})," ","docs."]}),(0,j.jsx)(o.ZP.ScrollView,{children:(0,j.jsxs)(f,{children:[(0,j.jsx)("thead",{children:(0,j.jsxs)(i.Z,{children:[(0,j.jsx)(d.Z,{children:"Key"}),g.map((e=>(0,j.jsx)(d.Z,{children:e},e)))]})}),(0,j.jsx)("tbody",{children:w})]})})]});(0,h.ZK)(`TranslationsTable: Not able to find any translations for input : "${t}", hence not rendering the translations table.`)}},6210:function(e,t,n){var s=n(30600);t.Z=s.Z},64223:function(e,t,n){var s=n(91859);t.Z=s.Z},41676:function(e,t,n){var s=n(35610);t.Z=s.Z},56394:function(e,t,n){n.d(t,{T4:function(){return s},hi:function(){return o},u$:function(){return i}});const s={"[data](#the-data-property)":{doc:"The data we want to fill the list with. [Details on the type of {DATA} can be found below](#the-data-property). The data can be provided as an array or object. Or as a function that returns the data (called when user opens the list).",type:["{DATA}","() => {DATA}"],status:"required"},value:{doc:"Define a preselected `data` entry. In order of priority, `value` can be set to: object key (if `data` is an object), `selectedKey` prop (if `data` is an array), array index (if no `selectedKey`) or content (if `value` is a non-integer string).",type:["string","number"],status:"optional"},default_value:{doc:"Define a startup value or handle a re-render without handling the state during the re-render by yourself. Defaults to `null`.",type:"number",status:"optional"},triangle_position:{doc:"Position of the arrow icon/triangle inside the drawer-list. Set to 'left' or 'right'. Defaults to 'left' if not set.",type:"string",status:"optional"},direction:{doc:"Defines the direction of how the drawer-list shows the options list. Can be 'bottom' or 'top'. Defaults to 'auto'.",type:"string",status:"optional"},label_direction:{doc:"The direction of the label. If set to 'horizontal', the label will be positioned horizontally next to the input element. If set to 'vertical', the label will be positioned vertically above the input element.",type:"string",status:"optional"},prevent_selection:{doc:"If set to `true`, the DrawerList will then not make any permanent selection.",type:"boolean",status:"optional"},focusable:{doc:"If set to `true`, the element is then focusable by assertive technologies.",type:"boolean",status:"optional"},prevent_close:{doc:"If set to `true`, the DrawerList will not close on any events.",type:"boolean",status:"optional"},keep_open:{doc:"If set to `true`, the DrawerList will close on outside clicks, but not on selection.",type:"boolean",status:"optional"},independent_width:{doc:"If set to `true`, the DrawerList will handle its width and position independently of the parent/mother element.",type:"boolean",status:"optional"},fixed_position:{doc:"If set to `true`, the DrawerList will be fixed in its scroll position by using CSS `position: fixed;`.",type:"boolean",status:"optional"},enable_body_lock:{doc:"If set to `true`, the HTML body will get locked from scrolling when the Dropdown is open.",type:"boolean",status:"optional"},skip_keysearch:{doc:"If set to `true`, search items by the first key will be ignored.",type:"boolean",status:"optional"},ignore_events:{doc:"If set to `true`, all keyboard and mouse events will be ignored.",type:"boolean",status:"optional"},align_drawer:{doc:"Use 'right' to change the options alignment direction. Makes only sense to use in combination with `prevent_selection` or `more_menu` - or if an independent width is used.",type:"string",status:"optional"},list_class:{doc:"Define an HTML class that will be set on the list, beside `dnb-drawer-list__list`.",type:"string",status:"optional"},portal_class:{doc:"Define an HTML class that will be set on the DOM portal beside `dnb-drawer-list__portal__style`. Can be useful to handle e.g. a custom `z-index` in relation to a header.",type:"string",status:"optional"},scrollable:{doc:"Defines if the options list should be scrollable (the `max-height` is set by default to `50vh`).",type:"boolean",status:"optional"},no_scroll_animation:{doc:"To disable scrolling animation.",type:"boolean",status:"optional"},no_animation:{doc:"To disable appear/disappear (show/hide) animation.",type:"boolean",status:"optional"},skip_portal:{doc:"To disable the React Portal behavior.",type:"boolean",status:"optional"},min_height:{doc:"Defines the minimum height (in `rem`) of the options list.",type:"string",status:"optional"},max_height:{doc:"Defines the maximum height (in `rem`) of the options list.",type:"string",status:"optional"},page_offset:{doc:"Defines the available scrollable height. If scrolling should not change the height of the drawer-list, then set it to `0` (useful if the DrawerList is used in fixed positions on contrast to a scrollable page content).",type:"string",status:"optional"},observer_element:{doc:"Set a HTML element, either as a selector or a DOM element. Can be used to send in an element which will be used to make the direction calculation on.",type:"string",status:"optional"},cache_hash:{doc:"Set a `cache_hash` as a string to enable internal memorizing of the list to enhance rerendering performance. Components like Autocomplete are using this because of the huge data changes due to search and reorder.",type:"string",status:"optional"},wrapper_element:{doc:"Has to be an HTML Element, ideally a mother element, used to calculate sizes and distances. Also used for the 'click outside' detection. Clicking on the `wrapper_element` will not trigger an outside click.",type:"HTMLElement",status:"optional"},options_render:{doc:"Has to be a function, returning the items again. See [example](/uilib/components/fragments/drawer-list#example-usage-of-options_render). This can be used to add additional options above the actual rendered list.",type:"function",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},o={on_pre_change:{doc:"Will be called before `on_change`, this way you can return false to prevent selection and to prevent `on_change` execution.",type:"function",status:"optional"},on_change:{doc:"Will be called on state changes made by the user.",type:"function",status:"optional"},on_select:{doc:"Will be called once the user focuses or selects an item by a click or keyboard navigation.",type:"function",status:"optional"},on_show:{doc:"Will be called once the user presses the drawer-list.",type:"function",status:"optional"},on_hide:{doc:"Will be called once the user presses the drawer-list again, or clicks somewhere else.",type:"function",status:"optional"}},i={content:{doc:"Visual content in the list item",type:["string","React.node","(string | React.Node)[]"],status:"optional"},disabled:{doc:"Disables the list item from selection",type:"boolean",status:"optional"},selectedKey:{doc:"If set, can be used instead of array index by the `value` prop",type:["string","number"],status:"optional"},selected_value:{doc:"Replaces the standard value output for selected item. Only used in some implementations (Dropdown, Autocomplete).",type:["string","React.Node"],status:"optional"},suffix_value:{doc:"Content placed to the right in the list item.",type:["string","React.node"],status:"optional"},selected_key:{doc:"Use prop `selectedKey` instead",type:["string","number"],status:"deprecated"}}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-dropdown-properties-mdx-4c942a223d6da8134d26.js.map