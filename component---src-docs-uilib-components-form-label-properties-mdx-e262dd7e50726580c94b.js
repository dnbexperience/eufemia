"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[24860],{69094:function(e,t,n){var o=n(23722);t.A=o.A},81908:function(e,t,n){var o=n(94515);t.A=o.A},92034:function(e,t,n){var o=n(31666);t.A=o.A},99710:function(e,t,n){n.r(t),n.d(t,{default:function(){return r}});var o=n(31085),s=n(71184),a=n(15616);const i={forId:{doc:"the same unique `id` like the linked HTML element has.",type:"string",status:"required"},text:{doc:"the `text` of the label. You can use `children` as well.",type:"React.ReactNode",status:"optional"},srOnly:{doc:"when `true`, the label will be invisible and only accessible for screen readers.",type:"boolean",status:"optional"},vertical:{doc:"if set to `true`, will do the same as `label_direction` when set to **vertical**.",type:"boolean",status:"optional"},size:{doc:"define one of the following [heading sizes](/uilib/elements/heading/): `medium` or `large`.",type:["medium","large"],status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown.",type:"boolean",status:"optional"},disabled:{doc:"if set to `true`, the label will behave as not interactive.",type:"boolean",status:"optional"},element:{doc:"defines the HTML element used. Defaults to `label`.",type:"React.Element",status:"optional"},innerRef:{doc:"attach a React Ref to the inner label `element`.",type:"React.Ref",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}};function l(e){const t=Object.assign({h2:"h2"},(0,s.R)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{children:"Properties"}),"\n",(0,o.jsx)(a.Ay,{props:i})]})}var r=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,s.R)(),e.components);return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(l,e)})):l(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-form-label-properties-mdx-e262dd7e50726580c94b.js.map