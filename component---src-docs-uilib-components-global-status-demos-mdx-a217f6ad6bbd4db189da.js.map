{"version":3,"file":"component---src-docs-uilib-components-global-status-demos-mdx-a217f6ad6bbd4db189da.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/global-status/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/global-status/Examples.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {GlobalStatusError, GlobalStatusInfo, GlobalStatusWarning, GlobalStatusSuccess, GlobalStatusUpdate, GlobalStatusCoupling, GlobalStatusAddRemoveItems, GlobalStatusScrolling} from 'Docs/uilib/components/global-status/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    strong: \"strong\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"GlobalStatus displaying error status\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"NB:\"\n      }), \" Keep in mind, the \", _jsx(_components.code, {\n        children: \"items\"\n      }), \" are handled automatically by all form components! This is just an example of how to define the content manually.\"]\n    }), \"\\n\", _jsx(GlobalStatusError, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"GlobalStatus displaying info status\"\n    }), \"\\n\", _jsx(GlobalStatusInfo, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"GlobalStatus displaying warning status\"\n    }), \"\\n\", _jsx(GlobalStatusWarning, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"GlobalStatus displaying success status\"\n    }), \"\\n\", _jsx(GlobalStatusSuccess, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"To showcase the automated coupling between \", _jsx(_components.strong, {\n        children: \"FormStatus\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"GlobalStatus\"\n      })]\n    }), \"\\n\", _jsx(GlobalStatusCoupling, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"GlobalStatus and update routines\"\n    }), \"\\n\", _jsx(GlobalStatusUpdate, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"To showcase the custom \", _jsx(_components.strong, {\n        children: \"Update\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"Remove\"\n      }), \" possibility\"]\n    }), \"\\n\", _jsx(GlobalStatusAddRemoveItems, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"To showcase the scrolling\"\n    }), \"\\n\", _jsx(GlobalStatusScrolling, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport {\n  GlobalStatus,\n  Button,\n  Input,\n  Section,\n  ToggleButton,\n} from '@dnb/eufemia/src'\nimport { Provider } from '@dnb/eufemia/src/shared'\n\nexport const GlobalStatusError = () => (\n  <ComponentBox data-visual-test=\"global-status\">\n    <GlobalStatus\n      title=\"Custom Title\"\n      text=\"Failure text\"\n      items={[\n        {\n          text: 'List item',\n          status_anchor_url: '/uilib/components/global-status',\n          status_anchor_label: 'eksempel',\n        },\n      ]}\n      show={true}\n      autoscroll={false}\n      no_animation={true}\n      omit_set_focus={true}\n      id=\"demo-1\"\n    />\n  </ComponentBox>\n)\n\nexport const GlobalStatusInfo = () => (\n  <ComponentBox data-visual-test=\"global-status-info\">\n    <GlobalStatus\n      state=\"info\"\n      title=\"Custom info title ...\"\n      text=\"Long info nisl tempus hendrerit tortor dapibus nascetur taciti porta risus cursus fusce platea enim curabitur proin nibh ut luctus magnis metus\"\n      items={['Status text 1', 'Status text 2']}\n      show={true}\n      autoscroll={false}\n      no_animation={true}\n      omit_set_focus={true}\n      id=\"demo-4\"\n    />\n  </ComponentBox>\n)\n\nexport const GlobalStatusWarning = () => (\n  <ComponentBox>\n    <GlobalStatus\n      state=\"warning\"\n      title=\"Custom warning title ...\"\n      text=\"A string of text providing a warning or semi-urgent message of some kind to the user\"\n      show={true}\n      autoscroll={false}\n      no_animation={true}\n      omit_set_focus={true}\n      id=\"demo-5\"\n    />\n  </ComponentBox>\n)\n\nexport const GlobalStatusSuccess = () => (\n  <ComponentBox>\n    <GlobalStatus\n      state=\"success\"\n      title=\"Custom success title ...\"\n      text=\"A string of text providing a success message of some kind to the user\"\n      show={true}\n      autoscroll={false}\n      no_animation={true}\n      omit_set_focus={true}\n      id=\"demo-6\"\n    />\n  </ComponentBox>\n)\n\nexport const GlobalStatusCoupling = () => (\n  <ComponentBox>\n    {() => {\n      const InputWithError = () => {\n        const [errorMessage, setErrorMessage] = React.useState(null)\n        return (\n          <Input\n            label=\"Input\"\n            placeholder=\"Write less than 5 chars and dismiss the focus to show the GlobalStatus ...\"\n            stretch\n            status={errorMessage}\n            on_blur={({ value }) => {\n              setErrorMessage(\n                value.length <= 4 ? 'With a message shown' : null,\n              )\n            }}\n            globalStatus={{ id: 'main-status' }}\n          />\n        )\n      }\n      return <InputWithError />\n    }}\n  </ComponentBox>\n)\n\nexport const GlobalStatusAddRemoveItems = () => (\n  <ComponentBox hideCode>\n    {() => {\n      function AddRemoveItems() {\n        const [count, toggleUpdateStatus] = React.useState(0)\n        return (\n          <>\n            <GlobalStatus\n              id=\"custom-status\"\n              autoscroll={false}\n              on_close={() => toggleUpdateStatus(0)}\n              on_hide={() => toggleUpdateStatus(0)}\n            />\n            <Button\n              text={'Show step #' + count}\n              on_click={() => {\n                toggleUpdateStatus(count + 1)\n                if (count >= 3) {\n                  toggleUpdateStatus(0)\n                }\n              }}\n              top=\"small\"\n            />\n            {count === 1 && (\n              <>\n                <GlobalStatus.Add\n                  id=\"custom-status\"\n                  status_id=\"custom-id-1\"\n                  title=\"New title\"\n                  text=\"First long info text ...\"\n                  item=\"Item from status #1\"\n                  on_close={({ status_id }) => {\n                    console.log('on_close 1', status_id)\n                  }}\n                />\n                <GlobalStatus.Add\n                  id=\"custom-status\"\n                  status_id=\"custom-id-2\"\n                  text=\"Second long info text ...\"\n                  item=\"Item from status #2\"\n                  on_close={({ status_id }) => {\n                    console.log('on_close 2', status_id)\n                  }}\n                />\n              </>\n            )}\n            {count === 2 && (\n              <GlobalStatus.Remove\n                id=\"custom-status\"\n                status_id=\"custom-id-2\"\n              />\n            )}\n            {count === 3 && (\n              <GlobalStatus.Remove\n                id=\"custom-status\"\n                status_id=\"custom-id-1\"\n              />\n            )}\n          </>\n        )\n      }\n      return <AddRemoveItems />\n    }}\n  </ComponentBox>\n)\n\nexport const GlobalStatusScrolling = () => (\n  <ComponentBox hideCode>\n    <Button\n      text=\"Scroll to main GlobalStatus\"\n      on_click={() => {\n        GlobalStatus.Update({\n          id: 'main-status',\n          text: 'Dui consectetur viverra aenean vestibulum ac tristique sem ligula condimentum',\n        })\n      }}\n    />\n  </ComponentBox>\n)\n\nexport const GlobalStatusUpdate = () => (\n  <ComponentBox hideCode>\n    {() => {\n      const Context = React.createContext(null)\n\n      const UpdateDemo = () => {\n        const [errorA, setErrorA] = React.useState(false)\n        const [errorB, setErrorB] = React.useState(false)\n\n        const [isVisible, setVisibility] = React.useState(false)\n\n        return (\n          <Context.Provider\n            value={{\n              errorA,\n              errorB,\n              setErrorA,\n              setErrorB,\n              isVisible,\n              setVisibility,\n            }}\n          >\n            <UpdateDemoStatus />\n            <UpdateDemoTools />\n          </Context.Provider>\n        )\n      }\n\n      const UpdateDemoStatus = () => {\n        const { errorA, errorB, setErrorA, setErrorB } =\n          React.useContext(Context)\n\n        return (\n          <>\n            <GlobalStatus\n              title=\"Custom Title\"\n              text=\"Failure text\"\n              id=\"demo-2\"\n            />\n            <Input\n              top\n              right\n              label=\"Label A\"\n              placeholder=\"Placeholder A\"\n              status={errorA}\n              globalStatus={{ id: 'demo-2' }}\n              on_change={({ value }) => {\n                setErrorA(value)\n              }}\n            />\n            <Input\n              top\n              label=\"Label B\"\n              placeholder=\"Placeholder B\"\n              status={errorB}\n              globalStatus={{ id: 'demo-2' }}\n              on_change={({ value }) => {\n                setErrorB(value)\n              }}\n            />\n          </>\n        )\n      }\n\n      const UpdateDemoTools = () => {\n        const {\n          errorA,\n          errorB,\n          setErrorA,\n          setErrorB,\n          isVisible,\n          setVisibility,\n        } = React.useContext(Context)\n\n        // Only to demonstrate the usage of an interceptor situation\n        const inst = React.useRef(null)\n        React.useEffect(() => {\n          if (!inst.current) {\n            inst.current = GlobalStatus.create({\n              id: 'demo-2',\n              title: 'New Title',\n              text: 'New Text',\n              status_id: 'custom-item',\n              show: false,\n            })\n\n            inst.current.update({\n              on_show: () => {\n                console.log('on_show')\n                if (!isVisible) {\n                  setVisibility(true)\n                }\n              },\n              on_hide: () => {\n                console.log('on_hide')\n                setVisibility(false)\n              },\n              on_close: () => {\n                console.log('on_close')\n                setVisibility(false)\n              },\n            })\n          }\n\n          inst.current.update({\n            show: isVisible,\n          })\n        }, [isVisible])\n        React.useEffect(() => () => inst.current.remove(), [])\n\n        return (\n          <Section top spacing style_type=\"divider\">\n            <ToggleButton\n              text=\"Toggle\"\n              variant=\"checkbox\"\n              right\n              checked={isVisible}\n              on_change={({ checked }) => {\n                setVisibility(checked)\n              }}\n            />\n            <Button\n              text=\"Reset\"\n              variant=\"tertiary\"\n              icon=\"reset\"\n              disabled={!(errorA || errorB)}\n              on_click={() => {\n                setErrorA(null)\n                setErrorB(null)\n              }}\n            />\n          </Section>\n        )\n      }\n\n      return <UpdateDemo />\n    }}\n  </ComponentBox>\n)\n\nexport const GlobalStatusInfoExample1 = () => (\n  <ComponentBox hidePreview hideToolbar>\n    <GlobalStatus id=\"other-global-status\" />\n  </ComponentBox>\n)\n\nexport const GlobalStatusInfoExample2 = () => (\n  <ComponentBox hidePreview hideToolbar>\n    <GlobalStatus id=\"other-global-status\" />\n    <Input globalStatus={{ id: 'other-global-status' }} />\n  </ComponentBox>\n)\n\nexport const GlobalStatusInfoExample3 = () => (\n  <ComponentBox hidePreview hideToolbar>\n    <GlobalStatus id=\"other-global-status\" />\n    <Provider\n      formElement={{ globalStatus: { id: 'other-global-status' } }}\n    >\n      <Input status=\"Message\" />\n    </Provider>\n  </ComponentBox>\n)\n\nexport const GlobalStatusInfoExampleManipulate1 = () => (\n  <ComponentBox hidePreview hideToolbar>\n    {() => {\n      // 1. Update / extend the the status like so:\n\n      const statusOne = GlobalStatus.create({\n        id: 'other-global-status', // or main\n        status_id: 'custom-id-1',\n        text: 'New Text',\n        item: 'Item from status #1',\n        title: 'New Title',\n        show: true,\n      })\n\n      // 2. and removes \"custom-id-1\" again if needed\n\n      statusOne.update({\n        text: 'Updated Text',\n      })\n\n      // 3. and removes \"custom-id-1\" again if needed\n      statusOne.remove()\n\n      return <GlobalStatus id=\"other-global-status\" />\n    }}\n  </ComponentBox>\n)\n\nexport const GlobalStatusInfoExampleManipulate2 = () => (\n  <ComponentBox hidePreview hideToolbar>\n    {/* 1. Place it under the header bar */}\n    <GlobalStatus text=\"Optional default text\" />\n    {/* 2. later on, you can show a message */}\n    <GlobalStatus.Add\n      id=\"custom-id\"\n      status_id=\"custom-id-1\"\n      title=\"New title\"\n      text=\"First long info text ...\"\n      item=\"Item from status #1\"\n      on_close={({ status_id }) => {\n        console.log('on_close', status_id)\n      }}\n    />\n    {/* 3. and remove it again */}\n    <GlobalStatus.Remove id=\"custom-id\" status_id=\"custom-id-1\" />\n  </ComponentBox>\n)\n\nexport const GlobalStatusInfoExampleManipulate3 = () => (\n  <ComponentBox hidePreview hideToolbar>\n    {/* 1. Place it somewhere in your application */}\n    <GlobalStatus id=\"custom-status\" />\n    {/* 2. later on, you can show a message */}\n    <GlobalStatus.Add\n      id=\"custom-status\"\n      status_id=\"custom-id-1\"\n      title=\"New title\"\n      text=\"First long info text ...\"\n      item=\"Item from status #1\"\n      on_close={({ status_id }) => {\n        console.log('on_close', status_id)\n      }}\n    />\n    {/* 3. and remove it again */}\n    <GlobalStatus.Remove id=\"custom-status\" status_id=\"custom-id-1\" />\n  </ComponentBox>\n)\n\nexport const GlobalStatusExampleControllers = () => (\n  <ComponentBox hidePreview hideToolbar>\n    {/* Place the status wherever you have to.*/}\n    <GlobalStatus id=\"custom-id\" />\n    {/* Manipulate the status later on. Every property is optional.*/}\n    <GlobalStatus.Add\n      id=\"custom-id\"\n      status_id=\"status-1\"\n      item=\"Item #1\"\n      text=\"New Text\"\n      on_close={({ status_id }) => {\n        console.log('on_close', status_id)\n      }}\n    />\n    <GlobalStatus.Add\n      id=\"custom-id\"\n      status_id=\"status-2\"\n      item=\"Item #2\"\n      text=\"New Text\"\n      title=\"New Title\"\n      on_close={({ status_id }) => {\n        console.log('on_close', status_id)\n      }}\n    />\n    <GlobalStatus.Add\n      id=\"custom-id\"\n      status_id=\"status-3\"\n      item=\"Item #3\"\n      text=\"Text #3\"\n      on_close={({ status_id }) => {\n        console.log('on_close', status_id)\n      }}\n    />\n    {/* or update the status.*/}\n    <GlobalStatus.Update id=\"custom-id\" text=\"text\" />\n    {/* Later you can remove a resolved item.*/}\n    <GlobalStatus.Remove id=\"custom-id\" status_id=\"status-3\" />\n  </ComponentBox>\n)\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","h3","p","strong","code","_provideComponents","components","_jsxs","_Fragment","children","_jsx","GlobalStatusError","GlobalStatusInfo","GlobalStatusWarning","GlobalStatusSuccess","GlobalStatusCoupling","GlobalStatusUpdate","GlobalStatusAddRemoveItems","GlobalStatusScrolling","wrapper","MDXLayout","ComponentBox","noInline","hideCode","GlobalStatusInfoExample1","hidePreview","hideToolbar","GlobalStatusInfoExample2","GlobalStatusInfoExample3","GlobalStatusInfoExampleManipulate1","GlobalStatusInfoExampleManipulate2","GlobalStatusInfoExampleManipulate3","GlobalStatusExampleControllers"],"sourceRoot":""}