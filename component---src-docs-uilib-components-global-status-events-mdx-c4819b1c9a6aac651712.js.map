{"version":3,"file":"component---src-docs-uilib-components-global-status-events-mdx-c4819b1c9a6aac651712.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/global-status/GlobalStatusDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/./src/docs/uilib/components/global-status/events.mdx"],"sourcesContent":["/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const GlobalStatusProperties: PropertiesTableProps = {\n  id: {\n    doc: 'the main ID. Defaults to `main`.',\n    type: 'string',\n    status: 'optional',\n  },\n  title: {\n    doc: 'the title appears as a part of the status content. Defaults to `En feil har skjedd`.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  text: {\n    doc: 'the text appears as the status content. Besides plain text, you can send in a React component as well. Defaults to `null`.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  children: {\n    doc: 'the text appears as the status content. Besides plain text, you can send in a React component as well. Defaults to `null`.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  items: {\n    doc: 'the items (list items) appear as a part of the status content. you can both use an JSON array, or a vanilla array with a string or an object content. See **Item Object** example below.',\n    type: 'Array<GlobalStatusItem>',\n    status: 'optional',\n  },\n  icon: {\n    doc: 'the icon shown before the status title. Defaults to `exclamation`.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  state: {\n    doc: 'defines the visual appearance of the status. There are four main statuses `error`, `warning`, `info` and `success`. The default status is `error`.',\n    type: ['error', 'info', 'warning', 'success'],\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'the icon size of the title icon shows. Defaults to `medium`.',\n    type: 'string',\n    status: 'optional',\n  },\n  show: {\n    doc: 'set to `true` or `false` to manually make the global status visible. Defaults to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  autoclose: {\n    doc: 'set to `true` to automatically close the global status if there are no more left items in the provider stack. Defaults to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  autoscroll: {\n    doc: 'set to `true` to automatically scroll the page to the appeared global status. Defaults to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  no_animation: {\n    doc: 'set to `true` to disable the show/hide/slide/fade/grow/shrink animation. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  delay: {\n    doc: 'defines the delay on how long the automated visibility should wait before it appears to the user. Defaults to `200ms`.',\n    type: ['number', 'string'],\n    status: 'optional',\n  },\n  hide_close_button: {\n    doc: 'set to `true` if the close button should be hidden for the user. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  close_text: {\n    doc: 'text of the close button. Defaults to `Lukk`.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  status_anchor_text: {\n    doc: 'defines the anchor text showing up after every item, in case there is a `status_id` defined. Defaults to `Gå til %s`. The `%s` represents the optional and internal handled label addition.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  omit_set_focus: {\n    doc: 'set to `true` to omit setting the focus during visibility. Defaults to `false`. Additionally, there is `omit_set_focus_on_update` which is set to `true` by default.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  omit_set_focus_on_update: {\n    doc: 'set to `true` to omit setting the focus during update. Defaults to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const GlobalStatusAdvancedItemProperties: PropertiesTableProps = {\n  text: {\n    doc: 'the text appears as the status content. Beside plain text, you can send in a React component as well.',\n    type: 'string',\n    status: 'required',\n  },\n  status_id: {\n    doc: 'defines an unique ID so the message can be either updated or removed individual.',\n    type: 'string',\n    status: 'required',\n  },\n  status_anchor_url: {\n    doc: 'Use `status_anchor_url={true}` to enable the go-to link, defined as a url hash using the `status_id`. Or provide it with an actual url: `status_anchor_url=\"https://\"`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_anchor_text: {\n    doc: 'defines the anchor text showing up after every item. Defaults to `Gå til %s`. The `%s` represents the optional and internal handled label addition.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_anchor_label: {\n    doc: 'adds an additional text to the anchor (replaces `%s`), showing up after every item. Is used by default by other form components, if they have an `label`.',\n    type: 'string',\n    status: 'optional',\n  },\n}\n\nexport const GlobalStatusControllerProperties: PropertiesTableProps = {\n  id: {\n    doc: 'the main ID. Defaults to `main`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_id: {\n    doc: 'define a new stack ID so you can remove it with the same ID later on. Defaults to `null`.',\n    type: 'string',\n    status: 'optional',\n  },\n  remove_on_unmount: {\n    doc: 'set to `true` if you want that the component `<GlobalStatus.Add remove_on_unmount={true} ... />` should automatically remove the stacked status from the target **GlobalStatus** on component unmount. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n\nexport const GlobalStatusConfigurationObjectProperties: PropertiesTableProps =\n  {\n    id: {\n      doc: 'the main ID. Defaults to `main`.',\n      type: 'string',\n      status: 'optional',\n    },\n    message: {\n      doc: 'the text appears as the status content. Besides plain text, you can send in a React component as well. Defaults to `null`.',\n      type: 'React.ReactNode',\n      status: 'optional',\n    },\n  }\n\nexport const GlobalStatusEvents: PropertiesTableProps = {\n  on_open: {\n    doc: 'gets triggered the first time the GlobalStatus appears on the screen. In other words, it has to have been hidden before. Returns `{ id, status_id, ...properties }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_show: {\n    doc: 'gets triggered for the first time and for every new content update the GlobalStatus gets. Returns `{ id, status_id, ...properties }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_close: {\n    doc: 'gets triggered once the GlobalStatus disappears from the screen. Works only if `no_animation` is not `true`. Returns `{ id, status_id, ...properties }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_hide: {\n    doc: 'gets triggered once the GlobalStatus is getting closed/hidden by the user. Returns `{ id, status_id, ...properties }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_adjust: {\n    doc: 'gets triggered once the GlobalStatus is getting new content by the user. Returns `{ id, status_id, ...properties }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {GlobalStatusEvents} from '@dnb/eufemia/src/components/global-status/GlobalStatusDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Events\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: GlobalStatusEvents\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["Th","Tr","GlobalStatusProperties","id","doc","type","status","title","text","children","items","icon","state","icon_size","show","autoclose","autoscroll","no_animation","delay","hide_close_button","close_text","status_anchor_text","omit_set_focus","omit_set_focus_on_update","skeleton","GlobalStatusAdvancedItemProperties","status_id","status_anchor_url","status_anchor_label","GlobalStatusControllerProperties","remove_on_unmount","GlobalStatusConfigurationObjectProperties","message","GlobalStatusEvents","on_open","on_show","on_close","on_hide","on_adjust","Td","_createMdxContent","props","_components","Object","assign","h2","_provideComponents","components","_jsxs","_Fragment","_jsx","PropertiesTable","wrapper","MDXLayout"],"sourceRoot":""}