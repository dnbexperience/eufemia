{"version":3,"file":"component---src-docs-uilib-components-global-status-info-mdx-2d2e03d11117c05f59a4.js","mappings":"sLAIA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,KAAM,OACNC,EAAG,IACHC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,OAAQ,SACRC,GAAI,OACHC,EAAAA,EAAAA,MAAsBb,EAAMc,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKjB,EAAYG,GAAI,CAC9Ba,SAAU,gBACR,MAAMF,EAAAA,EAAAA,MAAMd,EAAYI,EAAG,CAC7BY,SAAU,CAAC,qLAAqLC,EAAAA,EAAAA,KAAKjB,EAAYK,KAAM,CACrNW,SAAU,iBACR,kDAAkDC,EAAAA,EAAAA,KAAKjB,EAAYM,EAAG,CACxEY,KAAM,gCACNF,SAAU,eACR,kHAAkHC,EAAAA,EAAAA,KAAKjB,EAAYK,KAAM,CAC3IW,SAAU,iBACR,OACF,MAAMC,EAAAA,EAAAA,KAAKjB,EAAYO,GAAI,CAC7BS,SAAU,gCACR,MAAMF,EAAAA,EAAAA,MAAMd,EAAYQ,GAAI,CAC9BQ,SAAU,CAAC,MAAMF,EAAAA,EAAAA,MAAMd,EAAYS,GAAI,CACrCO,SAAU,CAAC,WAAWC,EAAAA,EAAAA,KAAKjB,EAAYU,OAAQ,CAC7CM,SAAU,eACR,mBAAmBC,EAAAA,EAAAA,KAAKjB,EAAYK,KAAM,CAC5CW,SAAU,SACR,KAAKC,EAAAA,EAAAA,KAAKjB,EAAYU,OAAQ,CAChCM,SAAU,iBACR,oBACF,MAAMF,EAAAA,EAAAA,MAAMd,EAAYS,GAAI,CAC9BO,SAAU,CAAC,sDAAsDC,EAAAA,EAAAA,KAAKjB,EAAYU,OAAQ,CACxFM,SAAU,iBACR,OACF,MAAMC,EAAAA,EAAAA,KAAKjB,EAAYS,GAAI,CAC7BO,SAAU,8GACR,MAAMF,EAAAA,EAAAA,MAAMd,EAAYS,GAAI,CAC9BO,SAAU,CAAC,wEAAwEC,EAAAA,EAAAA,KAAKjB,EAAYK,KAAM,CACxGW,SAAU,iBACR,wBACF,QACF,MAAMC,EAAAA,EAAAA,KAAKjB,EAAYO,GAAI,CAC7BS,SAAU,4BACR,MAAMF,EAAAA,EAAAA,MAAMd,EAAYI,EAAG,CAC7BY,SAAU,CAAC,oCAAoCC,EAAAA,EAAAA,KAAKjB,EAAYU,OAAQ,CACtEM,SAAU,QACR,KAAKC,EAAAA,EAAAA,KAAKjB,EAAYK,KAAM,CAC9BW,SAAU,iBACR,kHACF,MAAMC,EAAAA,EAAAA,KAAKE,EAAAA,GAA0B,CAAC,GAAI,MAAMF,EAAAA,EAAAA,KAAKjB,EAAYO,GAAI,CACvES,SAAU,oBACR,MAAMF,EAAAA,EAAAA,MAAMd,EAAYW,GAAI,CAC9BK,SAAU,CAAC,MAAMF,EAAAA,EAAAA,MAAMd,EAAYS,GAAI,CACrCO,SAAU,CAAC,QAAQC,EAAAA,EAAAA,KAAKjB,EAAYK,KAAM,CACxCW,SAAU,iBACR,gFAAgFC,EAAAA,EAAAA,KAAKjB,EAAYK,KAAM,CACzGW,SAAU,SACR,iBACF,MAAMF,EAAAA,EAAAA,MAAMd,EAAYS,GAAI,CAC9BO,SAAU,CAAC,yGAAyGC,EAAAA,EAAAA,KAAKjB,EAAYM,EAAG,CACtIY,KAAM,0BACNF,SAAU,UACR,sBAAsBC,EAAAA,EAAAA,KAAKjB,EAAYK,KAAM,CAC/CW,SAAU,SACR,gCAAgCC,EAAAA,EAAAA,KAAKjB,EAAYM,EAAG,CACtDY,KAAM,gCACNF,SAAU,eACR,6CAA6CC,EAAAA,EAAAA,KAAKjB,EAAYK,KAAM,CACtEW,SAAU,iBACR,0BAA0BC,EAAAA,EAAAA,KAAKjB,EAAYM,EAAG,CAChDY,KAAM,mEACNF,UAAUC,EAAAA,EAAAA,KAAKjB,EAAYK,KAAM,CAC/BW,SAAU,mBAEV,aACF,QACF,MAAMC,EAAAA,EAAAA,KAAKG,EAAAA,GAA0B,CAAC,GAAI,MAAMN,EAAAA,EAAAA,MAAMd,EAAYI,EAAG,CACvEY,SAAU,CAAC,6CAA6CC,EAAAA,EAAAA,KAAKjB,EAAYM,EAAG,CAC1EY,KAAM,2CACNF,SAAU,aACR,8CAA8CC,EAAAA,EAAAA,KAAKjB,EAAYK,KAAM,CACvEW,SAAU,iBACR,+CACF,MAAMC,EAAAA,EAAAA,KAAKI,EAAAA,GAA0B,CAAC,GAAI,MAAMJ,EAAAA,EAAAA,KAAKjB,EAAYO,GAAI,CACvES,SAAU,qBACR,MAAMF,EAAAA,EAAAA,MAAMd,EAAYI,EAAG,CAC7BY,SAAU,CAAC,kFAAkFC,EAAAA,EAAAA,KAAKjB,EAAYM,EAAG,CAC/GY,KAAM,gCACNF,SAAU,eACR,iFACF,MAAMF,EAAAA,EAAAA,MAAMd,EAAYI,EAAG,CAC7BY,SAAU,EAACC,EAAAA,EAAAA,KAAKjB,EAAYU,OAAQ,CAClCM,SAAU,QACR,2BAA2BC,EAAAA,EAAAA,KAAKjB,EAAYK,KAAM,CACpDW,SAAU,cACR,iDACF,MAAMC,EAAAA,EAAAA,KAAKjB,EAAYO,GAAI,CAC7BS,SAAU,uCACR,MAAMC,EAAAA,EAAAA,KAAKjB,EAAYI,EAAG,CAC5BY,SAAU,kGACR,MAAMF,EAAAA,EAAAA,MAAMd,EAAYQ,GAAI,CAC9BQ,SAAU,CAAC,MAAMC,EAAAA,EAAAA,KAAKjB,EAAYS,GAAI,CACpCO,SAAU,0DACR,QACF,MAAMC,EAAAA,EAAAA,KAAKE,EAAAA,GAA0B,CAAC,GAAI,MAAML,EAAAA,EAAAA,MAAMd,EAAYQ,GAAI,CACxEc,MAAO,IACPN,SAAU,CAAC,MAAMC,EAAAA,EAAAA,KAAKjB,EAAYS,GAAI,CACpCO,SAAU,mFACR,QACF,MAAMC,EAAAA,EAAAA,KAAKM,EAAAA,GAAoC,CAAC,GAAI,MAAMN,EAAAA,EAAAA,KAAKjB,EAAYO,GAAI,CACjFS,SAAU,QACR,MAAMC,EAAAA,EAAAA,KAAKO,EAAAA,GAAoC,CAAC,GAAI,MAAMV,EAAAA,EAAAA,MAAMd,EAAYI,EAAG,CACjFY,SAAU,CAAC,8BAA8BC,EAAAA,EAAAA,KAAKjB,EAAYK,KAAM,CAC9DW,SAAU,iBACR,2CACF,MAAMC,EAAAA,EAAAA,KAAKQ,EAAAA,GAAoC,CAAC,KAExD,CAOA,UANA,SAAoB1B,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAO2B,QAASC,GAAa1B,OAAOC,OAAO,CAAC,GAAGU,EAAAA,EAAAA,MAAsBb,EAAMc,YAC3E,OAAOc,GAAYV,EAAAA,EAAAA,KAAKU,EAAW1B,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DiB,UAAUC,EAAAA,EAAAA,KAAKnB,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,2aCpHO,MAAM6B,EAAoBA,KAAAX,EAAAA,EAAAA,KAAAY,EAAAA,EAAA,oCAAAb,SAAA,iVAqBpBc,EAAmBA,KAAAb,EAAAA,EAAAA,KAAAY,EAAAA,EAAA,yCAAAb,SAAA,yXAgBnBe,EAAsBA,KAAAd,EAAAA,EAAAA,KAAAY,EAAAA,EAAA,CAAAb,SAAA,kRAetBgB,EAAsBA,KAAAf,EAAAA,EAAAA,KAAAY,EAAAA,EAAA,CAAAb,SAAA,mQAetBiB,EAAuBA,KAAAhB,EAAAA,EAAAA,KAAAY,EAAAA,EAAA,CAAAK,UAAA,EAAAlB,SAAA,kgBAyBvBmB,EAA6BA,KAAAlB,EAAAA,EAAAA,KAAAY,EAAAA,EAAA,CAAAO,UAAA,EAAAF,UAAA,EAAAlB,SAAA,6+CAkE7BqB,EAAwBA,KAAApB,EAAAA,EAAAA,KAAAY,EAAAA,EAAA,CAAAO,UAAA,EAAApB,SAAA,gPAcxBsB,EAAqBA,KAAArB,EAAAA,EAAAA,KAAAY,EAAAA,EAAA,CAAAO,UAAA,EAAAF,UAAA,EAAAlB,SAAA,61FA4IrBG,EAA2BA,KAAAF,EAAAA,EAAAA,KAAAY,EAAAA,EAAA,CAAAU,aAAA,EAAAC,aAAA,EAAAxB,SAAA,gDAM3BI,EAA2BA,KAAAH,EAAAA,EAAAA,KAAAY,EAAAA,EAAA,CAAAU,aAAA,EAAAC,aAAA,EAAAxB,SAAA,2HAO3BK,EAA2BA,KAAAJ,EAAAA,EAAAA,KAAAY,EAAAA,EAAA,CAAAU,aAAA,EAAAC,aAAA,EAAAxB,SAAA,sMAW3BO,EAAqCA,KAAAN,EAAAA,EAAAA,KAAAY,EAAAA,EAAA,CAAAU,aAAA,EAAAC,aAAA,EAAAN,UAAA,EAAAlB,SAAA,6eA4BrCQ,EAAqCA,KAAAP,EAAAA,EAAAA,KAAAY,EAAAA,EAAA,CAAAU,aAAA,EAAAC,aAAA,EAAAxB,SAAA,2dAoBrCS,EAAqCA,KAAAR,EAAAA,EAAAA,KAAAY,EAAAA,EAAA,CAAAU,aAAA,EAAAC,aAAA,EAAAxB,SAAA,keAoBrCyB,EAAiCA,KAAAxB,EAAAA,EAAAA,KAAAY,EAAAA,EAAA,CAAAU,aAAA,EAAAC,aAAA,EAAAxB,SAAA,q5B","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/global-status/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/global-status/Examples.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {GlobalStatusInfoExample1, GlobalStatusInfoExample2, GlobalStatusInfoExample3, GlobalStatusInfoExampleManipulate1, GlobalStatusInfoExampleManipulate2, GlobalStatusInfoExampleManipulate3} from 'Docs/uilib/components/global-status/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The GlobalStatus is a complex component meant for displaying global Application notifications or a summary of a form ( displaying form errors, messages etc. ).\\nBy default, the \", _jsx(_components.code, {\n        children: \"GlobalStatus\"\n      }), \" is automatically connected together with the \", _jsx(_components.a, {\n        href: \"/uilib/components/form-status\",\n        children: \"FormStatus\"\n      }), \" component. This means, that every form component showing a status, will send the status message along to the \", _jsx(_components.code, {\n        children: \"GlobalStatus\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"FormStatus default behavior\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Once a \", _jsx(_components.strong, {\n          children: \"FormStatus\"\n        }), \" is shown, the \", _jsx(_components.code, {\n          children: \"main\"\n        }), \" \", _jsx(_components.strong, {\n          children: \"GlobalStatus\"\n        }), \" will show up.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The page will scroll (if needed) to the dedicated \", _jsx(_components.strong, {\n          children: \"GlobalStatus\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Form components will send along both the status text and its label to show a good and accessible summary.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Screen reader uses will automatically hear the whole content of the \", _jsx(_components.code, {\n          children: \"GlobalStatus\"\n        }), \" once it shows up.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Several Global statuses\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Normally, you only want to have \", _jsx(_components.strong, {\n        children: \"one\"\n      }), \" \", _jsx(_components.code, {\n        children: \"GlobalStatus\"\n      }), \" inside your application. But you can have several in parallel. But make sure you give every other a new ID:\"]\n    }), \"\\n\", _jsx(GlobalStatusInfoExample1, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Where to put it\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"GlobalStatus\"\n        }), \" component should be positioned right under the header. By default, it uses \", _jsx(_components.code, {\n          children: \"main\"\n        }), \" as the ID.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Or as a secondary summary of errors in a submit form. Keep in mind, by default, form components like \", _jsx(_components.a, {\n          href: \"/uilib/components/input\",\n          children: \"Input\"\n        }), \" are using the ID \", _jsx(_components.code, {\n          children: \"main\"\n        }), \". To make sure the build in \", _jsx(_components.a, {\n          href: \"/uilib/components/form-status\",\n          children: \"FormStatus\"\n        }), \" is sending along the message to another \", _jsx(_components.code, {\n          children: \"GlobalStatus\"\n        }), \", you have to set the \", _jsx(_components.a, {\n          href: \"/uilib/components/global-status/properties/#configuration-object\",\n          children: _jsx(_components.code, {\n            children: \"globalStatus\"\n          })\n        }), \", like:\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(GlobalStatusInfoExample2, {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"But you can also make use of the Eufemia \", _jsx(_components.a, {\n        href: \"/uilib/usage/customisation/provider-info\",\n        children: \"Provider\"\n      }), \" where you will be able to send along the \", _jsx(_components.code, {\n        children: \"globalStatus\"\n      }), \" the underlying/wrapped components, like:\"]\n    }), \"\\n\", _jsx(GlobalStatusInfoExample3, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Manually updates\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Besides the automated connection between the error states of form components (\", _jsx(_components.a, {\n        href: \"/uilib/components/form-status\",\n        children: \"FormStatus\"\n      }), \"), you can update messages from everywhere in your application at any time:\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"NB:\"\n      }), \" The GlobalStatus will \", _jsx(_components.code, {\n        children: \"autoclose\"\n      }), \" by default, once all messages are removed.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"JavaScript (interceptor situation)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can access and manipulate an existing GlobalStatus from outside of the React render tree.\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Given you have already defined a GlobalStatus in JSX:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(GlobalStatusInfoExample1, {}), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Then you can control it from within a JavaScript context whenever you need to:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(GlobalStatusInfoExampleManipulate1, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"JSX\"\n    }), \"\\n\", _jsx(GlobalStatusInfoExampleManipulate2, {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you need an additional \", _jsx(_components.code, {\n        children: \"GlobalStatus\"\n      }), \", define a custom ID (custom-status):\"]\n    }), \"\\n\", _jsx(GlobalStatusInfoExampleManipulate3, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport {\n  GlobalStatus,\n  Button,\n  Input,\n  Section,\n  ToggleButton,\n} from '@dnb/eufemia/src'\nimport { Provider } from '@dnb/eufemia/src/shared'\n\nexport const GlobalStatusError = () => (\n  <ComponentBox data-visual-test=\"global-status\">\n    <GlobalStatus\n      title=\"Custom Title\"\n      text=\"Failure text\"\n      items={[\n        {\n          text: 'List item',\n          status_anchor_url: '/uilib/components/global-status',\n          status_anchor_label: 'eksempel',\n        },\n      ]}\n      show={true}\n      autoscroll={false}\n      no_animation={true}\n      omit_set_focus={true}\n      id=\"demo-1\"\n    />\n  </ComponentBox>\n)\n\nexport const GlobalStatusInfo = () => (\n  <ComponentBox data-visual-test=\"global-status-info\">\n    <GlobalStatus\n      state=\"info\"\n      title=\"Custom info title ...\"\n      text=\"Long info nisl tempus hendrerit tortor dapibus nascetur taciti porta risus cursus fusce platea enim curabitur proin nibh ut luctus magnis metus\"\n      items={['Status text 1', 'Status text 2']}\n      show={true}\n      autoscroll={false}\n      no_animation={true}\n      omit_set_focus={true}\n      id=\"demo-4\"\n    />\n  </ComponentBox>\n)\n\nexport const GlobalStatusWarning = () => (\n  <ComponentBox>\n    <GlobalStatus\n      state=\"warning\"\n      title=\"Custom warning title ...\"\n      text=\"A string of text providing a warning or semi-urgent message of some kind to the user\"\n      show={true}\n      autoscroll={false}\n      no_animation={true}\n      omit_set_focus={true}\n      id=\"demo-5\"\n    />\n  </ComponentBox>\n)\n\nexport const GlobalStatusSuccess = () => (\n  <ComponentBox>\n    <GlobalStatus\n      state=\"success\"\n      title=\"Custom success title ...\"\n      text=\"A string of text providing a success message of some kind to the user\"\n      show={true}\n      autoscroll={false}\n      no_animation={true}\n      omit_set_focus={true}\n      id=\"demo-6\"\n    />\n  </ComponentBox>\n)\n\nexport const GlobalStatusCoupling = () => (\n  <ComponentBox>\n    {() => {\n      const InputWithError = () => {\n        const [errorMessage, setErrorMessage] = React.useState(null)\n        return (\n          <Input\n            label=\"Input\"\n            placeholder=\"Write less than 5 chars and dismiss the focus to show the GlobalStatus ...\"\n            stretch\n            status={errorMessage}\n            on_blur={({ value }) => {\n              setErrorMessage(\n                value.length <= 4 ? 'With a message shown' : null,\n              )\n            }}\n            globalStatus={{ id: 'main-status' }}\n          />\n        )\n      }\n      return <InputWithError />\n    }}\n  </ComponentBox>\n)\n\nexport const GlobalStatusAddRemoveItems = () => (\n  <ComponentBox hideCode>\n    {() => {\n      function AddRemoveItems() {\n        const [count, toggleUpdateStatus] = React.useState(0)\n        return (\n          <>\n            <GlobalStatus\n              id=\"custom-status\"\n              autoscroll={false}\n              on_close={() => toggleUpdateStatus(0)}\n              on_hide={() => toggleUpdateStatus(0)}\n            />\n            <Button\n              text={'Show step #' + count}\n              on_click={() => {\n                toggleUpdateStatus(count + 1)\n                if (count >= 3) {\n                  toggleUpdateStatus(0)\n                }\n              }}\n              top=\"small\"\n            />\n            {count === 1 && (\n              <>\n                <GlobalStatus.Add\n                  id=\"custom-status\"\n                  status_id=\"custom-id-1\"\n                  title=\"New title\"\n                  text=\"First long info text ...\"\n                  item=\"Item from status #1\"\n                  on_close={({ status_id }) => {\n                    console.log('on_close 1', status_id)\n                  }}\n                />\n                <GlobalStatus.Add\n                  id=\"custom-status\"\n                  status_id=\"custom-id-2\"\n                  text=\"Second long info text ...\"\n                  item=\"Item from status #2\"\n                  on_close={({ status_id }) => {\n                    console.log('on_close 2', status_id)\n                  }}\n                />\n              </>\n            )}\n            {count === 2 && (\n              <GlobalStatus.Remove\n                id=\"custom-status\"\n                status_id=\"custom-id-2\"\n              />\n            )}\n            {count === 3 && (\n              <GlobalStatus.Remove\n                id=\"custom-status\"\n                status_id=\"custom-id-1\"\n              />\n            )}\n          </>\n        )\n      }\n      return <AddRemoveItems />\n    }}\n  </ComponentBox>\n)\n\nexport const GlobalStatusScrolling = () => (\n  <ComponentBox hideCode>\n    <Button\n      text=\"Scroll to main GlobalStatus\"\n      on_click={() => {\n        GlobalStatus.Update({\n          id: 'main-status',\n          text: 'Dui consectetur viverra aenean vestibulum ac tristique sem ligula condimentum',\n        })\n      }}\n    />\n  </ComponentBox>\n)\n\nexport const GlobalStatusUpdate = () => (\n  <ComponentBox hideCode>\n    {() => {\n      const Context = React.createContext(null)\n\n      const UpdateDemo = () => {\n        const [errorA, setErrorA] = React.useState(false)\n        const [errorB, setErrorB] = React.useState(false)\n\n        const [isVisible, setVisibility] = React.useState(false)\n\n        return (\n          <Context.Provider\n            value={{\n              errorA,\n              errorB,\n              setErrorA,\n              setErrorB,\n              isVisible,\n              setVisibility,\n            }}\n          >\n            <UpdateDemoStatus />\n            <UpdateDemoTools />\n          </Context.Provider>\n        )\n      }\n\n      const UpdateDemoStatus = () => {\n        const { errorA, errorB, setErrorA, setErrorB } =\n          React.useContext(Context)\n\n        return (\n          <>\n            <GlobalStatus\n              title=\"Custom Title\"\n              text=\"Failure text\"\n              id=\"demo-2\"\n            />\n            <Input\n              top\n              right\n              label=\"Label A\"\n              placeholder=\"Placeholder A\"\n              status={errorA}\n              globalStatus={{ id: 'demo-2' }}\n              on_change={({ value }) => {\n                setErrorA(value)\n              }}\n            />\n            <Input\n              top\n              label=\"Label B\"\n              placeholder=\"Placeholder B\"\n              status={errorB}\n              globalStatus={{ id: 'demo-2' }}\n              on_change={({ value }) => {\n                setErrorB(value)\n              }}\n            />\n          </>\n        )\n      }\n\n      const UpdateDemoTools = () => {\n        const {\n          errorA,\n          errorB,\n          setErrorA,\n          setErrorB,\n          isVisible,\n          setVisibility,\n        } = React.useContext(Context)\n\n        // Only to demonstrate the usage of an interceptor situation\n        const inst = React.useRef(null)\n        React.useEffect(() => {\n          if (!inst.current) {\n            inst.current = GlobalStatus.create({\n              id: 'demo-2',\n              title: 'New Title',\n              text: 'New Text',\n              status_id: 'custom-item',\n              show: false,\n            })\n\n            inst.current.update({\n              on_show: () => {\n                console.log('on_show')\n                if (!isVisible) {\n                  setVisibility(true)\n                }\n              },\n              on_hide: () => {\n                console.log('on_hide')\n                setVisibility(false)\n              },\n              on_close: () => {\n                console.log('on_close')\n                setVisibility(false)\n              },\n            })\n          }\n\n          inst.current.update({\n            show: isVisible,\n          })\n        }, [isVisible])\n        React.useEffect(() => () => inst.current.remove(), [])\n\n        return (\n          <Section top spacing style_type=\"divider\">\n            <ToggleButton\n              text=\"Toggle\"\n              variant=\"checkbox\"\n              right\n              checked={isVisible}\n              on_change={({ checked }) => {\n                setVisibility(checked)\n              }}\n            />\n            <Button\n              text=\"Reset\"\n              variant=\"tertiary\"\n              icon=\"reset\"\n              disabled={!(errorA || errorB)}\n              on_click={() => {\n                setErrorA(null)\n                setErrorB(null)\n              }}\n            />\n          </Section>\n        )\n      }\n\n      return <UpdateDemo />\n    }}\n  </ComponentBox>\n)\n\nexport const GlobalStatusInfoExample1 = () => (\n  <ComponentBox hidePreview hideToolbar>\n    <GlobalStatus id=\"other-global-status\" />\n  </ComponentBox>\n)\n\nexport const GlobalStatusInfoExample2 = () => (\n  <ComponentBox hidePreview hideToolbar>\n    <GlobalStatus id=\"other-global-status\" />\n    <Input globalStatus={{ id: 'other-global-status' }} />\n  </ComponentBox>\n)\n\nexport const GlobalStatusInfoExample3 = () => (\n  <ComponentBox hidePreview hideToolbar>\n    <GlobalStatus id=\"other-global-status\" />\n    <Provider\n      formElement={{ globalStatus: { id: 'other-global-status' } }}\n    >\n      <Input status=\"Message\" />\n    </Provider>\n  </ComponentBox>\n)\n\nexport const GlobalStatusInfoExampleManipulate1 = () => (\n  <ComponentBox hidePreview hideToolbar>\n    {() => {\n      // 1. Update / extend the the status like so:\n\n      const statusOne = GlobalStatus.create({\n        id: 'other-global-status', // or main\n        status_id: 'custom-id-1',\n        text: 'New Text',\n        item: 'Item from status #1',\n        title: 'New Title',\n        show: true,\n      })\n\n      // 2. and removes \"custom-id-1\" again if needed\n\n      statusOne.update({\n        text: 'Updated Text',\n      })\n\n      // 3. and removes \"custom-id-1\" again if needed\n      statusOne.remove()\n\n      return <GlobalStatus id=\"other-global-status\" />\n    }}\n  </ComponentBox>\n)\n\nexport const GlobalStatusInfoExampleManipulate2 = () => (\n  <ComponentBox hidePreview hideToolbar>\n    {/* 1. Place it under the header bar */}\n    <GlobalStatus text=\"Optional default text\" />\n    {/* 2. later on, you can show a message */}\n    <GlobalStatus.Add\n      id=\"custom-id\"\n      status_id=\"custom-id-1\"\n      title=\"New title\"\n      text=\"First long info text ...\"\n      item=\"Item from status #1\"\n      on_close={({ status_id }) => {\n        console.log('on_close', status_id)\n      }}\n    />\n    {/* 3. and remove it again */}\n    <GlobalStatus.Remove id=\"custom-id\" status_id=\"custom-id-1\" />\n  </ComponentBox>\n)\n\nexport const GlobalStatusInfoExampleManipulate3 = () => (\n  <ComponentBox hidePreview hideToolbar>\n    {/* 1. Place it somewhere in your application */}\n    <GlobalStatus id=\"custom-status\" />\n    {/* 2. later on, you can show a message */}\n    <GlobalStatus.Add\n      id=\"custom-status\"\n      status_id=\"custom-id-1\"\n      title=\"New title\"\n      text=\"First long info text ...\"\n      item=\"Item from status #1\"\n      on_close={({ status_id }) => {\n        console.log('on_close', status_id)\n      }}\n    />\n    {/* 3. and remove it again */}\n    <GlobalStatus.Remove id=\"custom-status\" status_id=\"custom-id-1\" />\n  </ComponentBox>\n)\n\nexport const GlobalStatusExampleControllers = () => (\n  <ComponentBox hidePreview hideToolbar>\n    {/* Place the status wherever you have to.*/}\n    <GlobalStatus id=\"custom-id\" />\n    {/* Manipulate the status later on. Every property is optional.*/}\n    <GlobalStatus.Add\n      id=\"custom-id\"\n      status_id=\"status-1\"\n      item=\"Item #1\"\n      text=\"New Text\"\n      on_close={({ status_id }) => {\n        console.log('on_close', status_id)\n      }}\n    />\n    <GlobalStatus.Add\n      id=\"custom-id\"\n      status_id=\"status-2\"\n      item=\"Item #2\"\n      text=\"New Text\"\n      title=\"New Title\"\n      on_close={({ status_id }) => {\n        console.log('on_close', status_id)\n      }}\n    />\n    <GlobalStatus.Add\n      id=\"custom-id\"\n      status_id=\"status-3\"\n      item=\"Item #3\"\n      text=\"Text #3\"\n      on_close={({ status_id }) => {\n        console.log('on_close', status_id)\n      }}\n    />\n    {/* or update the status.*/}\n    <GlobalStatus.Update id=\"custom-id\" text=\"text\" />\n    {/* Later you can remove a resolved item.*/}\n    <GlobalStatus.Remove id=\"custom-id\" status_id=\"status-3\" />\n  </ComponentBox>\n)\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","a","h3","ol","li","strong","ul","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","GlobalStatusInfoExample1","GlobalStatusInfoExample2","GlobalStatusInfoExample3","start","GlobalStatusInfoExampleManipulate1","GlobalStatusInfoExampleManipulate2","GlobalStatusInfoExampleManipulate3","wrapper","MDXLayout","GlobalStatusError","ComponentBox","GlobalStatusInfo","GlobalStatusWarning","GlobalStatusSuccess","GlobalStatusCoupling","noInline","GlobalStatusAddRemoveItems","hideCode","GlobalStatusScrolling","GlobalStatusUpdate","hidePreview","hideToolbar","GlobalStatusExampleControllers"],"sourceRoot":""}