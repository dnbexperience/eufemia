"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[48948],{98607:function(e,t,n){n.r(t);var s=n(52322),o=n(45392),i=n(46463);function r(e){const t=Object.assign({h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",em:"em",strong:"strong",a:"a",pre:"pre",p:"p"},(0,o.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{children:"Properties"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Properties"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"id"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," the main ID. Defaults to ",(0,s.jsx)(t.code,{children:"main"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"title"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," the title appears as a part of the status content. Defaults to ",(0,s.jsx)(t.code,{children:"En feil har skjedd"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"text"})," or ",(0,s.jsx)(t.code,{children:"children"})]}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," the text appears as the status content. Besides plain text, you can send in a React component as well. Defaults to ",(0,s.jsx)(t.code,{children:"null"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"items"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," the items (list items) appear as a part of the status content. you can both use an JSON array, or a vanilla array with a string or an object content. See ",(0,s.jsx)(t.strong,{children:"Item Object"})," example below."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"icon"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," the icon shown before the status title. Defaults to ",(0,s.jsx)(t.code,{children:"exclamation"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"state"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," defines the visual appearance of the status. There are four main statuses ",(0,s.jsx)(t.code,{children:"error"}),", ",(0,s.jsx)(t.code,{children:"warning"}),", ",(0,s.jsx)(t.code,{children:"info"})," and ",(0,s.jsx)(t.code,{children:"success"}),". The default status is ",(0,s.jsx)(t.code,{children:"error"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"icon_size"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," the icon size of the title icon shows. Defaults to ",(0,s.jsx)(t.code,{children:"medium"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"show"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," set to ",(0,s.jsx)(t.code,{children:"true"})," or ",(0,s.jsx)(t.code,{children:"false"})," to manually make the global status visible. Defaults to ",(0,s.jsx)(t.code,{children:"true"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"autoclose"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," set to ",(0,s.jsx)(t.code,{children:"true"})," to automatically close the global status if there are no more left items in the provider stack. Defaults to ",(0,s.jsx)(t.code,{children:"true"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"autoscroll"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," set to ",(0,s.jsx)(t.code,{children:"true"})," to automatically scroll the page to the appeared global status. Defaults to ",(0,s.jsx)(t.code,{children:"true"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"no_animation"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," set to ",(0,s.jsx)(t.code,{children:"true"})," to disable the show/hide/slide/fade/grow/shrink animation. Defaults to ",(0,s.jsx)(t.code,{children:"false"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"delay"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," defines the delay on how long the automated visibility should wait before it appears to the user. Defaults to ",(0,s.jsx)(t.code,{children:"200ms"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"hide_close_button"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," set to ",(0,s.jsx)(t.code,{children:"true"})," if the close button should be hidden for the user. Defaults to ",(0,s.jsx)(t.code,{children:"false"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"close_text"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," text of the close button. Defaults to ",(0,s.jsx)(t.code,{children:"Lukk"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"status_anchor_text"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," defines the anchor text showing up after every item, in case there is a ",(0,s.jsx)(t.code,{children:"status_id"})," defined. Defaults to ",(0,s.jsx)(t.code,{children:"Gå til %s"}),". The ",(0,s.jsx)(t.code,{children:"%s"})," represents the optional and internal handled label addition."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"omit_set_focus"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," set to ",(0,s.jsx)(t.code,{children:"true"})," to omit setting the focus during visibility. Defaults to ",(0,s.jsx)(t.code,{children:"false"}),". Additionally, there is ",(0,s.jsx)(t.code,{children:"omit_set_focus_on_update"})," which is set to ",(0,s.jsx)(t.code,{children:"true"})," by default."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/uilib/layout/space/properties",children:"Space"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," spacing properties like ",(0,s.jsx)(t.code,{children:"top"})," or ",(0,s.jsx)(t.code,{children:"bottom"})," are supported."]})]})]})]}),"\n",(0,s.jsx)(t.h2,{children:"Item Object"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"// simple\nconst items = ['Item #1', 'Item #2']\n\n// advanced\nconst items = [\n  { text: 'Item #1', status_id: 'id-1' },\n  { text: 'Item #2', status_id: 'id-2', status_anchor_url: 'https://' },\n]\n"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Advanced Item Properties"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"text"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(required)"})," the text appears as the status content. Beside plain text, you can send in a React component as well."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"status_id"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(required)"})," defines an unique ID so the message can be either updated or removed individual."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"status_anchor_url"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," Use ",(0,s.jsx)(t.code,{children:"status_anchor_url={true}"})," to enable the go-to link, defined as a url hash using the ",(0,s.jsx)(t.code,{children:"status_id"}),". Or provide it with an actual url: ",(0,s.jsx)(t.code,{children:'status_anchor_url="https://"'}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"status_anchor_text"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," defines the anchor text showing up after every item. Defaults to ",(0,s.jsx)(t.code,{children:"Gå til %s"}),". The ",(0,s.jsx)(t.code,{children:"%s"})," represents the optional and internal handled label addition."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"status_anchor_label"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," adds an additional text to the anchor (replaces ",(0,s.jsx)(t.code,{children:"%s"}),"), showing up after every item. Is used by default by other form components, if they have an ",(0,s.jsx)(t.code,{children:"label"}),"."]})]})]})]}),"\n",(0,s.jsx)(t.h2,{children:"Controllers"}),"\n",(0,s.jsx)(t.p,{children:"In React, you can make use of the helper components, the function as a kind of a controller component.\nThe goal is to update the content (properties/events) of the target GlobalStatus."}),"\n",(0,s.jsx)(i.O9,{}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Controller Properties"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"id"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," the main ID. Defaults to ",(0,s.jsx)(t.code,{children:"main"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"status_id"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," define a new stack ID so you can remove it with the same ID later on. Defaults to ",(0,s.jsx)(t.code,{children:"null"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"remove_on_unmount"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," set to ",(0,s.jsx)(t.code,{children:"true"})," if you want that the component ",(0,s.jsx)(t.code,{children:"<GlobalStatus.Add remove_on_unmount={true} ... />"})," should automatically remove the stacked status from the target ",(0,s.jsx)(t.strong,{children:"GlobalStatus"})," on component unmount. Defaults to ",(0,s.jsx)(t.code,{children:"false"}),"."]})]})]})]}),"\n",(0,s.jsx)(t.h2,{children:"Configuration Object"}),"\n",(0,s.jsxs)(t.p,{children:["This object is used as a representation to configure the GlobalStatus component from other components, using the ",(0,s.jsx)(t.code,{children:"globalStatus"})," property.\nSee ",(0,s.jsx)(t.a,{href:"/uilib/components/autocomplete/properties",children:"Autocomplete"}),", ",(0,s.jsx)(t.a,{href:"/uilib/components/button/properties",children:"Button"}),", ",(0,s.jsx)(t.a,{href:"/uilib/components/input/properties",children:"Input"}),", etc, as examples that use the ",(0,s.jsx)(t.code,{children:"globalStatus"})," property."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"{\n  id: 'global-status-id',\n  message: 'global status message'\n}\n"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Configuration Object Properties"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"id"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," the main ID. Defaults to ",(0,s.jsx)(t.code,{children:"main"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"message"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," the text appears as the status content. Besides plain text, you can send in a React component as well. Defaults to null."]})]})]})]})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,o.ah)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(r,e)})):r(e)}},46463:function(e,t,n){n.d(t,{Am:function(){return f},Hm:function(){return a},NP:function(){return m},O4:function(){return l},O9:function(){return g},Oz:function(){return p},Pe:function(){return x},RV:function(){return b},Ru:function(){return r},Vo:function(){return h},Yz:function(){return j},cQ:function(){return u},kP:function(){return c},tb:function(){return d},ve:function(){return i}});n(2784);var s=n(58469),o=n(52322);const i=()=>(0,o.jsx)(s.Z,{"data-visual-test":"global-status",children:"<GlobalStatus\n  title=\"Custom Title\"\n  text=\"Failure text\"\n  items={[\n    {\n      text: 'List item',\n      status_anchor_url: '/uilib/components/global-status',\n      status_anchor_label: 'eksempel',\n    },\n  ]}\n  show={true}\n  autoscroll={false}\n  no_animation={true}\n  omit_set_focus={true}\n  id=\"demo-1\"\n/>\n"}),r=()=>(0,o.jsx)(s.Z,{"data-visual-test":"global-status-info",children:'<GlobalStatus\n  state="info"\n  title="Custom info title ..."\n  text="Long info nisl tempus hendrerit tortor dapibus nascetur taciti porta risus cursus fusce platea enim curabitur proin nibh ut luctus magnis metus"\n  items={[\'Status text 1\', \'Status text 2\']}\n  show={true}\n  autoscroll={false}\n  no_animation={true}\n  omit_set_focus={true}\n  id="demo-4"\n/>\n'}),l=()=>(0,o.jsx)(s.Z,{children:'<GlobalStatus\n  state="warning"\n  title="Custom warning title ..."\n  text="A string of text providing a warning or semi-urgent message of some kind to the user"\n  show={true}\n  autoscroll={false}\n  no_animation={true}\n  omit_set_focus={true}\n  id="demo-5"\n/>\n'}),d=()=>(0,o.jsx)(s.Z,{children:'<GlobalStatus\n  state="success"\n  title="Custom success title ..."\n  text="A string of text providing a success message of some kind to the user"\n  show={true}\n  autoscroll={false}\n  no_animation={true}\n  omit_set_focus={true}\n  id="demo-6"\n/>\n'}),a=()=>(0,o.jsx)(s.Z,{noInline:!0,children:"const InputWithError = () => {\n  const [errorMessage, setErrorMessage] = React.useState(null)\n  return (\n    <Input\n      label=\"Input\"\n      placeholder=\"Write less than 5 chars and dismiss the focus to show the GlobalStatus ...\"\n      stretch\n      status={errorMessage}\n      on_blur={({ value }) => {\n        setErrorMessage(value.length <= 4 ? 'With a message shown' : null)\n      }}\n      globalStatus={{\n        id: 'main-status',\n      }}\n    />\n  )\n}\nrender(<InputWithError />)\n"}),c=()=>(0,o.jsx)(s.Z,{hideCode:!0,noInline:!0,children:'function AddRemoveItems() {\n  const [count, toggleUpdateStatus] = React.useState(0)\n  return (\n    <>\n      <GlobalStatus\n        id="custom-status"\n        autoscroll={false}\n        on_close={() => toggleUpdateStatus(0)}\n        on_hide={() => toggleUpdateStatus(0)}\n      />\n      <Button\n        text={\'Show step #\' + count}\n        on_click={() => {\n          toggleUpdateStatus(count + 1)\n          if (count >= 3) {\n            toggleUpdateStatus(0)\n          }\n        }}\n        top="small"\n      />\n      {count === 1 && (\n        <>\n          <GlobalStatus.Add\n            id="custom-status"\n            status_id="custom-id-1"\n            title="New title"\n            text="First long info text ..."\n            item="Item from status #1"\n            on_close={({ status_id }) => {\n              console.log(\'on_close 1\', status_id)\n            }}\n          />\n          <GlobalStatus.Add\n            id="custom-status"\n            status_id="custom-id-2"\n            text="Second long info text ..."\n            item="Item from status #2"\n            on_close={({ status_id }) => {\n              console.log(\'on_close 2\', status_id)\n            }}\n          />\n        </>\n      )}\n      {count === 2 && (\n        <GlobalStatus.Remove id="custom-status" status_id="custom-id-2" />\n      )}\n      {count === 3 && (\n        <GlobalStatus.Remove id="custom-status" status_id="custom-id-1" />\n      )}\n    </>\n  )\n}\nrender(<AddRemoveItems />)\n'}),u=()=>(0,o.jsx)(s.Z,{hideCode:!0,children:"<Button\n  text=\"Scroll to main GlobalStatus\"\n  on_click={() => {\n    GlobalStatus.Update({\n      id: 'main-status',\n      text: 'Dui consectetur viverra aenean vestibulum ac tristique sem ligula condimentum',\n    })\n  }}\n/>\n"}),h=()=>(0,o.jsx)(s.Z,{hideCode:!0,noInline:!0,children:'const Context = React.createContext(null)\nconst UpdateDemo = () => {\n  const [errorA, setErrorA] = React.useState(false)\n  const [errorB, setErrorB] = React.useState(false)\n  const [isVisible, setVisibility] = React.useState(false)\n  return (\n    <Context.Provider\n      value={{\n        errorA,\n        errorB,\n        setErrorA,\n        setErrorB,\n        isVisible,\n        setVisibility,\n      }}\n    >\n      <UpdateDemoStatus />\n      <UpdateDemoTools />\n    </Context.Provider>\n  )\n}\nconst UpdateDemoStatus = () => {\n  const { errorA, errorB, setErrorA, setErrorB } =\n    React.useContext(Context)\n  return (\n    <>\n      <GlobalStatus title="Custom Title" text="Failure text" id="demo-2" />\n      <Input\n        top\n        right\n        label="Label A"\n        placeholder="Placeholder A"\n        status={errorA}\n        globalStatus={{\n          id: \'demo-2\',\n        }}\n        on_change={({ value }) => {\n          setErrorA(value)\n        }}\n      />\n      <Input\n        top\n        label="Label B"\n        placeholder="Placeholder B"\n        status={errorB}\n        globalStatus={{\n          id: \'demo-2\',\n        }}\n        on_change={({ value }) => {\n          setErrorB(value)\n        }}\n      />\n    </>\n  )\n}\nconst UpdateDemoTools = () => {\n  const {\n    errorA,\n    errorB,\n    setErrorA,\n    setErrorB,\n    isVisible,\n    setVisibility,\n  } = React.useContext(Context)\n\n  // Only to demonstrate the usage of an interceptor situation\n  const inst = React.useRef(null)\n  React.useEffect(() => {\n    if (!inst.current) {\n      inst.current = GlobalStatus.create({\n        id: \'demo-2\',\n        title: \'New Title\',\n        text: \'New Text\',\n        status_id: \'custom-item\',\n        show: false,\n      })\n      inst.current.update({\n        on_show: () => {\n          console.log(\'on_show\')\n          if (!isVisible) {\n            setVisibility(true)\n          }\n        },\n        on_hide: () => {\n          console.log(\'on_hide\')\n          setVisibility(false)\n        },\n        on_close: () => {\n          console.log(\'on_close\')\n          setVisibility(false)\n        },\n      })\n    }\n    inst.current.update({\n      show: isVisible,\n    })\n  }, [isVisible])\n  React.useEffect(() => () => inst.current.remove(), [])\n  return (\n    <Section top spacing style_type="divider">\n      <ToggleButton\n        text="Toggle"\n        variant="checkbox"\n        right\n        checked={isVisible}\n        on_change={({ checked }) => {\n          setVisibility(checked)\n        }}\n      />\n      <Button\n        text="Reset"\n        variant="tertiary"\n        icon="reset"\n        disabled={!(errorA || errorB)}\n        on_click={() => {\n          setErrorA(null)\n          setErrorB(null)\n        }}\n      />\n    </Section>\n  )\n}\nrender(<UpdateDemo />)\n'}),x=()=>(0,o.jsx)(s.Z,{hidePreview:!0,hideToolbar:!0,children:'<GlobalStatus id="other-global-status" />\n'}),j=()=>(0,o.jsx)(s.Z,{hidePreview:!0,hideToolbar:!0,children:"\n<GlobalStatus id=\"other-global-status\" />\n<Input\n  globalStatus={{\n    id: 'other-global-status',\n  }}\n/>\n\n"}),m=()=>(0,o.jsx)(s.Z,{hidePreview:!0,hideToolbar:!0,children:'\n<GlobalStatus id="other-global-status" />\n<Provider\n  formElement={{\n    globalStatus: {\n      id: \'other-global-status\',\n    },\n  }}\n>\n  <Input status="Message" />\n</Provider>\n\n'}),p=()=>(0,o.jsx)(s.Z,{hidePreview:!0,hideToolbar:!0,noInline:!0,children:"// 1. Update / extend the the status like so:\n\nconst statusOne = GlobalStatus.create({\n  id: 'other-global-status',\n  // or main\n  status_id: 'custom-id-1',\n  text: 'New Text',\n  item: 'Item from status #1',\n  title: 'New Title',\n  show: true,\n})\n\n// 2. and removes \"custom-id-1\" again if needed\n\nstatusOne.update({\n  text: 'Updated Text',\n})\n\n// 3. and removes \"custom-id-1\" again if needed\nstatusOne.remove()\nrender(<GlobalStatus id=\"other-global-status\" />)\n"}),b=()=>(0,o.jsx)(s.Z,{hidePreview:!0,hideToolbar:!0,children:'\n{/* 1. Place it under the header bar */}\n<GlobalStatus text="Optional default text" />\n{/* 2. later on, you can show a message */}\n<GlobalStatus.Add\n  id="custom-id"\n  status_id="custom-id-1"\n  title="New title"\n  text="First long info text ..."\n  item="Item from status #1"\n  on_close={({ status_id }) => {\n    console.log(\'on_close\', status_id)\n  }}\n/>\n{/* 3. and remove it again */}\n<GlobalStatus.Remove id="custom-id" status_id="custom-id-1" />\n\n'}),f=()=>(0,o.jsx)(s.Z,{hidePreview:!0,hideToolbar:!0,children:'\n{/* 1. Place it somewhere in your application */}\n<GlobalStatus id="custom-status" />\n{/* 2. later on, you can show a message */}\n<GlobalStatus.Add\n  id="custom-status"\n  status_id="custom-id-1"\n  title="New title"\n  text="First long info text ..."\n  item="Item from status #1"\n  on_close={({ status_id }) => {\n    console.log(\'on_close\', status_id)\n  }}\n/>\n{/* 3. and remove it again */}\n<GlobalStatus.Remove id="custom-status" status_id="custom-id-1" />\n\n'}),g=()=>(0,o.jsx)(s.Z,{hidePreview:!0,hideToolbar:!0,children:'\n{/* Place the status wherever you have to.*/}\n<GlobalStatus id="custom-id" />\n{/* Manipulate the status later on. Every property is optional.*/}\n<GlobalStatus.Add\n  id="custom-id"\n  status_id="status-1"\n  item="Item #1"\n  text="New Text"\n  on_close={({ status_id }) => {\n    console.log(\'on_close\', status_id)\n  }}\n/>\n<GlobalStatus.Add\n  id="custom-id"\n  status_id="status-2"\n  item="Item #2"\n  text="New Text"\n  title="New Title"\n  on_close={({ status_id }) => {\n    console.log(\'on_close\', status_id)\n  }}\n/>\n<GlobalStatus.Add\n  id="custom-id"\n  status_id="status-3"\n  item="Item #3"\n  text="Text #3"\n  on_close={({ status_id }) => {\n    console.log(\'on_close\', status_id)\n  }}\n/>\n{/* or update the status.*/}\n<GlobalStatus.Update id="custom-id" text="text" />\n{/* Later you can remove a resolved item.*/}\n<GlobalStatus.Remove id="custom-id" status_id="status-3" />\n\n'})}}]);
//# sourceMappingURL=component---src-docs-uilib-components-global-status-properties-mdx-a4c89d56e01b8fe78dec.js.map