{"version":3,"file":"component---src-docs-uilib-components-height-animation-demos-mdx-fae3b3dd0fc2a709c02c.js","mappings":"uOAiBO,SAASA,IACd,OAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,EAAAC,SAAA,ojCAiDF,CAEO,SAASC,IACd,OAAAJ,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,EAAAC,SAAA,ylBAqCF,CAEO,SAASE,IACd,OAAAL,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,EAAAC,SAAA,g1CAgEF,CC1KA,SAASG,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBf,SAAU,EAACH,EAAAA,EAAAA,KAAKQ,EAAYG,GAAI,CAC9BR,SAAU,UACR,MAAMH,EAAAA,EAAAA,KAAKQ,EAAYI,GAAI,CAC7BT,SAAU,oCACR,MAAMc,EAAAA,EAAAA,MAAMT,EAAYK,EAAG,CAC7BV,SAAU,CAAC,wFAAwFH,EAAAA,EAAAA,KAAKQ,EAAYM,KAAM,CACxHX,SAAU,iBACR,qDACF,MAAMH,EAAAA,EAAAA,KAAKI,EAA2B,CAAC,GAAI,MAAMJ,EAAAA,EAAAA,KAAKQ,EAAYI,GAAI,CACxET,SAAU,qBACR,MAAMc,EAAAA,EAAAA,MAAMT,EAAYK,EAAG,CAC7BV,SAAU,CAAC,0DAA0DH,EAAAA,EAAAA,KAAKQ,EAAYM,KAAM,CAC1FX,SAAU,iBACR,OACF,MAAMH,EAAAA,EAAAA,KAAKD,EAAwB,CAAC,GAAI,MAAMC,EAAAA,EAAAA,KAAKQ,EAAYI,GAAI,CACrET,SAAU,gBACR,MAAMc,EAAAA,EAAAA,MAAMT,EAAYK,EAAG,CAC7BV,SAAU,CAAC,mBAAmBH,EAAAA,EAAAA,KAAKQ,EAAYM,KAAM,CACnDX,SAAU,qBACR,0FAA4FH,EAAAA,EAAAA,KAAKQ,EAAYM,KAAM,CACrHX,SAAU,qBACR,SAASH,EAAAA,EAAAA,KAAKQ,EAAYM,KAAM,CAClCX,SAAU,gBACR,OACF,MAAMH,EAAAA,EAAAA,KAAKK,EAA0B,CAAC,KAE9C,CAOA,MANA,SAAoBE,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOI,GAAYpB,EAAAA,EAAAA,KAAKoB,EAAWX,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DJ,UAAUH,EAAAA,EAAAA,KAAKM,EAAmBC,MAC9BD,EAAkBC,EAC1B,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/height-animation/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/height-animation/demos.mdx"],"sourcesContent":["/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport styled from '@emotion/styled'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport {\n  HeightAnimation,\n  ToggleButton,\n  Section,\n  Button,\n  Anchor,\n  P,\n} from '@dnb/eufemia/src'\n\nexport function HeightAnimationDefault() {\n  return (\n    <ComponentBox>\n      {() => {\n        const Example = () => {\n          const [openState, setOpenState] = React.useState(false)\n          const [contentState, setContentState] = React.useState(false)\n\n          const onChangeHandler = ({ checked }) => {\n            setOpenState(checked)\n          }\n\n          return (\n            <>\n              <ToggleButton\n                checked={openState}\n                on_change={onChangeHandler}\n                right\n              >\n                Open/close\n              </ToggleButton>\n              <ToggleButton\n                checked={contentState || !openState}\n                disabled={!openState}\n                on_change={({ checked }) => {\n                  setContentState(checked)\n                }}\n                space={{ top: true, bottom: true }}\n              >\n                Change height inside\n              </ToggleButton>\n\n              <Section style_type=\"lavender\" top>\n                <HeightAnimation open={openState}>\n                  <Section spacing style_type=\"lavender\">\n                    <P space={0}>Your content</P>\n                  </Section>\n                  {contentState && <P space={0}>More content</P>}\n                </HeightAnimation>\n              </Section>\n\n              <P top>Look at me ðŸ‘€</P>\n            </>\n          )\n        }\n\n        return <Example />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport function HeightAnimationAutosizing() {\n  return (\n    <ComponentBox>\n      {() => {\n        const Example = () => {\n          const [showMe, setShowMe] = React.useState(true)\n\n          return (\n            <>\n              <HeightAnimation showOverflow>\n                {showMe ? (\n                  <Button\n                    onClick={() => {\n                      setShowMe(!showMe)\n                    }}\n                  >\n                    Click me!\n                  </Button>\n                ) : (\n                  <Anchor\n                    onClick={() => {\n                      setShowMe(!showMe)\n                    }}\n                  >\n                    No, click me!\n                  </Anchor>\n                )}\n              </HeightAnimation>\n\n              <P top>Look at me ðŸ‘€</P>\n            </>\n          )\n        }\n\n        return <Example />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport function HeightAnimationKeepInDOM() {\n  return (\n    <ComponentBox>\n      {() => {\n        const Example = () => {\n          const [openState, setOpenState] = React.useState(true)\n          const [contentState, setContentState] = React.useState(false)\n\n          const onChangeHandler = ({ checked }) => {\n            setOpenState(checked)\n          }\n\n          return (\n            <>\n              <ToggleButton\n                checked={openState}\n                on_change={onChangeHandler}\n                right\n              >\n                Open/close\n              </ToggleButton>\n              <ToggleButton\n                checked={contentState || !openState}\n                disabled={!openState}\n                on_change={({ checked }) => {\n                  setContentState(checked)\n                }}\n                space={{ top: true, bottom: true }}\n              >\n                Change height inside\n              </ToggleButton>\n\n              <StyledSection style_type=\"lavender\" top>\n                <HeightAnimation\n                  open={openState}\n                  keepInDOM={true}\n                  duration={1000}\n                >\n                  <Section spacing style_type=\"lavender\">\n                    <P space={0}>Your content</P>\n                  </Section>\n                  {contentState && <P space={0}>More content</P>}\n                </HeightAnimation>\n              </StyledSection>\n            </>\n          )\n        }\n\n        const StyledSection = styled(Section)`\n          .content-element {\n            transition: transform 1s var(--easing-default);\n            transform: translateY(-2rem);\n\n            padding: 4rem 0;\n          }\n\n          .dnb-height-animation--parallax .content-element {\n            transform: translateY(0);\n          }\n        `\n\n        return <Example />\n      }}\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {HeightAnimationDefault, HeightAnimationAutosizing, HeightAnimationKeepInDOM} from 'Docs/uilib/components/height-animation/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Animation during height changes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This example shows how you easily can enhance the user experience. Here we also use \", _jsx(_components.code, {\n        children: \"showOverflow\"\n      }), \" to avoid hidden overflow during the animation.\"]\n    }), \"\\n\", _jsx(HeightAnimationAutosizing, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Basic open/close\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This example removes its given children, when open is \", _jsx(_components.code, {\n        children: \"open={false}\"\n      }), \".\"]\n    }), \"\\n\", _jsx(HeightAnimationDefault, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Keep in DOM\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When providing \", _jsx(_components.code, {\n        children: \"keepInDOM={true}\"\n      }), \", your nested content will never be removed from the DOM. But rather be \\\"hidden\\\" with \", _jsx(_components.code, {\n        children: \"visually: hidden\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"aria-hidden\"\n      }), \".\"]\n    }), \"\\n\", _jsx(HeightAnimationKeepInDOM, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["HeightAnimationDefault","_jsx","ComponentBox","noInline","children","HeightAnimationAutosizing","HeightAnimationKeepInDOM","_createMdxContent","props","_components","Object","assign","h2","h3","p","code","_provideComponents","components","_jsxs","_Fragment","wrapper","MDXLayout"],"sourceRoot":""}