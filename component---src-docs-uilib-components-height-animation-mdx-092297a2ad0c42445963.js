"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[81839,82899,10360],{4501:function(n,e,t){t.r(e);var o=t(52322),s=t(45392),c=t(41873),i=t(3017);function a(n){return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(c.default,{}),"\n",(0,o.jsx)(i.default,{})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(a,n)})):a()}},3017:function(n,e,t){t.r(e),t.d(e,{default:function(){return l}});var o=t(52322),s=t(45392),c=(t(2784),t(41404));function i(){return(0,o.jsx)(c.Z,{noInline:!0,children:'const Example = () => {\n  const [openState, setOpenState] = React.useState(false)\n  const [contentState, setContentState] = React.useState(false)\n  const onChangeHandler = ({ checked }) => {\n    setOpenState(checked)\n  }\n  return (\n    <>\n      <ToggleButton checked={openState} on_change={onChangeHandler} right>\n        Open/close\n      </ToggleButton>\n      <ToggleButton\n        checked={contentState || !openState}\n        disabled={!openState}\n        on_change={({ checked }) => {\n          setContentState(checked)\n        }}\n        space={{\n          top: true,\n          bottom: true,\n        }}\n      >\n        Change height inside\n      </ToggleButton>\n\n      <Section style_type="lavender" top>\n        <HeightAnimation open={openState}>\n          <Section spacing style_type="lavender">\n            <P space={0}>Your content</P>\n          </Section>\n          {contentState && <P space={0}>More content</P>}\n        </HeightAnimation>\n      </Section>\n\n      <P top>Look at me ðŸ‘€</P>\n    </>\n  )\n}\nrender(<Example />)\n'})}function a(){return(0,o.jsx)(c.Z,{noInline:!0,children:"const Example = () => {\n  const [showMe, setShowMe] = React.useState(true)\n  return (\n    <>\n      <HeightAnimation showOverflow>\n        {showMe ? (\n          <Button\n            onClick={() => {\n              setShowMe(!showMe)\n            }}\n          >\n            Click me!\n          </Button>\n        ) : (\n          <Anchor\n            onClick={() => {\n              setShowMe(!showMe)\n            }}\n          >\n            No, click me!\n          </Anchor>\n        )}\n      </HeightAnimation>\n\n      <P top>Look at me ðŸ‘€</P>\n    </>\n  )\n}\nrender(<Example />)\n"})}function r(){return(0,o.jsx)(c.Z,{noInline:!0,children:'const Example = () => {\n  const [openState, setOpenState] = React.useState(true)\n  const [contentState, setContentState] = React.useState(false)\n  const onChangeHandler = ({ checked }) => {\n    setOpenState(checked)\n  }\n  return (\n    <>\n      <ToggleButton checked={openState} on_change={onChangeHandler} right>\n        Open/close\n      </ToggleButton>\n      <ToggleButton\n        checked={contentState || !openState}\n        disabled={!openState}\n        on_change={({ checked }) => {\n          setContentState(checked)\n        }}\n        space={{\n          top: true,\n          bottom: true,\n        }}\n      >\n        Change height inside\n      </ToggleButton>\n\n      <StyledSection style_type="lavender" top>\n        <HeightAnimation open={openState} keepInDOM={true} duration={1000}>\n          <Section spacing style_type="lavender">\n            <P space={0}>Your content</P>\n          </Section>\n          {contentState && <P space={0}>More content</P>}\n        </HeightAnimation>\n      </StyledSection>\n    </>\n  )\n}\nconst StyledSection = styled(Section)`\n  .content-element {\n    transition: transform 1s var(--easing-default);\n    transform: translateY(-2rem);\n\n    padding: 4rem 0;\n  }\n\n  .dnb-height-animation--parallax .content-element {\n    transform: translateY(0);\n  }\n`\nrender(<Example />)\n'})}function h(n){const e=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code"},(0,s.ah)(),n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:"Demos"}),"\n",(0,o.jsx)(e.h3,{children:"Animation during height changes"}),"\n",(0,o.jsxs)(e.p,{children:["This example shows how you easily can enhance the user experience. Here we also use ",(0,o.jsx)(e.code,{children:"showOverflow"})," to avoid hidden overflow during the animation."]}),"\n",(0,o.jsx)(a,{}),"\n",(0,o.jsx)(e.h3,{children:"Basic open/close"}),"\n",(0,o.jsxs)(e.p,{children:["This example removes its given children, when open is ",(0,o.jsx)(e.code,{children:"open={false}"}),"."]}),"\n",(0,o.jsx)(i,{}),"\n",(0,o.jsx)(e.h3,{children:"Keep in DOM"}),"\n",(0,o.jsxs)(e.p,{children:["When providing ",(0,o.jsx)(e.code,{children:"keepInDOM={true}"}),', your nested content will never be removed from the DOM. But rather be "hidden" with ',(0,o.jsx)(e.code,{children:"visually: hidden"})," and ",(0,o.jsx)(e.code,{children:"aria-hidden"}),"."]}),"\n",(0,o.jsx)(r,{})]})}var l=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(h,n)})):h(n)}},41873:function(n,e,t){t.r(e);var o=t(52322),s=t(45392);function c(n){const e=Object.assign({h2:"h2",pre:"pre",code:"code",p:"p",ul:"ul",li:"li"},(0,s.ah)(),n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:"Import"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"import { HeightAnimation } from '@dnb/eufemia'\n"})}),"\n",(0,o.jsx)(e.h2,{children:"Description"}),"\n",(0,o.jsxs)(e.p,{children:["The HeightAnimation component calculates the height, and animates from ",(0,o.jsx)(e.code,{children:"auto"})," to ",(0,o.jsx)(e.code,{children:"auto"})," â€“ or from ",(0,o.jsx)(e.code,{children:"0"})," to ",(0,o.jsx)(e.code,{children:"auto"})," in height â€“ powered by CSS transition. It calculates the height on the fly."]}),"\n",(0,o.jsxs)(e.p,{children:["When the animation is done, it sets the element's height to ",(0,o.jsx)(e.code,{children:"auto"}),"."]}),"\n",(0,o.jsx)(e.p,{children:"The component can be used as an opt-int replacement instead of vanilla HTML Elements."}),"\n",(0,o.jsxs)(e.p,{children:["The element animation is done with a CSS transition with ",(0,o.jsx)(e.code,{children:"400ms"})," in duration."]}),"\n",(0,o.jsx)(e.p,{children:"It also re-calculates and changes the height, when the given content changes."}),"\n",(0,o.jsx)(e.h2,{children:"Accessibility"}),"\n",(0,o.jsx)(e.p,{children:"It is important to never animate from 0 to e.g. 64px â€“ because;"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"the content may differ based on the viewport width (screen size)"}),"\n",(0,o.jsx)(e.li,{children:"the content itself may change"}),"\n",(0,o.jsxs)(e.li,{children:["the user may have a larger ",(0,o.jsx)(e.code,{children:"font-size"})]}),"\n"]})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(c,n)})):c(n)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-height-animation-mdx-092297a2ad0c42445963.js.map