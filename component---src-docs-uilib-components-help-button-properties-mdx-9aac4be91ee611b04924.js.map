{"version":3,"file":"component---src-docs-uilib-components-help-button-properties-mdx-9aac4be91ee611b04924.js","mappings":"yUAUO,MAAMA,EAA2BA,KAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,0CAAAC,SAAA,oCAM3BC,EAA0BA,KAAAH,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,yCAAAC,SAAA,wHAU1BE,EAAyBA,KAAAJ,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,wCAAAC,SAAA,sLAezBG,EAA4BA,KAAAL,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,8MAc5BI,EAA8BA,KAAAN,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,yCAAAC,SAAA,iEAQ9BK,EAA0BA,KAAAP,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAO,MAAA,CACvCC,OACA,KAAAP,SAAA,yM,2OCtDA,MAAMQ,GAAcC,EAAAA,EAAAA,GAAOC,EAAAA,GAAK,CAAAC,OAAA,YAAZF,CAAa,CAAAG,KAAA,UAAAC,OAAA,4BAMlB,SAASC,EAAiBC,GAMrC,IANsC,UACxCC,EAAS,OACTC,EAAS,MAIVF,EACCE,GAASC,EAAAA,EAAAA,UAAQ,IAEbD,GACAE,OAAOC,QACLC,EAAAA,EAAAA,IAAW,CAAC,EAAGC,EAAAA,EAAoBC,EAAAA,GACnCC,EAAAA,KAGH,CAACP,IAEJ,MAAMQ,EAAU,CAAC,EACXC,EAAY,CAAC,EACbC,GACJC,MAAMC,QAAQb,GAAaA,EAAY,CAACA,IACxCc,KAAKC,IACL,GAAIA,EAAIC,SAAS,KAAM,CACrB,MAAMC,EAAQF,EAAIG,MAAM,KAAK,GAG7B,OAFAR,EAAUO,GAASP,EAAUO,IAAU,GACvCP,EAAUO,GAAOE,KAAKJ,GACfE,CACT,CAEA,OAAOF,CAAG,IAGNK,EAAeA,CAACL,EAAKM,EAAaC,EAAQtB,KAC9Ce,EAAO,GAAEf,KAAae,IAClBL,EAAUV,KAAeU,EAAUV,GAAWgB,SAASD,KAG3DN,EAAQM,GAAOZ,OAAOC,OAAOK,EAAQM,IAAQ,CAAC,EAAG,CAC/C,CAACO,GAASD,IACV,EAGJlB,OAAOM,QAAQR,GAAQsB,SAAQC,IAA6B,IAA3BF,EAAQG,GAAaD,EACpDb,EAAWY,SAASvB,IAClB,MAAM0B,EAAkBD,EAAazB,GAChC0B,EAMLvB,OAAOM,QAAQiB,GAAiBH,SAAQI,IAAyB,IAAvBZ,EAAKM,GAAYM,EACzD,GAA2B,iBAAhBN,EAA0B,CACnC,MAAMO,EAAa,GAAE5B,KAAae,IAClCZ,OAAOM,QAAQY,GAAaE,SAAQM,IAAyB,IAAvBd,EAAKM,GAAYQ,EACrDT,EAAaL,EAAKM,EAAaC,EAAQM,EAAU,GAErD,MACER,EAAaL,EAAKM,EAAaC,EAAQtB,EACzC,KAbA8B,EAAAA,EAAAA,IACG,gEAA+D9B,6CAalE,GACF,IAGJ,MAAM+B,EAAU5B,OAAO6B,KAAK/B,GACtBgC,EAAY9B,OAAOM,QAAQA,GAASK,KAAIoB,IAAoB,IAAlBnB,EAAKoB,GAAOD,EAC1D,OACEE,EAAAA,EAAAA,MAACC,EAAAA,EAAE,CAAArD,SAAA,EACDF,EAAAA,EAAAA,KAACwD,EAAAA,EAAE,CAAAtD,UACDF,EAAAA,EAAAA,KAACyD,EAAAA,GAAa,CAACC,QAAQ,OAAMxD,SAAE+B,MAEhCZ,OAAOM,QAAQ0B,GAAQrB,KAAI,CAAA2B,EAAkBC,KAAO,IAAvBpB,EAAQqB,GAAMF,EAC1C,OACE3D,EAAAA,EAAAA,KAACwD,EAAAA,EAAE,CAAAtD,SACiB,iBAAV2D,EACNA,GAEA7D,EAAAA,EAAAA,KAAA,OAAAE,SAAM4D,KAAKC,UAAUF,EAAO,KAAM,MAJ7BD,EAAIpB,EAMR,MAZFP,EAeJ,IAIT,GAAwB,GAApBkB,EAAUa,OAOd,OACEV,EAAAA,EAAAA,MAAAW,EAAAA,SAAA,CAAA/D,SAAA,EACEoD,EAAAA,EAAAA,MAACY,EAAAA,EAAC,CAAAhE,SAAA,CAAC,mDACgD,KACjDF,EAAAA,EAAAA,KAACmE,EAAAA,GAAM,CAACC,KAAK,2CAA0ClE,SAAC,yBAE9C,IAAI,MACV,KACJF,EAAAA,EAAAA,KAACmE,EAAAA,GAAM,CAACC,KAAK,wEAAuElE,SAAC,+BAE3E,IAAI,YAGhBF,EAAAA,EAAAA,KAACY,EAAAA,GAAAA,WAAgB,CAAAV,UACfoD,EAAAA,EAAAA,MAAC5C,EAAW,CAAAR,SAAA,EACVF,EAAAA,EAAAA,KAAA,SAAAE,UACEoD,EAAAA,EAAAA,MAACC,EAAAA,EAAE,CAAArD,SAAA,EACDF,EAAAA,EAAAA,KAACqE,EAAAA,EAAE,CAAAnE,SAAC,QACH+C,EAAQjB,KAAKQ,IACZ,MAAM,OAAE8B,GAAWC,EAAAA,EAAqB/B,GACxC,OACEc,EAAAA,EAAAA,MAACe,EAAAA,EAAE,CAAAnE,SAAA,CACAsC,EACA8B,EAAU,KAAIA,KAAY,OAFpB9B,EAGJ,UAKbxC,EAAAA,EAAAA,KAAA,SAAAE,SAAQiD,aAnCdH,EAAAA,EAAAA,IACG,qEAAoE9B,kDAuC3E,C,qGCzIA,SAASsD,EAAkBC,GACzB,MAAMC,EAAcrD,OAAOC,OAAO,CAChCqD,GAAI,KACJC,KAAM,SACLC,EAAAA,EAAAA,KAAsBJ,EAAMK,YAC/B,OAAOxB,EAAAA,EAAAA,MAAMW,EAAAA,SAAW,CACtB/D,SAAU,EAACF,EAAAA,EAAAA,KAAK0E,EAAYC,GAAI,CAC9BzE,SAAU,eACR,MAAMF,EAAAA,EAAAA,KAAK+E,EAAAA,GAAiB,CAC9BN,MAAOO,EAAAA,IACL,MAAMhF,EAAAA,EAAAA,KAAK0E,EAAYC,GAAI,CAC7BzE,SAAU,iBACR,MAAMF,EAAAA,EAAAA,KAAKgB,EAAAA,EAAmB,CAChCE,UAAW,eACT,MAAMoC,EAAAA,EAAAA,MAAMoB,EAAYC,GAAI,CAC9BzE,SAAU,CAAC,eAAeF,EAAAA,EAAAA,KAAK0E,EAAYE,KAAM,CAC/C1E,SAAU,cAEV,MAAMF,EAAAA,EAAAA,KAAKO,EAAAA,EAAyB,CAAC,KAE7C,CAOA,UANA,SAAoBkE,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOQ,QAASC,GAAa7D,OAAOC,OAAO,CAAC,GAAGuD,EAAAA,EAAAA,KAAsBJ,EAAMK,YAC3E,OAAOI,GAAYlF,EAAAA,EAAAA,KAAKkF,EAAW7D,OAAOC,OAAO,CAAC,EAAGmD,EAAO,CAC1DvE,UAAUF,EAAAA,EAAAA,KAAKwE,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,+EC/BO,MAAMO,EAA6C,CACxD9E,SAAU,CACRiF,IAAK,uBACLC,KAAM,aACNd,OAAQ,YAEVe,MAAO,CACLF,IAAK,mEACLC,KAAM,SACNd,OAAQ,YAEVgB,KAAM,CACJH,IAAK,iKACLC,KAAM,CAAC,SAAU,mBACjBd,OAAQ,YAEViB,OAAQ,CACNJ,IAAK,4EACLC,KAAM,WACNd,OAAQ,YAEV,gDAAiD,CAC/Ca,IAAK,yBACLC,KAAM,UACNd,OAAQ,YAEV,0CAA2C,CACzCa,IAAK,2DACLC,KAAM,CAAC,SAAU,UACjBd,OAAQ,aAICkB,EAAyC,CACpD,4CAA6C,CAC3CL,IAAK,6BACLC,KAAM,UACNd,OAAQ,Y","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/help-button/Examples.tsx","webpack://dnb-design-system-portal/./src/shared/parts/TranslationsTable.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/help-button/properties.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/help-button/HelpButtonDocs.ts"],"sourcesContent":["/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\n\nimport { HelpButton, Input, Dl, Dt, Dd, Dialog } from '@dnb/eufemia/src'\n\nexport const HelpButtonDefaultExample = () => (\n  <ComponentBox data-visual-test=\"help-button-default\">\n    <HelpButton>Text</HelpButton>\n  </ComponentBox>\n)\n\nexport const HelpButtonSuffixExample = () => (\n  <ComponentBox data-visual-test=\"help-button-suffix\">\n    <Input\n      size={10}\n      placeholder=\"Input ...\"\n      suffix={<HelpButton title=\"Custom title\">Text</HelpButton>}\n    />\n  </ComponentBox>\n)\n\nexport const HelpButtonSizesExample = () => (\n  <ComponentBox data-visual-test=\"help-button-sizes\">\n    <HelpButton title=\"Custom title\">Text</HelpButton>\n    <HelpButton\n      size=\"small\"\n      left\n      on_click={() => {\n        console.log('on_click')\n      }}\n    >\n      Text\n    </HelpButton>\n  </ComponentBox>\n)\n\nexport const HelpButtonInfoIconExample = () => (\n  <ComponentBox>\n    <HelpButton icon=\"information\" tooltip=\"More info\">\n      <Dl>\n        <Dt>Term</Dt>\n        <Dd>Description</Dd>\n        <Dd>Description</Dd>\n        <Dt>Term</Dt>\n        <Dd>Description</Dd>\n      </Dl>\n    </HelpButton>\n  </ComponentBox>\n)\n\nexport const HelpButtonInsideTextExample = () => (\n  <ComponentBox data-visual-test=\"help-button-inline\">\n    <span>\n      Text <HelpButton>Text</HelpButton> Text\n    </span>\n  </ComponentBox>\n)\n\nexport const HelpButtonRenderExample = () => (\n  <ComponentBox scope={{ Dialog }}>\n    <HelpButton\n      title=\"Title\"\n      render={(children, props) => (\n        <Dialog triggerAttributes={props} className=\"your-class\">\n          {children}\n        </Dialog>\n      )}\n    >\n      Help text\n    </HelpButton>\n  </ComponentBox>\n)\n","import { useMemo } from 'react'\nimport styled from '@emotion/styled'\nimport { Anchor, P, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { extendDeep, warn } from '@dnb/eufemia/src/shared/component-helper'\nimport globalTranslations from '@dnb/eufemia/src/shared/locales'\nimport formsTranslations from '@dnb/eufemia/src/extensions/forms/constants/locales'\nimport { FormattedCode } from './PropertiesTable'\nimport { Translation } from '@dnb/eufemia/src/shared/Context'\nimport { translationsWithoutEnUS } from '../../core/PortalProviders'\nimport { languageDisplayNames } from '../../core/ChangeLocale'\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nexport default function TranslationsTable({\n  localeKey,\n  source = null,\n}: {\n  localeKey?: string | Array<string>\n  source?: Record<string, Translation>\n}) {\n  source = useMemo(() => {\n    return (\n      source ||\n      Object.assign(\n        extendDeep({}, globalTranslations, formsTranslations),\n        translationsWithoutEnUS,\n      )\n    )\n  }, [source])\n\n  const entries = {}\n  const allowList = {}\n  const localeKeys = (\n    Array.isArray(localeKey) ? localeKey : [localeKey]\n  ).map((key) => {\n    if (key.includes('.')) {\n      const first = key.split('.')[0]\n      allowList[first] = allowList[first] || []\n      allowList[first].push(key)\n      return first\n    }\n\n    return key\n  })\n\n  const addToEntries = (key, translation, locale, localeKey) => {\n    key = `${localeKey}.${key}`\n    if (allowList[localeKey] && !allowList[localeKey].includes(key)) {\n      return\n    }\n    entries[key] = Object.assign(entries[key] || {}, {\n      [locale]: translation,\n    })\n  }\n\n  Object.entries(source).forEach(([locale, translations]) => {\n    localeKeys.forEach((localeKey) => {\n      const translationsObj = translations[localeKey]\n      if (!translationsObj) {\n        warn(\n          `TranslationsTable: Could not find any translations for key: \"${localeKey}\", perhaps you misspelled the key's name?`,\n        )\n        return\n      }\n      Object.entries(translationsObj).forEach(([key, translation]) => {\n        if (typeof translation === 'object') {\n          const nestedKey = `${localeKey}.${key}`\n          Object.entries(translation).forEach(([key, translation]) => {\n            addToEntries(key, translation, locale, nestedKey)\n          })\n        } else {\n          addToEntries(key, translation, locale, localeKey)\n        }\n      })\n    })\n  })\n\n  const locales = Object.keys(source)\n  const tableRows = Object.entries(entries).map(([key, values]) => {\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode variant=\"prop\">{key}</FormattedCode>\n        </Td>\n        {Object.entries(values).map(([locale, value], i) => {\n          return (\n            <Td key={i + locale}>\n              {typeof value === 'string' ? (\n                value\n              ) : (\n                <pre>{JSON.stringify(value, null, 2)}</pre>\n              )}\n            </Td>\n          )\n        })}\n      </Tr>\n    )\n  })\n\n  if (tableRows.length == 0) {\n    warn(\n      `TranslationsTable: Not able to find any translations for input : \"${localeKey}\", hence not rendering the translations table.`,\n    )\n    return\n  }\n\n  return (\n    <>\n      <P>\n        More info about translations can be found in the{' '}\n        <Anchor href=\"/uilib/usage/customisation/localization/\">\n          general localization\n        </Anchor>{' '}\n        and{' '}\n        <Anchor href=\"/uilib/extensions/forms/getting-started/#localization-and-translation\">\n          Eufemia Forms localization\n        </Anchor>{' '}\n        docs.\n      </P>\n      <Table.ScrollView>\n        <StyledTable>\n          <thead>\n            <Tr>\n              <Th>Key</Th>\n              {locales.map((locale) => {\n                const { status } = languageDisplayNames[locale]\n                return (\n                  <Th key={locale}>\n                    {locale}\n                    {status ? ` (${status})` : null}\n                  </Th>\n                )\n              })}\n            </Tr>\n          </thead>\n          <tbody>{tableRows}</tbody>\n        </StyledTable>\n      </Table.ScrollView>\n    </>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport TranslationsTable from 'dnb-design-system-portal/src/shared/parts/TranslationsTable';\nimport {HelpButtonRenderExample} from 'Docs/uilib/components/help-button/Examples';\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {HelpButtonProperties} from '@dnb/eufemia/src/components/help-button/HelpButtonDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: HelpButtonProperties\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Translations\"\n    }), \"\\n\", _jsx(TranslationsTable, {\n      localeKey: \"HelpButton\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"How to use \", _jsx(_components.code, {\n        children: \"render\"\n      })]\n    }), \"\\n\", _jsx(HelpButtonRenderExample, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const HelpButtonProperties: PropertiesTableProps = {\n  children: {\n    doc: 'the content to show.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  title: {\n    doc: 'the content title. Defaults to `Hjelpetekst` (HelpButton.title).',\n    type: 'string',\n    status: 'optional',\n  },\n  icon: {\n    doc: 'To be included in the button. [Primary Icons](/icons/primary) can be set as a string (e.g. `icon=\"information\"`), other icons should be set as React elements.',\n    type: ['string', 'React.ReactNode'],\n    status: 'optional',\n  },\n  render: {\n    doc: 'accepts a function that returns a valid React Element. See example below.',\n    type: 'function',\n    status: 'optional',\n  },\n  '[Button](/uilib/components/button/properties)': {\n    doc: 'All button properties.',\n    type: 'Various',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const HelpButtonEvents: PropertiesTableProps = {\n  '[Button](/uilib/components/button/events)': {\n    doc: 'accepts all Button events.',\n    type: 'Various',\n    status: 'optional',\n  },\n}\n"],"names":["HelpButtonDefaultExample","_jsx","ComponentBox","children","HelpButtonSuffixExample","HelpButtonSizesExample","HelpButtonInfoIconExample","HelpButtonInsideTextExample","HelpButtonRenderExample","scope","Dialog","StyledTable","_styled","Table","target","name","styles","TranslationsTable","_ref","localeKey","source","useMemo","Object","assign","extendDeep","globalTranslations","formsTranslations","translationsWithoutEnUS","entries","allowList","localeKeys","Array","isArray","map","key","includes","first","split","push","addToEntries","translation","locale","forEach","_ref2","translations","translationsObj","_ref3","nestedKey","_ref4","warn","locales","keys","tableRows","_ref5","values","_jsxs","Tr","Td","FormattedCode","variant","_ref6","i","value","JSON","stringify","length","_Fragment","P","Anchor","href","Th","status","languageDisplayNames","_createMdxContent","props","_components","h2","code","_provideComponents","components","PropertiesTable","HelpButtonProperties","wrapper","MDXLayout","doc","type","title","icon","render","HelpButtonEvents"],"sourceRoot":""}