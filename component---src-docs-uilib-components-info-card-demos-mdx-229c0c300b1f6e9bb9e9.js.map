{"version":3,"file":"component---src-docs-uilib-components-info-card-demos-mdx-229c0c300b1f6e9bb9e9.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/info-card/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/info-card/demos.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/icons/dnb/card_medium.tsx"],"sourcesContent":["/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { card_medium as Card } from '@dnb/eufemia/src/icons'\nimport InfoCard from '@dnb/eufemia/src/components/info-card/InfoCard'\nimport Li from '@dnb/eufemia/src/elements/Li'\nimport Ul from '@dnb/eufemia/src/elements/Ul'\nimport P from '@dnb/eufemia/src/elements/P'\n\nexport const InfoCardBasic = () => (\n  <ComponentBox data-visual-test=\"info-card-basic\">\n    <InfoCard text=\"This is a description of some information or a tip that will inform the user of something that will help them.\" />\n  </ComponentBox>\n)\n\nexport const InfoCardTitle = () => (\n  <ComponentBox>\n    <InfoCard\n      text=\"This is a description of some information or a tip that will inform the user of something that will help them.\"\n      title=\"Title of your info/tip\"\n    />\n  </ComponentBox>\n)\n\nexport const InfoCardStretch = () => (\n  <ComponentBox data-visual-test=\"info-card-stretch\">\n    <InfoCard\n      stretch\n      text=\"This is a description of some information or a tip that will inform the user of something that will help them.\"\n      title=\"Title of your info/tip\"\n    />\n  </ComponentBox>\n)\n\nexport const InfoCardButtons = () => (\n  <ComponentBox data-visual-test=\"info-card-buttons\">\n    <InfoCard\n      text=\"This is a description of some information or a tip that will inform the user of something that will help them.\"\n      title=\"Title of your info/tip\"\n      closeButtonText=\"Close\"\n      onClose={() => {\n        console.log('onClose')\n      }}\n      acceptButtonText=\"Accept\"\n      onAccept={() => {\n        console.log('onAccept')\n      }}\n    />\n  </ComponentBox>\n)\n\nexport const InfoCardButtonsCentered = () => (\n  <ComponentBox data-visual-test=\"info-card-buttons-centered\">\n    <InfoCard\n      centered\n      text=\"This is a description of some information or a tip that will inform the user of something that will help them.\"\n      title=\"Title of your info/tip\"\n      closeButtonText=\"Close\"\n      onClose={() => {\n        console.log('onClose')\n      }}\n      acceptButtonText=\"Accept\"\n      onAccept={() => {\n        console.log('onAccept')\n      }}\n    />\n  </ComponentBox>\n)\n\nexport const InfoCardAcceptButton = () => (\n  <ComponentBox data-visual-test=\"info-card-accept-button\">\n    <InfoCard\n      text=\"This is a description of some information or a tip that will inform the user of something that will help them.\"\n      title=\"Title of your info/tip\"\n      acceptButtonText=\"Accept\"\n      onAccept={() => {\n        console.log('onAccept')\n      }}\n    />\n  </ComponentBox>\n)\n\nexport const InfoCardCloseButton = () => (\n  <ComponentBox data-visual-test=\"info-card-close-button\">\n    <InfoCard\n      text=\"This is a description of some information or a tip that will inform the user of something that will help them.\"\n      title=\"Title of your info/tip\"\n      closeButtonText=\"Close\"\n      onClose={() => {\n        console.log('onClose')\n      }}\n    />\n  </ComponentBox>\n)\n\nexport const InfoCardCustomIcon = () => (\n  <ComponentBox scope={{ Card }} data-visual-test=\"info-card-custom-icon\">\n    <InfoCard\n      text=\"This is a description of some information or a tip that will inform the user of something that will help them.\"\n      title=\"Title of your info/tip\"\n      icon={Card}\n    />\n  </ComponentBox>\n)\n\nexport const InfoCardCentered = () => (\n  <ComponentBox data-visual-test=\"info-card-centered\">\n    <InfoCard\n      text=\"This is a description of some information or a tip that will inform the user of something that will help them.\"\n      title=\"Title of your info/tip\"\n      centered={true}\n    />\n  </ComponentBox>\n)\n\nexport const InfoCardWithoutDropShadow = () => (\n  <ComponentBox>\n    <InfoCard\n      text=\"This is a description of some information or a tip that will inform the user of something that will help them.\"\n      title=\"Title of your info/tip\"\n      dropShadow={false}\n    />\n  </ComponentBox>\n)\n\nexport const InfoCardCustomImage = () => (\n  <ComponentBox data-visual-test=\"info-card-custom-image\">\n    <InfoCard\n      text=\"This is a description of some information or a tip that will inform the user of something that will help them.\"\n      title=\"This is the InfoCard with a custom image\"\n      src=\"/images/avatars/1501870.jpg\"\n      alt=\"Profile picture\"\n    />\n  </ComponentBox>\n)\n\nexport const InfoCardCustomImageCentered = () => (\n  <ComponentBox data-visual-test=\"info-card-custom-image-centered\">\n    <InfoCard\n      text=\"This is a description of some information or a tip that will inform the user of something that will help them.\"\n      title=\"This is the InfoCard with a custom image\"\n      centered={true}\n      src=\"/images/avatars/1501870.jpg\"\n      alt=\"Profile picture\"\n    />\n  </ComponentBox>\n)\n\nexport const InfoCardChildren = () => (\n  <ComponentBox\n    scope={{ Ul, Li, P }}\n    data-visual-test=\"info-card-children\"\n  >\n    <InfoCard\n      title=\"Title of your info/tip\"\n      acceptButtonText=\"Accept\"\n      onAccept={() => {\n        console.log('onAccept')\n      }}\n    >\n      <P>I want to inform you about the following items:</P>\n      <Ul>\n        <Li>Item 1</Li>\n        <Li>Item 2</Li>\n      </Ul>\n      <P>Is this okay with you?</P>\n    </InfoCard>\n  </ComponentBox>\n)\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {InfoCardBasic, InfoCardTitle, InfoCardStretch, InfoCardButtons, InfoCardButtonsCentered, InfoCardAcceptButton, InfoCardCloseButton, InfoCardCustomIcon, InfoCardCentered, InfoCardCustomImage, InfoCardCustomImageCentered, InfoCardWithoutDropShadow, InfoCardChildren} from 'Docs/uilib/components/info-card/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"InfoCard (default)\"\n    }), \"\\n\", _jsx(InfoCardBasic, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"InfoCard with a title\"\n    }), \"\\n\", _jsx(InfoCardTitle, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"InfoCard with a stretched container\"\n    }), \"\\n\", _jsx(InfoCardStretch, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"InfoCard with Buttons\"\n    }), \"\\n\", _jsx(InfoCardButtons, {}), \"\\n\", _jsx(InfoCardButtonsCentered, {}), \"\\n\", _jsx(_components.p, {\n      children: \"Each button can be used independently.\"\n    }), \"\\n\", _jsx(InfoCardAcceptButton, {}), \"\\n\", _jsx(InfoCardCloseButton, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"InfoCard accepts a custom icon\"\n    }), \"\\n\", _jsx(InfoCardCustomIcon, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"InfoCard centered content\"\n    }), \"\\n\", _jsx(InfoCardCentered, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"InfoCard without drop shadow\"\n    }), \"\\n\", _jsx(InfoCardWithoutDropShadow, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"InfoCard custom image\"\n    }), \"\\n\", _jsx(InfoCardCustomImage, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"InfoCard custom image centered\"\n    }), \"\\n\", _jsx(InfoCardCustomImageCentered, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"InfoCard with children\"\n    }), \"\\n\", _jsx(InfoCardChildren, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/** This file is auto generated by convertSvgToJsx.ts */\n\nimport React from 'react'\nconst card_medium = (props) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={24}\n    height={24}\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    {...props}\n  >\n    <path\n      stroke=\"#000\"\n      strokeLinecap=\"round\"\n      strokeWidth={1.5}\n      d=\"M4.5 8h3.75M4.5 16h15M2.75 19.5h18.5a2 2 0 0 0 2-2v-11a2 2 0 0 0-2-2H2.75a2 2 0 0 0-2 2v11a2 2 0 0 0 2 2Z\"\n    />\n  </svg>\n)\nexport default card_medium\n"],"names":["InfoCardBasic","_jsx","ComponentBox","children","InfoCardTitle","InfoCardStretch","InfoCardButtons","InfoCardButtonsCentered","InfoCardAcceptButton","InfoCardCloseButton","InfoCardCustomIcon","scope","Card","InfoCardCentered","InfoCardWithoutDropShadow","InfoCardCustomImage","InfoCardCustomImageCentered","InfoCardChildren","Ul","Li","P","_createMdxContent","props","_components","Object","assign","h2","h3","p","_provideComponents","components","_jsxs","_Fragment","wrapper","MDXLayout","xmlns","width","height","fill","viewBox","stroke","strokeLinecap","strokeWidth","d"],"sourceRoot":""}