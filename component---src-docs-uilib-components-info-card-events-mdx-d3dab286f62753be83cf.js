"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[2214],{19114:function(t,e,o){o.r(e);var n=o(31085),a=o(71184),s=o(15616),i=o(65526);function c(t){const e=Object.assign({h2:"h2"},(0,a.R)(),t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:"Events"}),"\n",(0,n.jsx)(s.Ay,{props:i.U})]})}e.default=function(t){void 0===t&&(t={});const{wrapper:e}=Object.assign({},(0,a.R)(),t.components);return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(c,t)})):c(t)}},65526:function(t,e,o){o.d(e,{Q:function(){return n},U:function(){return a}});const n={text:{doc:"The text content of the InfoCard, displayed/rendered in a paragraph. To fully customize the content, see `children` property.",type:"React.ReactNode",status:"optional"},title:{doc:"The title of the InfoCard.",type:"React.ReactNode",status:"optional"},centered:{doc:"Centers the content. Defaults to `false`.",type:"boolean",status:"optional"},dropShadow:{doc:"Sets the drop shadow of the info card. Defaults to `true`.",type:"boolean",status:"optional"},stretch:{doc:"Stretch the card to fill the container.",type:"boolean",status:"optional"},className:{doc:"Custom className for the component root.",type:"string",status:"optional"},icon:{doc:"Custom icon. Defaults to the `lightbulb` icon.",type:"React.ReactNode",status:"optional"},imgProps:{doc:"[Image properties](/uilib/elements/image) applied to the `img` element if the component is used to display an image.",type:"ImgProps",status:"optional"},alt:{doc:"Used in combination with `src` to provide an alt attribute for the image element.",type:"React.ReactNode",status:"optional"},src:{doc:"Specifies the path to the image.",type:"string",status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown. Defaults to `false`.",type:"boolean",status:"optional"},closeButtonText:{doc:"The close button text.",type:"React.ReactNode",status:"optional"},closeButtonAttributes:{doc:"define any valid Eufemia [Button properties](/uilib/components/button/properties) or HTML attribute inside an object.",type:"ButtonProps",status:"optional"},acceptButtonText:{doc:"The accept button text.",type:"React.ReactNode",status:"optional"},acceptButtonAttributes:{doc:"define any valid Eufemia [Button properties](/uilib/components/button/properties) or HTML attribute inside an object.",type:"ButtonProps",status:"optional"},children:{doc:"Can be used to add custom content, which is displayed/rendered between the `text` property and buttons.",type:"React.ReactNode",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},a={onAccept:{doc:"will be called when user clicks the accept button.",type:"function",status:"optional"},onClose:{doc:"will be called when user clicks the close button.",type:"function",status:"optional"}}},69094:function(t,e,o){var n=o(23722);e.A=n.A},81908:function(t,e,o){var n=o(94515);e.A=n.A},92034:function(t,e,o){var n=o(31666);e.A=n.A}}]);
//# sourceMappingURL=component---src-docs-uilib-components-info-card-events-mdx-d3dab286f62753be83cf.js.map