{"version":3,"file":"component---src-docs-uilib-components-info-card-properties-mdx-870206bd935be4dede54.js","mappings":"mMAKA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,OACHC,EAAAA,EAAAA,KAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKT,EAAYG,GAAI,CAC9BK,SAAU,eACR,MAAMC,EAAAA,EAAAA,KAAKC,EAAAA,GAAiB,CAC9BX,MAAOY,EAAAA,MAGb,CAOA,UANA,SAAoBZ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,KAAsBL,EAAMM,YAC3E,OAAOQ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWZ,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DS,UAAUC,EAAAA,EAAAA,KAAKX,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,+ECpBO,MAAMY,EAA2C,CACtDG,KAAM,CACJC,IAAK,gIACLC,KAAM,kBACNC,OAAQ,YAEVC,MAAO,CACLH,IAAK,6BACLC,KAAM,kBACNC,OAAQ,YAEVE,SAAU,CACRJ,IAAK,4CACLC,KAAM,UACNC,OAAQ,YAEVG,WAAY,CACVL,IAAK,6DACLC,KAAM,UACNC,OAAQ,YAEVI,QAAS,CACPN,IAAK,0CACLC,KAAM,UACNC,OAAQ,YAEVK,UAAW,CACTP,IAAK,2CACLC,KAAM,SACNC,OAAQ,YAEVM,KAAM,CACJR,IAAK,iDACLC,KAAM,kBACNC,OAAQ,YAEVO,SAAU,CACRT,IAAK,uHACLC,KAAM,WACNC,OAAQ,YAEVQ,IAAK,CACHV,IAAK,oFACLC,KAAM,kBACNC,OAAQ,YAEVS,IAAK,CACHX,IAAK,mCACLC,KAAM,SACNC,OAAQ,YAEVU,SAAU,CACRZ,IAAK,8FACLC,KAAM,UACNC,OAAQ,YAEVW,gBAAiB,CACfb,IAAK,yBACLC,KAAM,kBACNC,OAAQ,YAEVY,sBAAuB,CACrBd,IAAK,wHACLC,KAAM,cACNC,OAAQ,YAEVa,iBAAkB,CAChBf,IAAK,0BACLC,KAAM,kBACNC,OAAQ,YAEVc,uBAAwB,CACtBhB,IAAK,wHACLC,KAAM,cACNC,OAAQ,YAEVT,SAAU,CACRO,IAAK,0GACLC,KAAM,kBACNC,OAAQ,YAEV,0CAA2C,CACzCF,IAAK,2DACLC,KAAM,CAAC,SAAU,UACjBC,OAAQ,aAICe,EAAuC,CAClDC,SAAU,CACRlB,IAAK,qDACLC,KAAM,WACNC,OAAQ,YAEViB,QAAS,CACPnB,IAAK,oDACLC,KAAM,WACNC,OAAQ,Y,uCC5FZ,IAAekB,EAAE,C,uCCAjB,IAAeC,EAAE,C,uCCAjB,IAAeC,EAAE,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/info-card/properties.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/info-card/InfoCardDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {InfoCardProperties} from '@dnb/eufemia/src/components/info-card/InfoCardDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: InfoCardProperties\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const InfoCardProperties: PropertiesTableProps = {\n  text: {\n    doc: 'The text content of the InfoCard, displayed/rendered in a paragraph. To fully customize the content, see `children` property.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  title: {\n    doc: 'The title of the InfoCard.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  centered: {\n    doc: 'Centers the content. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  dropShadow: {\n    doc: 'Sets the drop shadow of the info card. Defaults to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  stretch: {\n    doc: 'Stretch the card to fill the container.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  className: {\n    doc: 'Custom className for the component root.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon: {\n    doc: 'Custom icon. Defaults to the `lightbulb` icon.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  imgProps: {\n    doc: '[Image properties](/uilib/elements/image) applied to the `img` element if the component is used to display an image.',\n    type: 'ImgProps',\n    status: 'optional',\n  },\n  alt: {\n    doc: 'Used in combination with `src` to provide an alt attribute for the image element.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  src: {\n    doc: 'Specifies the path to the image.',\n    type: 'string',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  closeButtonText: {\n    doc: 'The close button text.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  closeButtonAttributes: {\n    doc: 'define any valid Eufemia [Button properties](/uilib/components/button/properties) or HTML attribute inside an object.',\n    type: 'ButtonProps',\n    status: 'optional',\n  },\n  acceptButtonText: {\n    doc: 'The accept button text.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  acceptButtonAttributes: {\n    doc: 'define any valid Eufemia [Button properties](/uilib/components/button/properties) or HTML attribute inside an object.',\n    type: 'ButtonProps',\n    status: 'optional',\n  },\n  children: {\n    doc: 'Can be used to add custom content, which is displayed/rendered between the `text` property and buttons.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const InfoCardEvents: PropertiesTableProps = {\n  onAccept: {\n    doc: 'will be called when user clicks the accept button.',\n    type: 'function',\n    status: 'optional',\n  },\n  onClose: {\n    doc: 'will be called when user clicks the close button.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","InfoCardProperties","wrapper","MDXLayout","text","doc","type","status","title","centered","dropShadow","stretch","className","icon","imgProps","alt","src","skeleton","closeButtonText","closeButtonAttributes","acceptButtonText","acceptButtonAttributes","InfoCardEvents","onAccept","onClose","Th","Tr","Td"],"sourceRoot":""}