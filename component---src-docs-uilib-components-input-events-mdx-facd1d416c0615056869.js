"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[62021],{14256:function(e,n,t){t.r(n);var s=t(52322),l=t(45392);function r(e){const n=Object.assign({h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",em:"em",h3:"h3",p:"p",pre:"pre"},(0,l.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{children:"Events"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Events"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"on_change"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," will be called on value changes made by the user. Returns an object with the value as a string and the native event: ",(0,s.jsx)(n.code,{children:"{ value, event }"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"on_focus"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," will be called on focus set by the user. Returns ",(0,s.jsx)(n.code,{children:"{ value, event }"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"on_key_down"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," will be called on key down by the user. Returns ",(0,s.jsx)(n.code,{children:"{ value, event }"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"on_blur"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," will be called on blur set by the user. Returns ",(0,s.jsx)(n.code,{children:"{ value, event }"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"on_submit"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," will be called on submit button click. Returns ",(0,s.jsx)(n.code,{children:"{ value, event }"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"on_clear"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," will be called on a clear button click. Returns ",(0,s.jsx)(n.code,{children:"{ value, previousValue, event }"}),"."]})]})]})]}),"\n",(0,s.jsx)(n.h3,{children:"Manipulate the input value during typing"}),"\n",(0,s.jsxs)(n.p,{children:["You have two possibilities to manipulate the value while a user is typing. Either you handle the value with your own state, or you return a modified value in the ",(0,s.jsx)(n.code,{children:"on_change"})," event listener:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import { format } from '@dnb/eufemia/components/number-format/NumberUtils'\n\nfunction Component() {\n  const onChangeHandler = ({ value }) => {\n    return format(value)\n  }\n\n  return <Input on_change={onChangeHandler} />\n}\n"})}),"\n",(0,s.jsx)(n.h3,{children:"Prevent setting a new value"}),"\n",(0,s.jsxs)(n.p,{children:["You can use e.g. ",(0,s.jsx)(n.code,{children:"event.preventDefault()"})," during ",(0,s.jsx)(n.code,{children:"on_key_down"}),", or return false during ",(0,s.jsx)(n.code,{children:"on_change"}),". They are not 100% the same user experience, but can both be useful in different use cases."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"function Component() {\n  const onKeyDownHandler = ({ event }) => {\n    event.preventDefault()\n  }\n  const onChangeHandler = ({ value }) => {\n    return false\n  }\n\n  return (\n    <Input on_key_down={onKeyDownHandler} on_change={onChangeHandler} />\n  )\n}\n"})})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(r,e)})):r(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-input-events-mdx-facd1d416c0615056869.js.map