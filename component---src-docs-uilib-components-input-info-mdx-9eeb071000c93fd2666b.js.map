{"version":3,"file":"component---src-docs-uilib-components-input-info-mdx-9eeb071000c93fd2666b.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/input/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/base-fields/String/Examples.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nimport {MultipleOneRow} from '../../extensions/forms/base-fields/String/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    h3: \"h3\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.CurrencyField) _missingMdxReference(\"Examples.CurrencyField\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The input component is an umbrella component for all inputs which share the same style as the classic \", _jsx(_components.code, {\n        children: \"text\"\n      }), \" input field.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Formatted input fields (masked values)\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You may consider to use \", _jsx(_components.a, {\n        href: \"/uilib/components/input-masked/\",\n        children: \"InputMasked\"\n      }), \" for formatted strings and \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/\",\n        children: \"Eufemia Forms\"\n      }), \" fields like \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/base-fields/Number/\",\n        children: \"Number\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/feature-fields/Currency/\",\n        children: \"Currency\"\n      }), \" for formatted numbers:\"]\n    }), \"\\n\", _jsx(Examples.CurrencyField, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Please avoid using the \", _jsx(_components.code, {\n        children: \"maxlength\"\n      }), \" attribute when possible, as it may lower good accessibility. You can instead, use the [TextCounter][/uilib/components/fragments/text-counter/] component.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"But you may also consider to use a multiline input with a \", _jsx(_components.code, {\n        children: \"characterCounter\"\n      }), \":\"]\n    }), \"\\n\", _jsx(MultipleOneRow, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Flex } from '@dnb/eufemia/src'\nimport { Field } from '@dnb/eufemia/src/extensions/forms'\n\nexport const Empty = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        onFocus={(value) => console.log('onFocus', value)}\n        onBlur={(value) => console.log('onBlur', value)}\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Placeholder = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        placeholder=\"Enter a text...\"\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Label = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        label=\"Label text\"\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const LabelAndValue = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        label=\"Label text\"\n        value=\"foo\"\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithHelp = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        label=\"Label text\"\n        value=\"foo\"\n        help={{\n          title: 'Help is available',\n          content:\n            'Take the time to help other people without expecting a reward or gratitude is definitely important in living an optimistic life.',\n        }}\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Capitalize = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        label=\"Label text\"\n        value=\"foo bar\"\n        capitalize\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const HorizontalLayout = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        label=\"Label text\"\n        value=\"foo\"\n        layout=\"horizontal\"\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Widths = () => {\n  return (\n    <ComponentBox hideCode data-visual-test=\"string-widths\">\n      <Flex.Stack>\n        <Field.String\n          label=\"Default width (property omitted)\"\n          value=\"foo\"\n        />\n        <Field.String label=\"Small\" value=\"foo\" width=\"small\" />\n        <Field.String label=\"Medium\" value=\"foo\" width=\"medium\" />\n        <Field.String label=\"Large\" value=\"foo\" width=\"large\" />\n        <Field.String label=\"Stretch\" value=\"foo\" width=\"stretch\" />\n\n        <Field.String\n          label=\"Default width (property omitted)\"\n          value=\"foo\"\n          multiline\n        />\n        <Field.String label=\"Small\" value=\"foo\" width=\"small\" multiline />\n        <Field.String\n          label=\"Medium\"\n          value=\"foo\"\n          width=\"medium\"\n          multiline\n        />\n        <Field.String label=\"Large\" value=\"foo\" width=\"large\" multiline />\n        <Field.String\n          label=\"Stretch\"\n          value=\"foo\"\n          width=\"stretch\"\n          multiline\n        />\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n\nexport const Icons = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        label=\"Icon left\"\n        value=\"foo\"\n        leftIcon=\"check\"\n        onChange={(value) => console.log('onChange', value)}\n      />\n      <Field.String\n        label=\"Icon right\"\n        value=\"foo\"\n        rightIcon=\"loupe\"\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Clear = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        value=\"foo\"\n        onChange={(value) => console.log('onChange', value)}\n        clear\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Disabled = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        value=\"foo\"\n        label=\"Label text\"\n        onChange={(value) => console.log('onChange', value)}\n        disabled\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Info = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        value=\"foo\"\n        label=\"Label text\"\n        onChange={(value) => console.log('onChange', value)}\n        info=\"Useful information (?)\"\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Warning = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        value=\"foo\"\n        label=\"Label text\"\n        onChange={(value) => console.log('onChange', value)}\n        warning=\"I'm warning you...\"\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithError = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        value=\"foo\"\n        label=\"Label text\"\n        onChange={(value) => console.log('onChange', value)}\n        error={new Error('This is what is wrong...')}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const ValidateRequired = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        value=\"foo\"\n        label=\"Label text\"\n        onChange={(value) => console.log('onChange', value)}\n        required\n      />\n    </ComponentBox>\n  )\n}\n\nexport const ValidateMinimumLength = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        value=\"foo\"\n        label=\"Label text (minimum 8 characters)\"\n        onChange={(value) => console.log('onChange', value)}\n        minLength={8}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const ValidateMaximumLengthCustomError = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        value=\"foo\"\n        label=\"Label text (maximum 8 characters)\"\n        onChange={(value) => console.log('onChange', value)}\n        maxLength={8}\n        errorMessages={{\n          maxLength: \"You can't write THAT long.. Max 8 chars!\",\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const ValidatePattern = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        value=\"foo\"\n        label=\"Label text\"\n        onChange={(value) => console.log('onChange', value)}\n        pattern=\"^foo123\"\n      />\n    </ComponentBox>\n  )\n}\n\nexport const SynchronousExternalValidator = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        value=\"foo\"\n        label=\"Label text (minimum 4 characters)\"\n        validator={(value) =>\n          value.length < 4 ? Error('At least 4 characters') : undefined\n        }\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const AsynchronousExternalValidator = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        value=\"foo\"\n        label=\"Label text (minimum 4 characters)\"\n        validator={(value) =>\n          new Promise((resolve) =>\n            setTimeout(\n              () =>\n                resolve(\n                  value.length < 5\n                    ? Error('At least 5 characters')\n                    : undefined,\n                ),\n              1500,\n            ),\n          )\n        }\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const SynchronousExternalBlurValidator = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        value=\"foo\"\n        label=\"Label text (minimum 4 characters)\"\n        onBlurValidator={(value) =>\n          value.length < 4 ? Error('At least 4 characters') : undefined\n        }\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const AsynchronousExternalBlurValidator = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        value=\"foo\"\n        label=\"Label text (minimum 4 characters)\"\n        onBlurValidator={(value) =>\n          new Promise((resolve) =>\n            setTimeout(\n              () =>\n                resolve(\n                  value.length < 5\n                    ? Error('At least 5 characters')\n                    : undefined,\n                ),\n              1500,\n            ),\n          )\n        }\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const MultipleEmpty = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        onChange={(value) => console.log('onChange', value)}\n        multiline\n      />\n    </ComponentBox>\n  )\n}\n\nexport const MultipleOneRow = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        label=\"Label text\"\n        placeholder=\"Enter your text\"\n        multiline\n        rows={1}\n        characterCounter={40}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const MultiplePlaceholder = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        placeholder=\"Enter text here\"\n        onChange={(value) => console.log('onChange', value)}\n        multiline\n      />\n    </ComponentBox>\n  )\n}\n\nexport const MultipleLabelAndValue = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        value=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis in tempus odio, nec interdum orci. Integer vehicula ipsum et risus finibus, vitae commodo ex luctus. Nam viverra sollicitudin dictum. Vivamus maximus dignissim lorem, vitae viverra erat dapibus a.\"\n        label=\"Label text\"\n        onChange={(value) => console.log('onChange', value)}\n        multiline\n      />\n    </ComponentBox>\n  )\n}\n\nexport const MultipleWithHelp = () => {\n  return (\n    <ComponentBox>\n      <Field.String\n        label=\"Label text\"\n        help={{\n          title: 'Help is available',\n          content: 'There is more happiness in giving than in receiving.',\n        }}\n        multiline\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","h3","a","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","children","_jsx","href","MultipleOneRow","id","component","Error","wrapper","MDXLayout","Empty","ComponentBox","Placeholder","Label","LabelAndValue","WithHelp","Capitalize","HorizontalLayout","Widths","hideCode","Icons","Clear","Disabled","Info","Warning","WithError","ValidateRequired","ValidateMinimumLength","ValidateMaximumLengthCustomError","ValidatePattern","SynchronousExternalValidator","AsynchronousExternalValidator","SynchronousExternalBlurValidator","AsynchronousExternalBlurValidator","MultipleEmpty","MultiplePlaceholder","MultipleLabelAndValue","MultipleWithHelp"],"sourceRoot":""}