"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[421],{70559:function(t,e,a){a.r(e);var o=a(52322),n=a(45392),s=a(85179),i=a(15647),r=a(59403);function u(t){const e=Object.assign({h2:"h2",p:"p",strong:"strong",code:"code",h3:"h3"},(0,n.ah)(),t.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:"Events"}),"\n",(0,o.jsx)(s.ZP,{props:i.Ot}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"NB:"})," ",(0,o.jsx)(e.code,{children:"numberValue"})," is returned as a float value and is only returned if the createNumberMask is used by either using ",(0,o.jsx)(e.code,{children:"number_mask"}),", ",(0,o.jsx)(e.code,{children:"currency_mask"}),", ",(0,o.jsx)(e.code,{children:"as_number"})," or ",(0,o.jsx)(e.code,{children:"as_currency"}),"."]}),"\n",(0,o.jsx)(e.h3,{children:"MultiInputMask"}),"\n",(0,o.jsx)(s.ZP,{props:r.RJ})]})}e.default=function(t){void 0===t&&(t={});const{wrapper:e}=Object.assign({},(0,n.ah)(),t.components);return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(u,t)})):u(t)}},15647:function(t,e,a){a.d(e,{Ot:function(){return n},UD:function(){return s},gZ:function(){return o}});const o={as_number:{doc:"Set to `true` to automatically set a number mask based on the given or inherited locale.",type:"boolean",status:"optional"},as_percent:{doc:"Set to `true` to automatically set a number mask with a percentage sign based on the given or inherited locale.",type:"boolean",status:"optional"},as_currency:{doc:"Set to `true` to use `NOK` or give it a currency code e.g. `USD` to automatically set a currency mask based on the given or inherited locale.",type:"boolean",status:"optional"},mask_options:{doc:"Use it to manipulate internal masks. You can use it instead of e.g. `number_mask` or `currency_mask`. All options are listed below.",type:"object",status:"optional"},number_mask:{doc:"Set to `true` to enable the default numbers formatting – or give an `object` containing the number mask properties. More details below. Can be a JSON string as well, containing the number mask properties. Is disabled by default.",type:["boolean","object"],status:"optional"},currency_mask:{doc:'Set to `true` or set the _valuta_ (currency_mask="kr") to enable a custom currency mask – or give an `object` containing the number mask properties. More details below. Can be a JSON string as well, containing the number mask properties. Is disabled by default. Defaults to `kr`.',type:["boolean","object"],status:"optional"},number_format:{doc:"Use an object with [NumberFormat](/uilib/components/number-format/properties).",type:"object",status:"optional"},locale:{doc:"Define the locale to be used in the `as_number` or `as_currency` masked. It will be inherited from the [Eufemia Provider](/uilib/usage/customisation/provider) if not given. Defaults to `nb-NO`.",type:"string",status:"optional"},mask:{doc:"A mask can be defined both as a [RegExp style of characters](https://github.com/text-mask/text-mask/blob/master/componentDocumentation.md#readme) or a callback function. Example below. Defaults to number mask.",type:["RegExp","function"],status:"optional"},show_mask:{doc:"Show mask when input is empty and has no focus. Defaults to `false`.",type:"boolean",status:"optional"},show_guide:{doc:"When `false` is given, it doesn't print out placeholder characters and only adds mask characters when the user reaches them as they're typing. Defaults to `true`.",type:"boolean",status:"optional"},placeholder_char:{doc:"The placeholder character represents the fillable spot in the mask (e.g. `_`). Defaults to invisible space.",type:"string",status:"optional"},keep_char_positions:{doc:"When `true`, adding or deleting characters will not affect the positions of existing characters. Defaults to `false`.",type:"boolean",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"},"[Input](/uilib/components/input/properties)":{doc:"All `Input` properties are supported.",type:"Various",status:"optional"}},n={on_change:{doc:"will be called on value changes made by the user. Returns an object with the value as a string and the native event: `{ value, numberValue, cleanedValue, event }`.",type:"function",status:"optional"},"[Input](/uilib/components/input/events)":{doc:"All `Input` events are supported.",type:"Various",status:"optional"}},s={prefix:{doc:"What to display before the amount. Defaults to an empty string.",type:"string",status:"optional"},suffix:{doc:"What to display after the amount. Defaults to an empty string.",type:"string",status:"optional"},includeThousandsSeparator:{doc:"Whether or not to separate thousands. Defaults to `true`.",type:"boolean",status:"optional"},thousandsSeparatorSymbol:{doc:"Character with which to separate thousands. Defaults to `' '`.",type:"string",status:"optional"},allowDecimal:{doc:"Whether or not to allow the user to enter a fraction with the amount. Defaults to `false`.",type:"boolean",status:"optional"},decimalSymbol:{doc:"Character that will act as a decimal point. Defaults to `','`.",type:"string",status:"optional"},decimalLimit:{doc:"How many digits to allow after the decimal. Defaults to `2`.",type:"number",status:"optional"},integerLimit:{doc:"Limit the length of the integer number. Defaults to `null` for unlimited.",type:"number",status:"optional"},requireDecimal:{doc:"Whether or not to always include a decimal point and placeholder for decimal digits after the integer. Defaults to `false`.",type:"boolean",status:"optional"},allowNegative:{doc:"Whether or not to allow negative numbers. Defaults to `true`.",type:"boolean",status:"optional"},disallowLeadingZeroes:{doc:"Whether or not to allow leading zeroes. Defaults to `false`.",type:"boolean",status:"optional"}}},59403:function(t,e,a){a.d(e,{$H:function(){return s},Ps:function(){return n},RJ:function(){return o}});const o={onChange:{doc:"runs when an input value changes. Has an object parameter with keys matching the id's defined in `inputs`, and values of string. E.g: `{month: string, year: string}`.",type:"function",status:"optional"},onFocus:{doc:"runs when an input gains focus. Has an object parameter with keys matching the id's defined in `inputs`, and values of string. E.g: `{month: string, year: string}`.",type:"function",status:"optional"},onBlur:{doc:"runs when an input lose focus. Has an object parameter with keys matching the id's defined in `inputs`, and values of string. E.g: `{month: string, year: string}`.",type:"function",status:"optional"}},n={label:{doc:"`legend` element describing the group of inputs inside the components.",type:"React.ReactNode",status:"optional"},labelDirection:{doc:"Use to change the label layout direction. Defaults to `horizontal`.",type:["horizontal","vertical"],status:"optional"},inputs:{doc:"array of [MultiInputMaskInput](/uilib/components/input-masked/properties/#multiinputmask-inputs-properties) that defines the inputs in the component. The id's defined here is used to map input value to correct property in `values` parameters used in `onChange`.",type:"array",status:"optional"},values:{doc:"values used for the inputs in the component. Expects an object with keys matching the id's defined in `inputs`.",type:"object",status:"optional"},delimiter:{doc:"character that separates the input inputs.",type:"string",status:"optional"},stretch:{doc:"use `true` in order to stretch the input to the available space. Defaults to `false`.",type:"boolean",status:"optional"},status:{doc:"text with a status message. The style defaults to an error message. You can use true to only get the status color, without a message.`.",type:["React.ReactNode"],status:"optional"},statusState:{doc:"defines the state of the status. It's two statuses [error, info]. Defaults to error.",type:["error","info"],status:"optional"},suffix:{doc:"Text describing the content of the input more than the label. you can also send in a React component, so it gets wrapped inside the Input component.",type:"React.ReactNode",status:"optional"}},s={id:{doc:"(string) Defines input id. This id is also used to map the input value to the correct property on the objects used for `values` and `onChange` parameters.",type:"string",status:"optional"},label:{doc:"Label used by the input. The label itself is hidden, but required to uphold accessibility standards for screen readers.",type:"string",status:"optional"},mask:{doc:"Each RegExp item in the array defines what the mask should be for each subsequent character in the input. The array length sets the inputs size/character limit.",type:"array",status:"optional"},placeholderCharacter:{doc:"Sets the placeholder character used for the input.",type:"string",status:"optional"}}},6210:function(t,e,a){var o=a(30600);e.Z=o.Z},64223:function(t,e,a){var o=a(91859);e.Z=o.Z},41676:function(t,e,a){var o=a(35610);e.Z=o.Z}}]);
//# sourceMappingURL=component---src-docs-uilib-components-input-masked-events-mdx-ca6b767439d9f151b862.js.map