{"version":3,"file":"component---src-docs-uilib-components-input-masked-properties-mdx-022733c3d15808db9d1c.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/components/input-masked/InputMaskedDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/components/input-masked/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../shared/types'\n\nexport const inputMaskedProperties: PropertiesTableProps = {\n  as_number: {\n    doc: 'Set to `true` to automatically set a number mask based on the given or inherited locale.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  as_percent: {\n    doc: 'Set to `true` to automatically set a number mask with a percentage sign based on the given or inherited locale.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  as_currency: {\n    doc: 'Set to `true` to use `NOK` or give it a currency code e.g. `USD` to automatically set a currency mask based on the given or inherited locale.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  mask_options: {\n    doc: 'Use it to manipulate internal masks. You can use it instead of e.g. `number_mask` or `currency_mask`. All options are listed below.',\n    type: 'object',\n    status: 'optional',\n  },\n  number_mask: {\n    doc: 'Set to `true` to enable the default numbers formatting – or give an `object` containing the number mask properties. More details below. Can be a JSON string as well, containing the number mask properties. Is disabled by default.',\n    type: ['boolean', 'object'],\n    status: 'optional',\n  },\n  currency_mask: {\n    doc: 'Set to `true` or set the _valuta_ (currency_mask=\"kr\") to enable a custom currency mask – or give an `object` containing the number mask properties. More details below. Can be a JSON string as well, containing the number mask properties. Is disabled by default. Defaults to `kr`.',\n    type: ['boolean', 'object'],\n    status: 'optional',\n  },\n  number_format: {\n    doc: 'Use an object with [NumberFormat](/uilib/components/number-format/properties).',\n    type: 'object',\n    status: 'optional',\n  },\n  locale: {\n    doc: 'Define the locale to be used in the `as_number` or `as_currency` masked. It will be inherited from the [Eufemia Provider](/uilib/usage/customisation/provider) if not given. Defaults to `nb-NO`.',\n    type: 'string',\n    status: 'optional',\n  },\n  mask: {\n    doc: 'A mask can be defined both as a [RegExp style of characters](https://github.com/text-mask/text-mask/blob/master/componentDocumentation.md#readme) or a callback function. Example below. Defaults to number mask.',\n    type: ['RegExp', 'function'],\n    status: 'optional',\n  },\n  show_mask: {\n    doc: 'Show mask when input is empty and has no focus. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  show_guide: {\n    doc: \"When `false` is given, it doesn't print out placeholder characters and only adds mask characters when the user reaches them as they're typing. Defaults to `true`.\",\n    type: 'boolean',\n    status: 'optional',\n  },\n  placeholder_char: {\n    doc: 'The placeholder character represents the fillable spot in the mask (e.g. `_`). Defaults to invisible space.',\n    type: 'string',\n    status: 'optional',\n  },\n  keep_char_positions: {\n    doc: 'When `true`, adding or deleting characters will not affect the positions of existing characters. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n  '[Input](/uilib/components/input/properties)': {\n    doc: 'All `Input` properties are supported.',\n    type: 'Various',\n    status: 'optional',\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {inputMaskedProperties} from '@dnb/eufemia/src/components/input-masked/InputMaskedDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    h3: \"h3\",\n    pre: \"pre\",\n    a: \"a\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: inputMaskedProperties\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Number mask properties\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The number mask is used for all kinds of number based masks, like:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Locale based masks:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"as_number\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"as_currency\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"as_percent\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Static masks:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"number_mask\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"currency_mask\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can \", _jsx(_components.code, {\n        children: \"mask_options\"\n      }), \" to manipulate the options.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Defaults to Norwegian number format.\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Properties\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"prefix\"\n            })\n          }), _jsx(_components.td, {\n            children: \"(string): What to display before the amount. Defaults to an empty string.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"suffix\"\n            })\n          }), _jsx(_components.td, {\n            children: \"(string): What to display after the amount. Defaults to an empty string.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"includeThousandsSeparator\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"(boolean): Whether or not to separate thousands. Defaults to to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"thousandsSeparatorSymbol\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"(string): Character with which to separate thousands. Defaults to \", _jsx(_components.code, {\n              children: \"' '\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"allowDecimal\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"(boolean): Whether or not to allow the user to enter a fraction with the amount. Defaults to \", _jsx(_components.code, {\n              children: \"false\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"decimalSymbol\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"(string): Character that will act as a decimal point. Defaults to \", _jsx(_components.code, {\n              children: \"','\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"decimalLimit\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"(number): How many digits to allow after the decimal. Defaults to \", _jsx(_components.code, {\n              children: \"2\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"integerLimit\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"(number): Limit the length of the integer number. Defaults to \", _jsx(_components.code, {\n              children: \"null\"\n            }), \" for unlimited.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"requireDecimal\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"(boolean): Whether or not to always include a decimal point and placeholder for decimal digits after the integer. Defaults to \", _jsx(_components.code, {\n              children: \"false\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"allowNegative\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"(boolean): Whether or not to allow negative numbers. Defaults to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"disallowLeadingZeroes\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"(boolean): Whether or not to allow leading zeroes. Defaults to \", _jsx(_components.code, {\n              children: \"false\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Custom number mask usage\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The number mask is included and can be set with the \", _jsx(_components.code, {\n        children: \"number_mask\"\n      }), \" property.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"\\n// 1. Use the desired configurations\\nconst numberMask = {\\n  prefix: '',\\n  suffix: ',- kr'\\n}\\n\\n// 2. Then pass 'numberMask' to the InputMasked component as the number_mask\\n<InputMasked number_mask={numberMask} ... />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"But in case you have to create the mask by yourself, you can do so:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import createNumberMask from '@dnb/eufemia/components/input-masked/addons/createNumberMask'\\n\\n// 1. Create the 'numberMask' with your desired configurations\\nconst numberMask = createNumberMask({\\n  prefix: '',\\n  suffix: ',- kr'\\n})\\n\\n// 2. Then pass 'numberMask' to the InputMasked component as the mask\\n<InputMasked mask={numberMask} ... />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Email mask\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import emailMask from '@dnb/eufemia/components/input-masked/addons/emailMask'\\n\\nrender(\\n  <InputMasked\\n    label=\\\"Email:\\\"\\n    mask={emailMask}\\n    placeholder=\\\"@.\\\"\\n    keep_placeholder={true}\\n  />,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Read more about other addons \", _jsx(_components.a, {\n        href: \"https://github.com/text-mask/text-mask\",\n        children: \"on the open-source project\"\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Multi-input mask\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Properties\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"label\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.em, {\n              children: \"(optional)\"\n            }), \" \", _jsx(_components.code, {\n              children: \"legend\"\n            }), \" element describing the group of inputs inside the components.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"labelDirection\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.em, {\n              children: \"(optional)\"\n            }), \" Use to change the label layout direction. Defaults to \", _jsx(_components.code, {\n              children: \"horizontal\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"inputs\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"array of \", _jsx(_components.a, {\n              href: \"/uilib/components/input-masked/properties/#multiinputmask-inputs-properties\",\n              children: \"MultiInputMaskInput\"\n            }), \" that defines the inputs in the component. The id's defined here is used to map input value to correct property in \", _jsx(_components.code, {\n              children: \"values\"\n            }), \" parameters used in \", _jsx(_components.code, {\n              children: \"onChange\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"values\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.em, {\n              children: \"(optional)\"\n            }), \" values used for the inputs in the component. Expects an object with keys matching the id's defined in \", _jsx(_components.code, {\n              children: \"inputs\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"delimiter\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.em, {\n              children: \"(optional)\"\n            }), \" character that separates the input inputs.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"stretch\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.em, {\n              children: \"(optional)\"\n            }), \" use \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" in order to stretch the input to the available space. Defaults to false.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"status\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.em, {\n              children: \"(optional)\"\n            }), \" text with a status message. The style defaults to an error message. You can use true to only get the status color, without a message.`.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"statusState\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.em, {\n              children: \"(optional)\"\n            }), \" defines the state of the status. Currently, there are two statuses [error, info]. Defaults to error.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"suffix\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.em, {\n              children: \"(optional)\"\n            }), \" Text describing the content of the input more than the label. you can also send in a React component, so it gets wrapped inside the Input component.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"MultiInputMask inputs properties\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Properties\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"id\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"(string) Defines input id. This id is also used to map the input value to the correct property on the objects used for \", _jsx(_components.code, {\n              children: \"values\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"onChange\"\n            }), \" parameters.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"label\"\n            })\n          }), _jsx(_components.td, {\n            children: \"(string) Label used by the input. The label itself is hidden, but required to uphold accessibility standards for screen readers.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"mask\"\n            })\n          }), _jsx(_components.td, {\n            children: \"(array) Each RegExp item in the array defines what the mask should be for each subsequent character in the input. The array length sets the inputs size/character limit.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"placeholderCharacter\"\n            })\n          }), _jsx(_components.td, {\n            children: \"(string) Sets the placeholder character used for the input.\"\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td:not(.description) {\n    white-space: nowrap;\n  }\n`\n\nconst colors = {\n  type: {\n    default: 'var(--color-success-green)',\n    primitive: 'var(--color-success-green)',\n    string: 'var(--color-fire-red)',\n  },\n  value: {\n    default: 'var(--color-success-green)',\n    undefined: 'var(--color-black-55)',\n    string: 'var(--color-fire-red)',\n  },\n}\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = isString(children)\n          ? colors.type.string\n          : isPrimitive(children)\n          ? colors.type.primitive\n          : colors.type.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n      case 'value': {\n        style.color = isString(children)\n          ? colors.value.string\n          : children === 'undefined' || children === 'null'\n          ? colors.value.undefined\n          : colors.value.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td className=\"description\">\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th className=\"description\">Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\nfunction isString(str: string) {\n  return [\"'\", '\"', '`'].includes(str.substring(0, 1))\n}\n\nfunction isPrimitive(type: string) {\n  return [\n    'boolean',\n    'true',\n    'false',\n    'number',\n    'bigint',\n    'string',\n    'symbol',\n  ].includes(typeWithoutArray(type))\n}\n\nfunction typeWithoutArray(type: string) {\n  if (type.endsWith('[]')) {\n    return type.slice(0, -2)\n  } else if (type.startsWith('Array<') && type.endsWith('>')) {\n    return type.slice(6, -1)\n  }\n  return type\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('[')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["inputMaskedProperties","as_number","doc","type","status","as_percent","as_currency","mask_options","number_mask","currency_mask","number_format","locale","mask","show_mask","show_guide","placeholder_char","keep_char_positions","_createMdxContent","props","_components","Object","assign","h2","p","strong","ul","li","code","table","thead","tr","th","tbody","td","h3","pre","a","em","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","className","href","wrapper","MDXLayout","basicComponents","StyledTable","_styled","Table","target","name","styles","colors","default","primitive","string","undefined","FormattedCode","_ref","variant","strikethrough","style","rest","textDecoration","color","isString","includes","endsWith","slice","startsWith","typeWithoutArray","background","boxShadow","_ref2","valueType","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","defaultValue","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","str","substring","forEach","replace","RegExp"],"sourceRoot":""}