"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[5593],{30503:function(e,t,s){s.r(t),s.d(t,{default:function(){return d}});var n=s(52322),r=s(45392),i=s(85179);const a={as_number:{doc:"Set to `true` to automatically set a number mask based on the given or inherited locale.",type:"boolean",status:"optional"},as_percent:{doc:"Set to `true` to automatically set a number mask with a percentage sign based on the given or inherited locale.",type:"boolean",status:"optional"},as_currency:{doc:"Set to `true` to use `NOK` or give it a currency code e.g. `USD` to automatically set a currency mask based on the given or inherited locale.",type:"boolean",status:"optional"},mask_options:{doc:"Use it to manipulate internal masks. You can use it instead of e.g. `number_mask` or `currency_mask`. All options are listed below.",type:"object",status:"optional"},number_mask:{doc:"Set to `true` to enable the default numbers formatting – or give an `object` containing the number mask properties. More details below. Can be a JSON string as well, containing the number mask properties. Is disabled by default.",type:["boolean","object"],status:"optional"},currency_mask:{doc:'Set to `true` or set the _valuta_ (currency_mask="kr") to enable a custom currency mask – or give an `object` containing the number mask properties. More details below. Can be a JSON string as well, containing the number mask properties. Is disabled by default. Defaults to `kr`.',type:["boolean","object"],status:"optional"},number_format:{doc:"Use an object with [NumberFormat](/uilib/components/number-format/properties) e.g. `{ omit_rounding: false }`.",type:"object",status:"optional"},locale:{doc:"Define the locale to be used in the `as_number` or `as_currency` masked. It will be inherited from the [Eufemia Provider](/uilib/usage/customisation/provider) if not given. Defaults to `nb-NO`.",type:"string",status:"optional"},mask:{doc:"A mask can be defined both as a [RegExp style of characters](https://github.com/text-mask/text-mask/blob/master/componentDocumentation.md#readme) or a callback function. Example below.",type:["RegExp","function"],status:"optional"},show_mask:{doc:"Show mask when input is empty and has no focus. Defaults to `false`.",type:"boolean",status:"optional"},show_guide:{doc:"When `false` is given, it doesn't print out placeholder characters and only adds mask characters when the user reaches them as they're typing. Defaults to `true`.",type:"boolean",status:"optional"},placeholder_char:{doc:"The placeholder character represents the fillable spot in the mask (e.g. `_`). Defaults to invisible space.",type:"string",status:"optional"},keep_char_positions:{doc:"When `true`, adding or deleting characters will not affect the positions of existing characters. Defaults to `false`.",type:"boolean",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"},"[Input](/uilib/components/input/properties)":{doc:"All `Input` properties are supported.",type:"Various",status:"optional"}};function o(e){const t=Object.assign({h2:"h2",p:"p",strong:"strong",ul:"ul",li:"li",code:"code",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h3:"h3",pre:"pre",a:"a",em:"em"},(0,r.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{children:"Properties"}),"\n",(0,n.jsx)(i.Z,{props:a}),"\n",(0,n.jsx)(t.h2,{children:"Number mask properties"}),"\n",(0,n.jsx)(t.p,{children:"The number mask is used for all kinds of number based masks, like:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Locale based masks:"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.code,{children:"as_number"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.code,{children:"as_currency"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.code,{children:"as_percent"})}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Static masks:"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.code,{children:"number_mask"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.code,{children:"currency_mask"})}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["You can ",(0,n.jsx)(t.code,{children:"mask_options"})," to manipulate the options."]}),"\n",(0,n.jsx)(t.p,{children:"Defaults to Norwegian number format."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Properties"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"prefix"})}),(0,n.jsx)(t.td,{children:"(string): What to display before the amount. Defaults to an empty string."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"suffix"})}),(0,n.jsx)(t.td,{children:"(string): What to display after the amount. Defaults to an empty string."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"includeThousandsSeparator"})}),(0,n.jsxs)(t.td,{children:["(boolean): Whether or not to separate thousands. Defaults to to ",(0,n.jsx)(t.code,{children:"true"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"thousandsSeparatorSymbol"})}),(0,n.jsxs)(t.td,{children:["(string): Character with which to separate thousands. Defaults to ",(0,n.jsx)(t.code,{children:"' '"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"allowDecimal"})}),(0,n.jsxs)(t.td,{children:["(boolean): Whether or not to allow the user to enter a fraction with the amount. Defaults to ",(0,n.jsx)(t.code,{children:"false"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"decimalSymbol"})}),(0,n.jsxs)(t.td,{children:["(string): Character that will act as a decimal point. Defaults to ",(0,n.jsx)(t.code,{children:"','"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"decimalLimit"})}),(0,n.jsxs)(t.td,{children:["(number): How many digits to allow after the decimal. Defaults to ",(0,n.jsx)(t.code,{children:"2"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"integerLimit"})}),(0,n.jsxs)(t.td,{children:["(number): Limit the length of the integer number. Defaults to ",(0,n.jsx)(t.code,{children:"null"})," for unlimited."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"requireDecimal"})}),(0,n.jsxs)(t.td,{children:["(boolean): Whether or not to always include a decimal point and placeholder for decimal digits after the integer. Defaults to ",(0,n.jsx)(t.code,{children:"false"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"allowNegative"})}),(0,n.jsxs)(t.td,{children:["(boolean): Whether or not to allow negative numbers. Defaults to ",(0,n.jsx)(t.code,{children:"true"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"disallowLeadingZeroes"})}),(0,n.jsxs)(t.td,{children:["(boolean): Whether or not to allow leading zeroes. Defaults to ",(0,n.jsx)(t.code,{children:"false"}),"."]})]})]})]}),"\n",(0,n.jsx)(t.h3,{children:"Custom number mask usage"}),"\n",(0,n.jsxs)(t.p,{children:["The number mask is included and can be set with the ",(0,n.jsx)(t.code,{children:"number_mask"})," property."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:"\n// 1. Use the desired configurations\nconst numberMask = {\n  prefix: '',\n  suffix: ',- kr'\n}\n\n// 2. Then pass 'numberMask' to the InputMasked component as the number_mask\n<InputMasked number_mask={numberMask} ... />\n"})}),"\n",(0,n.jsx)(t.p,{children:"But in case you have to create the mask by yourself, you can do so:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:"import createNumberMask from '@dnb/eufemia/components/input-masked/addons/createNumberMask'\n\n// 1. Create the 'numberMask' with your desired configurations\nconst numberMask = createNumberMask({\n  prefix: '',\n  suffix: ',- kr'\n})\n\n// 2. Then pass 'numberMask' to the InputMasked component as the mask\n<InputMasked mask={numberMask} ... />\n"})}),"\n",(0,n.jsx)(t.h2,{children:"Email mask"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:'import emailMask from \'@dnb/eufemia/components/input-masked/addons/emailMask\'\n\nrender(\n  <InputMasked\n    label="Email:"\n    mask={emailMask}\n    placeholder="@."\n    keep_placeholder={true}\n  />,\n)\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Read more about other addons ",(0,n.jsx)(t.a,{href:"https://github.com/text-mask/text-mask",children:"on the open-source project"})]}),"\n",(0,n.jsx)(t.h2,{children:"Multi-input mask"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Properties"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"label"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," ",(0,n.jsx)(t.code,{children:"legend"})," element describing the group of inputs inside the components."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"labelDirection"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," Use to change the label layout direction. Defaults to ",(0,n.jsx)(t.code,{children:"horizontal"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"inputs"})}),(0,n.jsxs)(t.td,{children:["array of ",(0,n.jsx)(t.a,{href:"/uilib/components/input-masked/properties/#multiinputmask-inputs-properties",children:"MultiInputMaskInput"})," that defines the inputs in the component. The id's defined here is used to map input value to correct property in ",(0,n.jsx)(t.code,{children:"values"})," parameters used in ",(0,n.jsx)(t.code,{children:"onChange"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"values"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," values used for the inputs in the component. Expects an object with keys matching the id's defined in ",(0,n.jsx)(t.code,{children:"inputs"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"delimiter"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," character that separates the input inputs."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"stretch"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," use ",(0,n.jsx)(t.code,{children:"true"})," in order to stretch the input to the available space. Defaults to false."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"status"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," text with a status message. The style defaults to an error message. You can use true to only get the status color, without a message.`."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"statusState"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," defines the state of the status. Currently, there are two statuses [error, info]. Defaults to error."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"suffix"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," Text describing the content of the input more than the label. you can also send in a React component, so it gets wrapped inside the Input component."]})]})]})]}),"\n",(0,n.jsx)(t.h3,{children:"MultiInputMask inputs properties"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Properties"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"id"})}),(0,n.jsxs)(t.td,{children:["(string) Defines input id. This id is also used to map the input value to the correct property on the objects used for ",(0,n.jsx)(t.code,{children:"values"})," and ",(0,n.jsx)(t.code,{children:"onChange"})," parameters."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"label"})}),(0,n.jsx)(t.td,{children:"(string) Label used by the input. The label itself is hidden, but required to uphold accessibility standards for screen readers."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"mask"})}),(0,n.jsx)(t.td,{children:"(array) Each RegExp item in the array defines what the mask should be for each subsequent character in the input. The array length sets the inputs size/character limit."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"placeholderCharacter"})}),(0,n.jsx)(t.td,{children:"(string) Sets the placeholder character used for the input."})]})]})]})]})}var d=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,r.ah)(),e.components);return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(o,e)})):o(e)}},85179:function(e,t,s){s.d(t,{Z:function(){return m}});var n=s(70894),r=s(61185),i=s(55560),a=s(41676),o=s(6210),d=s(30730),c=s(64223),l=s(66485),h=s(1864),u=s(88504),p=s(52322);const x={...h.L,p:e=>(0,p.jsx)("span",{...e})},j=(0,n.Z)(i.ZP,{target:"e13h2c840"})({name:"1qdk5x4",styles:"td{white-space:nowrap;}"});function m(e){let{props:t,valueType:s="string",camelCase:n,omit:h}=e;const m=Object.keys(t),g=Object.entries(t).map((e=>{let[t,{type:i,doc:c,status:j}]=e;return h&&h.includes(t)?null:("string"==typeof i&&String(i).includes("{valueType}")&&(i=s),(0,p.jsxs)(a.Z,{children:[(0,p.jsx)(o.Z,{children:(0,p.jsx)(u.Z,{children:(0,p.jsx)(d.Z,{children:f(n?(0,l.zW)(t):t)})})}),(0,p.jsx)(o.Z,{children:Array.isArray(i)?i.map((e=>(0,p.jsx)(u.Z,{children:(0,p.jsx)(d.Z,{children:e})},e))).reduce(((e,t)=>(0,p.jsxs)(p.Fragment,{children:[e," or ",t]}))):(0,p.jsx)(u.Z,{children:(0,p.jsx)(d.Z,{children:i})})}),(0,p.jsxs)(o.Z,{children:[(0,p.jsxs)("em",{children:["(",j,")"]})," ",(0,p.jsx)(r.D,{components:x,children:n?b(c,m):c})]})]},t))}));return(0,p.jsx)(i.ZP.ScrollView,{children:(0,p.jsxs)(j,{children:[(0,p.jsx)("thead",{children:(0,p.jsxs)(a.Z,{children:[(0,p.jsx)(c.Z,{children:"Property"}),(0,p.jsx)(c.Z,{children:"Type"}),(0,p.jsx)(c.Z,{children:"Description"})]})}),(0,p.jsx)("tbody",{children:g})]})})}function b(e,t){return t.forEach((t=>{e=e.replace(new RegExp(t,"g"),(0,l.zW)(t))})),e}function f(e){return e.includes("/")?(0,p.jsx)(r.D,{components:x,children:e}):e}},64223:function(e,t,s){var n=s(91859);t.Z=n.Z},41676:function(e,t,s){var n=s(47048);t.Z=n.Z}}]);
//# sourceMappingURL=component---src-docs-uilib-components-input-masked-properties-mdx-4fa18b458adce211fb53.js.map