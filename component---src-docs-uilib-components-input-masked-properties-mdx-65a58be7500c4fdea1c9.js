"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[61175],{69094:function(e,t,n){var a=n(23722);t.A=a.A},81908:function(e,t,n){var a=n(94515);t.A=a.A},85099:function(e,t,n){n.d(t,{gg:function(){return s},jg:function(){return o},wW:function(){return a}});const a={onChange:{doc:"runs when an input value changes. Has an object parameter with keys matching the id's defined in `inputs`, and values of string. E.g: `{month: string, year: string}`.",type:"function",status:"optional"},onFocus:{doc:"runs when an input gains focus. Has an object parameter with keys matching the id's defined in `inputs`, and values of string. E.g: `{month: string, year: string}`.",type:"function",status:"optional"},onBlur:{doc:"runs when an input lose focus. Has an object parameter with keys matching the id's defined in `inputs`, and values of string. E.g: `{month: string, year: string}`.",type:"function",status:"optional"}},s={label:{doc:"`legend` element describing the group of inputs inside the components.",type:"React.ReactNode",status:"optional"},labelDirection:{doc:"Use to change the label layout direction. Defaults to `horizontal`.",type:["horizontal","vertical"],status:"optional"},inputs:{doc:"array of [MultiInputMaskInput](/uilib/components/input-masked/properties/#multiinputmask-inputs-properties) that defines the inputs in the component. The id's defined here is used to map input value to correct property in `values` parameters used in `onChange`.",type:"array",status:"optional"},values:{doc:"values used for the inputs in the component. Expects an object with keys matching the id's defined in `inputs`.",type:"object",status:"optional"},delimiter:{doc:"character that separates the input inputs.",type:"string",status:"optional"},stretch:{doc:"use `true` in order to stretch the input to the available space. Defaults to `false`.",type:"boolean",status:"optional"},status:{doc:"text with a status message. The style defaults to an error message. You can use true to only get the status color, without a message.`.",type:["React.ReactNode"],status:"optional"},statusState:{doc:"defines the state of the status. It's two statuses [error, info]. Defaults to error.",type:["error","info"],status:"optional"},suffix:{doc:"Text describing the content of the input more than the label. you can also send in a React component, so it gets wrapped inside the Input component.",type:"React.ReactNode",status:"optional"}},o={id:{doc:"(string) Defines input id. This id is also used to map the input value to the correct property on the objects used for `values` and `onChange` parameters.",type:"string",status:"optional"},label:{doc:"Label used by the input. The label itself is hidden, but required to uphold accessibility standards for screen readers.",type:"string",status:"optional"},mask:{doc:"Each RegExp item in the array defines what the mask should be for each subsequent character in the input. The array length sets the inputs size/character limit.",type:"array",status:"optional"},placeholderCharacter:{doc:"Sets the placeholder character used for the input.",type:"string",status:"optional"}}},91950:function(e,t,n){n.d(t,{Bz:function(){return s},Xv:function(){return o},rq:function(){return a}});const a={as_number:{doc:"Set to `true` to automatically set a number mask based on the given or inherited locale.",type:"boolean",status:"optional"},as_percent:{doc:"Set to `true` to automatically set a number mask with a percentage sign based on the given or inherited locale.",type:"boolean",status:"optional"},as_currency:{doc:"Set to `true` to use `NOK` or give it a currency code e.g. `USD` to automatically set a currency mask based on the given or inherited locale.",type:"boolean",status:"optional"},mask_options:{doc:"Use it to manipulate internal masks. You can use it instead of e.g. `number_mask` or `currency_mask`. All options are listed below.",type:"object",status:"optional"},number_mask:{doc:"Set to `true` to enable the default numbers formatting – or give an `object` containing the number mask properties. More details below. Can be a JSON string as well, containing the number mask properties. Is disabled by default.",type:["boolean","object"],status:"optional"},currency_mask:{doc:'Set to `true` or set the _valuta_ (currency_mask="kr") to enable a custom currency mask – or give an `object` containing the number mask properties. More details below. Can be a JSON string as well, containing the number mask properties. Is disabled by default. Defaults to `kr`.',type:["boolean","object"],status:"optional"},number_format:{doc:"Use an object with [NumberFormat](/uilib/components/number-format/properties).",type:"object",status:"optional"},locale:{doc:"Define the locale to be used in the `as_number` or `as_currency` masked. It will be inherited from the [Eufemia Provider](/uilib/usage/customisation/provider) if not given. Defaults to `nb-NO`.",type:"string",status:"optional"},mask:{doc:"A mask can be defined both as a [RegExp style of characters](https://github.com/text-mask/text-mask/blob/master/componentDocumentation.md#readme) or a callback function. Example below. Defaults to number mask.",type:["RegExp","function"],status:"optional"},show_mask:{doc:"Show mask when input is empty and has no focus. Defaults to `false`.",type:"boolean",status:"optional"},show_guide:{doc:"When `false` is given, it doesn't print out placeholder characters and only adds mask characters when the user reaches them as they're typing. Defaults to `true`.",type:"boolean",status:"optional"},placeholder_char:{doc:"The placeholder character represents the fillable spot in the mask (e.g. `_`). Defaults to invisible space.",type:"string",status:"optional"},keep_char_positions:{doc:"When `true`, adding or deleting characters will not affect the positions of existing characters. Defaults to `false`.",type:"boolean",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"},"[Input](/uilib/components/input/properties)":{doc:"All `Input` properties are supported.",type:"Various",status:"optional"}},s={on_change:{doc:"will be called on value changes made by the user. Returns an object with the value as a string and the native event: `{ value, numberValue, cleanedValue, event }`.",type:"function",status:"optional"},"[Input](/uilib/components/input/events)":{doc:"All `Input` events are supported.",type:"Various",status:"optional"}},o={prefix:{doc:"What to display before the amount. Defaults to an empty string.",type:"string",status:"optional"},suffix:{doc:"What to display after the amount. Defaults to an empty string.",type:"string",status:"optional"},includeThousandsSeparator:{doc:"Whether or not to separate thousands. Defaults to `true`.",type:"boolean",status:"optional"},thousandsSeparatorSymbol:{doc:"Character with which to separate thousands. Defaults to `' '`.",type:"string",status:"optional"},allowDecimal:{doc:"Whether or not to allow the user to enter a fraction with the amount. Defaults to `false`.",type:"boolean",status:"optional"},decimalSymbol:{doc:"Character that will act as a decimal point. Defaults to `','`.",type:"string",status:"optional"},decimalLimit:{doc:"How many digits to allow after the decimal. Defaults to `2`.",type:"number",status:"optional"},integerLimit:{doc:"Limit the length of the integer number. Defaults to `null` for unlimited.",type:"number",status:"optional"},requireDecimal:{doc:"Whether or not to always include a decimal point and placeholder for decimal digits after the integer. Defaults to `false`.",type:"boolean",status:"optional"},allowNegative:{doc:"Whether or not to allow negative numbers. Defaults to `true`.",type:"boolean",status:"optional"},disallowLeadingZeroes:{doc:"Whether or not to allow leading zeroes during typing. *A leading zero is any 0 digit that comes before the first nonzero digit in a number string in positional notation* - [wikipedia](https://en.wikipedia.org/wiki/Leading_zero). Defaults to `false`.",type:"boolean",status:"optional"}}},92034:function(e,t,n){var a=n(31666);t.A=a.A},93137:function(e,t,n){n.r(t);var a=n(31085),s=n(71184),o=n(15616),i=n(91950),r=n(85099);function l(e){const t=Object.assign({h2:"h2",p:"p",strong:"strong",ul:"ul",li:"li",code:"code",h3:"h3",pre:"pre",a:"a"},(0,s.R)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{children:"Properties"}),"\n",(0,a.jsx)(o.Ay,{props:i.rq}),"\n",(0,a.jsx)(t.h2,{children:"Number mask properties"}),"\n",(0,a.jsx)(t.p,{children:"The number mask is used for all kinds of number based masks, like:"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Locale based masks:"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"as_number"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"as_currency"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"as_percent"})}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Static masks:"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"number_mask"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"currency_mask"})}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["You can ",(0,a.jsx)(t.code,{children:"mask_options"})," to manipulate the options."]}),"\n",(0,a.jsx)(t.p,{children:"Defaults to Norwegian number format."}),"\n",(0,a.jsx)(o.Ay,{props:i.Xv}),"\n",(0,a.jsx)(t.h3,{children:"Custom number mask usage"}),"\n",(0,a.jsxs)(t.p,{children:["The number mask is included and can be set with the ",(0,a.jsx)(t.code,{children:"number_mask"})," property."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"\n// 1. Use the desired configurations\nconst numberMask = {\n  prefix: '',\n  suffix: ',- kr'\n}\n\n// 2. Then pass 'numberMask' to the InputMasked component as the number_mask\n<InputMasked number_mask={numberMask} ... />\n"})}),"\n",(0,a.jsx)(t.p,{children:"But in case you have to create the mask by yourself, you can do so:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"import createNumberMask from '@dnb/eufemia/components/input-masked/addons/createNumberMask'\n\n// 1. Create the 'numberMask' with your desired configurations\nconst numberMask = createNumberMask({\n  prefix: '',\n  suffix: ',- kr'\n})\n\n// 2. Then pass 'numberMask' to the InputMasked component as the mask\n<InputMasked mask={numberMask} ... />\n"})}),"\n",(0,a.jsx)(t.h2,{children:"Email mask"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:'import emailMask from \'@dnb/eufemia/components/input-masked/addons/emailMask\'\n\nrender(\n  <InputMasked\n    label="Email:"\n    mask={emailMask}\n    placeholder="@."\n    keep_placeholder={true}\n  />,\n)\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Read more about other addons ",(0,a.jsx)(t.a,{href:"https://github.com/text-mask/text-mask",children:"on the open-source project"})]}),"\n",(0,a.jsx)(t.h2,{children:"Multi-input mask"}),"\n",(0,a.jsx)(o.Ay,{props:r.gg}),"\n",(0,a.jsx)(t.h3,{children:"MultiInputMask inputs properties"}),"\n",(0,a.jsx)(o.Ay,{props:r.jg})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,s.R)(),e.components);return t?(0,a.jsx)(t,Object.assign({},e,{children:(0,a.jsx)(l,e)})):l(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-input-masked-properties-mdx-65a58be7500c4fdea1c9.js.map