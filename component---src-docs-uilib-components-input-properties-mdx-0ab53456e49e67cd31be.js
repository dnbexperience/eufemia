"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[80283],{31939:function(e,t,n){n.r(t);var s=n(52322),d=n(45392);function i(e){const t=Object.assign({h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",em:"em",a:"a",strong:"strong"},(0,d.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{children:"Properties"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Properties"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"value"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," the content value of the input."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"align"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," defines the text alignment of the input. Can be ",(0,s.jsx)(t.code,{children:"left"}),", ",(0,s.jsx)(t.code,{children:"right"})," or ",(0,s.jsx)(t.code,{children:"center"}),". Defaults to ",(0,s.jsx)(t.code,{children:"left"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"label"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," prepends the Form Label component. If no ID is provided, a random ID is created."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"label_direction"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," use ",(0,s.jsx)(t.code,{children:'label_direction="vertical"'})," to change the label layout direction. Defaults to ",(0,s.jsx)(t.code,{children:"horizontal"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"label_sr_only"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," use ",(0,s.jsx)(t.code,{children:"true"})," to make the label only readable by screen readers."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"status"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," text with a status message. The style defaults to an error message. You can use ",(0,s.jsx)(t.code,{children:"true"})," to only get the status color, without a message."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"status_state"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," defines the state of the status. Currently, there are two statuses ",(0,s.jsx)(t.code,{children:"[error, info]"}),". Defaults to ",(0,s.jsx)(t.code,{children:"error"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"status_props"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," use an object to define additional FormStatus properties."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"globalStatus"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," the ",(0,s.jsx)(t.a,{href:"/uilib/components/global-status/properties/#configuration-object",children:"configuration"})," used for the target ",(0,s.jsx)(t.a,{href:"/uilib/components/global-status",children:"GlobalStatus"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"placeholder"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," the placeholder which shows up once the input value is empty"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"icon"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," icon to show before or after the input / placeholder. Can be either a string defining a primary icon or a Component using an SVG icon of either 16px or 24px."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"icon_position"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," defines the position of icon inside the input. Set to ",(0,s.jsx)(t.code,{children:"left"})," or ",(0,s.jsx)(t.code,{children:"right"}),". Defaults to ",(0,s.jsx)(t.code,{children:"left"})," if not set."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"icon_size"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," the icon size of the icon shows. Defaults to ",(0,s.jsx)(t.code,{children:"medium"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"keep_placeholder"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," set to ",(0,s.jsx)(t.code,{children:"true"})," in case the ",(0,s.jsx)(t.code,{children:"placeholder"})," has to be kept during focus. By default, the placeholder disappears on focus."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"input_class"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," in case we have to set a custom input class."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"type"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," choose between ",(0,s.jsx)(t.code,{children:"text"}),", ",(0,s.jsx)(t.code,{children:"number"}),", ",(0,s.jsx)(t.code,{children:"email"}),", ",(0,s.jsx)(t.code,{children:"password"}),", ",(0,s.jsx)(t.code,{children:"url"}),", ",(0,s.jsx)(t.code,{children:"tel"})," and ",(0,s.jsx)(t.code,{children:"search"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"autocomplete"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," defaults to ",(0,s.jsx)(t.code,{children:"off"}),". Set to ",(0,s.jsx)(t.code,{children:"on"})," or any of ",(0,s.jsxs)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete",children:["allowed ",(0,s.jsx)(t.code,{children:"attributes"})]}),". Keep in mind, 1. you may have to define a ",(0,s.jsx)(t.code,{children:"name"}),", 2. have the input as a descendant of a ",(0,s.jsx)(t.code,{children:"<form>"})," element, 3. and have a submit button inside the form."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"submit_button_title"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," title attribute for the search icon. Only relevant if search input."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"suffix"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," text describing the content of the input more than the label. you can also send in a React component, so it gets wrapped inside the Input component."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"size"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," the sizes you can choose is ",(0,s.jsx)(t.code,{children:"small"})," (1.5rem), ",(0,s.jsx)(t.code,{children:"default"})," (2rem), ",(0,s.jsx)(t.code,{children:"medium"})," (2.5rem) and ",(0,s.jsx)(t.code,{children:"large"})," (3rem) are supported component sizes. Defaults to ",(0,s.jsx)(t.code,{children:"default"})," / ",(0,s.jsx)(t.code,{children:"null"}),". Also, if you define a number like ",(0,s.jsx)(t.code,{children:'size="2"'})," then it will be forwarded as the input element attribute."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"selectall"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," if set to ",(0,s.jsx)(t.code,{children:"true"}),", then the whole input value gets selected on the entry focus. A second click will place the cursor on the wanted position."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"clear"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," if set to ",(0,s.jsx)(t.code,{children:"true"}),", then a clear button will be shown which lets the user clear any given input value."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"stretch"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," if set to ",(0,s.jsx)(t.code,{children:"true"}),", then the input field will be 100% in ",(0,s.jsx)(t.code,{children:"width"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"skeleton"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," if set to ",(0,s.jsx)(t.code,{children:"true"}),", an overlaying skeleton with animation will be shown."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"input_attributes"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," provide the Input element with any attributes by using an Object ",(0,s.jsx)(t.code,{children:"input_attributes={{size:'2'}}"})," or a JSON Object ",(0,s.jsx)(t.code,{children:'input_attributes=\'{"size":"2"}\''}),". ",(0,s.jsx)(t.strong,{children:"NB:"})," Keep in mind, that also every not listed component property will be sent along and set as an Input element attribute."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"input_state"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," defines a custom visual state of the input. Use it only if you have to simulate a custom state. Currently are three statuses ",(0,s.jsx)(t.code,{children:"virgin"})," , ",(0,s.jsx)(t.code,{children:"focus"})," and ",(0,s.jsx)(t.code,{children:"dirty"}),". Defaults to ",(0,s.jsx)(t.code,{children:"null"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"submit_element"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"}),' accepts a React element which will show up like the "submit button" would do on ',(0,s.jsx)(t.code,{children:'type="search"'}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"inner_ref"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," by providing a React.ref we can get the internally used input element (DOM). E.g. ",(0,s.jsx)(t.code,{children:"inner_ref={myRef}"})," by using ",(0,s.jsx)(t.code,{children:"React.createRef()"})," or ",(0,s.jsx)(t.code,{children:"React.useRef()"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"input_element"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(internal)"})," by providing a new component we can change the internally used element. Also supports a string only, like ",(0,s.jsx)(t.code,{children:'input_element="input"'}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"inner_element"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(internal)"}),' by providing a new component to be rendered inside the "shell" – we can add a freely customizable internal element. Used by the Autocomplete component.']})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/uilib/layout/space/properties",children:"Space"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.em,{children:"(optional)"})," spacing properties like ",(0,s.jsx)(t.code,{children:"top"})," or ",(0,s.jsx)(t.code,{children:"bottom"})," are supported."]})]})]})]})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,d.ah)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-input-properties-mdx-0ab53456e49e67cd31be.js.map