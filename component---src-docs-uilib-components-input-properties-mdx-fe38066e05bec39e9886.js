"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[16727],{23039:function(e,t,n){n.r(t);var o=n(31085),s=n(71184),a=n(15616),i=n(86058),l=n(80669);function r(e){const t=Object.assign({h2:"h2"},(0,s.R)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{children:"Properties"}),"\n",(0,o.jsx)(a.Ay,{props:l.x}),"\n",(0,o.jsx)(t.h2,{children:"Translations"}),"\n",(0,o.jsx)(i.A,{localeKey:"Input"})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,s.R)(),e.components);return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(r,e)})):r(e)}},69094:function(e,t,n){var o=n(23722);t.A=o.A},80669:function(e,t,n){n.d(t,{Q:function(){return s},x:function(){return o}});const o={value:{doc:"The content value of the input.",type:"string",status:"optional"},align:{doc:"Defines the text alignment of the input. Can be `left`, `right` or `center`. Defaults to `left`.",type:"string",status:"optional"},label:{doc:"Prepends the Form Label component. If no ID is provided, a random ID is created.",type:"React.Node",status:"optional"},label_sr_only:{doc:"Use `true` to make the label only readable by screen readers.",type:"boolean",status:"optional"},label_direction:{doc:'Use `label_direction="vertical"` to change the label layout direction. Defaults to `horizontal`.',type:"string",status:"optional"},status:{doc:"Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.",type:["error","info","boolean"],status:"optional"},status_state:{doc:"Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.",type:["error","info"],status:"optional"},status_props:{doc:"Use an object to define additional FormStatus properties.",type:"object",status:"optional"},globalStatus:{doc:"The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).",type:"object",status:"optional"},placeholder:{doc:"The placeholder which shows up once the input value is empty.",type:"string",status:"optional"},icon:{doc:"Icon to show before or after the input / placeholder. Can be either a string defining a primary icon or a Component using an SVG icon of either 16px or 24px.",type:["string","React.Node"],status:"optional"},icon_position:{doc:"Defines the position of icon inside the input. Set to `left` or `right`. Defaults to `left` if not set.",type:"string",status:"optional"},icon_size:{doc:"The icon size of the icon shows. Defaults to `medium`.",type:"string",status:"optional"},keep_placeholder:{doc:"Set to `true` in case the `placeholder` has to be kept during focus. By default, the placeholder disappears on focus.",type:"boolean",status:"optional"},input_class:{doc:"In case we have to set a custom input class.",type:"string",status:"optional"},type:{doc:"Choose between `text`, `number`, `email`, `password`, `url`, `tel` and `search`.",type:"string",status:"optional"},autocomplete:{doc:"Defaults to `off`. Set to `on` or any of [allowed `attributes`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete). Keep in mind, 1. you may have to define a `name`, 2. have the input as a descendant of a `<form>` element, 3. and have a submit button inside the form.",type:"string",status:"optional"},submit_button_title:{doc:"Title attribute for the search icon. Only relevant if search input.",type:"string",status:"optional"},suffix:{doc:"Text describing the content of the input more than the label. you can also send in a React component, so it gets wrapped inside the Input component.",type:["string","React.Node"],status:"optional"},size:{doc:"The sizes you can choose is `default` (2rem), `medium` (2.5rem) and `large` (3rem) are supported component sizes. Defaults to `default` / `null`. Also, if you define a number like `size={2}` then it will be forwarded as the input element attribute.",type:["string","number"],status:"optional"},selectall:{doc:"If set to `true`, then the whole input value gets selected on the entry focus. A second click will place the cursor on the wanted position.",type:"boolean",status:"optional"},clear:{doc:"If set to `true`, then a clear button will be shown which lets the user clear any given input value.",type:"boolean",status:"optional"},stretch:{doc:"If set to `true`, then the input field will be 100% in `width`.",type:"boolean",status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown.",type:"boolean",status:"optional"},input_attributes:{doc:"Provide the Input element with any attributes by using an Object `input_attributes={{size:'2'}}` or a JSON Object `input_attributes='{\"size\":\"2\"}'`. **NB:** Keep in mind, that also every not listed component property will be sent along and set as an Input element attribute.",type:"object",status:"optional"},input_state:{doc:"Defines a custom visual state of the input. Use it only if you have to simulate a custom state. Currently are three statuses `virgin` , `focus` and `dirty`. Defaults to `null`.",type:"string",status:"optional"},submit_element:{doc:'Accepts a React element which will show up like the "submit button" would do on `type="search"`.',type:["string","React.Element"],status:"optional"},inner_ref:{doc:"By providing a React.ref we can get the internally used input element (DOM). E.g. `inner_ref={myRef}` by using `React.createRef()` or `React.useRef()`.",type:"React.RefObject",status:"optional"},input_element:{doc:'By providing a new component we can change the internally used element. Also supports a string only, like `input_element="input"`.',type:["string","React.Element"],status:"internal"},inner_element:{doc:'By providing a new component to be rendered inside the "shell" â€“ we can add a freely customizable internal element. Used by the Autocomplete component.',type:["string","React.Element"],status:"internal"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},s={on_change:{doc:"will be called on value changes made by the user. Returns an object with the value as a string and the native event: `{ value, event }`.",type:"function",status:"optional"},on_focus:{doc:"will be called on focus set by the user. Returns `{ value, event }`.",type:"function",status:"optional"},on_key_down:{doc:"will be called on key down by the user. Returns `{ value, event }`.",type:"function",status:"optional"},on_blur:{doc:"will be called on blur set by the user. Returns `{ value, event }`.",type:"function",status:"optional"},on_submit:{doc:"will be called on submit button click. Returns `{ value, event }`.",type:"function",status:"optional"},on_clear:{doc:"will be called on a clear button click. Returns `{ value, previousValue, event }`.",type:"function",status:"optional"}}},81908:function(e,t,n){var o=n(94515);t.A=o.A},86058:function(e,t,n){n.d(t,{A:function(){return v}});var o=n(42483),s=n(14041),a=n(42275),i=n(81908),l=n(92034),r=n(77352),u=n(29058),c=n(69094),p=n(21436),d=n(64034),h=n(1470),f=n(43350),b=n(15616),y=n(84196),m=n(97728),g=n(31085);const w=(0,o.A)(a.Ay,{target:"ejvypor0"})({name:"1qdk5x4",styles:"td{white-space:nowrap;}"});function v(e){let{localeKey:t,source:n=null}=e;n=(0,s.useMemo)((()=>n||Object.assign((0,p.zu)({},h.A,f.A),y._M)),[n]);const o={},v={},j=(Array.isArray(t)?t:[t]).map((e=>{if(e.includes(".")){const t=e.split(".")[0];return v[t]=v[t]||[],v[t].push(e),t}return e})),_=(e,t,n,s)=>{e=`${s}.${e}`,v[s]&&!v[s].includes(e)||(o[e]=Object.assign(o[e]||{},{[n]:t}))};Object.entries(n).forEach((e=>{let[t,n]=e;j.forEach((e=>{const o=n[e];o?Object.entries(o).forEach((n=>{let[o,s]=n;if("object"==typeof s){const n=`${e}.${o}`;Object.entries(s).forEach((e=>{let[o,s]=e;_(o,s,t,n)}))}else _(o,s,t,e)})):(0,d.R8)(`TranslationsTable: Could not find any translations for key: "${e}", perhaps you misspelled the key's name?`)}))}));const x=Object.keys(n),A=Object.entries(o).map((e=>{let[t,n]=e;return(0,g.jsxs)(i.A,{children:[(0,g.jsx)(l.A,{children:(0,g.jsx)(b.OH,{variant:"prop",children:t})}),Object.entries(n).map(((e,t)=>{let[n,o]=e;return(0,g.jsx)(l.A,{children:"string"==typeof o?o:(0,g.jsx)("pre",{children:JSON.stringify(o,null,2)})},t+n)}))]},t)}));if(0!=A.length)return(0,g.jsxs)(g.Fragment,{children:[(0,g.jsxs)(r.A,{children:["More info about translations can be found in the"," ",(0,g.jsx)(u.Ay,{href:"/uilib/usage/customisation/localization/",children:"general localization"})," ","and"," ",(0,g.jsx)(u.Ay,{href:"/uilib/extensions/forms/getting-started/#localization-and-translation",children:"Eufemia Forms localization"})," ","docs."]}),(0,g.jsx)(a.Ay.ScrollView,{children:(0,g.jsxs)(w,{children:[(0,g.jsx)("thead",{children:(0,g.jsxs)(i.A,{children:[(0,g.jsx)(c.A,{children:"Key"}),x.map((e=>{const{status:t}=m.R[e];return(0,g.jsxs)(c.A,{children:[e,t?` (${t})`:null]},e)}))]})}),(0,g.jsx)("tbody",{children:A})]})})]});(0,d.R8)(`TranslationsTable: Not able to find any translations for input : "${t}", hence not rendering the translations table.`)}},92034:function(e,t,n){var o=n(31666);t.A=o.A}}]);
//# sourceMappingURL=component---src-docs-uilib-components-input-properties-mdx-fe38066e05bec39e9886.js.map