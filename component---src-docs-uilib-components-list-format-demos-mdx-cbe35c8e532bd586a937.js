"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[1339],{75301:function(n,e,t){t.r(e),t.d(e,{default:function(){return x}});var r={};t.r(r),t.d(r,{Inline:function(){return m},ListTypes:function(){return f},ListVariants:function(){return d},UsingListFormatFunction:function(){return l},WithChildren:function(){return u},WithCustomFormat:function(){return h},WithValue:function(){return c}});var a=t(52322),i=t(45392),o=(t(2784),t(73136)),s=t(18792);const l=()=>(0,a.jsx)(o.Z,{"data-visual-test":"list-format-function",scope:{listFormat:s.X},children:'{\n  listFormat(\n    [\n      <React.Fragment key="a">A</React.Fragment>,\n      <>\n        <b>B</b>\n      </>,\n      <>C</>,\n      \'D\',\n      123,\n      <Anchor\n        target="_blank"\n        href="https://github.com/dnbexperience/eufemia"\n        rel="noopener noreferrer"\n        key="github"\n      >\n        Link to Eufemia\'s Github Repo\n      </Anchor>,\n      <>\n        Text <Badge content="Info" variant="information" /> Text\n      </>,\n    ],\n    {\n      format: {\n        type: \'disjunction\',\n      },\n      locale: \'en-US\',\n    },\n  )\n}\n'}),c=()=>(0,a.jsx)(o.Z,{"data-visual-test":"list-format-default",children:'<ListFormat\n  value={[\n    <React.Fragment key="a">A</React.Fragment>,\n    <>\n      <b>B</b>\n    </>,\n    <>C</>,\n    \'D\',\n    123,\n    <Anchor\n      target="_blank"\n      href="https://github.com/dnbexperience/eufemia"\n      rel="noopener noreferrer"\n      key="github"\n    >\n      Link to Eufemia\'s Github Repo\n    </Anchor>,\n    <>\n      Text <Badge content="Info" variant="information" /> Text\n    </>,\n  ]}\n/>\n'}),u=()=>(0,a.jsx)(o.Z,{children:'<ListFormat>\n  <React.Fragment key="a">A</React.Fragment>\n  <>\n    <b>B</b>\n  </>\n  <>C</>\n  <>D</>\n  123\n  <Anchor\n    target="_blank"\n    href="https://github.com/dnbexperience/eufemia"\n    rel="noopener noreferrer"\n    key="github"\n  >\n    Link to Eufemia\'s Github Repo\n  </Anchor>\n  <>\n    Text <Badge content="Info" variant="information" /> Text\n  </>\n</ListFormat>\n'}),h=()=>(0,a.jsx)(o.Z,{"data-visual-test":"list-format-custom-format",children:'<Provider locale="en-GB">\n  <ListFormat\n    value={[\n      <React.Fragment key="a">A</React.Fragment>,\n      <>\n        <b>B</b>\n      </>,\n      <>C</>,\n      \'D\',\n      123,\n      <Anchor\n        target="_blank"\n        href="https://github.com/dnbexperience/eufemia"\n        rel="noopener noreferrer"\n        key="github"\n      >\n        Link to Eufemia\'s Github Repo\n      </Anchor>,\n      <>\n        Text <Badge content="Info" variant="information" /> Text\n      </>,\n    ]}\n    format={{\n      type: \'disjunction\',\n    }}\n  />\n</Provider>\n'}),m=()=>(0,a.jsx)(o.Z,{"data-visual-test":"list-format-inline",children:'<P>\n  This is before the component{\' \'}\n  <ListFormat\n    value={[\n      123,\n      <Anchor\n        target="_blank"\n        href="https://github.com/dnbexperience/eufemia"\n        rel="noopener noreferrer"\n        key="github"\n      >\n        Link to Eufemia\'s Github Repo\n      </Anchor>,\n      <>\n        Text <Badge content="Info" variant="information" /> Text\n      </>,\n    ]}\n  />{\' \'}\n  This is after the component\n</P>\n'}),d=()=>(0,a.jsx)(o.Z,{"data-visual-test":"list-format-variants",children:"\n<P>Ordered List:</P>\n<ListFormat value={['Foo', 'Bar', 'Baz']} variant=\"ol\" />\n<P>Unordered List:</P>\n<ListFormat value={['Foo', 'Bar', 'Baz']} variant=\"ul\" />\n\n"}),f=()=>(0,a.jsx)(o.Z,{"data-visual-test":"list-format-types",children:"\n<P>Ordered List a:</P>\n<ListFormat value={['Foo', 'Bar', 'Baz']} variant=\"ol\" listType=\"a\" />\n<P>Ordered List A:</P>\n<ListFormat value={['Foo', 'Bar', 'Baz']} variant=\"ol\" listType=\"A\" />\n<P>Ordered List i:</P>\n<ListFormat value={['Foo', 'Bar', 'Baz']} variant=\"ol\" listType=\"i\" />\n<P>Ordered List I:</P>\n<ListFormat value={['Foo', 'Bar', 'Baz']} variant=\"ol\" listType=\"I\" />\n<P>Unordered List square:</P>\n<ListFormat\n  value={['Foo', 'Bar', 'Baz']}\n  variant=\"ul\"\n  listType=\"square\"\n/>\n<P>Unordered List circle:</P>\n<ListFormat\n  value={['Foo', 'Bar', 'Baz']}\n  variant=\"ul\"\n  listType=\"circle\"\n/>\n<P>Unordered List unstyled:</P>\n<ListFormat\n  value={['Foo', 'Bar', 'Baz']}\n  variant=\"ul\"\n  listType=\"unstyled\"\n/>\n\n"});function p(n){const e=Object.assign({h2:"h2",h3:"h3",code:"code"},(0,i.ah)(),n.components);return r||b("Examples",!1),m||b("Examples.Inline",!0),f||b("Examples.ListTypes",!0),d||b("Examples.ListVariants",!0),l||b("Examples.UsingListFormatFunction",!0),u||b("Examples.WithChildren",!0),h||b("Examples.WithCustomFormat",!0),c||b("Examples.WithValue",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{children:"Demos"}),"\n",(0,a.jsxs)(e.h3,{children:["Basic usage with ",(0,a.jsx)(e.code,{children:"value"})]}),"\n",(0,a.jsx)(c,{}),"\n",(0,a.jsxs)(e.h3,{children:["Basic usage with ",(0,a.jsx)(e.code,{children:"children"})]}),"\n",(0,a.jsx)(u,{}),"\n",(0,a.jsx)(e.h3,{children:"Custom format"}),"\n",(0,a.jsx)(h,{}),"\n",(0,a.jsx)(e.h3,{children:"Inline"}),"\n",(0,a.jsx)(m,{}),"\n",(0,a.jsx)(e.h3,{children:"List variants"}),"\n",(0,a.jsx)(d,{}),"\n",(0,a.jsx)(e.h3,{children:"List types"}),"\n",(0,a.jsx)(f,{}),"\n",(0,a.jsx)(e.h3,{children:"Using listFormat function"}),"\n",(0,a.jsx)(l,{})]})}var x=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,a.jsx)(e,Object.assign({},n,{children:(0,a.jsx)(p,n)})):p(n)};function b(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-list-format-demos-mdx-cbe35c8e532bd586a937.js.map