{"version":3,"file":"component---src-docs-uilib-components-list-format-demos-mdx-cbe35c8e532bd586a937.js","mappings":"4fAWO,MAAMA,EAA0BA,KACrCC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,2CAAAC,MAAA,CACFC,WACA,KAAAC,SAAA,2kBAiCaC,EAAYA,KACvBL,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,0CAAAG,SAAA,6bA4BWE,EAAeA,KAC1BN,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAG,SAAA,6YA0BWG,EAAmBA,KAC9BP,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,gDAAAG,SAAA,skBA+BWI,EAASA,KACpBR,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,yCAAAG,SAAA,ycA0BWK,EAAeA,KAC1BT,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,2CAAAG,SAAA,iLAUWM,EAAYA,KACvBV,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,wCAAAG,SAAA,2wBC1KF,SAASO,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,KAAM,SACLC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAS/B,OARKC,GAAUC,EAAqB,YAAY,GAC3CD,GAAiBC,EAAqB,mBAAmB,GACzDD,GAAoBC,EAAqB,sBAAsB,GAC/DD,GAAuBC,EAAqB,yBAAyB,GACrED,GAAkCC,EAAqB,oCAAoC,GAC3FD,GAAuBC,EAAqB,yBAAyB,GACrED,GAA2BC,EAAqB,6BAA6B,GAC7ED,GAAoBC,EAAqB,sBAAsB,IAC7DC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBpB,SAAU,EAACJ,EAAAA,EAAAA,KAAKa,EAAYG,GAAI,CAC9BZ,SAAU,UACR,MAAMmB,EAAAA,EAAAA,MAAMV,EAAYI,GAAI,CAC9Bb,SAAU,CAAC,qBAAqBJ,EAAAA,EAAAA,KAAKa,EAAYK,KAAM,CACrDd,SAAU,aAEV,MAAMJ,EAAAA,EAAAA,KAAKqB,EAAoB,CAAC,GAAI,MAAME,EAAAA,EAAAA,MAAMV,EAAYI,GAAI,CAClEb,SAAU,CAAC,qBAAqBJ,EAAAA,EAAAA,KAAKa,EAAYK,KAAM,CACrDd,SAAU,gBAEV,MAAMJ,EAAAA,EAAAA,KAAKqB,EAAuB,CAAC,GAAI,MAAMrB,EAAAA,EAAAA,KAAKa,EAAYI,GAAI,CACpEb,SAAU,kBACR,MAAMJ,EAAAA,EAAAA,KAAKqB,EAA2B,CAAC,GAAI,MAAMrB,EAAAA,EAAAA,KAAKa,EAAYI,GAAI,CACxEb,SAAU,WACR,MAAMJ,EAAAA,EAAAA,KAAKqB,EAAiB,CAAC,GAAI,MAAMrB,EAAAA,EAAAA,KAAKa,EAAYI,GAAI,CAC9Db,SAAU,kBACR,MAAMJ,EAAAA,EAAAA,KAAKqB,EAAuB,CAAC,GAAI,MAAMrB,EAAAA,EAAAA,KAAKa,EAAYI,GAAI,CACpEb,SAAU,eACR,MAAMJ,EAAAA,EAAAA,KAAKqB,EAAoB,CAAC,GAAI,MAAMrB,EAAAA,EAAAA,KAAKa,EAAYI,GAAI,CACjEb,SAAU,8BACR,MAAMJ,EAAAA,EAAAA,KAAKqB,EAAkC,CAAC,KAEtD,CAOA,MANA,SAAoBT,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOM,GAAY1B,EAAAA,EAAAA,KAAK0B,EAAWZ,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DR,UAAUJ,EAAAA,EAAAA,KAAKW,EAAmBC,MAC9BD,EAAkBC,EAC1B,EAEA,SAASU,EAAqBK,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/list-format/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/list-format/demos.mdx"],"sourcesContent":["/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { Provider } from '@dnb/eufemia/src/shared'\nimport { ListFormat, P, Badge, Anchor } from '@dnb/eufemia/src'\nimport { listFormat } from '@dnb/eufemia/src/components/list-format/ListFormat'\n\nexport const UsingListFormatFunction = () => {\n  return (\n    <ComponentBox\n      data-visual-test=\"list-format-function\"\n      scope={{ listFormat }}\n    >\n      {listFormat(\n        [\n          <React.Fragment key=\"a\">A</React.Fragment>,\n          <>\n            <b>B</b>\n          </>,\n          <>C</>,\n          'D',\n          123,\n          <Anchor\n            target=\"_blank\"\n            href=\"https://github.com/dnbexperience/eufemia\"\n            rel=\"noopener noreferrer\"\n            key=\"github\"\n          >\n            Link to Eufemia's Github Repo\n          </Anchor>,\n          <>\n            Text <Badge content=\"Info\" variant=\"information\" /> Text\n          </>,\n        ],\n        {\n          format: { type: 'disjunction' },\n          locale: 'en-US',\n        },\n      )}\n    </ComponentBox>\n  )\n}\n\nexport const WithValue = () => {\n  return (\n    <ComponentBox data-visual-test=\"list-format-default\">\n      <ListFormat\n        value={[\n          <React.Fragment key=\"a\">A</React.Fragment>,\n          <>\n            <b>B</b>\n          </>,\n          <>C</>,\n          'D',\n          123,\n          <Anchor\n            target=\"_blank\"\n            href=\"https://github.com/dnbexperience/eufemia\"\n            rel=\"noopener noreferrer\"\n            key=\"github\"\n          >\n            Link to Eufemia's Github Repo\n          </Anchor>,\n          <>\n            Text <Badge content=\"Info\" variant=\"information\" /> Text\n          </>,\n        ]}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithChildren = () => {\n  return (\n    <ComponentBox>\n      <ListFormat>\n        <React.Fragment key=\"a\">A</React.Fragment>\n        <>\n          <b>B</b>\n        </>\n        <>C</>\n        <>D</>\n        123\n        <Anchor\n          target=\"_blank\"\n          href=\"https://github.com/dnbexperience/eufemia\"\n          rel=\"noopener noreferrer\"\n          key=\"github\"\n        >\n          Link to Eufemia's Github Repo\n        </Anchor>\n        <>\n          Text <Badge content=\"Info\" variant=\"information\" /> Text\n        </>\n      </ListFormat>\n    </ComponentBox>\n  )\n}\n\nexport const WithCustomFormat = () => {\n  return (\n    <ComponentBox data-visual-test=\"list-format-custom-format\">\n      <Provider locale=\"en-GB\">\n        <ListFormat\n          value={[\n            <React.Fragment key=\"a\">A</React.Fragment>,\n            <>\n              <b>B</b>\n            </>,\n            <>C</>,\n            'D',\n            123,\n            <Anchor\n              target=\"_blank\"\n              href=\"https://github.com/dnbexperience/eufemia\"\n              rel=\"noopener noreferrer\"\n              key=\"github\"\n            >\n              Link to Eufemia's Github Repo\n            </Anchor>,\n            <>\n              Text <Badge content=\"Info\" variant=\"information\" /> Text\n            </>,\n          ]}\n          format={{ type: 'disjunction' }}\n        />\n      </Provider>\n    </ComponentBox>\n  )\n}\n\nexport const Inline = () => {\n  return (\n    <ComponentBox data-visual-test=\"list-format-inline\">\n      <P>\n        This is before the component{' '}\n        <ListFormat\n          value={[\n            123,\n            <Anchor\n              target=\"_blank\"\n              href=\"https://github.com/dnbexperience/eufemia\"\n              rel=\"noopener noreferrer\"\n              key=\"github\"\n            >\n              Link to Eufemia's Github Repo\n            </Anchor>,\n            <>\n              Text <Badge content=\"Info\" variant=\"information\" /> Text\n            </>,\n          ]}\n        />{' '}\n        This is after the component\n      </P>\n    </ComponentBox>\n  )\n}\n\nexport const ListVariants = () => {\n  return (\n    <ComponentBox data-visual-test=\"list-format-variants\">\n      <P>Ordered List:</P>\n      <ListFormat value={['Foo', 'Bar', 'Baz']} variant=\"ol\" />\n      <P>Unordered List:</P>\n      <ListFormat value={['Foo', 'Bar', 'Baz']} variant=\"ul\" />\n    </ComponentBox>\n  )\n}\n\nexport const ListTypes = () => {\n  return (\n    <ComponentBox data-visual-test=\"list-format-types\">\n      <P>Ordered List a:</P>\n      <ListFormat\n        value={['Foo', 'Bar', 'Baz']}\n        variant=\"ol\"\n        listType=\"a\"\n      />\n      <P>Ordered List A:</P>\n      <ListFormat\n        value={['Foo', 'Bar', 'Baz']}\n        variant=\"ol\"\n        listType=\"A\"\n      />\n      <P>Ordered List i:</P>\n      <ListFormat\n        value={['Foo', 'Bar', 'Baz']}\n        variant=\"ol\"\n        listType=\"i\"\n      />\n      <P>Ordered List I:</P>\n      <ListFormat\n        value={['Foo', 'Bar', 'Baz']}\n        variant=\"ol\"\n        listType=\"I\"\n      />\n      <P>Unordered List square:</P>\n      <ListFormat\n        value={['Foo', 'Bar', 'Baz']}\n        variant=\"ul\"\n        listType=\"square\"\n      />\n      <P>Unordered List circle:</P>\n      <ListFormat\n        value={['Foo', 'Bar', 'Baz']}\n        variant=\"ul\"\n        listType=\"circle\"\n      />\n      <P>Unordered List unstyled:</P>\n      <ListFormat\n        value={['Foo', 'Bar', 'Baz']}\n        variant=\"ul\"\n        listType=\"unstyled\"\n      />\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.Inline) _missingMdxReference(\"Examples.Inline\", true);\n  if (!Examples.ListTypes) _missingMdxReference(\"Examples.ListTypes\", true);\n  if (!Examples.ListVariants) _missingMdxReference(\"Examples.ListVariants\", true);\n  if (!Examples.UsingListFormatFunction) _missingMdxReference(\"Examples.UsingListFormatFunction\", true);\n  if (!Examples.WithChildren) _missingMdxReference(\"Examples.WithChildren\", true);\n  if (!Examples.WithCustomFormat) _missingMdxReference(\"Examples.WithCustomFormat\", true);\n  if (!Examples.WithValue) _missingMdxReference(\"Examples.WithValue\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Basic usage with \", _jsx(_components.code, {\n        children: \"value\"\n      })]\n    }), \"\\n\", _jsx(Examples.WithValue, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Basic usage with \", _jsx(_components.code, {\n        children: \"children\"\n      })]\n    }), \"\\n\", _jsx(Examples.WithChildren, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Custom format\"\n    }), \"\\n\", _jsx(Examples.WithCustomFormat, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inline\"\n    }), \"\\n\", _jsx(Examples.Inline, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"List variants\"\n    }), \"\\n\", _jsx(Examples.ListVariants, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"List types\"\n    }), \"\\n\", _jsx(Examples.ListTypes, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Using listFormat function\"\n    }), \"\\n\", _jsx(Examples.UsingListFormatFunction, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["UsingListFormatFunction","_jsx","ComponentBox","scope","listFormat","children","WithValue","WithChildren","WithCustomFormat","Inline","ListVariants","ListTypes","_createMdxContent","props","_components","Object","assign","h2","h3","code","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error"],"sourceRoot":""}