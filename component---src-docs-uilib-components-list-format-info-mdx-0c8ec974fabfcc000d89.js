"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[25291],{91988:function(e,n,t){t.r(n);var s=t(31085),i=t(71184);function o(e){const n=Object.assign({h2:"h2",pre:"pre",code:"code",p:"p",ul:"ul",li:"li",a:"a"},(0,i.R)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{children:"Import"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { ListFormat } from '@dnb/eufemia'\n"})}),"\n",(0,s.jsx)(n.h2,{children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"A ready-to-use list formatter. Use it wherever you have to display a list of strings, numbers, or React components (JSX)."}),"\n",(0,s.jsx)(n.p,{children:"Good reasons for why we have this is to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Uniform the creation and formatting of lists."}),"\n",(0,s.jsx)(n.li,{children:"Supports translation and localization."}),"\n",(0,s.jsx)(n.li,{children:"Built on top of web standards."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The component is designed to maximum display 10-20 items.\nIf you need to display more items than that, consider a different design, and perhaps using ",(0,s.jsx)(n.a,{href:"/uilib/components/pagination",children:"Pagination"})," and/or ",(0,s.jsx)(n.a,{href:"/uilib/components/pagination/infinity-scroller",children:"InfinityScroller"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["When the ",(0,s.jsx)(n.code,{children:"variant"})," property is set to ",(0,s.jsx)(n.code,{children:"text"})," (default), the browser API ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat",children:"Intl.ListFormat"})," will be used with additional React components (JSX) support."]}),"\n",(0,s.jsxs)(n.p,{children:["When the ",(0,s.jsx)(n.code,{children:"variant"})," is set to a non-",(0,s.jsx)(n.code,{children:"text"})," variant, it uses ",(0,s.jsx)(n.a,{href:"/uilib/elements/lists/",children:"Lists"})," to render the given list."]}),"\n",(0,s.jsx)(n.h2,{children:"Relevant links"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/dnbexperience/eufemia/tree/main/packages/dnb-eufemia/src/components/list-format",children:"Source code"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/dnbexperience/eufemia/tree/main/packages/dnb-design-system-portal/src/docs/uilib/components/list-format",children:"Docs code"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{children:"Formatting only"}),"\n",(0,s.jsxs)(n.p,{children:["You can use the ",(0,s.jsx)(n.code,{children:"listFormat"})," function without using the React Component ",(0,s.jsx)(n.code,{children:"ListFormat"}),", to format strings, numbers, or React components (JSX) as a string. It does not return lists(ol, ul, etc)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { listFormat } from '@dnb/eufemia/components/ListFormat'\n\nreturn listFormat(myList, {\n  format: { type: 'disjunction' },\n  locale: 'en-US',\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["See the following ",(0,s.jsx)(n.a,{href:"/uilib/components/list-format/demos/#using-listformat-function",children:"demo"})," for a more detailed example."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"listFormat"})," function supports an object with ",(0,s.jsx)(n.code,{children:"{ format, locale }"})," as the second parameter. ",(0,s.jsx)(n.code,{children:"format"})," and ",(0,s.jsx)(n.code,{children:"locale"})," will accept the same values as documented in ",(0,s.jsx)(n.a,{href:"/uilib/components/list-format/properties/",children:"format property"})," of the ",(0,s.jsx)(n.code,{children:"ListFormat"})," component."]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,i.R)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(o,e)})):o(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-list-format-info-mdx-0c8ec974fabfcc000d89.js.map