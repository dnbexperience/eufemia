{"version":3,"file":"component---src-docs-uilib-components-list-format-mdx-0ce2edd8f4c9a3451966.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/list-format.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/list-format/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/list-format/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/list-format/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport ListFormatInfo from 'Docs/uilib/components/list-format/info';\nimport ListFormatDemos from 'Docs/uilib/components/list-format/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(ListFormatInfo, {}), \"\\n\", _jsx(ListFormatDemos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { Provider } from '@dnb/eufemia/src/shared'\nimport { ListFormat, P, Badge, Anchor } from '@dnb/eufemia/src'\nimport { listFormat } from '@dnb/eufemia/src/components/list-format/ListFormat'\n\nexport const UsingListFormatFunction = () => {\n  return (\n    <ComponentBox\n      data-visual-test=\"list-format-function\"\n      scope={{ listFormat }}\n    >\n      {listFormat(\n        [\n          <React.Fragment key=\"a\">A</React.Fragment>,\n          <>\n            <b>B</b>\n          </>,\n          <>C</>,\n          'D',\n          123,\n          <Anchor\n            target=\"_blank\"\n            href=\"https://github.com/dnbexperience/eufemia\"\n            rel=\"noopener noreferrer\"\n            key=\"github\"\n          >\n            Link to Eufemia's Github Repo\n          </Anchor>,\n          <>\n            Text <Badge content=\"Info\" variant=\"information\" /> Text\n          </>,\n        ],\n        {\n          format: { type: 'disjunction' },\n          locale: 'en-US',\n        },\n      )}\n    </ComponentBox>\n  )\n}\n\nexport const WithValue = () => {\n  return (\n    <ComponentBox data-visual-test=\"list-format-default\">\n      <ListFormat\n        value={[\n          <React.Fragment key=\"a\">A</React.Fragment>,\n          <>\n            <b>B</b>\n          </>,\n          <>C</>,\n          'D',\n          123,\n          <Anchor\n            target=\"_blank\"\n            href=\"https://github.com/dnbexperience/eufemia\"\n            rel=\"noopener noreferrer\"\n            key=\"github\"\n          >\n            Link to Eufemia's Github Repo\n          </Anchor>,\n          <>\n            Text <Badge content=\"Info\" variant=\"information\" /> Text\n          </>,\n        ]}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithChildren = () => {\n  return (\n    <ComponentBox>\n      <ListFormat>\n        <React.Fragment key=\"a\">A</React.Fragment>\n        <>\n          <b>B</b>\n        </>\n        <>C</>\n        <>D</>\n        123\n        <Anchor\n          target=\"_blank\"\n          href=\"https://github.com/dnbexperience/eufemia\"\n          rel=\"noopener noreferrer\"\n          key=\"github\"\n        >\n          Link to Eufemia's Github Repo\n        </Anchor>\n        <>\n          Text <Badge content=\"Info\" variant=\"information\" /> Text\n        </>\n      </ListFormat>\n    </ComponentBox>\n  )\n}\n\nexport const WithCustomFormat = () => {\n  return (\n    <ComponentBox data-visual-test=\"list-format-custom-format\">\n      <Provider locale=\"en-GB\">\n        <ListFormat\n          value={[\n            <React.Fragment key=\"a\">A</React.Fragment>,\n            <>\n              <b>B</b>\n            </>,\n            <>C</>,\n            'D',\n            123,\n            <Anchor\n              target=\"_blank\"\n              href=\"https://github.com/dnbexperience/eufemia\"\n              rel=\"noopener noreferrer\"\n              key=\"github\"\n            >\n              Link to Eufemia's Github Repo\n            </Anchor>,\n            <>\n              Text <Badge content=\"Info\" variant=\"information\" /> Text\n            </>,\n          ]}\n          format={{ type: 'disjunction' }}\n        />\n      </Provider>\n    </ComponentBox>\n  )\n}\n\nexport const Inline = () => {\n  return (\n    <ComponentBox data-visual-test=\"list-format-inline\">\n      <P>\n        This is before the component{' '}\n        <ListFormat\n          value={[\n            123,\n            <Anchor\n              target=\"_blank\"\n              href=\"https://github.com/dnbexperience/eufemia\"\n              rel=\"noopener noreferrer\"\n              key=\"github\"\n            >\n              Link to Eufemia's Github Repo\n            </Anchor>,\n            <>\n              Text <Badge content=\"Info\" variant=\"information\" /> Text\n            </>,\n          ]}\n        />{' '}\n        This is after the component\n      </P>\n    </ComponentBox>\n  )\n}\n\nexport const ListVariants = () => {\n  return (\n    <ComponentBox data-visual-test=\"list-format-variants\">\n      <P>Ordered List:</P>\n      <ListFormat value={['Foo', 'Bar', 'Baz']} variant=\"ol\" />\n      <P>Unordered List:</P>\n      <ListFormat value={['Foo', 'Bar', 'Baz']} variant=\"ul\" />\n    </ComponentBox>\n  )\n}\n\nexport const ListTypes = () => {\n  return (\n    <ComponentBox data-visual-test=\"list-format-types\">\n      <P>Ordered List a:</P>\n      <ListFormat\n        value={['Foo', 'Bar', 'Baz']}\n        variant=\"ol\"\n        listType=\"a\"\n      />\n      <P>Ordered List A:</P>\n      <ListFormat\n        value={['Foo', 'Bar', 'Baz']}\n        variant=\"ol\"\n        listType=\"A\"\n      />\n      <P>Ordered List i:</P>\n      <ListFormat\n        value={['Foo', 'Bar', 'Baz']}\n        variant=\"ol\"\n        listType=\"i\"\n      />\n      <P>Ordered List I:</P>\n      <ListFormat\n        value={['Foo', 'Bar', 'Baz']}\n        variant=\"ol\"\n        listType=\"I\"\n      />\n      <P>Unordered List square:</P>\n      <ListFormat\n        value={['Foo', 'Bar', 'Baz']}\n        variant=\"ul\"\n        listType=\"square\"\n      />\n      <P>Unordered List circle:</P>\n      <ListFormat\n        value={['Foo', 'Bar', 'Baz']}\n        variant=\"ul\"\n        listType=\"circle\"\n      />\n      <P>Unordered List unstyled:</P>\n      <ListFormat\n        value={['Foo', 'Bar', 'Baz']}\n        variant=\"ul\"\n        listType=\"unstyled\"\n      />\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.Inline) _missingMdxReference(\"Examples.Inline\", true);\n  if (!Examples.ListTypes) _missingMdxReference(\"Examples.ListTypes\", true);\n  if (!Examples.ListVariants) _missingMdxReference(\"Examples.ListVariants\", true);\n  if (!Examples.UsingListFormatFunction) _missingMdxReference(\"Examples.UsingListFormatFunction\", true);\n  if (!Examples.WithChildren) _missingMdxReference(\"Examples.WithChildren\", true);\n  if (!Examples.WithCustomFormat) _missingMdxReference(\"Examples.WithCustomFormat\", true);\n  if (!Examples.WithValue) _missingMdxReference(\"Examples.WithValue\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Basic usage with \", _jsx(_components.code, {\n        children: \"value\"\n      })]\n    }), \"\\n\", _jsx(Examples.WithValue, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Basic usage with \", _jsx(_components.code, {\n        children: \"children\"\n      })]\n    }), \"\\n\", _jsx(Examples.WithChildren, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Custom format\"\n    }), \"\\n\", _jsx(Examples.WithCustomFormat, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inline\"\n    }), \"\\n\", _jsx(Examples.Inline, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"List variants\"\n    }), \"\\n\", _jsx(Examples.ListVariants, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"List types\"\n    }), \"\\n\", _jsx(Examples.ListTypes, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Using listFormat function\"\n    }), \"\\n\", _jsx(Examples.UsingListFormatFunction, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Import\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { ListFormat } from '@dnb/eufemia'\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A ready-to-use list formatter. Use it wherever you have to display a list of strings, numbers, or React components (JSX).\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Good reasons for why we have this is to:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Uniform the creation and formatting of lists.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Supports translation and localization.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Built on top of web standards.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The component is designed to maximum display 10-20 items.\\nIf you need to display more items than that, consider a different design, and perhaps using \", _jsx(_components.a, {\n        href: \"/uilib/components/pagination\",\n        children: \"Pagination\"\n      }), \" and/or \", _jsx(_components.a, {\n        href: \"/uilib/components/pagination/infinity-scroller\",\n        children: \"InfinityScroller\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When the \", _jsx(_components.code, {\n        children: \"variant\"\n      }), \" property is set to \", _jsx(_components.code, {\n        children: \"text\"\n      }), \" (default), the browser API \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat\",\n        children: \"Intl.ListFormat\"\n      }), \" will be used with additional React components (JSX) support.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When the \", _jsx(_components.code, {\n        children: \"variant\"\n      }), \" is set to a non-\", _jsx(_components.code, {\n        children: \"text\"\n      }), \" variant, it uses \", _jsx(_components.a, {\n        href: \"/uilib/elements/lists/\",\n        children: \"Lists\"\n      }), \" to render the given list.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Formatting only\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the \", _jsx(_components.code, {\n        children: \"listFormat\"\n      }), \" function without using the React Component \", _jsx(_components.code, {\n        children: \"ListFormat\"\n      }), \", to format strings, numbers, or React components (JSX) as a string. It does not return lists(ol, ul, etc).\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { listFormat } from '@dnb/eufemia/components/ListFormat'\\n\\nreturn listFormat(myList, {\\n  format: { type: 'disjunction' },\\n  locale: 'en-US',\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"See the following \", _jsx(_components.a, {\n        href: \"/uilib/components/list-format/demos/#using-listformat-function\",\n        children: \"demo\"\n      }), \" for a more detailed example.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"listFormat\"\n      }), \" function supports an object with \", _jsx(_components.code, {\n        children: \"{ format, locale }\"\n      }), \" as the second parameter. \", _jsx(_components.code, {\n        children: \"format\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"locale\"\n      }), \" will accept the same values as documented in \", _jsx(_components.a, {\n        href: \"/uilib/components/list-format/properties/\",\n        children: \"format property\"\n      }), \" of the \", _jsx(_components.code, {\n        children: \"ListFormat\"\n      }), \" component.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","ListFormatInfo","ListFormatDemos","wrapper","MDXLayout","Object","assign","_provideComponents","components","UsingListFormatFunction","ComponentBox","scope","listFormat","WithValue","WithChildren","WithCustomFormat","Inline","ListVariants","ListTypes","_components","h2","h3","code","Examples","_missingMdxReference","id","component","Error","pre","p","ul","li","a","className","href"],"sourceRoot":""}