{"version":3,"file":"component---src-docs-uilib-components-list-format-mdx-3226d044e3b9a9c6f443.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/list-format/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/list-format/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/list-format/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/list-format.mdx"],"sourcesContent":["/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { Provider } from '@dnb/eufemia/src/shared'\nimport { ListFormat, P, Badge, Anchor } from '@dnb/eufemia/src'\nimport { listFormat } from '@dnb/eufemia/src/components/list-format/ListFormat'\n\nexport const UsingListFormatFunction = () => {\n  return (\n    <ComponentBox\n      data-visual-test=\"list-format-function\"\n      scope={{ listFormat }}\n    >\n      {listFormat(\n        [\n          <React.Fragment key=\"a\">A</React.Fragment>,\n          <>\n            <b>B</b>\n          </>,\n          <>C</>,\n          'D',\n          123,\n          <Anchor\n            target=\"_blank\"\n            href=\"https://github.com/dnbexperience/eufemia\"\n            rel=\"noopener noreferrer\"\n            key=\"github\"\n          >\n            Link to Eufemia's Github Repo\n          </Anchor>,\n          <>\n            Text <Badge content=\"Info\" variant=\"information\" /> Text\n          </>,\n        ],\n        {\n          format: { type: 'disjunction' },\n          locale: 'en-US',\n        },\n      )}\n    </ComponentBox>\n  )\n}\n\nexport const WithValue = () => {\n  return (\n    <ComponentBox data-visual-test=\"list-format-default\">\n      <ListFormat\n        value={[\n          <React.Fragment key=\"a\">A</React.Fragment>,\n          <>\n            <b>B</b>\n          </>,\n          <>C</>,\n          'D',\n          123,\n          <Anchor\n            target=\"_blank\"\n            href=\"https://github.com/dnbexperience/eufemia\"\n            rel=\"noopener noreferrer\"\n            key=\"github\"\n          >\n            Link to Eufemia's Github Repo\n          </Anchor>,\n          <>\n            Text <Badge content=\"Info\" variant=\"information\" /> Text\n          </>,\n        ]}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithChildren = () => {\n  return (\n    <ComponentBox>\n      <ListFormat>\n        <React.Fragment key=\"a\">A</React.Fragment>\n        <>\n          <b>B</b>\n        </>\n        <>C</>\n        <>D</>\n        123\n        <Anchor\n          target=\"_blank\"\n          href=\"https://github.com/dnbexperience/eufemia\"\n          rel=\"noopener noreferrer\"\n          key=\"github\"\n        >\n          Link to Eufemia's Github Repo\n        </Anchor>\n        <>\n          Text <Badge content=\"Info\" variant=\"information\" /> Text\n        </>\n      </ListFormat>\n    </ComponentBox>\n  )\n}\n\nexport const WithCustomFormat = () => {\n  return (\n    <ComponentBox data-visual-test=\"list-format-custom-format\">\n      <Provider locale=\"en-GB\">\n        <ListFormat\n          value={[\n            <React.Fragment key=\"a\">A</React.Fragment>,\n            <>\n              <b>B</b>\n            </>,\n            <>C</>,\n            'D',\n            123,\n            <Anchor\n              target=\"_blank\"\n              href=\"https://github.com/dnbexperience/eufemia\"\n              rel=\"noopener noreferrer\"\n              key=\"github\"\n            >\n              Link to Eufemia's Github Repo\n            </Anchor>,\n            <>\n              Text <Badge content=\"Info\" variant=\"information\" /> Text\n            </>,\n          ]}\n          format={{ type: 'disjunction' }}\n        />\n      </Provider>\n    </ComponentBox>\n  )\n}\n\nexport const Inline = () => {\n  return (\n    <ComponentBox data-visual-test=\"list-format-inline\">\n      <P>\n        This is before the component{' '}\n        <ListFormat\n          value={[\n            123,\n            <Anchor\n              target=\"_blank\"\n              href=\"https://github.com/dnbexperience/eufemia\"\n              rel=\"noopener noreferrer\"\n              key=\"github\"\n            >\n              Link to Eufemia's Github Repo\n            </Anchor>,\n            <>\n              Text <Badge content=\"Info\" variant=\"information\" /> Text\n            </>,\n          ]}\n        />{' '}\n        This is after the component\n      </P>\n    </ComponentBox>\n  )\n}\n\nexport const ListVariants = () => {\n  return (\n    <ComponentBox data-visual-test=\"list-format-variants\">\n      <P>Ordered List:</P>\n      <ListFormat value={['Foo', 'Bar', 'Baz']} variant=\"ol\" />\n      <P>Unordered List:</P>\n      <ListFormat value={['Foo', 'Bar', 'Baz']} variant=\"ul\" />\n    </ComponentBox>\n  )\n}\n\nexport const ListTypes = () => {\n  return (\n    <ComponentBox data-visual-test=\"list-format-types\">\n      <P>Ordered List a:</P>\n      <ListFormat\n        value={['Foo', 'Bar', 'Baz']}\n        variant=\"ol\"\n        listType=\"a\"\n      />\n      <P>Ordered List A:</P>\n      <ListFormat\n        value={['Foo', 'Bar', 'Baz']}\n        variant=\"ol\"\n        listType=\"A\"\n      />\n      <P>Ordered List i:</P>\n      <ListFormat\n        value={['Foo', 'Bar', 'Baz']}\n        variant=\"ol\"\n        listType=\"i\"\n      />\n      <P>Ordered List I:</P>\n      <ListFormat\n        value={['Foo', 'Bar', 'Baz']}\n        variant=\"ol\"\n        listType=\"I\"\n      />\n      <P>Unordered List square:</P>\n      <ListFormat\n        value={['Foo', 'Bar', 'Baz']}\n        variant=\"ul\"\n        listType=\"square\"\n      />\n      <P>Unordered List circle:</P>\n      <ListFormat\n        value={['Foo', 'Bar', 'Baz']}\n        variant=\"ul\"\n        listType=\"circle\"\n      />\n      <P>Unordered List unstyled:</P>\n      <ListFormat\n        value={['Foo', 'Bar', 'Baz']}\n        variant=\"ul\"\n        listType=\"unstyled\"\n      />\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.Inline) _missingMdxReference(\"Examples.Inline\", true);\n  if (!Examples.ListTypes) _missingMdxReference(\"Examples.ListTypes\", true);\n  if (!Examples.ListVariants) _missingMdxReference(\"Examples.ListVariants\", true);\n  if (!Examples.UsingListFormatFunction) _missingMdxReference(\"Examples.UsingListFormatFunction\", true);\n  if (!Examples.WithChildren) _missingMdxReference(\"Examples.WithChildren\", true);\n  if (!Examples.WithCustomFormat) _missingMdxReference(\"Examples.WithCustomFormat\", true);\n  if (!Examples.WithValue) _missingMdxReference(\"Examples.WithValue\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Basic usage with \", _jsx(_components.code, {\n        children: \"value\"\n      })]\n    }), \"\\n\", _jsx(Examples.WithValue, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Basic usage with \", _jsx(_components.code, {\n        children: \"children\"\n      })]\n    }), \"\\n\", _jsx(Examples.WithChildren, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Custom format\"\n    }), \"\\n\", _jsx(Examples.WithCustomFormat, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inline\"\n    }), \"\\n\", _jsx(Examples.Inline, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"List variants\"\n    }), \"\\n\", _jsx(Examples.ListVariants, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"List types\"\n    }), \"\\n\", _jsx(Examples.ListTypes, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Using listFormat function\"\n    }), \"\\n\", _jsx(Examples.UsingListFormatFunction, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Import\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { ListFormat } from '@dnb/eufemia'\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A ready-to-use list formatter. Use it wherever you have to display a list of strings, numbers, or React components (JSX).\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Good reasons for why we have this is to:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Uniform the creation and formatting of lists.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Supports translation and localization.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Built on top of web standards.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The component is designed to maximum display 10-20 items.\\nIf you need to display more items than that, consider a different design, and perhaps using \", _jsx(_components.a, {\n        href: \"/uilib/components/pagination\",\n        children: \"Pagination\"\n      }), \" and/or \", _jsx(_components.a, {\n        href: \"/uilib/components/pagination/infinity-scroller\",\n        children: \"InfinityScroller\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When the \", _jsx(_components.code, {\n        children: \"variant\"\n      }), \" property is set to \", _jsx(_components.code, {\n        children: \"text\"\n      }), \" (default), the browser API \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat\",\n        children: \"Intl.ListFormat\"\n      }), \" will be used with additional React components (JSX) support.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When the \", _jsx(_components.code, {\n        children: \"variant\"\n      }), \" is set to a non-\", _jsx(_components.code, {\n        children: \"text\"\n      }), \" variant, it uses \", _jsx(_components.a, {\n        href: \"/uilib/elements/lists/\",\n        children: \"Lists\"\n      }), \" to render the given list.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Relevant links\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/dnbexperience/eufemia/tree/main/packages/dnb-eufemia/src/components/list-format\",\n          children: \"Source code\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/dnbexperience/eufemia/tree/main/packages/dnb-design-system-portal/src/docs/uilib/components/list-format\",\n          children: \"Docs code\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Formatting only\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the \", _jsx(_components.code, {\n        children: \"listFormat\"\n      }), \" function without using the React Component \", _jsx(_components.code, {\n        children: \"ListFormat\"\n      }), \", to format strings, numbers, or React components (JSX) as a string. It does not return lists(ol, ul, etc).\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { listFormat } from '@dnb/eufemia/components/ListFormat'\\n\\nreturn listFormat(myList, {\\n  format: { type: 'disjunction' },\\n  locale: 'en-US',\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"See the following \", _jsx(_components.a, {\n        href: \"/uilib/components/list-format/demos/#using-listformat-function\",\n        children: \"demo\"\n      }), \" for a more detailed example.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"listFormat\"\n      }), \" function supports an object with \", _jsx(_components.code, {\n        children: \"{ format, locale }\"\n      }), \" as the second parameter. \", _jsx(_components.code, {\n        children: \"format\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"locale\"\n      }), \" will accept the same values as documented in \", _jsx(_components.a, {\n        href: \"/uilib/components/list-format/properties/\",\n        children: \"format property\"\n      }), \" of the \", _jsx(_components.code, {\n        children: \"ListFormat\"\n      }), \" component.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport ListFormatInfo from 'Docs/uilib/components/list-format/info';\nimport ListFormatDemos from 'Docs/uilib/components/list-format/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(ListFormatInfo, {}), \"\\n\", _jsx(ListFormatDemos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["UsingListFormatFunction","_jsx","ComponentBox","scope","listFormat","children","WithValue","WithChildren","WithCustomFormat","Inline","ListVariants","ListTypes","_createMdxContent","props","_components","Object","assign","h2","h3","code","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error","pre","p","ul","li","a","className","href","ListFormatInfo","ListFormatDemos"],"sourceRoot":""}