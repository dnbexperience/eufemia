{"version":3,"file":"component---src-docs-uilib-components-logo-properties-mdx-fb8fd58c86e5a4828468.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/components/logo/LogoDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/components/logo/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../shared/types'\n\nexport const LogoProperties: PropertiesTableProps = {\n  brand: {\n    doc: 'Define which brands logo to show. `ui` (DNB) or `sbanken`. Defaults to `ui`.',\n    type: ['\"ui\"', '\"sbanken\"'],\n    status: 'optional',\n  },\n  variant: {\n    doc: 'Define the logo variant, if there is more than one variant of a brands logo. Currently the only option other than default is `compact` and `compactHorizontal` variant of the Sbanken logo. Defaults to `default`.',\n    type: ['\"default\"', '\"compact\"', '\"compactHorizontal\"'],\n    status: 'optional',\n  },\n  color: {\n    doc: 'Define the color of the logo.',\n    type: 'string',\n    status: 'optional',\n  },\n  inheritColor: {\n    doc: 'Set to `true` if you do not want to inherit the color by `currentColor`. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  inheritSize: {\n    doc: 'Set to `true` if you want to inherit the size of the parent. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  width: {\n    doc: 'Define the width of the logo.',\n    type: 'string',\n    status: 'optional',\n  },\n  height: {\n    doc: 'Define the height of the logo.',\n    type: 'string',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {LogoProperties} from '@dnb/eufemia/src/components/logo/LogoDocs';\nfunction _createMdxContent(props) {\n  return _jsx(PropertiesTable, {\n    props: LogoProperties\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colorValue = 'var(--color-success-green)'\nconst colorString = 'var(--color-fire-red)'\nconst colorType = 'var(--color-violet)'\nconst colorUndefined = 'var(--color-black-55)'\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = children.startsWith(`'`) ? colorString : colorType\n        // falls through\n      }\n      case 'value': {\n        style.color = children.startsWith(`'`)\n          ? colorString\n          : children === 'undefined' || children === 'null'\n          ? colorUndefined\n          : colorValue\n        // falls through\n      }\n      default: {\n        style.background = 'none'\n        style.boxShadow = 'none'\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('/')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["LogoProperties","brand","doc","type","status","variant","color","inheritColor","inheritSize","width","height","_createMdxContent","props","_jsx","PropertiesTable","wrapper","MDXLayout","Object","assign","_provideComponents","components","children","basicComponents","p","StyledTable","_styled","Table","target","name","styles","colorString","FormattedCode","_ref","strikethrough","style","rest","textDecoration","startsWith","background","boxShadow","code","_ref2","valueType","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","defaultValue","includes","_jsxs","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","_Fragment","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp"],"sourceRoot":""}