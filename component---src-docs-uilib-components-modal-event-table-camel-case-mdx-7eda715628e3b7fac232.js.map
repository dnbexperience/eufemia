{"version":3,"file":"component---src-docs-uilib-components-modal-event-table-camel-case-mdx-7eda715628e3b7fac232.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/modal/event-table-camel-case.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/modal/ModalDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {ModalEvents} from '@dnb/eufemia/src/components/modal/ModalDocs';\nfunction _createMdxContent(props) {\n  return _jsx(PropertiesTable, {\n    props: ModalEvents\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { PropertiesTableProps } from '../../shared/types'\nimport { toSnakeCase } from '../../shared/component-helper'\n\nconst transformPropertyNamesWithSnakeCase = (\n  properties: PropertiesTableProps\n) => {\n  return Object.fromEntries(\n    Object.entries(properties).map(([key, value]) => [\n      key !== key.toLowerCase() ? `${key} / ${toSnakeCase(key)}` : key,\n      value,\n    ])\n  )\n}\n\nexport const ModalProperties: PropertiesTableProps = {\n  id: {\n    doc: 'The id used internal for the trigger button and Modal component.',\n    type: 'string',\n    status: 'optional',\n  },\n  rootId: {\n    doc: 'The id used internal in the modal root element. Defaults to `root`, so the element id will be `dnb-modal-root`.',\n    type: 'string',\n    status: 'optional',\n  },\n  contentId: {\n    doc: 'Defines an unique identifier to a modal. Use it in case you have to refer in some way to the modal content.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelledBy: {\n    doc: 'The ID of the trigger component, describing the modal content. Defaults to the internal `trigger`, so make sure you define the `title` in `triggerAttributes`.',\n    type: 'string',\n    status: 'optional',\n  },\n  children: {\n    doc: 'the content which will appear when triggering open the modal. If a function is given, you get a close method `() => ({ close })` in the arguments.',\n    type: ['React.ReactNode', 'function'],\n    status: 'optional',\n  },\n  fullscreen: {\n    doc: 'If set to `true` then the modal content will be shown as fullscreen, without showing the original content behind. Can be set to `false` to omit the auto fullscreen. Defaults to `auto`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  openState: {\n    doc: 'use this property to control the open/close state by setting either: `opened` / `closed` or `true` / `false`.',\n    type: ['boolean', 'opened', 'closed'],\n    status: 'optional',\n  },\n  openDelay: {\n    doc: 'forces the modal to delay the opening. The delay is given in `ms`.',\n    type: ['number', 'string'],\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Will disable the trigger button.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  noAnimation: {\n    doc: 'if set to `true`, no open/close animation will be shown. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  noAnimationOnMobile: {\n    doc: 'same as `noAnimation`, but gets triggered only if the viewport width is less than `40em`. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  animationDuration: {\n    doc: 'Duration of animation open/close in ms. Defaults to 300ms.',\n    type: ['number', 'string'],\n    status: 'optional',\n  },\n  preventClose: {\n    doc: \"if set to `true` (boolean or string), then the user can't close the modal.\",\n    type: 'boolean',\n    status: 'optional',\n  },\n  preventOverlayClose: {\n    doc: 'Disable clicking the background overlay to close the modal. PS! Pressing `esc` key will still close the modal.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  openModal: {\n    doc: 'set a function to call the callback function, once the modal should open: `openModal={(open) => open()}`.',\n    type: 'function',\n    status: 'optional',\n  },\n  closeModal: {\n    doc: 'set a function to call the callback function, once the modal should close: `closeModal={(close) => close()}`.',\n    type: 'function',\n    status: 'optional',\n  },\n  focusSelector: {\n    doc: 'The Modal handles the first focus â€“ automatically. However, you can define a custom focus selector the will be used instead `focusSelector=\".css-selector\"`.',\n    type: 'string',\n    status: 'optional',\n  },\n  overlayClass: {\n    doc: 'give the page overlay a custom class name (maps to `dnb-modal__overlay`).',\n    type: 'string',\n    status: 'optional',\n  },\n  contentClass: {\n    doc: 'give the content wrapper a custom class name (maps to `dnb-modal__content`).',\n    type: 'string',\n    status: 'optional',\n  },\n  omitTriggerButton: {\n    doc: 'omits default showing trigger button.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  trigger: {\n    doc: 'provide a custom trigger component. Like `trigger={<Anchor href=\"/\" />}`. It will set the focus on it when the modal gets closed.',\n    type: ['React.ReactNode', 'function'],\n    status: 'optional',\n  },\n  triggerAttributes: {\n    doc: 'send along with custom HTML attributes or properties to the trigger button.',\n    type: 'Various',\n    status: 'optional',\n  },\n  dialogTitle: {\n    doc: 'The aria label of the dialog when no labelledBy and no title is given. Defaults to `Vindu`.',\n    type: 'string',\n    status: 'optional',\n  },\n  directDomReturn: {\n    doc: 'If true, the modal will not open in a new DOM but directly in current DOM. Defaults to `false`. Be aware of the side effects of setting this property to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  bypassInvalidationSelectors: {\n    doc: \"Define an array with HTML class selectors (`['.element-selector']`) which should not get invalidated when the modal opens/closes. Use this in order to let some parts of your site still be accessible by screen readers.\",\n    type: 'boolean',\n    status: 'optional',\n  },\n  scrollRef: {\n    doc: 'To get the scroll Element, pass in your own React ref.',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  contentRef: {\n    doc: 'To get the inner content Element, pass in your own React ref.',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n  spacing: {\n    doc: 'if set to `false` then the modal content will be shown without any spacing. Defaults to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  closeTitle: {\n    doc: 'the title of the close button. Defaults to _Lukk_.',\n    type: 'string',\n    status: 'optional',\n  },\n  hideCloseButton: {\n    doc: 'if true, the close button will not be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  class: {\n    doc: 'give the inner content wrapper a class name (maps to `dnb-modal__content__inner`).',\n    type: 'string',\n    status: 'optional',\n  },\n  className: {\n    doc: 'give the inner content wrapper a class name (maps to `dnb-modal__content__inner`).',\n    type: 'string',\n    status: 'optional',\n  },\n}\n\nexport const ModalPropertiesWithSnakeCase: PropertiesTableProps =\n  transformPropertyNamesWithSnakeCase(ModalProperties)\n\nexport const ModalEvents: PropertiesTableProps = {\n  onOpen: {\n    doc: 'This event gets triggered once the modal shows up. Returns the modal id: `{ id }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  onClose: {\n    doc: 'This event gets triggered once the modal gets closed. Returns the modal id: `{ id, event, triggeredBy }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  onClosePrevent: {\n    doc: 'This event gets triggered once the user tries to close the modal, but `preventClose` is set to **true**. Returns a callback `close` you can call to trigger the close mechanism. More details below. Returns the modal id: `{ id, event, close: Method, triggeredBy }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const ModalEventsWithSnakeCase: PropertiesTableProps =\n  transformPropertyNamesWithSnakeCase(ModalEvents)\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["_createMdxContent","props","_jsx","PropertiesTable","ModalEvents","wrapper","MDXLayout","Object","assign","_provideComponents","components","children","transformPropertyNamesWithSnakeCase","properties","fromEntries","entries","map","_ref","key","value","toLowerCase","toSnakeCase","ModalProperties","id","doc","type","status","rootId","contentId","labelledBy","fullscreen","openState","openDelay","disabled","noAnimation","noAnimationOnMobile","animationDuration","preventClose","preventOverlayClose","openModal","closeModal","focusSelector","overlayClass","contentClass","omitTriggerButton","trigger","triggerAttributes","dialogTitle","directDomReturn","bypassInvalidationSelectors","scrollRef","contentRef","spacing","closeTitle","hideCloseButton","class","className","ModalPropertiesWithSnakeCase","onOpen","onClose","onClosePrevent","ModalEventsWithSnakeCase","Td","Th","Tr"],"sourceRoot":""}