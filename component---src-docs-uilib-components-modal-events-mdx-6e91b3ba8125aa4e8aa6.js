"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[41540],{59042:function(e,t,n){n.r(t);var o=n(52322),s=n(45392),a=n(85179),l=n(82493);function i(e){const t=Object.assign({h2:"h2",code:"code",p:"p",ul:"ul",li:"li"},(0,s.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.ZP,{props:l.yG}),"\n",(0,o.jsx)(t.h2,{children:(0,o.jsx)(t.code,{children:"triggeredBy"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"triggeredBy"})," property is given when the ",(0,o.jsx)(t.code,{children:"onClose"})," or the ",(0,o.jsx)(t.code,{children:"onClosePrevent"})," event is triggered. It can contain one of the following values:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"button"}),": The close button that triggered the event."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"handler"}),": The ",(0,o.jsx)(t.code,{children:"close"})," handler given by the function (as the content/children)."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"keyboard"}),": The escape key that triggered the event."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"overlay"}),": The overlay element that triggered the event."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"unmount"}),": The unmount event that triggered the ",(0,o.jsx)(t.code,{children:"openState"})," prop change."]}),"\n"]})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,s.ah)(),e.components);return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(i,e)})):i(e)}},77678:function(e,t,n){n.r(t);var o=n(52322),s=n(45392),a=n(59042),l=n(17435);function i(e){const t=Object.assign({h2:"h2",h3:"h3"},(0,s.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{children:"Events"}),"\n",(0,o.jsx)(a.default,{}),"\n",(0,o.jsx)(t.h3,{children:"Selective on_close_prevent"}),"\n",(0,o.jsx)(l.Lm,{})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,s.ah)(),e.components);return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(i,e)})):i(e)}},17435:function(e,t,n){n.d(t,{Ju:function(){return d},Lm:function(){return u},S6:function(){return l},YR:function(){return i},a6:function(){return c},df:function(){return r}});n(2784);var o=n(73136),s=n(52322);const a=e=>{let{children:t}=e;return(0,s.jsx)("div",{id:"example-card",style:{padding:"2rem",backgroundColor:"white"},children:t})},l=()=>(0,s.jsx)(o.Z,{"data-visual-test":"modal-standard",scope:{ExampleCard:a},children:"<Modal>\n  <ExampleCard>\n    <P>This is a Modal that you can use to make custom variations</P>\n  </ExampleCard>\n</Modal>\n"}),i=()=>(0,s.jsx)(o.Z,{scope:{ExampleCard:a},noInline:!0,children:'const Component = () => {\n  const [modalIsActive, setModalState] = React.useState(false)\n  return (\n    <>\n      <Button\n        id="custom-triggerer"\n        text="Custom trigger Button"\n        on_click={() => setModalState((s) => !s)}\n      />\n      <Modal\n        title="Modal Title"\n        omit_trigger_button\n        open_state={modalIsActive}\n        labelled_by="custom-triggerer"\n        on_close={() => setModalState(false)}\n      >\n        <ExampleCard>\n          <P>This Modal was opened by a custom trigger button.</P>\n        </ExampleCard>\n      </Modal>\n    </>\n  )\n}\nrender(<Component />)\n'}),r=()=>(0,s.jsx)(o.Z,{scope:{ExampleCard:a},children:'<Modal\n  title="Auto close"\n  triggerAttributes={{\n    text: \'Click me\',\n  }}\n  align_content="center"\n  max_width="40rem"\n  close_modal={(close) => {\n    const timeout = setTimeout(close, 3e3)\n    return () => clearTimeout(timeout)\n  }}\n>\n  <ExampleCard>\n    <P>This Modal will close in 3 seconds.</P>\n  </ExampleCard>\n</Modal>\n'}),c=()=>(0,s.jsx)(o.Z,{hidePreview:!0,children:'<Input\n  label="Input"\n  placeholder="Placeholder ..."\n  suffix={<HelpButton>Help text</HelpButton>}\n/>\n'}),d=()=>(0,s.jsx)(o.Z,{hidePreview:!0,children:"<Modal\n  triggerAttributes={{\n    icon: 'bell',\n  }}\n  right=\"small\"\n>\n  ... content ...\n</Modal>\n"}),u=()=>(0,s.jsx)(o.Z,{hidePreview:!0,children:"<Modal\n  preventClose={true}\n  onClosePrevent={({ triggeredBy, close /* id, event */ }) => {\n    switch (triggeredBy) {\n      case 'keyboard':\n      case 'button':\n        close()\n        break\n      case 'overlay': {\n        const timeout = setTimeout(close, 1e3)\n        return () => clearTimeout(timeout) // clear timeout on unmount\n      }\n    }\n  }}\n>\n  ...\n</Modal>\n"})},82493:function(e,t,n){n.d(t,{D5:function(){return i},Zn:function(){return l},sT:function(){return a},yG:function(){return r}});var o=n(64411);const s=e=>Object.fromEntries(Object.entries(e).map((e=>{let[t,n]=e;return[t!==t.toLowerCase()?`${t} / ${(0,o.D1)(t)}`:t,n]}))),a={id:{doc:"The id used internal for the trigger button and Modal component.",type:"string",status:"optional"},rootId:{doc:"The id used internal in the modal root element. Defaults to `root`, so the element id will be `dnb-modal-root`.",type:"string",status:"optional"},contentId:{doc:"Defines an unique identifier to a modal. Use it in case you have to refer in some way to the modal content.",type:"string",status:"optional"},labelledBy:{doc:"The ID of the trigger component, describing the modal content. Defaults to the internal `trigger`, so make sure you define the `title` in `triggerAttributes`.",type:"string",status:"optional"},children:{doc:"the content which will appear when triggering open the modal. If a function is given, you get a close method `() => ({ close })` in the arguments.",type:["React.ReactNode","function"],status:"optional"},fullscreen:{doc:"If set to `true` then the modal content will be shown as fullscreen, without showing the original content behind. Can be set to `false` to omit the auto fullscreen. Defaults to `auto`.",type:"boolean",status:"optional"},openState:{doc:"use this property to control the open/close state by setting either: `opened` / `closed` or `true` / `false`.",type:["boolean","opened","closed"],status:"optional"},openDelay:{doc:"forces the modal to delay the opening. The delay is given in `ms`.",type:["number","string"],status:"optional"},disabled:{doc:"Will disable the trigger button.",type:"boolean",status:"optional"},noAnimation:{doc:"if set to `true`, no open/close animation will be shown. Defaults to `false`.",type:"boolean",status:"optional"},noAnimationOnMobile:{doc:"same as `noAnimation`, but gets triggered only if the viewport width is less than `40em`. Defaults to `false`.",type:"boolean",status:"optional"},animationDuration:{doc:"Duration of animation open/close in ms. Defaults to 300ms.",type:["number","string"],status:"optional"},preventClose:{doc:"if set to `true` (boolean or string), then the user can't close the modal.",type:"boolean",status:"optional"},preventOverlayClose:{doc:"Disable clicking the background overlay to close the modal. PS! Pressing `esc` key will still close the modal.",type:"boolean",status:"optional"},openModal:{doc:"set a function to call the callback function, once the modal should open: `openModal={(open) => open()}`.",type:"function",status:"optional"},closeModal:{doc:"set a function to call the callback function, once the modal should close: `closeModal={(close) => close()}`.",type:"function",status:"optional"},focusSelector:{doc:'The Modal handles the first focus â€“ automatically. However, you can define a custom focus selector the will be used instead `focusSelector=".css-selector"`.',type:"string",status:"optional"},overlayClass:{doc:"give the page overlay a custom class name (maps to `dnb-modal__overlay`).",type:"string",status:"optional"},contentClass:{doc:"give the content wrapper a custom class name (maps to `dnb-modal__content`).",type:"string",status:"optional"},omitTriggerButton:{doc:"omits default showing trigger button.",type:"boolean",status:"optional"},trigger:{doc:'provide a custom trigger component. Like `trigger={<Anchor href="/" />}`. It will set the focus on it when the modal gets closed.',type:["React.ReactNode","function"],status:"optional"},triggerAttributes:{doc:"send along with custom HTML attributes or properties to the trigger button.",type:"Various",status:"optional"},dialogTitle:{doc:"The aria label of the dialog when no labelledBy and no title is given. Defaults to `Vindu`.",type:"string",status:"optional"},directDomReturn:{doc:"If true, the modal will not open in a new DOM but directly in current DOM. Defaults to `false`. Be aware of the side effects of setting this property to `true`.",type:"boolean",status:"optional"},bypassInvalidationSelectors:{doc:"Define an array with HTML class selectors (`['.element-selector']`) which should not get invalidated when the modal opens/closes. Use this in order to let some parts of your site still be accessible by screen readers.",type:"boolean",status:"optional"},scrollRef:{doc:"To get the scroll Element, pass in your own React ref.",type:"React.RefObject",status:"optional"},contentRef:{doc:"To get the inner content Element, pass in your own React ref.",type:"React.RefObject",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"},spacing:{doc:"if set to `false` then the modal content will be shown without any spacing. Defaults to `true`.",type:"boolean",status:"deprecated"},closeTitle:{doc:"the title of the close button. Defaults to _Lukk_.",type:"string",status:"deprecated"},hideCloseButton:{doc:"if true, the close button will not be shown.",type:"boolean",status:"deprecated"},class:{doc:"give the inner content wrapper a class name (maps to `dnb-modal__content__inner`).",type:"string",status:"optional"},className:{doc:"give the inner content wrapper a class name (maps to `dnb-modal__content__inner`).",type:"string",status:"optional"}},l=s(a),i={onOpen:{doc:"This event gets triggered once the modal shows up. Returns the modal id: `{ id }`.",type:"function",status:"optional"},onClose:{doc:"This event gets triggered once the modal gets closed. Returns the modal id: `{ id, event, triggeredBy }`.",type:"function",status:"optional"},onClosePrevent:{doc:"This event gets triggered once the user tries to close the modal, but `preventClose` is set to **true**. Returns a callback `close` you can call to trigger the close mechanism. More details below. Returns the modal id: `{ id, event, close: Method, triggeredBy }`.",type:"function",status:"optional"}},r=s(i)}}]);
//# sourceMappingURL=component---src-docs-uilib-components-modal-events-mdx-6e91b3ba8125aa4e8aa6.js.map