"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[16575],{69554:function(e,s,n){n.r(s);var d=n(52322),t=n(45392);function l(e){const s=Object.assign({table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",em:"em",a:"a"},(0,t.ah)(),e.components);return(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Properties"}),(0,d.jsx)(s.th,{children:"Description"})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"id"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," The id used internal for the trigger button and Modal component."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"rootId"})," / ",(0,d.jsx)(s.code,{children:"root_id"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," The id used internal in the modal root element. Defaults to ",(0,d.jsx)(s.code,{children:"root"}),", so the element id will be ",(0,d.jsx)(s.code,{children:"dnb-modal-root"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"contentId"})," / ",(0,d.jsx)(s.code,{children:"content_id"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," Defines an unique identifier to a modal. Use it in case you have to refer in some way to the modal content."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"labelledBy"})," / ",(0,d.jsx)(s.code,{children:"labelled_by"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," The ID of the trigger component, describing the modal content. Defaults to the internal ",(0,d.jsx)(s.code,{children:"trigger"}),", so make sure you define the ",(0,d.jsx)(s.code,{children:"title"})," in ",(0,d.jsx)(s.code,{children:"triggerAttributes"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"children"})," or ",(0,d.jsx)(s.code,{children:"function"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," the content which will appear when triggering open the modal. If a function is given, you get a close method ",(0,d.jsx)(s.code,{children:"() => ({ close })"})," in the arguments."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"fullscreen"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," If set to ",(0,d.jsx)(s.code,{children:"true"})," then the modal content will be shown as fullscreen, without showing the original content behind. Can be set to ",(0,d.jsx)(s.code,{children:"false"})," to omit the auto fullscreen. Defaults to ",(0,d.jsx)(s.code,{children:"auto"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"openState"})," / ",(0,d.jsx)(s.code,{children:"open_state"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," use this prop to control the open/close state by setting either: ",(0,d.jsx)(s.code,{children:"opened"})," / ",(0,d.jsx)(s.code,{children:"closed"})," or ",(0,d.jsx)(s.code,{children:"true"})," / ",(0,d.jsx)(s.code,{children:"false"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"openDelay"})," / ",(0,d.jsx)(s.code,{children:"open_delay"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," forces the modal to delay the opening. The delay is given in ",(0,d.jsx)(s.code,{children:"ms"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"disabled"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," Will disable the trigger button."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"noAnimation"})," / ",(0,d.jsx)(s.code,{children:"no_animation"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," if set to ",(0,d.jsx)(s.code,{children:"true"}),", no open/close animation will be shown. Defaults to ",(0,d.jsx)(s.code,{children:"false"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"noAnimationOnMobile"})," / ",(0,d.jsx)(s.code,{children:"no_animation_on_mobile"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," same as ",(0,d.jsx)(s.code,{children:"noAnimation"}),", but gets triggered only if the viewport width is less than ",(0,d.jsx)(s.code,{children:"40em"}),". Defaults to ",(0,d.jsx)(s.code,{children:"false"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"animationDuration"})," / ",(0,d.jsx)(s.code,{children:"animation_duration"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," Duration of animation open/close in ms. Defaults to 300ms."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"preventClose"})," / ",(0,d.jsx)(s.code,{children:"prevent_close"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," if set to ",(0,d.jsx)(s.code,{children:"true"})," (boolean or string), then the user can't close the modal."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"preventOverlayClose"})," / ",(0,d.jsx)(s.code,{children:"prevent_overlay_close"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," Disable clicking the background overlay to close the modal. PS! Pressing ",(0,d.jsx)(s.code,{children:"esc"})," key will still close the modal."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"openModal"})," / ",(0,d.jsx)(s.code,{children:"open_modal"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," set a function to call the callback function, once the modal should open: ",(0,d.jsx)(s.code,{children:"open_modal={(open) => open()}"})]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"closeModal"})," / ",(0,d.jsx)(s.code,{children:"close_modal"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," set a function to call the callback function, once the modal should close: ",(0,d.jsx)(s.code,{children:"close_modal={(close) => close()}"})]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"focusSelector"})," / ",(0,d.jsx)(s.code,{children:"focus_selector"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," The Modal handles the first focus â€“ automatically. However, you can define a custom focus selector the will be used instead ",(0,d.jsx)(s.code,{children:'focusSelector=".css-selector"'}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"overlayClass"})," / ",(0,d.jsx)(s.code,{children:"overlay_class"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," give the page overlay a custom class name (maps to ",(0,d.jsx)(s.code,{children:"dnb-modal__overlay"}),")."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"contentClass"})," / ",(0,d.jsx)(s.code,{children:"content_class"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," give the content wrapper a custom class name (maps to ",(0,d.jsx)(s.code,{children:"dnb-modal__content"}),")."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"omitTriggerButton"})," / ",(0,d.jsx)(s.code,{children:"omit_trigger_button"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," omits default showing trigger button."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"trigger"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," provide a custom trigger component. Like ",(0,d.jsx)(s.code,{children:'trigger={<Anchor href="/" />}'}),". It will set the focus on it when the modal gets closed."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"triggerAttributes"})," / ",(0,d.jsx)(s.code,{children:"trigger_attributes"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," send along with custom HTML attributes or properties to the trigger button."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"dialogTitle"})," / ",(0,d.jsx)(s.code,{children:"dialog_title"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," The aria label of the dialog when no labelled_by and no title is given. Defaults to ",(0,d.jsx)(s.code,{children:"Vindu"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"directDomReturn"})," / ",(0,d.jsx)(s.code,{children:"direct_dom_return"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," If true, the modal will not open in a new DOM but directly in current DOM. Defaults to ",(0,d.jsx)(s.code,{children:"false"}),". Be aware of the side effects of setting this property to ",(0,d.jsx)(s.code,{children:"true"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"bypassInvalidationSelectors"})," / ",(0,d.jsx)(s.code,{children:"bypass_invalidation_selectors"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," Define an array with HTML class selectors (",(0,d.jsx)(s.code,{children:"['.element-selector']"}),") which should not get invalidated when the modal opens/closes. Use this in order to let some parts of your site still be accessible by screen readers."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"scrollRef"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," To get the scroll Element, pass in your own React ref."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"contentRef"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," To get the inner content Element, pass in your own React ref."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.a,{href:"/uilib/layout/space/properties",children:"Space"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," spacing properties like ",(0,d.jsx)(s.code,{children:"top"})," or ",(0,d.jsx)(s.code,{children:"bottom"})," are supported."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"spacing"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(deprecated/optional)"})," if set to ",(0,d.jsx)(s.code,{children:"false"})," then the modal content will be shown without any spacing. Defaults to ",(0,d.jsx)(s.code,{children:"true"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"closeTitle"})," / ",(0,d.jsx)(s.code,{children:"close_title"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(deprecated/optional)"})," the title of the close button. Defaults to ",(0,d.jsx)(s.em,{children:"Lukk"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"hideCloseButton"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(deprecated/optional)"})," if true, the close button will not be shown."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.code,{children:"class"})," or ",(0,d.jsx)(s.code,{children:"className"})]}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(deprecated/optional)"})," give the inner content wrapper a class name (maps to ",(0,d.jsx)(s.code,{children:"dnb-modal__content__inner"}),")."]})]})]})]})}s.default=function(e){void 0===e&&(e={});const{wrapper:s}=Object.assign({},(0,t.ah)(),e.components);return s?(0,d.jsx)(s,Object.assign({},e,{children:(0,d.jsx)(l,e)})):l(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-modal-prop-table-mdx-487c41e8758aa9db3812.js.map