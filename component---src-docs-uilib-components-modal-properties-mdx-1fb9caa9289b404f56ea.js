"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[13566],{6286:function(e,t,n){n.r(t);var o=n(31085),s=n(71184),a=n(86058),i=n(35925),l=n(50882);function r(e){const t=Object.assign({h2:"h2",p:"p"},(0,s.R)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{children:"Properties"}),"\n",(0,o.jsx)(i.default,{}),"\n",(0,o.jsx)(t.h2,{children:"Trigger Properties"}),"\n",(0,o.jsx)(t.p,{children:"Properties targeting the trigger component (Button), but they will be set the same way as all the other properties:"}),"\n",(0,o.jsx)(l.wq,{}),"\n",(0,o.jsx)(t.h2,{children:"Modal Translations"}),"\n",(0,o.jsx)(a.A,{localeKey:"Modal"})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,s.R)(),e.components);return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(r,e)})):r(e)}},35925:function(e,t,n){n.r(t);var o=n(31085),s=n(71184),a=n(15616),i=n(54641);function l(e){return(0,o.jsx)(a.Ay,{props:i.z5})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,s.R)(),e.components);return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(l,e)})):l()}},50882:function(e,t,n){n.d(t,{$y:function(){return r},D1:function(){return c},XD:function(){return i},hb:function(){return u},wq:function(){return d},zk:function(){return l}});n(14041);var o=n(32065),s=n(31085);const a=e=>{let{children:t}=e;return(0,s.jsx)("div",{id:"example-card",style:{padding:"2rem",backgroundColor:"white"},children:t})},i=()=>(0,s.jsx)(o.A,{"data-visual-test":"modal-standard",scope:{ExampleCard:a},children:"<Modal>\n  <ExampleCard>\n    <P>This is a Modal that you can use to make custom variations</P>\n  </ExampleCard>\n</Modal>\n"}),l=()=>(0,s.jsx)(o.A,{scope:{ExampleCard:a},noInline:!0,children:'const Component = () => {\n  const [modalIsActive, setModalState] = React.useState(false)\n  return (\n    <>\n      <Button\n        id="custom-triggerer"\n        text="Custom trigger Button"\n        on_click={() => setModalState((s) => !s)}\n      />\n      <Modal\n        title="Modal Title"\n        omit_trigger_button\n        open_state={modalIsActive}\n        labelled_by="custom-triggerer"\n        on_close={() => setModalState(false)}\n      >\n        <ExampleCard>\n          <P>This Modal was opened by a custom trigger button.</P>\n        </ExampleCard>\n      </Modal>\n    </>\n  )\n}\nrender(<Component />)\n'}),r=()=>(0,s.jsx)(o.A,{scope:{ExampleCard:a},children:'<Modal\n  title="Auto close"\n  triggerAttributes={{\n    text: \'Click me\',\n  }}\n  align_content="center"\n  max_width="40rem"\n  close_modal={(close) => {\n    const timeout = setTimeout(close, 3e3)\n    return () => clearTimeout(timeout)\n  }}\n>\n  <ExampleCard>\n    <P>This Modal will close in 3 seconds.</P>\n  </ExampleCard>\n</Modal>\n'}),c=()=>(0,s.jsx)(o.A,{hidePreview:!0,children:'<Input\n  label="Input"\n  placeholder="Placeholder ..."\n  suffix={<HelpButton>Help text</HelpButton>}\n/>\n'}),d=()=>(0,s.jsx)(o.A,{hidePreview:!0,children:"<Modal\n  triggerAttributes={{\n    icon: 'bell',\n  }}\n  right=\"small\"\n>\n  ... content ...\n</Modal>\n"}),u=()=>(0,s.jsx)(o.A,{hidePreview:!0,children:"<Modal\n  preventClose={true}\n  onClosePrevent={({ triggeredBy, close /* id, event */ }) => {\n    switch (triggeredBy) {\n      case 'keyboard':\n      case 'button':\n        close()\n        break\n      case 'overlay': {\n        const timeout = setTimeout(close, 1e3)\n        return () => clearTimeout(timeout) // clear timeout on unmount\n      }\n    }\n  }}\n>\n  ...\n</Modal>\n"})},54641:function(e,t,n){n.d(t,{Do:function(){return l},FO:function(){return r},j0:function(){return a},z5:function(){return i}});var o=n(21436);const s=e=>Object.fromEntries(Object.entries(e).map((e=>{let[t,n]=e;return[t!==t.toLowerCase()?`${t} / ${(0,o.uc)(t)}`:t,n]}))),a={id:{doc:"The id used internal for the trigger button and Modal component.",type:"string",status:"optional"},rootId:{doc:"The id used internal in the modal root element. Defaults to `root`, so the element id will be `dnb-modal-root`.",type:"string",status:"optional"},contentId:{doc:"Defines an unique identifier to a modal. Use it in case you have to refer in some way to the modal content.",type:"string",status:"optional"},labelledBy:{doc:"The ID of the trigger component, describing the modal content. Defaults to the internal `trigger`, so make sure you define the `title` in `triggerAttributes`.",type:"string",status:"optional"},children:{doc:"the content which will appear when triggering open the modal. If a function is given, you get a close method `() => ({ close })` in the arguments.",type:["React.ReactNode","function"],status:"optional"},fullscreen:{doc:"If set to `true` then the modal content will be shown as fullscreen, without showing the original content behind. Can be set to `false` to omit the auto fullscreen. Defaults to `auto`.",type:"boolean",status:"optional"},openState:{doc:"use this property to control the open/close state by setting either: `opened` / `closed` or `true` / `false`.",type:["boolean","opened","closed"],status:"optional"},openDelay:{doc:"forces the modal to delay the opening. The delay is given in `ms`.",type:["number","string"],status:"optional"},disabled:{doc:"Will disable the trigger button.",type:"boolean",status:"optional"},noAnimation:{doc:"if set to `true`, no open/close animation will be shown. Defaults to `false`.",type:"boolean",status:"optional"},noAnimationOnMobile:{doc:"same as `noAnimation`, but gets triggered only if the viewport width is less than `40em`. Defaults to `false`.",type:"boolean",status:"optional"},animationDuration:{doc:"Duration of animation open/close in ms. Defaults to 300ms.",type:["number","string"],status:"optional"},preventClose:{doc:"if set to `true` (boolean or string), then the user can't close the modal.",type:"boolean",status:"optional"},preventOverlayClose:{doc:"Disable clicking the background overlay to close the modal. PS! Pressing `esc` key will still close the modal.",type:"boolean",status:"optional"},openModal:{doc:"set a function to call the callback function, once the modal should open: `openModal={(open) => open()}`.",type:"function",status:"optional"},closeModal:{doc:"set a function to call the callback function, once the modal should close: `closeModal={(close) => close()}`.",type:"function",status:"optional"},focusSelector:{doc:'The Modal handles the first focus â€“ automatically. However, you can define a custom focus selector the will be used instead `focusSelector=".css-selector"`.',type:"string",status:"optional"},overlayClass:{doc:"give the page overlay a custom class name (maps to `dnb-modal__overlay`).",type:"string",status:"optional"},contentClass:{doc:"give the content wrapper a custom class name (maps to `dnb-modal__content`).",type:"string",status:"optional"},omitTriggerButton:{doc:"omits default showing trigger button.",type:"boolean",status:"optional"},trigger:{doc:'provide a custom trigger component. Like `trigger={<Anchor href="/" />}`. It will set the focus on it when the modal gets closed.',type:["React.ReactNode","function"],status:"optional"},triggerAttributes:{doc:"send along with custom HTML attributes or properties to the trigger button.",type:"Various",status:"optional"},dialogTitle:{doc:"The aria label of the dialog when no labelledBy and no title is given. Defaults to `Vindu`.",type:"string",status:"optional"},directDomReturn:{doc:"If true, the modal will not open in a new DOM but directly in current DOM. Defaults to `false`. Be aware of the side effects of setting this property to `true`.",type:"boolean",status:"optional"},bypassInvalidationSelectors:{doc:"Define an array with HTML class selectors (`['.element-selector']`) which should not get invalidated when the modal opens/closes. Use this in order to let some parts of your site still be accessible by screen readers.",type:"boolean",status:"optional"},scrollRef:{doc:"To get the scroll Element, pass in your own React ref.",type:"React.RefObject",status:"optional"},contentRef:{doc:"To get the inner content Element, pass in your own React ref.",type:"React.RefObject",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"},spacing:{doc:"if set to `false` then the modal content will be shown without any spacing. Defaults to `true`.",type:"boolean",status:"optional"},closeTitle:{doc:"the title of the close button. Defaults to _Lukk_.",type:"string",status:"optional"},hideCloseButton:{doc:"if true, the close button will not be shown.",type:"boolean",status:"optional"},class:{doc:"give the inner content wrapper a class name (maps to `dnb-modal__content__inner`).",type:"string",status:"optional"},className:{doc:"give the inner content wrapper a class name (maps to `dnb-modal__content__inner`).",type:"string",status:"optional"}},i=s(a),l={onOpen:{doc:"This event gets triggered once the modal shows up. Returns the modal id: `{ id }`.",type:"function",status:"optional"},onClose:{doc:"This event gets triggered once the modal gets closed. Returns the modal id: `{ id, event, triggeredBy }`.",type:"function",status:"optional"},onClosePrevent:{doc:"This event gets triggered once the user tries to close the modal, but `preventClose` is set to **true**. Returns a callback `close` you can call to trigger the close mechanism. More details below. Returns the modal id: `{ id, event, close: Method, triggeredBy }`.",type:"function",status:"optional"}},r=s(l)},86058:function(e,t,n){n.d(t,{A:function(){return j}});var o=n(42483),s=n(14041),a=n(42275),i=n(81908),l=n(92034),r=n(77352),c=n(29058),d=n(69094),u=n(21436),p=n(64034),h=n(1470),g=n(43350),m=n(15616),f=n(87554),b=n(97728),y=n(31085);const w=(0,o.A)(a.Ay,{target:"ejvypor0"})({name:"1qdk5x4",styles:"td{white-space:nowrap;}"});function j(e){let{localeKey:t,source:n=null}=e;n=(0,s.useMemo)((()=>n||Object.assign((0,u.zu)({},h.A,g.A),f._M)),[n]);const o={},j={},x=(Array.isArray(t)?t:[t]).map((e=>{if(e.includes(".")){const t=e.split(".")[0];return j[t]=j[t]||[],j[t].push(e),t}return e})),v=(e,t,n,s)=>{e=`${s}.${e}`,j[s]&&!j[s].includes(e)||(o[e]=Object.assign(o[e]||{},{[n]:t}))};Object.entries(n).forEach((e=>{let[t,n]=e;x.forEach((e=>{const o=n[e];o?Object.entries(o).forEach((n=>{let[o,s]=n;if("object"==typeof s){const n=`${e}.${o}`;Object.entries(s).forEach((e=>{let[o,s]=e;v(o,s,t,n)}))}else v(o,s,t,e)})):(0,p.R8)(`TranslationsTable: Could not find any translations for key: "${e}", perhaps you misspelled the key's name?`)}))}));const A=Object.keys(n),M=Object.entries(o).map((e=>{let[t,n]=e;return(0,y.jsxs)(i.A,{children:[(0,y.jsx)(l.A,{children:(0,y.jsx)(m.OH,{variant:"prop",children:t})}),Object.entries(n).map(((e,t)=>{let[n,o]=e;return(0,y.jsx)(l.A,{children:"string"==typeof o?o:(0,y.jsx)("pre",{children:JSON.stringify(o,null,2)})},t+n)}))]},t)}));if(0!=M.length)return(0,y.jsxs)(y.Fragment,{children:[(0,y.jsxs)(r.A,{children:["More info about translations can be found in the"," ",(0,y.jsx)(c.Ay,{href:"/uilib/usage/customisation/localization/",children:"general localization"})," ","and"," ",(0,y.jsx)(c.Ay,{href:"/uilib/extensions/forms/getting-started/#localization-and-translation",children:"Eufemia Forms localization"})," ","docs."]}),(0,y.jsx)(a.Ay.ScrollView,{children:(0,y.jsxs)(w,{children:[(0,y.jsx)("thead",{children:(0,y.jsxs)(i.A,{children:[(0,y.jsx)(d.A,{children:"Key"}),A.map((e=>{const{status:t}=b.R[e];return(0,y.jsxs)(d.A,{children:[e,t?` (${t})`:null]},e)}))]})}),(0,y.jsx)("tbody",{children:M})]})})]});(0,p.R8)(`TranslationsTable: Not able to find any translations for input : "${t}", hence not rendering the translations table.`)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-modal-properties-mdx-1fb9caa9289b404f56ea.js.map