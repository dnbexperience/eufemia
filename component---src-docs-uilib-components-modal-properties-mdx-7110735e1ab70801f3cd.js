"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[96803,16575],{69554:function(e,n,t){t.r(n);var s=t(52322),o=t(45392);function d(e){const n=Object.assign({table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",em:"em",a:"a"},(0,o.ah)(),e.components);return(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Properties"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"id"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," The id used internal for the trigger button and Modal component."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"rootId"})," / ",(0,s.jsx)(n.code,{children:"root_id"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," The id used internal in the modal root element. Defaults to ",(0,s.jsx)(n.code,{children:"root"}),", so the element id will be ",(0,s.jsx)(n.code,{children:"dnb-modal-root"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"contentId"})," / ",(0,s.jsx)(n.code,{children:"content_id"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," Defines an unique identifier to a modal. Use it in case you have to refer in some way to the modal content."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"labelledBy"})," / ",(0,s.jsx)(n.code,{children:"labelled_by"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," The ID of the trigger component, describing the modal content. Defaults to the internal ",(0,s.jsx)(n.code,{children:"trigger"}),", so make sure you define the ",(0,s.jsx)(n.code,{children:"title"})," in ",(0,s.jsx)(n.code,{children:"triggerAttributes"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"children"})," or ",(0,s.jsx)(n.code,{children:"function"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," the content which will appear when triggering open the modal. If a function is given, you get a close method ",(0,s.jsx)(n.code,{children:"() => ({ close })"})," in the arguments."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"fullscreen"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," If set to ",(0,s.jsx)(n.code,{children:"true"})," then the modal content will be shown as fullscreen, without showing the original content behind. Can be set to ",(0,s.jsx)(n.code,{children:"false"})," to omit the auto fullscreen. Defaults to ",(0,s.jsx)(n.code,{children:"auto"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"openState"})," / ",(0,s.jsx)(n.code,{children:"open_state"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," use this prop to control the open/close state by setting either: ",(0,s.jsx)(n.code,{children:"opened"})," / ",(0,s.jsx)(n.code,{children:"closed"})," or ",(0,s.jsx)(n.code,{children:"true"})," / ",(0,s.jsx)(n.code,{children:"false"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"openDelay"})," / ",(0,s.jsx)(n.code,{children:"open_delay"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," forces the modal to delay the opening. The delay is given in ",(0,s.jsx)(n.code,{children:"ms"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"disabled"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," Will disable the trigger button."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"noAnimation"})," / ",(0,s.jsx)(n.code,{children:"no_animation"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," if set to ",(0,s.jsx)(n.code,{children:"true"}),", no open/close animation will be shown. Defaults to ",(0,s.jsx)(n.code,{children:"false"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"noAnimationOnMobile"})," / ",(0,s.jsx)(n.code,{children:"no_animation_on_mobile"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," same as ",(0,s.jsx)(n.code,{children:"noAnimation"}),", but gets triggered only if the viewport width is less than ",(0,s.jsx)(n.code,{children:"40em"}),". Defaults to ",(0,s.jsx)(n.code,{children:"false"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"animationDuration"})," / ",(0,s.jsx)(n.code,{children:"animation_duration"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," Duration of animation open/close in ms. Defaults to 300ms."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"preventClose"})," / ",(0,s.jsx)(n.code,{children:"prevent_close"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," if set to ",(0,s.jsx)(n.code,{children:"true"})," (boolean or string), then the user can't close the modal."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"preventOverlayClose"})," / ",(0,s.jsx)(n.code,{children:"prevent_overlay_close"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," Disable clicking the background overlay to close the modal. PS! Pressing ",(0,s.jsx)(n.code,{children:"esc"})," key will still close the modal."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"openModal"})," / ",(0,s.jsx)(n.code,{children:"open_modal"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," set a function to call the callback function, once the modal should open: ",(0,s.jsx)(n.code,{children:"open_modal={(open) => open()}"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"closeModal"})," / ",(0,s.jsx)(n.code,{children:"close_modal"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," set a function to call the callback function, once the modal should close: ",(0,s.jsx)(n.code,{children:"close_modal={(close) => close()}"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"focusSelector"})," / ",(0,s.jsx)(n.code,{children:"focus_selector"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," The Modal handles the first focus â€“ automatically. However, you can define a custom focus selector the will be used instead ",(0,s.jsx)(n.code,{children:'focusSelector=".css-selector"'}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"overlayClass"})," / ",(0,s.jsx)(n.code,{children:"overlay_class"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," give the page overlay a custom class name (maps to ",(0,s.jsx)(n.code,{children:"dnb-modal__overlay"}),")."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"contentClass"})," / ",(0,s.jsx)(n.code,{children:"content_class"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," give the content wrapper a custom class name (maps to ",(0,s.jsx)(n.code,{children:"dnb-modal__content"}),")."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"omitTriggerButton"})," / ",(0,s.jsx)(n.code,{children:"omit_trigger_button"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," omits default showing trigger button."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"trigger"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," provide a custom trigger component. Like ",(0,s.jsx)(n.code,{children:'trigger={<Anchor href="/" />}'}),". It will set the focus on it when the modal gets closed."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"triggerAttributes"})," / ",(0,s.jsx)(n.code,{children:"trigger_attributes"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," send along with custom HTML attributes or properties to the trigger button."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"dialogTitle"})," / ",(0,s.jsx)(n.code,{children:"dialog_title"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," The aria label of the dialog when no labelled_by and no title is given. Defaults to ",(0,s.jsx)(n.code,{children:"Vindu"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"directDomReturn"})," / ",(0,s.jsx)(n.code,{children:"direct_dom_return"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," If true, the modal will not open in a new DOM but directly in current DOM. Defaults to ",(0,s.jsx)(n.code,{children:"false"}),". Be aware of the side effects of setting this property to ",(0,s.jsx)(n.code,{children:"true"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"bypassInvalidationSelectors"})," / ",(0,s.jsx)(n.code,{children:"bypass_invalidation_selectors"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," Define an array with HTML class selectors (",(0,s.jsx)(n.code,{children:"['.element-selector']"}),") which should not get invalidated when the modal opens/closes. Use this in order to let some parts of your site still be accessible by screen readers."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"scrollRef"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," To get the scroll Element, pass in your own React ref."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"contentRef"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," To get the inner content Element, pass in your own React ref."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/uilib/layout/space/properties",children:"Space"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," spacing properties like ",(0,s.jsx)(n.code,{children:"top"})," or ",(0,s.jsx)(n.code,{children:"bottom"})," are supported."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"spacing"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(deprecated/optional)"})," if set to ",(0,s.jsx)(n.code,{children:"false"})," then the modal content will be shown without any spacing. Defaults to ",(0,s.jsx)(n.code,{children:"true"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"closeTitle"})," / ",(0,s.jsx)(n.code,{children:"close_title"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(deprecated/optional)"})," the title of the close button. Defaults to ",(0,s.jsx)(n.em,{children:"Lukk"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"hideCloseButton"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(deprecated/optional)"})," if true, the close button will not be shown."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"class"})," or ",(0,s.jsx)(n.code,{children:"className"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(deprecated/optional)"})," give the inner content wrapper a class name (maps to ",(0,s.jsx)(n.code,{children:"dnb-modal__content__inner"}),")."]})]})]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(d,e)})):d(e)}},27080:function(e,n,t){t.r(n);var s=t(52322),o=t(45392),d=t(69554),l=t(17435);function i(e){const n=Object.assign({h2:"h2",p:"p"},(0,o.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{children:"Modal Properties"}),"\n",(0,s.jsx)(d.default,{}),"\n",(0,s.jsx)(n.h2,{children:"Trigger Properties"}),"\n",(0,s.jsx)(n.p,{children:"Properties targeting the trigger component (Button), but they will be set the same way as all the other properties:"}),"\n",(0,s.jsx)(l.Ju,{})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}},17435:function(e,n,t){t.d(n,{Ju:function(){return h},Lm:function(){return a},S6:function(){return l},YR:function(){return i},a6:function(){return c},df:function(){return r}});t(2784);var s=t(75333),o=t(52322);const d=e=>{let{children:n}=e;return(0,o.jsx)("div",{id:"example-card",style:{padding:"2rem",backgroundColor:"white"},children:n})},l=()=>(0,o.jsx)(s.Z,{"data-visual-test":"modal-standard",scope:{ExampleCard:d},children:"<Modal>\n  <ExampleCard>\n    <P>This is a Modal that you can use to make custom variations</P>\n  </ExampleCard>\n</Modal>\n"}),i=()=>(0,o.jsx)(s.Z,{scope:{ExampleCard:d},noInline:!0,children:'const Component = () => {\n  const [modalIsActive, setModalState] = React.useState(false)\n  return (\n    <>\n      <Button\n        id="custom-triggerer"\n        text="Custom trigger Button"\n        on_click={() => setModalState((s) => !s)}\n      />\n      <Modal\n        title="Modal Title"\n        omit_trigger_button\n        open_state={modalIsActive}\n        labelled_by="custom-triggerer"\n        on_close={() => setModalState(false)}\n      >\n        <ExampleCard>\n          <P>This Modal was opened by a custom trigger button.</P>\n        </ExampleCard>\n      </Modal>\n    </>\n  )\n}\nrender(<Component />)\n'}),r=()=>(0,o.jsx)(s.Z,{scope:{ExampleCard:d},children:'<Modal\n  title="Auto close"\n  triggerAttributes={{\n    text: \'Click me\',\n  }}\n  align_content="center"\n  max_width="40rem"\n  close_modal={(close) => {\n    const timeout = setTimeout(close, 3e3)\n    return () => clearTimeout(timeout)\n  }}\n>\n  <ExampleCard>\n    <P>This Modal will close in 3 seconds.</P>\n  </ExampleCard>\n</Modal>\n'}),c=()=>(0,o.jsx)(s.Z,{hidePreview:!0,children:'<Input\n  label="Input"\n  placeholder="Placeholder ..."\n  suffix={<HelpButton>Help text</HelpButton>}\n/>\n'}),h=()=>(0,o.jsx)(s.Z,{hidePreview:!0,children:"<Modal\n  triggerAttributes={{\n    icon: 'bell',\n  }}\n  right=\"small\"\n>\n  ... content ...\n</Modal>\n"}),a=()=>(0,o.jsx)(s.Z,{hidePreview:!0,children:"<Modal\n  preventClose={true}\n  onClosePrevent={({ triggeredBy, close /* id, event */ }) => {\n    switch (triggeredBy) {\n      case 'keyboard':\n      case 'button':\n        close()\n        break\n      case 'overlay': {\n        const timeout = setTimeout(close, 1e3)\n        return () => clearTimeout(timeout) // clear timeout on unmount\n      }\n    }\n  }}\n>\n  ...\n</Modal>\n"})}}]);
//# sourceMappingURL=component---src-docs-uilib-components-modal-properties-mdx-7110735e1ab70801f3cd.js.map