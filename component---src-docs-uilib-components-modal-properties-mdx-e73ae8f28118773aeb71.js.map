{"version":3,"file":"component---src-docs-uilib-components-modal-properties-mdx-e73ae8f28118773aeb71.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/modal/properties.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/modal/prop-table.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/modal/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/modal/ModalDocs.ts","webpack://dnb-design-system-portal/./src/shared/parts/TranslationsTable.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport TranslationsTable from 'dnb-design-system-portal/src/shared/parts/TranslationsTable';\nimport ModalPropTable from 'Docs/uilib/components/modal/prop-table';\nimport {ModalExampleTriggerProps} from 'Docs/uilib/components/modal/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(ModalPropTable, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Trigger Properties\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Properties targeting the trigger component (Button), but they will be set the same way as all the other properties:\"\n    }), \"\\n\", _jsx(ModalExampleTriggerProps, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Modal Translations\"\n    }), \"\\n\", _jsx(TranslationsTable, {\n      localeKey: \"Modal\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {ModalPropertiesWithSnakeCase} from '@dnb/eufemia/src/components/modal/ModalDocs';\nfunction _createMdxContent(props) {\n  return _jsx(PropertiesTable, {\n    props: ModalPropertiesWithSnakeCase\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\n\nimport { Modal, P, Button, Input, HelpButton } from '@dnb/eufemia/src'\n\nexport const ExampleCard = ({ children }) => (\n  <div\n    id=\"example-card\"\n    style={{ padding: '2rem', backgroundColor: 'white' }}\n  >\n    {children}\n  </div>\n)\n\nexport const ModalExampleStandard = () => (\n  <ComponentBox data-visual-test=\"modal-standard\" scope={{ ExampleCard }}>\n    <Modal>\n      <ExampleCard>\n        <P>This is a Modal that you can use to make custom variations</P>\n      </ExampleCard>\n    </Modal>\n  </ComponentBox>\n)\n\nexport const ModalExampleStateOnly = () => (\n  <ComponentBox scope={{ ExampleCard }}>\n    {() => {\n      const Component = () => {\n        const [modalIsActive, setModalState] = React.useState(false)\n        return (\n          <>\n            <Button\n              id=\"custom-triggerer\"\n              text=\"Custom trigger Button\"\n              on_click={() => setModalState((s) => !s)}\n            />\n            <Modal\n              title=\"Modal Title\"\n              omit_trigger_button\n              open_state={modalIsActive}\n              labelled_by=\"custom-triggerer\"\n              on_close={() => setModalState(false)}\n            >\n              <ExampleCard>\n                <P>This Modal was opened by a custom trigger button.</P>\n              </ExampleCard>\n            </Modal>\n          </>\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const ModalExampleCloseByHandler = () => (\n  <ComponentBox scope={{ ExampleCard }}>\n    <Modal\n      title=\"Auto close\"\n      triggerAttributes={{ text: 'Click me' }}\n      align_content=\"center\"\n      max_width=\"40rem\"\n      close_modal={(close) => {\n        const timeout = setTimeout(close, 3e3)\n        return () => clearTimeout(timeout)\n      }}\n    >\n      <ExampleCard>\n        <P>This Modal will close in 3 seconds.</P>\n      </ExampleCard>\n    </Modal>\n  </ComponentBox>\n)\n\nexport const ModalExampleSuffix = () => (\n  <ComponentBox hidePreview>\n    <Input\n      label=\"Input\"\n      placeholder=\"Placeholder ...\"\n      suffix={<HelpButton>Help text</HelpButton>}\n    />\n  </ComponentBox>\n)\n\nexport const ModalExampleTriggerProps = () => (\n  <ComponentBox hidePreview>\n    <Modal triggerAttributes={{ icon: 'bell' }} right=\"small\">\n      ... content ...\n    </Modal>\n  </ComponentBox>\n)\n\nexport const ModalExampleOnClosePrevent = () => (\n  <ComponentBox hidePreview>\n    <Modal\n      preventClose={true}\n      onClosePrevent={({ triggeredBy, close /* id, event */ }) => {\n        switch (triggeredBy) {\n          case 'keyboard':\n          case 'button':\n            close()\n            break\n          case 'overlay': {\n            const timeout = setTimeout(close, 1e3)\n            return () => clearTimeout(timeout) // clear timeout on unmount\n          }\n        }\n      }}\n    >\n      ...\n    </Modal>\n  </ComponentBox>\n)\n","import { PropertiesTableProps } from '../../shared/types'\nimport { toSnakeCase } from '../../shared/component-helper'\n\nconst transformPropertyNamesWithSnakeCase = (\n  properties: PropertiesTableProps\n) => {\n  return Object.fromEntries(\n    Object.entries(properties).map(([key, value]) => [\n      key !== key.toLowerCase() ? `${key} / ${toSnakeCase(key)}` : key,\n      value,\n    ])\n  )\n}\n\nexport const ModalProperties: PropertiesTableProps = {\n  id: {\n    doc: 'The id used internal for the trigger button and Modal component.',\n    type: 'string',\n    status: 'optional',\n  },\n  rootId: {\n    doc: 'The id used internal in the modal root element. Defaults to `root`, so the element id will be `dnb-modal-root`.',\n    type: 'string',\n    status: 'optional',\n  },\n  contentId: {\n    doc: 'Defines an unique identifier to a modal. Use it in case you have to refer in some way to the modal content.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelledBy: {\n    doc: 'The ID of the trigger component, describing the modal content. Defaults to the internal `trigger`, so make sure you define the `title` in `triggerAttributes`.',\n    type: 'string',\n    status: 'optional',\n  },\n  children: {\n    doc: 'the content which will appear when triggering open the modal. If a function is given, you get a close method `() => ({ close })` in the arguments.',\n    type: ['React.ReactNode', 'function'],\n    status: 'optional',\n  },\n  fullscreen: {\n    doc: 'If set to `true` then the modal content will be shown as fullscreen, without showing the original content behind. Can be set to `false` to omit the auto fullscreen. Defaults to `auto`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  openState: {\n    doc: 'use this property to control the open/close state by setting either: `opened` / `closed` or `true` / `false`.',\n    type: ['boolean', 'opened', 'closed'],\n    status: 'optional',\n  },\n  openDelay: {\n    doc: 'forces the modal to delay the opening. The delay is given in `ms`.',\n    type: ['number', 'string'],\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Will disable the trigger button.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  noAnimation: {\n    doc: 'if set to `true`, no open/close animation will be shown. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  noAnimationOnMobile: {\n    doc: 'same as `noAnimation`, but gets triggered only if the viewport width is less than `40em`. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  animationDuration: {\n    doc: 'Duration of animation open/close in ms. Defaults to 300ms.',\n    type: ['number', 'string'],\n    status: 'optional',\n  },\n  preventClose: {\n    doc: \"if set to `true` (boolean or string), then the user can't close the modal.\",\n    type: 'boolean',\n    status: 'optional',\n  },\n  preventOverlayClose: {\n    doc: 'Disable clicking the background overlay to close the modal. PS! Pressing `esc` key will still close the modal.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  openModal: {\n    doc: 'set a function to call the callback function, once the modal should open: `openModal={(open) => open()}`.',\n    type: 'function',\n    status: 'optional',\n  },\n  closeModal: {\n    doc: 'set a function to call the callback function, once the modal should close: `closeModal={(close) => close()}`.',\n    type: 'function',\n    status: 'optional',\n  },\n  focusSelector: {\n    doc: 'The Modal handles the first focus – automatically. However, you can define a custom focus selector the will be used instead `focusSelector=\".css-selector\"`.',\n    type: 'string',\n    status: 'optional',\n  },\n  overlayClass: {\n    doc: 'give the page overlay a custom class name (maps to `dnb-modal__overlay`).',\n    type: 'string',\n    status: 'optional',\n  },\n  contentClass: {\n    doc: 'give the content wrapper a custom class name (maps to `dnb-modal__content`).',\n    type: 'string',\n    status: 'optional',\n  },\n  omitTriggerButton: {\n    doc: 'omits default showing trigger button.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  trigger: {\n    doc: 'provide a custom trigger component. Like `trigger={<Anchor href=\"/\" />}`. It will set the focus on it when the modal gets closed.',\n    type: ['React.ReactNode', 'function'],\n    status: 'optional',\n  },\n  triggerAttributes: {\n    doc: 'send along with custom HTML attributes or properties to the trigger button.',\n    type: 'Various',\n    status: 'optional',\n  },\n  dialogTitle: {\n    doc: 'The aria label of the dialog when no labelledBy and no title is given. Defaults to `Vindu`.',\n    type: 'string',\n    status: 'optional',\n  },\n  directDomReturn: {\n    doc: 'If true, the modal will not open in a new DOM but directly in current DOM. Defaults to `false`. Be aware of the side effects of setting this property to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  bypassInvalidationSelectors: {\n    doc: \"Define an array with HTML class selectors (`['.element-selector']`) which should not get invalidated when the modal opens/closes. Use this in order to let some parts of your site still be accessible by screen readers.\",\n    type: 'boolean',\n    status: 'optional',\n  },\n  scrollRef: {\n    doc: 'To get the scroll Element, pass in your own React ref.',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  contentRef: {\n    doc: 'To get the inner content Element, pass in your own React ref.',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n  spacing: {\n    doc: 'if set to `false` then the modal content will be shown without any spacing. Defaults to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  closeTitle: {\n    doc: 'the title of the close button. Defaults to _Lukk_.',\n    type: 'string',\n    status: 'optional',\n  },\n  hideCloseButton: {\n    doc: 'if true, the close button will not be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  class: {\n    doc: 'give the inner content wrapper a class name (maps to `dnb-modal__content__inner`).',\n    type: 'string',\n    status: 'optional',\n  },\n  className: {\n    doc: 'give the inner content wrapper a class name (maps to `dnb-modal__content__inner`).',\n    type: 'string',\n    status: 'optional',\n  },\n}\n\nexport const ModalPropertiesWithSnakeCase: PropertiesTableProps =\n  transformPropertyNamesWithSnakeCase(ModalProperties)\n\nexport const ModalEvents: PropertiesTableProps = {\n  onOpen: {\n    doc: 'This event gets triggered once the modal shows up. Returns the modal id: `{ id }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  onClose: {\n    doc: 'This event gets triggered once the modal gets closed. Returns the modal id: `{ id, event, triggeredBy }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  onClosePrevent: {\n    doc: 'This event gets triggered once the user tries to close the modal, but `preventClose` is set to **true**. Returns a callback `close` you can call to trigger the close mechanism. More details below. Returns the modal id: `{ id, event, close: Method, triggeredBy }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const ModalEventsWithSnakeCase: PropertiesTableProps =\n  transformPropertyNamesWithSnakeCase(ModalEvents)\n","import { useMemo } from 'react'\nimport styled from '@emotion/styled'\nimport { Anchor, P, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { extendDeep, warn } from '@dnb/eufemia/src/shared/component-helper'\nimport globalTranslations from '@dnb/eufemia/src/shared/locales'\nimport formsTranslations from '@dnb/eufemia/src/extensions/forms/constants/locales'\nimport { FormattedCode } from './PropertiesTable'\nimport { Translation } from '@dnb/eufemia/src/shared/Context'\nimport { translationsWithoutEnUS } from '../../core/PortalProviders'\nimport { languageDisplayNames } from '../../core/ChangeLocale'\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nexport default function TranslationsTable({\n  localeKey,\n  source = null,\n}: {\n  localeKey?: string | Array<string>\n  source?: Record<string, Translation>\n}) {\n  source = useMemo(() => {\n    return (\n      source ||\n      Object.assign(\n        extendDeep({}, globalTranslations, formsTranslations),\n        translationsWithoutEnUS,\n      )\n    )\n  }, [source])\n\n  const entries = {}\n  const allowList = {}\n  const localeKeys = (\n    Array.isArray(localeKey) ? localeKey : [localeKey]\n  ).map((key) => {\n    if (key.includes('.')) {\n      const first = key.split('.')[0]\n      allowList[first] = allowList[first] || []\n      allowList[first].push(key)\n      return first\n    }\n\n    return key\n  })\n\n  const addToEntries = (key, translation, locale, localeKey) => {\n    key = `${localeKey}.${key}`\n    if (allowList[localeKey] && !allowList[localeKey].includes(key)) {\n      return\n    }\n    entries[key] = Object.assign(entries[key] || {}, {\n      [locale]: translation,\n    })\n  }\n\n  Object.entries(source).forEach(([locale, translations]) => {\n    localeKeys.forEach((localeKey) => {\n      const translationsObj = translations[localeKey]\n      if (!translationsObj) {\n        warn(\n          `TranslationsTable: Could not find any translations for key: \"${localeKey}\", perhaps you misspelled the key's name?`,\n        )\n        return\n      }\n      Object.entries(translationsObj).forEach(([key, translation]) => {\n        if (typeof translation === 'object') {\n          const nestedKey = `${localeKey}.${key}`\n          Object.entries(translation).forEach(([key, translation]) => {\n            addToEntries(key, translation, locale, nestedKey)\n          })\n        } else {\n          addToEntries(key, translation, locale, localeKey)\n        }\n      })\n    })\n  })\n\n  const locales = Object.keys(source)\n  const tableRows = Object.entries(entries).map(([key, values]) => {\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode variant=\"prop\">{key}</FormattedCode>\n        </Td>\n        {Object.entries(values).map(([locale, value], i) => {\n          return (\n            <Td key={i + locale}>\n              {typeof value === 'string' ? (\n                value\n              ) : (\n                <pre>{JSON.stringify(value, null, 2)}</pre>\n              )}\n            </Td>\n          )\n        })}\n      </Tr>\n    )\n  })\n\n  if (tableRows.length == 0) {\n    warn(\n      `TranslationsTable: Not able to find any translations for input : \"${localeKey}\", hence not rendering the translations table.`,\n    )\n    return\n  }\n\n  return (\n    <>\n      <P>\n        More info about translations can be found in the{' '}\n        <Anchor href=\"/uilib/usage/customisation/localization/\">\n          general localization\n        </Anchor>{' '}\n        and{' '}\n        <Anchor href=\"/uilib/extensions/forms/getting-started/#localization-and-translation\">\n          Eufemia Forms localization\n        </Anchor>{' '}\n        docs.\n      </P>\n      <Table.ScrollView>\n        <StyledTable>\n          <thead>\n            <Tr>\n              <Th>Key</Th>\n              {locales.map((locale) => {\n                const { status } = languageDisplayNames[locale]\n                return (\n                  <Th key={locale}>\n                    {locale}\n                    {status ? ` (${status})` : null}\n                  </Th>\n                )\n              })}\n            </Tr>\n          </thead>\n          <tbody>{tableRows}</tbody>\n        </StyledTable>\n      </Table.ScrollView>\n    </>\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","_provideComponents","components","_jsxs","_Fragment","children","_jsx","ModalPropTable","ModalExampleTriggerProps","TranslationsTable","localeKey","wrapper","MDXLayout","PropertiesTable","ModalPropertiesWithSnakeCase","ExampleCard","_ref","id","style","padding","backgroundColor","ModalExampleStandard","_jsx2","ComponentBox","scope","ModalExampleStateOnly","noInline","ModalExampleCloseByHandler","ModalExampleSuffix","hidePreview","ModalExampleOnClosePrevent","transformPropertyNamesWithSnakeCase","properties","fromEntries","entries","map","key","value","toLowerCase","toSnakeCase","ModalProperties","doc","type","status","rootId","contentId","labelledBy","fullscreen","openState","openDelay","disabled","noAnimation","noAnimationOnMobile","animationDuration","preventClose","preventOverlayClose","openModal","closeModal","focusSelector","overlayClass","contentClass","omitTriggerButton","trigger","triggerAttributes","dialogTitle","directDomReturn","bypassInvalidationSelectors","scrollRef","contentRef","spacing","closeTitle","hideCloseButton","class","className","ModalEvents","onOpen","onClose","onClosePrevent","ModalEventsWithSnakeCase","StyledTable","_styled","Table","target","name","styles","source","useMemo","extendDeep","globalTranslations","formsTranslations","translationsWithoutEnUS","allowList","localeKeys","Array","isArray","includes","first","split","push","addToEntries","translation","locale","forEach","_ref2","translations","translationsObj","_ref3","nestedKey","_ref4","warn","locales","keys","tableRows","_ref5","values","Tr","Td","FormattedCode","variant","_ref6","i","JSON","stringify","length","P","Anchor","href","Th","languageDisplayNames"],"sourceRoot":""}