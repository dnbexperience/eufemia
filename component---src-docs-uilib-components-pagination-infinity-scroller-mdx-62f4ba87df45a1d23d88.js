"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[43524,3047],{85326:function(n,e,t){t.r(e);var i=t(52322),o=t(45392),a=t(74692),s=t(95791);function r(n){return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.default,{}),"\n",(0,i.jsx)(s.default,{})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(r,n)})):r()}},74692:function(n,e,t){t.r(e);var i=t(52322),o=t(45392);function a(n){const e=Object.assign({h2:"h2",p:"p",code:"code",a:"a",h3:"h3",strong:"strong",pre:"pre",hr:"hr",ol:"ol",li:"li",h4:"h4"},(0,o.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:"Description"}),"\n",(0,i.jsxs)(e.p,{children:["The InfinityScroller component is a ",(0,i.jsx)(e.code,{children:"mode"})," of the Pagination component which loads content continuously as the user scrolls down the page. Go to ",(0,i.jsx)(e.a,{href:"/uilib/components/pagination",children:"Pagination"})," for information on properties and events."]}),"\n",(0,i.jsxs)(e.p,{children:["You can choose to use either ",(0,i.jsx)(e.code,{children:'<Pagination mode="infinity" />'})," or ",(0,i.jsx)(e.code,{children:"<InfinityScroller />"}),"."]}),"\n",(0,i.jsx)(e.h3,{children:"Async data handling"}),"\n",(0,i.jsx)(e.p,{children:"Infinity scrolling requires additional handling of already loaded content. To do so, it stores already shown content and interacts from there."}),"\n",(0,i.jsx)(e.h3,{children:"Gotchas"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Infinity scroller:"}),' Once content inside a page changes, we have to tell the component explicitly what "page" number happened, including the new content.']}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:"setContent(pageNumber, ReactComponent)\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h3,{children:"Infinity scroller and content handling"}),"\n",(0,i.jsx)(e.p,{children:"In order to update content into the internal pages stack, we have to get access to the component instance. There are several ways to do so."}),"\n",(0,i.jsx)(e.p,{children:"Also, there are two type of handling content on:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:'Either you fill the content as "pages" in a page per page basis (methods 1-3),'}),"\n",(0,i.jsx)(e.li,{children:"or you have your own stack, and you only want use the infinity part (method 4)."}),"\n"]}),"\n",(0,i.jsx)(e.h4,{children:"Infinity scroller method #1"}),"\n",(0,i.jsx)(e.p,{children:"Create the instance before using it."}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"NB:"})," Keep in mind, you may create the instance first during runtime, either in a class ",(0,i.jsx)(e.code,{children:"constructor"})," or by using ",(0,i.jsx)(e.code,{children:"useState"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:"import { createPagination } from '@dnb/eufemia/components/Pagination'\n\n// create our Component instance\nconst { Pagination, setContent, endInfinity, resetContent } =\n  React.useState(createPagination)\n\n// Later we can do call this (make sure the page is set by listening to the events)\nsetContent(page, ReactComponent)\n\nrender(<Pagination mode=\"infinity\" />)\n"})}),"\n",(0,i.jsx)(e.h4,{children:"Infinity scroller method #2"}),"\n",(0,i.jsxs)(e.p,{children:["Using the ",(0,i.jsx)(e.code,{children:"on_change"})," event together with ",(0,i.jsx)(e.code,{children:"setContent"}),"."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:"import { Pagination } from '@dnb/eufemia/components'\n\nrender(\n  <Pagination\n    mode=\"infinity\"\n    on_change={({ pageNumber, setContent }) => {\n      setContent(pageNumber, ReactComponent)\n    }}\n  />,\n)\n"})}),"\n",(0,i.jsx)(e.h4,{children:"Infinity scroller method #3"}),"\n",(0,i.jsxs)(e.p,{children:["Using a ",(0,i.jsx)(e.code,{children:"set_content_handler"})," handler."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:"import InfinityScroller from '@dnb/eufemia/components/pagination/InfinityScroller'\n\nconst [localPage, setLocalPage] = React.useState(1)\nconst setContent = React.createRef()\n\nReact.useEffect(() => {\n  setContent.current(localPage, ReactComponent)\n}, [localPage])\n\nrender(\n  <InfinityScroller\n    set_content_handler={(fn) => (setContent = fn)}\n    on_change={({ pageNumber }) => {\n      setLocalPage(pageNumber)\n    }}\n  />,\n)\n"})}),"\n",(0,i.jsx)(e.h4,{children:"Infinity scroller method #4"}),"\n",(0,i.jsxs)(e.p,{children:["Using a ",(0,i.jsx)(e.code,{children:"InfinityMarker"})," only. See ",(0,i.jsx)(e.a,{href:"https://github.com/dnbexperience/eufemia/blob/main/packages/dnb-eufemia/src/components/pagination/stories/PaginationTableMarker.stories.tsx",children:"code example on GitHub"}),"."]}),"\n",(0,i.jsxs)(e.p,{children:["This method will basically add a load button on top, if ",(0,i.jsx)(e.code,{children:"startup_page"})," or ",(0,i.jsx)(e.code,{children:"current_page"})," is higher than ",(0,i.jsx)(e.code,{children:"1"})," at the first render."]}),"\n",(0,i.jsxs)(e.p,{children:["Also, it adds an indicator at the bottom until next render, and as long as ",(0,i.jsx)(e.code,{children:"page_count"})," has not reached the internal page count. But instead of setting ",(0,i.jsx)(e.code,{children:"page_count"})," (total pages), you can pragmatically call ",(0,i.jsx)(e.code,{children:"endInfinity()"})," instead."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:"import { createPagination } from '@dnb/eufemia/components/Pagination'\n\n// create our Component instance\nconst { InfinityMarker, endInfinity, resetInfinity } =\n  React.useState(createPagination)\n\nrender(<InfinityMarker>ReactComponent</InfinityMarker>)\n"})})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(a,n)})):a(n)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-pagination-infinity-scroller-mdx-62f4ba87df45a1d23d88.js.map