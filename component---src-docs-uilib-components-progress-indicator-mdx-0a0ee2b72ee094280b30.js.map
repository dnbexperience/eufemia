{"version":3,"file":"component---src-docs-uilib-components-progress-indicator-mdx-0a0ee2b72ee094280b30.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/progress-indicator.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/progress-indicator/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/progress-indicator/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/progress-indicator/Examples.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport ProgressIndicatorInfo from 'Docs/uilib/components/progress-indicator/info';\nimport ProgressIndicatorDemos from 'Docs/uilib/components/progress-indicator/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(ProgressIndicatorInfo, {}), \"\\n\", _jsx(ProgressIndicatorDemos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {ProgressIndicatorDefaultExample, ProgressIndicatorCircularExample, ProgressIndicatorCircularLabelHorizontalExample, ProgressIndicatorCircularLabelVerticalExample, ProgressIndicatorCircularPrimaryExample, ProgressIndicatorCircularRandomExample, ProgressIndicatorCircularRandomTransitionExample, ProgressIndicatorCircularRandomOnCompleteExample, ProgressIndicatorCircularDialogExample, ProgressIndicatorLinearDefaultExample, ProgressIndicatorLinearSmallExample, ProgressIndicatorLinearLabelHorizontalExample, ProgressIndicatorLinearLabelVerticalExample, ProgressIndicatorLinearLargeExample, ProgressIndicatorLinearRandomExample, ProgressIndicatorLinearRandomTransitionExample, ProgressIndicatorLinearRandomOnCompleteExample, ProgressIndicatorLinearDialogExample} from 'Docs/uilib/components/progress-indicator/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Default ProgressIndicator is Circular\"\n    }), \"\\n\", _jsx(ProgressIndicatorDefaultExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Default Circular ProgressIndicator\"\n    }), \"\\n\", _jsx(ProgressIndicatorCircularExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Circular ProgressIndicator with a label in a horizontal direction\"\n    }), \"\\n\", _jsx(ProgressIndicatorCircularLabelHorizontalExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Circular ProgressIndicator with a label in a vertical direction\"\n    }), \"\\n\", _jsx(ProgressIndicatorCircularLabelVerticalExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Shows a large Circular ProgressIndicator with a static 50% in progress\"\n    }), \"\\n\", _jsx(ProgressIndicatorCircularPrimaryExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Circular ProgressIndicator with random value\"\n    }), \"\\n\", _jsx(ProgressIndicatorCircularRandomExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Circular ProgressIndicator with random progress value to show the transition\"\n    }), \"\\n\", _jsx(ProgressIndicatorCircularRandomTransitionExample, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Circular ProgressIndicator with random \", _jsx(_components.code, {\n        children: \"on_complete\"\n      }), \" callback\"]\n    }), \"\\n\", _jsx(ProgressIndicatorCircularRandomOnCompleteExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Circular ProgressIndicator inside a Dialog\"\n    }), \"\\n\", _jsx(ProgressIndicatorCircularDialogExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Default Linear ProgressIndicator\"\n    }), \"\\n\", _jsx(ProgressIndicatorLinearDefaultExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Small Linear ProgressIndicator\"\n    }), \"\\n\", _jsx(ProgressIndicatorLinearSmallExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Linear ProgressIndicator with a label in a horizontal direction\"\n    }), \"\\n\", _jsx(ProgressIndicatorLinearLabelHorizontalExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Linear ProgressIndicator with a label in a vertical direction\"\n    }), \"\\n\", _jsx(ProgressIndicatorLinearLabelVerticalExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Shows a large Linear ProgressIndicator with a static 50% in progress\"\n    }), \"\\n\", _jsx(ProgressIndicatorLinearLargeExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Linear ProgressIndicator with random value\"\n    }), \"\\n\", _jsx(ProgressIndicatorLinearRandomExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Linear ProgressIndicator with random progress value to show the transition\"\n    }), \"\\n\", _jsx(ProgressIndicatorLinearRandomTransitionExample, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Linear ProgressIndicator with random \", _jsx(_components.code, {\n        children: \"on_complete\"\n      }), \" callback\"]\n    }), \"\\n\", _jsx(ProgressIndicatorLinearRandomOnCompleteExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Linear ProgressIndicator inside a Dialog\"\n    }), \"\\n\", _jsx(ProgressIndicatorLinearDialogExample, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    em: \"em\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use a ProgressIndicator whenever the user has to wait for more than \", _jsx(_components.em, {\n        children: \"150ms\"\n      }), \". This component is also known as:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Indicator (Activity-Indicator)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Loader (Pre-loader)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Spinner\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport {\n  ProgressIndicator,\n  Button,\n  FormRow,\n  Dialog,\n  Flex,\n} from '@dnb/eufemia/src'\n\nexport const ProgressIndicatorDefaultExample = () => (\n  <ComponentBox>\n    <ProgressIndicator />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularExample = () => (\n  <ComponentBox>\n    <ProgressIndicator type=\"circular\" />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularLabelHorizontalExample = () => (\n  <ComponentBox>\n    <ProgressIndicator\n      // label=\"Custom label ...\"\n      type=\"circular\"\n      show_label={true}\n      label_direction=\"horizontal\"\n    />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularLabelVerticalExample = () => (\n  <ComponentBox>\n    <ProgressIndicator\n      // label=\"Custom label ...\"\n      type=\"circular\"\n      show_label={true}\n      label_direction=\"vertical\"\n    />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularPrimaryExample = () => (\n  <ComponentBox data-visual-test=\"progress-indicator-circular--primary\">\n    <ProgressIndicator\n      type=\"circular\"\n      progress=\"50\"\n      size=\"large\"\n      no_animation\n    />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularRandomExample = () => (\n  <ComponentBox>\n    {() => {\n      const ChangeValue = () => {\n        const [value, setValue] = React.useState(50)\n        return (\n          <Flex.Horizontal align=\"center\">\n            <ProgressIndicator\n              type=\"circular\"\n              progress={value}\n              show_label\n              no_animation\n            />\n            <Button\n              left\n              size=\"small\"\n              variant=\"secondary\"\n              onClick={() => setValue(Math.random() * 100)}\n            >\n              Change\n            </Button>\n          </Flex.Horizontal>\n        )\n      }\n\n      return <ChangeValue />\n    }}\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularRandomTransitionExample = () => (\n  <ComponentBox>\n    {() => {\n      const Example = () => {\n        const random = (min, max) =>\n          Math.floor(Math.random() * (max - min + 1)) + min\n        const [progress, setProgressIndicator] = React.useState(\n          random(1, 100),\n        )\n        React.useEffect(() => {\n          const timer = setInterval(\n            () => setProgressIndicator(random(1, 100)),\n            1e3,\n          )\n          return () => clearInterval(timer)\n        })\n        return (\n          <ProgressIndicator\n            type=\"circular\"\n            size=\"large\"\n            progress={progress}\n          />\n        )\n      }\n      return <Example />\n    }}\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularRandomOnCompleteExample = () => (\n  <ComponentBox>\n    {() => {\n      const Example = () => {\n        const random = (min, max) =>\n          Math.floor(Math.random() * (max - min + 1)) + min\n        const [visible, setVisible] = React.useState(true)\n        React.useEffect(() => {\n          const timer = setInterval(\n            () => setVisible(!visible),\n            random(2400, 4200),\n          )\n          return () => clearTimeout(timer)\n        })\n        return (\n          <ProgressIndicator\n            type=\"circular\"\n            size=\"large\"\n            visible={visible}\n            on_complete={() => {\n              console.log('on_complete_circular')\n            }}\n          />\n        )\n      }\n      return <Example />\n    }}\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularDialogExample = () => (\n  <ComponentBox>\n    <Dialog\n      spacing={false}\n      maxWidth=\"12rem\"\n      fullscreen={false}\n      alignContent=\"centered\"\n      hideCloseButton\n      triggerAttributes={{ text: 'Show' }}\n      preventClose={false}\n    >\n      <ProgressIndicator\n        type=\"circular\"\n        show_label\n        label_direction=\"vertical\"\n        top=\"large\"\n        bottom=\"large\"\n        size=\"large\"\n      />\n    </Dialog>\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearDefaultExample = () => (\n  <ComponentBox>\n    <ProgressIndicator type=\"linear\" />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearSmallExample = () => (\n  <ComponentBox>\n    <ProgressIndicator type=\"linear\" size=\"small\" />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearLabelHorizontalExample = () => (\n  <ComponentBox>\n    <ProgressIndicator\n      type=\"linear\"\n      // label=\"Custom label ...\"\n      show_label={true}\n      label_direction=\"horizontal\"\n    />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearLabelVerticalExample = () => (\n  <ComponentBox>\n    <ProgressIndicator\n      type=\"linear\"\n      // label=\"Custom label ...\"\n      show_label={true}\n      label_direction=\"vertical\"\n    />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearLargeExample = () => (\n  <ComponentBox data-visual-test=\"progress-indicator-linear--primary\">\n    <ProgressIndicator\n      type=\"linear\"\n      progress=\"50\"\n      size=\"large\"\n      no_animation\n    />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearRandomExample = () => (\n  <ComponentBox>\n    {() => {\n      const ChangeValue = () => {\n        const [value, setValue] = React.useState(50)\n        return (\n          <FormRow centered>\n            <ProgressIndicator\n              type=\"linear\"\n              progress={value}\n              no_animation\n            />\n            <Button\n              left\n              size=\"small\"\n              variant=\"secondary\"\n              onClick={() => setValue(Math.random() * 100)}\n            >\n              Change\n            </Button>\n          </FormRow>\n        )\n      }\n\n      return <ChangeValue />\n    }}\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearRandomTransitionExample = () => (\n  <ComponentBox>\n    {() => {\n      const Example = () => {\n        const random = (min, max) =>\n          Math.floor(Math.random() * (max - min + 1)) + min\n        const [progress, setProgressIndicator] = React.useState(\n          random(1, 100),\n        )\n        React.useEffect(() => {\n          const timer = setInterval(\n            () => setProgressIndicator(random(1, 100)),\n            1e3,\n          )\n          return () => clearInterval(timer)\n        })\n        return <ProgressIndicator type=\"linear\" progress={progress} />\n      }\n      return <Example />\n    }}\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearRandomOnCompleteExample = () => (\n  <ComponentBox>\n    {() => {\n      const Example = () => {\n        const random = (min, max) =>\n          Math.floor(Math.random() * (max - min + 1)) + min\n        const [visible, setVisible] = React.useState(true)\n        React.useEffect(() => {\n          const timer = setInterval(\n            () => setVisible(!visible),\n            random(2400, 4200),\n          )\n          return () => clearTimeout(timer)\n        })\n        return (\n          <ProgressIndicator\n            type=\"linear\"\n            size=\"large\"\n            visible={visible}\n            on_complete={() => {\n              console.log('on_complete_linear')\n            }}\n          />\n        )\n      }\n      return <Example />\n    }}\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearDialogExample = () => (\n  <ComponentBox>\n    <Dialog\n      spacing={false}\n      maxWidth=\"12rem\"\n      fullscreen={false}\n      alignContent=\"centered\"\n      hideCloseButton\n      triggerAttributes={{ text: 'Show' }}\n      preventClose={false}\n    >\n      <ProgressIndicator\n        type=\"linear\"\n        show_label\n        label_direction=\"vertical\"\n        top=\"large\"\n        bottom=\"large\"\n      />\n    </Dialog>\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorSizesExample = () => (\n  <ComponentBox data-visual-test=\"progress-indicator-sizes\">\n    <div style={{ display: 'flex' }}>\n      <ProgressIndicator progress=\"50\" size=\"small\" />\n      <ProgressIndicator progress=\"50\" size=\"medium\" />\n      <ProgressIndicator progress=\"50\" />\n      <ProgressIndicator progress=\"50\" size=\"large\" />\n    </div>\n  </ComponentBox>\n)\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","ProgressIndicatorInfo","ProgressIndicatorDemos","wrapper","MDXLayout","Object","assign","_provideComponents","components","_components","h2","h3","code","ProgressIndicatorDefaultExample","ProgressIndicatorCircularExample","ProgressIndicatorCircularLabelHorizontalExample","ProgressIndicatorCircularLabelVerticalExample","ProgressIndicatorCircularPrimaryExample","ProgressIndicatorCircularRandomExample","ProgressIndicatorCircularRandomTransitionExample","ProgressIndicatorCircularRandomOnCompleteExample","ProgressIndicatorCircularDialogExample","ProgressIndicatorLinearDefaultExample","ProgressIndicatorLinearSmallExample","ProgressIndicatorLinearLabelHorizontalExample","ProgressIndicatorLinearLabelVerticalExample","ProgressIndicatorLinearLargeExample","ProgressIndicatorLinearRandomExample","ProgressIndicatorLinearRandomTransitionExample","ProgressIndicatorLinearRandomOnCompleteExample","ProgressIndicatorLinearDialogExample","p","em","ul","li","ComponentBox","noInline","ProgressIndicatorSizesExample"],"sourceRoot":""}