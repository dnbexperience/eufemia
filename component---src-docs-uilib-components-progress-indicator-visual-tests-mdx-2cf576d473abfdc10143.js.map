{"version":3,"file":"component---src-docs-uilib-components-progress-indicator-visual-tests-mdx-2cf576d473abfdc10143.js","mappings":"wLAIA,SAASA,EAAkBC,GACzB,OAAOC,EAAAA,EAAAA,KAAKC,EAAAA,GAA+B,CAAC,EAC9C,CAOA,UANA,SAAoBF,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOG,QAASC,GAAaC,OAAOC,OAAO,CAAC,GAAGC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOJ,GAAYH,EAAAA,EAAAA,KAAKG,EAAWC,OAAOC,OAAO,CAAC,EAAGN,EAAO,CAC1DS,UAAUR,EAAAA,EAAAA,KAAKF,EAAmBC,MAC9BD,GACR,C,ygBCGO,MAAMW,EAAkCA,KAAAT,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAF,SAAA,4BAMlCG,EAAmCA,KAAAX,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAF,SAAA,4CAMnCI,EAAkDA,KAAAZ,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAF,SAAA,oIAWlDK,EAAgDA,KAAAb,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAF,SAAA,kIAWhDM,EAA0CA,KAAAd,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,2DAAAF,SAAA,iGAW1CO,EAAyCA,KAAAf,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAM,UAAA,EAAAR,SAAA,+eA8BzCS,EAAmDA,KAAAjB,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAM,UAAA,EAAAR,SAAA,meA6BnDU,EAAmDA,KAAAlB,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAM,UAAA,EAAAR,SAAA,yjBA8BnDW,EAAyCA,KAAAnB,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAF,SAAA,0WAuBzCY,EAAwCA,KAAApB,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAF,SAAA,0CAMxCa,EAAsCA,KAAArB,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAF,SAAA,uDAMtCc,EAAgDA,KAAAtB,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAF,SAAA,kIAWhDe,EAA8CA,KAAAvB,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAF,SAAA,gIAW9CgB,EAAsCA,KAAAxB,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,yDAAAF,SAAA,+FAWtCiB,EAAuCA,KAAAzB,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAM,UAAA,EAAAR,SAAA,iaA6BvCkB,EAAiDA,KAAA1B,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAM,UAAA,EAAAR,SAAA,wcAuBjDmB,EAAiDA,KAAA3B,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAM,UAAA,EAAAR,SAAA,qjBA8BjDoB,EAAuCA,KAAA5B,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAF,SAAA,sVAsBvCP,EAAgCA,KAAAD,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,+CAAAF,SAAA,mQ","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/progress-indicator/visual-tests.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/progress-indicator/Examples.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {ProgressIndicatorSizesExample} from 'Docs/uilib/components/progress-indicator/Examples';\nfunction _createMdxContent(props) {\n  return _jsx(ProgressIndicatorSizesExample, {});\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport {\n  ProgressIndicator,\n  Button,\n  FormRow,\n  Dialog,\n  Flex,\n} from '@dnb/eufemia/src'\n\nexport const ProgressIndicatorDefaultExample = () => (\n  <ComponentBox>\n    <ProgressIndicator />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularExample = () => (\n  <ComponentBox>\n    <ProgressIndicator type=\"circular\" />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularLabelHorizontalExample = () => (\n  <ComponentBox>\n    <ProgressIndicator\n      // label=\"Custom label ...\"\n      type=\"circular\"\n      show_label={true}\n      label_direction=\"horizontal\"\n    />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularLabelVerticalExample = () => (\n  <ComponentBox>\n    <ProgressIndicator\n      // label=\"Custom label ...\"\n      type=\"circular\"\n      show_label={true}\n      label_direction=\"vertical\"\n    />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularPrimaryExample = () => (\n  <ComponentBox data-visual-test=\"progress-indicator-circular--primary\">\n    <ProgressIndicator\n      type=\"circular\"\n      progress=\"50\"\n      size=\"large\"\n      no_animation\n    />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularRandomExample = () => (\n  <ComponentBox>\n    {() => {\n      const ChangeValue = () => {\n        const [value, setValue] = React.useState(50)\n        return (\n          <Flex.Horizontal align=\"center\">\n            <ProgressIndicator\n              type=\"circular\"\n              progress={value}\n              show_label\n              no_animation\n            />\n            <Button\n              left\n              size=\"small\"\n              variant=\"secondary\"\n              onClick={() => setValue(Math.random() * 100)}\n            >\n              Change\n            </Button>\n          </Flex.Horizontal>\n        )\n      }\n\n      return <ChangeValue />\n    }}\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularRandomTransitionExample = () => (\n  <ComponentBox>\n    {() => {\n      const Example = () => {\n        const random = (min, max) =>\n          Math.floor(Math.random() * (max - min + 1)) + min\n        const [progress, setProgressIndicator] = React.useState(\n          random(1, 100),\n        )\n        React.useEffect(() => {\n          const timer = setInterval(\n            () => setProgressIndicator(random(1, 100)),\n            1e3,\n          )\n          return () => clearInterval(timer)\n        })\n        return (\n          <ProgressIndicator\n            type=\"circular\"\n            size=\"large\"\n            progress={progress}\n          />\n        )\n      }\n      return <Example />\n    }}\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularRandomOnCompleteExample = () => (\n  <ComponentBox>\n    {() => {\n      const Example = () => {\n        const random = (min, max) =>\n          Math.floor(Math.random() * (max - min + 1)) + min\n        const [visible, setVisible] = React.useState(true)\n        React.useEffect(() => {\n          const timer = setInterval(\n            () => setVisible(!visible),\n            random(2400, 4200),\n          )\n          return () => clearTimeout(timer)\n        })\n        return (\n          <ProgressIndicator\n            type=\"circular\"\n            size=\"large\"\n            visible={visible}\n            on_complete={() => {\n              console.log('on_complete_circular')\n            }}\n          />\n        )\n      }\n      return <Example />\n    }}\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularDialogExample = () => (\n  <ComponentBox>\n    <Dialog\n      spacing={false}\n      maxWidth=\"12rem\"\n      fullscreen={false}\n      alignContent=\"centered\"\n      hideCloseButton\n      triggerAttributes={{ text: 'Show' }}\n      preventClose={false}\n    >\n      <ProgressIndicator\n        type=\"circular\"\n        show_label\n        label_direction=\"vertical\"\n        top=\"large\"\n        bottom=\"large\"\n        size=\"large\"\n      />\n    </Dialog>\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearDefaultExample = () => (\n  <ComponentBox>\n    <ProgressIndicator type=\"linear\" />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearSmallExample = () => (\n  <ComponentBox>\n    <ProgressIndicator type=\"linear\" size=\"small\" />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearLabelHorizontalExample = () => (\n  <ComponentBox>\n    <ProgressIndicator\n      type=\"linear\"\n      // label=\"Custom label ...\"\n      show_label={true}\n      label_direction=\"horizontal\"\n    />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearLabelVerticalExample = () => (\n  <ComponentBox>\n    <ProgressIndicator\n      type=\"linear\"\n      // label=\"Custom label ...\"\n      show_label={true}\n      label_direction=\"vertical\"\n    />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearLargeExample = () => (\n  <ComponentBox data-visual-test=\"progress-indicator-linear--primary\">\n    <ProgressIndicator\n      type=\"linear\"\n      progress=\"50\"\n      size=\"large\"\n      no_animation\n    />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearRandomExample = () => (\n  <ComponentBox>\n    {() => {\n      const ChangeValue = () => {\n        const [value, setValue] = React.useState(50)\n        return (\n          <FormRow centered>\n            <ProgressIndicator\n              type=\"linear\"\n              progress={value}\n              no_animation\n            />\n            <Button\n              left\n              size=\"small\"\n              variant=\"secondary\"\n              onClick={() => setValue(Math.random() * 100)}\n            >\n              Change\n            </Button>\n          </FormRow>\n        )\n      }\n\n      return <ChangeValue />\n    }}\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearRandomTransitionExample = () => (\n  <ComponentBox>\n    {() => {\n      const Example = () => {\n        const random = (min, max) =>\n          Math.floor(Math.random() * (max - min + 1)) + min\n        const [progress, setProgressIndicator] = React.useState(\n          random(1, 100),\n        )\n        React.useEffect(() => {\n          const timer = setInterval(\n            () => setProgressIndicator(random(1, 100)),\n            1e3,\n          )\n          return () => clearInterval(timer)\n        })\n        return <ProgressIndicator type=\"linear\" progress={progress} />\n      }\n      return <Example />\n    }}\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearRandomOnCompleteExample = () => (\n  <ComponentBox>\n    {() => {\n      const Example = () => {\n        const random = (min, max) =>\n          Math.floor(Math.random() * (max - min + 1)) + min\n        const [visible, setVisible] = React.useState(true)\n        React.useEffect(() => {\n          const timer = setInterval(\n            () => setVisible(!visible),\n            random(2400, 4200),\n          )\n          return () => clearTimeout(timer)\n        })\n        return (\n          <ProgressIndicator\n            type=\"linear\"\n            size=\"large\"\n            visible={visible}\n            on_complete={() => {\n              console.log('on_complete_linear')\n            }}\n          />\n        )\n      }\n      return <Example />\n    }}\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearDialogExample = () => (\n  <ComponentBox>\n    <Dialog\n      spacing={false}\n      maxWidth=\"12rem\"\n      fullscreen={false}\n      alignContent=\"centered\"\n      hideCloseButton\n      triggerAttributes={{ text: 'Show' }}\n      preventClose={false}\n    >\n      <ProgressIndicator\n        type=\"linear\"\n        show_label\n        label_direction=\"vertical\"\n        top=\"large\"\n        bottom=\"large\"\n      />\n    </Dialog>\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorSizesExample = () => (\n  <ComponentBox data-visual-test=\"progress-indicator-sizes\">\n    <div style={{ display: 'flex' }}>\n      <ProgressIndicator progress=\"50\" size=\"small\" />\n      <ProgressIndicator progress=\"50\" size=\"medium\" />\n      <ProgressIndicator progress=\"50\" />\n      <ProgressIndicator progress=\"50\" size=\"large\" />\n    </div>\n  </ComponentBox>\n)\n"],"names":["_createMdxContent","props","_jsx","ProgressIndicatorSizesExample","wrapper","MDXLayout","Object","assign","_provideComponents","components","children","ProgressIndicatorDefaultExample","ComponentBox","ProgressIndicatorCircularExample","ProgressIndicatorCircularLabelHorizontalExample","ProgressIndicatorCircularLabelVerticalExample","ProgressIndicatorCircularPrimaryExample","ProgressIndicatorCircularRandomExample","noInline","ProgressIndicatorCircularRandomTransitionExample","ProgressIndicatorCircularRandomOnCompleteExample","ProgressIndicatorCircularDialogExample","ProgressIndicatorLinearDefaultExample","ProgressIndicatorLinearSmallExample","ProgressIndicatorLinearLabelHorizontalExample","ProgressIndicatorLinearLabelVerticalExample","ProgressIndicatorLinearLargeExample","ProgressIndicatorLinearRandomExample","ProgressIndicatorLinearRandomTransitionExample","ProgressIndicatorLinearRandomOnCompleteExample","ProgressIndicatorLinearDialogExample"],"sourceRoot":""}