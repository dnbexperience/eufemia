{"version":3,"file":"component---src-docs-uilib-components-radio-mdx-64eb54be9a873df53ff1.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/radio.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/radio/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/radio/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/radio/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport RadioInfo from 'Docs/uilib/components/radio/info';\nimport RadioDemos from 'Docs/uilib/components/radio/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(RadioInfo, {}), \"\\n\", _jsx(RadioDemos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { Radio, HelpButton } from '@dnb/eufemia/src'\nimport { FieldBlock } from '@dnb/eufemia/src/extensions/forms'\n\nexport const RadioExampleDefault = () => (\n  <ComponentBox data-visual-test=\"radio-group\">\n    <Radio.Group\n      label=\"Radio Group\"\n      on_change={({ value }) => {\n        console.log('on_change', value)\n      }}\n      value=\"first\"\n    >\n      <Radio label=\"First\" value=\"first\" />\n      <Radio label=\"Second\" value=\"second\" />\n      <Radio label=\"Third\" value=\"third\" />\n    </Radio.Group>\n  </ComponentBox>\n)\n\nexport const RadioExampleVerticalGroup = () => (\n  <ComponentBox data-visual-test=\"radio-group-vertical\">\n    <Radio.Group\n      label=\"Vertical Group\"\n      layout_direction=\"column\"\n      on_change={({ value }) => {\n        console.log('on_change', value)\n      }}\n    >\n      <Radio label=\"First\" value=\"first\" />\n      <Radio label=\"Second\" value=\"second\" />\n      <Radio label=\"Third\" value=\"third\" checked />\n    </Radio.Group>\n  </ComponentBox>\n)\n\nexport const RadioExampleLabelAbove = () => (\n  <ComponentBox data-visual-test=\"radio-group-label-above\">\n    <Radio.Group\n      vertical\n      label=\"Vertical Group\"\n      layout_direction=\"column\"\n      on_change={({ value }) => {\n        console.log('on_change', value)\n      }}\n    >\n      <Radio label=\"First\" value=\"first\" />\n      <Radio label=\"Second\" value=\"second\" />\n      <Radio label=\"Third\" value=\"third\" checked />\n    </Radio.Group>\n  </ComponentBox>\n)\n\nexport const RadioExampleGroupStatus = () => (\n  <ComponentBox data-visual-test=\"radio-group-status\">\n    <Radio.Group\n      label=\"Radio Group with status\"\n      layout_direction=\"column\"\n      on_change={({ value }) => {\n        console.log('on_change', value)\n      }}\n    >\n      <Radio label=\"First\" value=\"first\" status=\"error\" />\n      <Radio label=\"Second\" value=\"second\" status=\"Error message\" />\n      <Radio\n        label=\"Third\"\n        value=\"third\"\n        checked\n        status=\"Info message\"\n        status_state=\"info\"\n      />\n    </Radio.Group>\n  </ComponentBox>\n)\n\nexport const RadioExampleWithoutGroup = () => (\n  <ComponentBox data-visual-test=\"radio-group-plain\">\n    <FieldBlock label=\"Plain Radio group\" layout=\"horizontal\">\n      <Radio\n        value=\"first\"\n        label=\"First\"\n        group=\"MyRadioGroup\"\n        on_change={({ value, checked }) => {\n          console.log('on_change', value, checked)\n        }}\n        right\n      />\n      <Radio\n        value=\"second\"\n        label=\"Second\"\n        group=\"MyRadioGroup\"\n        on_change={({ value, checked }) => {\n          console.log('on_change', value, checked)\n        }}\n        right\n      />\n      <Radio\n        checked\n        value=\"third\"\n        label=\"Third\"\n        group=\"MyRadioGroup\"\n        on_change={({ value, checked }) => {\n          console.log('on_change', value, checked)\n        }}\n        right\n      />\n    </FieldBlock>\n  </ComponentBox>\n)\n\nexport const RadioExampleSizes = () => (\n  <ComponentBox data-visual-test=\"radio-sizes\">\n    <Radio size=\"medium\" label=\"Medium\" right=\"large\" checked />\n    <Radio size=\"large\" label=\"Large\" checked />\n  </ComponentBox>\n)\n\nexport const RadioExampleDisabled = () => (\n  <ComponentBox data-visual-test=\"radio-group-disabled\">\n    <Radio.Group\n      label=\"Disabled Group\"\n      disabled\n      label_position=\"left\"\n      name=\"MyGroup\"\n    >\n      <Radio label=\"First\" value=\"first\" />\n      <Radio label=\"Second\" value=\"second\" />\n      <Radio label=\"Third\" value=\"third\" checked />\n    </Radio.Group>\n  </ComponentBox>\n)\n\nexport const RadioExampleSuffix = () => (\n  <ComponentBox>\n    <Radio.Group label=\"With suffixes\" label_position=\"left\">\n      <Radio label=\"First\" value=\"first\" />\n      <Radio\n        label=\"Second\"\n        value=\"second\"\n        suffix={<HelpButton title=\"Modal Title\">Modal content</HelpButton>}\n      />\n      <Radio\n        label=\"Third\"\n        value=\"third\"\n        status=\"Error message\"\n        suffix={<HelpButton title=\"Modal Title\">Modal content</HelpButton>}\n        checked\n      />\n    </Radio.Group>\n  </ComponentBox>\n)\n\nexport function RadioVisibleWhenVisualTests() {\n  return (\n    <>\n      <ComponentBox data-visual-test=\"radio-default\">\n        <Radio label=\"Single Radio\" />\n      </ComponentBox>\n      <ComponentBox data-visual-test=\"radio-checked\">\n        <Radio\n          label=\"Checked Radio\"\n          checked\n          on_change={({ checked }) => console.log(checked)}\n        />\n      </ComponentBox>\n    </>\n  )\n}\n\nexport const RadioExampleError = () => (\n  <>\n    <ComponentBox data-visual-test=\"radio-error-unchecked\">\n      <Radio label=\"Unchecked\" status=\"error\" />\n    </ComponentBox>\n    <ComponentBox data-visual-test=\"radio-error-checked\">\n      <Radio label=\"Checked\" status=\"error\" checked />\n    </ComponentBox>\n  </>\n)\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {RadioExampleDefault, RadioExampleVerticalGroup, RadioExampleLabelAbove, RadioExampleGroupStatus, RadioExampleWithoutGroup, RadioExampleSizes, RadioExampleDisabled, RadioExampleSuffix, RadioExampleError, RadioVisibleWhenVisualTests} from 'Docs/uilib/components/radio/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {VisibleWhenVisualTest} = _components;\n  if (!VisibleWhenVisualTest) _missingMdxReference(\"VisibleWhenVisualTest\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Radio group\"\n    }), \"\\n\", _jsx(RadioExampleDefault, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Vertical aligned Radio group\"\n    }), \"\\n\", _jsx(RadioExampleVerticalGroup, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Radio group with label above\"\n    }), \"\\n\", _jsx(RadioExampleLabelAbove, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Radio group with status messages\"\n    }), \"\\n\", _jsx(RadioExampleGroupStatus, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Plain Radio group\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Without \", _jsx(_components.code, {\n        children: \"<Radio.Group>\"\n      }), \". It is recommended to use the \", _jsx(_components.code, {\n        children: \"<Radio.Group>\"\n      }), \" if you are using \", _jsx(_components.strong, {\n        children: \"React\"\n      }), \".\"]\n    }), \"\\n\", _jsx(RadioExampleWithoutGroup, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With different sizes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As for now, there are two sizes. \", _jsx(_components.code, {\n        children: \"medium\"\n      }), \" is the default size.\"]\n    }), \"\\n\", _jsx(RadioExampleSizes, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Disabled Radio Group\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"With \", _jsx(_components.code, {\n        children: \"label_position\"\n      }), \" set to left.\"]\n    }), \"\\n\", _jsx(RadioExampleDisabled, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Radio Buttons with a suffix\"\n    }), \"\\n\", _jsx(RadioExampleSuffix, {}), \"\\n\", _jsxs(VisibleWhenVisualTest, {\n      children: [_jsx(RadioExampleError, {}), _jsx(RadioVisibleWhenVisualTests, {})]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Radio component is shown as a circle that is filled (checked) when activated.\\nRadio buttons are used to let a user select one option / value of a limited number of choices within a group of Radio buttons.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It is recommended to use it in a group. You can use either the React component \", _jsx(_components.code, {\n        children: \"<Radio.Group>\"\n      }), \" or use the property \", _jsx(_components.code, {\n        children: \"group=\\\"NAME\\\"\"\n      }), \" to define the group.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","RadioInfo","RadioDemos","wrapper","MDXLayout","Object","assign","_provideComponents","components","RadioExampleDefault","ComponentBox","RadioExampleVerticalGroup","RadioExampleLabelAbove","RadioExampleGroupStatus","RadioExampleWithoutGroup","RadioExampleSizes","RadioExampleDisabled","RadioExampleSuffix","RadioVisibleWhenVisualTests","RadioExampleError","_components","h2","h3","p","code","strong","VisibleWhenVisualTest","id","component","Error","_missingMdxReference"],"sourceRoot":""}