"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[82397],{54801:function(t,e,o){o.r(e);var a=o(52322),s=o(45392),n=o(85179),i=o(49679);function r(t){const e=Object.assign({h2:"h2",code:"code",h3:"h3",p:"p",strong:"strong"},(0,s.ah)(),t.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.h2,{children:[(0,a.jsx)(e.code,{children:"Radio"})," properties"]}),"\n",(0,a.jsx)(n.ZP,{props:i.BJ}),"\n",(0,a.jsxs)(e.h2,{children:[(0,a.jsx)(e.code,{children:"Radio.Group"})," properties"]}),"\n",(0,a.jsx)(n.ZP,{props:i.Dl}),"\n",(0,a.jsx)(e.h3,{children:"Radio group Context"}),"\n",(0,a.jsxs)(e.p,{children:["You can also pass through ",(0,a.jsx)(e.code,{children:"label_position"})," and some more ",(0,a.jsx)(e.strong,{children:"Radio button"})," properties to the Group. This way all nested Radio buttons will get the properties."]})]})}e.default=function(t){void 0===t&&(t={});const{wrapper:e}=Object.assign({},(0,s.ah)(),t.components);return e?(0,a.jsx)(e,Object.assign({},t,{children:(0,a.jsx)(r,t)})):r(t)}},49679:function(t,e,o){o.d(e,{BJ:function(){return a},Dl:function(){return s},UE:function(){return n},rH:function(){return i}});const a={value:{doc:"defines the `value` as a string. Use it to get the value during the `on_change` event listener callback in the **RadioGroup**.",type:"string",status:"required"},checked:{doc:"determine whether the radio is checked or not. Default will be `false`.",type:"boolean",status:"optional"},group:{doc:"use a unique group identifier to define the Radio buttons that belongs together.",type:"string",status:"optional"},size:{doc:"the size of the Radio button. For now there is **medium** (default) and **large**.",type:["medium","large"],status:"optional"},label:{doc:"use either the `label` property or provide a custom one.",type:"React.ReactNode",status:"optional"},label_position:{doc:"defines the position of the `label`. Use either `left` or `right`. Defaults to `right`.",type:["left","right"],status:"optional"},label_sr_only:{doc:"use `true` to make the label only readable by screen readers.",type:"boolean",status:"optional"},status:{doc:"text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.",type:["error","info","boolean"],status:"optional"},status_state:{doc:"defines the state of the status. It's two statuses `[error, info]`. Defaults to `error`.",type:["error","info"],status:"optional"},status_props:{doc:"use an object to define additional FormStatus properties.",type:"Various",status:"optional"},globalStatus:{doc:"the [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).",type:"Various",status:"optional"},innerRef:{doc:"by providing a React.ref we can get the internally used input element (DOM). E.g. `innerRef={myRef}` by using `React.createRef()` or `React.useRef()`.",type:"React.RefObject",status:"optional"}},s={value:{doc:"defines the pre-selected Radio button. The value has to match the one provided in the Radio button. Use a string value.",type:"string",status:"optional"},name:{doc:"custom grouping name. Defaults to a random name.",type:"string",status:"optional"},layout_direction:{doc:"Define the layout direction of the Radio buttons. Can be either `column` or `row`. Defaults to `column`.",type:["column","row"],status:"optional"},size:{doc:"the size of the Radio button. For now there is **medium** (default) and **large**.",type:["medium","large"],status:"optional"},status:{doc:"uses the `form-status` component to show failure messages.",type:["string","boolean"],status:"optional"},status_state:{doc:"defines the state of the status. It's two statuses `[error, info]`. Defaults to `error`.",type:["error","info"],status:"optional"},status_props:{doc:"use an object to define additional FormStatus properties.",type:"Various",status:"optional"},globalStatus:{doc:"the [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).",type:"Various",status:"optional"},label:{doc:"use either the `label` property or provide a custom one.",type:"React.ReactNode",status:"optional"},label_direction:{doc:"to define the `label` layout direction on how the next element should be placed on. Can be either `vertical` or `horizontal`. Defaults to `horizontal`.",type:["vertical","horizontal"],status:"optional"},label_sr_only:{doc:"use `true` to make the label only readable by screen readers.",type:"boolean",status:"optional"},vertical:{doc:"will force both `direction` and `label_direction` to be **vertical** if set to `true`.",type:"boolean",status:"optional"}},n={on_change:{doc:"will be called on state changes made by the user. Returns an object `{ checked, value, event }`.",type:"function",status:"optional"}},i={on_change:{doc:"will be called once a Radio button changes the state. Returns an object `{ value, event }`.",type:"function",status:"optional"}}},6210:function(t,e,o){var a=o(30600);e.Z=a.Z},64223:function(t,e,o){var a=o(91859);e.Z=a.Z},41676:function(t,e,o){var a=o(76711);e.Z=a.Z}}]);
//# sourceMappingURL=component---src-docs-uilib-components-radio-properties-mdx-104655746267e628e8c1.js.map