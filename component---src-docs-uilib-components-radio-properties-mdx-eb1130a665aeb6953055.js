"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[82397],{54801:function(e,s,t){t.r(s);var d=t(52322),r=t(45392);function n(e){const s=Object.assign({h2:"h2",code:"code",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",em:"em",strong:"strong",a:"a",h3:"h3",p:"p"},(0,r.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(s.h2,{children:[(0,d.jsx)(s.code,{children:"Radio"})," properties"]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Properties"}),(0,d.jsx)(s.th,{children:"Description"})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"value"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(required)"})," defines the ",(0,d.jsx)(s.code,{children:"value"})," as a string. Use it to get the value during the ",(0,d.jsx)(s.code,{children:"on_change"})," event listener callback in the ",(0,d.jsx)(s.strong,{children:"RadioGroup"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"checked"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," determine whether the radio is checked or not. Default will be ",(0,d.jsx)(s.code,{children:"false"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"group"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," use a unique group identifier to define the Radio buttons that belongs together."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"size"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," the size of the Radio button. For now there is ",(0,d.jsx)(s.strong,{children:"medium"})," (default) and ",(0,d.jsx)(s.strong,{children:"large"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"label"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," use either the ",(0,d.jsx)(s.code,{children:"label"})," property or provide a custom one."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"label_position"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," defines the position of the ",(0,d.jsx)(s.code,{children:"label"}),". Use either ",(0,d.jsx)(s.code,{children:"left"})," or ",(0,d.jsx)(s.code,{children:"right"}),". Defaults to ",(0,d.jsx)(s.code,{children:"right"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"label_sr_only"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," use ",(0,d.jsx)(s.code,{children:"true"})," to make the label only readable by screen readers."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"status"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," text with a status message. The style defaults to an error message. You can use ",(0,d.jsx)(s.code,{children:"true"})," to only get the status color, without a message."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"status_state"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," defines the state of the status. It's two statuses ",(0,d.jsx)(s.code,{children:"[error, info]"}),". Defaults to ",(0,d.jsx)(s.code,{children:"error"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"status_props"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," use an object to define additional FormStatus properties."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"globalStatus"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," the ",(0,d.jsx)(s.a,{href:"/uilib/components/global-status/properties/#configuration-object",children:"configuration"})," used for the target ",(0,d.jsx)(s.a,{href:"/uilib/components/global-status",children:"GlobalStatus"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"innerRef"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," by providing a React.ref we can get the internally used input element (DOM). E.g. ",(0,d.jsx)(s.code,{children:"innerRef={myRef}"})," by using ",(0,d.jsx)(s.code,{children:"React.createRef()"})," or ",(0,d.jsx)(s.code,{children:"React.useRef()"}),"."]})]})]})]}),"\n",(0,d.jsxs)(s.h2,{children:[(0,d.jsx)(s.code,{children:"Radio.Group"})," properties"]}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Properties"}),(0,d.jsx)(s.th,{children:"Description"})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"value"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," defines the pre-selected Radio button. The value has to match the one provided in the Radio button. Use a string value."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"name"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," custom grouping name. Defaults to a random name."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"layout_direction"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," Define the layout direction of the Radio buttons. Can be either ",(0,d.jsx)(s.code,{children:"column"})," or ",(0,d.jsx)(s.code,{children:"row"}),". Defaults to ",(0,d.jsx)(s.code,{children:"column"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"size"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," the size of the Radio button. For now there is ",(0,d.jsx)(s.strong,{children:"medium"})," (default) and ",(0,d.jsx)(s.strong,{children:"large"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"status"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," uses the ",(0,d.jsx)(s.code,{children:"form-status"})," component to show failure messages."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"status_state"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," defines the state of the status. It's two statuses ",(0,d.jsx)(s.code,{children:"[error, info]"}),". Defaults to ",(0,d.jsx)(s.code,{children:"error"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"status_props"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," use an object to define additional FormStatus properties."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"globalStatus"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," the ",(0,d.jsx)(s.a,{href:"/uilib/components/global-status/properties/#configuration-object",children:"configuration"})," used for the target ",(0,d.jsx)(s.a,{href:"/uilib/components/global-status",children:"GlobalStatus"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"label"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," use either the ",(0,d.jsx)(s.code,{children:"label"})," property or provide a custom one."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"label_direction"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," to define the ",(0,d.jsx)(s.code,{children:"label"})," layout direction on how the next element should be placed on. Can be either ",(0,d.jsx)(s.code,{children:"vertical"})," or ",(0,d.jsx)(s.code,{children:"horizontal"}),". Defaults to ",(0,d.jsx)(s.code,{children:"horizontal"}),"."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"label_sr_only"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," use ",(0,d.jsx)(s.code,{children:"true"})," to make the label only readable by screen readers."]})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:(0,d.jsx)(s.code,{children:"vertical"})}),(0,d.jsxs)(s.td,{children:[(0,d.jsx)(s.em,{children:"(optional)"})," will force both ",(0,d.jsx)(s.code,{children:"direction"})," and ",(0,d.jsx)(s.code,{children:"label_direction"})," to be ",(0,d.jsx)(s.strong,{children:"vertical"})," if set to ",(0,d.jsx)(s.code,{children:"true"}),"."]})]})]})]}),"\n",(0,d.jsx)(s.h3,{children:"Radio group Context"}),"\n",(0,d.jsxs)(s.p,{children:["You can also pass through ",(0,d.jsx)(s.code,{children:"label_position"})," and some more ",(0,d.jsx)(s.strong,{children:"Radio button"})," properties to the Group. This way all nested Radio buttons will get the properties."]})]})}s.default=function(e){void 0===e&&(e={});const{wrapper:s}=Object.assign({},(0,r.ah)(),e.components);return s?(0,d.jsx)(s,Object.assign({},e,{children:(0,d.jsx)(n,e)})):n(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-radio-properties-mdx-eb1130a665aeb6953055.js.map