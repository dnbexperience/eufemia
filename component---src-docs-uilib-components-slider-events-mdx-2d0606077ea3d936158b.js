"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[53669],{148:function(t,e,o){o.r(e);var s=o(52322),a=o(45392),n=o(85179),r=o(15139);function i(t){const e=Object.assign({h2:"h2"},(0,a.ah)(),t.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{children:"Events"}),"\n",(0,s.jsx)(n.Z,{props:r.e})]})}e.default=function(t){void 0===t&&(t={});const{wrapper:e}=Object.assign({},(0,a.ah)(),t.components);return e?(0,s.jsx)(e,Object.assign({},t,{children:(0,s.jsx)(i,t)})):i(t)}},85179:function(t,e,o){o.d(e,{Z:function(){return f}});var s=o(70894),a=o(61185),n=o(55560),r=o(41676),i=o(6210),l=o(64223),u=o(37339),c=o(595),p=o(52322);const d={...c.L,p:t=>(0,p.jsx)("span",{...t})},h=(0,s.Z)(n.ZP,{target:"e13h2c840"})({name:"1qdk5x4",styles:"td{white-space:nowrap;}"}),b="var(--color-fire-red)",m=t=>{let{variant:e,strikethrough:o,children:s,style:a={},...n}=t;if(o&&(a.textDecoration="line-through"),"string"==typeof s)switch(e){case"prop":break;case"type":a.color=s.startsWith("'")?b:"var(--color-violet)";case"value":a.color=s.startsWith("'")?b:"undefined"===s?"var(--color-black-55)":"var(--color-success-green)";default:a.background="none",a.boxShadow="none"}return d.code({children:s,style:a,...n})};function f(t){let{props:e,valueType:o="string",camelCase:s,omit:c,showDefaultValue:b=!1}=t;const f=Object.keys(e),v=Object.entries(e).map((t=>{let[e,n]=t;if(!n)return null;const{type:l,defaultValue:h,doc:v,status:w}=n;return c&&c.includes(e)?null:(0,p.jsxs)(r.Z,{children:[(0,p.jsx)(i.Z,{children:(0,p.jsx)(m,{variant:"prop",strikethrough:"deprecated"===w,children:g(s?(0,u.zW)(e):e)})}),(0,p.jsx)(i.Z,{children:(Array.isArray(l)?l:[l]).map((t=>{if("string"==typeof t){if(String(t).includes("{valueType}")){if(Array.isArray(o))return o.map(((t,e)=>(0,p.jsx)(m,{variant:"type",children:t},t+e))).reduce(((t,e)=>(0,p.jsxs)(p.Fragment,{children:[t," ",(0,p.jsx)("br",{})," ",e]})));t=o}return(0,p.jsx)(m,{variant:"type",children:t},t)}})).reduce(((t,e)=>(0,p.jsxs)(p.Fragment,{children:[t," ",(0,p.jsx)("br",{})," ",e]})))}),b&&(0,p.jsx)(i.Z,{children:h?(0,p.jsx)(m,{variant:"value",children:h}):"required"===w&&"REQUIRED"}),(0,p.jsxs)(i.Z,{children:[(!b||"deprecated"===w)&&(0,p.jsxs)("em",{children:["(",w,") "]}),(0,p.jsx)(a.D,{components:d,children:s?y(v,f):v})]})]},e)}));return(0,p.jsx)(n.ZP.ScrollView,{children:(0,p.jsxs)(h,{children:[(0,p.jsx)("thead",{children:(0,p.jsxs)(r.Z,{children:[(0,p.jsx)(l.Z,{children:"Property"}),(0,p.jsx)(l.Z,{children:"Type"}),b&&(0,p.jsx)(l.Z,{children:"Default value"}),(0,p.jsx)(l.Z,{children:"Description"})]})}),(0,p.jsx)("tbody",{children:v})]})})}function y(t,e){return e.forEach((e=>{t=t.replace(new RegExp(e,"g"),(0,u.zW)(e))})),t}function g(t){return t.includes("/")?(0,p.jsx)(a.D,{components:d,children:t}):t}},15139:function(t,e,o){o.d(e,{e:function(){return a},h:function(){return s}});const s={value:{doc:"The `value` of the slider as a number or an array. If an array with numbers is provided, each number will represent a thumb button (the `+` and `-` button will be hidden on multiple thumbs).",type:["number","Array<number>"],status:"required"},min:{doc:"The minimum value. Can be a negative number as well. Defaults to `0`.",type:"number",status:"optional"},max:{doc:"The maximum value. Defaults to `100`.",type:"number",status:"optional"},step:{doc:"The steps the slider takes on changing the value. Defaults to `null`.",type:"number",status:"optional"},vertical:{doc:"Show the slider vertically. Defaults to `false`.",type:"boolean",status:"optional"},reverse:{doc:"Show the slider reversed. Defaults to `false`.",type:"boolean",status:"optional"},stretch:{doc:"If set to `true`, then the slider will be 100% in `width`.",type:"boolean",status:"optional"},hideButtons:{doc:"Removes the helper buttons. Defaults to `false`.",type:"boolean",status:"optional"},multiThumbBehavior:{doc:"Use either `omit`, `push` or `swap`. This property only works for two (range) or more thumb buttons, while `omit` will stop the thumb from swapping, `push` will push its nearest thumb along. Defaults to `swap`.",type:"string",status:"optional"},thumbTitle:{doc:"Give the slider thumb button a title for accessibility reasons. Defaults to `null`.",type:"string",status:"optional"},subtractTitle:{doc:"Give the subtract button a title for accessibility reasons. Defaults to `âˆ’`.",type:"string",status:"optional"},addTitle:{doc:"Give the add button a title for accessibility reasons. Defaults to `+`.",type:"string",status:"optional"},numberFormat:{doc:"Will extend the return object with a `number` property (from `onChange` event). You can use all the options from the [NumberFormat](/uilib/components/number-format/properties) component. It also will use that formatted number in the increase/decrease buttons. If it has to represent a currency, then use e.g. `numberFormat={{ currency: true, decimals: 0 }}`",type:"object",status:"optional"},tooltip:{doc:"Use `true` to show a tooltip on `mouseOver`, `touchStart` and `focus`, showing the current number (if `numberFormat` is given) or the raw value.",type:"boolean",status:"optional"},alwaysShowTooltip:{doc:"Use `true` to always show the tooltip, in addition to the `tooltip` property.",type:"boolean",status:"optional"},label:{doc:"Prepends the Form Label component. If no ID is provided, a random ID is created.",type:"string",status:"optional"},labelDirection:{doc:'Use `labelDirection="vertical"` to change the label layout direction. Defaults to `horizontal`.',type:"string",status:"optional"},labelSrOnly:{doc:"Use `true` to make the label only readable by screen readers.",type:"boolean",status:"optional"},status:{doc:"Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.",type:"string",status:"optional"},statusState:{doc:"Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.",type:"string",status:"optional"},statusProps:{doc:"Use an object to define additional FormStatus properties.",type:"object",status:"optional"},globalStatusId:{doc:"The `status_id` used for the target [GlobalStatus](/uilib/components/global-status).",type:"string",status:"optional"},suffix:{doc:"Text describing the content of the Slider more than the label. You can also send in a React component, so it gets wrapped inside the Slider component.",type:"string",status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown.",type:"boolean",status:"optional"},extensions:{doc:"Makes it possible to display overlays with other functionality such as a marker on the slider marking a given value.",type:"object",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},a={onChange:{doc:"will be called on state changes made by the user. The callback `value` and `rawValue` is a number `{ value, rawValue, event }`. But if the prop `numberFormat` is given, then it will return an additional `number` with the given format `{ value, number, rawValue, event }`.",type:"function",status:"optional"},onDragStart:{doc:"will be called once the user stops dragging. Returns `{ event }`.",type:"function",status:"optional"},onDragEnd:{doc:"will be called once the user starts dragging. Returns `{ event }`.",type:"function",status:"optional"}}},6210:function(t,e,o){var s=o(30600);e.Z=s.Z},64223:function(t,e,o){var s=o(91859);e.Z=s.Z},41676:function(t,e,o){var s=o(47048);e.Z=s.Z}}]);
//# sourceMappingURL=component---src-docs-uilib-components-slider-events-mdx-2d0606077ea3d936158b.js.map