{"version":3,"file":"component---src-docs-uilib-components-step-indicator-events-mdx-631e12581b3b7e5bd5b1.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/step-indicator/events.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/step-indicator/StepIndicatorDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {StepIndicatorEvents, StepIndicatorStepEvents} from '@dnb/eufemia/src/components/step-indicator/StepIndicatorDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Events\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: StepIndicatorEvents\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Step Item Events\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: StepIndicatorStepEvents\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const StepIndicatorProperties: PropertiesTableProps = {\n  mode: {\n    doc: 'Defines how the StepIndicator should work. Use `static` for non-interactive steps. Use `strict` for a chronological step order, also, the user can navigate between visited steps. Use `loose` if the user should be able to navigate freely.',\n    type: [`'static'`, `'strict'`, `'loose'`],\n    status: 'required',\n  },\n  data: {\n    doc: 'Defines the data/steps showing up in a JavaScript Array or JSON format like `[{title,is_current}]`. See below for properties of `STEP_DATA`.',\n    type: ['[Step Item](#step-item-properties)[]', 'string[]'],\n    status: 'required',\n  },\n  current_step: {\n    doc: 'Defines the initial step starting from 0. Also defines the furthest step visited when `mode=\"strict\"`. Will update to the new step if changed (but will not trigger the `on_change` event). Defaults to `0`.',\n    type: 'number',\n    status: 'optional',\n  },\n  overview_title: {\n    doc: 'The title shown inside the `<StepIndicatorModal />` supplemental screen reader text for the `<StepIndicatorTriggerButton />`. Defaults to `Steps Overview`.',\n    type: 'string',\n    status: 'optional',\n  },\n  step_title: {\n    doc: 'Label for `<StepIndicatorTriggerButton />` and screen reader text for `<StepIndicatorItem />`. Must contain `%step` and `%count` to interpolate `current_step` and `stepCount` into the text. Defaults to `Step %step of %count`.',\n    type: 'string',\n    status: 'optional',\n  },\n  hide_numbers: {\n    doc: 'Define whether to show automatically counted numbers or not. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  no_animation: {\n    doc: 'If set to `true`, the height animation on step change and list expansion will be omitted. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  expandedInitially: {\n    doc: 'Set to `true` to have the list be expanded initially. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  outset: {\n    doc: 'Same as `outset` in [Card](/uilib/components/card/properties). Defaults to `false`',\n    type: 'boolean',\n    status: 'optional',\n  },\n  status: {\n    doc: 'Text for status shown below the step indicator when it is not expanded. Defaults to `undefined`',\n    type: 'string',\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'The type of status shown when the `status` prop is set. Defaults to `warn`.',\n    type: `['warn', 'info', 'error']`,\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n  sidebar_id: {\n    doc: 'A unique string-based ID in order to bind together the main component and the sidebar (`<StepIndicator.Sidebar />`). Both have to get the same ID.',\n    type: 'string',\n    status: 'deprecated',\n  },\n  step_title_extended: {\n    doc: 'Descriptive label for `<StepIndicatorModal />`. Must contain `%step` and `%count` to interpolate `current_step` and `stepCount` into the text. Defaults to `You are on step %step of %count`.',\n    type: 'string',\n    status: 'deprecated',\n  },\n  on_item_render: {\n    doc: 'Deprecated, just use step item `title`. Callback function whose return is rendered inside each step instead of the default render. Has to return a React Node. Receives parameter `{ StepItem, element, attributes, props, context }`, where `props` also includes all props from the step object (like `title` or `status`) and the `<StepItem>` is a component that can be used to wrap your returned content.',\n    type: 'function',\n    status: 'deprecated',\n  },\n}\n\nexport const StepIndicatorEvents: PropertiesTableProps = {\n  on_click: {\n    doc: 'Will be called when the user clicks on any clickable step in the list. Is called right before `on_change`. Receives parameter `{ event, item, current_step, currentStep }`',\n    type: 'function',\n    status: 'optional',\n  },\n  on_change: {\n    doc: 'Will be called when the user changes step by clicking in the steps list (changing the `current_step` prop does not trigger the event). Receives parameter `{ event, item, current_step, currentStep }`',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const StepIndicatorStepProperties: PropertiesTableProps = {\n  title: {\n    doc: 'The title of the step.',\n    type: ['string', 'React.ReactNode'],\n    status: 'required',\n  },\n  is_current: {\n    doc: 'If set to `true`, this item step will be set as the current selected step. This can be used instead of `current_step` on the main component.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  inactive: {\n    doc: 'If set to `true`, this item step will be handled as an inactive step and will not be clickable. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'If set to `true`, this step will be handled the same as `inactive` as well as getting a disabled mouseover and `aria-disabled=\"true`. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  status: {\n    doc: 'Is used to set the status text.',\n    type: ['string', 'React.ReactNode'],\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'In case the status state should be `info` or `error`. Defaults to `warn`.',\n    type: [`'warn'`, `'info'`, `'error'`],\n    status: 'optional',\n  },\n  on_render: {\n    doc: 'Deprecated, just use `title`. Callback function whose return is rendered inside the step instead of the default render (or `on_item_render`). Has to return a React Node. <br/> Receives parameter `{ StepItem, element, attributes, props, context }`, where `props` also includes all props in the step object (like `title` or `status`) and the `<StepItem>` is a component that can be used to wrap your returned content.',\n    type: 'function',\n    status: 'deprecated',\n  },\n}\n\nexport const StepIndicatorStepEvents: PropertiesTableProps = {\n  on_click: {\n    doc: \"Called when user clicks the step. Is called right before the main component's `on_click`. Receives parameter `{ event, item, current_step, currentStep }`\",\n    type: 'function',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","StepIndicatorEvents","StepIndicatorStepEvents","wrapper","MDXLayout","StepIndicatorProperties","mode","doc","type","status","data","current_step","overview_title","step_title","hide_numbers","no_animation","expandedInitially","outset","status_state","skeleton","sidebar_id","step_title_extended","on_item_render","on_click","on_change","StepIndicatorStepProperties","title","is_current","inactive","disabled","on_render","Td","Th","Tr"],"sourceRoot":""}