"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[62063],{19961:function(e,t,n){n.r(t);var s=n(31085),o=n(71184),a=n(15616),i=n(63272),r=n(86058);function l(e){const t=Object.assign({h2:"h2",pre:"pre",code:"code"},(0,o.R)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{children:"Properties"}),"\n",(0,s.jsx)(a.Ay,{props:i.L9}),"\n",(0,s.jsx)(t.h2,{children:"Step Item Properties"}),"\n",(0,s.jsx)(a.Ay,{props:i.Vt}),"\n",(0,s.jsx)(t.h2,{children:"Step Items example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const steps = [\n  { title: 'Active' },\n  { title: 'Active and marked as current', is_current: true },\n  { title: 'Not active', inactive: true },\n  { title: 'Disabled', disabled: true },\n  {\n    title: 'Active item with status text',\n    status: 'Status text',\n    status_state: 'warn', // defaults to warning\n  },\n]\n"})}),"\n",(0,s.jsx)(t.h2,{children:"Translations"}),"\n",(0,s.jsx)(r.A,{localeKey:"StepIndicator"})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,o.R)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(l,e)})):l(e)}},63272:function(e,t,n){n.d(t,{Dl:function(){return o},JT:function(){return i},L9:function(){return s},Vt:function(){return a}});const s={mode:{doc:"Defines how the StepIndicator should work. Use `static` for non-interactive steps. Use `strict` for a chronological step order, also, the user can navigate between visited steps. Use `loose` if the user should be able to navigate freely.",type:["'static'","'strict'","'loose'"],status:"required"},data:{doc:"Defines the data/steps showing up in a JavaScript Array or JSON format like `[{title,is_current}]`. See below for properties of `STEP_DATA`.",type:["[Step Item](#step-item-properties)[]","string[]"],status:"required"},current_step:{doc:'Defines the initial step starting from 0. Also defines the furthest step visited when `mode="strict"`. Will update to the new step if changed (but will not trigger the `on_change` event). Defaults to `0`.',type:"number",status:"optional"},overview_title:{doc:"The title shown inside the `<StepIndicatorModal />` supplemental screen reader text for the `<StepIndicatorTriggerButton />`. Defaults to `Steps Overview`.",type:"string",status:"optional"},step_title:{doc:"Label for `<StepIndicatorTriggerButton />` and screen reader text for `<StepIndicatorItem />`. Must contain `%step` and `%count` to interpolate `current_step` and `stepCount` into the text. Defaults to `Step %step of %count`.",type:"string",status:"optional"},hide_numbers:{doc:"Define whether to show automatically counted numbers or not. Defaults to `false`.",type:"boolean",status:"optional"},no_animation:{doc:"If set to `true`, the height animation on step change and list expansion will be omitted. Defaults to `false`.",type:"boolean",status:"optional"},expandedInitially:{doc:"Set to `true` to have the list be expanded initially. Defaults to `false`.",type:"boolean",status:"optional"},outset:{doc:"Same as `outset` in [Card](/uilib/components/card/properties). Defaults to `false`.",type:"boolean",status:"optional"},status:{doc:"Text for status shown below the step indicator when it is not expanded. Defaults to `undefined`.",type:"string",status:"optional"},status_state:{doc:"The type of status shown when the `status` prop is set. Defaults to `warn`.",type:"['warn', 'info', 'error']",status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown.",type:"boolean",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"},sidebar_id:{doc:"A unique string-based ID in order to bind together the main component and the sidebar (`<StepIndicator.Sidebar />`). Both have to get the same ID.",type:"string",status:"deprecated"},step_title_extended:{doc:"Descriptive label for `<StepIndicatorModal />`. Must contain `%step` and `%count` to interpolate `current_step` and `stepCount` into the text. Defaults to `You are on step %step of %count`.",type:"string",status:"deprecated"},on_item_render:{doc:"Deprecated, just use step item `title`. Callback function whose return is rendered inside each step instead of the default render. Has to return a React Node. Receives parameter `{ StepItem, element, attributes, props, context }`, where `props` also includes all props from the step object (like `title` or `status`) and the `<StepItem>` is a component that can be used to wrap your returned content.",type:"function",status:"deprecated"}},o={on_click:{doc:"Will be called when the user clicks on any clickable step in the list. Is called right before `on_change`. Receives parameter `{ event, item, current_step, currentStep }`.",type:"function",status:"optional"},on_change:{doc:"Will be called when the user changes step by clicking in the steps list (changing the `current_step` prop does not trigger the event). Receives parameter `{ event, item, current_step, currentStep }`.",type:"function",status:"optional"}},a={title:{doc:"The title of the step.",type:["string","React.ReactNode"],status:"required"},is_current:{doc:"If set to `true`, this item step will be set as the current selected step. This can be used instead of `current_step` on the main component.",type:"boolean",status:"optional"},inactive:{doc:"If set to `true`, this item step will be handled as an inactive step and will not be clickable. Defaults to `false`.",type:"boolean",status:"optional"},disabled:{doc:'If set to `true`, this step will be handled the same as `inactive` as well as getting a disabled mouseover and `aria-disabled="true`. Defaults to `false`.',type:"boolean",status:"optional"},status:{doc:"Is used to set the status text.",type:["string","React.ReactNode"],status:"optional"},status_state:{doc:"In case the status state should be `info` or `error`. Defaults to `warn`.",type:["'warn'","'info'","'error'"],status:"optional"},on_render:{doc:"Deprecated, just use `title`. Callback function whose return is rendered inside the step instead of the default render (or `on_item_render`). Has to return a React Node. <br/> Receives parameter `{ StepItem, element, attributes, props, context }`, where `props` also includes all props in the step object (like `title` or `status`) and the `<StepItem>` is a component that can be used to wrap your returned content.",type:"function",status:"deprecated"}},i={on_click:{doc:"Called when user clicks the step. Is called right before the main component's `on_click`. Receives parameter `{ event, item, current_step, currentStep }`",type:"function",status:"optional"}}},69094:function(e,t,n){var s=n(23722);t.A=s.A},81908:function(e,t,n){var s=n(94515);t.A=s.A},86058:function(e,t,n){n.d(t,{A:function(){return j}});var s=n(42483),o=n(14041),a=n(42275),i=n(81908),r=n(92034),l=n(77352),c=n(29058),p=n(69094),u=n(43169),d=n(64034),h=n(1470),f=n(43350),b=n(15616),m=n(84196),y=n(97728),g=n(31085);const w=(0,s.A)(a.Ay,{target:"ejvypor0"})({name:"1qdk5x4",styles:"td{white-space:nowrap;}"});function j(e){let{localeKey:t,source:n=null}=e;n=(0,o.useMemo)((()=>n||Object.assign((0,u.zu)({},h.A,f.A),m._M)),[n]);const s={},j={},x=(Array.isArray(t)?t:[t]).map((e=>{if(e.includes(".")){const t=e.split(".")[0];return j[t]=j[t]||[],j[t].push(e),t}return e})),v=(e,t,n,o)=>{e=`${o}.${e}`,j[o]&&!j[o].includes(e)||(s[e]=Object.assign(s[e]||{},{[n]:t}))};Object.entries(n).forEach((e=>{let[t,n]=e;x.forEach((e=>{const s=n[e];s?Object.entries(s).forEach((n=>{let[s,o]=n;if("object"==typeof o){const n=`${e}.${s}`;Object.entries(o).forEach((e=>{let[s,o]=e;v(s,o,t,n)}))}else v(s,o,t,e)})):(0,d.R8)(`TranslationsTable: Could not find any translations for key: "${e}", perhaps you misspelled the key's name?`)}))}));const _=Object.keys(n),A=Object.entries(s).map((e=>{let[t,n]=e;return(0,g.jsxs)(i.A,{children:[(0,g.jsx)(r.A,{children:(0,g.jsx)(b.OH,{variant:"prop",children:t})}),Object.entries(n).map(((e,t)=>{let[n,s]=e;return(0,g.jsx)(r.A,{children:"string"==typeof s?s:(0,g.jsx)("pre",{children:JSON.stringify(s,null,2)})},t+n)}))]},t)}));if(0!=A.length)return(0,g.jsxs)(g.Fragment,{children:[(0,g.jsxs)(l.A,{children:["More info about translations can be found in the"," ",(0,g.jsx)(c.Ay,{href:"/uilib/usage/customisation/localization/",children:"general localization"})," ","and"," ",(0,g.jsx)(c.Ay,{href:"/uilib/extensions/forms/getting-started/#localization-and-translation",children:"Eufemia Forms localization"})," ","docs."]}),(0,g.jsx)(a.Ay.ScrollView,{children:(0,g.jsxs)(w,{children:[(0,g.jsx)("thead",{children:(0,g.jsxs)(i.A,{children:[(0,g.jsx)(p.A,{children:"Key"}),_.map((e=>{const{status:t}=y.R[e];return(0,g.jsxs)(p.A,{children:[e,t?` (${t})`:null]},e)}))]})}),(0,g.jsx)("tbody",{children:A})]})})]});(0,d.R8)(`TranslationsTable: Not able to find any translations for input : "${t}", hence not rendering the translations table.`)}},92034:function(e,t,n){var s=n(31666);t.A=s.A}}]);
//# sourceMappingURL=component---src-docs-uilib-components-step-indicator-properties-mdx-709b3f3418dca2f54b64.js.map