"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[45821],{33927:function(e,t,o){o.d(t,{M:function(){return s},g:function(){return a}});const s={checked:{doc:"Determine whether the switch is checked or not. The default will be `false`.",type:"boolean",status:"optional"},title:{doc:"The `title` of the input - describing it a bit further for accessibility reasons.",type:"string",status:"required"},label:{doc:"Use either the `label` property or provide a custom one.",type:"ReactNode",status:"optional"},labelPosition:{doc:"Defines the position of the `label`. Use either `left` or `right`. Defaults to `right`.",type:["left","right"],status:"optional"},labelSrOnly:{doc:"Use `true` to make the label only readable by screen readers.",type:"string",status:"optional"},size:{doc:"The size of the switch. For now there is **medium** (default) and **large**.",type:["default","medium","large"],status:"optional"},status:{doc:"Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.",type:["error","info","boolean"],status:"optional"},statusState:{doc:"Defines the state of the status. Defaults to `error`.",type:["error","warn","info","success","marketing"],status:"optional"},statusProps:{doc:"Use an object to define additional [FormStatus](/uilib/components/form-status/properties/) properties.",type:"FormStatus",status:"optional"},globalStatus:{doc:"The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).",type:"GlobalStatus",status:"optional"},suffix:{doc:"Text describing the content of the Switch more than the label. You can also send in a React component, so it gets wrapped inside the Switch component.",type:"ReactNode",status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown.",type:"boolean",status:"optional"},innerRef:{doc:"By providing a React.ref we can get the internally used input element (DOM). E.g. `innerRef={myRef}` by using `React.createRef()` or `React.useRef()`.",type:"React.RefObject",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},a={onChange:{doc:"Will be called on state changes made by the user.",type:"({ checked: boolean; event: ChangeEvent }) => void",status:"optional"},onChangeEnd:{doc:"Will be called on state changes made by the user, but with a delay. This way the user sees the animation before e.g. an error will be removed. Returns a boolean { checked, event }.",type:"({ checked: boolean; event: ChangeEvent }) => void",status:"optional"},onClick:{doc:"Will be called on click.",type:"({ checked: boolean; event: MouseEvent, preventDefault: () => void }) => void",status:"optional"}}},46119:function(e,t,o){o.r(t);var s=o(31085),a=o(71184),n=o(15616),i=o(33927);function r(e){const t=Object.assign({h2:"h2"},(0,a.R)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{children:"Properties"}),"\n",(0,s.jsx)(n.Ay,{props:i.M})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.R)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(r,e)})):r(e)}},69094:function(e,t,o){var s=o(23722);t.A=s.A},81908:function(e,t,o){var s=o(94515);t.A=s.A},92034:function(e,t,o){var s=o(31666);t.A=s.A}}]);
//# sourceMappingURL=component---src-docs-uilib-components-switch-properties-mdx-4d613a5255dd987265c9.js.map