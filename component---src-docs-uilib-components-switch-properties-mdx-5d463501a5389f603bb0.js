"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[81954],{54831:function(e,s,t){t.r(s);var r=t(52322),n=t(45392);function i(e){const s=Object.assign({h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",em:"em",strong:"strong",a:"a"},(0,n.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{children:"Properties"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Properties"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"checked"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.em,{children:"(optional)"})," determine whether the switch is checked or not. The default will be ",(0,r.jsx)(s.code,{children:"false"}),"."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"title"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.em,{children:"(required)"})," the ",(0,r.jsx)(s.code,{children:"title"})," of the input - describing it a bit further for accessibility reasons."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"label"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.em,{children:"(optional)"})," use either the ",(0,r.jsx)(s.code,{children:"label"})," property or provide a custom one."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"label_position"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.em,{children:"(optional)"})," defines the position of the ",(0,r.jsx)(s.code,{children:"label"}),". Use either ",(0,r.jsx)(s.code,{children:"left"})," or ",(0,r.jsx)(s.code,{children:"right"}),". Defaults to ",(0,r.jsx)(s.code,{children:"right"}),"."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"label_sr_only"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.em,{children:"(optional)"})," use ",(0,r.jsx)(s.code,{children:"true"})," to make the label only readable by screen readers."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"size"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.em,{children:"(optional)"})," the size of the switch. For now there is ",(0,r.jsx)(s.strong,{children:"medium"})," (default) and ",(0,r.jsx)(s.strong,{children:"large"}),"."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"status"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.em,{children:"(optional)"})," text with a status message. The style defaults to an error message. You can use ",(0,r.jsx)(s.code,{children:"true"})," to only get the status color, without a message."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"status_state"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.em,{children:"(optional)"})," defines the state of the status. Currently, there are two statuses ",(0,r.jsx)(s.code,{children:"[error, info]"}),". Defaults to ",(0,r.jsx)(s.code,{children:"error"}),"."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"status_props"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.em,{children:"(optional)"})," use an object to define additional FormStatus properties."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"globalStatus"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.em,{children:"(optional)"})," the ",(0,r.jsx)(s.a,{href:"/uilib/components/global-status/properties/#configuration-object",children:"configuration"})," used for the target ",(0,r.jsx)(s.a,{href:"/uilib/components/global-status",children:"GlobalStatus"}),"."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"suffix"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.em,{children:"(optional)"})," text describing the content of the Switch more than the label. You can also send in a React component, so it gets wrapped inside the Switch component."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"skeleton"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.em,{children:"(optional)"})," if set to ",(0,r.jsx)(s.code,{children:"true"}),", an overlaying skeleton with animation will be shown."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"innerRef"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.em,{children:"(optional)"})," by providing a React.ref we can get the internally used input element (DOM). E.g. ",(0,r.jsx)(s.code,{children:"innerRef={myRef}"})," by using ",(0,r.jsx)(s.code,{children:"React.createRef()"})," or ",(0,r.jsx)(s.code,{children:"React.useRef()"}),"."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"/uilib/layout/space/properties",children:"Space"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.em,{children:"(optional)"})," spacing properties like ",(0,r.jsx)(s.code,{children:"top"})," or ",(0,r.jsx)(s.code,{children:"bottom"})," are supported."]})]})]})]})]})}s.default=function(e){void 0===e&&(e={});const{wrapper:s}=Object.assign({},(0,n.ah)(),e.components);return s?(0,r.jsx)(s,Object.assign({},e,{children:(0,r.jsx)(i,e)})):i(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-switch-properties-mdx-5d463501a5389f603bb0.js.map