{"version":3,"file":"component---src-docs-uilib-components-switch-properties-mdx-b0c774847f7fbf714b0b.js","mappings":"mMAEO,MAAMA,EAAyC,CACpDC,QAAS,CACPC,IAAK,+EACLC,KAAM,UACNC,OAAQ,YAEVC,MAAO,CACLH,IAAK,oFACLC,KAAM,SACNC,OAAQ,YAEVE,MAAO,CACLJ,IAAK,2DACLC,KAAM,YACNC,OAAQ,YAEVG,cAAe,CACbL,IAAK,0FACLC,KAAM,CAAC,OAAQ,SACfC,OAAQ,YAEVI,YAAa,CACXN,IAAK,gEACLC,KAAM,SACNC,OAAQ,YAEVK,KAAM,CACJP,IAAK,+EACLC,KAAM,CAAC,UAAW,SAAU,SAC5BC,OAAQ,YAEVA,OAAQ,CACNF,IAAK,0IACLC,KAAM,CAAC,QAAS,OAAQ,WACxBC,OAAQ,YAEVM,YAAa,CACXR,IAAK,wDACLC,KAAM,CAAC,QAAS,OAAQ,OAAQ,UAAW,aAC3CC,OAAQ,YAEVO,YAAa,CACXT,IAAK,yGACLC,KAAM,aACNC,OAAQ,YAEVQ,aAAc,CACZV,IAAK,6JACLC,KAAM,eACNC,OAAQ,YAEVS,OAAQ,CACNX,IAAK,yJACLC,KAAM,YACNC,OAAQ,YAEVU,SAAU,CACRZ,IAAK,yEACLC,KAAM,UACNC,OAAQ,YAEVW,SAAU,CACRb,IAAK,yJACLC,KAAM,kBACNC,OAAQ,YAEV,0CAA2C,CACzCF,IAAK,2DACLC,KAAM,CAAC,SAAU,UACjBC,OAAQ,aAICY,EAAqC,CAChDC,SAAU,CACRf,IAAK,oDACLC,KAAM,qDACNC,OAAQ,YAEVc,YAAa,CACXhB,IAAK,uLACLC,KAAM,qDACNC,OAAQ,Y,+EC/EZ,SAASe,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,OACHC,EAAAA,EAAAA,KAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKT,EAAYG,GAAI,CAC9BK,SAAU,eACR,MAAMC,EAAAA,EAAAA,KAAKC,EAAAA,GAAiB,CAC9BX,MAAOpB,EAAAA,MAGb,CAOA,UANA,SAAoBoB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,KAAsBL,EAAMM,YAC3E,OAAOO,GAAYH,EAAAA,EAAAA,KAAKG,EAAWX,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DS,UAAUC,EAAAA,EAAAA,KAAKX,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,uCCfA,IAAec,EAAE,C,uCCAjB,IAAeC,EAAE,C,uCCAjB,IAAeC,EAAE,C","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/components/switch/SwitchDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/components/switch/properties.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../shared/types'\n\nexport const SwitchProperties: PropertiesTableProps = {\n  checked: {\n    doc: 'Determine whether the switch is checked or not. The default will be `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  title: {\n    doc: 'The `title` of the input - describing it a bit further for accessibility reasons.',\n    type: 'string',\n    status: 'required',\n  },\n  label: {\n    doc: 'Use either the `label` property or provide a custom one.',\n    type: 'ReactNode',\n    status: 'optional',\n  },\n  labelPosition: {\n    doc: 'Defines the position of the `label`. Use either `left` or `right`. Defaults to `right`.',\n    type: ['left', 'right'],\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'string',\n    status: 'optional',\n  },\n  size: {\n    doc: 'The size of the switch. For now there is **medium** (default) and **large**.',\n    type: ['default', 'medium', 'large'],\n    status: 'optional',\n  },\n  status: {\n    doc: 'Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: ['error', 'info', 'boolean'],\n    status: 'optional',\n  },\n  statusState: {\n    doc: 'Defines the state of the status. Defaults to `error`.',\n    type: ['error', 'warn', 'info', 'success', 'marketing'],\n    status: 'optional',\n  },\n  statusProps: {\n    doc: 'Use an object to define additional [FormStatus](/uilib/components/form-status/properties/) properties.',\n    type: 'FormStatus',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'GlobalStatus',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the Switch more than the label. You can also send in a React component, so it gets wrapped inside the Switch component.',\n    type: 'ReactNode',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  innerRef: {\n    doc: 'By providing a React.ref we can get the internally used input element (DOM). E.g. `innerRef={myRef}` by using `React.createRef()` or `React.useRef()`.',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const SwitchEvents: PropertiesTableProps = {\n  onChange: {\n    doc: 'Will be called on state changes made by the user.',\n    type: '({ checked: boolean; event: ChangeEvent }) => void',\n    status: 'optional',\n  },\n  onChangeEnd: {\n    doc: 'Will be called on state changes made by the user, but with a delay. This way the user sees the animation before e.g. an error will be removed. Returns a boolean { checked, event }.',\n    type: '({ checked: boolean; event: ChangeEvent }) => void',\n    status: 'optional',\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {SwitchProperties} from '@dnb/eufemia/src/components/switch/SwitchDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: SwitchProperties\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n"],"names":["SwitchProperties","checked","doc","type","status","title","label","labelPosition","labelSrOnly","size","statusState","statusProps","globalStatus","suffix","skeleton","innerRef","SwitchEvents","onChange","onChangeEnd","_createMdxContent","props","_components","Object","assign","h2","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","wrapper","MDXLayout","Th","Tr","Td"],"sourceRoot":""}