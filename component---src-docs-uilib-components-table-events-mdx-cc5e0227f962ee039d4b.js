"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[61899],{33303:function(e,t,o){o.r(t);var a=o(31085),n=o(71184),l=o(15616),s=o(94849);function i(e){const t=Object.assign({h2:"h2",code:"code",p:"p"},(0,n.R)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{children:"Table events"}),"\n",(0,a.jsx)(l.Ay,{props:s.Mj,showDefaultValue:!0}),"\n",(0,a.jsxs)(t.h2,{children:["Table Row ",(0,a.jsx)(t.code,{children:"<Tr>"})," events"]}),"\n",(0,a.jsxs)(t.p,{children:["Table Row ",(0,a.jsx)(t.code,{children:"<Tr>"})," events are a part of the mode feature and needs to be enabled with the ",(0,a.jsx)(t.code,{children:"mode"})," property on the main Table."]}),"\n",(0,a.jsxs)(t.p,{children:["Table with navigation mode(",(0,a.jsx)(t.code,{children:'mode="navigation"'}),") only supports the ",(0,a.jsx)(t.code,{children:"<Tr>"})," event ",(0,a.jsx)(t.code,{children:"onClick"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Table with accordion mode(",(0,a.jsx)(t.code,{children:'mode="accordion"'}),") supports all the ",(0,a.jsx)(t.code,{children:"<Tr>"})," events listed below."]}),"\n",(0,a.jsx)(l.Ay,{props:s.E3,showDefaultValue:!0})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,n.R)(),e.components);return t?(0,a.jsx)(t,Object.assign({},e,{children:(0,a.jsx)(i,e)})):i(e)}},69094:function(e,t,o){var a=o(23722);t.A=a.A},81908:function(e,t,o){var a=o(94515);t.A=a.A},92034:function(e,t,o){var a=o(31666);t.A=a.A},94849:function(e,t,o){o.d(t,{E3:function(){return s},Mj:function(){return n},Ui:function(){return l},a0:function(){return i},e1:function(){return a},qo:function(){return d}});const a={mode:{doc:"Defines how the Table should look. Use `accordion` for an accordion-like table. Use `navigation` for a navigation table.",type:["'accordion'","'navigation'"],defaultValue:"null",status:"optional"},accordionChevronPlacement:{doc:'Defines where the chevron will be placed, should only be used together with mode="accordion".',type:["'start'","'end'"],defaultValue:"'start'",status:"optional"},border:{doc:"Use `true` to show borders between table data cells.",type:"boolean",defaultValue:"false",status:"optional"},outline:{doc:"Use `true` to show an outline border around the table",type:"boolean",defaultValue:"false",status:"optional"},sticky:{doc:"Use `true` to enable a sticky Table header. Or use `'css-position'` to enable the CSS based scroll behavior.",type:["boolean","'css-position'"],defaultValue:"false",status:"optional"},stickyOffset:{doc:"Defines the offset (top) in `rem` from where the header should start to stick. You may define your app header height here, if you have a sticky header on your page.",type:["string","number"],defaultValue:"false",status:"optional"},size:{doc:"Spacing size inside the table header and data.",type:["'large'","'medium'","'small'"],defaultValue:"'large'",status:"optional"},fixed:{doc:"If set to `true`, the table will behave with a fixed table layout, using: `table-layout: fixed;`. Use e.g. CSS `width: 40%` on a table column to define the width.",type:"boolean",defaultValue:"null",status:"optional"},children:{doc:"The content of the component.",type:"React.ReactNode",status:"required"},className:{doc:"Custom className on the component root",type:"string",defaultValue:"undefined",status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown.",type:"boolean",defaultValue:"undefined",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},n={collapseAllHandleRef:{doc:"ref handle to collapse all expanded accordion rows. Send in a ref and use `.current()` to collapse all rows.",type:"React.MutableRefObject<() => void>",defaultValue:"undefined",status:"optional"}},l={variant:{doc:"Override the automatic variant of the current row. The next row one will continue with the opposite.",type:["'even'","'odd'"],defaultValue:"undefined",status:"optional"},noWrap:{doc:"if set to `true`, the inherited header text will not wrap to new lines.",type:"boolean",defaultValue:"true",status:"optional"},expanded:{doc:"use `true` to render the `<Tr>` initially as expanded.",type:"boolean",defaultValue:"false",status:"optional"},disabled:{doc:"use `true` to disable the `<Tr>` to be accessible as an interactive element.",type:"boolean",defaultValue:"false",status:"optional"},noAnimation:{doc:"use `true` to disable the expand/collapse animation.",type:"boolean",defaultValue:"false",status:"optional"},children:{doc:"The content of the component.",type:"React.ReactNode",status:"required"}},s={onClick:{doc:'Will emit when user clicks/expands or on keydown space/enter(in mode="accordion" and mode="navigation") in the table row. Returns a native click.',type:"(event) => void",defaultValue:"undefined",status:"optional"},onOpened:{doc:"Will emit when table row is expanded. Returns an object with the table row as the target: `{ target }`.",type:"({ target }) => void",defaultValue:"undefined",status:"optional"},onClosed:{doc:"Will emit when table row is closed (after it was open). Returns an object with the table row as the target: `{ target }`.",type:"({ target }) => void",defaultValue:"undefined",status:"optional"}},i={sortable:{doc:"Defines the table header as sortable if set to `true` (ascending).",type:"boolean",defaultValue:"false",status:"optional"},active:{doc:"Defines the sortable column as the current active (ascending).",type:"boolean",defaultValue:"false",status:"optional"},reversed:{doc:"Defines the sortable column as in reversed order (descending).",type:"boolean",defaultValue:"false",status:"optional"},noWrap:{doc:"If set to `true`, the header text will not wrap to new lines.",type:"boolean",defaultValue:"false",status:"optional"},children:{doc:"The content of the component.",type:"React.ReactNode",defaultValue:"undefined",status:"optional"}},d={noSpacing:{doc:"If set to `true`, no padding will be added.",type:"boolean",defaultValue:"false",status:"optional"},spacing:{doc:"Set to `horizontal` for padding on left and right side.",type:"'horizontal'",defaultValue:"undefined",status:"optional"},children:{doc:"The content of the component.",type:"React.ReactNode",defaultValue:"undefined",status:"optional"}}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-table-events-mdx-cc5e0227f962ee039d4b.js.map