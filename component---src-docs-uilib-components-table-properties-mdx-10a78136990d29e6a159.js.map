{"version":3,"file":"component---src-docs-uilib-components-table-properties-mdx-10a78136990d29e6a159.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/table/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/table/TableDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {TableProperties, TrProperties, ThProperties, TdProperties} from '@dnb/eufemia/src/components/table/TableDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.code, {\n        children: \"<Table>\"\n      })\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: TableProperties,\n      showDefaultValue: true\n    }), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Table Row \", _jsx(_components.code, {\n        children: \"<Tr>\"\n      })]\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: TrProperties,\n      showDefaultValue: true\n    }), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Table Header \", _jsx(_components.code, {\n        children: \"<Th>\"\n      })]\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: ThProperties,\n      showDefaultValue: true\n    }), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Table Data \", _jsx(_components.code, {\n        children: \"<Td>\"\n      })]\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: TdProperties,\n      showDefaultValue: true\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colorValue = 'var(--color-success-green)'\nconst colorString = 'var(--color-fire-red)'\nconst colorType = 'var(--color-violet)'\nconst colorUndefined = 'var(--color-black-55)'\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = children.startsWith(`'`) ? colorString : colorType\n        // falls through\n      }\n      case 'value': {\n        style.color = children.startsWith(`'`)\n          ? colorString\n          : children === 'undefined' || children === 'null'\n          ? colorUndefined\n          : colorValue\n        // falls through\n      }\n      default: {\n        style.background = 'none'\n        style.boxShadow = 'none'\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('/')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const TableProperties: PropertiesTableProps = {\n  mode: {\n    doc: 'Defines how the Table should look. Use `accordion` for an accordion-like table. Use `navigation` for a navigation table.',\n    type: [`'accordion'`, `'navigation'`],\n    defaultValue: 'null',\n    status: 'optional',\n  },\n  accordionChevronPlacement: {\n    doc: 'Defines where the chevron will be placed, should only be used together with mode=\"accordion\".',\n    type: [`'start'`, `'end'`],\n    defaultValue: `'start'`,\n    status: 'optional',\n  },\n  border: {\n    doc: 'Use `true` to show borders between table data cells.',\n    type: 'boolean',\n    defaultValue: 'false',\n    status: 'optional',\n  },\n  outline: {\n    doc: 'Use `true` to show an outline border around the table',\n    type: 'boolean',\n    defaultValue: 'false',\n    status: 'optional',\n  },\n  sticky: {\n    doc: \"Use `true` to enable a sticky Table header. Or use `'css-position'` to enable the CSS based scroll behavior.\",\n    type: ['boolean', `'css-position'`],\n    defaultValue: 'false',\n    status: 'optional',\n  },\n  stickyOffset: {\n    doc: 'Defines the offset (top) in `rem` from where the header should start to stick. You may define your app header height here, if you have a sticky header on your page.',\n    type: ['string', 'number'],\n    defaultValue: 'false',\n    status: 'optional',\n  },\n  size: {\n    doc: 'Spacing size inside the table header and data.',\n    type: [`'large'`, `'medium'`, `'small'`],\n    defaultValue: `'large'`,\n    status: 'optional',\n  },\n  fixed: {\n    doc: 'If set to `true`, the table will behave with a fixed table layout, using: `table-layout: fixed;`. Use e.g. CSS `width: 40%` on a table column to define the width.',\n    type: 'boolean',\n    defaultValue: 'null',\n    status: 'optional',\n  },\n  children: {\n    doc: 'The content of the component.',\n    type: 'React.ReactNode',\n    status: 'required',\n  },\n  className: {\n    doc: 'Custom className on the component root',\n    type: 'string',\n    defaultValue: 'undefined',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    defaultValue: 'undefined',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const TableEventProperties: PropertiesTableProps = {\n  collapseAllHandleRef: {\n    doc: 'ref handle to collapse all expanded accordion rows. Send in a ref and use `.current()` to collapse all rows.',\n    type: 'React.MutableRefObject<() => void>',\n    defaultValue: 'undefined',\n    status: 'optional',\n  },\n}\n\nexport const TrProperties: PropertiesTableProps = {\n  /**\n   * The variant of the tr\n   */\n  variant: {\n    doc: 'Override the automatic variant of the current row. The next row one will continue with the opposite.',\n    type: [`'even'`, `'odd'`],\n    defaultValue: 'undefined',\n    status: 'optional',\n  },\n  noWrap: {\n    doc: 'if set to `true`, the inherited header text will not wrap to new lines.',\n    type: 'boolean',\n    defaultValue: 'true',\n    status: 'optional',\n  },\n  expanded: {\n    doc: 'use `true` to render the `<Tr>` initially as expanded.',\n    type: 'boolean',\n    defaultValue: 'false',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'use `true` to disable the `<Tr>` to be accessible as an interactive element.',\n    type: 'boolean',\n    defaultValue: 'false',\n    status: 'optional',\n  },\n  noAnimation: {\n    doc: 'use `true` to disable the expand/collapse animation.',\n    type: 'boolean',\n    defaultValue: 'false',\n    status: 'optional',\n  },\n  children: {\n    doc: 'The content of the component.',\n    type: 'React.ReactNode',\n    status: 'required',\n  },\n}\n\nexport const TrEventProperties: PropertiesTableProps = {\n  onClick: {\n    doc: 'Will emit when user clicks/expands or on keydown space/enter(in mode=\"accordion\" and mode=\"navigation\") in the table row. Returns a native click.',\n    type: '(event) => void',\n    defaultValue: 'undefined',\n    status: 'optional',\n  },\n  onOpened: {\n    doc: 'Will emit when table row is expanded. Returns an object with the table row as the target: `{ target }`.',\n    type: '({ target }) => void',\n    defaultValue: 'undefined',\n    status: 'optional',\n  },\n  onClosed: {\n    doc: 'Will emit when table row is closed (after it was open). Returns an object with the table row as the target: `{ target }`.',\n    type: '({ target }) => void',\n    defaultValue: 'undefined',\n    status: 'optional',\n  },\n}\n\nexport const ThProperties: PropertiesTableProps = {\n  sortable: {\n    doc: 'Defines the table header as sortable if set to `true` (ascending).',\n    type: 'boolean',\n    defaultValue: 'false',\n    status: 'optional',\n  },\n  active: {\n    doc: 'Defines the sortable column as the current active (ascending).',\n    type: 'boolean',\n    defaultValue: 'false',\n    status: 'optional',\n  },\n  reversed: {\n    doc: 'Defines the sortable column as in reversed order (descending).',\n    type: 'boolean',\n    defaultValue: 'false',\n    status: 'optional',\n  },\n  noWrap: {\n    doc: 'If set to `true`, the header text will not wrap to new lines.',\n    type: 'boolean',\n    defaultValue: 'false',\n    status: 'optional',\n  },\n  children: {\n    doc: 'The content of the component.',\n    type: 'React.ReactNode',\n    defaultValue: 'undefined',\n    status: 'optional',\n  },\n}\n\nexport const TdProperties: PropertiesTableProps = {\n  noSpacing: {\n    doc: 'If set to `true`, no padding will be added.',\n    type: 'boolean',\n    defaultValue: 'false',\n    status: 'optional',\n  },\n  spacing: {\n    doc: 'Set to `horizontal` for padding on left and right side.',\n    type: `'horizontal'`,\n    defaultValue: 'undefined',\n    status: 'optional',\n  },\n  children: {\n    doc: 'The content of the component.',\n    type: 'React.ReactNode',\n    defaultValue: 'undefined',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","h3","code","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","TableProperties","showDefaultValue","TrProperties","ThProperties","TdProperties","wrapper","MDXLayout","basicComponents","p","StyledTable","_styled","Table","target","name","styles","colorString","FormattedCode","_ref","variant","strikethrough","style","rest","textDecoration","color","startsWith","background","boxShadow","_ref2","valueType","camelCase","omit","keys","tableRows","entries","map","_ref3","key","type","defaultValue","doc","status","includes","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp","mode","accordionChevronPlacement","border","outline","sticky","stickyOffset","size","fixed","className","skeleton","TableEventProperties","collapseAllHandleRef","noWrap","expanded","disabled","noAnimation","TrEventProperties","onClick","onOpened","onClosed","sortable","active","reversed","noSpacing","spacing"],"sourceRoot":""}