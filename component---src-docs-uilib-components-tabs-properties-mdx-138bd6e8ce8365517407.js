"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[53538],{7249:function(e,t,n){n.r(t);var o=n(52322),s=n(45392),a=n(85179),i=n(19035);function r(e){const t=Object.assign({h2:"h2",p:"p",pre:"pre",code:"code"},(0,s.a)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{children:"Properties"}),"\n",(0,o.jsx)(a.ZP,{props:i.WH}),"\n",(0,o.jsx)(t.h2,{children:"Data object"}),"\n",(0,o.jsx)(a.ZP,{props:i.w}),"\n",(0,o.jsx)(t.h2,{children:"Key"}),"\n",(0,o.jsx)(t.p,{children:"The key can be a string or a number.\nBut if the key is a number (integer), we have to deliver the content directly in the tab item:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"const tabsDataWithContent = [\n  { title: 'First', key: 1, content: <H2>First</H2> },\n  { title: 'Second', key: 2, content: () => <H2>Second</H2> },\n]\n"})}),"\n",(0,o.jsx)(t.h2,{children:"Example Data"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"const tabsData = [\n  { title: 'First', key: 'first' },\n  { title: 'Second', key: 'second' },\n  { title: 'Third', key: 'third', disabled: true },\n  { title: 'Fourth', key: 'fourth' },\n]\n"})}),"\n",(0,o.jsx)(t.h2,{children:"Current tab"}),"\n",(0,o.jsxs)(t.p,{children:["The current Tab content can be a ",(0,o.jsx)(t.code,{children:"string"}),", a function returning content or a ",(0,o.jsx)(t.code,{children:"React component"}),"."]})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,s.a)(),e.components);return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(r,e)})):r(e)}},19035:function(e,t,n){n.d(t,{WH:function(){return o},uA:function(){return a},w:function(){return s}});const o={selected_key:{doc:"In case one of the tabs should be opened by a `key`.",type:["string","number"],status:"optional"},align:{doc:'To align the tab list on the right side `align="right"`. Defaults to `left`.',type:["left","center","right"],status:"optional"},content_style:{doc:"To enable the visual helper `.dnb-section` on to the content wrapper. Use a supported modifier from the [Section component](/uilib/components/section/properties). Defaults to `null`.",type:["divider","white","transparent"],status:"optional"},content_spacing:{doc:"To modify the `spacing` onto the content wrapper. Use a supported modifier from the [Section component](/uilib/components/section/properties). Defaults to `large`.",type:["boolean","x-small","small","medium","large","x-large","xx-large"],status:"optional"},tabs_style:{doc:"To enable the visual helper `.dnb-section` inside the tabs list. Use a supported modifier from the [Section component](/uilib/components/section/properties). Defaults to `null`.",type:["divider","white","transparent"],status:"optional"},tabs_spacing:{doc:"To modify the `spacing` inside the tab list. Defaults to `null`.",type:"boolean",status:"optional"},tab_element:{doc:"Define what HTML element should be used. You can provide e.g. `tab_element={GatsbyLink}` â€“ you may then provide the `to` property inside every entry (`data={[{ to: ';url';, ... }]}`). Defaults to `<button>`.",type:"React.ReactNode",status:"optional"},"[data](/uilib/components/tabs/properties/#data-object)":{doc:"defines the data structure to load as an object.",type:"object",status:"required"},children:{doc:"the content to render. Can be a function, returning the current tab content `(key) => ('Current tab')`, a React Component or an object with the keys and content `{key1: 'Current tab'}`.",type:["React.ReactNode","object"],status:"required"},content:{doc:"the content to render. Can be a function, returning the current tab content `(key) => ('Current tab')`, a React Component or an object with the keys and content `{key1: 'Current tab'}`.",type:["React.ReactNode","object"],status:"required"},prerender:{doc:"If set to `true`, the Tabs content will pre-render all contents. The visibility will be handled by using the `hidden` and `aria-hidden` HTML attributes. Defaults to `false`.",type:"boolean",status:"optional"},prevent_rerender:{doc:"If set to `true`, the Tabs content will stay in the DOM. The visibility will be handled by using the `hidden` and `aria-hidden` HTML attributes. Similar to `prerender`, but in contrast, the content will render once the user is activating a tab. Defaults to `false`.",type:"boolean",status:"optional"},scroll:{doc:"If set to `true`, the content will scroll on tab change, until all tabs will be visible on the upper side of the browser window view. Defaults to `false`.",type:"boolean",status:"optional"},no_border:{doc:"If set to `true`, the default horizontal border line under the tablist will be removed. Defaults to `false`.",type:"boolean",status:"optional"},nav_button_edge:{doc:"If set to `true`, the navigation icons will have a straight border at their outside. This feature is meant to be used when the Tabs component goes all the way to the browser window. Defaults to `false`.",type:"boolean",status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown.",type:"boolean",status:"optional"},breakout:{doc:"If set to `false`, the default horizontal border line under the tablist remains inside the parent boundaries. Defaults to `true`.",type:"boolean",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},s={title:{doc:"The title of the tab.",type:["string","React.ReactNode"],status:"required"},key:{doc:"The unique key of the tab.",type:["string","number"],status:"required"},content:{doc:"The content of the tab.",type:"React.ReactNode",status:"optional"},selected:{doc:"If set to `true`, the tab will be selected.",type:"boolean",status:"optional"},disabled:{doc:"If set to `true`, the tab will be disabled.",type:"boolean",status:"optional"}},a={on_change:{doc:"(preferred) this event gets triggered once the tab changes its selected key. Returns `{ key, selected_key, focus_key, event }`.",type:"function",status:"optional"},on_click:{doc:"This event gets triggered once the tab gets clicked. Returns `{ key, selected_key, focus_key, event }`.",type:"function",status:"optional"},on_focus:{doc:"This event gets triggered once the tab changes its focus key. Returns `{ key, selected_key, focus_key, event }`.",type:"function",status:"optional"},on_mouse_enter:{doc:"This event gets triggered once the user';s mouse enters a tab (hover). Returns `{ key, selected_key, focus_key, event }`.",type:"function",status:"optional"}}},6210:function(e,t,n){var o=n(30600);t.Z=o.Z},64223:function(e,t,n){var o=n(91859);t.Z=o.Z},41676:function(e,t,n){var o=n(76711);t.Z=o.Z}}]);
//# sourceMappingURL=component---src-docs-uilib-components-tabs-properties-mdx-138bd6e8ce8365517407.js.map