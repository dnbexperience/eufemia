"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[10600],{94840:function(e,t,o){o.r(t);var n=o(52322),a=o(45392),s=o(85179),i=o(73950);function c(e){const t=Object.assign({h2:"h2",code:"code"},(0,a.a)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.h2,{children:[(0,n.jsx)(t.code,{children:"Tag"})," events"]}),"\n",(0,n.jsx)(s.ZP,{props:i.v4})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.a)(),e.components);return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(c,e)})):c(e)}},73950:function(e,t,o){o.d(t,{C_:function(){return s},o1:function(){return a},v4:function(){return n}});const n={onClick:{doc:"will be called on a click event. Returns an object with the native event: `{ event }`.",type:"function",status:"optional"},onDelete:{doc:"will be called on a click event. Returns an object with the native event: `{ event }`. This property does not support icon and will be ignored if `onClick`is defined.",type:"function",status:"optional"}},a={text:{doc:"The content of the tag can be a string or a React Element.",type:["string","React.ReactNode"],status:"optional"},children:{doc:"The content of the tag can be a string or a React Element.",type:["string","React.ReactNode"],status:"optional"},icon:{doc:'To be included in the tag. Primary Icons can be set as a string (e.g. icon="chevron_right"), other icons should be set as React elements. Note, we recommend not to use icons with clickable tags.',type:["string","React.Node"],status:"optional"},hasLabel:{doc:"If a label is given, typical inside a table or dl (definition list), then you can disable Tag.Group as a dependent of Tag. Use `true` to omit the `Tag group required:` warning.",type:"boolean",status:"optional"},variant:{doc:"Possible values are `default`, `clickable`, `addable`, or `removable`. Defaults to `default`.",type:["default","clickable","addable","removable"],status:"optional"},omitOnKeyUpDeleteEvent:{doc:"Set to `true` to omit triggering an event when the user releases the `Delete` or `Backspace` keys. Defaults to `false`.",type:"boolean",status:"optional"},className:{doc:"Custom className for the component root.",type:"string",status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown.",type:"boolean",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},s={label:{doc:"The label description of the group of tags.",type:"React.ReactNode",status:"required"},children:{doc:"Content of the component. Can be used instead of the `data`-property, by adding Tag elements as children `<Tag {...props} />`.",type:"React.ReactNode",status:"optional"},className:{doc:"Custom className for the component root.",type:"string",status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown.",type:"boolean",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}}},6210:function(e,t,o){var n=o(30600);t.Z=n.Z},64223:function(e,t,o){var n=o(91859);t.Z=n.Z},41676:function(e,t,o){var n=o(76711);t.Z=n.Z}}]);
//# sourceMappingURL=component---src-docs-uilib-components-tag-events-mdx-901503e9efcfb2093469.js.map