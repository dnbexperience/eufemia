{"version":3,"file":"component---src-docs-uilib-components-textarea-properties-mdx-6bd5dc577aff2624db63.js","mappings":"8NAEO,MAAMA,EAA2C,CACtDC,MAAO,CACLC,IAAK,qCACLC,KAAM,SACNC,OAAQ,YAEVC,MAAO,CACLH,IAAK,gEACLC,KAAM,SACNC,OAAQ,YAEVE,QAAS,CACPJ,IAAK,qEACLC,KAAM,UACNC,OAAQ,YAEVG,YAAa,CACXL,IAAK,mEACLC,KAAM,SACNC,OAAQ,YAEVI,gBAAiB,CACfN,IAAK,oGACLC,KAAM,UACNC,OAAQ,YAEVK,MAAO,CACLP,IAAK,mFACLC,KAAM,SACNC,OAAQ,YAEVM,gBAAiB,CACfR,IAAK,mGACLC,KAAM,SACNC,OAAQ,YAEVO,OAAQ,CACNT,IAAK,6JACLC,KAAM,SACNC,OAAQ,YAEVQ,cAAe,CACbV,IAAK,gEACLC,KAAM,UACNC,OAAQ,YAEVS,WAAY,CACVX,IAAK,mGACLC,KAAM,UACNC,OAAQ,YAEVU,oBAAqB,CACnBZ,IAAK,mEACLC,KAAM,SACNC,OAAQ,YAEVW,iBAAkB,CAChBb,IAAK,sOACLC,KAAM,CAAC,SAAU,UACjBC,OAAQ,YAEVY,KAAM,CACJd,IAAK,mHACLC,KAAM,SACNC,OAAQ,YAEVA,OAAQ,CACNF,IAAK,0IACLC,KAAM,CAAC,SAAU,WACjBC,OAAQ,YAEVa,aAAc,CACZf,IAAK,2GACLC,KAAM,SACNC,OAAQ,YAEVc,aAAc,CACZhB,IAAK,4DACLC,KAAM,SACNC,OAAQ,YAEVe,aAAc,CACZjB,IAAK,6JACLC,KAAM,SACNC,OAAQ,YAEVgB,eAAgB,CACdlB,IAAK,uEACLC,KAAM,SACNC,OAAQ,YAEViB,UAAW,CACTnB,IAAK,6JACLC,KAAM,YACNC,OAAQ,YAEVkB,SAAU,CACRpB,IAAK,yEACLC,KAAM,UACNC,OAAQ,YAEV,0CAA2C,CACzCF,IAAK,2DACLC,KAAM,CAAC,SAAU,UACjBC,OAAQ,aCrGZ,SAASmB,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKZ,EAAYG,GAAI,CAC9BQ,SAAU,eACR,MAAMC,EAAAA,EAAAA,KAAKC,EAAAA,GAAiB,CAC9Bd,MAAOxB,IACL,MAAMqC,EAAAA,EAAAA,KAAKZ,EAAYI,GAAI,CAC7BO,SAAU,wBACR,MAAMF,EAAAA,EAAAA,MAAMT,EAAYK,EAAG,CAC7BM,SAAU,CAAC,mEAAmEC,EAAAA,EAAAA,KAAKZ,EAAYM,KAAM,CACnGK,SAAU,SACR,mBAGV,CAOA,MANA,SAAoBZ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOe,QAASC,GAAad,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOO,GAAYH,EAAAA,EAAAA,KAAKG,EAAWd,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DY,UAAUC,EAAAA,EAAAA,KAAKd,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,sCCxBA,IAAeiB,EAAE,C,uCCAjB,IAAeC,EAAE,C,uCCAjB,IAAeC,EAAE,C","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/components/textarea/TextareaDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/components/textarea/properties.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../shared/types'\n\nexport const textareaProperties: PropertiesTableProps = {\n  value: {\n    doc: 'The content value of the Textarea.',\n    type: 'string',\n    status: 'optional',\n  },\n  align: {\n    doc: 'Defines the `text-align` of the Textarea. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  stretch: {\n    doc: 'If set to `true`, then the Textarea field will be 100% in `width`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  placeholder: {\n    doc: 'The placeholder which shows up once the Textarea value is empty.',\n    type: 'string',\n    status: 'optional',\n  },\n  keepPlaceholder: {\n    doc: 'Use `true` to keep the placeholder visible even when the Textarea has focus. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Prepends the Form Label component. If no ID is provided, a random ID is created.',\n    type: 'string',\n    status: 'optional',\n  },\n  label_direction: {\n    doc: 'Use `label_direction=\"vertical\"` to change the label layout direction. Defaults to `horizontal`.',\n    type: 'string',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the Textarea more than the label. You can also send in a React component, so it gets wrapped inside the Textarea component.',\n    type: 'string',\n    status: 'optional',\n  },\n  label_sr_only: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  autoresize: {\n    doc: 'Use `true` to make the Textarea grow and shrink depending on how many lines the user has filled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  autoresize_max_rows: {\n    doc: 'Set a number to define how many rows the Textarea can auto grow.',\n    type: 'number',\n    status: 'optional',\n  },\n  characterCounter: {\n    doc: 'Use a number to define the displayed max length. You can also use an object defining the [TextCounter](uilib/components/fragments/text-counter/) `variant` or properties. Please avoid using `maxLength` for accessibility reasons.',\n    type: ['number', 'object'],\n    status: 'optional',\n  },\n  size: {\n    doc: 'The sizes you can choose for 1 row is `small` (2rem), `medium` (2.5rem) and `large` (3rem). Defaults to `small`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status: {\n    doc: 'Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: ['string', 'boolean'],\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'object',\n    status: 'optional',\n  },\n  textarea_state: {\n    doc: 'To control the visual focus state as a prop, like `focus` or `blur`.',\n    type: 'string',\n    status: 'optional',\n  },\n  inner_ref: {\n    doc: 'By providing a React.Ref we can get the internally used Textarea element (DOM). E.g. `inner_ref={myRef}` by using `React.createRef()` or `React.useRef()`.',\n    type: 'React.Ref',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {textareaProperties} from '@dnb/eufemia/src/components/textarea/TextareaDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: textareaProperties\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Set Textarea height\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can set the height of a Textarea by both CSS styles or the \", _jsx(_components.code, {\n        children: \"rows\"\n      }), \" attribute.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["textareaProperties","value","doc","type","status","align","stretch","placeholder","keepPlaceholder","label","label_direction","suffix","label_sr_only","autoresize","autoresize_max_rows","characterCounter","size","status_state","status_props","globalStatus","textarea_state","inner_ref","skeleton","_createMdxContent","props","_components","Object","assign","h2","h3","p","code","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","wrapper","MDXLayout","Td","Th","Tr"],"sourceRoot":""}