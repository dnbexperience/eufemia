{"version":3,"file":"component---src-docs-uilib-components-textarea-properties-mdx-71fb447a3467fefff7f7.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/components/textarea/TextareaDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/components/textarea/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../shared/types'\n\nexport const textareaProperties: PropertiesTableProps = {\n  value: {\n    doc: 'The content value of the Textarea.',\n    type: 'string',\n    status: 'optional',\n  },\n  align: {\n    doc: 'Defines the `text-align` of the Textarea. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  stretch: {\n    doc: 'If set to `true`, then the Textarea field will be 100% in `width`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  placeholder: {\n    doc: 'The placeholder which shows up once the Textarea value is empty.',\n    type: 'string',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Prepends the Form Label component. If no ID is provided, a random ID is created.',\n    type: 'string',\n    status: 'optional',\n  },\n  label_direction: {\n    doc: 'Use `label_direction=\"vertical\"` to change the label layout direction. Defaults to `horizontal`.',\n    type: 'string',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the Textarea more than the label. You can also send in a React component, so it gets wrapped inside the Textarea component.',\n    type: 'string',\n    status: 'optional',\n  },\n  label_sr_only: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  autoresize: {\n    doc: 'Use `true` to make the Textarea grow and shrink depending on how many lines the user has filled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  autoresize_max_rows: {\n    doc: 'Set a number to define how many rows the Textarea can auto grow.',\n    type: 'number',\n    status: 'optional',\n  },\n  characterCounter: {\n    doc: 'Use a number to define the displayed max length. You can also use an object defining the [TextCounter](uilib/components/fragments/text-counter/) `variant` or properties. Please avoid using `maxLength` for accessibility reasons.',\n    type: ['number', 'object'],\n    status: 'optional',\n  },\n  status: {\n    doc: 'Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: ['string', 'boolean'],\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'object',\n    status: 'optional',\n  },\n  textarea_state: {\n    doc: 'To control the visual focus state as a prop, like `focus` or `blur`.',\n    type: 'string',\n    status: 'optional',\n  },\n  inner_ref: {\n    doc: 'By providing a React.Ref we can get the internally used Textarea element (DOM). E.g. `inner_ref={myRef}` by using `React.createRef()` or `React.useRef()`.',\n    type: 'React.Ref',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {textareaProperties} from '@dnb/eufemia/src/components/textarea/TextareaDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: textareaProperties\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Set Textarea height\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can set the height of a Textarea by both CSS styles or the \", _jsx(_components.code, {\n        children: \"rows\"\n      }), \" attribute.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Code, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\nimport Copy from '../tags/Copy'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n}) {\n  const keys = Object.keys(props)\n  const tableRows = Object.entries(props).map(\n    ([key, { type, doc, status }]) => {\n      if (omit && omit.includes(key)) {\n        return null\n      }\n\n      if (\n        typeof type === 'string' &&\n        String(type).includes('{valueType}')\n      ) {\n        type = valueType as string\n      }\n\n      return (\n        <Tr key={key}>\n          <Td>\n            <Copy>\n              <Code>{formatName(camelCase ? toCamelCase(key) : key)}</Code>\n            </Copy>\n          </Td>\n          <Td>\n            {Array.isArray(type) ? (\n              type\n                .map((t) => (\n                  <Copy key={t}>\n                    <Code>{t}</Code>\n                  </Copy>\n                ))\n                .reduce((prev, curr) => (\n                  <>\n                    {prev} or {curr}\n                  </>\n                ))\n            ) : (\n              <Copy>\n                <Code>{type}</Code>\n              </Copy>\n            )}\n          </Td>\n          <Td>\n            <em>({status})</em>{' '}\n            <ReactMarkdown components={components}>\n              {camelCase ? convertToCamelCase(doc, keys) : doc}\n            </ReactMarkdown>\n          </Td>\n        </Tr>\n      )\n    },\n  )\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nfunction formatName(name: string): React.ReactNode | string {\n  if (name.includes('/')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["textareaProperties","value","doc","type","status","align","stretch","placeholder","label","label_direction","suffix","label_sr_only","autoresize","autoresize_max_rows","characterCounter","status_state","status_props","globalStatus","textarea_state","inner_ref","skeleton","_createMdxContent","props","_components","Object","assign","h2","h3","p","code","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","wrapper","MDXLayout","basicComponents","StyledTable","_styled","Table","target","name","styles","_ref","valueType","camelCase","omit","keys","tableRows","entries","map","_ref2","key","includes","String","Tr","Td","Copy","Code","formatName","toCamelCase","Array","isArray","t","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp"],"sourceRoot":""}