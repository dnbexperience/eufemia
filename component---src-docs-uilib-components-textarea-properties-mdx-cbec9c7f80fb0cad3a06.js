"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[63223],{87716:function(e,t,s){s.r(t);var r=s(52322),n=s(45392);function d(e){const t=Object.assign({h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",em:"em",a:"a",strong:"strong",h3:"h3",p:"p"},(0,n.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{children:"Properties"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Properties"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"value"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.em,{children:"(optional)"})," the content value of the Textarea."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"align"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.em,{children:"(optional)"})," defines the ",(0,r.jsx)(t.code,{children:"text-align"})," of the Textarea. Defaults to ",(0,r.jsx)(t.code,{children:"left"}),"."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"stretch"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.em,{children:"(optional)"})," if set to ",(0,r.jsx)(t.code,{children:"true"}),", then the Textarea field will be 100% in ",(0,r.jsx)(t.code,{children:"width"}),"."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"placeholder"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.em,{children:"(optional)"})," the placeholder which shows up once the Textarea value is empty"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"label"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.em,{children:"(optional)"})," prepends the Form Label component. If no ID is provided, a random ID is created."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"label_direction"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.em,{children:"(optional)"})," use ",(0,r.jsx)(t.code,{children:'label_direction="vertical"'})," to change the label layout direction. Defaults to ",(0,r.jsx)(t.code,{children:"horizontal"}),"."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"suffix"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.em,{children:"(optional)"})," text describing the content of the Textarea more than the label. You can also send in a React component, so it gets wrapped inside the Textarea component."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"label_sr_only"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.em,{children:"(optional)"})," use ",(0,r.jsx)(t.code,{children:"true"})," to make the label only readable by screen readers."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"autoresize"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.em,{children:"(optional)"})," use ",(0,r.jsx)(t.code,{children:"true"})," to make the Textarea grow and shrink depending on how many lines the user has filled."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"autoresize_max_rows"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.em,{children:"(optional)"})," set a number to define how many rows the Textarea can auto grow."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"status"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.em,{children:"(optional)"})," text with a status message. The style defaults to an error message. You can use ",(0,r.jsx)(t.code,{children:"true"})," to only get the status color, without a message."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"status_state"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.em,{children:"(optional)"})," defines the state of the status. Currently, there are two statuses ",(0,r.jsx)(t.code,{children:"[error, info]"}),". Defaults to ",(0,r.jsx)(t.code,{children:"error"}),"."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"status_props"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.em,{children:"(optional)"})," use an object to define additional FormStatus properties."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"globalStatus"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.em,{children:"(optional)"})," the ",(0,r.jsx)(t.a,{href:"/uilib/components/global-status/properties/#configuration-object",children:"configuration"})," used for the target ",(0,r.jsx)(t.a,{href:"/uilib/components/global-status",children:"GlobalStatus"}),"."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"textarea_state"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.em,{children:"(optional)"})," to control the visual focus state as a prop, like ",(0,r.jsx)(t.code,{children:"focus"})," or ",(0,r.jsx)(t.code,{children:"blur"}),"."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"textarea_class"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.em,{children:"(optional)"})," in case we have to set a custom Textarea class."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"textarea_attributes"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.em,{children:"(optional)"})," provide the Textarea element with any attributes by using an Object ",(0,r.jsx)(t.code,{children:"textarea_attributes={{size:'2'}}"})," or a JSON Object ",(0,r.jsx)(t.code,{children:'textarea_attributes=\'{"size":"2"}\''}),". ",(0,r.jsx)(t.strong,{children:"NB:"})," Keep in mind, that also every not listed component property will be sent along and set as a Textarea element attribute."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"inner_ref"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.em,{children:"(optional)"})," by providing a React.ref we can get the internally used Textarea element (DOM). E.g. ",(0,r.jsx)(t.code,{children:"inner_ref={myRef}"})," by using ",(0,r.jsx)(t.code,{children:"React.createRef()"})," or ",(0,r.jsx)(t.code,{children:"React.useRef()"}),"."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"skeleton"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.em,{children:"(optional)"})," if set to ",(0,r.jsx)(t.code,{children:"true"}),", an overlaying skeleton with animation will be shown."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"/uilib/layout/space/properties",children:"Space"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.em,{children:"(optional)"})," spacing properties like ",(0,r.jsx)(t.code,{children:"top"})," or ",(0,r.jsx)(t.code,{children:"bottom"})," are supported."]})]})]})]}),"\n",(0,r.jsx)(t.h3,{children:"Set Textarea height"}),"\n",(0,r.jsxs)(t.p,{children:["You can set the height of a Textarea by both CSS styles or the ",(0,r.jsx)(t.code,{children:"rows"})," attribute."]})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,n.ah)(),e.components);return t?(0,r.jsx)(t,Object.assign({},e,{children:(0,r.jsx)(d,e)})):d(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-textarea-properties-mdx-cbec9c7f80fb0cad3a06.js.map