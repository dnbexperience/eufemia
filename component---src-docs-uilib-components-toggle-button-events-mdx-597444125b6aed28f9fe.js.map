{"version":3,"file":"component---src-docs-uilib-components-toggle-button-events-mdx-597444125b6aed28f9fe.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/toggle-button/events.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/button/ButtonDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/toggle-button/ToggleButtonDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/toggle-button/ToggleButtonGroupDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {ToggleButtonEvents} from '@dnb/eufemia/src/components/toggle-button/ToggleButtonDocs';\nimport {ToggleButtonGroupEvents} from '@dnb/eufemia/src/components/toggle-button/ToggleButtonGroupDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      children: [_jsx(_components.code, {\n        children: \"ToggleButton\"\n      }), \" events\"]\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: ToggleButtonEvents\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [_jsx(_components.code, {\n        children: \"ToggleButton.Group\"\n      }), \" events\"]\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: ToggleButtonGroupEvents\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const ButtonProperties: PropertiesTableProps = {\n  type: {\n    doc: 'The type HTML attribute. Defaults to `button` for legacy reasons.',\n    type: ['button', 'reset', 'submit'],\n    status: 'optional',\n  },\n  text: {\n    doc: 'The content of the button can be a string or a React Element.',\n    type: ['string', 'React.ReactNode'],\n    status: 'optional',\n  },\n  'aria-label': {\n    doc: 'Required if there is no text in the button. If `text` and `children` are undefined, setting the `title` property will automatically set `aria-label` with the same value.',\n    type: 'string',\n    status: 'optional',\n  },\n  title: {\n    doc: 'Required if there is no text in the button. If `text` and `children` are undefined, setting the `title` property will automatically set `aria-label` with the same value.',\n    type: 'string',\n    status: 'optional',\n  },\n  variant: {\n    doc: 'Defines the kind of button. Possible values are `primary`, `secondary`, `tertiary` and `signal`. Defaults to `primary` (or `secondary` if icon only).',\n    type: ['primary', 'secondary', 'tertiary', 'signal'],\n    status: 'optional',\n  },\n  size: {\n    doc: 'The size of the button. For now there is `small`, `medium`, `default` and `large`.',\n    type: ['small', 'medium', 'default', 'large'],\n    status: 'optional',\n  },\n  icon: {\n    doc: 'To be included in the button. [Primary Icons](/icons/primary) can be set as a string (e.g. `icon=\"chevron_right\"`), other icons should be set as React elements.',\n    type: ['string', 'React.ReactNode'],\n    status: 'optional',\n  },\n  icon_position: {\n    doc: 'Position of icon inside the button. Set to `left` or `right`. Tertiary button variant also supports `top`. Defaults to `right` if not set.',\n    type: ['left', 'right', 'top'],\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'Define icon width and height. Defaults to 16px.',\n    type: 'string',\n    status: 'optional',\n  },\n  href: {\n    doc: 'If you want the button to behave as a link. Use with caution! A link should normally visually be a link and not a button.',\n    type: 'string',\n    status: 'optional',\n  },\n  target: {\n    doc: 'When button behaves as a link. Used to specify where to open the linked document, specified by `href`. Possible values are `_self`, `_blank`, `_parent` and `_top`.',\n    type: ['_self', '_blank', '_parent', '_top'],\n    status: 'optional',\n  },\n  rel: {\n    doc: 'When button behaves as a link. Used to specify the relationship between a linked resource and the current document. Examples(non-exhaustive list) of values are `nofollow`, `search`, and `tag`.',\n    type: 'string',\n    status: 'optional',\n  },\n  to: {\n    doc: 'Use this property only if you are using a router Link component as the `element` that uses the `to` property to declare the navigation url.',\n    type: 'string',\n    status: 'optional',\n  },\n  wrap: {\n    doc: 'If set to `true` the button text will wrap in to new lines if the overflow point is reached. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  stretch: {\n    doc: 'Set it to `true` in order to stretch the button to the available space. Defaults to false.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  bounding: {\n    doc: 'Set it to `true` in order to extend the bounding box (above the visual button background). You may also look into the HTML class `dnb-button__bounding` if it needs some CSS customization in order to get the particular button right for your use-case.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  element: {\n    doc: 'Only meant to be used for special use cases. Defaults to `button` or `a` depending if href is set or not.',\n    type: 'string',\n    status: 'optional',\n  },\n  custom_content: {\n    doc: 'If you need to inject completely custom markup (React Element) into the button component. You have then to handle alignment and styling by yourself.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  tooltip: {\n    doc: 'Provide a string or a React Element to be shown as the tooltip content.',\n    type: ['string', 'React.ReactNode'],\n    status: 'optional',\n  },\n  status: {\n    doc: 'Set it to either `status=\"error\"` or a text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: ['error', 'info', 'boolean'],\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently there are two statuses `[error, info]`. Defaults to `error`.',\n    type: ['error', 'info'],\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'object',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const ButtonEvents: PropertiesTableProps = {\n  on_click: {\n    doc: 'will be called on a click event. Returns an object with the native event: `{ event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../shared/types'\nimport { ButtonProperties } from '../button/ButtonDocs'\n\nexport const ToggleButtonProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Defines the `value` as a string. Use it to get the value during the `on_change` event listener callback in the **ToggleButtonGroup**.',\n    type: 'string',\n    status: 'required',\n  },\n  text: {\n    doc: 'The text shown in the ToggleButton.',\n    type: 'string',\n    status: 'required',\n  },\n  checked: {\n    doc: 'Determine whether the ToggleButton is checked or not. The default will be `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  title: {\n    doc: 'The `title` of the input - describing it a bit further for accessibility reasons.',\n    type: 'string',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Use either the `label` property or provide a custom one.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon: {\n    doc: 'Icon to be included in the toggle button.',\n    type: ['string', 'React.ReactNode'],\n    status: 'optional',\n  },\n  icon_position: {\n    doc: 'Position of the icon inside the toggle button. Set to `left` or `right`. Defaults to `right` if not set.',\n    type: ['left', 'right'],\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'Define icon width and height. Defaults to 16px.',\n    type: 'string',\n    status: 'optional',\n  },\n  tooltip: ButtonProperties.tooltip,\n  size: ButtonProperties.size,\n  status: {\n    doc: 'Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: ['error', 'info', 'boolean'],\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.',\n    type: ['error', 'info'],\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'object',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the ToggleButton more than the label. You can also send in a React component, so it gets wrapped inside the ToggleButton component.',\n    type: ['string', 'React.ReactNode'],\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const ToggleButtonEvents: PropertiesTableProps = {\n  on_change: {\n    doc: 'will be called on state changes made by the user. Returns a boolean and string `{ checked, value, event }`',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const ToggleButtonGroupProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Defines the pre-selected ToggleButton button. The value has to match the one provided in the ToggleButton button. Use a string value.',\n    type: 'string',\n    status: 'optional',\n  },\n  values: {\n    doc: 'Defines the pre-selected ToggleButton buttons in `multiselect` mode. The values have to match the one provided in the ToggleButton buttons. Use array, either as JS or JSON string.',\n    type: 'array',\n    status: 'optional',\n  },\n  multiselect: {\n    doc: \"Defines if the ToggleButton's should act as a multi-selectable list of toggle buttons. Defaults to `false`.\",\n    type: 'boolean',\n    status: 'optional',\n  },\n  layout_direction: {\n    doc: 'Define the layout direction of the ToggleButton buttons. Can be either `column` or `row`. Defaults to `column`.',\n    type: ['column', 'row'],\n    status: 'optional',\n  },\n  title: {\n    doc: 'The `title` of group, describing it a bit further for accessibility reasons.',\n    type: 'string',\n    status: 'optional',\n  },\n  status: {\n    doc: 'Uses the `form-status` component to show failure messages.',\n    type: ['error', 'info', 'boolean'],\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.',\n    type: ['error', 'info'],\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'object',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Use either the `label` property or provide a custom one.',\n    type: 'string',\n    status: 'optional',\n  },\n  label_direction: {\n    doc: 'To define the `label` layout direction on how the next element should be placed on. Can be either `vertical` or `horizontal`. Defaults to `horizontal`.',\n    type: ['vertical', 'horizontal'],\n    status: 'optional',\n  },\n  label_sr_only: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  vertical: {\n    doc: 'Will force both `direction` and `label_direction` to be **vertical** if set to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the ToggleButtonGroup more than the label. You can also send in a React component, so it gets wrapped inside the ToggleButtonGroup component.',\n    type: 'string',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const ToggleButtonGroupEvents: PropertiesTableProps = {\n  on_change: {\n    doc: 'will be called once a ToggleButton button changes the state. Returns an object `{ value, values, event }`. <br /><br /> **NB**: `values` is only available if `multiselect` is used / true.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","code","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","ToggleButtonEvents","ToggleButtonGroupEvents","wrapper","MDXLayout","ButtonProperties","type","doc","status","text","title","variant","size","icon","icon_position","icon_size","href","target","rel","to","wrap","stretch","bounding","element","custom_content","skeleton","tooltip","status_state","status_props","globalStatus","ButtonEvents","on_click","ToggleButtonProperties","value","checked","label","suffix","on_change","ToggleButtonGroupProperties","values","multiselect","layout_direction","label_direction","label_sr_only","vertical","Td","Th","Tr"],"sourceRoot":""}