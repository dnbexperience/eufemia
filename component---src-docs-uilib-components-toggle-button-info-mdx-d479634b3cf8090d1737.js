"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[18836],{13169:function(e,n,t){t.r(n);var o=t(52322),s=t(45392);function l(e){const n=Object.assign({h2:"h2",pre:"pre",code:"code",p:"p",a:"a",h3:"h3"},(0,s.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{children:"Import"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { ToggleButton } from '@dnb/eufemia'\n"})}),"\n",(0,o.jsx)(n.h2,{children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"The ToggleButton component should be used to toggle on or off a limited number of choices."}),"\n",(0,o.jsxs)(n.p,{children:["You can use the React component ",(0,o.jsx)(n.code,{children:"<ToggleButton.Group>"})," to wrap several ",(0,o.jsx)(n.code,{children:"ToggleButton"}),". This makes it easier to handle the event ",(0,o.jsx)(n.code,{children:"on_change"})," on a higher level - as well as several other ",(0,o.jsx)(n.a,{href:"/uilib/components/toggle-button/properties",children:"context related properties"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["By default the ",(0,o.jsx)(n.code,{children:"ToggleButton.Group"})," is single-select, like a ",(0,o.jsx)(n.a,{href:"/uilib/components/radio",children:"Radio"})," button. But you can easily enable ",(0,o.jsx)(n.code,{children:"multiselect"})," as well."]}),"\n",(0,o.jsx)(n.h2,{children:"How to use"}),"\n",(0,o.jsxs)(n.p,{children:["You can use the ToggleButton in different modes. Either as a stand-alone component or together with the ",(0,o.jsx)(n.code,{children:"ToggleButton.Group"})," context."]}),"\n",(0,o.jsx)(n.h3,{children:"Multi select"}),"\n",(0,o.jsxs)(n.p,{children:["If ",(0,o.jsx)(n.code,{children:"multiselect"})," is enabled on the group, several items can be enabled/disabled by the user."]}),"\n",(0,o.jsxs)(n.p,{children:["You would have to decide if you want to track the state by yourself by using the ",(0,o.jsx)(n.code,{children:"checked"})," property, or you want just to listen to the internal state with ",(0,o.jsx)(n.code,{children:"on_change(({ values } => console.log(values)))"}),". You have then to give every item also a ",(0,o.jsx)(n.code,{children:"value"})," property."]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(l,e)})):l(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-toggle-button-info-mdx-d479634b3cf8090d1737.js.map