{"version":3,"file":"component---src-docs-uilib-components-toggle-button-mdx-14da1d246bad32e98502.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/toggle-button/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/toggle-button/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/toggle-button/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/toggle-button.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Import\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { ToggleButton } from '@dnb/eufemia'\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The ToggleButton component should be used to toggle on or off a limited number of choices.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Relevant links\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.figma.com/design/cdtwQD8IJ7pTeE45U148r1/%F0%9F%92%BB-Eufemia---Web?node-id=4243-1493\",\n          children: \"Figma\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/dnbexperience/eufemia/tree/main/packages/dnb-eufemia/src/components/toggle-button\",\n          children: \"Source code\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/dnbexperience/eufemia/tree/main/packages/dnb-design-system-portal/src/docs/uilib/components/toggle-button\",\n          children: \"Docs code\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the React component \", _jsx(_components.code, {\n        children: \"<ToggleButton.Group>\"\n      }), \" to wrap several \", _jsx(_components.code, {\n        children: \"ToggleButton\"\n      }), \". This makes it easier to handle the event \", _jsx(_components.code, {\n        children: \"on_change\"\n      }), \" on a higher level - as well as several other \", _jsx(_components.a, {\n        href: \"/uilib/components/toggle-button/properties\",\n        children: \"context related properties\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default the \", _jsx(_components.code, {\n        children: \"ToggleButton.Group\"\n      }), \" is single-select, like a \", _jsx(_components.a, {\n        href: \"/uilib/components/radio\",\n        children: \"Radio\"\n      }), \" button. But you can easily enable \", _jsx(_components.code, {\n        children: \"multiselect\"\n      }), \" as well.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"How to use\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the ToggleButton in different modes. Either as a stand-alone component or together with the \", _jsx(_components.code, {\n        children: \"ToggleButton.Group\"\n      }), \" context.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Multi select\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If \", _jsx(_components.code, {\n        children: \"multiselect\"\n      }), \" is enabled on the group, several items can be enabled/disabled by the user.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You would have to decide if you want to track the state by yourself by using the \", _jsx(_components.code, {\n        children: \"checked\"\n      }), \" property, or you want just to listen to the internal state with \", _jsx(_components.code, {\n        children: \"on_change(({ values } => console.log(values)))\"\n      }), \". You have then to give every item also a \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" property.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { ToggleButton, HelpButton } from '@dnb/eufemia/src'\n\nexport const ToggleButtonUnchecked = () => (\n  <ComponentBox data-visual-test=\"toggle-button-default\">\n    <ToggleButton label=\"Label\" text=\"Toggle Me\" />\n  </ComponentBox>\n)\n\nexport const ToggleButtonChecked = () => (\n  <ComponentBox data-visual-test=\"toggle-button-checked\">\n    <ToggleButton\n      label=\"Label\"\n      text=\"Checked ToggleButton\"\n      checked\n      on_change={({ checked }) => {\n        console.log('on_change', checked)\n      }}\n    />\n  </ComponentBox>\n)\n\nexport const ToggleButtonDefault = () => (\n  <ComponentBox data-visual-test=\"toggle-button-group-default\">\n    <ToggleButton.Group\n      label=\"ToggleButton Group\"\n      value=\"first\"\n      on_change={({ value }) => {\n        console.log('on_change', value)\n      }}\n    >\n      <ToggleButton text=\"First\" value=\"first\" />\n      <ToggleButton text=\"Second\" value=\"second\" />\n      <ToggleButton text=\"Third\" value=\"third\" />\n    </ToggleButton.Group>\n  </ComponentBox>\n)\n\nexport const ToggleButtonMultiselect = () => (\n  <ComponentBox data-visual-test=\"toggle-button-group-multiselect\">\n    <ToggleButton.Group\n      label=\"Multi-select\"\n      multiselect={true}\n      values={['first', 'third']}\n      on_change={({ values }) => {\n        console.log('on_change', values)\n      }}\n    >\n      <ToggleButton text=\"First\" value=\"first\" />\n      <ToggleButton text=\"Second\" value=\"second\" />\n      <ToggleButton text=\"Third\" value=\"third\" />\n    </ToggleButton.Group>\n  </ComponentBox>\n)\n\nexport const ToggleButtonVertical = () => (\n  <ComponentBox data-visual-test=\"toggle-button-group-vertical\">\n    <ToggleButton.Group\n      label=\"Vertical Group\"\n      layout_direction=\"column\"\n      multiselect={true}\n      variant=\"checkbox\"\n      on_change={({ values }) => {\n        console.log('on_change', values)\n      }}\n    >\n      <ToggleButton text=\"First\" value=\"first\" />\n      <ToggleButton text=\"Second\" value=\"second\" />\n      <ToggleButton text=\"Third\" value=\"third\" checked />\n    </ToggleButton.Group>\n  </ComponentBox>\n)\n\nexport const ToggleButtonStatus = () => (\n  <ComponentBox>\n    <ToggleButton.Group\n      label=\"ToggleButton Group with status\"\n      status=\"Error message\"\n      multiselect={true}\n      on_change={({ values }) => {\n        console.log('on_change', values)\n      }}\n    >\n      <ToggleButton text=\"First\" value=\"first\" />\n      <ToggleButton text=\"Second\" value=\"second\" checked />\n      <ToggleButton text=\"Third\" value=\"third\" checked={true} />\n    </ToggleButton.Group>\n  </ComponentBox>\n)\n\nexport const ToggleButtonStatusMessages = () => (\n  <ComponentBox data-visual-test=\"toggle-button-group-status\">\n    <ToggleButton.Group\n      label=\"ToggleButtons with status\"\n      variant=\"radio\"\n      on_change={({ value }) => {\n        console.log('on_change', value)\n      }}\n    >\n      <ToggleButton text=\"First\" value=\"first\" status=\"error\" />\n      <ToggleButton\n        text=\"Second\"\n        value=\"second\"\n        checked\n        status=\"Error message\"\n      />\n      <ToggleButton\n        text=\"Third\"\n        value=\"third\"\n        status=\"Info message\"\n        status_state=\"info\"\n      />\n    </ToggleButton.Group>\n  </ComponentBox>\n)\n\nexport const ToggleButtonDisabledGroup = () => (\n  <ComponentBox data-visual-test=\"toggle-button-group-disabled\">\n    <ToggleButton.Group\n      label=\"Disabled Group\"\n      disabled\n      value=\"first\"\n      variant=\"checkbox\"\n    >\n      <ToggleButton text=\"First\" value=\"first\" />\n      <ToggleButton text=\"Second\" value=\"second\" />\n      <ToggleButton text=\"Third\" value=\"third\" checked />\n    </ToggleButton.Group>\n  </ComponentBox>\n)\n\nexport const ToggleButtonSuffix = () => (\n  <ComponentBox>\n    <ToggleButton.Group\n      label=\"With suffixes\"\n      suffix={<HelpButton title=\"Group suffix\">Group suffix</HelpButton>}\n    >\n      <ToggleButton text=\"First\" value=\"first\" />\n      <ToggleButton\n        text=\"Second\"\n        value=\"second\"\n        status=\"Error message\"\n        suffix={\n          <HelpButton title=\"Button suffix\">Button suffix</HelpButton>\n        }\n      />\n      <ToggleButton text=\"Third\" value=\"third\" checked />\n    </ToggleButton.Group>\n  </ComponentBox>\n)\n\nexport const ToggleButtonIconOnly = () => (\n  <ComponentBox>\n    <ToggleButton.Group label=\"Icons only\">\n      <ToggleButton icon=\"bell\" value=\"first\" checked />\n      <ToggleButton icon=\"loupe\" value=\"second\" />\n      <ToggleButton icon=\"calendar\" value=\"third\" />\n    </ToggleButton.Group>\n  </ComponentBox>\n)\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {ToggleButtonUnchecked, ToggleButtonChecked, ToggleButtonDefault, ToggleButtonMultiselect, ToggleButtonVertical, ToggleButtonStatus, ToggleButtonStatusMessages, ToggleButtonDisabledGroup, ToggleButtonSuffix, ToggleButtonIconOnly} from 'Docs/uilib/components/toggle-button/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Unchecked ToggleButton\"\n    }), \"\\n\", _jsx(ToggleButtonUnchecked, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Checked ToggleButton\"\n    }), \"\\n\", _jsx(ToggleButtonChecked, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Default ToggleButton group\"\n    }), \"\\n\", _jsx(ToggleButtonDefault, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Multi-select ToggleButton group\"\n    }), \"\\n\", _jsx(ToggleButtonMultiselect, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Vertical aligned ToggleButton group with \", _jsx(_components.code, {\n        children: \"checkbox\"\n      }), \" variant and \", _jsx(_components.code, {\n        children: \"multiselect\"\n      })]\n    }), \"\\n\", _jsx(ToggleButtonVertical, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"ToggleButton group as \", _jsx(_components.code, {\n        children: \"multiselect\"\n      }), \" with a status message\"]\n    }), \"\\n\", _jsx(ToggleButtonStatus, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"ToggleButton with status messages and a group variant as \", _jsx(_components.code, {\n        children: \"radio\"\n      })]\n    }), \"\\n\", _jsx(ToggleButtonStatusMessages, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Disabled ToggleButton group\"\n    }), \"\\n\", _jsx(ToggleButtonDisabledGroup, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"ToggleButtons with a suffix\"\n    }), \"\\n\", _jsx(ToggleButtonSuffix, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"ToggleButtons with icons only\"\n    }), \"\\n\", _jsx(ToggleButtonIconOnly, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport ToggleButtonInfo from 'Docs/uilib/components/toggle-button/info';\nimport ToggleButtonDemos from 'Docs/uilib/components/toggle-button/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(ToggleButtonInfo, {}), \"\\n\", _jsx(ToggleButtonDemos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","pre","code","p","ul","li","a","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","className","href","wrapper","MDXLayout","ToggleButtonUnchecked","ComponentBox","ToggleButtonChecked","ToggleButtonDefault","ToggleButtonMultiselect","ToggleButtonVertical","ToggleButtonStatus","ToggleButtonStatusMessages","ToggleButtonDisabledGroup","ToggleButtonSuffix","ToggleButtonIconOnly","ToggleButtonInfo","ToggleButtonDemos"],"sourceRoot":""}