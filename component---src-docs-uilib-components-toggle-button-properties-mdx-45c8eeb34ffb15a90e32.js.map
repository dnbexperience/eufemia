{"version":3,"file":"component---src-docs-uilib-components-toggle-button-properties-mdx-45c8eeb34ffb15a90e32.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/components/toggle-button/ToggleButtonDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/toggle-button/ToggleButtonGroupDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/components/toggle-button/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/button/ButtonDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../shared/types'\nimport { ButtonProperties } from '../button/ButtonDocs'\n\nexport const ToggleButtonProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Defines the `value` as a string. Use it to get the value during the `on_change` event listener callback in the **ToggleButtonGroup**.',\n    type: 'string',\n    status: 'required',\n  },\n  text: {\n    doc: 'The text shown in the ToggleButton.',\n    type: 'string',\n    status: 'required',\n  },\n  checked: {\n    doc: 'Determine whether the ToggleButton is checked or not. The default will be `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  title: {\n    doc: 'The `title` of the input - describing it a bit further for accessibility reasons.',\n    type: 'string',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Use either the `label` property or provide a custom one.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon: {\n    doc: 'Icon to be included in the toggle button.',\n    type: ['string', 'React.ReactNode'],\n    status: 'optional',\n  },\n  icon_position: {\n    doc: 'Position of the icon inside the toggle button. Set to `left` or `right`. Defaults to `right` if not set.',\n    type: ['left', 'right'],\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'Define icon width and height. Defaults to 16px.',\n    type: 'string',\n    status: 'optional',\n  },\n  size: ButtonProperties.size,\n  status: {\n    doc: 'Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: ['error', 'info', 'boolean'],\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.',\n    type: ['error', 'info'],\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'object',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the ToggleButton more than the label. You can also send in a React component, so it gets wrapped inside the ToggleButton component.',\n    type: ['string', 'React.ReactNode'],\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const ToggleButtonGroupProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Defines the pre-selected ToggleButton button. The value has to match the one provided in the ToggleButton button. Use a string value.',\n    type: 'string',\n    status: 'optional',\n  },\n  values: {\n    doc: 'Defines the pre-selected ToggleButton buttons in `multiselect` mode. The values have to match the one provided in the ToggleButton buttons. Use array, either as JS or JSON string.',\n    type: 'array',\n    status: 'optional',\n  },\n  multiselect: {\n    doc: \"Defines if the ToggleButton's should act as a multi-selectable list of toggle buttons. Defaults to `false`.\",\n    type: 'boolean',\n    status: 'optional',\n  },\n  layout_direction: {\n    doc: 'Define the layout direction of the ToggleButton buttons. Can be either `column` or `row`. Defaults to `column`.',\n    type: ['column', 'row'],\n    status: 'optional',\n  },\n  title: {\n    doc: 'The `title` of group, describing it a bit further for accessibility reasons.',\n    type: 'string',\n    status: 'optional',\n  },\n  status: {\n    doc: 'Uses the `form-status` component to show failure messages.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.',\n    type: ['error', 'info'],\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'object',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Use either the `label` property or provide a custom one.',\n    type: 'string',\n    status: 'optional',\n  },\n  label_direction: {\n    doc: 'To define the `label` layout direction on how the next element should be placed on. Can be either `vertical` or `horizontal`. Defaults to `horizontal`.',\n    type: ['vertical', 'horizontal'],\n    status: 'optional',\n  },\n  label_sr_only: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  vertical: {\n    doc: 'Will force both `direction` and `label_direction` to be **vertical** if set to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the ToggleButtonGroup more than the label. You can also send in a React component, so it gets wrapped inside the ToggleButtonGroup component.',\n    type: 'string',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {ToggleButtonProperties} from '@dnb/eufemia/src/components/toggle-button/ToggleButtonDocs';\nimport {ToggleButtonGroupProperties} from '@dnb/eufemia/src/components/toggle-button/ToggleButtonGroupDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      children: [_jsx(_components.code, {\n        children: \"ToggleButton\"\n      }), \" properties\"]\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: ToggleButtonProperties\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [_jsx(_components.code, {\n        children: \"ToggleButton.Group\"\n      }), \" properties\"]\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: ToggleButtonGroupProperties\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colors = {\n  type: {\n    default: 'var(--color-success-green)',\n    primitive: 'var(--color-success-green)',\n    string: 'var(--color-fire-red)',\n  },\n  value: {\n    default: 'var(--color-success-green)',\n    undefined: 'var(--color-black-55)',\n    string: 'var(--color-fire-red)',\n  },\n}\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = isString(children)\n          ? colors.type.string\n          : isPrimitive(children)\n          ? colors.type.primitive\n          : colors.type.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n      case 'value': {\n        style.color = isString(children)\n          ? colors.value.string\n          : children === 'undefined' || children === 'null'\n          ? colors.value.undefined\n          : colors.value.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\nfunction isString(str: string) {\n  return [\"'\", '\"', '`'].includes(str.substring(0, 1))\n}\n\nfunction isPrimitive(type: string) {\n  return [\n    'boolean',\n    'true',\n    'false',\n    'number',\n    'bigint',\n    'string',\n    'symbol',\n  ].includes(typeWithoutArray(type))\n}\n\nfunction typeWithoutArray(type: string) {\n  if (type.endsWith('[]')) {\n    return type.slice(0, -2)\n  } else if (type.startsWith('Array<') && type.endsWith('>')) {\n    return type.slice(6, -1)\n  }\n  return type\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('[')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const ButtonProperties: PropertiesTableProps = {\n  type: {\n    doc: 'The type HTML attribute. Defaults to `button` for legacy reasons.',\n    type: ['button', 'reset', 'submit'],\n    status: 'optional',\n  },\n  text: {\n    doc: 'The content of the button can be a string or a React Element.',\n    type: ['string', 'React.ReactNode'],\n    status: 'optional',\n  },\n  'aria-label': {\n    doc: 'Required if there is no text in the button. If `text` and `children` are undefined, setting the `title` property will automatically set `aria-label` with the same value.',\n    type: 'string',\n    status: 'optional',\n  },\n  title: {\n    doc: 'Required if there is no text in the button. If `text` and `children` are undefined, setting the `title` property will automatically set `aria-label` with the same value.',\n    type: 'string',\n    status: 'optional',\n  },\n  variant: {\n    doc: 'Defines the kind of button. Possible values are `primary`, `secondary`, `tertiary` and `signal`. Defaults to `primary` (or `secondary` if icon only).',\n    type: ['primary', 'secondary', 'tertiary', 'signal'],\n    status: 'optional',\n  },\n  size: {\n    doc: 'The size of the button. For now there is `small`, `medium`, `default` and `large`.',\n    type: ['small', 'medium', 'default', 'large'],\n    status: 'optional',\n  },\n  icon: {\n    doc: 'To be included in the button. [Primary Icons](/icons/primary) can be set as a string (e.g. `icon=\"chevron_right\"`), other icons should be set as React elements.',\n    type: ['string', 'React.ReactNode'],\n    status: 'optional',\n  },\n  icon_position: {\n    doc: 'Position of icon inside the button. Set to `left` or `right`. Tertiary button variant also supports `top`. Defaults to `right` if not set.',\n    type: ['left', 'right', 'top'],\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'Define icon width and height. Defaults to 16px.',\n    type: 'string',\n    status: 'optional',\n  },\n  href: {\n    doc: 'If you want the button to behave as a link. Use with caution! A link should normally visually be a link and not a button.',\n    type: 'string',\n    status: 'optional',\n  },\n  target: {\n    doc: 'When button behaves as a link. Used to specify where to open the linked document, specified by `href`. Possible values are `_self`, `_blank`, `_parent` and `_top`.',\n    type: ['_self', '_blank', '_parent', '_top'],\n    status: 'optional',\n  },\n  rel: {\n    doc: 'When button behaves as a link. Used to specify the relationship between a linked resource and the current document. Examples(non-exhaustive list) of values are `nofollow`, `search`, and `tag`.',\n    type: 'string',\n    status: 'optional',\n  },\n  to: {\n    doc: 'Use this property only if you are using a router Link component as the `element` that uses the `to` property to declare the navigation url.',\n    type: 'string',\n    status: 'optional',\n  },\n  wrap: {\n    doc: 'If set to `true` the button text will wrap in to new lines if the overflow point is reached. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  stretch: {\n    doc: 'Set it to `true` in order to stretch the button to the available space. Defaults to false.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  bounding: {\n    doc: 'Set it to `true` in order to extend the bounding box (above the visual button background). You may also look into the HTML class `dnb-button__bounding` if it needs some CSS customization in order to get the particular button right for your use-case.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  element: {\n    doc: 'Only meant to be used for special use cases. Defaults to `button` or `a` depending if href is set or not.',\n    type: 'string',\n    status: 'optional',\n  },\n  custom_content: {\n    doc: 'If you need to inject completely custom markup (React Element) into the button component. You have then to handle alignment and styling by yourself.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  tooltip: {\n    doc: 'Provide a string or a React Element to be shown as the tooltip content.',\n    type: ['string', 'React.ReactNode'],\n    status: 'optional',\n  },\n  status: {\n    doc: 'Set it to either `status=\"error\"` or a text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: ['error', 'info', 'boolean'],\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently there are two statuses `[error, info]`. Defaults to `error`.',\n    type: ['error', 'info'],\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'object',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["ToggleButtonProperties","value","doc","type","status","text","checked","title","label","icon","icon_position","icon_size","size","ButtonProperties","status_state","status_props","globalStatus","suffix","skeleton","ToggleButtonGroupProperties","values","multiselect","layout_direction","label_direction","label_sr_only","vertical","_createMdxContent","props","_components","Object","assign","h2","code","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","wrapper","MDXLayout","basicComponents","p","StyledTable","_styled","Table","target","name","styles","colors","default","primitive","string","undefined","FormattedCode","_ref","variant","strikethrough","style","rest","textDecoration","color","isString","includes","endsWith","slice","startsWith","typeWithoutArray","background","boxShadow","_ref2","valueType","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","defaultValue","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","str","substring","forEach","replace","RegExp","href","rel","to","wrap","stretch","bounding","element","custom_content","tooltip"],"sourceRoot":""}