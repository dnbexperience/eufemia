"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[12565],{31414:function(e,t,s){s.r(t);var n=s(52322),i=s(45392);function r(e){const t=Object.assign({h2:"h2",code:"code",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",em:"em",strong:"strong",a:"a"},(0,i.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.h2,{children:[(0,n.jsx)(t.code,{children:"ToggleButton"})," properties"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Properties"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"value"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(required)"})," defines the ",(0,n.jsx)(t.code,{children:"value"})," as a string. Use it to get the value during the ",(0,n.jsx)(t.code,{children:"on_change"})," event listener callback in the ",(0,n.jsx)(t.strong,{children:"ToggleButtonGroup"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"text"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(required)"})," the text shown in the ToggleButton."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"checked"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," determine whether the ToggleButton is checked or not. The default will be ",(0,n.jsx)(t.code,{children:"false"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"title"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," the ",(0,n.jsx)(t.code,{children:"title"})," of the input - describing it a bit further for accessibility reasons."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"label"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," use either the ",(0,n.jsx)(t.code,{children:"label"})," property or provide a custom one."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"icon"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," icon to be included in the toggle button."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"icon_position"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," position of the icon inside the toggle button. Set to ",(0,n.jsx)(t.code,{children:"left"})," or ",(0,n.jsx)(t.code,{children:"right"}),". Defaults to ",(0,n.jsx)(t.code,{children:"right"})," if not set."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"icon_size"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," define icon width and height. Defaults to 16px."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"status"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," text with a status message. The style defaults to an error message. You can use ",(0,n.jsx)(t.code,{children:"true"})," to only get the status color, without a message."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"status_state"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," defines the state of the status. Currently, there are two statuses ",(0,n.jsx)(t.code,{children:"[error, info]"}),". Defaults to ",(0,n.jsx)(t.code,{children:"error"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"status_props"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," use an object to define additional FormStatus properties."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"globalStatus"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," the ",(0,n.jsx)(t.a,{href:"/uilib/components/global-status/properties/#configuration-object",children:"configuration"})," used for the target ",(0,n.jsx)(t.a,{href:"/uilib/components/global-status",children:"GlobalStatus"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"suffix"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," text describing the content of the ToggleButton more than the label. You can also send in a React component, so it gets wrapped inside the ToggleButton component."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"skeleton"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," if set to ",(0,n.jsx)(t.code,{children:"true"}),", an overlaying skeleton with animation will be shown."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"/uilib/layout/space/properties",children:"Space"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," spacing properties like ",(0,n.jsx)(t.code,{children:"top"})," or ",(0,n.jsx)(t.code,{children:"bottom"})," are supported."]})]})]})]}),"\n",(0,n.jsxs)(t.h2,{children:[(0,n.jsx)(t.code,{children:"ToggleButton.Group"})," properties"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Properties"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"value"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," defines the pre-selected ToggleButton button. The value has to match the one provided in the ToggleButton button. Use a string value."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"values"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," defines the pre-selected ToggleButton buttons in ",(0,n.jsx)(t.code,{children:"multiselect"})," mode. The values have to match the one provided in the ToggleButton buttons. Use array, either as JS or JSON string."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"multiselect"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," defines if the ToggleButton's should act as a multi-selectable list of toggle buttons. Defaults to ",(0,n.jsx)(t.code,{children:"false"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"layout_direction"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," Define the layout direction of the ToggleButton buttons. Can be either ",(0,n.jsx)(t.code,{children:"column"})," or ",(0,n.jsx)(t.code,{children:"row"}),". Defaults to ",(0,n.jsx)(t.code,{children:"column"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"title"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," the ",(0,n.jsx)(t.code,{children:"title"})," of group, describing it a bit further for accessibility reasons."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"status"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," uses the ",(0,n.jsx)(t.code,{children:"form-status"})," component to show failure messages."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"status_state"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," defines the state of the status. Currently, there are two statuses ",(0,n.jsx)(t.code,{children:"[error, info]"}),". Defaults to ",(0,n.jsx)(t.code,{children:"error"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"status_props"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," use an object to define additional FormStatus properties."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"globalStatus"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," the ",(0,n.jsx)(t.a,{href:"/uilib/components/global-status/properties/#configuration-object",children:"configuration"})," used for the target ",(0,n.jsx)(t.a,{href:"/uilib/components/global-status",children:"GlobalStatus"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"label"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," use either the ",(0,n.jsx)(t.code,{children:"label"})," property or provide a custom one."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"label_direction"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," to define the ",(0,n.jsx)(t.code,{children:"label"})," layout direction on how the next element should be placed on. Can be either ",(0,n.jsx)(t.code,{children:"vertical"})," or ",(0,n.jsx)(t.code,{children:"horizontal"}),". Defaults to ",(0,n.jsx)(t.code,{children:"horizontal"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"label_sr_only"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," use ",(0,n.jsx)(t.code,{children:"true"})," to make the label only readable by screen readers."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"vertical"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," will force both ",(0,n.jsx)(t.code,{children:"direction"})," and ",(0,n.jsx)(t.code,{children:"label_direction"})," to be ",(0,n.jsx)(t.strong,{children:"vertical"})," if set to ",(0,n.jsx)(t.code,{children:"true"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"suffix"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," text describing the content of the ToggleButtonGroup more than the label. You can also send in a React component, so it gets wrapped inside the ToggleButtonGroup component."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"skeleton"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," if set to ",(0,n.jsx)(t.code,{children:"true"}),", an overlaying skeleton with animation will be shown."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.a,{href:"/uilib/layout/space/properties",children:"Space"})}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.em,{children:"(optional)"})," spacing properties like ",(0,n.jsx)(t.code,{children:"top"})," or ",(0,n.jsx)(t.code,{children:"bottom"})," are supported."]})]})]})]})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,i.ah)(),e.components);return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(r,e)})):r(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-toggle-button-properties-mdx-4dd5aad95f7df9467fb9.js.map