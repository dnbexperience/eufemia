"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[35620],{4949:function(t,e,o){o.d(e,{Z:function(){return n},f:function(){return s}});const n={value:{doc:"Defines the pre-selected ToggleButton button. The value has to match the one provided in the ToggleButton button. Use a string value.",type:"string",status:"optional"},values:{doc:"Defines the pre-selected ToggleButton buttons in `multiselect` mode. The values have to match the one provided in the ToggleButton buttons. Use array, either as JS or JSON string.",type:"array",status:"optional"},multiselect:{doc:"Defines if the ToggleButton's should act as a multi-selectable list of toggle buttons. Defaults to `false`.",type:"boolean",status:"optional"},layout_direction:{doc:"Define the layout direction of the ToggleButton buttons. Can be either `column` or `row`. Defaults to `column`.",type:["column","row"],status:"optional"},title:{doc:"The `title` of group, describing it a bit further for accessibility reasons.",type:"string",status:"optional"},status:{doc:"Uses the `form-status` component to show failure messages.",type:["error","info","boolean"],status:"optional"},status_state:{doc:"Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.",type:["error","info"],status:"optional"},status_props:{doc:"Use an object to define additional FormStatus properties.",type:"object",status:"optional"},globalStatus:{doc:"The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).",type:"object",status:"optional"},label:{doc:"Use either the `label` property or provide a custom one.",type:"string",status:"optional"},label_direction:{doc:"To define the `label` layout direction on how the next element should be placed on. Can be either `vertical` or `horizontal`. Defaults to `horizontal`.",type:["vertical","horizontal"],status:"optional"},label_sr_only:{doc:"Use `true` to make the label only readable by screen readers.",type:"boolean",status:"optional"},vertical:{doc:"Will force both `direction` and `label_direction` to be **vertical** if set to `true`.",type:"boolean",status:"optional"},suffix:{doc:"Text describing the content of the ToggleButtonGroup more than the label. You can also send in a React component, so it gets wrapped inside the ToggleButtonGroup component.",type:"string",status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown.",type:"boolean",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},s={on_change:{doc:"will be called once a ToggleButton button changes the state. Returns an object `{ value, values, event }`. <br /><br /> **NB**: `values` is only available if `multiselect` is used / true.",type:"function",status:"optional"}}},59750:function(t,e,o){o.d(e,{A:function(){return s},m:function(){return a}});var n=o(69207);const s={value:{doc:"Defines the `value` as a string. Use it to get the value during the `on_change` event listener callback in the **ToggleButtonGroup**.",type:"string",status:"required"},text:{doc:"The text shown in the ToggleButton.",type:"string",status:"required"},checked:{doc:"Determine whether the ToggleButton is checked or not. The default will be `false`.",type:"boolean",status:"optional"},title:{doc:"The `title` of the input - describing it a bit further for accessibility reasons.",type:"string",status:"optional"},label:{doc:"Use either the `label` property or provide a custom one.",type:"string",status:"optional"},icon:{doc:"Icon to be included in the toggle button.",type:["string","React.ReactNode"],status:"optional"},icon_position:{doc:"Position of the icon inside the toggle button. Set to `left` or `right`. Defaults to `right` if not set.",type:["left","right"],status:"optional"},icon_size:{doc:"Define icon width and height. Defaults to `16px`.",type:"string",status:"optional"},tooltip:n.A.tooltip,size:n.A.size,status:{doc:"Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.",type:["error","info","boolean"],status:"optional"},status_state:{doc:"Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.",type:["error","info"],status:"optional"},status_props:{doc:"Use an object to define additional FormStatus properties.",type:"object",status:"optional"},globalStatus:{doc:"The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).",type:"object",status:"optional"},suffix:{doc:"Text describing the content of the ToggleButton more than the label. You can also send in a React component, so it gets wrapped inside the ToggleButton component.",type:["string","React.ReactNode"],status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown.",type:"boolean",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},a={on_change:{doc:"will be called on state changes made by the user. Returns a boolean and string `{ checked, value, event }`.",type:"function",status:"optional"}}},69094:function(t,e,o){var n=o(23722);e.A=n.A},69207:function(t,e,o){o.d(e,{A:function(){return n},c:function(){return s}});const n={type:{doc:"The type HTML attribute. Defaults to `button` for legacy reasons.",type:["button","reset","submit"],status:"optional"},text:{doc:"The content of the button can be a string or a React Element.",type:["string","React.ReactNode"],status:"optional"},"aria-label":{doc:"Required if there is no text in the button. If `text` and `children` are undefined, setting the `title` property will automatically set `aria-label` with the same value.",type:"string",status:"optional"},title:{doc:"Required if there is no text in the button. If `text` and `children` are undefined, setting the `title` property will automatically set `aria-label` with the same value.",type:"string",status:"optional"},variant:{doc:"Defines the kind of button. Possible values are `primary`, `secondary`, `tertiary` and `signal`. Defaults to `primary` (or `secondary` if icon only).",type:["primary","secondary","tertiary","signal"],status:"optional"},size:{doc:"The size of the button. For now there is `small`, `medium`, `default` and `large`.",type:["small","medium","default","large"],status:"optional"},icon:{doc:'To be included in the button. [Primary Icons](/icons/primary) can be set as a string (e.g. `icon="chevron_right"`), other icons should be set as React elements.',type:["string","React.ReactNode"],status:"optional"},icon_position:{doc:"Position of icon inside the button. Set to `left` or `right`. Tertiary button variant also supports `top`. Defaults to `right` if not set.",type:["left","right","top"],status:"optional"},icon_size:{doc:"Define icon width and height. Defaults to 16px.",type:"string",status:"optional"},href:{doc:"If you want the button to behave as a link. Use with caution! A link should normally visually be a link and not a button.",type:"string",status:"optional"},target:{doc:"When button behaves as a link. Used to specify where to open the linked document, specified by `href`. Possible values are `_self`, `_blank`, `_parent` and `_top`.",type:["_self","_blank","_parent","_top"],status:"optional"},rel:{doc:"When button behaves as a link. Used to specify the relationship between a linked resource and the current document. Examples(non-exhaustive list) of values are `nofollow`, `search`, and `tag`.",type:"string",status:"optional"},to:{doc:"Use this property only if you are using a router Link component as the `element` that uses the `to` property to declare the navigation url.",type:"string",status:"optional"},wrap:{doc:"If set to `true` the button text will wrap in to new lines if the overflow point is reached. Defaults to `false`.",type:"boolean",status:"optional"},stretch:{doc:"Set it to `true` in order to stretch the button to the available space. Defaults to false.",type:"boolean",status:"optional"},bounding:{doc:"Set it to `true` in order to extend the bounding box (above the visual button background). You may also look into the HTML class `dnb-button__bounding` if it needs some CSS customization in order to get the particular button right for your use-case.",type:"boolean",status:"optional"},element:{doc:"Only meant to be used for special use cases. Defaults to `button` or `a` depending if href is set or not.",type:"string",status:"optional"},custom_content:{doc:"If you need to inject completely custom markup (React Element) into the button component. You have then to handle alignment and styling by yourself.",type:"React.ReactNode",status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown.",type:"boolean",status:"optional"},tooltip:{doc:"Provide a string or a React Element to be shown as the tooltip content.",type:["string","React.ReactNode"],status:"optional"},status:{doc:'Set it to either `status="error"` or a text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',type:["error","info","boolean"],status:"optional"},status_state:{doc:"Defines the state of the status. Currently there are two statuses `[error, info]`. Defaults to `error`.",type:["error","info"],status:"optional"},status_props:{doc:"Use an object to define additional FormStatus properties.",type:"object",status:"optional"},globalStatus:{doc:"The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).",type:"object",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},s={on_click:{doc:"will be called on a click event. Returns an object with the native event: `{ event }`.",type:"function",status:"optional"}}},80112:function(t,e,o){o.r(e);var n=o(31085),s=o(71184),a=o(15616),i=o(59750),r=o(4949);function l(t){const e=Object.assign({h2:"h2",code:"code"},(0,s.R)(),t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.h2,{children:[(0,n.jsx)(e.code,{children:"ToggleButton"})," properties"]}),"\n",(0,n.jsx)(a.Ay,{props:i.A}),"\n",(0,n.jsxs)(e.h2,{children:[(0,n.jsx)(e.code,{children:"ToggleButton.Group"})," properties"]}),"\n",(0,n.jsx)(a.Ay,{props:r.Z})]})}e.default=function(t){void 0===t&&(t={});const{wrapper:e}=Object.assign({},(0,s.R)(),t.components);return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(l,t)})):l(t)}},81908:function(t,e,o){var n=o(94515);e.A=n.A},92034:function(t,e,o){var n=o(31666);e.A=n.A}}]);
//# sourceMappingURL=component---src-docs-uilib-components-toggle-button-properties-mdx-7cf3c2b80d449eb42cd0.js.map