"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[12565],{6661:function(t,e,o){o.r(e),o.d(e,{default:function(){return u}});var s=o(52322),n=o(45392),a=o(85179);const i={value:{doc:"Defines the `value` as a string. Use it to get the value during the `on_change` event listener callback in the **ToggleButtonGroup**.",type:"string",status:"required"},text:{doc:"The text shown in the ToggleButton.",type:"string",status:"required"},checked:{doc:"Determine whether the ToggleButton is checked or not. The default will be `false`.",type:"boolean",status:"optional"},title:{doc:"The `title` of the input - describing it a bit further for accessibility reasons.",type:"string",status:"optional"},label:{doc:"Use either the `label` property or provide a custom one.",type:"string",status:"optional"},icon:{doc:"Icon to be included in the toggle button.",type:["string","React.ReactNode"],status:"optional"},icon_position:{doc:"Position of the icon inside the toggle button. Set to `left` or `right`. Defaults to `right` if not set.",type:["left","right"],status:"optional"},icon_size:{doc:"Define icon width and height. Defaults to 16px.",type:"string",status:"optional"},size:o(47559).j.size,status:{doc:"Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.",type:["error","info","boolean"],status:"optional"},status_state:{doc:"Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.",type:["error","info"],status:"optional"},status_props:{doc:"Use an object to define additional FormStatus properties.",type:"object",status:"optional"},globalStatus:{doc:"The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).",type:"object",status:"optional"},suffix:{doc:"Text describing the content of the ToggleButton more than the label. You can also send in a React component, so it gets wrapped inside the ToggleButton component.",type:["string","React.ReactNode"],status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown.",type:"boolean",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},r={value:{doc:"Defines the pre-selected ToggleButton button. The value has to match the one provided in the ToggleButton button. Use a string value.",type:"string",status:"optional"},values:{doc:"Defines the pre-selected ToggleButton buttons in `multiselect` mode. The values have to match the one provided in the ToggleButton buttons. Use array, either as JS or JSON string.",type:"array",status:"optional"},multiselect:{doc:"Defines if the ToggleButton's should act as a multi-selectable list of toggle buttons. Defaults to `false`.",type:"boolean",status:"optional"},layout_direction:{doc:"Define the layout direction of the ToggleButton buttons. Can be either `column` or `row`. Defaults to `column`.",type:["column","row"],status:"optional"},title:{doc:"The `title` of group, describing it a bit further for accessibility reasons.",type:"string",status:"optional"},status:{doc:"Uses the `form-status` component to show failure messages.",type:"string",status:"optional"},status_state:{doc:"Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.",type:["error","info"],status:"optional"},status_props:{doc:"Use an object to define additional FormStatus properties.",type:"object",status:"optional"},globalStatus:{doc:"The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).",type:"object",status:"optional"},label:{doc:"Use either the `label` property or provide a custom one.",type:"string",status:"optional"},label_direction:{doc:"To define the `label` layout direction on how the next element should be placed on. Can be either `vertical` or `horizontal`. Defaults to `horizontal`.",type:["vertical","horizontal"],status:"optional"},label_sr_only:{doc:"Use `true` to make the label only readable by screen readers.",type:"boolean",status:"optional"},vertical:{doc:"Will force both `direction` and `label_direction` to be **vertical** if set to `true`.",type:"boolean",status:"optional"},suffix:{doc:"Text describing the content of the ToggleButtonGroup more than the label. You can also send in a React component, so it gets wrapped inside the ToggleButtonGroup component.",type:"string",status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown.",type:"boolean",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}};function l(t){const e=Object.assign({h2:"h2",code:"code"},(0,n.ah)(),t.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h2,{children:[(0,s.jsx)(e.code,{children:"ToggleButton"})," properties"]}),"\n",(0,s.jsx)(a.ZP,{props:i}),"\n",(0,s.jsxs)(e.h2,{children:[(0,s.jsx)(e.code,{children:"ToggleButton.Group"})," properties"]}),"\n",(0,s.jsx)(a.ZP,{props:r})]})}var u=function(t){void 0===t&&(t={});const{wrapper:e}=Object.assign({},(0,n.ah)(),t.components);return e?(0,s.jsx)(e,Object.assign({},t,{children:(0,s.jsx)(l,t)})):l(t)}},85179:function(t,e,o){o.d(e,{Kw:function(){return b},ZP:function(){return f}});var s=o(70894),n=o(61185),a=o(55560),i=o(41676),r=o(6210),l=o(64223),u=o(37339),c=o(595),p=o(52322);const d={...c.L,p:t=>(0,p.jsx)("span",{...t})},h=(0,s.Z)(a.ZP,{target:"e13h2c840"})({name:"1qdk5x4",styles:"td{white-space:nowrap;}"}),g="var(--color-fire-red)",b=t=>{let{variant:e,strikethrough:o,children:s,style:n={},...a}=t;if(o&&(n.textDecoration="line-through"),"string"==typeof s)switch(e){case"prop":break;case"type":n.color=s.startsWith("'")?g:"var(--color-violet)";case"value":n.color=s.startsWith("'")?g:"undefined"===s||"null"===s?"var(--color-black-55)":"var(--color-success-green)";default:n.background="none",n.boxShadow="none"}return d.code({children:s,style:n,...a})};function f(t){let{props:e,valueType:o="string",camelCase:s,omit:c,showDefaultValue:g=!1}=t;const f=Object.keys(e||{}),v=Object.entries(e||{}).map((t=>{let[e,a]=t;if(!a)return null;const{type:l,defaultValue:h,doc:v,status:x}=a;return c&&c.includes(e)?null:(0,p.jsxs)(i.Z,{children:[(0,p.jsx)(r.Z,{children:(0,p.jsx)(b,{variant:"prop",strikethrough:"deprecated"===x,children:m(s?(0,u.zW)(e):e)})}),(0,p.jsx)(r.Z,{children:(Array.isArray(l)?l:[l]).map((t=>{if("string"==typeof t){if(String(t).includes("{valueType}")){if(Array.isArray(o))return o.map(((t,e)=>(0,p.jsx)(b,{variant:"type",children:t},t+e))).reduce(((t,e)=>(0,p.jsxs)(p.Fragment,{children:[t," ",(0,p.jsx)("br",{})," ",e]})));t=o}return(0,p.jsx)(b,{variant:"type",children:t},t)}})).reduce(((t,e)=>(0,p.jsxs)(p.Fragment,{children:[t," ",(0,p.jsx)("br",{})," ",e]})))}),g&&(0,p.jsx)(r.Z,{children:h?(0,p.jsx)(b,{variant:"value",children:h}):"required"===x&&"REQUIRED"}),(0,p.jsxs)(r.Z,{children:[(!g||"deprecated"===x)&&(0,p.jsxs)("em",{children:["(",x,") "]}),(0,p.jsx)(n.D,{components:d,children:s?y(v,f):v})]})]},e)}));return(0,p.jsx)(a.ZP.ScrollView,{children:(0,p.jsxs)(h,{children:[(0,p.jsx)("thead",{children:(0,p.jsxs)(i.Z,{children:[(0,p.jsx)(l.Z,{children:"Property"}),(0,p.jsx)(l.Z,{children:"Type"}),g&&(0,p.jsx)(l.Z,{children:"Default value"}),(0,p.jsx)(l.Z,{children:"Description"})]})}),(0,p.jsx)("tbody",{children:v})]})})}function y(t,e){return e.forEach((e=>{t=t.replace(new RegExp(e,"g"),(0,u.zW)(e))})),t}function m(t){return t.includes("[")?(0,p.jsx)(n.D,{components:d,children:t}):t}},47559:function(t,e,o){o.d(e,{j:function(){return s}});const s={type:{doc:"The type HTML attribute. Defaults to `button` for legacy reasons.",type:["button","reset","submit"],status:"optional"},text:{doc:"The content of the button can be a string or a React Element.",type:["string","React.ReactNode"],status:"optional"},"aria-label":{doc:"Required if there is no text in the button. If `text` and `children` are undefined, setting the `title` property will automatically set `aria-label` with the same value.",type:"string",status:"optional"},title:{doc:"Required if there is no text in the button. If `text` and `children` are undefined, setting the `title` property will automatically set `aria-label` with the same value.",type:"string",status:"optional"},variant:{doc:"Defines the kind of button. Possible values are `primary`, `secondary`, `tertiary` and `signal`. Defaults to `primary` (or `secondary` if icon only).",type:["primary","secondary","tertiary","signal"],status:"optional"},size:{doc:"The size of the button. For now there is `small`, `medium`, `default` and `large`.",type:["small","medium","default","large"],status:"optional"},icon:{doc:'To be included in the button. [Primary Icons](/icons/primary) can be set as a string (e.g. `icon="chevron_right"`), other icons should be set as React elements.',type:["string","React.ReactNode"],status:"optional"},icon_position:{doc:"Position of icon inside the button. Set to `left` or `right`. Tertiary button variant also supports `top`. Defaults to `right` if not set.",type:["left","right","top"],status:"optional"},icon_size:{doc:"Define icon width and height. Defaults to 16px.",type:"string",status:"optional"},href:{doc:"If you want the button to behave as a link. Use with caution! A link should normally visually be a link and not a button.",type:"string",status:"optional"},target:{doc:"When button behaves as a link. Used to specify where to open the linked document, specified by `href`. Possible values are `_self`, `_blank`, `_parent` and `_top`.",type:["_self","_blank","_parent","_top"],status:"optional"},rel:{doc:"When button behaves as a link. Used to specify the relationship between a linked resource and the current document. Examples(non-exhaustive list) of values are `nofollow`, `search`, and `tag`.",type:"string",status:"optional"},to:{doc:"Use this property only if you are using a router Link component as the `element` that uses the `to` property to declare the navigation url.",type:"string",status:"optional"},wrap:{doc:"If set to `true` the button text will wrap in to new lines if the overflow point is reached. Defaults to `false`.",type:"boolean",status:"optional"},stretch:{doc:"Set it to `true` in order to stretch the button to the available space. Defaults to false.",type:"boolean",status:"optional"},bounding:{doc:"Set it to `true` in order to extend the bounding box (above the visual button background). You may also look into the HTML class `dnb-button__bounding` if it needs some CSS customization in order to get the particular button right for your use-case.",type:"boolean",status:"optional"},element:{doc:"Only meant to be used for special use cases. Defaults to `button` or `a` depending if href is set or not.",type:"string",status:"optional"},custom_content:{doc:"If you need to inject completely custom markup (React Element) into the button component. You have then to handle alignment and styling by yourself.",type:"React.ReactNode",status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown.",type:"boolean",status:"optional"},tooltip:{doc:"Provide a string or a React Element to be shown as the tooltip content.",type:["string","React.ReactNode"],status:"optional"},status:{doc:'Set it to either `status="error"` or a text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',type:["error","info","boolean"],status:"optional"},status_state:{doc:"Defines the state of the status. Currently there are two statuses `[error, info]`. Defaults to `error`.",type:["error","info"],status:"optional"},status_props:{doc:"Use an object to define additional FormStatus properties.",type:"object",status:"optional"},globalStatus:{doc:"The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).",type:"object",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}}},6210:function(t,e,o){var s=o(30600);e.Z=s.Z},64223:function(t,e,o){var s=o(91859);e.Z=s.Z},41676:function(t,e,o){var s=o(35610);e.Z=s.Z}}]);
//# sourceMappingURL=component---src-docs-uilib-components-toggle-button-properties-mdx-b1170b4cab2589e3e06b.js.map