"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[23823],{31119:function(e,n,s){s.r(n),s.d(n,{default:function(){return j}});var l=s(52322),i=s(45392),o=s(2784),t=s(52394);const a=(e,n,s)=>{const l=new File([],e,{type:s});return Object.defineProperty(l,"size",{get(){return n}}),l},d=(e,n)=>{o.useEffect((()=>{e([{file:a("fileName.png",123,"image/png"),...n}])}),[])},r=()=>(0,l.jsx)(t.Z,{"data-visual-test":"upload-file-list",scope:{useMockFiles:d},noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('file-list')\n  if (files.length) {\n    console.log('files', files)\n  }\n  useMockFiles(setFiles, {\n    errorMessage: 'This is no real file!',\n  })\n  return <Upload acceptedFileTypes={['jpg', 'png']} id=\"file-list\" />\n}\nrender(<Component />)\n"}),p=()=>(0,l.jsx)(t.Z,{"data-visual-test":"upload-basic",children:"<Upload acceptedFileTypes={['jpg', 'png']} id=\"upload-basic\" />\n"}),c=()=>(0,l.jsx)(t.Z,{noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-single-file')\n  if (files.length) {\n    console.log('files', files, setFiles)\n  }\n  return (\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-single-file\"\n      filesAmountLimit={1}\n    />\n  )\n}\nrender(<Component />)\n"}),h=()=>(0,l.jsx)(t.Z,{"data-visual-test":"upload-remove-files",noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-remove-files')\n  return (\n    <>\n      <Upload\n        acceptedFileTypes={['jpg', 'png']}\n        id=\"upload-remove-files\"\n      />\n\n      <Button\n        top=\"small\"\n        disabled={files.length < 1}\n        onClick={() => setFiles([])}\n      >\n        Remove selected files\n      </Button>\n\n      <Preview files={files} />\n    </>\n  )\n  function Preview({ files }) {\n    const [images, setImages] = React.useState([])\n    React.useEffect(() => {\n      files.map(({ file }) => {\n        let reader = new FileReader()\n        reader.addEventListener(\n          'load',\n          (event) => {\n            images.push({\n              blob: event.target,\n              file,\n            })\n            setImages([...images])\n            reader = null\n          },\n          false,\n        )\n        reader.readAsDataURL(file)\n      })\n    }, [files])\n    return (\n      <Section aria-label=\"List of chosen images\">\n        {images.map((img, i) => (\n          <Img\n            top\n            key={i}\n            src={img.blob.result}\n            alt={img.file.name}\n            height={100}\n          />\n        ))}\n      </Section>\n    )\n  }\n}\nrender(<Component />)\n"}),u=()=>(0,l.jsx)(t.Z,{scope:{useMockFiles:d},"data-visual-test":"upload-is-loading",noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-is-loading')\n  useMockFiles(setFiles, {\n    isLoading: true,\n  })\n  return (\n    <>\n      <Upload acceptedFileTypes={['jpg', 'png']} id=\"upload-is-loading\" />\n      <ToggleButton\n        top=\"small\"\n        disabled={files.length < 1}\n        on_change={({ checked }) =>\n          setFiles(\n            files.map((fileItem) => {\n              return {\n                ...fileItem,\n                isLoading: checked,\n              }\n            }),\n          )\n        }\n      >\n        Files is loading toggle\n      </ToggleButton>\n    </>\n  )\n}\nrender(<Component />)\n"}),f=()=>(0,l.jsx)(t.Z,{"data-visual-test":"upload-error-message",noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-error-message')\n  return (\n    <>\n      <Upload\n        acceptedFileTypes={['jpg', 'png']}\n        id=\"upload-error-message\"\n      />\n      <ToggleButton\n        top=\"small\"\n        disabled={files.length < 1}\n        on_change={({ checked }) => {\n          setFiles(\n            files.map((fileItem) => {\n              return {\n                ...fileItem,\n                errorMessage: checked ? 'custom error message' : null,\n              }\n            }),\n          )\n        }}\n      >\n        Toggle error message\n      </ToggleButton>\n    </>\n  )\n}\nrender(<Component />)\n"}),g=()=>(0,l.jsx)(t.Z,{noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-accepted-formats')\n  if (files.length) {\n    console.log('files', files, setFiles)\n  }\n  return (\n    <Upload\n      acceptedFileTypes={['png', 'jpg', 'pdf']}\n      id=\"upload-accepted-formats\"\n    />\n  )\n}\nrender(<Component />)\n"});function m(e){const n=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code",a:"a"},(0,i.ah)(),e.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{children:"Demos"}),"\n",(0,l.jsx)(n.h3,{children:"Upload (default)"}),"\n",(0,l.jsx)(p,{}),"\n",(0,l.jsx)(n.h3,{children:"'useUpload' React Hook"}),"\n",(0,l.jsxs)(n.p,{children:["By using the ",(0,l.jsx)(n.code,{children:"Upload.useUpload"})," you can remove or add files or the status displayed in the component."]}),"\n",(0,l.jsxs)(n.p,{children:["You can also use the file blob in combination with the ",(0,l.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/File_API",children:"FileReader"})," API."]}),"\n",(0,l.jsx)(h,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload single file/fixed amount of files"}),"\n",(0,l.jsx)(c,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload loading state"}),"\n",(0,l.jsxs)(n.p,{children:["When uploading the file you can set the loading state of the request using the ",(0,l.jsx)(n.code,{children:"Upload.useUpload"})," hook and passing isLoading to the file that is being uploaded."]}),"\n",(0,l.jsx)(u,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload error message"}),"\n",(0,l.jsxs)(n.p,{children:["The only checks we do currently is for the file size and the file type. These errors are handled by the HTML element ´input´ so they aren't selectable. If you want any other error messages you can use the ",(0,l.jsx)(n.code,{children:"Upload.useUpload"})," the same way as with the loading state."]}),"\n",(0,l.jsx)(f,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload specific accepted file formats"}),"\n",(0,l.jsx)(n.p,{children:"You can pass the file formats as a string array. This will restrict which files that can be selected."}),"\n",(0,l.jsx)(g,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload with prefilled error"}),"\n",(0,l.jsx)(r,{})]})}var j=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,l.jsx)(n,Object.assign({},e,{children:(0,l.jsx)(m,e)})):m(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-upload-demos-mdx-0c4d6eda59aa87cb917f.js.map