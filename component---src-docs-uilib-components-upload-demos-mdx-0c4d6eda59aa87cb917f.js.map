{"version":3,"file":"component---src-docs-uilib-components-upload-demos-mdx-0c4d6eda59aa87cb917f.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/upload/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/upload/demos.mdx"],"sourcesContent":["/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport {\n  Button,\n  ToggleButton,\n  Img,\n  Section,\n  Upload,\n} from '@dnb/eufemia/src'\n\nconst createMockFile = (name: string, size: number, type: string) => {\n  const file = new File([], name, { type })\n  Object.defineProperty(file, 'size', {\n    get() {\n      return size\n    },\n  })\n  return file\n}\n\nconst useMockFiles = (setFiles, extend) => {\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('fileName.png', 123, 'image/png'),\n        ...extend,\n      },\n    ])\n  }, [])\n}\n\nexport const UploadPrefilledFileList = () => (\n  <ComponentBox\n    data-visual-test=\"upload-file-list\"\n    scope={{ useMockFiles }}\n  >\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('file-list')\n\n        if (files.length) {\n          console.log('files', files)\n        }\n\n        useMockFiles(setFiles, { errorMessage: 'This is no real file!' })\n\n        return <Upload acceptedFileTypes={['jpg', 'png']} id=\"file-list\" />\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadBasic = () => (\n  <ComponentBox data-visual-test=\"upload-basic\">\n    <Upload acceptedFileTypes={['jpg', 'png']} id=\"upload-basic\" />\n  </ComponentBox>\n)\n\nexport const UploadSingleFile = () => (\n  <ComponentBox>\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-single-file')\n\n        if (files.length) {\n          console.log('files', files, setFiles)\n        }\n\n        return (\n          <Upload\n            acceptedFileTypes={['jpg', 'png']}\n            id=\"upload-single-file\"\n            filesAmountLimit={1}\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadRemoveFile = () => (\n  <ComponentBox data-visual-test=\"upload-remove-files\">\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-remove-files')\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-remove-files\"\n            />\n\n            <Button\n              top=\"small\"\n              disabled={files.length < 1}\n              onClick={() => setFiles([])}\n            >\n              Remove selected files\n            </Button>\n\n            <Preview files={files} />\n          </>\n        )\n\n        function Preview({ files }) {\n          const [images, setImages] = React.useState([])\n\n          React.useEffect(() => {\n            files.map(({ file }) => {\n              let reader = new FileReader()\n\n              reader.addEventListener(\n                'load',\n                (event) => {\n                  images.push({ blob: event.target, file })\n                  setImages([...images])\n                  reader = null\n                },\n                false,\n              )\n\n              reader.readAsDataURL(file)\n            })\n          }, [files])\n\n          return (\n            <Section aria-label=\"List of chosen images\">\n              {images.map((img, i) => (\n                <Img\n                  top\n                  key={i}\n                  src={img.blob.result}\n                  alt={img.file.name}\n                  height={100}\n                />\n              ))}\n            </Section>\n          )\n        }\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadIsLoading = () => (\n  <ComponentBox\n    scope={{ useMockFiles }}\n    data-visual-test=\"upload-is-loading\"\n  >\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-is-loading')\n\n        useMockFiles(setFiles, { isLoading: true })\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-is-loading\"\n            />\n            <ToggleButton\n              top=\"small\"\n              disabled={files.length < 1}\n              on_change={({ checked }) =>\n                setFiles(\n                  files.map((fileItem) => {\n                    return { ...fileItem, isLoading: checked }\n                  }),\n                )\n              }\n            >\n              Files is loading toggle\n            </ToggleButton>\n          </>\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadErrorMessage = () => (\n  <ComponentBox data-visual-test=\"upload-error-message\">\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload(\n          'upload-error-message',\n        )\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-error-message\"\n            />\n            <ToggleButton\n              top=\"small\"\n              disabled={files.length < 1}\n              on_change={({ checked }) => {\n                setFiles(\n                  files.map((fileItem) => {\n                    return {\n                      ...fileItem,\n                      errorMessage: checked\n                        ? 'custom error message'\n                        : null,\n                    }\n                  }),\n                )\n              }}\n            >\n              Toggle error message\n            </ToggleButton>\n          </>\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadAcceptedFormats = () => (\n  <ComponentBox>\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload(\n          'upload-accepted-formats',\n        )\n\n        if (files.length) {\n          console.log('files', files, setFiles)\n        }\n\n        return (\n          <Upload\n            acceptedFileTypes={['png', 'jpg', 'pdf']}\n            id=\"upload-accepted-formats\"\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {UploadBasic, UploadPrefilledFileList, UploadRemoveFile, UploadSingleFile, UploadIsLoading, UploadErrorMessage, UploadAcceptedFormats} from 'Docs/uilib/components/upload/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload (default)\"\n    }), \"\\n\", _jsx(UploadBasic, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"'useUpload' React Hook\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By using the \", _jsx(_components.code, {\n        children: \"Upload.useUpload\"\n      }), \" you can remove or add files or the status displayed in the component.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also use the file blob in combination with the \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/API/File_API\",\n        children: \"FileReader\"\n      }), \" API.\"]\n    }), \"\\n\", _jsx(UploadRemoveFile, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload single file/fixed amount of files\"\n    }), \"\\n\", _jsx(UploadSingleFile, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload loading state\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When uploading the file you can set the loading state of the request using the \", _jsx(_components.code, {\n        children: \"Upload.useUpload\"\n      }), \" hook and passing isLoading to the file that is being uploaded.\"]\n    }), \"\\n\", _jsx(UploadIsLoading, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload error message\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The only checks we do currently is for the file size and the file type. These errors are handled by the HTML element ´input´ so they aren't selectable. If you want any other error messages you can use the \", _jsx(_components.code, {\n        children: \"Upload.useUpload\"\n      }), \" the same way as with the loading state.\"]\n    }), \"\\n\", _jsx(UploadErrorMessage, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload specific accepted file formats\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can pass the file formats as a string array. This will restrict which files that can be selected.\"\n    }), \"\\n\", _jsx(UploadAcceptedFormats, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload with prefilled error\"\n    }), \"\\n\", _jsx(UploadPrefilledFileList, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["createMockFile","name","size","type","file","File","Object","defineProperty","get","useMockFiles","setFiles","extend","React","UploadPrefilledFileList","_jsx","ComponentBox","scope","noInline","children","UploadBasic","UploadSingleFile","UploadRemoveFile","UploadIsLoading","UploadErrorMessage","UploadAcceptedFormats","_createMdxContent","props","_components","assign","h2","h3","p","code","a","_provideComponents","components","_jsxs","_Fragment","href","wrapper","MDXLayout"],"sourceRoot":""}