"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[23823],{31119:function(e,n,s){s.r(n),s.d(n,{default:function(){return x}});var l=s(52322),i=s(45392),o=s(2784),t=s(64368);const a=(e,n,s)=>{const l=new File([],e,{type:s});return Object.defineProperty(l,"size",{get(){return n}}),l},r=(e,n)=>{o.useEffect((()=>{e([{file:a("fileName.png",123,"image/png"),...n}])}),[])},d=()=>(0,l.jsx)(t.Z,{"data-visual-test":"upload-file-list",scope:{useMockFiles:r},noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('file-list')\n  if (files.length) {\n    console.log('files', files)\n  }\n  useMockFiles(setFiles, {\n    errorMessage: 'This is no real file!',\n  })\n  return <Upload acceptedFileTypes={['jpg', 'png']} id=\"file-list\" />\n}\nrender(<Component />)\n"}),p=()=>(0,l.jsx)(t.Z,{"data-visual-test":"upload-basic",children:"<Upload acceptedFileTypes={['jpg', 'png']} id=\"upload-basic\" />\n"}),c=()=>(0,l.jsx)(t.Z,{noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-single-file')\n  if (files.length) {\n    console.log('files', files, setFiles)\n  }\n  return (\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-single-file\"\n      filesAmountLimit={1}\n    />\n  )\n}\nrender(<Component />)\n"}),f=()=>(0,l.jsx)(t.Z,{"data-visual-test":"upload-remove-files",noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-remove-files')\n  return (\n    <>\n      <Upload\n        acceptedFileTypes={['jpg', 'png']}\n        id=\"upload-remove-files\"\n      />\n\n      <Button\n        top=\"small\"\n        disabled={files.length < 1}\n        onClick={() => setFiles([])}\n      >\n        Remove selected files\n      </Button>\n\n      <Preview files={files} />\n    </>\n  )\n  function Preview({ files }) {\n    const [images, setImages] = React.useState([])\n    React.useEffect(() => {\n      files.map(({ file }) => {\n        let reader = new FileReader()\n        reader.addEventListener(\n          'load',\n          (event) => {\n            images.push({\n              blob: event.target,\n              file,\n            })\n            setImages([...images])\n            reader = null\n          },\n          false,\n        )\n        reader.readAsDataURL(file)\n      })\n    }, [files])\n    return (\n      <Section aria-label=\"List of chosen images\">\n        {images.map((img, i) => (\n          <Img\n            top\n            key={i}\n            src={img.blob.result}\n            alt={img.file.name}\n            height={100}\n          />\n        ))}\n      </Section>\n    )\n  }\n}\nrender(<Component />)\n"}),h=()=>(0,l.jsx)(t.Z,{scope:{useMockFiles:r},"data-visual-test":"upload-is-loading",noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-is-loading')\n  useMockFiles(setFiles, {\n    isLoading: true,\n  })\n  return (\n    <>\n      <Upload acceptedFileTypes={['jpg', 'png']} id=\"upload-is-loading\" />\n      <ToggleButton\n        top=\"small\"\n        disabled={files.length < 1}\n        on_change={({ checked }) =>\n          setFiles(\n            files.map((fileItem) => {\n              return {\n                ...fileItem,\n                isLoading: checked,\n              }\n            }),\n          )\n        }\n      >\n        Files is loading toggle\n      </ToggleButton>\n    </>\n  )\n}\nrender(<Component />)\n"}),u=()=>(0,l.jsx)(t.Z,{"data-visual-test":"upload-error-message",noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-error-message')\n  return (\n    <>\n      <Upload\n        acceptedFileTypes={['jpg', 'png']}\n        id=\"upload-error-message\"\n      />\n      <ToggleButton\n        top=\"small\"\n        disabled={files.length < 1}\n        on_change={({ checked }) => {\n          setFiles(\n            files.map((fileItem) => {\n              return {\n                ...fileItem,\n                errorMessage: checked ? 'custom error message' : null,\n              }\n            }),\n          )\n        }}\n      >\n        Toggle error message\n      </ToggleButton>\n    </>\n  )\n}\nrender(<Component />)\n"}),g=()=>(0,l.jsx)(t.Z,{noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-accepted-formats')\n  if (files.length) {\n    console.log('files', files, setFiles)\n  }\n  return (\n    <Upload\n      acceptedFileTypes={['png', 'jpg', 'pdf']}\n      id=\"upload-accepted-formats\"\n    />\n  )\n}\nrender(<Component />)\n"}),m=()=>(0,l.jsx)(t.Z,{hideCode:!0,noInline:!0,children:"const Component = () => {\n  const verifyFileMaxSize = (file: File) => {\n    const errorMapByType = {\n      ['application/pdf']: {\n        fileMaxSizeMb: 4,\n        errorMessage:\n          'Filen du prøver å laste opp er for stor, vi støtter ikke PDF-filer større enn 4 MB.',\n      },\n      ['image/jpeg']: {\n        fileMaxSizeMb: 1,\n        errorMessage:\n          'Filen du prøver å laste opp er for stor, vi støtter ikke JPG-filer større enn 1 MB.',\n      },\n    }\n    const BYTES_IN_A_MEGA_BYTE = 1048576\n    const errorObj = errorMapByType[file.type]\n    if (\n      errorObj &&\n      // Converts from b (binary) to MB (decimal)\n      file.size / BYTES_IN_A_MEGA_BYTE > errorObj.fileMaxSizeMb\n    ) {\n      return errorObj.errorMessage\n    }\n    return null\n  }\n  const { files, setFiles } = Upload.useUpload(\n    'upload-disabled-file-max-size',\n  )\n  if (files.length) {\n    console.log('files', files, setFiles)\n  }\n  return (\n    <Upload\n      text=\"Dra & slipp eller velg hvilke filer du vil laste opp. PDF-filer kan ikke være større enn 4 MB og JPG-filer ikke større enn 1 MB.\"\n      acceptedFileTypes={['jpg', 'pdf']}\n      id=\"upload-disabled-file-max-size\"\n      fileMaxSize={false}\n      onChange={({ files }) => {\n        setFiles(\n          files.map((fileItem) => {\n            return {\n              ...fileItem,\n              errorMessage: verifyFileMaxSize(fileItem.file),\n            }\n          }),\n        )\n      }}\n    />\n  )\n}\nrender(<Component />)\n"});function j(e){const n=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code",a:"a"},(0,i.ah)(),e.components),{VisibleWhenNotVisualTest:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("VisibleWhenNotVisualTest",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{children:"Demos"}),"\n",(0,l.jsx)(n.h3,{children:"Upload (default)"}),"\n",(0,l.jsx)(p,{}),"\n",(0,l.jsx)(n.h3,{children:"'useUpload' React Hook"}),"\n",(0,l.jsxs)(n.p,{children:["By using the ",(0,l.jsx)(n.code,{children:"Upload.useUpload"})," you can remove or add files or the status displayed in the component."]}),"\n",(0,l.jsxs)(n.p,{children:["You can also use the file blob in combination with the ",(0,l.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/File_API",children:"FileReader"})," API."]}),"\n",(0,l.jsx)(f,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload single file/fixed amount of files"}),"\n",(0,l.jsx)(c,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload loading state"}),"\n",(0,l.jsxs)(n.p,{children:["When uploading the file you can set the loading state of the request using the ",(0,l.jsx)(n.code,{children:"Upload.useUpload"})," hook and passing ",(0,l.jsx)(n.code,{children:"isLoading"})," to the file that is being uploaded."]}),"\n",(0,l.jsx)(h,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload error message"}),"\n",(0,l.jsxs)(n.p,{children:["The only file verification the Upload component does is for the file size and the file type. These errors are handled by the HTML element ",(0,l.jsx)(n.code,{children:"input"})," so they aren't selectable. If you want any other error messages you can use the ",(0,l.jsx)(n.code,{children:"Upload.useUpload"})," hook the same way as with the loading state."]}),"\n",(0,l.jsx)(u,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload specific accepted file formats"}),"\n",(0,l.jsx)(n.p,{children:"You can pass the file formats as a string array. This will restrict which files that can be selected."}),"\n",(0,l.jsx)(g,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload with prefilled error"}),"\n",(0,l.jsx)(d,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload without file max size, and custom error handling of file size"}),"\n",(0,l.jsx)(n.p,{children:"You can disable the file max size, which will deactivate all file size verifications in the Upload component.\nThis can also be used to manually implement more complex file max size verifications, like file max size based on file type, see the example below:"}),"\n",(0,l.jsx)(s,{children:(0,l.jsx)(m,{})})]})}var x=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,l.jsx)(n,Object.assign({},e,{children:(0,l.jsx)(j,e)})):j(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-upload-demos-mdx-3bec4b7cc581916b3fd4.js.map