{"version":3,"file":"component---src-docs-uilib-components-upload-demos-mdx-eac654ec7547f9eeb89a.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/upload/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/upload/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/SubmitIndicator/Examples.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {UploadBasic, UploadPrefilledFileList, UploadRemoveFile, UploadSingleFile, UploadIsLoading, UploadErrorMessage, UploadAcceptedFormats, UploadDisabledFileMaxSize, UploadFileMaxSizeBasedOnFileType, UploadFileMaxSizeBasedOnFileTypeDisabled, UploadNoTitleNoText, UploadOnFileDeleteAsync, UploadOnFileClick} from 'Docs/uilib/components/upload/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    code: \"code\",\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {VisibleWhenNotVisualTest} = _components;\n  if (!VisibleWhenNotVisualTest) _missingMdxReference(\"VisibleWhenNotVisualTest\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload (default)\"\n    }), \"\\n\", _jsx(UploadBasic, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [_jsx(_components.code, {\n        children: \"useUpload\"\n      }), \" React Hook\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By using the \", _jsx(_components.code, {\n        children: \"Upload.useUpload\"\n      }), \" you can remove or add files or the status displayed in the component.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also use the file blob in combination with the \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/API/File_API\",\n        children: \"FileReader\"\n      }), \" API.\"]\n    }), \"\\n\", _jsx(UploadRemoveFile, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload single file/fixed amount of files\"\n    }), \"\\n\", _jsx(UploadSingleFile, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload loading state\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When uploading the file you can set the loading state of the request using the \", _jsx(_components.code, {\n        children: \"Upload.useUpload\"\n      }), \" hook and passing \", _jsx(_components.code, {\n        children: \"isLoading\"\n      }), \" to the file that is being uploaded.\"]\n    }), \"\\n\", _jsx(UploadIsLoading, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload error message\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The only file verification the Upload component does is for the file size and the file type. These errors are handled by the HTML element \", _jsx(_components.code, {\n        children: \"input\"\n      }), \" so they aren't selectable. If you want any other error messages you can use the \", _jsx(_components.code, {\n        children: \"Upload.useUpload\"\n      }), \" hook the same way as with the loading state.\"]\n    }), \"\\n\", _jsx(UploadErrorMessage, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload specific accepted file formats\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can pass the file formats as a string array. This will restrict which files that can be selected.\"\n    }), \"\\n\", _jsx(UploadAcceptedFormats, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload with prefilled error\"\n    }), \"\\n\", _jsx(UploadPrefilledFileList, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload with file max size based on file type\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The table of accepted file types is sorted descending by \", _jsx(_components.code, {\n        children: \"maxFileSize\"\n      }), \". Multiple \", _jsx(_components.code, {\n        children: \"fileType\"\n      }), \" for the same \", _jsx(_components.code, {\n        children: \"maxFileSize\"\n      }), \" is sorted alphabetically ascending by \", _jsx(_components.code, {\n        children: \"fileType\"\n      }), \".\"]\n    }), \"\\n\", _jsx(UploadFileMaxSizeBasedOnFileType, {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"To disable \", _jsx(_components.code, {\n        children: \"maxFileSize\"\n      }), \" Use either \", _jsx(_components.code, {\n        children: \"0\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"false\"\n      }), \". If \", _jsx(_components.code, {\n        children: \"maxFileSize\"\n      }), \" is not provided, it defaults to the value of \", _jsx(_components.a, {\n        href: \"/uilib/components/upload/properties/#properties\",\n        children: \"Uploads\"\n      }), \" \", _jsx(_components.code, {\n        children: \"fileMaxSize\"\n      }), \" which defaults to 5 MB.\"]\n    }), \"\\n\", _jsx(VisibleWhenNotVisualTest, {\n      children: _jsx(UploadFileMaxSizeBasedOnFileTypeDisabled, {})\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload without file max size\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can disable the file max size, which will deactivate all file size verifications in the Upload component.\\nThis can also be used to manually implement more complex file max size verifications.\"\n    }), \"\\n\", _jsx(UploadDisabledFileMaxSize, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload without title and text\"\n    }), \"\\n\", _jsx(UploadNoTitleNoText, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Upload with async \", _jsx(_components.code, {\n        children: \"onFileDelete\"\n      })]\n    }), \"\\n\", _jsx(UploadOnFileDeleteAsync, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Upload with \", _jsx(_components.code, {\n        children: \"onFileClick\"\n      })]\n    }), \"\\n\", _jsx(UploadOnFileClick, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport {\n  Button,\n  ToggleButton,\n  Img,\n  Section,\n  Upload,\n} from '@dnb/eufemia/src'\nimport { createRequest } from '../../extensions/forms/Form/SubmitIndicator/Examples'\n\nexport function createMockFile(name: string, size: number, type: string) {\n  const file = new File([], name, { type })\n  Object.defineProperty(file, 'size', {\n    get() {\n      return size\n    },\n  })\n  return file\n}\n\nexport const UploadPrefilledFileList = () => (\n  <ComponentBox\n    data-visual-test=\"upload-file-list\"\n    scope={{ createMockFile }}\n  >\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('file-list')\n\n        if (files.length) {\n          console.log('files', files)\n        }\n\n        React.useEffect(() => {\n          setFiles([\n            {\n              file: createMockFile('fileName.png', 123, 'image/png'),\n              errorMessage: 'This is no real file!',\n            },\n          ])\n        }, [setFiles])\n\n        return <Upload acceptedFileTypes={['jpg', 'png']} id=\"file-list\" />\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadBasic = () => (\n  <ComponentBox data-visual-test=\"upload-basic\">\n    <Upload acceptedFileTypes={['jpg', 'png']} id=\"upload-basic\" />\n  </ComponentBox>\n)\n\nexport const UploadSingleFile = () => (\n  <ComponentBox>\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-single-file')\n\n        if (files.length) {\n          console.log('files', files, setFiles)\n        }\n\n        return (\n          <Upload\n            acceptedFileTypes={['jpg', 'png']}\n            id=\"upload-single-file\"\n            filesAmountLimit={1}\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadRemoveFile = () => (\n  <ComponentBox data-visual-test=\"upload-remove-files\">\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-remove-files')\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-remove-files\"\n            />\n\n            <Button\n              top=\"small\"\n              disabled={files.length < 1}\n              onClick={() => setFiles([])}\n            >\n              Remove selected files\n            </Button>\n\n            <Preview files={files} />\n          </>\n        )\n\n        function Preview({ files }) {\n          const [images, setImages] = React.useState([])\n\n          React.useEffect(() => {\n            files.map(({ file }) => {\n              let reader = new FileReader()\n\n              reader.addEventListener(\n                'load',\n                (event) => {\n                  images.push({ blob: event.target, file })\n                  setImages([...images])\n                  reader = null\n                },\n                false,\n              )\n\n              reader.readAsDataURL(file)\n            })\n          }, [files, images])\n\n          return (\n            <Section aria-label=\"List of chosen images\">\n              {images.map((img, i) => (\n                <Img\n                  top\n                  key={i}\n                  src={img.blob.result}\n                  alt={img.file.name}\n                  height={100}\n                />\n              ))}\n            </Section>\n          )\n        }\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadIsLoading = () => (\n  <ComponentBox\n    data-visual-test=\"upload-is-loading\"\n    scope={{ createMockFile }}\n  >\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-is-loading')\n\n        React.useEffect(() => {\n          setFiles([\n            {\n              file: createMockFile('fileName.png', 123, 'image/png'),\n              isLoading: true,\n            },\n          ])\n        }, [])\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-is-loading\"\n            />\n            <ToggleButton\n              top=\"small\"\n              disabled={files.length < 1}\n              on_change={({ checked }) =>\n                setFiles(\n                  files.map((fileItem) => {\n                    return { ...fileItem, isLoading: checked }\n                  }),\n                )\n              }\n            >\n              Files is loading toggle\n            </ToggleButton>\n          </>\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadErrorMessage = () => (\n  <ComponentBox data-visual-test=\"upload-error-message\">\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload(\n          'upload-error-message',\n        )\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-error-message\"\n            />\n            <ToggleButton\n              top=\"small\"\n              disabled={files.length < 1}\n              on_change={({ checked }) => {\n                setFiles(\n                  files.map((fileItem) => {\n                    return {\n                      ...fileItem,\n                      errorMessage: checked\n                        ? 'custom error message'\n                        : null,\n                    }\n                  }),\n                )\n              }}\n            >\n              Toggle error message\n            </ToggleButton>\n          </>\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadAcceptedFormats = () => (\n  <ComponentBox>\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload(\n          'upload-accepted-formats',\n        )\n\n        if (files.length) {\n          console.log('files', files, setFiles)\n        }\n\n        return (\n          <Upload\n            acceptedFileTypes={['png', 'jpg', 'pdf']}\n            id=\"upload-accepted-formats\"\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadFileMaxSizeBasedOnFileType = () => (\n  <ComponentBox\n    data-visual-test=\"upload-file-max-size-based-on-file-format\"\n    hideCode\n  >\n    <Upload\n      id=\"upload-file-max-size-based-on-file-format\"\n      fileMaxSize={99}\n      acceptedFileTypes={[\n        { fileType: 'jpg', fileMaxSize: 1 },\n        { fileType: 'doc', fileMaxSize: 1 },\n        { fileType: 'svg', fileMaxSize: 1 },\n        { fileType: 'gif', fileMaxSize: 1 },\n        { fileType: 'doc', fileMaxSize: 4 },\n        { fileType: 'docx', fileMaxSize: 4 },\n        { fileType: 'tiff', fileMaxSize: 5 },\n        { fileType: 'tif', fileMaxSize: 5 },\n        { fileType: 'html', fileMaxSize: 6 },\n        { fileType: 'htm', fileMaxSize: 6 },\n        { fileType: 'xls', fileMaxSize: 7 },\n        { fileType: 'xlsx', fileMaxSize: 7 },\n        { fileType: 'odt' },\n        { fileType: 'pdf' },\n        { fileType: 'text', fileMaxSize: false },\n        { fileType: 'txt', fileMaxSize: 0 },\n        { fileType: 'zip', fileMaxSize: 99 },\n      ]}\n    />\n  </ComponentBox>\n)\n\nexport const UploadFileMaxSizeBasedOnFileTypeDisabled = () => (\n  <ComponentBox>\n    <Upload\n      id=\"upload-file-max-size-based-on-file-format-disabled\"\n      acceptedFileTypes={[\n        { fileType: 'jpg', fileMaxSize: 0 },\n        { fileType: 'doc', fileMaxSize: false },\n        { fileType: 'svg' },\n      ]}\n    />\n  </ComponentBox>\n)\n\nexport const UploadDisabledFileMaxSize = () => (\n  <ComponentBox data-visual-test=\"upload-disabled-file-max-size\">\n    <Upload\n      acceptedFileTypes={['jpg', 'pdf']}\n      id=\"upload-disabled-file-max-size\"\n      fileMaxSize={false}\n    />\n  </ComponentBox>\n)\n\nexport const UploadNoTitleNoText = () => (\n  <ComponentBox data-visual-test=\"upload-no-title-no-text\">\n    <Upload\n      title={false}\n      text={false}\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-no-title-no-text\"\n    />\n  </ComponentBox>\n)\n\nexport const UploadOnFileDeleteAsync = () => (\n  <ComponentBox scope={{ createRequest }}>\n    {() => {\n      async function mockAsyncFileRemoval({ fileItem }) {\n        const request = createRequest()\n        console.log('making API request to remove: ' + fileItem.file.name)\n        await request(3000) // Simulate a request\n        const mockResponse = {\n          successful_removal: Math.random() < 0.5, // Randomly fails to remove the file\n        }\n        if (!mockResponse.successful_removal) {\n          throw new Error('Unable to remove this file')\n        }\n      }\n\n      return (\n        <Upload\n          onFileDelete={mockAsyncFileRemoval}\n          acceptedFileTypes={['jpg', 'png']}\n          id=\"upload-on-file-delete\"\n        />\n      )\n    }}\n  </ComponentBox>\n)\n\nexport const UploadOnFileClick = () => (\n  <ComponentBox\n    scope={{ createMockFile, createRequest }}\n    data-visual-test=\"upload-on-file-click\"\n  >\n    {() => {\n      const Component = () => {\n        const { setFiles } = Upload.useUpload('upload-on-file-click')\n\n        React.useEffect(() => {\n          setFiles([\n            {\n              file: createMockFile('1501870.jpg', 123, 'image/png'),\n            },\n            {\n              file: createMockFile(\n                'file-name-that-is-very-long-and-has-letters.png',\n                123,\n                'image/png',\n              ),\n            },\n          ])\n        }, [setFiles])\n\n        async function mockAsyncFileFetching({ fileItem }) {\n          const request = createRequest()\n          console.log(\n            'making API request to fetch the url of the file: ' +\n              fileItem.file.name,\n          )\n          await request(2000) // Simulate a request\n          window.open(\n            'https://eufemia.dnb.no/images/avatars/' + fileItem.file.name,\n            '_blank',\n          )\n        }\n\n        return (\n          <Upload\n            acceptedFileTypes={['jpg', 'png']}\n            id=\"upload-on-file-click\"\n            onFileClick={mockAsyncFileFetching}\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n","import { Button, Flex, FormLabel } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, FieldBlock, Form } from '@dnb/eufemia/src/extensions/forms'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      <Form.SubmitIndicator state=\"pending\" />\n    </ComponentBox>\n  )\n}\n\nexport const AsyncSubmitBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay}>\n            <Form.Card>\n              <Field.String path=\"/myField\" label=\"Short label\" />\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Form.Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AsyncChangeBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay} onChange={delay}>\n            <Form.Card>\n              <Field.String\n                path=\"/myField1\"\n                label=\"Label (with async validation)\"\n                placeholder=\"Write something ...\"\n                onChangeValidator={delay}\n              />\n              <FieldBlock width=\"medium\">\n                <Field.String\n                  path=\"/myField2\"\n                  width=\"stretch\"\n                  label=\"This is a long label\"\n                />\n              </FieldBlock>\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Form.Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\ntype CreateRequestReturn = Promise<{ hasError: boolean; cancel?: boolean }>\n\nexport const createRequest = () => {\n  let timeout: NodeJS.Timeout | null\n  let resolvePromise: ((value?: unknown) => void) | undefined\n\n  const fn = (t: number): CreateRequestReturn => {\n    return new Promise((resolve) => {\n      resolvePromise = resolve\n      timeout = setTimeout(() => {\n        resolve({ hasError: false })\n      }, t)\n    })\n  }\n\n  fn.cancel = () => {\n    resolvePromise?.({ hasError: true })\n    clearTimeout(timeout)\n    timeout = null\n  }\n\n  return fn\n}\n\nexport const WithinOtherComponents = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Flex.Horizontal align=\"center\">\n          <Form.SubmitButton showIndicator />\n          <Button variant=\"secondary\" icon=\"chevron_right\">\n            Secondary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <Button variant=\"tertiary\">\n            Tertiary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <FormLabel>\n            Label\n            <Form.SubmitIndicator state=\"pending\" />\n          </FormLabel>\n        </Flex.Horizontal>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","h3","code","p","a","_provideComponents","components","VisibleWhenNotVisualTest","id","component","Error","_missingMdxReference","_jsxs","_Fragment","children","_jsx","UploadBasic","href","UploadRemoveFile","UploadSingleFile","UploadIsLoading","UploadErrorMessage","UploadAcceptedFormats","UploadPrefilledFileList","UploadFileMaxSizeBasedOnFileType","UploadFileMaxSizeBasedOnFileTypeDisabled","UploadDisabledFileMaxSize","UploadNoTitleNoText","UploadOnFileDeleteAsync","UploadOnFileClick","wrapper","MDXLayout","createMockFile","name","size","type","file","File","defineProperty","get","ComponentBox","scope","noInline","hideCode","createRequest","Default","AsyncSubmitBehavior","debounceAsync","AsyncChangeBehavior","timeout","resolvePromise","fn","t","Promise","resolve","setTimeout","hasError","cancel","_resolvePromise","clearTimeout","WithinOtherComponents"],"sourceRoot":""}