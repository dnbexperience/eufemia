"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[23823],{31119:function(e,n,i){i.r(n),i.d(n,{default:function(){return T}});var l=i(52322),s=i(45392),o=i(2784),a=i(19459);const t=(e,n,i)=>{const l=new File([],e,{type:i});return Object.defineProperty(l,"size",{get(){return n}}),l},d=(e,n)=>{o.useEffect((()=>{e([{file:t("fileName.png",123,"image/png"),...n}])}),[])},p=()=>(0,l.jsx)(a.Z,{"data-visual-test":"upload-file-list",scope:{useMockFiles:d},noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('file-list')\n  if (files.length) {\n    console.log('files', files)\n  }\n  useMockFiles(setFiles, {\n    errorMessage: 'This is no real file!',\n  })\n  return <Upload acceptedFileTypes={['jpg', 'png']} id=\"file-list\" />\n}\nrender(<Component />)\n"}),r=()=>(0,l.jsx)(a.Z,{"data-visual-test":"upload-basic",children:"<Upload acceptedFileTypes={['jpg', 'png']} id=\"upload-basic\" />\n"}),c=()=>(0,l.jsx)(a.Z,{noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-single-file')\n  if (files.length) {\n    console.log('files', files, setFiles)\n  }\n  return (\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-single-file\"\n      filesAmountLimit={1}\n    />\n  )\n}\nrender(<Component />)\n"}),f=()=>(0,l.jsx)(a.Z,{"data-visual-test":"upload-remove-files",noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-remove-files')\n  return (\n    <>\n      <Upload\n        acceptedFileTypes={['jpg', 'png']}\n        id=\"upload-remove-files\"\n      />\n\n      <Button\n        top=\"small\"\n        disabled={files.length < 1}\n        onClick={() => setFiles([])}\n      >\n        Remove selected files\n      </Button>\n\n      <Preview files={files} />\n    </>\n  )\n  function Preview({ files }) {\n    const [images, setImages] = React.useState([])\n    React.useEffect(() => {\n      files.map(({ file }) => {\n        let reader = new FileReader()\n        reader.addEventListener(\n          'load',\n          (event) => {\n            images.push({\n              blob: event.target,\n              file,\n            })\n            setImages([...images])\n            reader = null\n          },\n          false,\n        )\n        reader.readAsDataURL(file)\n      })\n    }, [files])\n    return (\n      <Section aria-label=\"List of chosen images\">\n        {images.map((img, i) => (\n          <Img\n            top\n            key={i}\n            src={img.blob.result}\n            alt={img.file.name}\n            height={100}\n          />\n        ))}\n      </Section>\n    )\n  }\n}\nrender(<Component />)\n"}),h=()=>(0,l.jsx)(a.Z,{scope:{useMockFiles:d},"data-visual-test":"upload-is-loading",noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-is-loading')\n  useMockFiles(setFiles, {\n    isLoading: true,\n  })\n  return (\n    <>\n      <Upload acceptedFileTypes={['jpg', 'png']} id=\"upload-is-loading\" />\n      <ToggleButton\n        top=\"small\"\n        disabled={files.length < 1}\n        on_change={({ checked }) =>\n          setFiles(\n            files.map((fileItem) => {\n              return {\n                ...fileItem,\n                isLoading: checked,\n              }\n            }),\n          )\n        }\n      >\n        Files is loading toggle\n      </ToggleButton>\n    </>\n  )\n}\nrender(<Component />)\n"}),u=()=>(0,l.jsx)(a.Z,{"data-visual-test":"upload-error-message",noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-error-message')\n  return (\n    <>\n      <Upload\n        acceptedFileTypes={['jpg', 'png']}\n        id=\"upload-error-message\"\n      />\n      <ToggleButton\n        top=\"small\"\n        disabled={files.length < 1}\n        on_change={({ checked }) => {\n          setFiles(\n            files.map((fileItem) => {\n              return {\n                ...fileItem,\n                errorMessage: checked ? 'custom error message' : null,\n              }\n            }),\n          )\n        }}\n      >\n        Toggle error message\n      </ToggleButton>\n    </>\n  )\n}\nrender(<Component />)\n"}),x=()=>(0,l.jsx)(a.Z,{noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-accepted-formats')\n  if (files.length) {\n    console.log('files', files, setFiles)\n  }\n  return (\n    <Upload\n      acceptedFileTypes={['png', 'jpg', 'pdf']}\n      id=\"upload-accepted-formats\"\n    />\n  )\n}\nrender(<Component />)\n"}),g=()=>(0,l.jsx)(a.Z,{"data-visual-test":"upload-file-max-size-based-on-file-format",hideCode:!0,children:"<Upload\n  id=\"upload-file-max-size-based-on-file-format\"\n  fileMaxSize={99}\n  acceptedFileTypes={[\n    {\n      fileType: 'jpg',\n      fileMaxSize: 1,\n    },\n    {\n      fileType: 'doc',\n      fileMaxSize: 1,\n    },\n    {\n      fileType: 'svg',\n      fileMaxSize: 1,\n    },\n    {\n      fileType: 'gif',\n      fileMaxSize: 1,\n    },\n    {\n      fileType: 'doc',\n      fileMaxSize: 4,\n    },\n    {\n      fileType: 'docx',\n      fileMaxSize: 4,\n    },\n    {\n      fileType: 'tiff',\n      fileMaxSize: 5,\n    },\n    {\n      fileType: 'tif',\n      fileMaxSize: 5,\n    },\n    {\n      fileType: 'html',\n      fileMaxSize: 6,\n    },\n    {\n      fileType: 'htm',\n      fileMaxSize: 6,\n    },\n    {\n      fileType: 'xls',\n      fileMaxSize: 7,\n    },\n    {\n      fileType: 'xlsx',\n      fileMaxSize: 7,\n    },\n    {\n      fileType: 'odt',\n    },\n    {\n      fileType: 'pdf',\n    },\n    {\n      fileType: 'text',\n      fileMaxSize: false,\n    },\n    {\n      fileType: 'txt',\n      fileMaxSize: 0,\n    },\n    {\n      fileType: 'zip',\n      fileMaxSize: 99,\n    },\n  ]}\n/>\n"}),m=()=>(0,l.jsx)(a.Z,{children:"<Upload\n  id=\"upload-file-max-size-based-on-file-format-disabled\"\n  acceptedFileTypes={[\n    {\n      fileType: 'jpg',\n      fileMaxSize: 0,\n    },\n    {\n      fileType: 'doc',\n      fileMaxSize: false,\n    },\n    {\n      fileType: 'svg',\n    },\n  ]}\n/>\n"}),j=()=>(0,l.jsx)(a.Z,{children:"<Upload\n  acceptedFileTypes={['jpg', 'pdf']}\n  id=\"upload-disabled-file-max-size\"\n  fileMaxSize={false}\n/>\n"});function y(e){const n=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code",a:"a"},(0,s.ah)(),e.components),{VisibleWhenNotVisualTest:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("VisibleWhenNotVisualTest",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{children:"Demos"}),"\n",(0,l.jsx)(n.h3,{children:"Upload (default)"}),"\n",(0,l.jsx)(r,{}),"\n",(0,l.jsx)(n.h3,{children:"'useUpload' React Hook"}),"\n",(0,l.jsxs)(n.p,{children:["By using the ",(0,l.jsx)(n.code,{children:"Upload.useUpload"})," you can remove or add files or the status displayed in the component."]}),"\n",(0,l.jsxs)(n.p,{children:["You can also use the file blob in combination with the ",(0,l.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/File_API",children:"FileReader"})," API."]}),"\n",(0,l.jsx)(f,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload single file/fixed amount of files"}),"\n",(0,l.jsx)(c,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload loading state"}),"\n",(0,l.jsxs)(n.p,{children:["When uploading the file you can set the loading state of the request using the ",(0,l.jsx)(n.code,{children:"Upload.useUpload"})," hook and passing ",(0,l.jsx)(n.code,{children:"isLoading"})," to the file that is being uploaded."]}),"\n",(0,l.jsx)(h,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload error message"}),"\n",(0,l.jsxs)(n.p,{children:["The only file verification the Upload component does is for the file size and the file type. These errors are handled by the HTML element ",(0,l.jsx)(n.code,{children:"input"})," so they aren't selectable. If you want any other error messages you can use the ",(0,l.jsx)(n.code,{children:"Upload.useUpload"})," hook the same way as with the loading state."]}),"\n",(0,l.jsx)(u,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload specific accepted file formats"}),"\n",(0,l.jsx)(n.p,{children:"You can pass the file formats as a string array. This will restrict which files that can be selected."}),"\n",(0,l.jsx)(x,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload with prefilled error"}),"\n",(0,l.jsx)(p,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload with file max size based on file type"}),"\n",(0,l.jsxs)(n.p,{children:["The table of accepted file types is sorted descending by ",(0,l.jsx)(n.code,{children:"maxFileSize"}),". Multiple ",(0,l.jsx)(n.code,{children:"fileType"})," for the same ",(0,l.jsx)(n.code,{children:"maxFileSize"})," is sorted alphabetically ascending by ",(0,l.jsx)(n.code,{children:"fileType"}),"."]}),"\n",(0,l.jsx)(g,{}),"\n",(0,l.jsxs)(n.p,{children:["To disable ",(0,l.jsx)(n.code,{children:"maxFileSize"})," Use either ",(0,l.jsx)(n.code,{children:"0"})," or ",(0,l.jsx)(n.code,{children:"false"}),". If ",(0,l.jsx)(n.code,{children:"maxFileSize"})," is not provided, it defaults to the value of ",(0,l.jsx)(n.a,{href:"/uilib/components/upload/properties/#properties",children:"Uploads"})," ",(0,l.jsx)(n.code,{children:"fileMaxSize"})," which defaults to 5 MB."]}),"\n",(0,l.jsx)(i,{children:(0,l.jsx)(m,{})}),"\n",(0,l.jsx)(n.h3,{children:"Upload without file max size"}),"\n",(0,l.jsx)(n.p,{children:"You can disable the file max size, which will deactivate all file size verifications in the Upload component.\nThis can also be used to manually implement more complex file max size verifications."}),"\n",(0,l.jsx)(i,{children:(0,l.jsx)(j,{})})]})}var T=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,l.jsx)(n,Object.assign({},e,{children:(0,l.jsx)(y,e)})):y(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-upload-demos-mdx-f11f17b9c0648770c49d.js.map