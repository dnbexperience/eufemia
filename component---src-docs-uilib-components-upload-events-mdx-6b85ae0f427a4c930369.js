"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[79326],{40875:function(e,t,i){i.r(t);var o=i(52322),s=i(45392),n=i(85179),l=i(22260);function a(e){const t=Object.assign({h2:"h2",p:"p",code:"code"},(0,s.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{children:"Events"}),"\n",(0,o.jsx)(n.ZP,{props:l.TM}),"\n",(0,o.jsxs)(t.p,{children:["Each ",(0,o.jsx)(t.code,{children:"fileItem"})," will contain a ",(0,o.jsx)(t.code,{children:"{ file, id, exists }"})," (File Object, an unique ID and if the file exists or not) along with other information."]})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,s.ah)(),e.components);return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(a,e)})):a(e)}},22260:function(e,t,i){i.d(t,{TM:function(){return n},Ts:function(){return s},W8:function(){return o}});const o={id:{doc:"Unique id used with the useUpload hook to manage the files. Needed when wanting to connect with the useUpload hook.",type:["string","Function","Object","React.Context"],status:"optional"},acceptedFileTypes:{doc:"List of accepted file types. Either as string or [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype). When providing a list of [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype), the accepted file types will be presented in a table(see [example](/uilib/components/upload/demos/#upload-with-file-max-size-based-on-file-type)).",type:["Array<string>","Array<AcceptedFileType>"],status:"required"},filesAmountLimit:{doc:"Defines the amount of files the user can select and upload. Defaults to 100.",type:"number",status:"optional"},fileMaxSize:{doc:"Defines the max file size of each file in MB. Use either `0` or `false` to disable. Defaults to 5 MB.",type:["number","false"],status:"optional"},title:{doc:"Custom text property. Replaces the default title. Can be disabled using `false`.",type:"string",status:"optional"},text:{doc:"Custom text property. Replaces the default text. Can be disabled using `false`.",type:"string",status:"optional"},download:{doc:"Causes the browser to treat all listed files as downloadable instead of opening them in a new browser tab or window. Defaults to `false`.",type:"boolean",status:"optional"},allowDuplicates:{doc:"Allows uploading of duplicate files. Defaults to `false`.",type:"boolean",status:"optional"},skeleton:{doc:"Skeleton should be applied when loading content.",type:"boolean",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},s={fileType:{doc:"The name of the accepted file type.",type:"string",status:"required"},fileMaxSize:{doc:"Defines the max file size of the given file type in MB. Use either `0` or `false` to disable. If not provided, it defaults to the value of [Uploads](/uilib/components/upload/properties/#properties) `fileMaxSize` which defaults to 5 MB.",type:["number","false"],status:"optional"}},n={onChange:{doc:"Will be called on `files` changes made by the user. Access the files with `{ files }` (containing each a `fileItem`).",type:"function",status:"optional"},onFileDelete:{doc:"Will be called once a file gets deleted by the user. Access the deleted file with `{ fileItem }`.",type:"function",status:"optional"},onFileClick:{doc:"Will be called once a file gets clicked on by the user. Access the clicked file with `{ fileItem }`.",type:"function",status:"optional"}}},6210:function(e,t,i){var o=i(30600);t.Z=o.Z},64223:function(e,t,i){var o=i(91859);t.Z=o.Z},41676:function(e,t,i){var o=i(35610);t.Z=o.Z}}]);
//# sourceMappingURL=component---src-docs-uilib-components-upload-events-mdx-6b85ae0f427a4c930369.js.map