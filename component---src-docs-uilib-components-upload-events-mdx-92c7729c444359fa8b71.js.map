{"version":3,"file":"component---src-docs-uilib-components-upload-events-mdx-92c7729c444359fa8b71.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/upload/events.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/upload/UploadDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {UploadEvents} from '@dnb/eufemia/src/components/upload/UploadDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Events\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: UploadEvents\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Each \", _jsx(_components.code, {\n        children: \"fileItem\"\n      }), \" will contain a \", _jsx(_components.code, {\n        children: \"{ file, id, exists }\"\n      }), \" (File Object, an unique ID and if the file exists or not) along with other information.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colors = {\n  type: {\n    default: 'var(--color-success-green)',\n    primitive: 'var(--color-success-green)',\n    string: 'var(--color-fire-red)',\n  },\n  value: {\n    default: 'var(--color-success-green)',\n    undefined: 'var(--color-black-55)',\n    string: 'var(--color-fire-red)',\n  },\n}\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = isString(children)\n          ? colors.type.string\n          : isPrimitive(children)\n          ? colors.type.primitive\n          : colors.type.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n      case 'value': {\n        style.color = isString(children)\n          ? colors.value.string\n          : children === 'undefined' || children === 'null'\n          ? colors.value.undefined\n          : colors.value.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\nfunction isString(str: string) {\n  return [\"'\", '\"', '`'].includes(str.substring(0, 1))\n}\n\nfunction isPrimitive(type: string) {\n  return [\n    'boolean',\n    'true',\n    'false',\n    'number',\n    'bigint',\n    'string',\n    'symbol',\n  ].includes(typeWithoutArray(type))\n}\n\nfunction typeWithoutArray(type: string) {\n  if (type.endsWith('[]')) {\n    return type.slice(0, -2)\n  } else if (type.startsWith('Array<') && type.endsWith('>')) {\n    return type.slice(6, -1)\n  }\n  return type\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('[')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const UploadProperties: PropertiesTableProps = {\n  id: {\n    doc: 'Unique id used with the useUpload hook to manage the files. Needed when wanting to connect with the useUpload hook.',\n    type: ['string', 'Function', 'Object', 'React.Context'],\n    status: 'optional',\n  },\n  acceptedFileTypes: {\n    doc: 'List of accepted file types. Either as string or [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype). When providing a list of [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype), the accepted file types will be presented in a table(see [example](/uilib/components/upload/demos/#upload-with-file-max-size-based-on-file-type)).',\n    type: ['Array<string>', 'Array<AcceptedFileType>'],\n    status: 'required',\n  },\n  filesAmountLimit: {\n    doc: 'Defines the amount of files the user can select and upload. Defaults to 100.',\n    type: 'number',\n    status: 'optional',\n  },\n  fileMaxSize: {\n    doc: 'Defines the max file size of each file in MB. Use either `0` or `false` to disable. Defaults to 5 MB.',\n    type: ['number', 'false'],\n    status: 'optional',\n  },\n  title: {\n    doc: 'Custom text property. Replaces the default title. Can be disabled using `false`.',\n    type: 'string',\n    status: 'optional',\n  },\n  text: {\n    doc: 'Custom text property. Replaces the default text. Can be disabled using `false`.',\n    type: 'string',\n    status: 'optional',\n  },\n  download: {\n    doc: 'Causes the browser to treat all listed files as downloadable instead of opening them in a new browser tab or window. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'Skeleton should be applied when loading content.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const AcceptedFileTypeProperties: PropertiesTableProps = {\n  fileType: {\n    doc: 'The name of the accepted file type.',\n    type: 'string',\n    status: 'required',\n  },\n  fileMaxSize: {\n    doc: 'Defines the max file size of the given file type in MB. Use either `0` or `false` to disable. If not provided, it defaults to the value of [Uploads](/uilib/components/upload/properties/#properties) `fileMaxSize` which defaults to 5 MB.',\n    type: ['number', 'false'],\n    status: 'optional',\n  },\n}\n\nexport const UploadEvents: PropertiesTableProps = {\n  onChange: {\n    doc: 'Will be called on `files` changes made by the user. Access the files with `{ files }` (containing each a `fileItem`).',\n    type: 'function',\n    status: 'optional',\n  },\n  onFileDelete: {\n    doc: 'Will be called once a file gets deleted by the user. Access the deleted file with `{ fileItem }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  onFileClick: {\n    doc: 'Will be called once a file gets clicked on by the user. Access the clicked file with `{ fileItem }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","UploadEvents","wrapper","MDXLayout","basicComponents","StyledTable","_styled","Table","target","name","styles","colors","default","primitive","string","undefined","FormattedCode","_ref","variant","strikethrough","style","rest","textDecoration","color","isString","includes","type","endsWith","slice","startsWith","typeWithoutArray","background","boxShadow","_ref2","valueType","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","defaultValue","doc","status","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","str","substring","forEach","replace","RegExp","UploadProperties","id","acceptedFileTypes","filesAmountLimit","fileMaxSize","title","text","download","skeleton","AcceptedFileTypeProperties","fileType","onChange","onFileDelete","onFileClick"],"sourceRoot":""}