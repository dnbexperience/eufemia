"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[86640],{69094:function(e,t,o){var i=o(23722);t.A=i.A},74677:function(e,t,o){o.d(t,{Py:function(){return s},X9:function(){return n},fb:function(){return a},nr:function(){return i}});const i={id:{doc:"Unique id used together with the `useUpload` hook to manage the files. Needed when wanting to connect with the `useUpload` hook.",type:["string","Function","Object","React.Context"],status:"optional"},children:{doc:"Content to display below the `title` and `text`. Can be used to add custom content.",type:"React.ReactNode",status:"optional"},variant:{doc:"defines the appearance. Use one of these: `normal` or `compact`. Defaults to `normal`.",type:["normal","compact"],status:"optional"},acceptedFileTypes:{doc:"List of accepted file types. Either as string or [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype). When providing a list of [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype), the accepted file types will be presented in a table(see [example](/uilib/components/upload/demos/#upload-with-file-max-size-based-on-file-type)).",type:["Array<string>","Array<AcceptedFileType>"],status:"required"},filesAmountLimit:{doc:"Defines the amount of files the user can select and upload. Defaults to `100`.",type:"number",status:"optional"},fileMaxSize:{doc:"Defines the max file size of each file in MB. Use either `0` or `false` to disable. Defaults to 5 MB.",type:["number","false"],status:"optional"},title:{doc:"Custom text property. Replaces the default title. Can be disabled using `false`.",type:"string",status:"optional"},text:{doc:"Custom text property. Replaces the default text. Can be disabled using `false`.",type:"string",status:"optional"},download:{doc:"Causes the browser to treat all listed files as downloadable instead of opening them in a new browser tab or window. Defaults to `false`.",type:"boolean",status:"optional"},allowDuplicates:{doc:"Allows uploading of duplicate files. Defaults to `false`.",type:"boolean",status:"optional"},disableDragAndDrop:{doc:"Disables file drag and drop, by removing the drop zone. Defaults to `false`.",type:"boolean",status:"optional"},buttonProps:{doc:"Define any valid Eufemia [Button properties](/uilib/components/button/properties) or HTML attribute inside an object, to customize the upload button behavior and appearance.",type:"ButtonProps",status:"optional"},skeleton:{doc:"Skeleton should be applied when loading content.",type:"boolean",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},s={fileType:{doc:"The name of the accepted file type.",type:"string",status:"required"},fileMaxSize:{doc:"Defines the max file size of the given file type in MB. Use either `0` or `false` to disable. If not provided, it defaults to the value of [Uploads](/uilib/components/upload/properties/#properties) `fileMaxSize` which defaults to 5 MB.",type:["number","false"],status:"optional"}},n={onChange:{doc:"Will be called on `files` changes made by the user. Access the files with `{ files }` (containing each a `fileItem`).",type:"function",status:"optional"},onFileDelete:{doc:"Will be called once a file gets deleted by the user. Access the deleted file with `{ fileItem }`.",type:"function",status:"optional"},onFileClick:{doc:"Will be called once a file gets clicked on by the user. Access the clicked file with `{ fileItem }`. When providing this prop, the file will be rendered as a button instead of an anchor or plain text.",type:"function",status:"optional"}},a={file:{doc:"The file object. This is the same object as the one returned by the `File` API.",type:"File",status:"required"},id:{doc:"Unique ID for the file item. This ID is generated by the component and is not user-defined.",type:"string",status:"required"},exists:{doc:"Indicates if the file item already exists in the list of files. This is useful for distinguishing between new and existing files.",type:"boolean",status:"optional"},isLoading:{doc:"Indicates if the file item is currently being loaded. This is useful for showing a loading state while the file is being processed.",type:"boolean",status:"optional"},errorMessage:{doc:"Provide an error message to be displayed. This is useful for indicating issues with the file upload process.",type:"React.ReactNode",status:"optional"},description:{doc:"Provide a description to be displayed. This is useful for providing additional information about the file.",type:"React.ReactNode",status:"optional"},removeDeleteButton:{doc:"Set to `true` to remove the delete button from the file item. This is useful for preventing users from deleting files.",type:"boolean",status:"optional"}}},81908:function(e,t,o){var i=o(94515);t.A=i.A},92034:function(e,t,o){var i=o(31666);t.A=i.A},95214:function(e,t,o){o.r(t);var i=o(31085),s=o(71184),n=o(15616),a=o(74677);function l(e){const t=Object.assign({h2:"h2",p:"p",code:"code",a:"a"},(0,s.R)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{children:"Events"}),"\n",(0,i.jsx)(n.Ay,{props:a.X9}),"\n",(0,i.jsxs)(t.p,{children:["Read more about ",(0,i.jsx)(t.code,{children:"fileItem"})," in the properties docs section ",(0,i.jsx)(t.a,{href:"/uilib/components/upload/properties/#fileitem",children:"FileItem"}),"."]})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,s.R)(),e.components);return t?(0,i.jsx)(t,Object.assign({},e,{children:(0,i.jsx)(l,e)})):l(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-components-upload-events-mdx-f31f524ae196e8f852b8.js.map