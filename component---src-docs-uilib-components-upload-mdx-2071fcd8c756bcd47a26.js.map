{"version":3,"file":"component---src-docs-uilib-components-upload-mdx-2071fcd8c756bcd47a26.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/upload.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/upload/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/components/upload/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/upload/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport UploadInfo from 'Docs/uilib/components/upload/info';\nimport UploadDemos from 'Docs/uilib/components/upload/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(UploadInfo, {}), \"\\n\", _jsx(UploadDemos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport {\n  Button,\n  ToggleButton,\n  Img,\n  Section,\n  Upload,\n} from '@dnb/eufemia/src'\n\nconst createMockFile = (name: string, size: number, type: string) => {\n  const file = new File([], name, { type })\n  Object.defineProperty(file, 'size', {\n    get() {\n      return size\n    },\n  })\n  return file\n}\n\nconst useMockFiles = (setFiles, extend) => {\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('fileName.png', 123, 'image/png'),\n        ...extend,\n      },\n    ])\n  }, [])\n}\n\nexport const UploadPrefilledFileList = () => (\n  <ComponentBox\n    data-visual-test=\"upload-file-list\"\n    scope={{ useMockFiles }}\n  >\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('file-list')\n\n        if (files.length) {\n          console.log('files', files)\n        }\n\n        useMockFiles(setFiles, { errorMessage: 'This is no real file!' })\n\n        return <Upload acceptedFileTypes={['jpg', 'png']} id=\"file-list\" />\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadBasic = () => (\n  <ComponentBox data-visual-test=\"upload-basic\">\n    <Upload acceptedFileTypes={['jpg', 'png']} id=\"upload-basic\" />\n  </ComponentBox>\n)\n\nexport const UploadSingleFile = () => (\n  <ComponentBox>\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-single-file')\n\n        if (files.length) {\n          console.log('files', files, setFiles)\n        }\n\n        return (\n          <Upload\n            acceptedFileTypes={['jpg', 'png']}\n            id=\"upload-single-file\"\n            filesAmountLimit={1}\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadRemoveFile = () => (\n  <ComponentBox data-visual-test=\"upload-remove-files\">\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-remove-files')\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-remove-files\"\n            />\n\n            <Button\n              top=\"small\"\n              disabled={files.length < 1}\n              onClick={() => setFiles([])}\n            >\n              Remove selected files\n            </Button>\n\n            <Preview files={files} />\n          </>\n        )\n\n        function Preview({ files }) {\n          const [images, setImages] = React.useState([])\n\n          React.useEffect(() => {\n            files.map(({ file }) => {\n              let reader = new FileReader()\n\n              reader.addEventListener(\n                'load',\n                (event) => {\n                  images.push({ blob: event.target, file })\n                  setImages([...images])\n                  reader = null\n                },\n                false,\n              )\n\n              reader.readAsDataURL(file)\n            })\n          }, [files])\n\n          return (\n            <Section aria-label=\"List of chosen images\">\n              {images.map((img, i) => (\n                <Img\n                  top\n                  key={i}\n                  src={img.blob.result}\n                  alt={img.file.name}\n                  height={100}\n                />\n              ))}\n            </Section>\n          )\n        }\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadIsLoading = () => (\n  <ComponentBox\n    scope={{ useMockFiles }}\n    data-visual-test=\"upload-is-loading\"\n  >\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-is-loading')\n\n        useMockFiles(setFiles, { isLoading: true })\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-is-loading\"\n            />\n            <ToggleButton\n              top=\"small\"\n              disabled={files.length < 1}\n              on_change={({ checked }) =>\n                setFiles(\n                  files.map((fileItem) => {\n                    return { ...fileItem, isLoading: checked }\n                  }),\n                )\n              }\n            >\n              Files is loading toggle\n            </ToggleButton>\n          </>\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadErrorMessage = () => (\n  <ComponentBox data-visual-test=\"upload-error-message\">\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload(\n          'upload-error-message',\n        )\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-error-message\"\n            />\n            <ToggleButton\n              top=\"small\"\n              disabled={files.length < 1}\n              on_change={({ checked }) => {\n                setFiles(\n                  files.map((fileItem) => {\n                    return {\n                      ...fileItem,\n                      errorMessage: checked\n                        ? 'custom error message'\n                        : null,\n                    }\n                  }),\n                )\n              }}\n            >\n              Toggle error message\n            </ToggleButton>\n          </>\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadAcceptedFormats = () => (\n  <ComponentBox>\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload(\n          'upload-accepted-formats',\n        )\n\n        if (files.length) {\n          console.log('files', files, setFiles)\n        }\n\n        return (\n          <Upload\n            acceptedFileTypes={['png', 'jpg', 'pdf']}\n            id=\"upload-accepted-formats\"\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadDisabledFileMaxSize = () => (\n  <ComponentBox hideCode>\n    {() => {\n      const Component = () => {\n        const verifyFileMaxSize = (file: File) => {\n          const errorMapByType = {\n            ['application/pdf']: {\n              fileMaxSizeMb: 4,\n              errorMessage:\n                'Filen du prøver å laste opp er for stor, vi støtter ikke PDF-filer større enn 4 MB.',\n            },\n            ['image/jpeg']: {\n              fileMaxSizeMb: 1,\n              errorMessage:\n                'Filen du prøver å laste opp er for stor, vi støtter ikke JPG-filer større enn 1 MB.',\n            },\n          }\n          const BYTES_IN_A_MEGA_BYTE = 1048576\n\n          const errorObj = errorMapByType[file.type]\n\n          if (\n            errorObj &&\n            // Converts from b (binary) to MB (decimal)\n            file.size / BYTES_IN_A_MEGA_BYTE > errorObj.fileMaxSizeMb\n          ) {\n            return errorObj.errorMessage\n          }\n          return null\n        }\n\n        const { files, setFiles } = Upload.useUpload(\n          'upload-disabled-file-max-size',\n        )\n\n        if (files.length) {\n          console.log('files', files, setFiles)\n        }\n\n        return (\n          <Upload\n            text=\"Dra & slipp eller velg hvilke filer du vil laste opp. PDF-filer kan ikke være større enn 4 MB og JPG-filer ikke større enn 1 MB.\"\n            acceptedFileTypes={['jpg', 'pdf']}\n            id=\"upload-disabled-file-max-size\"\n            fileMaxSize={false}\n            onChange={({ files }) => {\n              setFiles(\n                files.map((fileItem) => {\n                  return {\n                    ...fileItem,\n                    errorMessage: verifyFileMaxSize(fileItem.file),\n                  }\n                }),\n              )\n            }}\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {UploadBasic, UploadPrefilledFileList, UploadRemoveFile, UploadSingleFile, UploadIsLoading, UploadErrorMessage, UploadAcceptedFormats, UploadDisabledFileMaxSize} from 'Docs/uilib/components/upload/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {VisibleWhenNotVisualTest} = _components;\n  if (!VisibleWhenNotVisualTest) _missingMdxReference(\"VisibleWhenNotVisualTest\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload (default)\"\n    }), \"\\n\", _jsx(UploadBasic, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"'useUpload' React Hook\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By using the \", _jsx(_components.code, {\n        children: \"Upload.useUpload\"\n      }), \" you can remove or add files or the status displayed in the component.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also use the file blob in combination with the \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/API/File_API\",\n        children: \"FileReader\"\n      }), \" API.\"]\n    }), \"\\n\", _jsx(UploadRemoveFile, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload single file/fixed amount of files\"\n    }), \"\\n\", _jsx(UploadSingleFile, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload loading state\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When uploading the file you can set the loading state of the request using the \", _jsx(_components.code, {\n        children: \"Upload.useUpload\"\n      }), \" hook and passing \", _jsx(_components.code, {\n        children: \"isLoading\"\n      }), \" to the file that is being uploaded.\"]\n    }), \"\\n\", _jsx(UploadIsLoading, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload error message\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The only file verification the Upload component does is for the file size and the file type. These errors are handled by the HTML element \", _jsx(_components.code, {\n        children: \"input\"\n      }), \" so they aren't selectable. If you want any other error messages you can use the \", _jsx(_components.code, {\n        children: \"Upload.useUpload\"\n      }), \" hook the same way as with the loading state.\"]\n    }), \"\\n\", _jsx(UploadErrorMessage, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload specific accepted file formats\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can pass the file formats as a string array. This will restrict which files that can be selected.\"\n    }), \"\\n\", _jsx(UploadAcceptedFormats, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload with prefilled error\"\n    }), \"\\n\", _jsx(UploadPrefilledFileList, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload without file max size, and custom error handling of file size\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can disable the file max size, which will deactivate all file size verifications in the Upload component.\\nThis can also be used to manually implement more complex file max size verifications, like file max size based on file type, see the example below:\"\n    }), \"\\n\", _jsx(VisibleWhenNotVisualTest, {\n      children: _jsx(UploadDisabledFileMaxSize, {})\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    code: \"code\",\n    pre: \"pre\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Upload component should be used in scenarios where the user has to upload any kind of files.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"How to use the Upload component\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Files selected by the user should be uploaded immediately (temporary location).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"The user should be able to remove them (files) during the session.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The Upload component connects to the \", _jsx(_components.a, {\n          href: \"/uilib/components/global-status\",\n          children: \"GlobalStatus\"\n        }), \" and displays file error messages there as well.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Validation messages coming from the \\\"backend\\\" should be displayed for each file via the \", _jsx(_components.code, {\n          children: \"useUpload\"\n        }), \" hook. See \", _jsx(_components.a, {\n          href: \"/uilib/components/upload/#upload-error-message\",\n          children: \"example\"\n        }), \" below.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"useUpload\"\n        }), \" hook can be placed on any location in your application, and does not need to be where the \", _jsx(_components.code, {\n          children: \"Upload\"\n        }), \" component is used.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"function YourComponent() {\\n  const { files, setFiles } = Upload.useUpload('unique-id')\\n\\n  React.useEffect(() => {\\n    setFiles(\\n      files.map((fileItem) => {\\n        if (fileItem.file.name === fileNameFromBackend) {\\n          fileItem.errorMessage = 'Your message from the backend'\\n        }\\n        return fileItem\\n      }),\\n    )\\n  }, [fileNameFromBackend])\\n\\n  return <Upload id=\\\"unique-id\\\" />\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"JPG vs JPEG\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When \", _jsx(_components.code, {\n        children: \"jpg\"\n      }), \" is defined (most commonly used), then the component will also accept \", _jsx(_components.code, {\n        children: \"jpeg\"\n      }), \" files.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Backend integration\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The \\\"backend\\\" receiving the files is decoupled and can be any existing or new system.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Limit the amount of files\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, the Upload component accepts multiple files. You can use the prop \", _jsx(_components.code, {\n        children: \"filesAmountLimit={1}\"\n      }), \" to make the component accept only one file.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Page wide drop support\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Once the Upload component mounts, it also adds support for dropping files to the entire browser body.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"NB:\"\n      }), \" When you have several mounted components, only the first Upload component will receive the dropped files.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","UploadInfo","UploadDemos","wrapper","MDXLayout","Object","assign","_provideComponents","components","createMockFile","name","size","type","file","File","defineProperty","get","useMockFiles","setFiles","extend","React","UploadPrefilledFileList","ComponentBox","scope","noInline","UploadBasic","UploadSingleFile","UploadRemoveFile","UploadIsLoading","UploadErrorMessage","UploadAcceptedFormats","UploadDisabledFileMaxSize","hideCode","_components","h2","h3","p","code","a","VisibleWhenNotVisualTest","id","component","Error","_missingMdxReference","href","ul","li","pre","strong","className"],"sourceRoot":""}