"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[96497,23823,67328],{89712:function(e,n,i){i.r(n);var l=i(52322),t=i(45392),o=i(72583),s=i(67250);function a(e){return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(o.default,{}),"\n",(0,l.jsx)(s.default,{})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,l.jsx)(n,Object.assign({},e,{children:(0,l.jsx)(a,e)})):a()}},67250:function(e,n,i){i.r(n);var l=i(52322),t=i(45392),o=i(36210);function s(e){const n=Object.assign({h2:"h2",h3:"h3",code:"code",p:"p",a:"a"},(0,t.ah)(),e.components),{VisibleWhenNotVisualTest:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("VisibleWhenNotVisualTest",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{children:"Demos"}),"\n",(0,l.jsx)(n.h3,{children:"Upload (default)"}),"\n",(0,l.jsx)(o.QO,{}),"\n",(0,l.jsxs)(n.h3,{children:[(0,l.jsx)(n.code,{children:"useUpload"})," React Hook"]}),"\n",(0,l.jsxs)(n.p,{children:["By using the ",(0,l.jsx)(n.code,{children:"Upload.useUpload"})," you can remove or add files or the status displayed in the component."]}),"\n",(0,l.jsxs)(n.p,{children:["You can also use the file blob in combination with the ",(0,l.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/File_API",children:"FileReader"})," API."]}),"\n",(0,l.jsx)(o.Gz,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload single file/fixed amount of files"}),"\n",(0,l.jsx)(o.Lq,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload loading state"}),"\n",(0,l.jsxs)(n.p,{children:["When uploading the file you can set the loading state of the request using the ",(0,l.jsx)(n.code,{children:"Upload.useUpload"})," hook and passing ",(0,l.jsx)(n.code,{children:"isLoading"})," to the file that is being uploaded."]}),"\n",(0,l.jsx)(o.KW,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload error message"}),"\n",(0,l.jsxs)(n.p,{children:["The only file verification the Upload component does is for the file size and the file type. These errors are handled by the HTML element ",(0,l.jsx)(n.code,{children:"input"})," so they aren't selectable. If you want any other error messages you can use the ",(0,l.jsx)(n.code,{children:"Upload.useUpload"})," hook the same way as with the loading state."]}),"\n",(0,l.jsx)(o.KN,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload specific accepted file formats"}),"\n",(0,l.jsx)(n.p,{children:"You can pass the file formats as a string array. This will restrict which files that can be selected."}),"\n",(0,l.jsx)(o.g_,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload with prefilled error"}),"\n",(0,l.jsx)(o.ez,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload with file max size based on file type"}),"\n",(0,l.jsxs)(n.p,{children:["The table of accepted file types is sorted descending by ",(0,l.jsx)(n.code,{children:"maxFileSize"}),". Multiple ",(0,l.jsx)(n.code,{children:"fileType"})," for the same ",(0,l.jsx)(n.code,{children:"maxFileSize"})," is sorted alphabetically ascending by ",(0,l.jsx)(n.code,{children:"fileType"}),"."]}),"\n",(0,l.jsx)(o.OV,{}),"\n",(0,l.jsxs)(n.p,{children:["To disable ",(0,l.jsx)(n.code,{children:"maxFileSize"})," Use either ",(0,l.jsx)(n.code,{children:"0"})," or ",(0,l.jsx)(n.code,{children:"false"}),". If ",(0,l.jsx)(n.code,{children:"maxFileSize"})," is not provided, it defaults to the value of ",(0,l.jsx)(n.a,{href:"/uilib/components/upload/properties/#properties",children:"Uploads"})," ",(0,l.jsx)(n.code,{children:"fileMaxSize"})," which defaults to 5 MB."]}),"\n",(0,l.jsx)(i,{children:(0,l.jsx)(o.zV,{})}),"\n",(0,l.jsx)(n.h3,{children:"Upload without file max size"}),"\n",(0,l.jsx)(n.p,{children:"You can disable the file max size, which will deactivate all file size verifications in the Upload component.\nThis can also be used to manually implement more complex file max size verifications."}),"\n",(0,l.jsx)(o.Qb,{}),"\n",(0,l.jsx)(n.h3,{children:"Upload without title and text"}),"\n",(0,l.jsx)(o.av,{}),"\n",(0,l.jsxs)(n.h3,{children:["Upload with async ",(0,l.jsx)(n.code,{children:"onFileDelete"})]}),"\n",(0,l.jsx)(o.Q6,{}),"\n",(0,l.jsxs)(n.h3,{children:["Upload with ",(0,l.jsx)(n.code,{children:"onFileClick"})]}),"\n",(0,l.jsx)(o.sM,{})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,l.jsx)(n,Object.assign({},e,{children:(0,l.jsx)(s,e)})):s(e)}},72583:function(e,n,i){i.r(n);var l=i(52322),t=i(45392);function o(e){const n=Object.assign({h2:"h2",pre:"pre",code:"code",p:"p",ul:"ul",li:"li",a:"a",strong:"strong"},(0,t.ah)(),e.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{children:"Import"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:"import { Upload } from '@dnb/eufemia'\n"})}),"\n",(0,l.jsx)(n.h2,{children:"Description"}),"\n",(0,l.jsx)(n.p,{children:"The Upload component should be used in scenarios where the user has to upload any kind of files."}),"\n",(0,l.jsx)(n.h2,{children:"How to use the Upload component"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Files selected by the user should be uploaded immediately (temporary location)."}),"\n",(0,l.jsx)(n.li,{children:"The user should be able to remove them (files) during the session."}),"\n",(0,l.jsxs)(n.li,{children:["The Upload component connects to the ",(0,l.jsx)(n.a,{href:"/uilib/components/global-status",children:"GlobalStatus"})," and displays file error messages there as well."]}),"\n",(0,l.jsxs)(n.li,{children:['Validation messages coming from the "backend" should be displayed for each file via the ',(0,l.jsx)(n.code,{children:"useUpload"})," hook. See ",(0,l.jsx)(n.a,{href:"/uilib/components/upload/#upload-error-message",children:"example"})," below."]}),"\n",(0,l.jsxs)(n.li,{children:["The ",(0,l.jsx)(n.code,{children:"useUpload"})," hook can be placed on any location in your application, and does not need to be where the ",(0,l.jsx)(n.code,{children:"Upload"})," component is used."]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"function YourComponent() {\n  const { files, setFiles } = Upload.useUpload('unique-id')\n\n  React.useEffect(() => {\n    setFiles(\n      files.map((fileItem) => {\n        if (fileItem.file.name === fileNameFromBackend) {\n          fileItem.errorMessage = 'Your message from the backend'\n        }\n        return fileItem\n      }),\n    )\n  }, [fileNameFromBackend])\n\n  return <Upload id=\"unique-id\" />\n}\n"})}),"\n",(0,l.jsx)(n.h2,{children:"JPG vs JPEG"}),"\n",(0,l.jsxs)(n.p,{children:["When ",(0,l.jsx)(n.code,{children:"jpg"})," is defined (most commonly used), then the component will also accept ",(0,l.jsx)(n.code,{children:"jpeg"})," files."]}),"\n",(0,l.jsx)(n.h2,{children:"Backend integration"}),"\n",(0,l.jsx)(n.p,{children:'The "backend" receiving the files is decoupled and can be any existing or new system.'}),"\n",(0,l.jsx)(n.h2,{children:"Limit the amount of files"}),"\n",(0,l.jsxs)(n.p,{children:["By default, the Upload component accepts multiple files. You can use the property ",(0,l.jsx)(n.code,{children:"filesAmountLimit={1}"})," to make the component accept only one file."]}),"\n",(0,l.jsx)(n.h2,{children:"Page wide drop support"}),"\n",(0,l.jsx)(n.p,{children:"Once the Upload component mounts, it also adds support for dropping files to the entire browser body."}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"NB:"})," When you have several mounted components, only the first Upload component will receive the dropped files."]}),"\n",(0,l.jsxs)(n.h2,{children:["The ",(0,l.jsx)(n.code,{children:"download"})," property"]}),"\n",(0,l.jsx)(n.p,{children:"Each file item is displayed as a clickable link with its original file name, which opens the file source in a new browser tab."}),"\n",(0,l.jsxs)(n.p,{children:["In some situations, it's more suitable to have each link download the file instead of opening it in a new browser tab. To achieve this, set the ",(0,l.jsx)(n.code,{children:"download={true}"})," property on the Upload component."]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,l.jsx)(n,Object.assign({},e,{children:(0,l.jsx)(o,e)})):o(e)}},36210:function(e,n,i){i.d(n,{Gz:function(){return c},KN:function(){return u},KW:function(){return p},Lq:function(){return d},OV:function(){return f},Q6:function(){return j},QO:function(){return r},Qb:function(){return x},av:function(){return g},ez:function(){return a},g_:function(){return h},lb:function(){return s},sM:function(){return y},zV:function(){return m}});i(2784);var l=i(46832),t=i(34674),o=i(52322);function s(e,n,i){const l=new File([],e,{type:i});return Object.defineProperty(l,"size",{get(){return n}}),l}const a=()=>(0,o.jsx)(l.Z,{"data-visual-test":"upload-file-list",scope:{createMockFile:s},noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('file-list')\n  if (files.length) {\n    console.log('files', files)\n  }\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('fileName.png', 123, 'image/png'),\n        errorMessage: 'This is no real file!',\n      },\n    ])\n  }, [setFiles])\n  return <Upload acceptedFileTypes={['jpg', 'png']} id=\"file-list\" />\n}\nrender(<Component />)\n"}),r=()=>(0,o.jsx)(l.Z,{"data-visual-test":"upload-basic",children:"<Upload acceptedFileTypes={['jpg', 'png']} id=\"upload-basic\" />\n"}),d=()=>(0,o.jsx)(l.Z,{noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-single-file')\n  if (files.length) {\n    console.log('files', files, setFiles)\n  }\n  return (\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-single-file\"\n      filesAmountLimit={1}\n    />\n  )\n}\nrender(<Component />)\n"}),c=()=>(0,o.jsx)(l.Z,{"data-visual-test":"upload-remove-files",noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-remove-files')\n  return (\n    <>\n      <Upload\n        acceptedFileTypes={['jpg', 'png']}\n        id=\"upload-remove-files\"\n      />\n\n      <Button\n        top=\"small\"\n        disabled={files.length < 1}\n        onClick={() => setFiles([])}\n      >\n        Remove selected files\n      </Button>\n\n      <Preview files={files} />\n    </>\n  )\n  function Preview({ files }) {\n    const [images, setImages] = React.useState([])\n    React.useEffect(() => {\n      files.map(({ file }) => {\n        let reader = new FileReader()\n        reader.addEventListener(\n          'load',\n          (event) => {\n            images.push({\n              blob: event.target,\n              file,\n            })\n            setImages([...images])\n            reader = null\n          },\n          false,\n        )\n        reader.readAsDataURL(file)\n      })\n    }, [files, images])\n    return (\n      <Section aria-label=\"List of chosen images\">\n        {images.map((img, i) => (\n          <Img\n            top\n            key={i}\n            src={img.blob.result}\n            alt={img.file.name}\n            height={100}\n          />\n        ))}\n      </Section>\n    )\n  }\n}\nrender(<Component />)\n"}),p=()=>(0,o.jsx)(l.Z,{"data-visual-test":"upload-is-loading",scope:{createMockFile:s},noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-is-loading')\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('fileName.png', 123, 'image/png'),\n        isLoading: true,\n      },\n    ])\n  }, [])\n  return (\n    <>\n      <Upload acceptedFileTypes={['jpg', 'png']} id=\"upload-is-loading\" />\n      <ToggleButton\n        top=\"small\"\n        disabled={files.length < 1}\n        on_change={({ checked }) =>\n          setFiles(\n            files.map((fileItem) => {\n              return {\n                ...fileItem,\n                isLoading: checked,\n              }\n            }),\n          )\n        }\n      >\n        Files is loading toggle\n      </ToggleButton>\n    </>\n  )\n}\nrender(<Component />)\n"}),u=()=>(0,o.jsx)(l.Z,{"data-visual-test":"upload-error-message",noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-error-message')\n  return (\n    <>\n      <Upload\n        acceptedFileTypes={['jpg', 'png']}\n        id=\"upload-error-message\"\n      />\n      <ToggleButton\n        top=\"small\"\n        disabled={files.length < 1}\n        on_change={({ checked }) => {\n          setFiles(\n            files.map((fileItem) => {\n              return {\n                ...fileItem,\n                errorMessage: checked ? 'custom error message' : null,\n              }\n            }),\n          )\n        }}\n      >\n        Toggle error message\n      </ToggleButton>\n    </>\n  )\n}\nrender(<Component />)\n"}),h=()=>(0,o.jsx)(l.Z,{noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-accepted-formats')\n  if (files.length) {\n    console.log('files', files, setFiles)\n  }\n  return (\n    <Upload\n      acceptedFileTypes={['png', 'jpg', 'pdf']}\n      id=\"upload-accepted-formats\"\n    />\n  )\n}\nrender(<Component />)\n"}),f=()=>(0,o.jsx)(l.Z,{"data-visual-test":"upload-file-max-size-based-on-file-format",hideCode:!0,children:"<Upload\n  id=\"upload-file-max-size-based-on-file-format\"\n  fileMaxSize={99}\n  acceptedFileTypes={[\n    {\n      fileType: 'jpg',\n      fileMaxSize: 1,\n    },\n    {\n      fileType: 'doc',\n      fileMaxSize: 1,\n    },\n    {\n      fileType: 'svg',\n      fileMaxSize: 1,\n    },\n    {\n      fileType: 'gif',\n      fileMaxSize: 1,\n    },\n    {\n      fileType: 'doc',\n      fileMaxSize: 4,\n    },\n    {\n      fileType: 'docx',\n      fileMaxSize: 4,\n    },\n    {\n      fileType: 'tiff',\n      fileMaxSize: 5,\n    },\n    {\n      fileType: 'tif',\n      fileMaxSize: 5,\n    },\n    {\n      fileType: 'html',\n      fileMaxSize: 6,\n    },\n    {\n      fileType: 'htm',\n      fileMaxSize: 6,\n    },\n    {\n      fileType: 'xls',\n      fileMaxSize: 7,\n    },\n    {\n      fileType: 'xlsx',\n      fileMaxSize: 7,\n    },\n    {\n      fileType: 'odt',\n    },\n    {\n      fileType: 'pdf',\n    },\n    {\n      fileType: 'text',\n      fileMaxSize: false,\n    },\n    {\n      fileType: 'txt',\n      fileMaxSize: 0,\n    },\n    {\n      fileType: 'zip',\n      fileMaxSize: 99,\n    },\n  ]}\n/>\n"}),m=()=>(0,o.jsx)(l.Z,{children:"<Upload\n  id=\"upload-file-max-size-based-on-file-format-disabled\"\n  acceptedFileTypes={[\n    {\n      fileType: 'jpg',\n      fileMaxSize: 0,\n    },\n    {\n      fileType: 'doc',\n      fileMaxSize: false,\n    },\n    {\n      fileType: 'svg',\n    },\n  ]}\n/>\n"}),x=()=>(0,o.jsx)(l.Z,{"data-visual-test":"upload-disabled-file-max-size",children:"<Upload\n  acceptedFileTypes={['jpg', 'pdf']}\n  id=\"upload-disabled-file-max-size\"\n  fileMaxSize={false}\n/>\n"}),g=()=>(0,o.jsx)(l.Z,{"data-visual-test":"upload-no-title-no-text",children:"<Upload\n  title={false}\n  text={false}\n  acceptedFileTypes={['jpg', 'png']}\n  id=\"upload-no-title-no-text\"\n/>\n"}),j=()=>(0,o.jsx)(l.Z,{scope:{createRequest:t.createRequest},noInline:!0,children:"async function mockAsyncFileRemoval({ fileItem }) {\n  const request = createRequest()\n  console.log('making API request to remove: ' + fileItem.file.name)\n  await request(3000) // Simulate a request\n  const mockResponse = {\n    successful_removal: Math.random() < 0.5, // Randomly fails to remove the file\n  }\n\n  if (!mockResponse.successful_removal) {\n    throw new Error('Unable to remove this file')\n  }\n}\nrender(\n  <Upload\n    onFileDelete={mockAsyncFileRemoval}\n    acceptedFileTypes={['jpg', 'png']}\n    id=\"upload-on-file-delete\"\n  />,\n)\n"}),y=()=>(0,o.jsx)(l.Z,{scope:{createMockFile:s,createRequest:t.createRequest},"data-visual-test":"upload-on-file-click",noInline:!0,children:"const Component = () => {\n  const { setFiles } = Upload.useUpload('upload-on-file-click')\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('1501870.jpg', 123, 'image/png'),\n      },\n      {\n        file: createMockFile(\n          'file-name-that-is-very-long-and-has-letters.png',\n          123,\n          'image/png',\n        ),\n      },\n    ])\n  }, [setFiles])\n  async function mockAsyncFileFetching({ fileItem }) {\n    const request = createRequest()\n    console.log(\n      'making API request to fetch the url of the file: ' +\n        fileItem.file.name,\n    )\n    await request(2000) // Simulate a request\n    window.open(\n      'https://eufemia.dnb.no/images/avatars/' + fileItem.file.name,\n      '_blank',\n    )\n  }\n  return (\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-on-file-click\"\n      onFileClick={mockAsyncFileFetching}\n    />\n  )\n}\nrender(<Component />)\n"})},34674:function(e,n,i){i.r(n),i.d(n,{AsyncChangeBehavior:function(){return r},AsyncSubmitBehavior:function(){return a},Default:function(){return s},WithinOtherComponents:function(){return c},createRequest:function(){return d}});var l=i(46832),t=i(52750),o=i(52322);const s=()=>(0,o.jsx)(l.Z,{children:'<Form.SubmitIndicator state="pending" />\n'}),a=()=>(0,o.jsx)(l.Z,{scope:{createRequest:d,debounceAsync:t.k},noInline:!0,children:'const delay = debounceAsync(async function () {\n  try {\n    const request = createRequest()\n    await request(1000) // Simulate a request\n  } catch (error) {\n    return error\n  }\n})\nrender(\n  <Form.Handler onSubmit={delay}>\n    <Form.Card>\n      <Field.String path="/myField" label="Short label" />\n      <Form.ButtonRow>\n        <Form.SubmitButton />\n        <Button variant="tertiary">Cancel</Button>\n      </Form.ButtonRow>\n    </Form.Card>\n  </Form.Handler>,\n)\n'}),r=()=>(0,o.jsx)(l.Z,{scope:{createRequest:d,debounceAsync:t.k},noInline:!0,children:'const delay = debounceAsync(async function () {\n  try {\n    const request = createRequest()\n    await request(1000) // Simulate a request\n  } catch (error) {\n    return error\n  }\n})\nrender(\n  <Form.Handler onSubmit={delay} onChange={delay}>\n    <Form.Card>\n      <Field.String\n        path="/myField1"\n        label="Label (with async validation)"\n        placeholder="Write something ..."\n        onChangeValidator={delay}\n      />\n      <FieldBlock width="medium">\n        <Field.String\n          path="/myField2"\n          width="stretch"\n          label="This is a long label"\n        />\n      </FieldBlock>\n      <Form.ButtonRow>\n        <Form.SubmitButton />\n        <Button variant="tertiary">Cancel</Button>\n      </Form.ButtonRow>\n    </Form.Card>\n  </Form.Handler>,\n)\n'}),d=()=>{let e,n;const i=i=>new Promise((l=>{n=l,e=setTimeout((()=>{l({hasError:!1})}),i)}));return i.cancel=()=>{var i;null===(i=n)||void 0===i||i({hasError:!0}),clearTimeout(e),e=null},i},c=()=>(0,o.jsx)(l.Z,{children:'<Form.Handler>\n  <Flex.Horizontal align="center">\n    <Form.SubmitButton showIndicator />\n    <Button variant="secondary" icon="chevron_right">\n      Secondary\n      <Form.SubmitIndicator state="pending" />\n    </Button>\n    <Button variant="tertiary">\n      Tertiary\n      <Form.SubmitIndicator state="pending" />\n    </Button>\n    <FormLabel>\n      Label\n      <Form.SubmitIndicator state="pending" />\n    </FormLabel>\n  </Flex.Horizontal>\n</Form.Handler>\n'})}}]);
//# sourceMappingURL=component---src-docs-uilib-components-upload-mdx-34f321be44db4e3897d0.js.map