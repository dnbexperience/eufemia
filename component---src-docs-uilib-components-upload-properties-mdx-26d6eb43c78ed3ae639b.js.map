{"version":3,"file":"component---src-docs-uilib-components-upload-properties-mdx-26d6eb43c78ed3ae639b.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/upload/properties.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/upload/UploadDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport TranslationsTable from 'dnb-design-system-portal/src/shared/parts/TranslationsTable';\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {UploadProperties, AcceptedFileTypeProperties} from '@dnb/eufemia/src/components/upload/UploadDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: UploadProperties\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"AcceptedFileType\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The accepted file type object is used to define file max size for specific file types.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When providing a list of AcceptedFileType to \", _jsx(_components.a, {\n        href: \"/uilib/components/upload/properties/#properties\",\n        children: \"Uploads\"\n      }), \" \", _jsx(_components.code, {\n        children: \"acceptedFileTypes\"\n      }), \", the accepted file types will be presented in a table. Here is an \", _jsx(_components.a, {\n        href: \"/uilib/components/upload/demos/#upload-with-file-max-size-based-on-file-type\",\n        children: \"example\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The table is sorted descending by \", _jsx(_components.code, {\n        children: \"maxFileSize\"\n      }), \". Multiple \", _jsx(_components.code, {\n        children: \"fileType\"\n      }), \" for the same \", _jsx(_components.code, {\n        children: \"maxFileSize\"\n      }), \" is sorted alphabetically ascending by \", _jsx(_components.code, {\n        children: \"fileType\"\n      }), \".\"]\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: AcceptedFileTypeProperties\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Translations\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All translation keys listed in the translations table below, can be used as a component property (like \", _jsx(_components.code, {\n        children: \"title\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"text\"\n      }), \").\"]\n    }), \"\\n\", _jsx(TranslationsTable, {\n      localeKey: \"Upload\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const UploadProperties: PropertiesTableProps = {\n  acceptedFileTypes: {\n    doc: 'List of accepted file types. Either as string or [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype). When providing a list of [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype), the accepted file types will be presented in a table(see [example](/uilib/components/upload/demos/#upload-with-file-max-size-based-on-file-type)).',\n    type: ['Array<string>', 'Array<AcceptedFileType>'],\n    status: 'required',\n  },\n  filesAmountLimit: {\n    doc: 'Defines the amount of files the user can select and upload. Defaults to 100.',\n    type: 'number',\n    status: 'optional',\n  },\n  fileMaxSize: {\n    doc: 'Defines the max file size of each file in MB. Use either `0` or `false` to disable. Defaults to 5 MB.',\n    type: ['number', 'false'],\n    status: 'optional',\n  },\n  title: {\n    doc: 'Custom text property. Replaces the default title. Can be disabled using `false`.',\n    type: 'string',\n    status: 'optional',\n  },\n  text: {\n    doc: 'Custom text property. Replaces the default text. Can be disabled using `false`.',\n    type: 'string',\n    status: 'optional',\n  },\n  download: {\n    doc: 'Causes the browser to treat all listed files as downloadable instead of opening them in a new browser tab or window. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'Skeleton should be applied when loading content.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const AcceptedFileTypeProperties: PropertiesTableProps = {\n  fileType: {\n    doc: 'The name of the accepted file type.',\n    type: 'string',\n    status: 'required',\n  },\n  fileMaxSize: {\n    doc: 'Defines the max file size of the given file type in MB. Use either `0` or `false` to disable. If not provided, it defaults to the value of [Uploads](/uilib/components/upload/properties/#properties) `fileMaxSize` which defaults to 5 MB.',\n    type: ['number', 'false'],\n    status: 'optional',\n  },\n}\n\nexport const UploadEvents: PropertiesTableProps = {\n  onChange: {\n    doc: 'Will be called on `files` changes made by the user. Access the files with `{ files }` (containing each a `fileItem`).',\n    type: 'function',\n    status: 'optional',\n  },\n  onFileDelete: {\n    doc: 'Will be called once a file gets deleted by the user. Access the deleted file with `{ fileItem }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","a","code","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","UploadProperties","href","AcceptedFileTypeProperties","TranslationsTable","localeKey","wrapper","MDXLayout","acceptedFileTypes","doc","type","status","filesAmountLimit","fileMaxSize","title","text","download","skeleton","fileType","UploadEvents","onChange","onFileDelete","Td","Th","Tr"],"sourceRoot":""}