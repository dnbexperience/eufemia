"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[10676],{57982:function(e,t,i){i.r(t);var s=i(31085),o=i(71184),n=i(86058),a=i(15616),l=i(74677);function r(e){const t=Object.assign({h2:"h2",p:"p",a:"a",code:"code"},(0,o.R)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{children:"Properties"}),"\n",(0,s.jsx)(a.Ay,{props:l.nr}),"\n",(0,s.jsx)(t.h2,{children:"FileItem"}),"\n",(0,s.jsx)(t.p,{children:"The file item object is representing the files of the Upload component."}),"\n",(0,s.jsx)(a.Ay,{props:l.fb}),"\n",(0,s.jsx)(t.h2,{children:"AcceptedFileType"}),"\n",(0,s.jsx)(t.p,{children:"The accepted file type object is used to define file max size for specific file types."}),"\n",(0,s.jsxs)(t.p,{children:["When providing a list of AcceptedFileType to ",(0,s.jsx)(t.a,{href:"/uilib/components/upload/properties/#properties",children:"Uploads"})," ",(0,s.jsx)(t.code,{children:"acceptedFileTypes"}),", the accepted file types will be presented in a table. Here is an ",(0,s.jsx)(t.a,{href:"/uilib/components/upload/demos/#upload-with-file-max-size-based-on-file-type",children:"example"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The table is sorted descending by ",(0,s.jsx)(t.code,{children:"maxFileSize"}),". Multiple ",(0,s.jsx)(t.code,{children:"fileType"})," for the same ",(0,s.jsx)(t.code,{children:"maxFileSize"})," is sorted alphabetically ascending by ",(0,s.jsx)(t.code,{children:"fileType"}),"."]}),"\n",(0,s.jsx)(a.Ay,{props:l.Py}),"\n",(0,s.jsx)(t.h2,{children:"Translations"}),"\n",(0,s.jsxs)(t.p,{children:["All translation keys listed in the translations table below, can be used as a component property (like ",(0,s.jsx)(t.code,{children:"title"})," or ",(0,s.jsx)(t.code,{children:"text"}),")."]}),"\n",(0,s.jsx)(n.A,{localeKey:"Upload"})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,o.R)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(r,e)})):r(e)}},69094:function(e,t,i){var s=i(23722);t.A=s.A},74677:function(e,t,i){i.d(t,{Py:function(){return o},X9:function(){return n},fb:function(){return a},nr:function(){return s}});const s={id:{doc:"Unique id used with the useUpload hook to manage the files. Needed when wanting to connect with the useUpload hook.",type:["string","Function","Object","React.Context"],status:"optional"},children:{doc:"Content to display below the `title` and `text`. Can be used to add custom content.",type:"React.ReactNode",status:"optional"},variant:{doc:"defines the appearance. Use one of these: `normal` or `compact`. Defaults to `normal`.",type:["normal","compact"],status:"optional"},acceptedFileTypes:{doc:"List of accepted file types. Either as string or [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype). When providing a list of [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype), the accepted file types will be presented in a table(see [example](/uilib/components/upload/demos/#upload-with-file-max-size-based-on-file-type)).",type:["Array<string>","Array<AcceptedFileType>"],status:"required"},filesAmountLimit:{doc:"Defines the amount of files the user can select and upload. Defaults to `100`.",type:"number",status:"optional"},fileMaxSize:{doc:"Defines the max file size of each file in MB. Use either `0` or `false` to disable. Defaults to 5 MB.",type:["number","false"],status:"optional"},title:{doc:"Custom text property. Replaces the default title. Can be disabled using `false`.",type:"string",status:"optional"},text:{doc:"Custom text property. Replaces the default text. Can be disabled using `false`.",type:"string",status:"optional"},download:{doc:"Causes the browser to treat all listed files as downloadable instead of opening them in a new browser tab or window. Defaults to `false`.",type:"boolean",status:"optional"},allowDuplicates:{doc:"Allows uploading of duplicate files. Defaults to `false`.",type:"boolean",status:"optional"},disableDragAndDrop:{doc:"Disables file drag and drop, by removing the drop zone. Defaults to `false`.",type:"boolean",status:"optional"},buttonProps:{doc:"Define any valid Eufemia [Button properties](/uilib/components/button/properties) or HTML attribute inside an object, to customize the upload button behavior and appearance.",type:"ButtonProps",status:"optional"},skeleton:{doc:"Skeleton should be applied when loading content.",type:"boolean",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},o={fileType:{doc:"The name of the accepted file type.",type:"string",status:"required"},fileMaxSize:{doc:"Defines the max file size of the given file type in MB. Use either `0` or `false` to disable. If not provided, it defaults to the value of [Uploads](/uilib/components/upload/properties/#properties) `fileMaxSize` which defaults to 5 MB.",type:["number","false"],status:"optional"}},n={onChange:{doc:"Will be called on `files` changes made by the user. Access the files with `{ files }` (containing each a `fileItem`).",type:"function",status:"optional"},onFileDelete:{doc:"Will be called once a file gets deleted by the user. Access the deleted file with `{ fileItem }`.",type:"function",status:"optional"},onFileClick:{doc:"Will be called once a file gets clicked on by the user. Access the clicked file with `{ fileItem }`.",type:"function",status:"optional"}},a={file:{doc:"The file object. This is the same object as the one returned by the `File` API.",type:"File",status:"required"},id:{doc:"Unique ID for the file item. This ID is generated by the component and is not user-defined.",type:"string",status:"required"},exists:{doc:"Indicates if the file item already exists in the list of files. This is useful for distinguishing between new and existing files.",type:"boolean",status:"optional"},isLoading:{doc:"Indicates if the file item is currently being loaded. This is useful for showing a loading state while the file is being processed.",type:"boolean",status:"optional"},errorMessage:{doc:"Provide an error message to be displayed. This is useful for indicating issues with the file upload process.",type:"React.ReactNode",status:"optional"},description:{doc:"Provide a description to be displayed. This is useful for providing additional information about the file.",type:"React.ReactNode",status:"optional"},removeDeleteButton:{doc:"Set to `true` to remove the delete button from the file item. This is useful for preventing users from deleting files.",type:"boolean",status:"optional"}}},81908:function(e,t,i){var s=i(94515);t.A=s.A},86058:function(e,t,i){i.d(t,{A:function(){return j}});var s=i(42483),o=i(14041),n=i(42275),a=i(81908),l=i(92034),r=i(77352),c=i(29058),d=i(69094),p=i(21436),u=i(64034),f=i(1470),h=i(43350),b=i(15616),y=i(87554),m=i(97728),x=i(31085);const g=(0,s.A)(n.Ay,{target:"ejvypor0"})({name:"1qdk5x4",styles:"td{white-space:nowrap;}"});function j(e){let{localeKey:t,source:i=null}=e;i=(0,o.useMemo)((()=>i||Object.assign((0,p.zu)({},f.A,h.A),y._M)),[i]);const s={},j={},A=(Array.isArray(t)?t:[t]).map((e=>{if(e.includes(".")){const t=e.split(".")[0];return j[t]=j[t]||[],j[t].push(e),t}return e})),w=(e,t,i,o)=>{e=`${o}.${e}`,j[o]&&!j[o].includes(e)||(s[e]=Object.assign(s[e]||{},{[i]:t}))};Object.entries(i).forEach((e=>{let[t,i]=e;A.forEach((e=>{const s=i[e];s?Object.entries(s).forEach((i=>{let[s,o]=i;if("object"==typeof o){const i=`${e}.${s}`;Object.entries(o).forEach((e=>{let[s,o]=e;w(s,o,t,i)}))}else w(s,o,t,e)})):(0,u.R8)(`TranslationsTable: Could not find any translations for key: "${e}", perhaps you misspelled the key's name?`)}))}));const T=Object.keys(i),v=Object.entries(s).map((e=>{let[t,i]=e;return(0,x.jsxs)(a.A,{children:[(0,x.jsx)(l.A,{children:(0,x.jsx)(b.OH,{variant:"prop",children:t})}),Object.entries(i).map(((e,t)=>{let[i,s]=e;return(0,x.jsx)(l.A,{children:"string"==typeof s?s:(0,x.jsx)("pre",{children:JSON.stringify(s,null,2)})},t+i)}))]},t)}));if(0!=v.length)return(0,x.jsxs)(x.Fragment,{children:[(0,x.jsxs)(r.A,{children:["More info about translations can be found in the"," ",(0,x.jsx)(c.Ay,{href:"/uilib/usage/customisation/localization/",children:"general localization"})," ","and"," ",(0,x.jsx)(c.Ay,{href:"/uilib/extensions/forms/getting-started/#localization-and-translation",children:"Eufemia Forms localization"})," ","docs."]}),(0,x.jsx)(n.Ay.ScrollView,{children:(0,x.jsxs)(g,{children:[(0,x.jsx)("thead",{children:(0,x.jsxs)(a.A,{children:[(0,x.jsx)(d.A,{children:"Key"}),T.map((e=>{const{status:t}=m.R[e];return(0,x.jsxs)(d.A,{children:[e,t?` (${t})`:null]},e)}))]})}),(0,x.jsx)("tbody",{children:v})]})})]});(0,u.R8)(`TranslationsTable: Not able to find any translations for input : "${t}", hence not rendering the translations table.`)}},92034:function(e,t,i){var s=i(31666);t.A=s.A}}]);
//# sourceMappingURL=component---src-docs-uilib-components-upload-properties-mdx-2b0017b538cea47c037d.js.map