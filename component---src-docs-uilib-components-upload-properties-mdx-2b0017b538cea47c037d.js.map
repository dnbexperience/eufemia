{"version":3,"file":"component---src-docs-uilib-components-upload-properties-mdx-2b0017b538cea47c037d.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/upload/properties.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/upload/UploadDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/./src/shared/parts/TranslationsTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport TranslationsTable from 'dnb-design-system-portal/src/shared/parts/TranslationsTable';\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {UploadProperties, AcceptedFileTypeProperties, FileItemProperties} from '@dnb/eufemia/src/components/upload/UploadDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: UploadProperties\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"FileItem\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The file item object is representing the files of the Upload component.\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: FileItemProperties\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"AcceptedFileType\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The accepted file type object is used to define file max size for specific file types.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When providing a list of AcceptedFileType to \", _jsx(_components.a, {\n        href: \"/uilib/components/upload/properties/#properties\",\n        children: \"Uploads\"\n      }), \" \", _jsx(_components.code, {\n        children: \"acceptedFileTypes\"\n      }), \", the accepted file types will be presented in a table. Here is an \", _jsx(_components.a, {\n        href: \"/uilib/components/upload/demos/#upload-with-file-max-size-based-on-file-type\",\n        children: \"example\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The table is sorted descending by \", _jsx(_components.code, {\n        children: \"maxFileSize\"\n      }), \". Multiple \", _jsx(_components.code, {\n        children: \"fileType\"\n      }), \" for the same \", _jsx(_components.code, {\n        children: \"maxFileSize\"\n      }), \" is sorted alphabetically ascending by \", _jsx(_components.code, {\n        children: \"fileType\"\n      }), \".\"]\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: AcceptedFileTypeProperties\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Translations\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All translation keys listed in the translations table below, can be used as a component property (like \", _jsx(_components.code, {\n        children: \"title\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"text\"\n      }), \").\"]\n    }), \"\\n\", _jsx(TranslationsTable, {\n      localeKey: \"Upload\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const UploadProperties: PropertiesTableProps = {\n  id: {\n    doc: 'Unique id used with the useUpload hook to manage the files. Needed when wanting to connect with the useUpload hook.',\n    type: ['string', 'Function', 'Object', 'React.Context'],\n    status: 'optional',\n  },\n  children: {\n    doc: 'Content to display below the `title` and `text`. Can be used to add custom content.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  variant: {\n    doc: 'defines the appearance. Use one of these: `normal` or `compact`. Defaults to `normal`.',\n    type: ['normal', 'compact'],\n    status: 'optional',\n  },\n  acceptedFileTypes: {\n    doc: 'List of accepted file types. Either as string or [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype). When providing a list of [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype), the accepted file types will be presented in a table(see [example](/uilib/components/upload/demos/#upload-with-file-max-size-based-on-file-type)).',\n    type: ['Array<string>', 'Array<AcceptedFileType>'],\n    status: 'required',\n  },\n  filesAmountLimit: {\n    doc: 'Defines the amount of files the user can select and upload. Defaults to `100`.',\n    type: 'number',\n    status: 'optional',\n  },\n  fileMaxSize: {\n    doc: 'Defines the max file size of each file in MB. Use either `0` or `false` to disable. Defaults to 5 MB.',\n    type: ['number', 'false'],\n    status: 'optional',\n  },\n  title: {\n    doc: 'Custom text property. Replaces the default title. Can be disabled using `false`.',\n    type: 'string',\n    status: 'optional',\n  },\n  text: {\n    doc: 'Custom text property. Replaces the default text. Can be disabled using `false`.',\n    type: 'string',\n    status: 'optional',\n  },\n  download: {\n    doc: 'Causes the browser to treat all listed files as downloadable instead of opening them in a new browser tab or window. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  allowDuplicates: {\n    doc: 'Allows uploading of duplicate files. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  disableDragAndDrop: {\n    doc: 'Disables file drag and drop, by removing the drop zone. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  buttonProps: {\n    doc: 'Define any valid Eufemia [Button properties](/uilib/components/button/properties) or HTML attribute inside an object, to customize the upload button behavior and appearance.',\n    type: 'ButtonProps',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'Skeleton should be applied when loading content.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const AcceptedFileTypeProperties: PropertiesTableProps = {\n  fileType: {\n    doc: 'The name of the accepted file type.',\n    type: 'string',\n    status: 'required',\n  },\n  fileMaxSize: {\n    doc: 'Defines the max file size of the given file type in MB. Use either `0` or `false` to disable. If not provided, it defaults to the value of [Uploads](/uilib/components/upload/properties/#properties) `fileMaxSize` which defaults to 5 MB.',\n    type: ['number', 'false'],\n    status: 'optional',\n  },\n}\n\nexport const UploadEvents: PropertiesTableProps = {\n  onChange: {\n    doc: 'Will be called on `files` changes made by the user. Access the files with `{ files }` (containing each a `fileItem`).',\n    type: 'function',\n    status: 'optional',\n  },\n  onFileDelete: {\n    doc: 'Will be called once a file gets deleted by the user. Access the deleted file with `{ fileItem }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  onFileClick: {\n    doc: 'Will be called once a file gets clicked on by the user. Access the clicked file with `{ fileItem }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const FileItemProperties: PropertiesTableProps = {\n  file: {\n    doc: 'The file object. This is the same object as the one returned by the `File` API.',\n    type: 'File',\n    status: 'required',\n  },\n  id: {\n    doc: 'Unique ID for the file item. This ID is generated by the component and is not user-defined.',\n    type: 'string',\n    status: 'required',\n  },\n  exists: {\n    doc: 'Indicates if the file item already exists in the list of files. This is useful for distinguishing between new and existing files.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  isLoading: {\n    doc: 'Indicates if the file item is currently being loaded. This is useful for showing a loading state while the file is being processed.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessage: {\n    doc: 'Provide an error message to be displayed. This is useful for indicating issues with the file upload process.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  description: {\n    doc: 'Provide a description to be displayed. This is useful for providing additional information about the file.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  removeDeleteButton: {\n    doc: 'Set to `true` to remove the delete button from the file item. This is useful for preventing users from deleting files.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { useMemo } from 'react'\nimport styled from '@emotion/styled'\nimport { Anchor, P, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { extendDeep, warn } from '@dnb/eufemia/src/shared/component-helper'\nimport globalTranslations from '@dnb/eufemia/src/shared/locales'\nimport formsTranslations from '@dnb/eufemia/src/extensions/forms/constants/locales'\nimport { FormattedCode } from './PropertiesTable'\nimport { Translation } from '@dnb/eufemia/src/shared/Context'\nimport { translationsWithoutEnUS } from '../../core/PortalProviders'\nimport { languageDisplayNames } from '../../core/ChangeLocale'\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nexport default function TranslationsTable({\n  localeKey,\n  source = null,\n}: {\n  localeKey?: string | Array<string>\n  source?: Record<string, Translation>\n}) {\n  source = useMemo(() => {\n    return (\n      source ||\n      Object.assign(\n        extendDeep({}, globalTranslations, formsTranslations),\n        translationsWithoutEnUS,\n      )\n    )\n  }, [source])\n\n  const entries = {}\n  const allowList = {}\n  const localeKeys = (\n    Array.isArray(localeKey) ? localeKey : [localeKey]\n  ).map((key) => {\n    if (key.includes('.')) {\n      const first = key.split('.')[0]\n      allowList[first] = allowList[first] || []\n      allowList[first].push(key)\n      return first\n    }\n\n    return key\n  })\n\n  const addToEntries = (key, translation, locale, localeKey) => {\n    key = `${localeKey}.${key}`\n    if (allowList[localeKey] && !allowList[localeKey].includes(key)) {\n      return\n    }\n    entries[key] = Object.assign(entries[key] || {}, {\n      [locale]: translation,\n    })\n  }\n\n  Object.entries(source).forEach(([locale, translations]) => {\n    localeKeys.forEach((localeKey) => {\n      const translationsObj = translations[localeKey]\n      if (!translationsObj) {\n        warn(\n          `TranslationsTable: Could not find any translations for key: \"${localeKey}\", perhaps you misspelled the key's name?`,\n        )\n        return\n      }\n      Object.entries(translationsObj).forEach(([key, translation]) => {\n        if (typeof translation === 'object') {\n          const nestedKey = `${localeKey}.${key}`\n          Object.entries(translation).forEach(([key, translation]) => {\n            addToEntries(key, translation, locale, nestedKey)\n          })\n        } else {\n          addToEntries(key, translation, locale, localeKey)\n        }\n      })\n    })\n  })\n\n  const locales = Object.keys(source)\n  const tableRows = Object.entries(entries).map(([key, values]) => {\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode variant=\"prop\">{key}</FormattedCode>\n        </Td>\n        {Object.entries(values).map(([locale, value], i) => {\n          return (\n            <Td key={i + locale}>\n              {typeof value === 'string' ? (\n                value\n              ) : (\n                <pre>{JSON.stringify(value, null, 2)}</pre>\n              )}\n            </Td>\n          )\n        })}\n      </Tr>\n    )\n  })\n\n  if (tableRows.length == 0) {\n    warn(\n      `TranslationsTable: Not able to find any translations for input : \"${localeKey}\", hence not rendering the translations table.`,\n    )\n    return\n  }\n\n  return (\n    <>\n      <P>\n        More info about translations can be found in the{' '}\n        <Anchor href=\"/uilib/usage/customisation/localization/\">\n          general localization\n        </Anchor>{' '}\n        and{' '}\n        <Anchor href=\"/uilib/extensions/forms/getting-started/#localization-and-translation\">\n          Eufemia Forms localization\n        </Anchor>{' '}\n        docs.\n      </P>\n      <Table.ScrollView>\n        <StyledTable>\n          <thead>\n            <Tr>\n              <Th>Key</Th>\n              {locales.map((locale) => {\n                const { status } = languageDisplayNames[locale]\n                return (\n                  <Th key={locale}>\n                    {locale}\n                    {status ? ` (${status})` : null}\n                  </Th>\n                )\n              })}\n            </Tr>\n          </thead>\n          <tbody>{tableRows}</tbody>\n        </StyledTable>\n      </Table.ScrollView>\n    </>\n  )\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","a","code","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","UploadProperties","FileItemProperties","href","AcceptedFileTypeProperties","TranslationsTable","localeKey","wrapper","MDXLayout","Th","id","doc","type","status","variant","acceptedFileTypes","filesAmountLimit","fileMaxSize","title","text","download","allowDuplicates","disableDragAndDrop","buttonProps","skeleton","fileType","UploadEvents","onChange","onFileDelete","onFileClick","file","exists","isLoading","errorMessage","description","removeDeleteButton","Tr","StyledTable","_styled","Table","target","name","styles","_ref","source","useMemo","extendDeep","globalTranslations","formsTranslations","translationsWithoutEnUS","entries","allowList","localeKeys","Array","isArray","map","key","includes","first","split","push","addToEntries","translation","locale","forEach","_ref2","translations","translationsObj","_ref3","nestedKey","_ref4","warn","locales","keys","tableRows","_ref5","values","Td","FormattedCode","_ref6","i","value","JSON","stringify","length","P","Anchor","languageDisplayNames"],"sourceRoot":""}