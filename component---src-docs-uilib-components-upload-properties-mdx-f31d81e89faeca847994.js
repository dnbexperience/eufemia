"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[30159],{75132:function(e,t,i){i.r(t);var s=i(52322),o=i(45392),l=i(68230),n=i(85179),a=i(22260);function p(e){const t=Object.assign({h2:"h2",p:"p",a:"a",code:"code"},(0,o.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{children:"Properties"}),"\n",(0,s.jsx)(n.ZP,{props:a.W8}),"\n",(0,s.jsx)(t.h2,{children:"AcceptedFileType"}),"\n",(0,s.jsx)(t.p,{children:"The accepted file type object is used to define file max size for specific file types."}),"\n",(0,s.jsxs)(t.p,{children:["When providing a list of AcceptedFileType to ",(0,s.jsx)(t.a,{href:"/uilib/components/upload/properties/#properties",children:"Uploads"})," ",(0,s.jsx)(t.code,{children:"acceptedFileTypes"}),", the accepted file types will be presented in a table. Here is an ",(0,s.jsx)(t.a,{href:"/uilib/components/upload/demos/#upload-with-file-max-size-based-on-file-type",children:"example"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The table is sorted descending by ",(0,s.jsx)(t.code,{children:"maxFileSize"}),". Multiple ",(0,s.jsx)(t.code,{children:"fileType"})," for the same ",(0,s.jsx)(t.code,{children:"maxFileSize"})," is sorted alphabetically ascending by ",(0,s.jsx)(t.code,{children:"fileType"}),"."]}),"\n",(0,s.jsx)(n.ZP,{props:a.Ts}),"\n",(0,s.jsx)(t.h2,{children:"Translations"}),"\n",(0,s.jsxs)(t.p,{children:["All translation keys listed in the translations table below, can be used as a component property (like ",(0,s.jsx)(t.code,{children:"title"})," or ",(0,s.jsx)(t.code,{children:"text"}),")."]}),"\n",(0,s.jsx)(l.Z,{localeKey:"Upload"})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,o.ah)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(p,e)})):p(e)}},22260:function(e,t,i){i.d(t,{TM:function(){return l},Ts:function(){return o},W8:function(){return s}});const s={acceptedFileTypes:{doc:"List of accepted file types. Either as string or [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype). When providing a list of [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype), the accepted file types will be presented in a table(see [example](/uilib/components/upload/demos/#upload-with-file-max-size-based-on-file-type)).",type:["Array<string>","Array<AcceptedFileType>"],status:"required"},filesAmountLimit:{doc:"Defines the amount of files the user can select and upload. Defaults to 100.",type:"number",status:"optional"},fileMaxSize:{doc:"Defines the max file size of each file in MB. Use either `0` or `false` to disable. Defaults to 5 MB.",type:["number","false"],status:"optional"},title:{doc:"Custom text property. Replaces the default title.",type:"string",status:"optional"},text:{doc:"Custom text property. Replaces the default text.",type:"string",status:"optional"},skeleton:{doc:"Skeleton should be applied when loading content.",type:"boolean",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},o={fileType:{doc:"The name of the accepted file type.",type:"string",status:"required"},fileMaxSize:{doc:"Defines the max file size of the given file type in MB. Use either `0` or `false` to disable. If not provided, it defaults to the value of [Uploads](/uilib/components/upload/properties/#properties) `fileMaxSize` which defaults to 5 MB.",type:["number","false"],status:"optional"}},l={onChange:{doc:"Will be called on `files` changes made by the user. Access the files with `{ files }` (containing each a `fileItem`).",type:"function",status:"optional"},onFileDelete:{doc:"Will be called once a file gets deleted by the user. Access the deleted file with `{ fileItem }`.",type:"function",status:"optional"}}},6210:function(e,t,i){var s=i(30600);t.Z=s.Z},64223:function(e,t,i){var s=i(91859);t.Z=s.Z},41676:function(e,t,i){var s=i(35610);t.Z=s.Z}}]);
//# sourceMappingURL=component---src-docs-uilib-components-upload-properties-mdx-f31d81e89faeca847994.js.map