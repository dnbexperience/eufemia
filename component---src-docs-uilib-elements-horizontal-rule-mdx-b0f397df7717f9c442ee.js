"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[78875],{59284:function(e,n,r){r.r(n),r.d(n,{default:function(){return h}});var s=r(52322),t=r(45392),i=r(44464);const o=()=>(0,s.jsx)(i.Z,{hideCode:!0,"data-visual-test":"hr-default",children:"\nSomething\n<Hr />\nSomething\n\n"}),d=()=>(0,s.jsx)(i.Z,{hideCode:!0,"data-visual-test":"hr-fullscreen",children:"\nSomething\n<Hr fullscreen />\nSomething\n\n"}),l=()=>(0,s.jsx)(i.Z,{hideCode:!0,"data-visual-test":"hr-thickness",children:"\n<Dl>\n  <Dt>Light 0.5px</Dt>\n  <Dd>\n    <Hr light />\n  </Dd>\n</Dl>\n<Dl>\n  <Dt>Default 1px</Dt>\n  <Dd>\n    <Hr />\n  </Dd>\n</Dl>\n<Dl>\n  <Dt>Medium 1.5px</Dt>\n  <Dd>\n    <Hr medium />\n  </Dd>\n</Dl>\n\n"});function c(e){const n=Object.assign({h1:"h1",p:"p",code:"code",h2:"h2",pre:"pre",a:"a"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{children:"Horizontal Rule"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"<hr />"})," tag in HTML stands for horizontal rule and is used to insert a horizontal rule or a thematic break in an HTML page to divide or separate document sections. The ",(0,s.jsx)(n.code,{children:"<hr />"})," tag is an empty tag and it does not require an end tag."]}),"\n",(0,s.jsx)(n.h2,{children:"Customize hr color"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"/* Example of how to change the line color */\n.dnb-hr:after {\n  color: var(--color-ocean-green);\n}\n"})}),"\n",(0,s.jsx)(o,{}),"\n",(0,s.jsx)(n.h2,{children:"Horizontal Rule in fullscreen"}),"\n",(0,s.jsxs)(n.p,{children:["Use the modifier ",(0,s.jsx)(n.code,{children:"dnb-hr--fullscreen"})," to get a full screen rule. You can also set just ",(0,s.jsx)(n.code,{children:"fullscreen={true}"}),"."]}),"\n",(0,s.jsx)(d,{}),"\n",(0,s.jsx)(n.h2,{children:"Horizontal Rule thickness / hairline"}),"\n",(0,s.jsxs)(n.p,{children:["Use the modifier ",(0,s.jsx)(n.code,{children:"dnb-hr--light"})," to get a ",(0,s.jsx)(n.code,{children:"0.5px"})," rule. You can also set just ",(0,s.jsx)(n.code,{children:"light={true}"})," or ",(0,s.jsx)(n.code,{children:"medium={true}"}),"."]}),"\n",(0,s.jsx)(l,{}),"\n",(0,s.jsx)(n.h2,{children:"Horizontal Rule thickness tests"}),"\n",(0,s.jsxs)(n.p,{children:["Browsers do render borders differently. They also handle sizing differently. E.g. will ",(0,s.jsx)(n.code,{children:"1.5px"})," be rounded up to ",(0,s.jsx)(n.code,{children:"2px"})," in Chromium based browsers (on size related CSS properties)."]}),"\n",(0,s.jsxs)(n.p,{children:["In order to address different solutions, ",(0,s.jsx)(n.a,{href:"https://r8ljo.csb.app/",children:"here is a test case"}),", finding the right balance of creating ",(0,s.jsx)(n.code,{children:"0.5px"})," / ",(0,s.jsx)(n.code,{children:"1.5px"})," lines, browser compatibility and correct look. As per year 2020, Firefox does the best job on showing the line thickness correct."]})]})}var h=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(c,e)})):c(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-elements-horizontal-rule-mdx-b0f397df7717f9c442ee.js.map