{"version":3,"file":"component---src-docs-uilib-elements-image-demos-mdx-e34c2b1f655ef7f4809d.js","mappings":"wOAUO,MAAMA,EAAoBA,KAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,kCAAAC,UAAA,EAAAC,UAAA,EAAAC,SAAA,4QAqBpBC,EAA4BA,KAAAL,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,sCAAAC,UAAA,EAAAC,UAAA,EAAAC,SAAA,gHAiB5BE,EAAsBA,KAAAN,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,oCAAAC,UAAA,EAAAC,UAAA,EAAAC,SAAA,0SAsBtBG,EAAuBA,KAAAP,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,qCAAAE,UAAA,EAAAC,SAAA,onBClEpC,SAASI,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBd,SAAU,EAACJ,EAAAA,EAAAA,KAAKU,EAAYG,GAAI,CAC9BT,SAAU,UACR,MAAMJ,EAAAA,EAAAA,KAAKU,EAAYI,GAAI,CAC7BV,SAAU,wBACR,MAAMJ,EAAAA,EAAAA,KAAKD,EAAmB,CAAC,GAAI,MAAMC,EAAAA,EAAAA,KAAKU,EAAYI,GAAI,CAChEV,SAAU,8BACR,MAAMJ,EAAAA,EAAAA,KAAKK,EAA2B,CAAC,GAAI,MAAML,EAAAA,EAAAA,KAAKU,EAAYI,GAAI,CACxEV,SAAU,uBACR,MAAMJ,EAAAA,EAAAA,KAAKM,EAAqB,CAAC,GAAI,MAAMN,EAAAA,EAAAA,KAAKU,EAAYI,GAAI,CAClEV,SAAU,gCACR,MAAMJ,EAAAA,EAAAA,KAAKO,EAAsB,CAAC,KAE1C,CAOA,MANA,SAAoBE,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOI,GAAYpB,EAAAA,EAAAA,KAAKoB,EAAWT,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DL,UAAUJ,EAAAA,EAAAA,KAAKQ,EAAmBC,MAC9BD,EAAkBC,EAC1B,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/elements/image/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/elements/image/demos.mdx"],"sourcesContent":["/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { Skeleton, ToggleButton, Img } from '@dnb/eufemia/src'\nimport styled from '@emotion/styled'\n\nexport const ImagePlainExample = () => (\n  <ComponentBox data-visual-test=\"image-plain\" hideCode>\n    {() => {\n      const StyledImg = styled(Img)`\n        border-radius: 1rem;\n      `\n      const CustomImage = () => {\n        return (\n          <StyledImg\n            width=\"100\"\n            height=\"100\"\n            alt=\"DNB logo\"\n            src=\"/dnb/android-chrome-192x192.png\"\n          />\n        )\n      }\n      return <CustomImage />\n    }}\n  </ComponentBox>\n)\n\nexport const ImageInvalidSourceExample = () => (\n  <ComponentBox data-visual-test=\"image-no-source\" hideCode>\n    {() => {\n      const MyImg = Img\n\n      return (\n        <MyImg\n          width=\"100\"\n          height=\"100\"\n          alt=\"Alt text\"\n          src=\"https://invalid\"\n        />\n      )\n    }}\n  </ComponentBox>\n)\n\nexport const ImageCaptionExample = () => (\n  <ComponentBox data-visual-test=\"image-caption\" hideCode>\n    {() => {\n      const StyledImg = styled(Img)`\n        border-radius: 1rem;\n      `\n      const CustomImage = () => {\n        return (\n          <StyledImg\n            width=\"100\"\n            height=\"100\"\n            alt=\"Alt text\"\n            caption=\"Caption text\"\n            src=\"/dnb/android-chrome-192x192.png\"\n          />\n        )\n      }\n      return <CustomImage />\n    }}\n  </ComponentBox>\n)\n\nexport const ImageSkeletonExample = () => (\n  <ComponentBox data-visual-test=\"image-skeleton\">\n    {() => {\n      const StyledImg = styled(Img)`\n        border-radius: 1rem;\n      `\n      const CustomImage = () => {\n        const [state, setState] = React.useState(true)\n        return (\n          <Skeleton show={state}>\n            <StyledImg\n              width=\"100\"\n              height=\"100\"\n              alt=\"DNB logo\"\n              src=\"/dnb/android-chrome-192x192.png\"\n            />\n            <br />\n            <Skeleton.Exclude>\n              <ToggleButton\n                checked={state}\n                on_change={({ checked }) => setState(checked)}\n                top=\"large\"\n              >\n                Toggle\n              </ToggleButton>\n            </Skeleton.Exclude>\n          </Skeleton>\n        )\n      }\n      return <CustomImage />\n    }}\n  </ComponentBox>\n)\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {ImagePlainExample, ImageInvalidSourceExample, ImageCaptionExample, ImageSkeletonExample} from 'Docs/uilib/elements/image/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Basic image element\"\n    }), \"\\n\", _jsx(ImagePlainExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Image with invalid source\"\n    }), \"\\n\", _jsx(ImageInvalidSourceExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Image with caption\"\n    }), \"\\n\", _jsx(ImageCaptionExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Image element with skeleton\"\n    }), \"\\n\", _jsx(ImageSkeletonExample, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["ImagePlainExample","_jsx","ComponentBox","hideCode","noInline","children","ImageInvalidSourceExample","ImageCaptionExample","ImageSkeletonExample","_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","_jsxs","_Fragment","wrapper","MDXLayout"],"sourceRoot":""}