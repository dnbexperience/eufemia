{"version":3,"file":"component---src-docs-uilib-elements-lists-properties-mdx-a4d19a19858de91e601a.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/lists/DlDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/elements/lists/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/ElementDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/lists/OlDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/lists/UlDocs.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../shared/types'\nimport { ElementPropertiesWithoutSkeleton } from './../ElementDocs'\n\nexport const DlProperties: PropertiesTableProps = {\n  layout: {\n    doc: 'Sets the layout of the list. Can be `vertical`, `horizontal` or `grid`. Defaults to `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  ...ElementPropertiesWithoutSkeleton,\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {DlProperties} from '@dnb/eufemia/src/elements/lists/DlDocs';\nimport {OlProperties} from '@dnb/eufemia/src/elements/lists/OlDocs';\nimport {UlProperties} from '@dnb/eufemia/src/elements/lists/UlDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      children: [_jsx(_components.code, {\n        children: \"Dl\"\n      }), \" Properties\"]\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: DlProperties\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [_jsx(_components.code, {\n        children: \"Ol\"\n      }), \" Properties\"]\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: OlProperties\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [_jsx(_components.code, {\n        children: \"Ul\"\n      }), \" Properties\"]\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: UlProperties\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td:not(.description) {\n    white-space: nowrap;\n  }\n`\n\nconst colors = {\n  type: {\n    default: 'var(--color-success-green)',\n    primitive: 'var(--color-success-green)',\n    string: 'var(--color-fire-red)',\n  },\n  value: {\n    default: 'var(--color-success-green)',\n    undefined: 'var(--color-black-55)',\n    string: 'var(--color-fire-red)',\n  },\n}\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = isString(children)\n          ? colors.type.string\n          : isPrimitive(children)\n          ? colors.type.primitive\n          : colors.type.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n      case 'value': {\n        style.color = isString(children)\n          ? colors.value.string\n          : children === 'undefined' || children === 'null'\n          ? colors.value.undefined\n          : colors.value.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td className=\"description\">\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th className=\"description\">Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\nfunction isString(str: string) {\n  return [\"'\", '\"', '`'].includes(str.substring(0, 1))\n}\n\nfunction isPrimitive(type: string) {\n  return [\n    'boolean',\n    'true',\n    'false',\n    'number',\n    'bigint',\n    'string',\n    'symbol',\n  ].includes(typeWithoutArray(type))\n}\n\nfunction typeWithoutArray(type: string) {\n  if (type.endsWith('[]')) {\n    return type.slice(0, -2)\n  } else if (type.startsWith('Array<') && type.endsWith('>')) {\n    return type.slice(6, -1)\n  }\n  return type\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('[')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","import { PropertiesTableProps } from '../shared/types'\n\nexport const ElementPropertiesWithoutSkeleton: PropertiesTableProps = {\n  innerRef: {\n    doc: 'Send along a custom React Ref.',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  children: {\n    doc: 'Contents.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const ElementProperties: PropertiesTableProps = {\n  ...ElementPropertiesWithoutSkeleton,\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeletonMethod: {\n    doc: 'Can be `shape`, `font` or `form`. Defaults to `font`.',\n    type: 'string',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../shared/types'\n\nimport { ElementPropertiesWithoutSkeleton } from './../ElementDocs'\n\nexport const OlProperties: PropertiesTableProps = {\n  inside: {\n    doc: 'Defines the position of the marker.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  outside: {\n    doc: 'Defines the position of the marker (default).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  nested: {\n    doc: 'Will ensure a nested structure of several lists.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  ...ElementPropertiesWithoutSkeleton,\n}\n","import { PropertiesTableProps } from '../../shared/types'\nimport { ElementPropertiesWithoutSkeleton } from './../ElementDocs'\n\nexport const UlProperties: PropertiesTableProps = {\n  inside: {\n    doc: 'Defines the position of the marker.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  outside: {\n    doc: 'Defines the position of the marker (default).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  nested: {\n    doc: 'Will ensure a nested structure of several lists.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  ...ElementPropertiesWithoutSkeleton,\n}\n"],"names":["DlProperties","layout","doc","type","status","ElementPropertiesWithoutSkeleton","_createMdxContent","props","_components","Object","assign","h2","code","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","OlProperties","UlProperties","wrapper","MDXLayout","basicComponents","p","StyledTable","_styled","Table","target","name","styles","colors","default","primitive","string","undefined","FormattedCode","_ref","variant","strikethrough","style","rest","textDecoration","color","isString","includes","endsWith","slice","startsWith","typeWithoutArray","background","boxShadow","_ref2","valueType","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","defaultValue","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","className","ReactMarkdown","convertToCamelCase","Th","str","substring","forEach","replace","RegExp","innerRef","inside","outside","nested"],"sourceRoot":""}