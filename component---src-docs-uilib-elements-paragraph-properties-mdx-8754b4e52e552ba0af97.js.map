{"version":3,"file":"component---src-docs-uilib-elements-paragraph-properties-mdx-8754b4e52e552ba0af97.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/elements/paragraph/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/typography/PDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/typography/TypographyDocs.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {ParagraphProperties} from '@dnb/eufemia/src/elements/typography/PDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: ParagraphProperties\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td:not(.description) {\n    white-space: nowrap;\n  }\n`\n\nconst colors = {\n  type: {\n    default: 'var(--color-success-green)',\n    primitive: 'var(--color-success-green)',\n    string: 'var(--color-fire-red)',\n  },\n  value: {\n    default: 'var(--color-success-green)',\n    undefined: 'var(--color-black-55)',\n    string: 'var(--color-fire-red)',\n  },\n}\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = isString(children)\n          ? colors.type.string\n          : isPrimitive(children)\n          ? colors.type.primitive\n          : colors.type.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n      case 'value': {\n        style.color = isString(children)\n          ? colors.value.string\n          : children === 'undefined' || children === 'null'\n          ? colors.value.undefined\n          : colors.value.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td className=\"description\">\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th className=\"description\">Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\nfunction isString(str: string) {\n  return [\"'\", '\"', '`'].includes(str.substring(0, 1))\n}\n\nfunction isPrimitive(type: string) {\n  return [\n    'boolean',\n    'true',\n    'false',\n    'number',\n    'bigint',\n    'string',\n    'symbol',\n  ].includes(typeWithoutArray(type))\n}\n\nfunction typeWithoutArray(type: string) {\n  if (type.endsWith('[]')) {\n    return type.slice(0, -2)\n  } else if (type.startsWith('Array<') && type.endsWith('>')) {\n    return type.slice(6, -1)\n  }\n  return type\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('[')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../shared/types'\nimport { TypographyProperties } from './TypographyDocs'\n\nexport const ParagraphProperties: PropertiesTableProps = {\n  ...TypographyProperties,\n  medium: {\n    doc: 'Tells the component to use the medium font-weight styling `dnb-t__weight--medium`. More details [here](/uilib/typography/font-weight).',\n    type: 'boolean',\n    status: 'deprecated',\n  },\n  bold: {\n    doc: 'Tells the component to use the bold font-weight styling class `dnb-t__weight--bold`. More details [here](/uilib/typography/font-weight).',\n    type: 'boolean',\n    status: 'deprecated',\n  },\n  modifier: {\n    doc: 'String containing a combination of modifiers, used to set both font-size and weight in one property. e.g. `x-small medium` would make the paragraph extra small and medium.',\n    type: 'string',\n    status: 'deprecated',\n  },\n}\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const TypographyProperties: PropertiesTableProps = {\n  element: {\n    doc: 'Defines the Element Type, like `p`.',\n    type: ['HTMLElement', 'string'],\n    status: 'optional',\n  },\n  size: {\n    doc: 'Sets the font size, also sets the line-height if `lineHeight` prop is not set.',\n    type: [\n      `'x-small'`,\n      `'small'`,\n      `'basis'`,\n      `'medium'`,\n      `'large'`,\n      `'x-large'`,\n      `'xx-large'`,\n    ],\n    status: 'optional',\n  },\n  lineHeight: {\n    doc: 'Sets the line height, will use same value as `size` if not set.',\n    type: [\n      `'x-small'`,\n      `'small'`,\n      `'basis'`,\n      `'medium'`,\n      `'large'`,\n      `'x-large'`,\n      `'xx-large'`,\n    ],\n    status: 'optional',\n  },\n  align: {\n    doc: 'Sets the text alignment.',\n    type: [`'center'`, `'left'`, `'right'`],\n    status: 'optional',\n  },\n  family: {\n    doc: 'Sets the font family.',\n    type: [`'basis'`, `'heading'`, `'monospace'`],\n    status: 'optional',\n  },\n  weight: {\n    doc: 'Sets the font weight.',\n    type: [`'regular'`, `'medium'`],\n    status: 'optional',\n  },\n  decoration: {\n    doc: 'Sets the font decoration.',\n    type: `'underline'`,\n    status: 'optional',\n  },\n  slant: {\n    doc: 'Sets the font style.',\n    type: `'italic'`,\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","ParagraphProperties","wrapper","MDXLayout","basicComponents","p","StyledTable","_styled","Table","target","name","styles","colors","default","primitive","string","undefined","FormattedCode","_ref","variant","strikethrough","style","rest","textDecoration","color","isString","includes","type","endsWith","slice","startsWith","typeWithoutArray","background","boxShadow","code","_ref2","valueType","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","defaultValue","doc","status","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","className","ReactMarkdown","convertToCamelCase","Th","str","substring","forEach","replace","RegExp","TypographyProperties","medium","bold","modifier","element","size","lineHeight","align","family","weight","decoration","slant"],"sourceRoot":""}