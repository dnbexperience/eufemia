{"version":3,"file":"component---src-docs-uilib-extensions-forms-base-fields-array-selection-properties-mdx-8f863110f70c4d898d25.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/ArraySelection/ArraySelectionDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/base-fields/ArraySelection/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueWritePropsDocs.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../../../shared/types'\n\nexport const arraySelectionProperties: PropertiesTableProps = {\n  variant: {\n    doc: 'Choice of UI feature.',\n    type: [`'checkbox'`, `'button'`, `'checkbox-button'`],\n    defaultValue: `'checkbox'`,\n    status: 'optional',\n  },\n  optionsLayout: {\n    doc: 'Layout for the list of options.',\n    type: [`'horizontal'`, `'vertical'`],\n    defaultValue: `'vertical'`,\n    status: 'optional',\n  },\n  children: {\n    doc: 'For providing `<Field.Option>` components.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  size: {\n    doc: 'The sizes you can choose is small (1.5rem), default (2rem), medium (2.5rem) and large (3rem) are supported component sizes. Defaults to default / null. Also, if you define a number like size=\"2\" then it will be forwarded as the input element attribute. Consider rather setting field sizes with [Form.Appearance](/uilib/extensions/forms/Form/Appearance/).',\n    type: 'string',\n    status: 'optional',\n  },\n  data: {\n    doc: 'Data to be used for the component. The object needs to have a `value` and a `title` property. Provide the Dropdown or Autocomplete data in the format documented here: [Dropdown](/uilib/components/dropdown) and [Autocomplete](/uilib/components/autocomplete) documentation.',\n    type: 'array',\n    status: 'optional',\n  },\n  dataPath: {\n    doc: 'The path to the context data (Form.Handler). The context data object needs to have a `value` and a `title` property. The generated options will be placed above given JSX based children.',\n    type: 'string',\n    status: 'optional',\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {arraySelectionProperties} from '@dnb/eufemia/src/extensions/forms/Field/ArraySelection/ArraySelectionDocs';\nimport {FieldProperties} from '@dnb/eufemia/src/extensions/forms/Field/FieldDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field-specific properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: arraySelectionProperties,\n      showDefaultValue: true\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"General properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: FieldProperties,\n      valueType: \"Array<string | number>\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td:not(.description) {\n    white-space: nowrap;\n  }\n`\n\nconst colors = {\n  type: {\n    default: 'var(--color-success-green)',\n    primitive: 'var(--color-success-green)',\n    string: 'var(--color-fire-red)',\n  },\n  value: {\n    default: 'var(--color-success-green)',\n    undefined: 'var(--color-black-55)',\n    string: 'var(--color-fire-red)',\n  },\n}\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = isString(children)\n          ? colors.type.string\n          : isPrimitive(children)\n          ? colors.type.primitive\n          : colors.type.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n      case 'value': {\n        style.color = isString(children)\n          ? colors.value.string\n          : children === 'undefined' || children === 'null'\n          ? colors.value.undefined\n          : colors.value.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td className=\"description\">\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th className=\"description\">Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\nfunction isString(str: string) {\n  return [\"'\", '\"', '`'].includes(str.substring(0, 1))\n}\n\nfunction isPrimitive(type: string) {\n  return [\n    'boolean',\n    'true',\n    'false',\n    'number',\n    'bigint',\n    'string',\n    'symbol',\n  ].includes(typeWithoutArray(type))\n}\n\nfunction typeWithoutArray(type: string) {\n  if (type.endsWith('[]')) {\n    return type.slice(0, -2)\n  } else if (type.startsWith('Array<') && type.endsWith('>')) {\n    return type.slice(6, -1)\n  }\n  return type\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('[')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { FieldBlockSharedProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  DataValueWritePropsEvents,\n  DataValueWritePropsProperties,\n} from '../hooks/DataValueWritePropsDocs'\n\nexport const FieldProperties: PropertiesTableProps = {\n  ...DataValueWritePropsProperties,\n  ...FieldBlockSharedProperties,\n}\n\nexport const FieldEvents: PropertiesTableProps = {\n  ...DataValueWritePropsEvents,\n}\n\nexport const getFieldEventsWithTypes = (\n  valueType: { type: string; optional?: boolean } = undefined,\n  additionalArgsType: { type: string; optional?: boolean } = undefined\n): PropertiesTableProps => {\n  const value = valueType\n    ? `value${valueType.optional ? '?' : ''}: ${valueType.type}`\n    : 'value'\n\n  const add = additionalArgsType\n    ? `, additionalArgs${additionalArgsType.optional ? '?' : ''}: ${\n        additionalArgsType.type\n      }`\n    : ''\n\n  const typeString = `(${value}${add}) => void`\n\n  return {\n    ...FieldEvents,\n    onChange: {\n      ...FieldEvents.onChange,\n      type: typeString,\n    },\n    onFocus: {\n      ...FieldEvents.onFocus,\n      type: typeString,\n    },\n    onBlur: {\n      ...FieldEvents.onBlur,\n      type: typeString,\n    },\n  }\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const FieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  help: {\n    doc: 'Provide help content for the field using `title` and `content` as a string or React.Node. Additionally, you can set `open` to `true` to display the inline help, set the `breakout` property to `false` to disable the breakout of the inline help content, or use `renderAs` set to `dialog` to render the content in a [Dialog](/uilib/components/dialog/) (recommended for larger amounts of content).',\n    type: 'object',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  layoutOptions: {\n    doc: 'Use this to set additional options for the `horizontal` layout. E.g. `{ width: \"medium\" }`. You can also use a custom width `{number}rem`. Instead of a width, you can use a min/max width. E.g. `{ minWidth: \"6rem\", maxWidth: \"12rem\" }`.',\n    type: 'object',\n    status: 'optional',\n  },\n  width: {\n    doc: 'Will set the width for the whole block. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: 'Will set the width for its contents. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\n/** For internal use only */\nexport const FieldBlockProperties: PropertiesTableProps = {\n  ...FieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading sizes](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  labelHeight: {\n    doc: 'Defines the height of an component (size prop), so the label can be aligned correctly. Can be `default`, `small`, `medium`, `large`.',\n    type: 'string',\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  disableStatusSummary: {\n    doc: 'Use `true` to disable the error summary.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'string',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const DataValueWritePropsProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: \"Info message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  warning: {\n    doc: \"Warning message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  error: {\n    doc: \"Error message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['Error', 'FormError', 'Array<Error | FormError>', 'function'],\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set to `true`, the field will give an error if the value fails the required validation. When set to `false`, the field will not be required, but will add a \"(optional)\" suffix to the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSuffix: {\n    doc: 'Will append an additional text to the label, like \"(optional)\". When using `inheritLabel`, the suffix will not be inherited. NB: The visual appearance of the `labelSuffix` may change in the future.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set to `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set to `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateContinuously: {\n    doc: 'Set to `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages.',\n    type: 'object',\n    status: 'optional',\n  },\n  onChangeValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered on every change done by the user. The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered when the user leaves a field (e.g., blurring a text input or closing a dropdown). The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'Transforms the value before it gets forwarded to the form data object (context) or returned as the `onChange` value parameter. The first parameter is the internal value. Some fields to support a second parameter, like the SelectCountry, where the country object is given.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const DataValueWritePropsEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).\",\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n}\n"],"names":["arraySelectionProperties","variant","doc","type","defaultValue","status","optionsLayout","children","size","data","dataPath","_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","_jsxs","_Fragment","_jsx","PropertiesTable","showDefaultValue","FieldProperties","valueType","wrapper","MDXLayout","basicComponents","p","StyledTable","_styled","Table","target","name","styles","colors","default","primitive","string","undefined","FormattedCode","_ref","strikethrough","style","rest","textDecoration","color","isString","includes","endsWith","slice","startsWith","typeWithoutArray","background","boxShadow","code","_ref2","camelCase","omit","keys","tableRows","entries","map","_ref3","key","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","className","ReactMarkdown","convertToCamelCase","Th","str","substring","forEach","replace","RegExp","DataValueWritePropsProperties","FieldBlockSharedProperties","FieldEvents","DataValueWritePropsEvents","getFieldEventsWithTypes","additionalArgsType","typeString","optional","onChange","onFocus","onBlur","label","labelDescription","labelSrOnly","help","layout","layoutOptions","width","contentWidth","FieldBlockProperties","labelSize","labelHeight","asFieldset","align","disableStatusSummary","composition","disabled","value","path","info","warning","error","emptyValue","required","labelSuffix","schema","validateInitially","validateUnchanged","validateContinuously","errorMessages","onChangeValidator","onBlurValidator","transformIn","transformOut"],"sourceRoot":""}