"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[65376],{42972:function(e,n,s){s.r(n);var r=s(31085),i=s(71184);function a(e){const n=Object.assign({h2:"h2",pre:"pre",code:"code",p:"p",a:"a",ul:"ul",li:"li",strong:"strong"},(0,i.R)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{children:"Import"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Field } from '@dnb/eufemia/extensions/forms'\nrender(<Field.Boolean />)\n"})}),"\n",(0,r.jsx)(n.h2,{children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Field.Boolean"})," is the base component for receiving user input where the target data is of type ",(0,r.jsx)(n.code,{children:"boolean"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["There is a corresponding ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/Value/Boolean",children:"Value.Boolean"})," component."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Field } from '@dnb/eufemia/extensions/forms'\nrender(<Field.Boolean path=\"/myState\" />)\n"})}),"\n",(0,r.jsx)(n.h2,{children:"Relevant links"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/dnbexperience/eufemia/tree/main/packages/dnb-eufemia/src/extensions/forms/base-fields/Boolean",children:"Source code"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/dnbexperience/eufemia/tree/main/packages/dnb-design-system-portal/src/docs/uilib/extensions/forms/base-fields/Boolean",children:"Docs code"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{children:"Indeterminate checkbox"}),"\n",(0,r.jsxs)(n.p,{children:["Here is a indeterminate state (partially checked) ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/base-fields/Indeterminate/",children:"working example"}),"."]}),"\n",(0,r.jsx)(n.h2,{children:"Schema validation"}),"\n",(0,r.jsxs)(n.p,{children:["You can use a schema to validate the value with either ",(0,r.jsx)(n.code,{children:"const"})," or ",(0,r.jsx)(n.code,{children:"enum"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Using Zod schemas"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Form, Field, z } from '@dnb/eufemia/extensions/forms'\n\nconst schema = z.object({\n  myField: z.literal(true), // or z.enum([true])\n})\n\nrender(\n  <Form.Handler schema={schema} data={{ myField: false }}>\n    <Field.Boolean path=\"/myField\" />\n  </Form.Handler>,\n)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Using JSON Schema (Ajv)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import {\n  Form,\n  Field,\n  makeAjvInstance,\n} from '@dnb/eufemia/extensions/forms'\n\nconst ajv = makeAjvInstance()\nconst schema = {\n  type: 'object',\n  properties: {\n    myField: {\n      type: 'boolean',\n      const: true, // or enum: [true]\n    },\n  },\n}\n\nrender(\n  <Form.Handler\n    schema={schema}\n    ajvInstance={ajv}\n    data={{ myField: false }}\n  >\n    <Field.Boolean path=\"/myField\" />\n  </Form.Handler>,\n)\n"})})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,i.R)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(a,e)})):a(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-base-fields-boolean-info-mdx-c23c4294157342254d4c.js.map