{"version":3,"file":"component---src-docs-uilib-extensions-forms-base-fields-boolean-properties-mdx-ada297e7d635c333aa80.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/base-fields/Boolean/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/TranslationsTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/Boolean/BooleanDocs.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/Toggle/ToggleDocs.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueWritePropsDocs.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport TranslationsTable from 'dnb-design-system-portal/src/shared/parts/TranslationsTable';\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {FieldProperties} from '@dnb/eufemia/src/extensions/forms/Field/FieldDocs';\nimport {BooleanProperties} from '@dnb/eufemia/src/extensions/forms/Field/Boolean/BooleanDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field-specific properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: BooleanProperties\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"General properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: FieldProperties,\n      valueType: \"boolean\",\n      omit: ['layout', 'layoutOptions']\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Translations\"\n    }), \"\\n\", _jsx(TranslationsTable, {\n      localeKey: ['BooleanField', 'Field']\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { useMemo } from 'react'\nimport styled from '@emotion/styled'\nimport { Anchor, P, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { extendDeep, warn } from '@dnb/eufemia/src/shared/component-helper'\nimport globalTranslations from '@dnb/eufemia/src/shared/locales'\nimport formsTranslations from '@dnb/eufemia/src/extensions/forms/constants/locales'\nimport { FormattedCode } from './PropertiesTable'\nimport { Translation } from '@dnb/eufemia/src/shared/Context'\nimport { translationsWithoutEnUS } from '../../core/PortalProviders'\nimport { languageDisplayNames } from '../../core/ChangeLocale'\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nexport default function TranslationsTable({\n  localeKey,\n  source = null,\n}: {\n  localeKey?: string | Array<string>\n  source?: Record<string, Translation>\n}) {\n  source = useMemo(() => {\n    return (\n      source ||\n      Object.assign(\n        extendDeep({}, globalTranslations, formsTranslations),\n        translationsWithoutEnUS,\n      )\n    )\n  }, [source])\n\n  const entries = {}\n  const allowList = {}\n  const localeKeys = (\n    Array.isArray(localeKey) ? localeKey : [localeKey]\n  ).map((key) => {\n    if (key.includes('.')) {\n      const first = key.split('.')[0]\n      allowList[first] = allowList[first] || []\n      allowList[first].push(key)\n      return first\n    }\n\n    return key\n  })\n\n  const addToEntries = (key, translation, locale, localeKey) => {\n    key = `${localeKey}.${key}`\n    if (allowList[localeKey] && !allowList[localeKey].includes(key)) {\n      return\n    }\n    entries[key] = Object.assign(entries[key] || {}, {\n      [locale]: translation,\n    })\n  }\n\n  Object.entries(source).forEach(([locale, translations]) => {\n    localeKeys.forEach((localeKey) => {\n      const translationsObj = translations[localeKey]\n      if (!translationsObj) {\n        warn(\n          `TranslationsTable: Could not find any translations for key: \"${localeKey}\", perhaps you misspelled the key's name?`,\n        )\n        return\n      }\n      Object.entries(translationsObj).forEach(([key, translation]) => {\n        if (typeof translation === 'object') {\n          const nestedKey = `${localeKey}.${key}`\n          Object.entries(translation).forEach(([key, translation]) => {\n            addToEntries(key, translation, locale, nestedKey)\n          })\n        } else {\n          addToEntries(key, translation, locale, localeKey)\n        }\n      })\n    })\n  })\n\n  const locales = Object.keys(source)\n  const tableRows = Object.entries(entries).map(([key, values]) => {\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode variant=\"prop\">{key}</FormattedCode>\n        </Td>\n        {Object.entries(values).map(([locale, value], i) => {\n          return (\n            <Td key={i + locale}>\n              {typeof value === 'string' ? (\n                value\n              ) : (\n                <pre>{JSON.stringify(value, null, 2)}</pre>\n              )}\n            </Td>\n          )\n        })}\n      </Tr>\n    )\n  })\n\n  if (tableRows.length == 0) {\n    warn(\n      `TranslationsTable: Not able to find any translations for input : \"${localeKey}\", hence not rendering the translations table.`,\n    )\n    return\n  }\n\n  return (\n    <>\n      <P>\n        More info about translations can be found in the{' '}\n        <Anchor href=\"/uilib/usage/customisation/localization/\">\n          general localization\n        </Anchor>{' '}\n        and{' '}\n        <Anchor href=\"/uilib/extensions/forms/getting-started/#localization-and-translation\">\n          Eufemia Forms localization\n        </Anchor>{' '}\n        docs.\n      </P>\n      <Table.ScrollView>\n        <StyledTable>\n          <thead>\n            <Tr>\n              <Th>Key</Th>\n              {locales.map((locale) => {\n                const { status } = languageDisplayNames[locale]\n                return (\n                  <Th key={locale}>\n                    {locale}\n                    {status ? ` (${status})` : null}\n                  </Th>\n                )\n              })}\n            </Tr>\n          </thead>\n          <tbody>{tableRows}</tbody>\n        </StyledTable>\n      </Table.ScrollView>\n    </>\n  )\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../../shared/types'\nimport { ToggleProperties } from '../Toggle/ToggleDocs'\n\nexport const BooleanProperties: PropertiesTableProps = {\n  trueText: {\n    doc: 'Text to show in the UI when value is `true`.',\n    type: 'string',\n    status: 'optional',\n  },\n  falseText: {\n    doc: 'Text to show in the UI when value is `false`.',\n    type: 'string',\n    status: 'optional',\n  },\n  variant: {\n    doc: 'Choice of input feature. Can be: `checkbox`, `button`, `checkbox-button` or `buttons`.',\n    type: 'string',\n    status: 'optional',\n  },\n  size: ToggleProperties.size,\n}\n\nexport const BooleanEvents: PropertiesTableProps = {\n  onClick: {\n    doc: 'Will be called on click.',\n    type: '(value: unknown, { event: ClickEvent, preventDefault: () => void }) => void',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { FieldBlockSharedProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  DataValueWritePropsEvents,\n  DataValueWritePropsProperties,\n} from '../hooks/DataValueWritePropsDocs'\n\nexport const FieldProperties: PropertiesTableProps = {\n  ...DataValueWritePropsProperties,\n  ...FieldBlockSharedProperties,\n}\n\nexport const FieldEvents: PropertiesTableProps = {\n  ...DataValueWritePropsEvents,\n}\n\nexport const getFieldEventsWithTypes = (\n  valueType: { type: string; optional?: boolean } = undefined,\n  additionalArgsType: { type: string; optional?: boolean } = undefined\n): PropertiesTableProps => {\n  const value = valueType\n    ? `value${valueType.optional ? '?' : ''}: ${valueType.type}`\n    : 'value'\n\n  const add = additionalArgsType\n    ? `, additionalArgs${additionalArgsType.optional ? '?' : ''}: ${\n        additionalArgsType.type\n      }`\n    : ''\n\n  const typeString = `(${value}${add}) => void`\n\n  return {\n    ...FieldEvents,\n    onChange: {\n      ...FieldEvents.onChange,\n      type: typeString,\n    },\n    onFocus: {\n      ...FieldEvents.onFocus,\n      type: typeString,\n    },\n    onBlur: {\n      ...FieldEvents.onBlur,\n      type: typeString,\n    },\n  }\n}\n","import { PropertiesTableProps } from '../../../../shared/types'\n\nexport const ToggleProperties: PropertiesTableProps = {\n  valueOn: {\n    doc: 'Source data value when the toggle is in the \"on-state\" (varies based on UI variant).',\n    type: ['string', 'number', 'boolean'],\n    status: 'required',\n  },\n  valueOff: {\n    doc: 'Source data value when the toggle is in the \"off-state\".',\n    type: ['string', 'number', 'boolean'],\n    status: 'required',\n  },\n  textOn: {\n    doc: 'Text to show in the UI when in the \"on-state\".',\n    type: 'string',\n    status: 'optional',\n  },\n  textOff: {\n    doc: 'Text to show in the UI when in the \"off-state\".',\n    type: 'string',\n    status: 'optional',\n  },\n  size: {\n    doc: 'The sizes you can choose is small (1.5rem), default (2rem), medium (2.5rem) and large (3rem) are supported component sizes. Defaults to default / null. Also, if you define a number like size=\"2\" then it will be forwarded as the input element attribute. Consider rather setting field sizes with [Form.Appearance](/uilib/extensions/forms/Form/Appearance/).',\n    type: 'string',\n    status: 'optional',\n  },\n  variant: {\n    doc: 'Choice of input feature. Can be: `checkbox`, `button`, `checkbox-button` or `buttons`.',\n    type: 'string',\n    status: 'optional',\n  },\n}\n\nexport const ToggleEvents: PropertiesTableProps = {\n  onClick: {\n    doc: 'Will be called on click.',\n    type: '(value: unknown, { event: ClickEvent, preventDefault: () => void }) => void',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const FieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescriptionInline: {\n    doc: 'If true, the labelDescription will be displayed on the same line as the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSize: {\n    doc: 'Define the font-size of the label based on the [font-size](/uilib/typography/font-size/) table.',\n    type: ['medium', 'large'],\n    status: 'optional',\n  },\n  help: {\n    doc: 'Provide help content for the field using `title` and `content` as a string or React.Node. Additionally, you can set `open` to `true` to display the inline help, set the `breakout` property to `false` to disable the breakout of the inline help content, or use `renderAs` set to `dialog` to render the content in a [Dialog](/uilib/components/dialog/) (recommended for larger amounts of content).',\n    type: 'object',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  layoutOptions: {\n    doc: 'Use this to set additional options for the `horizontal` layout. E.g. `{ width: \"medium\" }`. You can also use a custom width `{number}rem`. Instead of a width, you can use a min/max width. E.g. `{ minWidth: \"6rem\", maxWidth: \"12rem\" }`.',\n    type: 'object',\n    status: 'optional',\n  },\n  width: {\n    doc: 'Will set the width for the whole block. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: 'Will set the width for its contents. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\n/** For internal use only */\nexport const FieldBlockProperties: PropertiesTableProps = {\n  ...FieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading sizes](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  labelHeight: {\n    doc: 'Defines the height of an component (size prop), so the label can be aligned correctly. Can be `default`, `small`, `medium`, `large`.',\n    type: 'string',\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  disableStatusSummary: {\n    doc: 'Use `true` to disable the error summary.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'true',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const DataValueWritePropsProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: \"Info message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  warning: {\n    doc: \"Warning message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  error: {\n    doc: \"Error message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['Error', 'FormError', 'Array<Error | FormError>', 'function'],\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set to `true`, the field will give an error if the value fails the required validation. When set to `false`, the field will not be required, but will add a \"(optional)\" suffix to the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSuffix: {\n    doc: 'Will append an additional text to the label, like \"(optional)\". When using `inheritLabel`, the suffix will not be inherited. NB: The visual appearance of the `labelSuffix` may change in the future.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set to `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set to `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateContinuously: {\n    doc: 'Set to `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages. The messages can be a React.ReactNode or a string.',\n    type: 'object',\n    status: 'optional',\n  },\n  onChangeValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered on every change done by the user. The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered when the user leaves a field (e.g., blurring a text input or closing a dropdown). The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'Transforms the value before it gets forwarded to the form data object (context) or returned as the `onChange` value parameter. The first parameter is the internal value. Some fields to support a second parameter, like the SelectCountry, where the country object is given.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const DataValueWritePropsEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).\",\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","BooleanProperties","FieldProperties","valueType","omit","TranslationsTable","localeKey","wrapper","MDXLayout","StyledTable","_styled","Table","target","name","styles","_ref","source","useMemo","extendDeep","globalTranslations","formsTranslations","translationsWithoutEnUS","entries","allowList","localeKeys","Array","isArray","map","key","includes","first","split","push","addToEntries","translation","locale","forEach","_ref2","translations","translationsObj","_ref3","nestedKey","_ref4","warn","locales","keys","tableRows","_ref5","values","Tr","Td","FormattedCode","variant","_ref6","i","value","JSON","stringify","length","P","Anchor","href","Th","status","languageDisplayNames","trueText","doc","type","falseText","size","ToggleProperties","BooleanEvents","onClick","DataValueWritePropsProperties","FieldBlockSharedProperties","FieldEvents","DataValueWritePropsEvents","getFieldEventsWithTypes","additionalArgsType","undefined","typeString","optional","onChange","onFocus","onBlur","valueOn","valueOff","textOn","textOff","ToggleEvents","label","labelDescription","labelDescriptionInline","labelSrOnly","labelSize","help","layout","layoutOptions","width","contentWidth","FieldBlockProperties","labelHeight","asFieldset","align","disableStatusSummary","composition","disabled","defaultValue","path","info","warning","error","emptyValue","required","labelSuffix","schema","validateInitially","validateUnchanged","validateContinuously","errorMessages","onChangeValidator","onBlurValidator","transformIn","transformOut"],"sourceRoot":""}