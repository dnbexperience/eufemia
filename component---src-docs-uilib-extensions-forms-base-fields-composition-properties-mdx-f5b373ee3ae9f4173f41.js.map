{"version":3,"file":"component---src-docs-uilib-extensions-forms-base-fields-composition-properties-mdx-f5b373ee3ae9f4173f41.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/Composition/CompositionDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/base-fields/Composition/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../../../shared/types'\nimport { FieldBlockProperties } from '../../FieldBlock/FieldBlockDocs'\n\nexport const CompositionProperties: PropertiesTableProps = {\n  label: FieldBlockProperties.label,\n  labelDescription: FieldBlockProperties.labelDescription,\n  labelSrOnly: FieldBlockProperties.labelSrOnly,\n  width: FieldBlockProperties.width,\n  contentWidth: FieldBlockProperties.contentWidth,\n  disabled: FieldBlockProperties.disabled,\n  error: FieldBlockProperties.error,\n  warning: FieldBlockProperties.warning,\n  info: FieldBlockProperties.info,\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {CompositionProperties} from '@dnb/eufemia/src/extensions/forms/Field/Composition/CompositionDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: CompositionProperties\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colors = {\n  type: {\n    default: 'var(--color-success-green)',\n    primitive: 'var(--color-success-green)',\n    string: 'var(--color-fire-red)',\n  },\n  value: {\n    default: 'var(--color-success-green)',\n    undefined: 'var(--color-black-55)',\n    string: 'var(--color-fire-red)',\n  },\n}\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = isString(children)\n          ? colors.type.string\n          : isPrimitive(children)\n          ? colors.type.primitive\n          : colors.type.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n      case 'value': {\n        style.color = isString(children)\n          ? colors.value.string\n          : children === 'undefined' || children === 'null'\n          ? colors.value.undefined\n          : colors.value.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\nfunction isString(str: string) {\n  return [\"'\", '\"', '`'].includes(str.substring(0, 1))\n}\n\nfunction isPrimitive(type: string) {\n  return [\n    'boolean',\n    'true',\n    'false',\n    'number',\n    'bigint',\n    'string',\n    'symbol',\n  ].includes(typeWithoutArray(type))\n}\n\nfunction typeWithoutArray(type: string) {\n  if (type.endsWith('[]')) {\n    return type.slice(0, -2)\n  } else if (type.startsWith('Array<') && type.endsWith('>')) {\n    return type.slice(6, -1)\n  }\n  return type\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('[')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const FieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  help: {\n    doc: 'Provide help content for the field using `title` and `content` as a string or React.Node. Additionally, you can set `open` to `true` to display the inline help, set the `breakout` property to `false` to disable the breakout of the inline help content, or use `renderAs` set to `dialog` to render the content in a [Dialog](/uilib/components/dialog/) (recommended for larger amounts of content).',\n    type: 'object',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  layoutOptions: {\n    doc: 'Use this to set additional options for the `horizontal` layout. E.g. `{ width: \"medium\" }`. You can also use a custom width `{number}rem`. Instead of a width, you can use a min/max width. E.g. `{ minWidth: \"6rem\", maxWidth: \"12rem\" }`.',\n    type: 'object',\n    status: 'optional',\n  },\n  width: {\n    doc: 'Will set the width for the whole block. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: 'Will set the width for its contents. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\n/** For internal use only */\nexport const FieldBlockProperties: PropertiesTableProps = {\n  ...FieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading sizes](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  labelHeight: {\n    doc: 'Defines the height of an component (size prop), so the label can be aligned correctly. Can be `default`, `small`, `medium`, `large`.',\n    type: 'string',\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  disableStatusSummary: {\n    doc: 'Use `true` to disable the error summary.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'string',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n"],"names":["CompositionProperties","label","FieldBlockProperties","labelDescription","labelSrOnly","width","contentWidth","disabled","error","warning","info","align","doc","type","status","_createMdxContent","props","_components","Object","assign","h2","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","wrapper","MDXLayout","basicComponents","p","StyledTable","_styled","Table","target","name","styles","colors","default","primitive","string","undefined","FormattedCode","_ref","variant","strikethrough","style","rest","textDecoration","color","isString","includes","endsWith","slice","startsWith","typeWithoutArray","background","boxShadow","code","_ref2","valueType","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","defaultValue","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","str","substring","forEach","replace","RegExp","FieldBlockSharedProperties","help","layout","layoutOptions","labelSize","labelHeight","asFieldset","disableStatusSummary","composition"],"sourceRoot":""}