{"version":3,"file":"component---src-docs-uilib-extensions-forms-base-fields-indeterminate-demos-mdx-e6653f3336550c0d1e0f.js","mappings":"kZAIO,MAAMA,EAA+BA,KAC1CC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,okBAiCWC,EAAmCA,KAC9CH,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAG,UAAA,EAAAF,SAAA,0zCA+DWG,EAAgCA,KAC3CL,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,wwBCnGF,SAASI,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,KAAM,SACLC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAK/B,OAJKC,GAAUC,EAAqB,YAAY,GAC3CD,GAAuCC,EAAqB,yCAAyC,GACrGD,GAAwCC,EAAqB,0CAA0C,GACvGD,GAA2CC,EAAqB,6CAA6C,IAC3GC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBjB,SAAU,EAACF,EAAAA,EAAAA,KAAKQ,EAAYG,GAAI,CAC9BT,SAAU,UACR,MAAMF,EAAAA,EAAAA,KAAKQ,EAAYI,GAAI,CAC7BV,SAAU,4CACR,MAAMF,EAAAA,EAAAA,KAAKgB,EAAuC,CAAC,GAAI,MAAMhB,EAAAA,EAAAA,KAAKQ,EAAYI,GAAI,CACpFV,SAAU,+BACR,MAAMF,EAAAA,EAAAA,KAAKgB,EAAwC,CAAC,GAAI,MAAME,EAAAA,EAAAA,MAAMV,EAAYI,GAAI,CACtFV,SAAU,CAAC,iBAAiBF,EAAAA,EAAAA,KAAKQ,EAAYK,KAAM,CACjDX,SAAU,SACR,MAAMF,EAAAA,EAAAA,KAAKQ,EAAYK,KAAM,CAC/BX,SAAU,YACR,SAASF,EAAAA,EAAAA,KAAKQ,EAAYK,KAAM,CAClCX,SAAU,iBAEV,MAAMF,EAAAA,EAAAA,KAAKgB,EAA2C,CAAC,KAE/D,CAOA,MANA,SAAoBT,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOM,GAAYrB,EAAAA,EAAAA,KAAKqB,EAAWZ,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DL,UAAUF,EAAAA,EAAAA,KAAKM,EAAmBC,MAC9BD,EAAkBC,EAC1B,EAEA,SAASU,EAAqBK,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/base-fields/Indeterminate/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/base-fields/Indeterminate/demos.mdx"],"sourcesContent":["import { Card, Flex } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, Form } from '@dnb/eufemia/src/extensions/forms'\n\nexport const MixedIndeterminateDependence = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler onChange={console.log}>\n        <Card stack>\n          <Field.Indeterminate\n            label=\"Indeterminate\"\n            dependencePaths={['/child1', '/child2', '/child3']}\n          />\n\n          <Field.Toggle\n            label=\"Checkbox 1\"\n            path=\"/child1\"\n            valueOn=\"what-ever\"\n            valueOff=\"you-name-it\"\n            required\n          />\n\n          <Field.Boolean label=\"Checkbox 2\" path=\"/child2\" required />\n\n          <Field.Toggle\n            label=\"Checkbox 3\"\n            path=\"/child3\"\n            valueOn=\"on\"\n            valueOff=\"off\"\n          />\n        </Card>\n\n        <Form.SubmitButton />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const PropagateIndeterminateDependence = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyFormContent = () => {\n          const { data } = Form.useData()\n          return (\n            <>\n              <Card stack>\n                <Field.Selection label=\"Propagate to\" path=\"/propagate\">\n                  <Field.Option value=\"checked\">Checked</Field.Option>\n                  <Field.Option value=\"unchecked\">Unchecked</Field.Option>\n                  <Field.Option value=\"auto\">Auto</Field.Option>\n                </Field.Selection>\n\n                <Field.Indeterminate\n                  label=\"Indeterminate\"\n                  dependencePaths={['/child1', '/child2', '/child3']}\n                  propagateIndeterminateState={data['propagate']}\n                />\n\n                <Field.Toggle\n                  label=\"Checkbox 1\"\n                  path=\"/child1\"\n                  valueOn=\"what-ever\"\n                  valueOff=\"you-name-it\"\n                />\n\n                <Field.Boolean label=\"Checkbox 2\" path=\"/child2\" />\n\n                <Field.Toggle\n                  label=\"Checkbox 3\"\n                  path=\"/child3\"\n                  valueOn=\"on\"\n                  valueOff=\"off\"\n                />\n              </Card>\n            </>\n          )\n        }\n\n        const MyForm = () => {\n          return (\n            <Form.Handler\n              id=\"propagate-demo\"\n              defaultData={{\n                propagate: 'checked',\n                child1: 'you-name-it',\n                child2: true,\n                child3: 'on',\n              }}\n              onChange={console.log}\n            >\n              <MyFormContent />\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const NestedIndeterminateDependence = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler onChange={console.log}>\n        <Card stack>\n          <Field.Indeterminate\n            label=\"1\"\n            path=\"/p1\"\n            dependencePaths={['/c2.1', '/p2.2', '/c3.1', '/c3.2']}\n          />\n\n          <Flex.Stack left=\"large\">\n            <Field.Boolean label=\"2.1\" path=\"/c2.1\" />\n            <Field.Indeterminate\n              label=\"2.2\"\n              valueOn=\"what-ever\"\n              valueOff=\"you-name-it\"\n              path=\"/p2.2\"\n              dependencePaths={['/c3.1', '/c3.2']}\n            />\n\n            <Flex.Stack left=\"large\">\n              <Field.Boolean label=\"3.1\" path=\"/c3.1\" />\n              <Field.Toggle\n                label=\"3.2\"\n                path=\"/c3.2\"\n                valueOn=\"what-ever\"\n                valueOff=\"you-name-it\"\n              />\n            </Flex.Stack>\n          </Flex.Stack>\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.MixedIndeterminateDependence) _missingMdxReference(\"Examples.MixedIndeterminateDependence\", true);\n  if (!Examples.NestedIndeterminateDependence) _missingMdxReference(\"Examples.NestedIndeterminateDependence\", true);\n  if (!Examples.PropagateIndeterminateDependence) _missingMdxReference(\"Examples.PropagateIndeterminateDependence\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Indeterminate state (partially checked)\"\n    }), \"\\n\", _jsx(Examples.MixedIndeterminateDependence, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Nested indeterminate state\"\n    }), \"\\n\", _jsx(Examples.NestedIndeterminateDependence, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Propagate to \", _jsx(_components.code, {\n        children: \"auto\"\n      }), \", \", _jsx(_components.code, {\n        children: \"checked\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"unchecked\"\n      })]\n    }), \"\\n\", _jsx(Examples.PropagateIndeterminateDependence, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["MixedIndeterminateDependence","_jsx","ComponentBox","children","PropagateIndeterminateDependence","noInline","NestedIndeterminateDependence","_createMdxContent","props","_components","Object","assign","h2","h3","code","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error"],"sourceRoot":""}