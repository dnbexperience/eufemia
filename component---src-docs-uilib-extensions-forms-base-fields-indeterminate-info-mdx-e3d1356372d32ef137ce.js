"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[23811],{38419:function(e,n,s){s.r(n);var t=s(31085),i=s(71184);function c(e){const n=Object.assign({h2:"h2",pre:"pre",code:"code",p:"p",ul:"ul",li:"li",a:"a"},(0,i.R)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{children:"Import"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Field } from '@dnb/eufemia/extensions/forms'\nrender(<Field.Indeterminate />)\n"})}),"\n",(0,t.jsx)(n.h2,{children:"Description"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Field.Indeterminate"})," component is used to display and handle the indeterminate state of a checkbox. It is an uncontrolled component, meaning that the state is managed automatically."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Field } from '@dnb/eufemia/extensions/forms'\nrender(\n  <Field.Indeterminate\n    dependencePaths={['/checkbox1', '/checkbox2', '/checkbox3']}\n    path=\"/checkboxParent\"\n  />,\n)\n"})}),"\n",(0,t.jsx)(n.h2,{children:"Relevant links"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/dnbexperience/eufemia/tree/main/packages/dnb-eufemia/src/extensions/forms/base-fields/Indeterminate",children:"Source code"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/dnbexperience/eufemia/tree/main/packages/dnb-design-system-portal/src/docs/uilib/extensions/forms/base-fields/Indeterminate",children:"Docs code"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"It should only be used in combination with checkbox looking variants."}),"\n",(0,t.jsxs)(n.p,{children:["Under the hood the ",(0,t.jsx)(n.a,{href:"/uilib/extensions/forms/base-fields/Toggle/",children:"Field.Toggle"})," base field is used. That means you can use all the properties from the ",(0,t.jsx)(n.code,{children:"Toggle"})," component."]}),"\n",(0,t.jsx)(n.h2,{children:"Details about the state handling"}),"\n",(0,t.jsx)(n.p,{children:"The indeterminate state of a parent checkbox should be shown when some children checkboxes are checked, but not all. In detail:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["When all children are checked, the parent should get checked.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When the parent gets checked (clicked), all children should get checked."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["When all children are unchecked, the parent should get unchecked.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When the parent gets unchecked (clicked), all children should get unchecked."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["When some children are checked, the parent should be set in an indeterminate state.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["When the parent gets clicked, all children should get checked. This behavior can be changed to the opposite or ",(0,t.jsx)(n.code,{children:"auto"})," by using the ",(0,t.jsx)(n.code,{children:"propagateIndeterminateState"})," property. Auto means that the parent will switch from its current state to be inverted."]}),"\n"]}),"\n"]}),"\n"]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,i.R)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(c,e)})):c(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-base-fields-indeterminate-info-mdx-e3d1356372d32ef137ce.js.map