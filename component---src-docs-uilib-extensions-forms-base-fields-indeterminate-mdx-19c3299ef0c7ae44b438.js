"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[66327,72851,98493],{29836:function(e,n,t){t.r(n);var a=t(52322),l=t(45392),c=t(62891),d=t(48349);function i(e){return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(c.default,{}),"\n",(0,a.jsx)(d.default,{})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(i,e)})):i()}},48349:function(e,n,t){t.r(n),t.d(n,{default:function(){return h}});var a={};t.r(a),t.d(a,{MixedIndeterminateDependence:function(){return i},NestedIndeterminateDependence:function(){return s}});var l=t(52322),c=t(45392),d=t(75333);const i=()=>(0,l.jsx)(d.Z,{children:'<Form.Handler onChange={console.log}>\n  <Card stack>\n    <Field.Indeterminate\n      dependencePaths={[\'/child1\', \'/child2\', \'/child3\']}\n      label="Indeterminate"\n    />\n\n    <Field.Toggle\n      label="Checkbox 1"\n      path="/child1"\n      valueOn="what-ever"\n      valueOff="you-name-it"\n      required\n    />\n\n    <Field.Boolean label="Checkbox 2" path="/child2" required />\n\n    <Field.Toggle\n      label="Checkbox 3"\n      path="/child3"\n      valueOn="on"\n      valueOff="off"\n    />\n  </Card>\n\n  <Form.SubmitButton />\n</Form.Handler>\n'}),s=()=>(0,l.jsx)(d.Z,{children:'<Form.Handler onChange={console.log}>\n  <Card stack>\n    <Field.Indeterminate\n      label="1"\n      path="/p1"\n      dependencePaths={[\'/c2.1\', \'/p2.2\', \'/c3.1\', \'/c3.2\']}\n    />\n\n    <Flex.Stack left="large">\n      <Field.Boolean label="2.1" path="/c2.1" />\n      <Field.Indeterminate\n        label="2.2"\n        valueOn="what-ever"\n        valueOff="you-name-it"\n        path="/p2.2"\n        dependencePaths={[\'/c3.1\', \'/c3.2\']}\n      />\n\n      <Flex.Stack left="large">\n        <Field.Boolean label="3.1" path="/c3.1" />\n        <Field.Toggle\n          label="3.2"\n          path="/c3.2"\n          valueOn="what-ever"\n          valueOff="you-name-it"\n        />\n      </Flex.Stack>\n    </Flex.Stack>\n  </Card>\n</Form.Handler>\n'});function r(e){const n=Object.assign({h2:"h2",h3:"h3"},(0,c.ah)(),e.components);return a||o("Examples",!1),i||o("Examples.MixedIndeterminateDependence",!0),s||o("Examples.NestedIndeterminateDependence",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{children:"Demos"}),"\n",(0,l.jsx)(n.h3,{children:"Indeterminate state (partially checked)"}),"\n",(0,l.jsx)(i,{}),"\n",(0,l.jsx)(n.h3,{children:"Nested indeterminate state"}),"\n",(0,l.jsx)(s,{})]})}var h=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,l.jsx)(n,Object.assign({},e,{children:(0,l.jsx)(r,e)})):r(e)};function o(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},62891:function(e,n,t){t.r(n);var a=t(52322),l=t(45392);function c(e){const n=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",a:"a",ul:"ul",li:"li"},(0,l.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{children:"Description"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Field.Indeterminate"})," component is used to display and handle the indeterminate state of a checkbox. It is an uncontrolled component, meaning that the state is managed automatically."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { Field } from '@dnb/eufemia/extensions/forms'\nrender(\n  <Field.Indeterminate\n    dependencePaths={['/checkbox1', '/checkbox2', '/checkbox3']}\n    path=\"/checkboxParent\"\n  />,\n)\n"})}),"\n",(0,a.jsx)(n.p,{children:"It should only be used in combination with checkbox looking variants."}),"\n",(0,a.jsxs)(n.p,{children:["Under the hood the ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/base-fields/Toggle/",children:"Toggle"})," base field is used. That means you can use all the props from the ",(0,a.jsx)(n.code,{children:"Toggle"})," component."]}),"\n",(0,a.jsx)(n.h2,{children:"Details about the state handling"}),"\n",(0,a.jsx)(n.p,{children:"The indeterminate state of a parent checkbox should be shown when some children checkboxes are checked, but not all. In detail:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["When all children are checked, the the parent should get checked.","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"When the parent gets checked (clicked), all children should get checked."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["When all children are unchecked, the parent should get unchecked.","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"When the parent gets unchecked (clicked), all children should get unchecked."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["When some children are checked, the parent should be set in an indeterminate state.","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["When the parent gets clicked, all children should get checked. This behavior can be changed to the opposite or ",(0,a.jsx)(n.code,{children:"auto"})," by using the ",(0,a.jsx)(n.code,{children:"propagateIndeterminateState"})," prop. Auto means that the parent will switch from its current state to be inverted."]}),"\n"]}),"\n"]}),"\n"]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(c,e)})):c(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-base-fields-indeterminate-mdx-19c3299ef0c7ae44b438.js.map