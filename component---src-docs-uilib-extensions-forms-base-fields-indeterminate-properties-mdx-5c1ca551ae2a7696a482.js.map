{"version":3,"file":"component---src-docs-uilib-extensions-forms-base-fields-indeterminate-properties-mdx-5c1ca551ae2a7696a482.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/Indeterminate/IndeterminateDocs.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/base-fields/Indeterminate/properties.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/Toggle/ToggleDocs.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueWritePropsDocs.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../../../shared/types'\nimport { ToggleProperties } from '../Toggle/ToggleDocs'\n\nObject.assign(ToggleProperties, {\n  valueOn: {\n    ...ToggleProperties.valueOn,\n    status: 'optional',\n  },\n  valueOff: {\n    ...ToggleProperties.valueOff,\n    status: 'optional',\n  },\n})\n\nexport const IndeterminateProperties: PropertiesTableProps = {\n  dependencePaths: {\n    doc: 'Provide an array with the related paths of other [Toggle](/uilib/extensions/forms/base-fields/Toggle/) og [Boolean](/uilib/extensions/forms/base-fields/Boolean/) fields.',\n    type: 'array',\n    status: 'required',\n  },\n  propagateIndeterminateState: {\n    doc: 'When `checked`, the dependent checkboxes will always be set to \"checked\" when in indeterminate state. When `unchecked`, the dependent checkboxes will be set to \"unchecked\" when in indeterminate state. When \"auto\", the dependent checkboxes will get the inverted state from where the (this) parent checkbox is in. Default is `true`.',\n    type: ['checked', 'unchecked', 'auto'],\n    status: 'optional',\n  },\n  ...ToggleProperties,\n  textOn: undefined,\n  textOff: undefined,\n  variant: undefined,\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {FieldProperties} from '@dnb/eufemia/src/extensions/forms/Field/FieldDocs';\nimport {IndeterminateProperties} from '@dnb/eufemia/src/extensions/forms/Field/Indeterminate/IndeterminateDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field-specific properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: IndeterminateProperties\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"General properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: FieldProperties,\n      valueType: \"any\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { FieldBlockSharedProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  DataValueWritePropsEvents,\n  DataValueWritePropsProperties,\n} from '../hooks/DataValueWritePropsDocs'\n\nexport const FieldProperties: PropertiesTableProps = {\n  ...DataValueWritePropsProperties,\n  ...FieldBlockSharedProperties,\n}\n\nexport const FieldEvents: PropertiesTableProps = {\n  ...DataValueWritePropsEvents,\n}\n\nexport const getFieldEventsWithTypes = (\n  valueType: { type: string; optional?: boolean } = undefined,\n  additionalArgsType: { type: string; optional?: boolean } = undefined\n): PropertiesTableProps => {\n  const value = valueType\n    ? `value${valueType.optional ? '?' : ''}: ${valueType.type}`\n    : 'value'\n\n  const add = additionalArgsType\n    ? `, additionalArgs${additionalArgsType.optional ? '?' : ''}: ${\n        additionalArgsType.type\n      }`\n    : ''\n\n  const typeString = `(${value}${add}) => void`\n\n  return {\n    ...FieldEvents,\n    onChange: {\n      ...FieldEvents.onChange,\n      type: typeString,\n    },\n    onFocus: {\n      ...FieldEvents.onFocus,\n      type: typeString,\n    },\n    onBlur: {\n      ...FieldEvents.onBlur,\n      type: typeString,\n    },\n  }\n}\n","import { PropertiesTableProps } from '../../../../shared/types'\n\nexport const ToggleProperties: PropertiesTableProps = {\n  valueOn: {\n    doc: 'Source data value when the toggle is in the \"on-state\" (varies based on UI variant).',\n    type: ['string', 'number', 'boolean'],\n    status: 'required',\n  },\n  valueOff: {\n    doc: 'Source data value when the toggle is in the \"off-state\".',\n    type: ['string', 'number', 'boolean'],\n    status: 'required',\n  },\n  textOn: {\n    doc: 'Text to show in the UI when in the \"on-state\".',\n    type: 'string',\n    status: 'optional',\n  },\n  textOff: {\n    doc: 'Text to show in the UI when in the \"off-state\".',\n    type: 'string',\n    status: 'optional',\n  },\n  size: {\n    doc: 'The sizes you can choose is small (1.5rem), default (2rem), medium (2.5rem) and large (3rem) are supported component sizes. Defaults to default / null. Also, if you define a number like size=\"2\" then it will be forwarded as the input element attribute. Consider rather setting field sizes with [Form.Appearance](/uilib/extensions/forms/Form/Appearance/).',\n    type: 'string',\n    status: 'optional',\n  },\n  variant: {\n    doc: 'Choice of input feature. Can be: `checkbox`, `button`, `checkbox-button` or `buttons`.',\n    type: 'string',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const FieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescriptionInline: {\n    doc: 'If true, the labelDescription will be displayed on the same line as the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  help: {\n    doc: 'Provide help content for the field using `title` and `content` as a string or React.Node. Additionally, you can set `open` to `true` to display the inline help, set the `breakout` property to `false` to disable the breakout of the inline help content, or use `renderAs` set to `dialog` to render the content in a [Dialog](/uilib/components/dialog/) (recommended for larger amounts of content).',\n    type: 'object',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  layoutOptions: {\n    doc: 'Use this to set additional options for the `horizontal` layout. E.g. `{ width: \"medium\" }`. You can also use a custom width `{number}rem`. Instead of a width, you can use a min/max width. E.g. `{ minWidth: \"6rem\", maxWidth: \"12rem\" }`.',\n    type: 'object',\n    status: 'optional',\n  },\n  width: {\n    doc: 'Will set the width for the whole block. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: 'Will set the width for its contents. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\n/** For internal use only */\nexport const FieldBlockProperties: PropertiesTableProps = {\n  ...FieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading sizes](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  labelHeight: {\n    doc: 'Defines the height of an component (size prop), so the label can be aligned correctly. Can be `default`, `small`, `medium`, `large`.',\n    type: 'string',\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  disableStatusSummary: {\n    doc: 'Use `true` to disable the error summary.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'true',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const DataValueWritePropsProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: \"Info message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  warning: {\n    doc: \"Warning message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  error: {\n    doc: \"Error message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['Error', 'FormError', 'Array<Error | FormError>', 'function'],\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set to `true`, the field will give an error if the value fails the required validation. When set to `false`, the field will not be required, but will add a \"(optional)\" suffix to the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSuffix: {\n    doc: 'Will append an additional text to the label, like \"(optional)\". When using `inheritLabel`, the suffix will not be inherited. NB: The visual appearance of the `labelSuffix` may change in the future.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set to `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set to `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateContinuously: {\n    doc: 'Set to `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages.',\n    type: 'object',\n    status: 'optional',\n  },\n  onChangeValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered on every change done by the user. The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered when the user leaves a field (e.g., blurring a text input or closing a dropdown). The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'Transforms the value before it gets forwarded to the form data object (context) or returned as the `onChange` value parameter. The first parameter is the internal value. Some fields to support a second parameter, like the SelectCountry, where the country object is given.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const DataValueWritePropsEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).\",\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n}\n"],"names":["Object","assign","ToggleProperties","valueOn","status","valueOff","IndeterminateProperties","dependencePaths","doc","type","propagateIndeterminateState","textOn","undefined","textOff","variant","_createMdxContent","props","_components","h2","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","FieldProperties","valueType","wrapper","MDXLayout","Td","Th","Tr","DataValueWritePropsProperties","FieldBlockSharedProperties","FieldEvents","DataValueWritePropsEvents","getFieldEventsWithTypes","additionalArgsType","typeString","optional","onChange","onFocus","onBlur","size","label","labelDescription","labelDescriptionInline","labelSrOnly","help","layout","layoutOptions","width","contentWidth","FieldBlockProperties","labelSize","labelHeight","asFieldset","align","disableStatusSummary","composition","disabled","value","defaultValue","path","info","warning","error","emptyValue","required","labelSuffix","schema","validateInitially","validateUnchanged","validateContinuously","errorMessages","onChangeValidator","onBlurValidator","transformIn","transformOut"],"sourceRoot":""}