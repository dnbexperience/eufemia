{"version":3,"file":"component---src-docs-uilib-extensions-forms-base-fields-indeterminate-properties-mdx-c93e9f69e4dd6a9ceb85.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/Indeterminate/IndeterminateDocs.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/base-fields/Indeterminate/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/Toggle/ToggleDocs.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueDocs.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../../../shared/types'\nimport { ToggleProperties } from '../Toggle/ToggleDocs'\n\nObject.assign(ToggleProperties, {\n  valueOn: {\n    ...ToggleProperties.valueOn,\n    status: 'optional',\n  },\n  valueOff: {\n    ...ToggleProperties.valueOff,\n    status: 'optional',\n  },\n})\n\nexport const IndeterminateProperties: PropertiesTableProps = {\n  dependencePaths: {\n    doc: 'Provide an array with the related paths of other [Toggle](/uilib/extensions/forms/base-fields/Toggle/) og [Boolean](/uilib/extensions/forms/base-fields/Boolean/) fields.',\n    type: 'array',\n    status: 'required',\n  },\n  propagateIndeterminateState: {\n    doc: 'When `checked`, the dependent checkboxes will always be set to \"checked\" when in indeterminate state. When `unchecked`, the dependent checkboxes will be set to \"unchecked\" when in indeterminate state. When \"auto\", the dependent checkboxes will get the inverted state from where the (this) parent checkbox is in. Default is `true`.',\n    type: ['checked', 'unchecked', 'auto'],\n    status: 'optional',\n  },\n  ...ToggleProperties,\n  textOn: undefined,\n  textOff: undefined,\n  variant: undefined,\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {fieldProperties} from '@dnb/eufemia/src/extensions/forms/Field/FieldDocs';\nimport {IndeterminateProperties} from '@dnb/eufemia/src/extensions/forms/Field/Indeterminate/IndeterminateDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field-specific props\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: IndeterminateProperties\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"General props\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: fieldProperties,\n      valueType: \"any\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colorValue = 'var(--color-success-green)'\nconst colorString = 'var(--color-fire-red)'\nconst colorType = 'var(--color-violet)'\nconst colorUndefined = 'var(--color-black-55)'\n\nconst FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = children.startsWith(`'`) ? colorString : colorType\n        // falls through\n      }\n      case 'value': {\n        style.color = children.startsWith(`'`)\n          ? colorString\n          : children === 'undefined'\n          ? colorUndefined\n          : colorValue\n        // falls through\n      }\n      default: {\n        style.background = 'none'\n        style.boxShadow = 'none'\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props)\n  const tableRows = Object.entries(props).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nfunction formatName(name: string): React.ReactNode | string {\n  if (name.includes('/')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { fieldBlockSharedProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  dataValueEvents,\n  dataValueProperties,\n} from '../hooks/DataValueDocs'\n\nexport const fieldProperties: PropertiesTableProps = {\n  ...dataValueProperties,\n  ...fieldBlockSharedProperties,\n}\n\nexport const fieldEvents: PropertiesTableProps = {\n  ...dataValueEvents,\n}\n","import { PropertiesTableProps } from '../../../../shared/types'\n\nexport const ToggleProperties: PropertiesTableProps = {\n  valueOn: {\n    doc: 'Source data value when the toggle is in the \"on-state\" (varies based on UI variant).',\n    type: ['string', 'number', 'boolean'],\n    status: 'required',\n  },\n  valueOff: {\n    doc: 'Source data value when the toggle is in the \"off-state\".',\n    type: ['string', 'number', 'boolean'],\n    status: 'required',\n  },\n  textOn: {\n    doc: 'Text to show in the UI when in the \"on-state\".',\n    type: 'string',\n    status: 'optional',\n  },\n  textOff: {\n    doc: 'Text to show in the UI when in the \"off-state\".',\n    type: 'string',\n    status: 'optional',\n  },\n  variant: {\n    doc: 'Choice of input feature. Can be: `checkbox`, `button`, `checkbox-button` or `buttons`.',\n    type: 'string',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const fieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  width: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const fieldBlockProperties: PropertiesTableProps = {\n  ...fieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading size](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'string',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const dataValueProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field Will take precedence over the path value given in the data context..',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: 'Info message shown below / after the field.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  warning: {\n    doc: 'Warning message shown below / after the field.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  error: {\n    doc: 'Error message shown below / after the field.',\n    type: 'Error',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: 'any',\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set `true`, the field will give an error if the value cannot be empty.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  continuousValidation: {\n    doc: 'Set `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages.',\n    type: 'object',\n    status: 'optional',\n  },\n  validator: {\n    doc: 'Custom validator function that will be called for every change done by the user. Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function that will be called when the user leaves the field (blurring a text input, closing a dropdown etc). Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'transforms the value before it gets forwarded to the form data object or returned as the `onChange` value parameter.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const dataValueEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`.\",\n    type: 'function',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n"],"names":["Object","assign","ToggleProperties","valueOn","status","valueOff","IndeterminateProperties","dependencePaths","doc","type","propagateIndeterminateState","textOn","undefined","textOff","variant","_createMdxContent","props","_components","h2","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","fieldProperties","valueType","wrapper","MDXLayout","basicComponents","p","StyledTable","_styled","Table","target","name","styles","colorString","FormattedCode","_ref","strikethrough","style","rest","textDecoration","color","startsWith","background","boxShadow","code","_ref2","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","defaultValue","includes","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp","dataValueProperties","fieldBlockSharedProperties","fieldEvents","dataValueEvents","label","labelDescription","layout","width","contentWidth","fieldBlockProperties","labelSize","asFieldset","align","composition","disabled","value","path","info","warning","error","emptyValue","required","schema","validateInitially","validateUnchanged","continuousValidation","errorMessages","validator","onBlurValidator","transformIn","transformOut","onChange","onFocus","onBlur"],"sourceRoot":""}