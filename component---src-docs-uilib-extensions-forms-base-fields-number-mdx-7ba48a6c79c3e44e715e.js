"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[39950,14032],{74634:function(e,n,s){s.r(n);var r=s(52322),t=s(45392),i=s(51361),o=s(86067);function c(e){return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.default,{}),"\n",(0,r.jsx)(o.default,{})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(c,e)})):c()}},51361:function(e,n,s){s.r(n);var r=s(52322),t=s(45392);function i(e){const n=Object.assign({h2:"h2",p:"p",code:"code",a:"a",pre:"pre",h3:"h3"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Field.Number"})," is the base component for receiving user input where the target data is of type ",(0,r.jsx)(n.code,{children:"number"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["There is a corresponding ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/Value/Number",children:"Value.Number"})," component."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Field } from '@dnb/eufemia/extensions/forms'\nrender(<Field.Number path=\"/myNumber\" />)\n"})}),"\n",(0,r.jsx)(n.h2,{children:"When to use and not to use"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Field.Number"})," only allows the user to enter numbers (negative and positive) and decimal numbers."]}),"\n",(0,r.jsx)(n.p,{children:"If a number has the type of number, and can not start with a zero, this field may be considered."}),"\n",(0,r.jsxs)(n.p,{children:["But for e.g. a customer number, you rather use ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/base-fields/String/",children:"Field.String"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Internally, it is used by e.g. ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/feature-fields/Currency/",children:"Field.Currency"}),"."]}),"\n",(0,r.jsx)(n.h2,{children:"Browser autofill"}),"\n",(0,r.jsxs)(n.p,{children:["Check out the ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/base-fields/String/#autocomplete-and-autofill",children:"Field.String"})," docs about autocomplete."]}),"\n",(0,r.jsx)(n.h2,{children:"Step controls"}),"\n",(0,r.jsxs)(n.p,{children:["When using ",(0,r.jsx)(n.code,{children:"showStepControls"}),", the Number component provides buttons for decrementing and incrementing the input value, where the value of de/increment is determined by the ",(0,r.jsx)(n.code,{children:"step"})," property."]}),"\n",(0,r.jsxs)(n.p,{children:["It can also be used with ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/feature-fields/Currency/",children:"Field.Currency"}),"."]}),"\n",(0,r.jsx)(n.h3,{children:"Accessibility"}),"\n",(0,r.jsxs)(n.p,{children:["The component does not include focusable buttons, aligning with accessibility considerations for keyboard-only users, who can utilize arrow keys for navigation, like the ",(0,r.jsx)(n.code,{children:"incrementable"})," ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number",children:"number input"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"One of the reasons to make the buttons as not focusable is to avoid the keyboard-only users to tab through all the extra buttons during navigation."}),"\n",(0,r.jsxs)(n.p,{children:["Due to technical constraint, the ",(0,r.jsx)(n.code,{children:"Field.Number"})," component will be announced as a ",(0,r.jsx)(n.code,{children:"stepper"})," field â€“ but will get the same instructions read out by a screen reader like VoiceOver, on how to change the value."]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(i,e)})):i(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-base-fields-number-mdx-7ba48a6c79c3e44e715e.js.map