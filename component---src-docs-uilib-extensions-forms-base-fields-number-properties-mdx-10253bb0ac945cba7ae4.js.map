{"version":3,"file":"component---src-docs-uilib-extensions-forms-base-fields-number-properties-mdx-10253bb0ac945cba7ae4.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/base-fields/Number/properties.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/input/InputDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/Number/NumberDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueDocs.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport TranslationsTable from 'dnb-design-system-portal/src/shared/parts/TranslationsTable';\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {numberProperties} from '@dnb/eufemia/src/extensions/forms/Field/Number/NumberDocs';\nimport {fieldProperties} from '@dnb/eufemia/src/extensions/forms/Field/FieldDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field-specific props\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: numberProperties\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"General props\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: fieldProperties,\n      valueType: \"number\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Translations\"\n    }), \"\\n\", _jsx(TranslationsTable, {\n      localeKey: ['NumberField', 'Field']\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const inputProperties: PropertiesTableProps = {\n  value: {\n    doc: 'The content value of the input.',\n    type: 'string',\n    status: 'optional',\n  },\n  align: {\n    doc: 'Defines the text alignment of the input. Can be `left`, `right` or `center`. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Prepends the Form Label component. If no ID is provided, a random ID is created.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  label_sr_only: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  label_direction: {\n    doc: 'Use `label_direction=\"vertical\"` to change the label layout direction. Defaults to `horizontal`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status: {\n    doc: 'Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'object',\n    status: 'optional',\n  },\n  placeholder: {\n    doc: 'The placeholder which shows up once the input value is empty.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon: {\n    doc: 'Icon to show before or after the input / placeholder. Can be either a string defining a primary icon or a Component using an SVG icon of either 16px or 24px.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  icon_position: {\n    doc: 'Defines the position of icon inside the input. Set to `left` or `right`. Defaults to `left` if not set.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'The icon size of the icon shows. Defaults to `medium`.',\n    type: 'string',\n    status: 'optional',\n  },\n  keep_placeholder: {\n    doc: 'Set to `true` in case the `placeholder` has to be kept during focus. By default, the placeholder disappears on focus.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  input_class: {\n    doc: 'In case we have to set a custom input class.',\n    type: 'string',\n    status: 'optional',\n  },\n  type: {\n    doc: 'Choose between `text`, `number`, `email`, `password`, `url`, `tel` and `search`.',\n    type: 'string',\n    status: 'optional',\n  },\n  autocomplete: {\n    doc: 'Defaults to `off`. Set to `on` or any of [allowed `attributes`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete). Keep in mind, 1. you may have to define a `name`, 2. have the input as a descendant of a `<form>` element, 3. and have a submit button inside the form.',\n    type: 'string',\n    status: 'optional',\n  },\n  submit_button_title: {\n    doc: 'Title attribute for the search icon. Only relevant if search input.',\n    type: 'string',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the input more than the label. you can also send in a React component, so it gets wrapped inside the Input component.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  size: {\n    doc: 'The sizes you can choose is `default` (2rem), `medium` (2.5rem) and `large` (3rem) are supported component sizes. Defaults to `default` / `null`. Also, if you define a number like `size={2}` then it will be forwarded as the input element attribute.',\n    type: ['string', 'number'],\n    status: 'optional',\n  },\n  selectall: {\n    doc: 'If set to `true`, then the whole input value gets selected on the entry focus. A second click will place the cursor on the wanted position.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  clear: {\n    doc: 'If set to `true`, then a clear button will be shown which lets the user clear any given input value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  stretch: {\n    doc: 'If set to `true`, then the input field will be 100% in `width`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  input_attributes: {\n    doc: 'Provide the Input element with any attributes by using an Object `input_attributes={{size:\\'2\\'}}` or a JSON Object `input_attributes=\\'{\"size\":\"2\"}\\'`. **NB:** Keep in mind, that also every not listed component property will be sent along and set as an Input element attribute.',\n    type: 'object',\n    status: 'optional',\n  },\n  input_state: {\n    doc: 'Defines a custom visual state of the input. Use it only if you have to simulate a custom state. Currently are three statuses `virgin` , `focus` and `dirty`. Defaults to `null`.',\n    type: 'string',\n    status: 'optional',\n  },\n  submit_element: {\n    doc: 'Accepts a React element which will show up like the \"submit button\" would do on `type=\"search\"`.',\n    type: ['string', 'React.Element'],\n    status: 'optional',\n  },\n  inner_ref: {\n    doc: 'By providing a React.ref we can get the internally used input element (DOM). E.g. `inner_ref={myRef}` by using `React.createRef()` or `React.useRef()`.',\n    type: 'React.Ref',\n    status: 'optional',\n  },\n  input_element: {\n    doc: 'By providing a new component we can change the internally used element. Also supports a string only, like `input_element=\"input\"`.',\n    type: ['string', 'React.Element'],\n    status: 'internal',\n  },\n  inner_element: {\n    doc: 'By providing a new component to be rendered inside the \"shell\" – we can add a freely customizable internal element. Used by the Autocomplete component.',\n    type: ['string', 'React.Element'],\n    status: 'internal',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { fieldBlockSharedProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  dataValueEvents,\n  dataValueProperties,\n} from '../hooks/DataValueDocs'\n\nexport const fieldProperties: PropertiesTableProps = {\n  ...dataValueProperties,\n  ...fieldBlockSharedProperties,\n}\n\nexport const fieldEvents: PropertiesTableProps = {\n  ...dataValueEvents,\n}\n\nexport const getFieldEventsWithTypes = (\n  valueType: { type: string; optional?: boolean } = undefined,\n  additionalArgsType: { type: string; optional?: boolean } = undefined\n): PropertiesTableProps => {\n  const value = valueType\n    ? `value${valueType.optional ? '?' : ''}: ${valueType.type}`\n    : 'value'\n\n  const add = additionalArgsType\n    ? `, additionalArgs${additionalArgsType.optional ? '?' : ''}: ${\n        additionalArgsType.type\n      }`\n    : ''\n\n  const typeString = `(${value}${add}) => void`\n\n  return {\n    ...fieldEvents,\n    onChange: {\n      ...fieldEvents.onChange,\n      type: typeString,\n    },\n    onFocus: {\n      ...fieldEvents.onFocus,\n      type: typeString,\n    },\n    onBlur: {\n      ...fieldEvents.onBlur,\n      type: typeString,\n    },\n  }\n}\n","import { inputProperties } from '../../../../components/input/InputDocs'\nimport { PropertiesTableProps } from '../../../../shared/types'\n\nexport const numberProperties: PropertiesTableProps = {\n  decimalLimit: {\n    doc: 'Max number of decimals. Values with more decimals will be rounded. Defaults to `12`.',\n    type: 'number',\n    status: 'optional',\n  },\n  percent: {\n    doc: 'Format a number as percentage.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  currency: {\n    doc: 'Currency code (ISO 4217) or `true` to use the default `NOK`. Uses two decimals by default.',\n    type: ['boolean', 'string'],\n    status: 'optional',\n  },\n  allowNegative: {\n    doc: 'Whether or not to allow negative numbers. Defaults to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  disallowLeadingZeroes: {\n    doc: 'Whether or not to allow leading zeroes. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  minimum: {\n    doc: 'Validation for inclusive minimum number value (greater than or equal). Defaults to `Number.MIN_SAFE_INTEGER`.',\n    type: 'number',\n    status: 'optional',\n  },\n  maximum: {\n    doc: 'Validation for inclusive maximum number value (less than or equal). Defaults to `Number.MAX_SAFE_INTEGER`.',\n    type: 'number',\n    status: 'optional',\n  },\n  exclusiveMinimum: {\n    doc: 'Validation for exclusive minimum number value (greater than).',\n    type: 'number',\n    status: 'optional',\n  },\n  exclusiveMaximum: {\n    doc: 'Validation for exclusive maximum number value (less than).',\n    type: 'number',\n    status: 'optional',\n  },\n  multipleOf: {\n    doc: 'Validation that requires the number to be a multiple of given value.',\n    type: 'number',\n    status: 'optional',\n  },\n  width: {\n    doc: '`false` for no width (use browser default), `small`, `medium` or `large` for predefined standard widths, `stretch` for fill available width.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  size: inputProperties.size,\n  align: {\n    doc: 'Lateral alignment of contents of input field, one of `left` (default), `center`, or `right`.',\n    type: 'string',\n    status: 'optional',\n  },\n  help: {\n    doc: 'Provide a help button. Object consisting of `title` and `content`.',\n    type: 'object',\n    status: 'optional',\n  },\n  autoComplete: {\n    doc: 'For HTML `autocomplete` attributes.',\n    type: ['on', 'string'],\n    status: 'optional',\n  },\n  prefix: {\n    doc: 'Text added before the value input.',\n    type: 'string',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text added after the value input.',\n    type: 'string',\n    status: 'optional',\n  },\n  step: {\n    doc: 'Determines step granularity when in/decreasing value input through step controls buttons or arrow keys. Defaults to 1.',\n    type: 'number',\n    status: 'optional',\n  },\n  startWith: {\n    doc: 'When no `value` or `defaultValue` is given, start with a given value when in/decreasing value input through step controls buttons or arrow keys. Defaults to `null`.',\n    type: 'number',\n    status: 'optional',\n  },\n  showStepControls: {\n    doc: 'Show buttons that in/decreases value input by the step value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const fieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  width: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const fieldBlockProperties: PropertiesTableProps = {\n  ...fieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading size](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'string',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const dataValueProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: 'Info message shown below / after the field.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  warning: {\n    doc: 'Warning message shown below / after the field.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  error: {\n    doc: 'Error message shown below / after the field.',\n    type: 'Error',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set `true`, the field will give an error if the value cannot be empty.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  continuousValidation: {\n    doc: 'Set `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages.',\n    type: 'object',\n    status: 'optional',\n  },\n  validator: {\n    doc: 'Custom validator function that will be called for every change done by the user. Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function that will be called when the user leaves the field (blurring a text input, closing a dropdown etc). Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'transforms the value before it gets forwarded to the form data object or returned as the `onChange` value parameter.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const dataValueEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`.\",\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument.',\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument.',\n    type: '(value) => void',\n    status: 'optional',\n  },\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","numberProperties","fieldProperties","valueType","TranslationsTable","localeKey","wrapper","MDXLayout","inputProperties","value","doc","type","status","align","label","label_sr_only","label_direction","status_state","status_props","globalStatus","placeholder","icon","icon_position","icon_size","keep_placeholder","input_class","autocomplete","submit_button_title","suffix","size","selectall","clear","stretch","skeleton","input_attributes","input_state","submit_element","inner_ref","input_element","inner_element","dataValueProperties","fieldBlockSharedProperties","fieldEvents","dataValueEvents","getFieldEventsWithTypes","additionalArgsType","undefined","typeString","optional","onChange","onFocus","onBlur","decimalLimit","percent","currency","allowNegative","disallowLeadingZeroes","minimum","maximum","exclusiveMinimum","exclusiveMaximum","multipleOf","width","help","autoComplete","prefix","step","startWith","showStepControls","labelDescription","labelSrOnly","layout","contentWidth","fieldBlockProperties","labelSize","asFieldset","composition","disabled","defaultValue","path","info","warning","error","emptyValue","required","schema","validateInitially","validateUnchanged","continuousValidation","errorMessages","validator","onBlurValidator","transformIn","transformOut"],"sourceRoot":""}