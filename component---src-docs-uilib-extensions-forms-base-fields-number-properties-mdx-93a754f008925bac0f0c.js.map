{"version":3,"file":"component---src-docs-uilib-extensions-forms-base-fields-number-properties-mdx-93a754f008925bac0f0c.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/Number/NumberDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/base-fields/Number/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/input/InputDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts"],"sourcesContent":["import { inputProperties } from '../../../../components/input/InputDocs'\nimport { PropertiesTableProps } from '../../../../shared/types'\n\nexport const numberProperties: PropertiesTableProps = {\n  decimalLimit: {\n    doc: 'Max number of decimals. Values with more decimals will be rounded. Defaults to `12`.',\n    type: 'number',\n    status: 'optional',\n  },\n  percent: {\n    doc: 'Format a number as percentage.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  currency: {\n    doc: 'Currency code (ISO 4217) or `true` to use the default `NOK`. Uses two decimals by default.',\n    type: ['boolean', 'string'],\n    status: 'optional',\n  },\n  minimum: {\n    doc: 'Validation for inclusive minimum number value (greater than or equal). Defaults to `Number.MIN_SAFE_INTEGER`.',\n    type: 'number',\n    status: 'optional',\n  },\n  maximum: {\n    doc: 'Validation for inclusive maximum number value (less than or equal). Defaults to `Number.MAX_SAFE_INTEGER`.',\n    type: 'number',\n    status: 'optional',\n  },\n  exclusiveMinimum: {\n    doc: 'Validation for exclusive minimum number value (greater than).',\n    type: 'number',\n    status: 'optional',\n  },\n  exclusiveMaximum: {\n    doc: 'Validation for exclusive maximum number value (less than).',\n    type: 'number',\n    status: 'optional',\n  },\n  multipleOf: {\n    doc: 'Validation that requires the number to be a multiple of given value.',\n    type: 'number',\n    status: 'optional',\n  },\n  width: {\n    doc: '`false` for no width (use browser default), `small`, `medium` or `large` for predefined standard widths, `stretch` for fill available width.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  size: inputProperties.size,\n  align: {\n    doc: 'Lateral alignment of contents of input field, one of `left` (default), `center`, or `right`.',\n    type: 'string',\n    status: 'optional',\n  },\n  help: {\n    doc: 'Provide a help button. Object consisting of `title` and `content`.',\n    type: 'object',\n    status: 'optional',\n  },\n  autoComplete: {\n    doc: 'For HTML `autocomplete` attributes.',\n    type: ['on', 'string'],\n    status: 'optional',\n  },\n  prefix: {\n    doc: 'Text added before the value input.',\n    type: 'string',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text added after the value input.',\n    type: 'string',\n    status: 'optional',\n  },\n  step: {\n    doc: 'Determines step granularity when in/decreasing value input through step controls buttons or arrow keys.',\n    type: 'number',\n    status: 'optional',\n  },\n  showStepControls: {\n    doc: 'Show buttons that in/decreases value input by the step value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {numberProperties} from '@dnb/eufemia/src/extensions/forms/Field/Number/NumberDocs';\nimport {fieldProperties} from '@dnb/eufemia/src/extensions/forms/Field/FieldDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field-specific props\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: numberProperties\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"General props\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: fieldProperties,\n      valueType: \"number\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colorValue = 'var(--color-success-green)'\nconst colorString = 'var(--color-fire-red)'\nconst colorType = 'var(--color-violet)'\nconst colorUndefined = 'var(--color-black-55)'\n\nconst FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = children.startsWith(`'`) ? colorString : colorType\n        // falls through\n      }\n      case 'value': {\n        style.color = children.startsWith(`'`)\n          ? colorString\n          : children === 'undefined'\n          ? colorUndefined\n          : colorValue\n        // falls through\n      }\n      default: {\n        style.background = 'none'\n        style.boxShadow = 'none'\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props)\n  const tableRows = Object.entries(props).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nfunction formatName(name: string): React.ReactNode | string {\n  if (name.includes('/')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const inputProperties: PropertiesTableProps = {\n  value: {\n    doc: 'The content value of the input.',\n    type: 'string',\n    status: 'optional',\n  },\n  align: {\n    doc: 'Defines the text alignment of the input. Can be `left`, `right` or `center`. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Prepends the Form Label component. If no ID is provided, a random ID is created.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  label_sr_only: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  label_direction: {\n    doc: 'Use `label_direction=\"vertical\"` to change the label layout direction. Defaults to `horizontal`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status: {\n    doc: 'Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'object',\n    status: 'optional',\n  },\n  placeholder: {\n    doc: 'The placeholder which shows up once the input value is empty.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon: {\n    doc: 'Icon to show before or after the input / placeholder. Can be either a string defining a primary icon or a Component using an SVG icon of either 16px or 24px.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  icon_position: {\n    doc: 'Defines the position of icon inside the input. Set to `left` or `right`. Defaults to `left` if not set.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'The icon size of the icon shows. Defaults to `medium`.',\n    type: 'string',\n    status: 'optional',\n  },\n  keep_placeholder: {\n    doc: 'Set to `true` in case the `placeholder` has to be kept during focus. By default, the placeholder disappears on focus.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  input_class: {\n    doc: 'In case we have to set a custom input class.',\n    type: 'string',\n    status: 'optional',\n  },\n  type: {\n    doc: 'Choose between `text`, `number`, `email`, `password`, `url`, `tel` and `search`.',\n    type: 'string',\n    status: 'optional',\n  },\n  autocomplete: {\n    doc: 'Defaults to `off`. Set to `on` or any of [allowed `attributes`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete). Keep in mind, 1. you may have to define a `name`, 2. have the input as a descendant of a `<form>` element, 3. and have a submit button inside the form.',\n    type: 'string',\n    status: 'optional',\n  },\n  submit_button_title: {\n    doc: 'Title attribute for the search icon. Only relevant if search input.',\n    type: 'string',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the input more than the label. you can also send in a React component, so it gets wrapped inside the Input component.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  size: {\n    doc: 'The sizes you can choose is `default` (2rem), `medium` (2.5rem) and `large` (3rem) are supported component sizes. Defaults to `default` / `null`. Also, if you define a number like `size={2}` then it will be forwarded as the input element attribute.',\n    type: ['string', 'number'],\n    status: 'optional',\n  },\n  selectall: {\n    doc: 'If set to `true`, then the whole input value gets selected on the entry focus. A second click will place the cursor on the wanted position.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  clear: {\n    doc: 'If set to `true`, then a clear button will be shown which lets the user clear any given input value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  stretch: {\n    doc: 'If set to `true`, then the input field will be 100% in `width`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  input_attributes: {\n    doc: 'Provide the Input element with any attributes by using an Object `input_attributes={{size:\\'2\\'}}` or a JSON Object `input_attributes=\\'{\"size\":\"2\"}\\'`. **NB:** Keep in mind, that also every not listed component property will be sent along and set as an Input element attribute.',\n    type: 'object',\n    status: 'optional',\n  },\n  input_state: {\n    doc: 'Defines a custom visual state of the input. Use it only if you have to simulate a custom state. Currently are three statuses `virgin` , `focus` and `dirty`. Defaults to `null`.',\n    type: 'string',\n    status: 'optional',\n  },\n  submit_element: {\n    doc: 'Accepts a React element which will show up like the \"submit button\" would do on `type=\"search\"`.',\n    type: ['string', 'React.Element'],\n    status: 'optional',\n  },\n  inner_ref: {\n    doc: 'By providing a React.ref we can get the internally used input element (DOM). E.g. `inner_ref={myRef}` by using `React.createRef()` or `React.useRef()`.',\n    type: 'React.Ref',\n    status: 'optional',\n  },\n  input_element: {\n    doc: 'By providing a new component we can change the internally used element. Also supports a string only, like `input_element=\"input\"`.',\n    type: ['string', 'React.Element'],\n    status: 'internal',\n  },\n  inner_element: {\n    doc: 'By providing a new component to be rendered inside the \"shell\" – we can add a freely customizable internal element. Used by the Autocomplete component.',\n    type: ['string', 'React.Element'],\n    status: 'internal',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const dataValueProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the input.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for this input is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  id: {\n    doc: 'Unique id for connecting Form.Handler and helper tools such as Form.useData.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: 'Info message shown below / after the input.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  warning: {\n    doc: 'Warning message shown below / after the input.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  error: {\n    doc: 'Error message shown below / after the input.',\n    type: 'Error',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: 'any',\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set `true`, the input will give an error if the value cannot be empty.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  continuousValidation: {\n    doc: 'Set `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages.',\n    type: 'object',\n    status: 'optional',\n  },\n  validator: {\n    doc: 'Custom validator function that will be called for every change done by the user. Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function that will be called when the user leaves the field (blurring a text input, closing a dropdown etc). Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'transforms the value before it gets forwarded to the form data object or returned as the `onChange` value parameter.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const dataValueEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`.\",\n    type: 'function',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { fieldBlockProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  dataValueEvents,\n  dataValueProperties,\n} from '../hooks/DataValueDocs'\n\nexport const fieldProperties: PropertiesTableProps = {\n  ...dataValueProperties,\n  ...fieldBlockProperties,\n}\n\nexport const fieldEvents: PropertiesTableProps = {\n  ...dataValueEvents,\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const fieldBlockProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSize: {\n    doc: 'Define one of the following [heading size](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  width: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'string',\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n"],"names":["numberProperties","decimalLimit","doc","type","status","percent","currency","minimum","maximum","exclusiveMinimum","exclusiveMaximum","multipleOf","width","size","inputProperties","align","help","autoComplete","prefix","suffix","step","showStepControls","_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","fieldProperties","valueType","wrapper","MDXLayout","basicComponents","p","StyledTable","_styled","Table","target","name","styles","colorString","FormattedCode","_ref","variant","strikethrough","style","rest","textDecoration","color","startsWith","background","boxShadow","code","_ref2","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","defaultValue","includes","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp","value","label","label_sr_only","label_direction","status_state","status_props","globalStatus","placeholder","icon","icon_position","icon_size","keep_placeholder","input_class","autocomplete","submit_button_title","selectall","clear","stretch","skeleton","input_attributes","input_state","submit_element","inner_ref","input_element","inner_element","path","id","info","warning","error","disabled","emptyValue","required","schema","validateInitially","validateUnchanged","continuousValidation","errorMessages","validator","onBlurValidator","transformIn","transformOut","fieldBlockProperties","fieldEvents","onChange","onFocus","onBlur","labelDescription","labelSize","layout","contentWidth","composition","asFieldset"],"sourceRoot":""}