"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[1289,3506],{23122:function(e,n,o){o.r(n);var t=o(31085),s=o(71184);function i(e){const n=Object.assign({h2:"h2",p:"p",code:"code",a:"a",pre:"pre"},(0,s.R)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{children:"Description"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Field.Selection"})," is a component for selecting between options using a dropdown or similar user experiences."]}),"\n",(0,t.jsxs)(n.p,{children:["There is a corresponding ",(0,t.jsx)(n.a,{href:"/uilib/extensions/forms/Value/Selection",children:"Value.Selection"})," component."]}),"\n",(0,t.jsxs)(n.p,{children:["Uses the ",(0,t.jsx)(n.a,{href:"/uilib/extensions/forms/base-fields/Option/",children:"Field.Option"})," pseudo-component to define options."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Field } from \'@dnb/eufemia/extensions/forms\'\n\nrender(\n  <Field.Selection placeholder="Select something...">\n    <Field.Option value="foo" title="Foo!" />\n    <Field.Option value="bar" title="Baar!" />\n  </Field.Selection>,\n)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You can also use the ",(0,t.jsx)(n.code,{children:"dataPath"})," property to provide the data to the component:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import { Field } from '@dnb/eufemia/extensions/forms'\n\nrender(\n  <Form.Handler\n    data={{\n      myDataPath: [\n        { title: 'Foo!', value: 'foo' },\n        { title: 'Bar!', value: 'bar' },\n      ],\n    }}\n  >\n    <Field.Selection dataPath=\"/myDataPath\" />\n  </Form.Handler>,\n)\n"})}),"\n",(0,t.jsx)(n.h2,{children:"About the Autocomplete variant"}),"\n",(0,t.jsxs)(n.p,{children:["The autocomplete variant (",(0,t.jsx)(n.code,{children:'variant="autocomplete"'}),") is a special easy drop-in version â€“ basically as an replacement for the Dropdown variant, but with a search capability."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/uilib/components/autocomplete/",children:"Autocomplete"})," by itself can be customized and used in various ways. If you need more control, you can use the ",(0,t.jsx)(n.code,{children:"autocompleteProps"})," property to forward any additional properties (camelCase) to the ",(0,t.jsx)(n.a,{href:"/uilib/components/autocomplete/",children:"Autocomplete"})," component."]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.R)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(i,e)})):i(e)}},74129:function(e,n,o){o.r(n);var t=o(31085),s=o(71184),i=o(23122),a=o(48601);function r(e){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.default,{}),"\n",(0,t.jsx)(a.default,{})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.R)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(r,e)})):r()}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-base-fields-selection-mdx-e22357290e2617b018d1.js.map