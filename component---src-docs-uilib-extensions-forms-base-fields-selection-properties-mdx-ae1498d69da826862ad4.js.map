{"version":3,"file":"component---src-docs-uilib-extensions-forms-base-fields-selection-properties-mdx-ae1498d69da826862ad4.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/Selection/SelectionDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/base-fields/Selection/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueDocs.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../../../shared/types'\n\nexport const SelectionProperties: PropertiesTableProps = {\n  variant: {\n    doc: 'Choice of UI feature. Can be: `dropdown`, `autocomplete`, `radio` or `button`.',\n    type: 'string',\n    status: 'optional',\n  },\n  optionsLayout: {\n    doc: 'Layout for the list of options. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  width: {\n    doc: '`small`, `medium` or `large` for predefined standard widths, `stretch` for fill available width.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  help: {\n    doc: 'Provide a help button. Object consisting of `title` and `content`.',\n    type: 'object',\n    status: 'optional',\n  },\n  autocompleteProps: {\n    doc: 'Forward any additional props (camelCase) to the [Autocomplete](/uilib/components/autocomplete/) component.',\n    type: 'object',\n    status: 'optional',\n  },\n  dropdownProps: {\n    doc: 'Forward any additional props (camelCase) to the [Dropdown](/uilib/components/dropdown/) component.',\n    type: 'object',\n    status: 'optional',\n  },\n  children: {\n    doc: 'For providing Option components.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {fieldProperties} from '@dnb/eufemia/src/extensions/forms/Field/FieldDocs';\nimport {SelectionProperties} from '@dnb/eufemia/src/extensions/forms/Field/Selection/SelectionDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field-specific props\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: SelectionProperties\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"General props\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: fieldProperties,\n      valueType: ['number', 'string']\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colorValue = 'var(--color-success-green)'\nconst colorString = 'var(--color-fire-red)'\nconst colorType = 'var(--color-violet)'\nconst colorUndefined = 'var(--color-black-55)'\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = children.startsWith(`'`) ? colorString : colorType\n        // falls through\n      }\n      case 'value': {\n        style.color = children.startsWith(`'`)\n          ? colorString\n          : children === 'undefined' || children === 'null'\n          ? colorUndefined\n          : colorValue\n        // falls through\n      }\n      default: {\n        style.background = 'none'\n        style.boxShadow = 'none'\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props)\n  const tableRows = Object.entries(props).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('/')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { fieldBlockSharedProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  dataValueEvents,\n  dataValueProperties,\n} from '../hooks/DataValueDocs'\n\nexport const fieldProperties: PropertiesTableProps = {\n  ...dataValueProperties,\n  ...fieldBlockSharedProperties,\n}\n\nexport const fieldEvents: PropertiesTableProps = {\n  ...dataValueEvents,\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const fieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  width: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const fieldBlockProperties: PropertiesTableProps = {\n  ...fieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading size](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'string',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const dataValueProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field Will take precedence over the path value given in the data context..',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: 'Info message shown below / after the field.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  warning: {\n    doc: 'Warning message shown below / after the field.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  error: {\n    doc: 'Error message shown below / after the field.',\n    type: 'Error',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set `true`, the field will give an error if the value cannot be empty.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  continuousValidation: {\n    doc: 'Set `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages.',\n    type: 'object',\n    status: 'optional',\n  },\n  validator: {\n    doc: 'Custom validator function that will be called for every change done by the user. Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function that will be called when the user leaves the field (blurring a text input, closing a dropdown etc). Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'transforms the value before it gets forwarded to the form data object or returned as the `onChange` value parameter.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const dataValueEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`.\",\n    type: 'function',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n"],"names":["SelectionProperties","variant","doc","type","status","optionsLayout","width","help","autocompleteProps","dropdownProps","children","_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","_jsxs","_Fragment","_jsx","PropertiesTable","fieldProperties","valueType","wrapper","MDXLayout","basicComponents","p","StyledTable","_styled","Table","target","name","styles","colorString","FormattedCode","_ref","strikethrough","style","rest","textDecoration","color","startsWith","background","boxShadow","code","_ref2","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","defaultValue","includes","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp","dataValueProperties","fieldBlockSharedProperties","fieldEvents","dataValueEvents","label","labelDescription","layout","contentWidth","fieldBlockProperties","labelSize","asFieldset","align","composition","disabled","value","path","info","warning","error","emptyValue","required","schema","validateInitially","validateUnchanged","continuousValidation","errorMessages","validator","onBlurValidator","transformIn","transformOut","onChange","onFocus","onBlur"],"sourceRoot":""}