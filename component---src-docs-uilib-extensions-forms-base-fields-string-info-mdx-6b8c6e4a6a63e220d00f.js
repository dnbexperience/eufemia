"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[29155],{3949:function(e,n,t){t.r(n);var i=t(31085),r=t(71184);function s(e){const n=Object.assign({h2:"h2",p:"p",code:"code",a:"a",pre:"pre",ol:"ol",li:"li"},(0,r.R)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Field.String"})," is the base component for receiving user input where the target data is of type ",(0,i.jsx)(n.code,{children:"string"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["There is a corresponding ",(0,i.jsx)(n.a,{href:"/uilib/extensions/forms/Value/String",children:"Value.String"})," component."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { Field } from '@dnb/eufemia/extensions/forms'\nrender(<Field.String path=\"/myValue\" />)\n"})}),"\n",(0,i.jsx)(n.h2,{children:"Browser autofill"}),"\n",(0,i.jsxs)(n.p,{children:["The string component does support HTML ",(0,i.jsx)(n.code,{children:"autocomplete"})," ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete",children:"attributes"}),"."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"You may either set the property directly on each field:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Form.Handler>\n  <Field.String autoComplete="first-name" path="/your-pointer" />\n  <Field.String autoComplete="last-name" path="/your-pointer" />\n</Form.Handler>\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:['Or use the "less-code" approach, by just giving the data pointer ',(0,i.jsx)(n.code,{children:"path"})," a meaningful name:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Form.Handler autoComplete={true}>\n  <Field.String path="/firstName" />\n  <Field.String path="/lastName" />\n</Form.Handler>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"path"})," property will be used to set the ",(0,i.jsx)(n.code,{children:"name"})," attribute."]}),"\n",(0,i.jsx)(n.h2,{children:"Accessibility"}),"\n",(0,i.jsxs)(n.p,{children:["Avoid using the ",(0,i.jsx)(n.code,{children:"maxlength"})," attribute when possible, as it is not accessible. Instead, use ",(0,i.jsx)(n.a,{href:"/uilib/components/fragments/text-counter/",children:"TextCounter"})," together with ",(0,i.jsx)(n.code,{children:"Field.String"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["A demo of how to use the ",(0,i.jsx)(n.code,{children:"TextCounter"})," with ",(0,i.jsx)(n.code,{children:"Field.String"})," can be found ",(0,i.jsx)(n.a,{href:"/uilib/extensions/forms/base-fields/String/#validation---maximum-length-with-textcounter",children:"here"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"This way, the user receives visual feedback on the number of characters entered and the maximum allowed, without being limited in their workflow."}),"\n",(0,i.jsxs)(n.p,{children:["You can still set the desired maximum number of characters by using the ",(0,i.jsx)(n.code,{children:"maxLength"})," property in Eufemia Forms."]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.R)(),e.components);return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(s,e)})):s(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-base-fields-string-info-mdx-6b8c6e4a6a63e220d00f.js.map