{"version":3,"file":"component---src-docs-uilib-extensions-forms-base-fields-string-properties-mdx-97ceafa313a3645a820c.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/String/StringDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/base-fields/String/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/input/InputDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts"],"sourcesContent":["import { inputProperties } from '../../../../components/input/InputDocs'\nimport { PropertiesTableProps } from '../../../../shared/types'\n\nexport const stringProperties: PropertiesTableProps = {\n  multiline: {\n    doc: 'True to be able to write in multiple lines (switching from input-element to textarea-element).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  leftIcon: {\n    doc: 'For icon at the left side of the text input.',\n    type: 'string',\n    status: 'optional',\n  },\n  rightIcon: {\n    doc: 'For icon at the right side of the text input.',\n    type: 'string',\n    status: 'optional',\n  },\n  capitalize: {\n    doc: 'When set to true, it will capitalize the first letter of every word, transforming the rest to lowercase.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  trim: {\n    doc: 'When true, it will trim leading and trailing whitespaces on blur, triggering onChange if the value changes.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  inputMode: {\n    doc: 'Define an [inputmode](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode).',\n    type: 'string',\n    status: 'optional',\n  },\n  autoComplete: {\n    doc: 'For HTML [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) attributes.',\n    type: ['on', 'string'],\n    status: 'optional',\n  },\n  minLength: {\n    doc: 'Validation for minimum length of the text (number of characters).',\n    type: 'number',\n    status: 'optional',\n  },\n  maxLength: {\n    doc: 'Validation for maximum length of the text (number of characters).',\n    type: 'number',\n    status: 'optional',\n  },\n  pattern: {\n    doc: 'Validation based on regex pattern.',\n    type: 'string',\n    status: 'optional',\n  },\n  width: {\n    doc: '`false` for no width (use browser default), small, medium or large for predefined standard widths, stretch for fill available width.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  help: {\n    doc: 'Provide a help button. Object consisting of title and content.',\n    type: 'object',\n    status: 'optional',\n  },\n\n  // - Input props\n  size: inputProperties.size,\n  align: inputProperties.align,\n  selectall: inputProperties.selectall,\n  clear: inputProperties.clear,\n  keepPlaceholder: inputProperties.keep_placeholder,\n\n  // - Textarea props\n  autoresize: {\n    doc: 'For multiline, set true to expand when writing longer texts.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  autoresizeMaxRows: {\n    doc: 'For multiline, set how many rows of text can be shown at max.',\n    type: 'number',\n    status: 'optional',\n  },\n  characterCounter: {\n    doc: \"For multiline, use a number to define the displayed max length e.g. `40` or `{ max: 40, variant: 'down' }`.\",\n    type: ['number', 'object'],\n    status: 'optional',\n  },\n\n  // - Additional props\n  inputClassName: {\n    doc: 'Class name set on the <input> DOM element.',\n    type: 'string',\n    status: 'optional',\n  },\n  innerRef: {\n    doc: 'By providing a React.Ref we can get the internally used input element (DOM).',\n    type: 'React.Ref',\n    status: 'optional',\n  },\n  submitElement: {\n    doc: 'Accepts a React element which will show up like the \"submit button\" would do on type=\"search\".',\n    type: 'React.Element',\n    status: 'optional',\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {stringProperties} from '@dnb/eufemia/src/extensions/forms/Field/String/StringDocs';\nimport {fieldProperties} from '@dnb/eufemia/src/extensions/forms/Field/FieldDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field-specific props\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: stringProperties\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"General props\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: fieldProperties\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Code, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\nimport Copy from '../tags/Copy'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n}) {\n  const keys = Object.keys(props)\n  const tableRows = Object.entries(props).map(\n    ([key, { type, doc, status }]) => {\n      if (omit && omit.includes(key)) {\n        return null\n      }\n\n      if (\n        typeof type === 'string' &&\n        String(type).includes('{valueType}')\n      ) {\n        type = valueType as string\n      }\n\n      return (\n        <Tr key={key}>\n          <Td>\n            <Copy>\n              <Code>{formatName(camelCase ? toCamelCase(key) : key)}</Code>\n            </Copy>\n          </Td>\n          <Td>\n            {Array.isArray(type) ? (\n              type\n                .map((t) => (\n                  <Copy key={t}>\n                    <Code>{t}</Code>\n                  </Copy>\n                ))\n                .reduce((prev, curr) => (\n                  <>\n                    {prev} or {curr}\n                  </>\n                ))\n            ) : (\n              <Copy>\n                <Code>{type}</Code>\n              </Copy>\n            )}\n          </Td>\n          <Td>\n            <em>({status})</em>{' '}\n            <ReactMarkdown components={components}>\n              {camelCase ? convertToCamelCase(doc, keys) : doc}\n            </ReactMarkdown>\n          </Td>\n        </Tr>\n      )\n    },\n  )\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nfunction formatName(name: string): React.ReactNode | string {\n  if (name.includes('/')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const inputProperties: PropertiesTableProps = {\n  value: {\n    doc: 'The content value of the input.',\n    type: 'string',\n    status: 'optional',\n  },\n  align: {\n    doc: 'Defines the text alignment of the input. Can be `left`, `right` or `center`. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Prepends the Form Label component. If no ID is provided, a random ID is created.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  label_sr_only: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  label_direction: {\n    doc: 'Use `label_direction=\"vertical\"` to change the label layout direction. Defaults to `horizontal`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status: {\n    doc: 'Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'object',\n    status: 'optional',\n  },\n  placeholder: {\n    doc: 'The placeholder which shows up once the input value is empty.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon: {\n    doc: 'Icon to show before or after the input / placeholder. Can be either a string defining a primary icon or a Component using an SVG icon of either 16px or 24px.',\n    type: ['string', 'React.Component'],\n    status: 'optional',\n  },\n  icon_position: {\n    doc: 'Defines the position of icon inside the input. Set to `left` or `right`. Defaults to `left` if not set.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'The icon size of the icon shows. Defaults to `medium`.',\n    type: 'string',\n    status: 'optional',\n  },\n  keep_placeholder: {\n    doc: 'Set to `true` in case the `placeholder` has to be kept during focus. By default, the placeholder disappears on focus.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  input_class: {\n    doc: 'In case we have to set a custom input class.',\n    type: 'string',\n    status: 'optional',\n  },\n  type: {\n    doc: 'Choose between `text`, `number`, `email`, `password`, `url`, `tel` and `search`.',\n    type: 'string',\n    status: 'optional',\n  },\n  autocomplete: {\n    doc: 'Defaults to `off`. Set to `on` or any of [allowed `attributes`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete). Keep in mind, 1. you may have to define a `name`, 2. have the input as a descendant of a `<form>` element, 3. and have a submit button inside the form.',\n    type: 'string',\n    status: 'optional',\n  },\n  submit_button_title: {\n    doc: 'Title attribute for the search icon. Only relevant if search input.',\n    type: 'string',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the input more than the label. you can also send in a React component, so it gets wrapped inside the Input component.',\n    type: ['string', 'React.Component'],\n    status: 'optional',\n  },\n  size: {\n    doc: 'The sizes you can choose is `default` (2rem), `medium` (2.5rem) and `large` (3rem) are supported component sizes. Defaults to `default` / `null`. Also, if you define a number like `size={2}` then it will be forwarded as the input element attribute.',\n    type: ['string', 'number'],\n    status: 'optional',\n  },\n  selectall: {\n    doc: 'If set to `true`, then the whole input value gets selected on the entry focus. A second click will place the cursor on the wanted position.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  clear: {\n    doc: 'If set to `true`, then a clear button will be shown which lets the user clear any given input value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  stretch: {\n    doc: 'If set to `true`, then the input field will be 100% in `width`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  input_attributes: {\n    doc: 'Provide the Input element with any attributes by using an Object `input_attributes={{size:\\'2\\'}}` or a JSON Object `input_attributes=\\'{\"size\":\"2\"}\\'`. **NB:** Keep in mind, that also every not listed component property will be sent along and set as an Input element attribute.',\n    type: 'object',\n    status: 'optional',\n  },\n  input_state: {\n    doc: 'Defines a custom visual state of the input. Use it only if you have to simulate a custom state. Currently are three statuses `virgin` , `focus` and `dirty`. Defaults to `null`.',\n    type: 'string',\n    status: 'optional',\n  },\n  submit_element: {\n    doc: 'Accepts a React element which will show up like the \"submit button\" would do on `type=\"search\"`.',\n    type: ['string', 'React.Element'],\n    status: 'optional',\n  },\n  inner_ref: {\n    doc: 'By providing a React.ref we can get the internally used input element (DOM). E.g. `inner_ref={myRef}` by using `React.createRef()` or `React.useRef()`.',\n    type: 'React.Ref',\n    status: 'optional',\n  },\n  input_element: {\n    doc: 'By providing a new component we can change the internally used element. Also supports a string only, like `input_element=\"input\"`.',\n    type: ['string', 'React.Element'],\n    status: 'internal',\n  },\n  inner_element: {\n    doc: 'By providing a new component to be rendered inside the \"shell\" – we can add a freely customizable internal element. Used by the Autocomplete component.',\n    type: ['string', 'React.Element'],\n    status: 'internal',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const dataValueProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the input.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for this input is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  id: {\n    doc: 'Unique id for connecting Form.Handler and helper tools such as Form.useData.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: 'Info message shown below / after the input.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  warning: {\n    doc: 'Warning message shown below / after the input.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  error: {\n    doc: 'Error message shown below / after the input.',\n    type: 'Error',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: 'any',\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set `true`, the input will give an error if the value cannot be empty.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  continuousValidation: {\n    doc: 'Set `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages.',\n    type: 'object',\n    status: 'optional',\n  },\n  validator: {\n    doc: 'Custom validator function that will be called for every change done by the user. Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function that will be called when the user leaves the field (blurring a text input, closing a dropdown etc). Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  toInput: {\n    doc: 'Derivate called when the received / active value is sent to the input. Can be used for casting, changing syntax etc.',\n    type: 'function',\n    status: 'optional',\n  },\n  fromInput: {\n    doc: 'Derivate called when changes is made by the user, to cast or change syntax back to the original (opposite of `toInput`).',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const dataValueEvents: PropertiesTableProps = {\n  onChange: {\n    doc: ' Will be called on value changes made by the user, with the new value as argument.',\n    type: 'function',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: ' Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: ' Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { fieldBlockProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  dataValueEvents,\n  dataValueProperties,\n} from '../hooks/DataValueDocs'\n\nexport const fieldProperties: PropertiesTableProps = {\n  ...dataValueProperties,\n  ...fieldBlockProperties,\n}\n\nexport const fieldEvents: PropertiesTableProps = {\n  ...dataValueEvents,\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const fieldBlockProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSize: {\n    doc: 'Define one of the following [heading size](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  width: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'string',\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n"],"names":["stringProperties","multiline","doc","type","status","leftIcon","rightIcon","capitalize","trim","inputMode","autoComplete","minLength","maxLength","pattern","width","help","size","inputProperties","align","selectall","clear","keepPlaceholder","keep_placeholder","autoresize","autoresizeMaxRows","characterCounter","inputClassName","innerRef","submitElement","_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","fieldProperties","wrapper","MDXLayout","basicComponents","p","StyledTable","_styled","Table","target","name","styles","_ref","valueType","camelCase","omit","keys","tableRows","entries","map","_ref2","key","includes","String","Tr","Td","Copy","Code","formatName","toCamelCase","Array","isArray","t","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp","value","label","label_sr_only","label_direction","status_state","status_props","globalStatus","placeholder","icon","icon_position","icon_size","input_class","autocomplete","submit_button_title","suffix","stretch","skeleton","input_attributes","input_state","submit_element","inner_ref","input_element","inner_element","path","id","info","warning","error","disabled","emptyValue","required","schema","validateInitially","validateUnchanged","continuousValidation","errorMessages","validator","onBlurValidator","toInput","fromInput","fieldBlockProperties","fieldEvents","onChange","onFocus","onBlur","labelDescription","labelSize","layout","contentWidth","composition","asFieldset"],"sourceRoot":""}