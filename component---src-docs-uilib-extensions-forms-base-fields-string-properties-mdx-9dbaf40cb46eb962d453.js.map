{"version":3,"file":"component---src-docs-uilib-extensions-forms-base-fields-string-properties-mdx-9dbaf40cb46eb962d453.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/String/StringDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/base-fields/String/properties.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/input/InputDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueDocs.ts"],"sourcesContent":["import { inputProperties } from '../../../../components/input/InputDocs'\nimport { PropertiesTableProps } from '../../../../shared/types'\n\nexport const stringProperties: PropertiesTableProps = {\n  multiline: {\n    doc: 'True to be able to write in multiple lines (switching from input-element to textarea-element).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  leftIcon: {\n    doc: 'For icon at the left side of the text input.',\n    type: 'string',\n    status: 'optional',\n  },\n  rightIcon: {\n    doc: 'For icon at the right side of the text input.',\n    type: 'string',\n    status: 'optional',\n  },\n  capitalize: {\n    doc: 'When set to true, it will capitalize the first letter of every word, transforming the rest to lowercase.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  trim: {\n    doc: 'When true, it will trim leading and trailing whitespaces on blur, triggering onChange if the value changes.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  inputMode: {\n    doc: 'Define an [inputmode](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode).',\n    type: 'string',\n    status: 'optional',\n  },\n  autoComplete: {\n    doc: 'For HTML [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) attributes.',\n    type: ['on', 'string'],\n    status: 'optional',\n  },\n  minLength: {\n    doc: 'Validation for minimum length of the text (number of characters).',\n    type: 'number',\n    status: 'optional',\n  },\n  maxLength: {\n    doc: 'Validation for maximum length of the text (number of characters).',\n    type: 'number',\n    status: 'optional',\n  },\n  pattern: {\n    doc: 'Validation based on regex pattern.',\n    type: 'string',\n    status: 'optional',\n  },\n  width: {\n    doc: '`false` for no width (use browser default), small, medium or large for predefined standard widths, stretch for fill available width.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  help: {\n    doc: 'Provide a help button. Object consisting of title and content.',\n    type: 'object',\n    status: 'optional',\n  },\n\n  // - Input props\n  size: inputProperties.size,\n  align: inputProperties.align,\n  selectall: inputProperties.selectall,\n  clear: inputProperties.clear,\n  keepPlaceholder: inputProperties.keep_placeholder,\n\n  // - Textarea props\n  rows: {\n    doc: 'For multiline, set how many rows of text can be shown by default. Defaults to 2.',\n    type: 'number',\n    status: 'optional',\n  },\n  autoresizeMaxRows: {\n    doc: 'For multiline, set how many rows of text can be shown at max. Defaults to 6',\n    type: 'number',\n    status: 'optional',\n  },\n  characterCounter: {\n    doc: \"For multiline, use a number to define the displayed max length e.g. `40` or `{ max: 40, variant: 'down' }`.\",\n    type: ['number', 'object'],\n    status: 'optional',\n  },\n  autoresize: {\n    doc: 'For multiline, set true to expand when writing longer texts. Defaults to true.',\n    type: 'boolean',\n    status: 'optional',\n  },\n\n  // - Additional props\n  inputClassName: {\n    doc: 'Class name set on the <input> DOM element.',\n    type: 'string',\n    status: 'optional',\n  },\n  innerRef: {\n    doc: 'By providing a React.Ref we can get the internally used input element (DOM).',\n    type: 'React.Ref',\n    status: 'optional',\n  },\n  submitElement: {\n    doc: 'Accepts a React element which will show up like the \"submit button\" would do on type=\"search\".',\n    type: 'React.Element',\n    status: 'optional',\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport TranslationsTable from 'dnb-design-system-portal/src/shared/parts/TranslationsTable';\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {stringProperties} from '@dnb/eufemia/src/extensions/forms/Field/String/StringDocs';\nimport {fieldProperties} from '@dnb/eufemia/src/extensions/forms/Field/FieldDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field-specific props\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: stringProperties\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"General props\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: fieldProperties\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Translations\"\n    }), \"\\n\", _jsx(TranslationsTable, {\n      localeKey: ['StringField', 'Field']\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const inputProperties: PropertiesTableProps = {\n  value: {\n    doc: 'The content value of the input.',\n    type: 'string',\n    status: 'optional',\n  },\n  align: {\n    doc: 'Defines the text alignment of the input. Can be `left`, `right` or `center`. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Prepends the Form Label component. If no ID is provided, a random ID is created.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  label_sr_only: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  label_direction: {\n    doc: 'Use `label_direction=\"vertical\"` to change the label layout direction. Defaults to `horizontal`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status: {\n    doc: 'Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'object',\n    status: 'optional',\n  },\n  placeholder: {\n    doc: 'The placeholder which shows up once the input value is empty.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon: {\n    doc: 'Icon to show before or after the input / placeholder. Can be either a string defining a primary icon or a Component using an SVG icon of either 16px or 24px.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  icon_position: {\n    doc: 'Defines the position of icon inside the input. Set to `left` or `right`. Defaults to `left` if not set.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'The icon size of the icon shows. Defaults to `medium`.',\n    type: 'string',\n    status: 'optional',\n  },\n  keep_placeholder: {\n    doc: 'Set to `true` in case the `placeholder` has to be kept during focus. By default, the placeholder disappears on focus.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  input_class: {\n    doc: 'In case we have to set a custom input class.',\n    type: 'string',\n    status: 'optional',\n  },\n  type: {\n    doc: 'Choose between `text`, `number`, `email`, `password`, `url`, `tel` and `search`.',\n    type: 'string',\n    status: 'optional',\n  },\n  autocomplete: {\n    doc: 'Defaults to `off`. Set to `on` or any of [allowed `attributes`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete). Keep in mind, 1. you may have to define a `name`, 2. have the input as a descendant of a `<form>` element, 3. and have a submit button inside the form.',\n    type: 'string',\n    status: 'optional',\n  },\n  submit_button_title: {\n    doc: 'Title attribute for the search icon. Only relevant if search input.',\n    type: 'string',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the input more than the label. you can also send in a React component, so it gets wrapped inside the Input component.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  size: {\n    doc: 'The sizes you can choose is `default` (2rem), `medium` (2.5rem) and `large` (3rem) are supported component sizes. Defaults to `default` / `null`. Also, if you define a number like `size={2}` then it will be forwarded as the input element attribute.',\n    type: ['string', 'number'],\n    status: 'optional',\n  },\n  selectall: {\n    doc: 'If set to `true`, then the whole input value gets selected on the entry focus. A second click will place the cursor on the wanted position.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  clear: {\n    doc: 'If set to `true`, then a clear button will be shown which lets the user clear any given input value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  stretch: {\n    doc: 'If set to `true`, then the input field will be 100% in `width`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  input_attributes: {\n    doc: 'Provide the Input element with any attributes by using an Object `input_attributes={{size:\\'2\\'}}` or a JSON Object `input_attributes=\\'{\"size\":\"2\"}\\'`. **NB:** Keep in mind, that also every not listed component property will be sent along and set as an Input element attribute.',\n    type: 'object',\n    status: 'optional',\n  },\n  input_state: {\n    doc: 'Defines a custom visual state of the input. Use it only if you have to simulate a custom state. Currently are three statuses `virgin` , `focus` and `dirty`. Defaults to `null`.',\n    type: 'string',\n    status: 'optional',\n  },\n  submit_element: {\n    doc: 'Accepts a React element which will show up like the \"submit button\" would do on `type=\"search\"`.',\n    type: ['string', 'React.Element'],\n    status: 'optional',\n  },\n  inner_ref: {\n    doc: 'By providing a React.ref we can get the internally used input element (DOM). E.g. `inner_ref={myRef}` by using `React.createRef()` or `React.useRef()`.',\n    type: 'React.Ref',\n    status: 'optional',\n  },\n  input_element: {\n    doc: 'By providing a new component we can change the internally used element. Also supports a string only, like `input_element=\"input\"`.',\n    type: ['string', 'React.Element'],\n    status: 'internal',\n  },\n  inner_element: {\n    doc: 'By providing a new component to be rendered inside the \"shell\" – we can add a freely customizable internal element. Used by the Autocomplete component.',\n    type: ['string', 'React.Element'],\n    status: 'internal',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { fieldBlockSharedProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  dataValueEvents,\n  dataValueProperties,\n} from '../hooks/DataValueDocs'\n\nexport const fieldProperties: PropertiesTableProps = {\n  ...dataValueProperties,\n  ...fieldBlockSharedProperties,\n}\n\nexport const fieldEvents: PropertiesTableProps = {\n  ...dataValueEvents,\n}\n\nexport const getFieldEventsWithTypes = (\n  valueType: { type: string; optional?: boolean } = undefined,\n  additionalArgsType: { type: string; optional?: boolean } = undefined\n): PropertiesTableProps => {\n  const value = valueType\n    ? `value${valueType.optional ? '?' : ''}: ${valueType.type}`\n    : 'value'\n\n  const add = additionalArgsType\n    ? `, additionalArgs${additionalArgsType.optional ? '?' : ''}: ${\n        additionalArgsType.type\n      }`\n    : ''\n\n  const typeString = `(${value}${add}) => void`\n\n  return {\n    ...fieldEvents,\n    onChange: {\n      ...fieldEvents.onChange,\n      type: typeString,\n    },\n    onFocus: {\n      ...fieldEvents.onFocus,\n      type: typeString,\n    },\n    onBlur: {\n      ...fieldEvents.onBlur,\n      type: typeString,\n    },\n  }\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const fieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  width: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const fieldBlockProperties: PropertiesTableProps = {\n  ...fieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading sizes](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'string',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const dataValueProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: 'Info message shown below / after the field.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  warning: {\n    doc: 'Warning message shown below / after the field.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  error: {\n    doc: 'Error message shown below / after the field.',\n    type: 'Error',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set to `true`, the field will give an error if the value fails the required validation. When set to `false`, the field will not be required, but will add a \"(optional)\" suffix to the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSuffix: {\n    doc: 'Will append an additional text to the label, like \"(optional)\". When using `inheritLabel`, the suffix will not be inherited. NB: The visual appearance of the `labelSuffix` may change in the future.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set to `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set to `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  continuousValidation: {\n    doc: 'Set to `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages.',\n    type: 'object',\n    status: 'optional',\n  },\n  validator: {\n    doc: 'Custom validator function that is triggered on every change done by the user. The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function that is triggered when the user leaves a field (e.g., blurring a text input or closing a dropdown). The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'Transforms the value before it gets forwarded to the form data object or returned as the `onChange` value parameter.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const dataValueEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`.\",\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument.',\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument.',\n    type: '(value) => void',\n    status: 'optional',\n  },\n}\n"],"names":["stringProperties","multiline","doc","type","status","leftIcon","rightIcon","capitalize","trim","inputMode","autoComplete","minLength","maxLength","pattern","width","help","size","inputProperties","align","selectall","clear","keepPlaceholder","keep_placeholder","rows","autoresizeMaxRows","characterCounter","autoresize","inputClassName","innerRef","submitElement","_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","fieldProperties","TranslationsTable","localeKey","wrapper","MDXLayout","value","label","label_sr_only","label_direction","status_state","status_props","globalStatus","placeholder","icon","icon_position","icon_size","input_class","autocomplete","submit_button_title","suffix","stretch","skeleton","input_attributes","input_state","submit_element","inner_ref","input_element","inner_element","Td","Th","Tr","dataValueProperties","fieldBlockSharedProperties","fieldEvents","dataValueEvents","getFieldEventsWithTypes","valueType","additionalArgsType","undefined","typeString","optional","onChange","onFocus","onBlur","labelDescription","labelSrOnly","layout","contentWidth","fieldBlockProperties","labelSize","asFieldset","composition","disabled","defaultValue","path","info","warning","error","emptyValue","required","labelSuffix","schema","validateInitially","validateUnchanged","continuousValidation","errorMessages","validator","onBlurValidator","transformIn","transformOut"],"sourceRoot":""}