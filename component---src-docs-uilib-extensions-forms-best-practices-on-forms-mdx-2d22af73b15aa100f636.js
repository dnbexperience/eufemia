"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[76438],{30261:function(e,n,r){r.r(n);var i=r(52322),s=r(45392);function t(e){const n=Object.assign({h1:"h1",p:"p",h2:"h2",ul:"ul",li:"li",code:"code",a:"a",pre:"pre"},(0,s.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{children:"Best Practices on Forms"}),"\n",(0,i.jsx)(n.p,{children:"This document provides a set of best practices to follow when creating forms for DNB."}),"\n",(0,i.jsx)(n.h2,{children:"General"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ensure you have a ",(0,i.jsx)(n.code,{children:"form"})," element. It will add support for additional keyboard (enter key) and auto-complete features. Use the ",(0,i.jsx)(n.a,{href:"/uilib/extensions/forms/Form/Handler/",children:"Form.Handler"})," that uses a HTML form element under the hood."]}),"\n",(0,i.jsxs)(n.li,{children:["Ensure your form HTML elements have a semantic and unique ",(0,i.jsx)(n.code,{children:"name"}),". By using the ",(0,i.jsx)(n.code,{children:"path"})," property (e.g. ",(0,i.jsx)(n.code,{children:'path="/firstName"'}),"), it will set an unique ",(0,i.jsx)(n.code,{children:"name"})," attribute to the rendered HTML element without the need of more work."]}),"\n",(0,i.jsxs)(n.li,{children:["Ensure you have a submit button. Use the ",(0,i.jsx)(n.a,{href:"/uilib/extensions/forms/Form/SubmitButton/",children:"Form.SubmitButton"})," for that."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'<Form.Handler>\n  <Field.String path="/myField" />\n  <Form.SubmitButton>Submit</Form.SubmitButton>\n</Form.Handler>\n'})}),"\n",(0,i.jsx)(n.h2,{children:"Workflow and browser features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ensure to let browser autofill personal data if applicable, based on HTML ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete",children:"autocomplete attributes"}),". By using the ",(0,i.jsx)(n.code,{children:"path"})," property with semantic names (e.g. ",(0,i.jsx)(n.code,{children:'path="/firstName"'}),"), browser will be able to provide a correct autofill integration."]}),"\n",(0,i.jsxs)(n.li,{children:["In some cases, it is appreciated to temporary store user entered input data. Use the ",(0,i.jsx)(n.code,{children:"sessionStorageId"})," feature provided by ",(0,i.jsx)(n.a,{href:"/uilib/extensions/forms/Form/Handler/",children:"Form.Handler"})," for that."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'<Form.Handler sessionStorageId="my-form">\n  <Field.String\n    path="/organizationTitle"\n    autoComplete="organization-title"\n  />\n</Form.Handler>\n'})}),"\n",(0,i.jsx)(n.h2,{children:"Validation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"tab"})," (Tab) key should be used to navigate between form fields. It should NOT trigger validation."]}),"\n",(0,i.jsxs)(n.li,{children:["Required fields should have ",(0,i.jsx)(n.code,{children:'aria-required="true"'})," attribute. Use the ",(0,i.jsx)(n.code,{children:"required"})," property for that."]}),"\n",(0,i.jsxs)(n.li,{children:["Validation should be triggered on ",(0,i.jsx)(n.code,{children:"submit"})," events and on ",(0,i.jsx)(n.code,{children:"blur"})," â€“ if the user has made changes. In some cases, it is appreciated to trigger validation on ",(0,i.jsx)(n.code,{children:"change"})," events. This behavior can be changed if needed by using ",(0,i.jsx)(n.code,{children:"validateInitially"}),", ",(0,i.jsx)(n.code,{children:"validateUnchanged"})," and ",(0,i.jsx)(n.code,{children:"continuousValidation"}),". More info about these properties can be found in the ",(0,i.jsx)(n.a,{href:"/uilib/extensions/forms/create-component/useFieldProps/",children:"useFieldProps"})," documentation."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'<Field.String\n  path="/myField"\n  required\n  onBlurValidator={validationFunction}\n/>\n'})}),"\n",(0,i.jsx)(n.h2,{children:"Error messages"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Fields with errors should have ",(0,i.jsx)(n.code,{children:'aria-invalid="true"'})," attribute."]}),"\n",(0,i.jsxs)(n.li,{children:["When a ",(0,i.jsx)(n.a,{href:"/uilib/components/form-status/",children:"FormStatus"})," (Messageboxes) is used, it should be placed in the DOM before the form element itself and it should be linked together with the related form element by using ",(0,i.jsx)(n.code,{children:"aria-describedby"}),". This is done automatically by the ",(0,i.jsx)(n.a,{href:"/uilib/extensions/forms/create-component/FieldBlock",children:"FieldBlock"}),", which is used in each ",(0,i.jsx)(n.a,{href:"/uilib/extensions/forms/all-fields/",children:"field"}),". This will allow screen readers to find and announce the error message without too much frustration."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'<Field.String\n  label="Show me an error message"\n  required\n  validateInitially\n/>\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"To improve user experience communication regarding errors and their locations, WCAG/UU suggests summarizing error messages when errors have occurred. Eufemia Forms will only display the summary when the form is being submitted and not when one field shows its error during the blur event."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"<GlobalStatus />\n<Form.Handler>\n  My Form\n</Form.Handler>\n"})}),"\n",(0,i.jsx)(n.h2,{children:"Semantics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["When several form elements do share the same label, a ",(0,i.jsx)(n.code,{children:"fieldset"})," and ",(0,i.jsx)(n.code,{children:"legend"})," element should be used to group them together. Use the ",(0,i.jsx)(n.a,{href:"/uilib/extensions/forms/create-component/FieldBlock",children:"FieldBlock"})," for that."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'<FieldBlock label="My legend">\n  <Field.String path="/myFirstField" />\n  <Field.String path="/mySecondField" />\n</FieldBlock>\n'})}),"\n",(0,i.jsx)(n.h2,{children:"Focus management"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["When replacing content on the screen dynamically, a screen reader user should receive a notice. The ",(0,i.jsx)(n.a,{href:"/uilib/extensions/forms/Wizard/",children:"Wizard"})," component includes focus and scroll management by default."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'<Wizard.Container>\n  <Wizard.Step title="Step 1">...</Wizard.Step>\n  <Wizard.Step title="Step 2">...</Wizard.Step>\n</Wizard.Container>\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/uilib/extensions/forms/Iterate/",children:"Iterate"})," component also includes focus management by default similar as the Wizard step change."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"<Wizard.Container>\n  <Iterate.Array>\n    <Iterate.AnimatedContainer>...</Iterate.AnimatedContainer>\n  </Iterate.Array>\n</Wizard.Container>\n"})})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(t,e)})):t(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-best-practices-on-forms-mdx-2d22af73b15aa100f636.js.map