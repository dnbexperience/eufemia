{"version":3,"file":"component---src-docs-uilib-extensions-forms-connectors-bring-demos-mdx-41ffb5ae8e3d328113b9.js","mappings":"2RAkBO,SAASA,EACdC,GAEA,YAFmC,IAAnCA,IAAAA,EAAsC,MAE/B,CACLC,WAKEC,EAAmBC,GACnB,OAAOD,EAAGF,EAAeG,EAC3B,EAEJ,CAuFOC,eAAeC,EACpBC,EACAC,GACsC,IAADC,EACrC,MAAM,cAAER,EAAa,WAAES,GAAeF,GAAW,CAAC,EAE5CG,EAASH,SAA4B,QAArBC,EAAPD,EAASI,2BAAmB,IAAAH,OAArB,EAAPA,EAAAI,KAAAL,EAA+B,CAAED,UAChD,QAAsB,IAAXI,EACT,OAAOA,EAGT,MAAMG,EAAIb,EAAcc,YAAYC,IAC9BA,EAAmB,mBAANF,QAAyBA,EAAEP,EAAOG,GAAcI,GAE7D,KAAEG,EAAI,SAAEC,SAnEhBb,eACEJ,EACAO,GAKA,MAAM,YAAEO,GAAgBd,EAElBkB,EAAaX,aAAO,EAAPA,EAASY,mBACxBD,IACEA,EAAWE,UACbF,EAAWE,QAAQC,QACnBH,EAAWE,QAAU,MAElBF,EAAWE,UACdF,EAAWE,QAAU,IAAIE,kBAG7B,MAAM,OAAEC,IAAWL,aAAU,EAAVA,EAAYE,UAAW,CAAC,EAErCI,EAAe,CACnBC,OAAQ,MACRC,QAAS,CACPC,OAAQ,sBACLb,EAAYY,SAEjBH,UAGF,IACE,MAAMN,QAAiBW,MAAMd,EAAYC,IAAKS,GAM9C,OAJIN,IACFA,EAAWE,QAAU,MAGhB,CACLH,WACAD,WAAYC,EAASY,OAEzB,CAAE,MAAOC,GACP,GAAmB,eAAfA,EAAMC,KACR,OAAOD,CAEX,CACF,CAqBmCE,CAC/B,IACKhC,EACHc,YAAa,IACRd,EAAcc,YACjBC,QAGJR,GAIF,IAAKU,EAASgB,GACZ,MAAM,IAAIC,MAAO,GAAEjB,EAASkB,wBAAwBlB,EAASmB,UAG/D,MAAO,CAAEpB,OAAMoB,OAAQnB,EAASmB,OAClC,CAEO,SAASC,EAAmBC,GAM/B,IAADC,EAAA,IALDC,YAAaC,EAAgB,eAC7BC,GAIDJ,EACC,MAAMK,EACJF,IACoB,QADJF,EAChBG,EAAeE,aAAK,IAAAL,OAAA,EAApBA,EAAuB,uBACvBM,EAAAA,GAIF,MAAO,CAAEL,YAFPE,EAAeI,eAAuBH,IACtCF,EACoBE,mBACxB,CAEO,SAASI,EAAiBC,GAa7B,IAADC,EAAA,IAb+B,MAChC3C,EACAkC,YAAaC,EAAgB,eAC7BC,EAAc,QACdQ,GASDF,EACC,MAAM,YAAER,EAAW,iBAAEG,GAAqBN,EAAoB,CAC5DG,YACEC,IAAwC,QAAxBQ,EAAIP,EAAeE,aAAK,IAAAK,OAAA,EAApBA,EAAuB,sBAC7CP,mBAiBF,OAbES,OAAOR,GAAkBS,WAAW,MACpCV,EAAeQ,EAAQnB,QAAUmB,IAEjCR,EAAeQ,EAAQnB,MAAQmB,EAC/BR,EAAeW,sBACbV,EACA,gBACA,KACEO,EAAQ5C,EAAOoC,EAAe,KAK7B,CAAEF,cACX,CAEO,SAASc,EACdd,EACAe,GAEA,QAAKf,GAGGe,EAAmDC,SACzDL,OAAOX,GAAaiB,cAExB,C,2UC1MO,MAAMF,EAAwB,CACnC,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAWWG,EACX,+DASW/C,EAA2C2B,IAAgB,IAAf,MAAEhC,GAAOgC,EAChE,IAAKhC,EACH,MAAO,CAAEqD,aAAc,GACzB,EAGWC,EAGTA,CAAC5C,EAAMb,KAAmB,IAAD0D,EAC3B,MAAMC,EAAW3D,aAAa,EAAbA,EAAeyD,iBAChC,GAAwB,mBAAbE,EACT,OAAOA,EAAS9C,GAKlB,MAAM,YAAE+C,EAAW,KAAEC,IAAShD,SAAkB,QAAd6C,EAAJ7C,EAAM2C,oBAAY,IAAAE,OAAd,EAAJA,EAAqB,KAAM,CAAC,EAE1D,MAAO,CACLI,QAAU3D,GAAUA,IAAUyD,EAC9BG,QAAS,CAAEF,QACZ,EAGI,SAASG,EACdnE,EACAG,GAEA,MAAMgB,EAAqB,CAAEC,QAAS,MAEtC,OAAOhB,eAAegE,EAAgB9D,EAAOoC,GAC3C,KAAuB,iBAAVpC,GAAsBA,EAAM+D,QAAU,GACjD,OAIF,MAAM,YAAE7B,IAAgBO,EAAAA,EAAAA,IAAkB,CACxCzC,QACAkC,YAAarC,aAAa,EAAbA,EAAeqC,YAC5BE,iBACAQ,QAASkB,IAGX,IAAKd,EAAAA,EAAAA,IAAuBd,EAAae,GAIzC,IAAK,IAADe,EACF,MAAM7D,EAAa,CACjB+B,YAAaW,OAAOX,GAAa+B,gBAE7B,KAAEvD,SAAeX,EAAAA,EAAAA,IAAkCC,EAAO,CAC9DN,gBACAS,aACAU,qBACAR,oBACoC,QADjB2D,EACjBnE,aAAa,EAAbA,EAAeQ,2BAAmB,IAAA2D,EAAAA,EAAI3D,IAGpC6D,EAAWN,IACf,MAAM,SAAEO,GAAatE,GAAiB,CAAC,EACvC,GAAIsE,EAAU,CACZ,IAAK/B,EAAegC,YAClB,MAAM,IAAIxC,MACR,qDAGJQ,EAAegC,YAAYC,4BACzBF,EACAP,EAAQF,KAEZ,IAGI,QAAEC,EAAO,QAAEC,GAAYN,EAAiB5C,EAAMb,GAGpD,GAFc8D,EAAQ3D,GAGpB,OAAOkE,EAAQN,EAEnB,CAAE,MAAOpC,GACP,OAAOA,CACT,CACF,CACF,CAEO,SAAS8C,EACd5E,EACAG,GAIA,MAAMgB,EAAqB,CAAEC,QAAS,MAEtC,OAAOhB,eAAgCE,EAAOoC,GAC5C,KAAuB,iBAAVpC,GAAsBA,EAAM+D,QAAU,GACjD,OAGF,MAAM,YAAE7B,IAAgBH,EAAAA,EAAAA,IAAoB,CAAEK,mBAE9C,KAAKY,EAAAA,EAAAA,IAAuBd,EAAae,GACvC,OAAO,IAAIrB,MACTwB,EAA8BmB,QAAQ,gBAAiBrC,IAI3D,IAAK,IAADsC,EACF,MAAMrE,EAAa,CACjB+B,YAAaW,OAAOX,GAAa+B,gBAE7B,KAAEvD,EAAI,OAAEoB,SAAiB/B,EAAAA,EAAAA,IAC7BC,EACA,CACEN,gBACAS,aACAU,qBACAR,oBACoC,QADjBmE,EACjB3E,aAAa,EAAbA,EAAeQ,2BAAmB,IAAAmE,EAAAA,EAAInE,IAItC6D,EAAUA,IACP,IAAIO,EAAAA,EAAU,kCAGjB,QAAEd,GAAYL,EAAiB5C,EAAMb,GACrC6E,EAAQf,EAAQ3D,GAEtB,GAAe,MAAX8B,IAAmB4C,EACrB,OAAOR,GAEX,CAAE,MAAO1C,GACP,OAAOA,CACT,CACF,CACF,CAEO,SAASmD,EAAYzC,GAC1B,MACO,OADCW,OAAOX,GAAaiB,cAEjB,CACLE,aAAc,CACZ,CACEK,KAAM,YACND,YAAa,WAMZ,CACLJ,aAAc,CACZ,CACEK,KAAM,SACND,YAAa,SAKzB,C,kfC3MA,IAAImB,EAAmB,KACvB9E,eAAe+E,EAAU3C,GACvB,MAAM4C,EAAgBC,WAAWzD,MAEjCyD,WAAWzD,MAAQ,IACV0D,QAAQC,QAAQ,CACrBtD,IAAI,EACJJ,KAAMA,IACGyD,QAAQC,SAAQN,EAAAA,EAAAA,aAAYzC,YAKnC,IAAI8C,SAASC,GAAYC,WAAWD,EAAS,OAEnDE,aAAaP,GACbA,EAAmBM,YAAW,KAC5BH,WAAWzD,MAAQwD,CAAa,GAC/B,KACL,CAEO,MAAMM,EAAaA,KACxBC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,MAAA,CACFC,WAAA,EACAb,YAAA,cACAE,aACAY,UAAA,EAAAC,SAAA,69BC1BA,SAASC,EAAkBrD,GACzB,MAAMsD,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,KAAsB5D,EAAM6D,YAG/B,OAFKC,GAAUC,EAAqB,YAAY,GAC3CD,GAAqBC,EAAqB,uBAAuB,IAC/DC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBb,SAAU,EAACL,EAAAA,EAAAA,KAAKO,EAAYG,GAAI,CAC9BL,SAAU,UACR,MAAMY,EAAAA,EAAAA,MAAMV,EAAYI,EAAG,CAC7BN,SAAU,CAAC,wEAAwEL,EAAAA,EAAAA,KAAKO,EAAYK,KAAM,CACxGP,SAAU,SACR,oBAAoBL,EAAAA,EAAAA,KAAKO,EAAYK,KAAM,CAC7CP,SAAU,UACR,2BACF,MAAML,EAAAA,EAAAA,KAAKe,EAAqB,CAAC,KAEzC,CAOA,MANA,SAAoB9D,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOkE,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,KAAsB5D,EAAM6D,YAC3E,OAAOM,GAAYpB,EAAAA,EAAAA,KAAKoB,EAAWZ,OAAOC,OAAO,CAAC,EAAGxD,EAAO,CAC1DoD,UAAUL,EAAAA,EAAAA,KAAKM,EAAmBrD,MAC9BqD,EAAkBrD,EAC1B,EAEA,SAAS+D,EAAqBK,EAAIC,GAChC,MAAM,IAAI/E,MAAM,aAAe+E,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,C","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Connectors/createContext.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Connectors/Bring/postalCode.ts","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Connectors/Bring/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Connectors/Bring/demos.mdx"],"sourcesContent":["import { ReceiveAdditionalEventArgs } from '../types'\nimport { COUNTRY as defaultCountry } from '../../../shared/defaults'\n\nexport type UrlSecondParameter = {\n  countryCode: string\n}\nexport type GeneralConfig = {\n  fetchConfig?: {\n    url:\n      | string\n      | ((\n          value: string,\n          { countryCode }: UrlSecondParameter\n        ) => string | Promise<string>)\n    headers?: HeadersInit\n  }\n}\n\nexport function createContext<GeneralConfigGeneric = GeneralConfig>(\n  generalConfig: GeneralConfigGeneric = null\n) {\n  return {\n    withConfig<\n      HandlerMethod extends (\n        generalConfig: GeneralConfigGeneric,\n        handlerConfig: unknown\n      ) => ReturnType<HandlerMethod>,\n    >(fn: HandlerMethod, handlerConfig?: Parameters<HandlerMethod>[1]) {\n      return fn(generalConfig, handlerConfig)\n    },\n  }\n}\n\nexport type HandlerConfig = {\n  preResponseResolver?: PreResponseResolver\n  responseResolver?: ResponseResolver\n}\nexport type PreResponseResolver = (fromField: { value: string }) => unknown\nexport type ResponseResolver<\n  Response = unknown,\n  Payload = Record<string, unknown>,\n> = (\n  response: Response,\n  handlerConfig?: HandlerConfig\n) => {\n  /**\n   * The matcher to be used to determine if and how the connector,\n   * such as an validator for `onChangeValidator` or `onBlurValidator`,\n   * should validate the field value.\n   */\n  matcher?: (value: string) => boolean\n\n  /**\n   * The payload to be returned and used by the connector.\n   */\n  payload?: Payload\n}\n\nexport type FetchDataFromAPIOptions = {\n  generalConfig: GeneralConfig\n  parameters?: UrlSecondParameter\n  abortControllerRef?: { current: null | AbortController }\n  preResponseResolver?: PreResponseResolver\n}\n\nasync function fetchDataFromAPI<Data = unknown>(\n  generalConfig: GeneralConfig & { fetchConfig: { url: string } },\n  options?: FetchDataFromAPIOptions\n): Promise<{\n  data: Data\n  response: Response\n}> {\n  const { fetchConfig } = generalConfig\n\n  const controller = options?.abortControllerRef\n  if (controller) {\n    if (controller.current) {\n      controller.current.abort()\n      controller.current = null\n    }\n    if (!controller.current) {\n      controller.current = new AbortController()\n    }\n  }\n  const { signal } = controller?.current || {}\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      ...fetchConfig.headers,\n    },\n    signal,\n  }\n\n  try {\n    const response = await fetch(fetchConfig.url, fetchOptions)\n\n    if (controller) {\n      controller.current = null\n    }\n\n    return {\n      response,\n      data: await response.json(),\n    }\n  } catch (error) {\n    if (error.name !== 'AbortError') {\n      return error\n    }\n  }\n}\n\nexport type FetchDataReturnValue<Data = unknown> = {\n  data: Data\n  status: number\n}\n\nexport async function fetchData<Data = unknown>(\n  value: string,\n  options: FetchDataFromAPIOptions\n): Promise<FetchDataReturnValue<Data>> {\n  const { generalConfig, parameters } = options || {}\n\n  const result = options?.preResponseResolver?.({ value })\n  if (typeof result !== 'undefined') {\n    return result as FetchDataReturnValue<Data>\n  }\n\n  const u = generalConfig.fetchConfig.url\n  const url = typeof u === 'function' ? await u(value, parameters) : u\n\n  const { data, response } = await fetchDataFromAPI<Data>(\n    {\n      ...generalConfig,\n      fetchConfig: {\n        ...generalConfig.fetchConfig,\n        url,\n      },\n    },\n    options\n  )\n\n  // Check if the response status is in the range of 200-299\n  if (!response.ok) {\n    throw new Error(`${response.statusText} â€“ Status: ${response.status}`)\n  }\n\n  return { data, status: response.status }\n}\n\nexport function getCountryCodeValue({\n  countryCode: givenCountryCode,\n  additionalArgs,\n}: {\n  countryCode?: string\n  additionalArgs: ReceiveAdditionalEventArgs<unknown>\n}) {\n  const countryCodeValue =\n    givenCountryCode ||\n    additionalArgs.props?.['data-country-code'] ||\n    defaultCountry\n  const countryCode =\n    additionalArgs.getSourceValue<string>(countryCodeValue) ||\n    givenCountryCode\n  return { countryCode, countryCodeValue }\n}\n\nexport function handleCountryPath({\n  value,\n  countryCode: givenCountryCode,\n  additionalArgs,\n  handler,\n}: {\n  value: string\n  countryCode?: string\n  additionalArgs: ReceiveAdditionalEventArgs<unknown>\n  handler: (\n    value: string,\n    additionalArgs: ReceiveAdditionalEventArgs<unknown>\n  ) => void\n}) {\n  const { countryCode, countryCodeValue } = getCountryCodeValue({\n    countryCode:\n      givenCountryCode || additionalArgs.props?.['data-country-code'],\n    additionalArgs,\n  })\n\n  if (\n    String(countryCodeValue).startsWith('/') &&\n    additionalArgs[handler.name] !== handler\n  ) {\n    additionalArgs[handler.name] = handler\n    additionalArgs.setFieldEventListener(\n      countryCodeValue,\n      'onPathChange',\n      () => {\n        handler(value, additionalArgs)\n      }\n    )\n  }\n\n  return { countryCode }\n}\n\nexport function isSupportedCountryCode(\n  countryCode: string,\n  supportedCountryCodes: readonly string[]\n) {\n  if (!countryCode) {\n    return false\n  }\n  return (supportedCountryCodes as unknown as Array<string>).includes(\n    String(countryCode).toUpperCase()\n  )\n}\n","import type { Path, PathStrict, UseFieldProps } from '../../types'\nimport { FormError } from '../../utils'\nimport {\n  GeneralConfig,\n  HandlerConfig,\n  PreResponseResolver,\n  ResponseResolver,\n  fetchData,\n  getCountryCodeValue,\n  handleCountryPath,\n  isSupportedCountryCode,\n} from '../createContext'\n\nexport const supportedCountryCodes = [\n  'NO', // Norway\n  'DK', // Denmark\n  'SE', // Sweden\n  'FI', // Finland\n  'NL', // Netherlands\n  'DE', // Germany\n  'US', // United States\n  'BE', // Belgium\n  'FO', // Faroe Islands\n  'GL', // Greenland\n  'IS', // Iceland\n  'SJ', // Svalbard and Jan Mayen\n] as const\nexport type SupportedCountries = (typeof supportedCountryCodes)[number]\n\ntype AutofillHandlerConfig = HandlerConfig & {\n  countryCode?:\n    | PathStrict\n    | SupportedCountries\n    | Lowercase<SupportedCountries>\n}\n\nexport const unsupportedCountryCodeMessage =\n  'Postal code verification is not supported for {countryCode}.'\n\nexport type PostalCodeResolverData = {\n  postal_codes: { postal_code: string; city: string }[]\n}\nexport type PostalCodeResolverPayload = {\n  city: string\n}\n\nexport const preResponseResolver: PreResponseResolver = ({ value }) => {\n  if (!value) {\n    return { postal_codes: [] }\n  }\n}\n\nexport const responseResolver: ResponseResolver<\n  PostalCodeResolverData,\n  PostalCodeResolverPayload\n> = (data, handlerConfig) => {\n  const resolver = handlerConfig?.responseResolver\n  if (typeof resolver === 'function') {\n    return resolver(data) as ReturnType<typeof resolver> & {\n      payload: PostalCodeResolverPayload\n    }\n  }\n\n  const { postal_code, city } = data?.postal_codes?.[0] || {}\n\n  return {\n    matcher: (value) => value === postal_code,\n    payload: { city },\n  }\n}\n\nexport function autofill(\n  generalConfig: GeneralConfig,\n  handlerConfig?: AutofillHandlerConfig & { cityPath: Path }\n): UseFieldProps<string>['onChange'] {\n  const abortControllerRef = { current: null }\n\n  return async function autofillHandler(value, additionalArgs) {\n    if (!(typeof value === 'string' && value.length >= 4)) {\n      return // stop here\n    }\n\n    // Get country code from path or use given countryCode value\n    const { countryCode } = handleCountryPath({\n      value,\n      countryCode: handlerConfig?.countryCode,\n      additionalArgs,\n      handler: autofillHandler,\n    })\n\n    if (!isSupportedCountryCode(countryCode, supportedCountryCodes)) {\n      return // stop here\n    }\n\n    try {\n      const parameters = {\n        countryCode: String(countryCode).toLowerCase(),\n      }\n      const { data } = await fetchData<PostalCodeResolverData>(value, {\n        generalConfig,\n        parameters,\n        abortControllerRef,\n        preResponseResolver:\n          handlerConfig?.preResponseResolver ?? preResponseResolver,\n      })\n\n      const onMatch = (payload: PostalCodeResolverPayload) => {\n        const { cityPath } = handlerConfig || {}\n        if (cityPath) {\n          if (!additionalArgs.dataContext) {\n            throw new Error(\n              'No data context found in the postalCode connector'\n            )\n          }\n          additionalArgs.dataContext.handlePathChangeUnvalidated(\n            cityPath,\n            payload.city\n          )\n        }\n      }\n\n      const { matcher, payload } = responseResolver(data, handlerConfig)\n      const match = matcher(value)\n\n      if (match) {\n        return onMatch(payload)\n      }\n    } catch (error) {\n      return error\n    }\n  }\n}\n\nexport function validator(\n  generalConfig: GeneralConfig,\n  handlerConfig?: AutofillHandlerConfig\n):\n  | UseFieldProps<string>['onChangeValidator']\n  | UseFieldProps<string>['onBlurValidator'] {\n  const abortControllerRef = { current: null }\n\n  return async function validatorHandler(value, additionalArgs) {\n    if (!(typeof value === 'string' && value.length >= 4)) {\n      return // stop here\n    }\n\n    const { countryCode } = getCountryCodeValue({ additionalArgs })\n\n    if (!isSupportedCountryCode(countryCode, supportedCountryCodes)) {\n      return new Error(\n        unsupportedCountryCodeMessage.replace('{countryCode}', countryCode)\n      )\n    }\n\n    try {\n      const parameters = {\n        countryCode: String(countryCode).toLowerCase(),\n      }\n      const { data, status } = await fetchData<PostalCodeResolverData>(\n        value,\n        {\n          generalConfig,\n          parameters,\n          abortControllerRef,\n          preResponseResolver:\n            handlerConfig?.preResponseResolver ?? preResponseResolver,\n        }\n      )\n\n      const onMatch = () => {\n        return new FormError('PostalCodeAndCity.invalidCode')\n      }\n\n      const { matcher } = responseResolver(data, handlerConfig)\n      const match = matcher(value)\n\n      if (status !== 400 && !match) {\n        return onMatch()\n      }\n    } catch (error) {\n      return error\n    }\n  }\n}\n\nexport function getMockData(countryCode?: string) {\n  switch (String(countryCode).toUpperCase()) {\n    case 'SE':\n      return {\n        postal_codes: [\n          {\n            city: 'Stockholm',\n            postal_code: '11432',\n          },\n        ],\n      }\n    case 'NO':\n    default:\n      return {\n        postal_codes: [\n          {\n            city: 'Vollen',\n            postal_code: '1391',\n          },\n        ],\n      }\n  }\n}\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { getMockData } from '@dnb/eufemia/src/extensions/forms/Connectors/Bring/postalCode'\nimport { Form, Field, Connectors } from '@dnb/eufemia/src/extensions/forms'\n\nlet mockFetchTimeout = null\nasync function mockFetch(countryCode: string) {\n  const originalFetch = globalThis.fetch\n\n  globalThis.fetch = () => {\n    return Promise.resolve({\n      ok: true,\n      json: () => {\n        return Promise.resolve(getMockData(countryCode))\n      },\n    }) as any\n  }\n\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n\n  clearTimeout(mockFetchTimeout)\n  mockFetchTimeout = setTimeout(() => {\n    globalThis.fetch = originalFetch\n  }, 1100)\n}\n\nexport const PostalCode = () => {\n  return (\n    <ComponentBox scope={{ Connectors, getMockData, mockFetch }}>\n      {() => {\n        const { withConfig } = Connectors.createContext({\n          fetchConfig: {\n            url: async (value, { countryCode }) => {\n              await mockFetch(countryCode)\n              return `[YOUR-API-URL]/${value}`\n            },\n          },\n        })\n\n        const onBlurValidator = withConfig(\n          Connectors.Bring.postalCode.validator,\n        )\n\n        const onChange = withConfig(Connectors.Bring.postalCode.autofill, {\n          cityPath: '/city',\n        })\n\n        return (\n          <Form.Handler onSubmit={console.log}>\n            <Form.Card>\n              <Field.SelectCountry\n                path=\"/countryCode\"\n                defaultValue=\"NO\"\n                filterCountries={({ iso }) => ['NO', 'SE'].includes(iso)}\n              />\n              <Field.PostalCodeAndCity\n                countryCode=\"/countryCode\"\n                postalCode={{\n                  path: '/postalCode',\n                  onBlurValidator,\n                  onChange,\n                  required: true,\n                }}\n                city={{\n                  path: '/city',\n                  required: true,\n                }}\n              />\n            </Form.Card>\n            <Form.SubmitButton />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.PostalCode) _missingMdxReference(\"Examples.PostalCode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This demo contains only a mocked API call, so only a postal code of \", _jsx(_components.code, {\n        children: \"1391\"\n      }), \" for Norway and \", _jsx(_components.code, {\n        children: \"11432\"\n      }), \" for Sweden is valid.\"]\n    }), \"\\n\", _jsx(Examples.PostalCode, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["createContext","generalConfig","withConfig","fn","handlerConfig","async","fetchData","value","options","_options$preResponseR","parameters","result","preResponseResolver","call","u","fetchConfig","url","data","response","controller","abortControllerRef","current","abort","AbortController","signal","fetchOptions","method","headers","Accept","fetch","json","error","name","fetchDataFromAPI","ok","Error","statusText","status","getCountryCodeValue","_ref","_additionalArgs$props","countryCode","givenCountryCode","additionalArgs","countryCodeValue","props","defaultCountry","getSourceValue","handleCountryPath","_ref2","_additionalArgs$props2","handler","String","startsWith","setFieldEventListener","isSupportedCountryCode","supportedCountryCodes","includes","toUpperCase","unsupportedCountryCodeMessage","postal_codes","responseResolver","_data$postal_codes","resolver","postal_code","city","matcher","payload","autofill","autofillHandler","length","_handlerConfig$preRes","toLowerCase","onMatch","cityPath","dataContext","handlePathChangeUnvalidated","validator","replace","_handlerConfig$preRes2","FormError","match","getMockData","mockFetchTimeout","mockFetch","originalFetch","globalThis","Promise","resolve","setTimeout","clearTimeout","PostalCode","_jsx","ComponentBox","scope","Connectors","noInline","children","_createMdxContent","_components","Object","assign","h2","p","code","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component"],"sourceRoot":""}