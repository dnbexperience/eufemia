"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[99501],{7075:function(n,e,t){t.d(e,{Ap:function(){return u},EH:function(){return i},Fd:function(){return s},T0:function(){return a},q6:function(){return r}});var o=t(19044);function r(n){return void 0===n&&(n=null),{withConfig(e,t){return e(n,t)}}}async function s(n,e){var t;const{generalConfig:o,parameters:r}=e||{},s=null==e||null===(t=e.preResponseResolver)||void 0===t?void 0:t.call(e,{value:n});if(void 0!==s)return s;const a=o.fetchConfig.url,i="function"==typeof a?await a(n,r):a,{data:u,response:c}=await async function(n,e){const{fetchConfig:t}=n,o=null==e?void 0:e.abortControllerRef;o&&(o.current&&(o.current.abort(),o.current=null),o.current||(o.current=new AbortController));const{signal:r}=(null==o?void 0:o.current)||{},s={method:"GET",headers:{Accept:"application/json",...t.headers},signal:r};try{const n=await fetch(t.url,s);return o&&(o.current=null),{response:n,data:await n.json()}}catch(a){if("AbortError"!==a.name)return a}}({...o,fetchConfig:{...o.fetchConfig,url:i}},e);if(!c)throw new Error("Please try again!");if(!c.ok)throw new Error(`${c.statusText} â€“ Status: ${c.status}`);return{data:u,status:c.status}}function a(n){var e;let{countryCode:t,additionalArgs:r}=n;const s=t||(null===(e=r.props)||void 0===e?void 0:e["data-country-code"])||o.DH;return{countryCode:r.getSourceValue(s)||t,countryCodeValue:s}}function i(n){var e;let{value:t,countryCode:o,additionalArgs:r,handler:s}=n;const{countryCode:i,countryCodeValue:u}=a({countryCode:o||(null===(e=r.props)||void 0===e?void 0:e["data-country-code"]),additionalArgs:r});return String(u).startsWith("/")&&r[s.name]!==s&&(r[s.name]=s,r.setFieldEventListener(u,"onPathChange",(()=>{s(t,r)}))),{countryCode:i}}function u(n,e){return!!n&&e.includes(String(n).toUpperCase())}},19869:function(n,e,t){t.r(e),t.d(e,{autofill:function(){return d},getMockData:function(){return p},preResponseResolver:function(){return u},responseResolver:function(){return c},supportedCountryCodes:function(){return a},unsupportedCountryCodeMessage:function(){return i},validator:function(){return l}});var o=t(4565),r=t(74180),s=t(7075);const a=["NO","DK","SE","FI","NL","DE","US","BE","FO","GL","IS","SJ"],i="Postal code verification is not supported for {countryCode}.",u=n=>{let{value:e}=n;if(!e)return{postal_codes:[]}},c=(n,e)=>{var t;const o=null==e?void 0:e.responseResolver;if("function"==typeof o)return o(n);const{postal_code:r,city:s}=(null==n||null===(t=n.postal_codes)||void 0===t?void 0:t[0])||{};return{matcher:n=>n===r,payload:{city:s}}};function d(n,e){const t={current:null};return async function o(i,d){if(!("string"==typeof i&&i.length>=4))return;const{countryCode:l}=(0,s.EH)({value:i,countryCode:null==e?void 0:e.countryCode,additionalArgs:d,handler:o});if((0,s.Ap)(l,a))try{var p;const o={countryCode:String(l).toLowerCase()},{data:a}=await(0,s.Fd)(i,{generalConfig:n,parameters:o,abortControllerRef:t,preResponseResolver:null!==(p=null==e?void 0:e.preResponseResolver)&&void 0!==p?p:u}),f=n=>{const{cityPath:t}=e||{};if(t){if(!d.dataContext)throw new Error("No data context found in the postalCode connector");const{dataContext:e}=d,o=e.internalDataRef.current;(r.zy(o,t)?r.Jt(o,t):void 0)||e.handlePathChangeUnvalidated(t,n.city)}},{matcher:C,payload:y}=c(a,e);if(C(i))return f(y)}catch(f){return f}}}function l(n,e){const t={current:null};return async function(r,d){if(!("string"==typeof r&&r.length>=4))return;const{countryCode:l}=(0,s.T0)({additionalArgs:d});if(!(0,s.Ap)(l,a))return new Error(i.replace("{countryCode}",l));try{var p;const a={countryCode:String(l).toLowerCase()},{data:i,status:d}=await(0,s.Fd)(r,{generalConfig:n,parameters:a,abortControllerRef:t,preResponseResolver:null!==(p=null==e?void 0:e.preResponseResolver)&&void 0!==p?p:u}),f=()=>new o.j("PostalCodeAndCity.invalidCode"),{matcher:C}=c(i,e),y=C(r);if(400!==d&&!y)return f()}catch(f){return f}}}function p(n){return"SE"===String(n).toUpperCase()?{postal_codes:[{city:"Stockholm",postal_code:"11432"}]}:{postal_codes:[{city:"Vollen",postal_code:"1391"}]}}},48201:function(n,e,t){t.r(e);var o=t(31085),r=t(71184),s=t(85383);function a(n){const e=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code"},(0,r.R)(),n.components);return s||i("Examples",!1),s.Address||i("Examples.Address",!0),s.PostalCode||i("Examples.PostalCode",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:"Demos"}),"\n",(0,o.jsx)(e.h3,{children:"Verify a postal code"}),"\n",(0,o.jsxs)(e.p,{children:["This demo contains only a mocked API call, so only a postal code of ",(0,o.jsx)(e.code,{children:"1391"})," for Norway and ",(0,o.jsx)(e.code,{children:"11432"})," for Sweden is valid."]}),"\n",(0,o.jsx)(s.PostalCode,{}),"\n",(0,o.jsx)(e.h3,{children:"Address suggestion"}),"\n",(0,o.jsx)(e.p,{children:"This demo contains only a mocked API call, so you can enter anything in the Gateadresse/Street field."}),"\n",(0,o.jsx)(s.Address,{})]})}function i(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,r.R)(),n.components);return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(a,n)})):a(n)}},85383:function(n,e,t){t.r(e),t.d(e,{Address:function(){return f},PostalCode:function(){return p}});var o={};t.r(o),t.d(o,{address:function(){return i},postalCode:function(){return a}});var r={};t.r(r),t.d(r,{Bring:function(){return o},createContext:function(){return u.q6},fetchData:function(){return u.Fd},getCountryCodeValue:function(){return u.T0},handleCountryPath:function(){return u.EH},isSupportedCountryCode:function(){return u.Ap}});var s=t(32065),a=t(19869),i=t(85637),u=t(7075),c=t(31085);let d=null;async function l(n,e){const t=globalThis.fetch;globalThis.fetch=()=>Promise.resolve({ok:!0,json:()=>Promise.resolve(e)}),await new Promise((n=>setTimeout(n,1e3))),clearTimeout(d),d=setTimeout((()=>{globalThis.fetch=t}),1100)}const p=()=>(0,c.jsx)(s.A,{scope:{Connectors:r,getMockDataPostalCode:a.getMockData,mockFetch:l},noInline:!0,children:"const { withConfig } = Connectors.createContext({\n  fetchConfig: {\n    url: async (value, { countryCode }) => {\n      await mockFetch(countryCode, getMockDataPostalCode(countryCode))\n      return `[YOUR-API-URL]/${value}`\n    },\n  },\n})\nconst onBlurValidator = withConfig(Connectors.Bring.postalCode.validator)\nconst onBlur = withConfig(Connectors.Bring.postalCode.autofill, {\n  cityPath: '/city',\n})\nrender(\n  <Form.Handler onSubmit={console.log}>\n    <Form.Card>\n      <Field.PostalCodeAndCity\n        countryCode=\"/countryCode\"\n        postalCode={{\n          path: '/postalCode',\n          onBlurValidator,\n          onBlur,\n          required: true,\n        }}\n        city={{\n          path: '/city',\n          required: true,\n        }}\n      />\n      <Field.SelectCountry\n        path=\"/countryCode\"\n        defaultValue=\"NO\"\n        filterCountries={({ iso }) => ['NO', 'SE'].includes(iso)}\n      />\n    </Form.Card>\n    <Form.SubmitButton />\n  </Form.Handler>,\n)\n"}),f=()=>(0,c.jsx)(s.A,{scope:{Connectors:r,getMockDataAddress:i.getMockData,mockFetch:l},noInline:!0,children:"const { withConfig } = Connectors.createContext({\n  fetchConfig: {\n    url: async (value, { countryCode }) => {\n      await mockFetch(countryCode, getMockDataAddress(countryCode))\n      return `[YOUR-API-URL]/${value}`\n    },\n  },\n})\nconst addressSuggestionsElement = withConfig(\n  Connectors.Bring.address.suggestionsElement,\n  {\n    countryCode: '/countryCode',\n    cityPath: '/city',\n    postalCodePath: '/postalCode',\n  },\n)\nrender(\n  <Form.Handler onSubmit={console.log}>\n    <Form.Card>\n      <Field.Address.Street\n        path=\"/streetAddress\"\n        element={addressSuggestionsElement}\n      />\n      <Field.PostalCodeAndCity\n        countryCode=\"/countryCode\"\n        postalCode={{\n          path: '/postalCode',\n          required: true,\n        }}\n        city={{\n          path: '/city',\n          required: true,\n        }}\n      />\n      <Field.SelectCountry\n        path=\"/countryCode\"\n        defaultValue=\"NO\"\n        filterCountries={({ iso }) => ['NO', 'SE'].includes(iso)}\n      />\n    </Form.Card>\n\n    <Form.SubmitButton />\n  </Form.Handler>,\n)\n"})},85637:function(n,e,t){t.r(e),t.d(e,{getMockData:function(){return f},preResponseResolver:function(){return c},responseResolver:function(){return d},suggestions:function(){return l},suggestionsElement:function(){return p},supportedCountryCodes:function(){return i},unsupportedCountryMessage:function(){return u}});var o=t(5793),r=t(72556),s=t(7075),a=t(31085);const i=["NO"],u="Postal code verification is not supported for {countryCode}.",c=n=>{let{value:e}=n;if(!e)return{addresses:[]}},d=(n,e)=>{const t=null==e?void 0:e.responseResolver;if("function"==typeof t)return t(n);return{payload:null==n?void 0:n.addresses.map((n=>{const e=[n.street_name,n.house_number].filter(Boolean).join(" "),t=[n.postal_code,n.city].filter(Boolean).join(" ");return{item:n,selected_value:e,selectedKey:e||n.address_id,content:[e,t]}}))}};function l(n,e){const t={current:null};return async function(n){return await o(n.value,n)};async function o(r,a){if("string"!=typeof r)return;const{countryCode:u}=(0,s.EH)({value:r,countryCode:null==e?void 0:e.countryCode,additionalArgs:a,handler:o});if((0,s.Ap)(u,i))try{var l;a.showIndicator();const o={countryCode:String(u).toLowerCase()},{data:i}=await(0,s.Fd)(r,{generalConfig:n,parameters:o,abortControllerRef:t,preResponseResolver:null!==(l=null==e?void 0:e.preResponseResolver)&&void 0!==l?l:c}),{payload:p}=d(i,e);a.updateData(p),a.hideIndicator()}catch(p){return a.hideIndicator(),p}}}function p(n,e){const t=l(n,e),s=(n,t)=>{const{cityPath:o,postalCodePath:r}=e||{},s=null==t?void 0:t.data;if(s){const n=t.dataContext;n.handlePathChangeUnvalidated(r,s.item.postal_code),n.handlePathChangeUnvalidated(o,s.item.city)}};return n=>{const{suggestionPlaceholder:e}=(0,r.A)().StreetAddress;return(0,a.jsx)(o.Ay,{variant:"autocomplete",...n,autocompleteProps:{mode:"async",disableFilter:!0,keepValue:!0,openOnFocus:!0,placeholder:e,onType:t,...null==n?void 0:n.autocompleteProps},onChange:s})}}function f(n){return"SE"===String(n).toUpperCase()?{addresses:[]}:{addresses:[{address_id:"1398742",street_name:"Gransvea",house_number:37,postal_code:"1391",city:"Vollen",county:"Akershus",municipality:"Asker",type:"STREET"},{address_id:"3168496",street_name:"Gransvegen",house_number:1,postal_code:"2090",city:"Hurdal",county:"Akershus",municipality:"Hurdal",type:"STREET"},{address_id:"325829",street_name:"Gransveien",house_number:2,postal_code:"1900",city:"Fetsund",county:"Akershus",municipality:"LillestrÃ¸m",type:"STREET"},{address_id:"325829",street_name:"Somewhere else",house_number:100,postal_code:"1234",city:"City",county:"County",municipality:"Municipality",type:"STREET"}]}}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-connectors-bring-demos-mdx-56763857c90ee1a57bac.js.map