"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[99999],{50716:function(n,t,e){e.r(t),e.d(t,{default:function(){return h}});var o={};e.r(o),e.d(o,{postalCode:function(){return u}});var r={};e.r(r),e.d(r,{Bring:function(){return o},createContext:function(){return l.kr},fetchData:function(){return l.rQ},getCountryCodeValue:function(){return l.hE},handleCountryPath:function(){return l.S_}});var a={};e.r(a),e.d(a,{PostalCode:function(){return p}});var c=e(52322),i=e(45392),s=e(41404),u=e(88568),l=e(16784);let d=null;async function f(n){const t=globalThis.fetch;globalThis.fetch=()=>Promise.resolve({ok:!0,json:()=>Promise.resolve((0,u.getMockData)(n))}),await new Promise((n=>setTimeout(n,1e3))),clearTimeout(d),d=setTimeout((()=>{globalThis.fetch=t}),1100)}const p=()=>(0,c.jsx)(s.Z,{scope:{Connectors:r,getMockData:u.getMockData,mockFetch:f},noInline:!0,children:"const { withConfig } = Connectors.createContext({\n  fetchConfig: {\n    url: async (value, { countryCode }) => {\n      await mockFetch(countryCode)\n      return '[YOUR-API-URL]/' + value\n    },\n  },\n})\nconst onBlurValidator = withConfig(Connectors.Bring.postalCode.validator)\nconst onChange = withConfig(Connectors.Bring.postalCode.autofill, {\n  cityPath: '/city',\n})\nrender(\n  <Form.Handler onSubmit={console.log}>\n    <Form.Card>\n      <Field.SelectCountry\n        path=\"/countryCode\"\n        defaultValue=\"NO\"\n        filterCountries={({ iso }) => ['NO', 'SE'].includes(iso)}\n      />\n      <Field.PostalCodeAndCity\n        countryCode=\"/countryCode\"\n        postalCode={{\n          path: '/postalCode',\n          onBlurValidator,\n          onChange,\n          required: true,\n        }}\n        city={{\n          path: '/city',\n          required: true,\n        }}\n      />\n    </Form.Card>\n    <Form.SubmitButton />\n  </Form.Handler>,\n)\n"});function C(n){const t=Object.assign({h2:"h2",p:"p",code:"code"},(0,i.ah)(),n.components);return a||y("Examples",!1),p||y("Examples.PostalCode",!0),(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.h2,{children:"Demos"}),"\n",(0,c.jsxs)(t.p,{children:["This demo contains only a mocked API call, so only a postal code of ",(0,c.jsx)(t.code,{children:"1391"})," for Norway and ",(0,c.jsx)(t.code,{children:"11432"})," for Sweden is valid."]}),"\n",(0,c.jsx)(p,{})]})}var h=function(n){void 0===n&&(n={});const{wrapper:t}=Object.assign({},(0,i.ah)(),n.components);return t?(0,c.jsx)(t,Object.assign({},n,{children:(0,c.jsx)(C,n)})):C(n)};function y(n,t){throw new Error("Expected "+(t?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},88568:function(n,t,e){e.r(t),e.d(t,{autofill:function(){return u},getMockData:function(){return d},preResponseResolver:function(){return i},responseResolver:function(){return s},supportedCountryCodes:function(){return a},unsupportedCountryCodeMessage:function(){return c},validator:function(){return l}});var o=e(11328),r=e(16784);const a=["NO","DK","SE","FI","NL","DE","US","BE","FO","GL","IS","SJ"],c="Postal code verification is not supported for {countryCode}.",i=n=>{let{value:t}=n;if(!t)return{postal_codes:[]}},s=(n,t)=>{var e;const o=null==t?void 0:t.responseResolver;if("function"==typeof o)return o(n);const{postal_code:r,city:a}=(null==n||null===(e=n.postal_codes)||void 0===e?void 0:e[0])||{};return{matcher:n=>n===r,payload:{city:a}}};function u(n,t){const e={current:null};return async function o(c,u){if(!("string"==typeof c&&c.length>=4))return;const{countryCode:l}=(0,r.S_)({value:c,additionalArgs:u,handler:o});if(!l||a.includes(l))try{var d;const o={countryCode:String(l).toLowerCase()},{data:a}=await(0,r.rQ)(c,{generalConfig:n,parameters:o,abortControllerRef:e,preResponseResolver:null!==(d=null==t?void 0:t.preResponseResolver)&&void 0!==d?d:i}),f=n=>{const{cityPath:e}=t||{};if(e){if(!u.dataContext)throw new Error("No data context found in the postalCode connector");u.dataContext.handlePathChangeUnvalidated(e,n.city)}},{matcher:p,payload:C}=s(a,t);if(p(c))return f(C)}catch(f){return f}}}function l(n,t){const e={current:null};return async function(u,l){if(!("string"==typeof u&&u.length>=4))return;const{countryCode:d}=(0,r.hE)({additionalArgs:l});if(d&&!a.includes(d))return new Error(c.replace("{countryCode}",d));try{var f;const a={countryCode:String(d).toLowerCase()},{data:c,status:l}=await(0,r.rQ)(u,{generalConfig:n,parameters:a,abortControllerRef:e,preResponseResolver:null!==(f=null==t?void 0:t.preResponseResolver)&&void 0!==f?f:i}),p=()=>new o.X("PostalCodeAndCity.invalidCode"),{matcher:C}=s(c,t),h=C(u);if(400!==l&&!h)return p()}catch(p){return p}}}function d(n){return"SE"===String(n).toUpperCase()?{postal_codes:[{city:"Stockholm",postal_code:"11432"}]}:{postal_codes:[{city:"Vollen",postal_code:"1391"}]}}},16784:function(n,t,e){e.d(t,{S_:function(){return i},hE:function(){return c},kr:function(){return r},rQ:function(){return a}});var o=e(98942);function r(n){return void 0===n&&(n=null),{withConfig(t,e){return t(n,e)}}}async function a(n,t){var e;const{generalConfig:o,parameters:r}=t||{},a=null==t||null===(e=t.preResponseResolver)||void 0===e?void 0:e.call(t,{value:n});if(void 0!==a)return a;try{const e=o.fetchConfig.url,a="function"==typeof e?await e(n,r):e,{data:c,response:i}=await async function(n,t){const{fetchConfig:e}=n,o=null==t?void 0:t.abortControllerRef;o&&(o.current&&(o.current.abort(),o.current=null),o.current||(o.current=new AbortController));const{signal:r}=(null==o?void 0:o.current)||{},a={method:"GET",headers:{Accept:"application/json",...e.headers},signal:r};try{const n=await fetch(e.url,a);return o&&(o.current=null),{response:n,data:await n.json()}}catch(c){if("AbortError"!==c.name)return c}}({...o,fetchConfig:{...o.fetchConfig,url:a}},t);if(!i.ok)throw new Error(`${i.statusText} â€“ Status: ${i.status}`);return{data:c,status:i.status}}catch(c){return c}}function c(n){let{additionalArgs:t}=n;const e=t.props["data-country-code"]||o.si;return{countryCode:t.getSourceValue(e),countryCodeValue:e}}function i(n){let{value:t,additionalArgs:e,handler:o}=n;const{countryCode:r,countryCodeValue:a}=c({additionalArgs:e});return String(a).startsWith("/")&&e[o.name]!==o&&(e[o.name]=o,e.setFieldEventListener(a,"onPathChange",(()=>{o(t,e)}))),{countryCode:r}}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-connectors-bring-demos-mdx-c8a33fc65bad1bb650d9.js.map