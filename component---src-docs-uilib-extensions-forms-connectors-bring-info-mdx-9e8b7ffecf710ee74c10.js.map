{"version":3,"file":"component---src-docs-uilib-extensions-forms-connectors-bring-info-mdx-9e8b7ffecf710ee74c10.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Connectors/Bring/info.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Connectors/Bring/postalCode.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Connectors/createContext.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {supportedCountryCodes as postalCode_supportedCountryCodes} from '@dnb/eufemia/src/extensions/forms/Connectors/Bring/postalCode';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Bring\"\n      }), \" connector allows you to use the \", _jsx(_components.a, {\n        href: \"https://developer.bring.com/api/\",\n        children: \"Bring API\"\n      }), \" to:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Verify a postal code\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Autofill a city name or street name\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"PostalCode API\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example of how to use the Bring \", _jsx(_components.a, {\n        href: \"https://developer.bring.com/api/postal-code/\",\n        children: \"Postal Code API\"\n      }), \" to connect the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/feature-fields/PostalCodeAndCity/\",\n        children: \"PostalCodeAndCity\"\n      }), \" field to a form.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First, create a context with the config:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Connectors, Field, Form } from '@dnb/eufemia/extensions/forms'\\n\\nconst { withConfig } = Connectors.createContext({\\n  fetchConfig: {\\n    url: (value, { countryCode }) => {\\n      return `[YOUR-API-URL]/.../${countryCode}/.../${value}`\\n      // Real-world example using Bring's Postal Code API's get postal code endpoint, directly without proxy:\\n      // return `https://api.bring.com/address/api/{countryCode}/postal-codes/{value}`\\n    },\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"[YOUR-API-URL]\"\n      }), \" is the URL of your own API endpoint that proxies the Bring \", _jsx(_components.a, {\n        href: \"https://developer.bring.com/api/postal-code/\",\n        children: \"Postal Code API\"\n      }), \" with a token.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Supported countries\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Bring API for PostalCode supports the \", _jsx(_components.a, {\n        href: \"https://developer.bring.com/api/postal-code/#supported-countries\",\n        children: \"following countries\"\n      }), \", by its country codes:\"]\n    }), \"\\n\", postalCode_supportedCountryCodes.join(', '), \"\\n\", _jsx(_components.h3, {\n      children: \"Endpoints and response format\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Ensure you use one of the \", _jsx(_components.a, {\n        href: \"https://developer.bring.com/api/postal-code/#endpoints\",\n        children: \"following endpoints\"\n      }), \" from Bring via your proxy API, returning a list of postal codes in the following format:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"{\\n  \\\"postal_codes\\\": [\\n    {\\n      \\\"postal_code\\\": \\\"1391\\\",\\n      \\\"city\\\": \\\"Vollen\\\"\\n      ...\\n    }\\n  ]\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"To verify a postal code\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the context to create a validator based on the \", _jsx(_components.code, {\n        children: \"validator\"\n      }), \" connector.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use it for an \", _jsx(_components.code, {\n        children: \"onChangeValidator\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"onBlurValidator\"\n      }), \" (recommended), depending on your use case.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const onBlurValidator = withConfig(Connectors.Bring.postalCode.validator)\\n\\nfunction MyForm() {\\n  return (\\n    <Form.Handler>\\n      <Field.PostalCodeAndCity\\n        postalCode={{\\n          path: '/postalCode',\\n          onBlurValidator,\\n        }}\\n      />\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"To autofill a city name based on a postal code\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the context to create the \", _jsx(_components.code, {\n        children: \"onChange\"\n      }), \" event handler based on the \", _jsx(_components.code, {\n        children: \"autofill\"\n      }), \" connector.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const onChange = withConfig(Connectors.Bring.postalCode.autofill, {\\n  cityPath: '/city',\\n})\\n\\nfunction MyForm() {\\n  return (\\n    <Form.Handler>\\n      <Field.PostalCodeAndCity\\n        postalCode={{\\n          path: '/postalCode',\\n          onChange,\\n        }}\\n        city={{\\n          path: '/city',\\n        }}\\n      />\\n      <Form.SubmitButton />\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import type { Path, PathStrict, UseFieldProps } from '../../types'\nimport { FormError } from '../../utils'\nimport {\n  GeneralConfig,\n  HandlerConfig,\n  PreResponseResolver,\n  ResponseResolver,\n  fetchData,\n  getCountryCodeValue,\n  handleCountryPath,\n  isSupportedCountryCode,\n} from '../createContext'\n\nexport const supportedCountryCodes = [\n  'NO', // Norway\n  'DK', // Denmark\n  'SE', // Sweden\n  'FI', // Finland\n  'NL', // Netherlands\n  'DE', // Germany\n  'US', // United States\n  'BE', // Belgium\n  'FO', // Faroe Islands\n  'GL', // Greenland\n  'IS', // Iceland\n  'SJ', // Svalbard and Jan Mayen\n] as const\nexport type SupportedCountries = (typeof supportedCountryCodes)[number]\n\ntype AutofillHandlerConfig = HandlerConfig & {\n  countryCode?:\n    | PathStrict\n    | SupportedCountries\n    | Lowercase<SupportedCountries>\n}\n\nexport const unsupportedCountryCodeMessage =\n  'Postal code verification is not supported for {countryCode}.'\n\nexport type PostalCodeResolverData = {\n  postal_codes: { postal_code: string; city: string }[]\n}\nexport type PostalCodeResolverPayload = {\n  city: string\n}\n\nexport const preResponseResolver: PreResponseResolver = ({ value }) => {\n  if (!value) {\n    return { postal_codes: [] }\n  }\n}\n\nexport const responseResolver: ResponseResolver<\n  PostalCodeResolverData,\n  PostalCodeResolverPayload\n> = (data, handlerConfig) => {\n  const resolver = handlerConfig?.responseResolver\n  if (typeof resolver === 'function') {\n    return resolver(data) as ReturnType<typeof resolver> & {\n      payload: PostalCodeResolverPayload\n    }\n  }\n\n  const { postal_code, city } = data?.postal_codes?.[0] || {}\n\n  return {\n    matcher: (value) => value === postal_code,\n    payload: { city },\n  }\n}\n\nexport function autofill(\n  generalConfig: GeneralConfig,\n  handlerConfig?: AutofillHandlerConfig & { cityPath: Path }\n): UseFieldProps<string>['onChange'] {\n  const abortControllerRef = { current: null }\n\n  return async function autofillHandler(value, additionalArgs) {\n    if (!(typeof value === 'string' && value.length >= 4)) {\n      return // stop here\n    }\n\n    // Get country code from path or use given countryCode value\n    const { countryCode } = handleCountryPath({\n      value,\n      countryCode: handlerConfig?.countryCode,\n      additionalArgs,\n      handler: autofillHandler,\n    })\n\n    if (!isSupportedCountryCode(countryCode, supportedCountryCodes)) {\n      return // stop here\n    }\n\n    try {\n      const parameters = {\n        countryCode: String(countryCode).toLowerCase(),\n      }\n      const { data } = await fetchData<PostalCodeResolverData>(value, {\n        generalConfig,\n        parameters,\n        abortControllerRef,\n        preResponseResolver:\n          handlerConfig?.preResponseResolver ?? preResponseResolver,\n      })\n\n      const onMatch = (payload: PostalCodeResolverPayload) => {\n        const { cityPath } = handlerConfig || {}\n        if (cityPath) {\n          if (!additionalArgs.dataContext) {\n            throw new Error(\n              'No data context found in the postalCode connector'\n            )\n          }\n          additionalArgs.dataContext.handlePathChangeUnvalidated(\n            cityPath,\n            payload.city\n          )\n        }\n      }\n\n      const { matcher, payload } = responseResolver(data, handlerConfig)\n      const match = matcher(value)\n\n      if (match) {\n        return onMatch(payload)\n      }\n    } catch (error) {\n      return error\n    }\n  }\n}\n\nexport function validator(\n  generalConfig: GeneralConfig,\n  handlerConfig?: AutofillHandlerConfig\n):\n  | UseFieldProps<string>['onChangeValidator']\n  | UseFieldProps<string>['onBlurValidator'] {\n  const abortControllerRef = { current: null }\n\n  return async function validatorHandler(value, additionalArgs) {\n    if (!(typeof value === 'string' && value.length >= 4)) {\n      return // stop here\n    }\n\n    const { countryCode } = getCountryCodeValue({ additionalArgs })\n\n    if (!isSupportedCountryCode(countryCode, supportedCountryCodes)) {\n      return new Error(\n        unsupportedCountryCodeMessage.replace('{countryCode}', countryCode)\n      )\n    }\n\n    try {\n      const parameters = {\n        countryCode: String(countryCode).toLowerCase(),\n      }\n      const { data, status } = await fetchData<PostalCodeResolverData>(\n        value,\n        {\n          generalConfig,\n          parameters,\n          abortControllerRef,\n          preResponseResolver:\n            handlerConfig?.preResponseResolver ?? preResponseResolver,\n        }\n      )\n\n      const onMatch = () => {\n        return new FormError('PostalCodeAndCity.invalidCode')\n      }\n\n      const { matcher } = responseResolver(data, handlerConfig)\n      const match = matcher(value)\n\n      if (status !== 400 && !match) {\n        return onMatch()\n      }\n    } catch (error) {\n      return error\n    }\n  }\n}\n\nexport function getMockData(countryCode?: string) {\n  switch (String(countryCode).toUpperCase()) {\n    case 'SE':\n      return {\n        postal_codes: [\n          {\n            city: 'Stockholm',\n            postal_code: '11432',\n          },\n        ],\n      }\n    case 'NO':\n    default:\n      return {\n        postal_codes: [\n          {\n            city: 'Vollen',\n            postal_code: '1391',\n          },\n        ],\n      }\n  }\n}\n","import { ReceiveAdditionalEventArgs } from '../types'\nimport { COUNTRY as defaultCountry } from '../../../shared/defaults'\n\nexport type UrlSecondParameter = {\n  countryCode: string\n}\nexport type GeneralConfig = {\n  fetchConfig?: {\n    url:\n      | string\n      | ((\n          value: string,\n          { countryCode }: UrlSecondParameter\n        ) => string | Promise<string>)\n    headers?: HeadersInit\n  }\n}\n\nexport function createContext<GeneralConfigGeneric = GeneralConfig>(\n  generalConfig: GeneralConfigGeneric = null\n) {\n  return {\n    withConfig<\n      HandlerMethod extends (\n        generalConfig: GeneralConfigGeneric,\n        handlerConfig: unknown\n      ) => ReturnType<HandlerMethod>,\n    >(fn: HandlerMethod, handlerConfig?: Parameters<HandlerMethod>[1]) {\n      return fn(generalConfig, handlerConfig)\n    },\n  }\n}\n\nexport type HandlerConfig = {\n  preResponseResolver?: PreResponseResolver\n  responseResolver?: ResponseResolver\n}\nexport type PreResponseResolver = (fromField: { value: string }) => unknown\nexport type ResponseResolver<\n  Response = unknown,\n  Payload = Record<string, unknown>,\n> = (\n  response: Response,\n  handlerConfig?: HandlerConfig\n) => {\n  /**\n   * The matcher to be used to determine if and how the connector,\n   * such as an validator for `onChangeValidator` or `onBlurValidator`,\n   * should validate the field value.\n   */\n  matcher?: (value: string) => boolean\n\n  /**\n   * The payload to be returned and used by the connector.\n   */\n  payload?: Payload\n}\n\nexport type FetchDataFromAPIOptions = {\n  generalConfig: GeneralConfig\n  parameters?: UrlSecondParameter\n  abortControllerRef?: { current: null | AbortController }\n  preResponseResolver?: PreResponseResolver\n}\n\nasync function fetchDataFromAPI<Data = unknown>(\n  generalConfig: GeneralConfig & { fetchConfig: { url: string } },\n  options?: FetchDataFromAPIOptions\n): Promise<{\n  data: Data\n  response: Response\n}> {\n  const { fetchConfig } = generalConfig\n\n  const controller = options?.abortControllerRef\n  if (controller) {\n    if (controller.current) {\n      controller.current.abort()\n      controller.current = null\n    }\n    if (!controller.current) {\n      controller.current = new AbortController()\n    }\n  }\n  const { signal } = controller?.current || {}\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      ...fetchConfig.headers,\n    },\n    signal,\n  }\n\n  try {\n    const response = await fetch(fetchConfig.url, fetchOptions)\n\n    if (controller) {\n      controller.current = null\n    }\n\n    return {\n      response,\n      data: await response.json(),\n    }\n  } catch (error) {\n    if (error.name !== 'AbortError') {\n      return error\n    }\n  }\n}\n\nexport type FetchDataReturnValue<Data = unknown> = {\n  data: Data\n  status: number\n}\n\nexport async function fetchData<Data = unknown>(\n  value: string,\n  options: FetchDataFromAPIOptions\n): Promise<FetchDataReturnValue<Data>> {\n  const { generalConfig, parameters } = options || {}\n\n  const result = options?.preResponseResolver?.({ value })\n  if (typeof result !== 'undefined') {\n    return result as FetchDataReturnValue<Data>\n  }\n\n  const u = generalConfig.fetchConfig.url\n  const url = typeof u === 'function' ? await u(value, parameters) : u\n\n  const { data, response } = await fetchDataFromAPI<Data>(\n    {\n      ...generalConfig,\n      fetchConfig: {\n        ...generalConfig.fetchConfig,\n        url,\n      },\n    },\n    options\n  )\n\n  // Check if the response status is in the range of 200-299\n  if (!response.ok) {\n    throw new Error(`${response.statusText} – Status: ${response.status}`)\n  }\n\n  return { data, status: response.status }\n}\n\nexport function getCountryCodeValue({\n  countryCode: givenCountryCode,\n  additionalArgs,\n}: {\n  countryCode?: string\n  additionalArgs: ReceiveAdditionalEventArgs<unknown>\n}) {\n  const countryCodeValue =\n    givenCountryCode ||\n    additionalArgs.props?.['data-country-code'] ||\n    defaultCountry\n  const countryCode =\n    additionalArgs.getSourceValue<string>(countryCodeValue) ||\n    givenCountryCode\n  return { countryCode, countryCodeValue }\n}\n\nexport function handleCountryPath({\n  value,\n  countryCode: givenCountryCode,\n  additionalArgs,\n  handler,\n}: {\n  value: string\n  countryCode?: string\n  additionalArgs: ReceiveAdditionalEventArgs<unknown>\n  handler: (\n    value: string,\n    additionalArgs: ReceiveAdditionalEventArgs<unknown>\n  ) => void\n}) {\n  const { countryCode, countryCodeValue } = getCountryCodeValue({\n    countryCode:\n      givenCountryCode || additionalArgs.props?.['data-country-code'],\n    additionalArgs,\n  })\n\n  if (\n    String(countryCodeValue).startsWith('/') &&\n    additionalArgs[handler.name] !== handler\n  ) {\n    additionalArgs[handler.name] = handler\n    additionalArgs.setFieldEventListener(\n      countryCodeValue,\n      'onPathChange',\n      () => {\n        handler(value, additionalArgs)\n      }\n    )\n  }\n\n  return { countryCode }\n}\n\nexport function isSupportedCountryCode(\n  countryCode: string,\n  supportedCountryCodes: readonly string[]\n) {\n  if (!countryCode) {\n    return false\n  }\n  return (supportedCountryCodes as unknown as Array<string>).includes(\n    String(countryCode).toUpperCase()\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","a","ul","li","pre","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","className","postalCode_supportedCountryCodes","join","wrapper","MDXLayout","supportedCountryCodes","unsupportedCountryCodeMessage","preResponseResolver","_ref","value","postal_codes","responseResolver","data","handlerConfig","_data$postal_codes","resolver","postal_code","city","matcher","payload","autofill","generalConfig","abortControllerRef","current","async","autofillHandler","additionalArgs","length","countryCode","handleCountryPath","handler","isSupportedCountryCode","_handlerConfig$preRes","parameters","String","toLowerCase","fetchData","onMatch","cityPath","dataContext","Error","handlePathChangeUnvalidated","error","validator","getCountryCodeValue","replace","_handlerConfig$preRes2","status","FormError","match","getMockData","toUpperCase","createContext","withConfig","fn","options","_options$preResponseR","result","call","u","fetchConfig","url","response","controller","abort","AbortController","signal","fetchOptions","method","headers","Accept","fetch","json","name","fetchDataFromAPI","ok","statusText","_additionalArgs$props","givenCountryCode","countryCodeValue","defaultCountry","getSourceValue","_ref2","_additionalArgs$props2","startsWith","setFieldEventListener","includes"],"sourceRoot":""}