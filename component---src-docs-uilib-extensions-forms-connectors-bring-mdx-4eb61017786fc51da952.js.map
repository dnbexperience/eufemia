{"version":3,"file":"component---src-docs-uilib-extensions-forms-connectors-bring-mdx-4eb61017786fc51da952.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Connectors/Bring.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Connectors/Bring/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Connectors/Bring/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Connectors/Bring/info.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Connectors/Bring/postalCode.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Connectors/createContext.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/Connectors/Bring/info';\nimport Demos from 'Docs/uilib/extensions/forms/Connectors/Bring/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { getMockData } from '@dnb/eufemia/src/extensions/forms/Connectors/Bring/postalCode'\nimport { Form, Field, Connectors } from '@dnb/eufemia/src/extensions/forms'\n\nlet mockFetchTimeout = null\nasync function mockFetch(countryCode: string) {\n  const originalFetch = globalThis.fetch\n\n  globalThis.fetch = () => {\n    return Promise.resolve({\n      ok: true,\n      json: () => {\n        return Promise.resolve(getMockData(countryCode))\n      },\n    }) as any\n  }\n\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n\n  clearTimeout(mockFetchTimeout)\n  mockFetchTimeout = setTimeout(() => {\n    globalThis.fetch = originalFetch\n  }, 1100)\n}\n\nexport const PostalCode = () => {\n  return (\n    <ComponentBox scope={{ Connectors, getMockData, mockFetch }}>\n      {() => {\n        const { withConfig } = Connectors.createContext({\n          fetchConfig: {\n            url: async (value, { countryCode }) => {\n              await mockFetch(countryCode)\n              return '[YOUR-API-URL]/' + value\n            },\n          },\n        })\n\n        const onBlurValidator = withConfig(\n          Connectors.Bring.postalCode.validator,\n        )\n\n        const onChange = withConfig(Connectors.Bring.postalCode.autofill, {\n          cityPath: '/city',\n        })\n\n        return (\n          <Form.Handler onSubmit={console.log}>\n            <Form.Card>\n              <Field.SelectCountry\n                path=\"/countryCode\"\n                defaultValue=\"NO\"\n                filterCountries={({ iso }) => ['NO', 'SE'].includes(iso)}\n              />\n              <Field.PostalCodeAndCity\n                countryCode=\"/countryCode\"\n                postalCode={{\n                  path: '/postalCode',\n                  onBlurValidator,\n                  onChange,\n                  required: true,\n                }}\n                city={{\n                  path: '/city',\n                  required: true,\n                }}\n              />\n            </Form.Card>\n            <Form.SubmitButton />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.PostalCode) _missingMdxReference(\"Examples.PostalCode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This demo contains only a mocked API call, so only a postal code of \", _jsx(_components.code, {\n        children: \"1391\"\n      }), \" for Norway and \", _jsx(_components.code, {\n        children: \"11432\"\n      }), \" for Sweden is valid.\"]\n    }), \"\\n\", _jsx(Examples.PostalCode, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {supportedCountryCodes} from '@dnb/eufemia/src/extensions/forms/Connectors/Bring/postalCode';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Bring\"\n      }), \" connector allows you to use the \", _jsx(_components.a, {\n        href: \"https://developer.bring.com/api/\",\n        children: \"Bring API\"\n      }), \" to:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Verify a postal code\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Autofill a city name or street name\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"PostalCode API\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example of how to use the Bring \", _jsx(_components.a, {\n        href: \"https://developer.bring.com/api/postal-code/\",\n        children: \"Postal Code API\"\n      }), \" to connect the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/feature-fields/PostalCodeAndCity/\",\n        children: \"PostalCodeAndCity\"\n      }), \" field to a form.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First, create a context with the config:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Connectors, Field, Form } from '@dnb/eufemia/extensions/forms'\\n\\nconst { withConfig } = Connectors.createContext({\\n  fetchConfig: {\\n    url: (value, { countryCode }) => {\\n      return `[YOUR-API-URL]/.../${countryCode}/.../${value}`\\n      // Real-world example using Bring's Postal Code API's get postal code endpoint, directly without proxy:\\n      // return `https://api.bring.com/address/api/{countryCode}/postal-codes/{value}`\\n    },\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"[YOUR-API-URL]\"\n      }), \" is the URL of your own API endpoint that proxies the Bring \", _jsx(_components.a, {\n        href: \"https://developer.bring.com/api/postal-code/\",\n        children: \"Postal Code API\"\n      }), \" with a token.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Supported countries\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Bring API for PostalCode supports the \", _jsx(_components.a, {\n        href: \"https://developer.bring.com/api/postal-code/#supported-countries\",\n        children: \"following countries\"\n      }), \", by its country codes:\"]\n    }), \"\\n\", supportedCountryCodes.join(', '), \"\\n\", _jsx(_components.h3, {\n      children: \"Endpoints and response format\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Ensure you use one of the \", _jsx(_components.a, {\n        href: \"https://developer.bring.com/api/postal-code/#endpoints\",\n        children: \"following endpoints\"\n      }), \" from Bring via your proxy API, returning a list of postal codes in the following format:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"{\\n  \\\"postal_codes\\\": [\\n    {\\n      \\\"postal_code\\\": \\\"1391\\\",\\n      \\\"city\\\": \\\"Vollen\\\"\\n      ...\\n    }\\n  ]\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"To verify a postal code\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the context to create a validator based on the \", _jsx(_components.code, {\n        children: \"validator\"\n      }), \" connector.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use it for an \", _jsx(_components.code, {\n        children: \"onChangeValidator\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"onBlurValidator\"\n      }), \" (recommended), depending on your use case.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const onBlurValidator = withConfig(Connectors.Bring.postalCode.validator)\\n\\nfunction MyForm() {\\n  return (\\n    <Form.Handler>\\n      <Field.PostalCodeAndCity\\n        postalCode={{\\n          path: '/postalCode',\\n          onBlurValidator,\\n        }}\\n      />\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"To autofill a city name based on a postal code\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the context to create the \", _jsx(_components.code, {\n        children: \"onChange\"\n      }), \" event handler based on the \", _jsx(_components.code, {\n        children: \"autofill\"\n      }), \" connector.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const onChange = withConfig(Connectors.Bring.postalCode.autofill, {\\n  cityPath: '/city',\\n})\\n\\nfunction MyForm() {\\n  return (\\n    <Form.Handler>\\n      <Field.PostalCodeAndCity\\n        postalCode={{\\n          path: '/postalCode',\\n          onChange,\\n        }}\\n        city={{\\n          path: '/city',\\n        }}\\n      />\\n      <Form.SubmitButton />\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import type { UseFieldProps } from '../../types'\nimport { FormError } from '../../utils'\nimport {\n  GeneralConfig,\n  HandlerConfig,\n  PreResponseResolver,\n  ResponseResolver,\n  fetchData,\n  getCountryCodeValue,\n  handleCountryPath,\n} from '../createContext'\n\nexport const supportedCountryCodes = [\n  'NO', // Norway\n  'DK', // Denmark\n  'SE', // Sweden\n  'FI', // Finland\n  'NL', // Netherlands\n  'DE', // Germany\n  'US', // United States\n  'BE', // Belgium\n  'FO', // Faroe Islands\n  'GL', // Greenland\n  'IS', // Iceland\n  'SJ', // Svalbard and Jan Mayen\n]\n\nexport const unsupportedCountryCodeMessage =\n  'Postal code verification is not supported for {countryCode}.'\n\nexport type PostalCodeResolverData = {\n  postal_codes: { postal_code: string; city: string }[]\n}\nexport type PostalCodeResolverPayload = {\n  city: string\n}\n\nexport const preResponseResolver: PreResponseResolver = ({ value }) => {\n  if (!value) {\n    return { postal_codes: [] }\n  }\n}\n\nexport const responseResolver: ResponseResolver<\n  PostalCodeResolverData,\n  PostalCodeResolverPayload\n> = (data, handlerConfig) => {\n  const resolver = handlerConfig?.responseResolver\n  if (typeof resolver === 'function') {\n    return resolver(data) as ReturnType<typeof resolver> & {\n      payload: PostalCodeResolverPayload\n    }\n  }\n\n  const { postal_code, city } = data?.postal_codes?.[0] || {}\n\n  return {\n    matcher: (value) => value === postal_code,\n    payload: { city },\n  }\n}\n\nexport function autofill(\n  generalConfig: GeneralConfig,\n  handlerConfig?: HandlerConfig & { cityPath: string }\n): UseFieldProps<string>['onChange'] {\n  const abortControllerRef = { current: null }\n\n  return async function autofillHandler(value, additionalArgs) {\n    if (!(typeof value === 'string' && value.length >= 4)) {\n      return // stop here\n    }\n\n    const { countryCode } = handleCountryPath({\n      value,\n      additionalArgs,\n      handler: autofillHandler,\n    })\n\n    if (countryCode && !supportedCountryCodes.includes(countryCode)) {\n      return // stop here\n    }\n\n    try {\n      const parameters = {\n        countryCode: String(countryCode).toLowerCase(),\n      }\n      const { data } = await fetchData<PostalCodeResolverData>(value, {\n        generalConfig,\n        parameters,\n        abortControllerRef,\n        preResponseResolver:\n          handlerConfig?.preResponseResolver ?? preResponseResolver,\n      })\n\n      const onMatch = (payload: PostalCodeResolverPayload) => {\n        const { cityPath } = handlerConfig || {}\n        if (cityPath) {\n          if (!additionalArgs.dataContext) {\n            throw new Error(\n              'No data context found in the postalCode connector'\n            )\n          }\n          additionalArgs.dataContext.handlePathChangeUnvalidated(\n            cityPath,\n            payload.city\n          )\n        }\n      }\n\n      const { matcher, payload } = responseResolver(data, handlerConfig)\n      const match = matcher(value)\n\n      if (match) {\n        return onMatch(payload)\n      }\n    } catch (error) {\n      return error\n    }\n  }\n}\n\nexport function validator(\n  generalConfig: GeneralConfig,\n  handlerConfig?: HandlerConfig\n):\n  | UseFieldProps<string>['onChangeValidator']\n  | UseFieldProps<string>['onBlurValidator'] {\n  const abortControllerRef = { current: null }\n\n  return async function validatorHandler(value, additionalArgs) {\n    if (!(typeof value === 'string' && value.length >= 4)) {\n      return // stop here\n    }\n\n    const { countryCode } = getCountryCodeValue({ additionalArgs })\n\n    if (countryCode && !supportedCountryCodes.includes(countryCode)) {\n      return new Error(\n        unsupportedCountryCodeMessage.replace('{countryCode}', countryCode)\n      )\n    }\n\n    try {\n      const parameters = {\n        countryCode: String(countryCode).toLowerCase(),\n      }\n      const { data, status } = await fetchData<PostalCodeResolverData>(\n        value,\n        {\n          generalConfig,\n          parameters,\n          abortControllerRef,\n          preResponseResolver:\n            handlerConfig?.preResponseResolver ?? preResponseResolver,\n        }\n      )\n\n      const onMatch = () => {\n        return new FormError('PostalCodeAndCity.invalidCode')\n      }\n\n      const { matcher } = responseResolver(data, handlerConfig)\n      const match = matcher(value)\n\n      if (status !== 400 && !match) {\n        return onMatch()\n      }\n    } catch (error) {\n      return error\n    }\n  }\n}\n\nexport function getMockData(countryCode?: string) {\n  switch (String(countryCode).toUpperCase()) {\n    case 'SE':\n      return {\n        postal_codes: [\n          {\n            city: 'Stockholm',\n            postal_code: '11432',\n          },\n        ],\n      }\n    case 'NO':\n    default:\n      return {\n        postal_codes: [\n          {\n            city: 'Vollen',\n            postal_code: '1391',\n          },\n        ],\n      }\n  }\n}\n","import { ReceiveAdditionalEventArgs } from '../types'\nimport { COUNTRY as defaultCountry } from '../../../shared/defaults'\n\nexport type UrlSecondParameter = {\n  countryCode: string\n}\nexport type GeneralConfig = {\n  fetchConfig?: {\n    url:\n      | string\n      | ((\n          value: string,\n          { countryCode }: UrlSecondParameter\n        ) => string | Promise<string>)\n    headers?: HeadersInit\n  }\n}\n\nexport function createContext<GeneralConfigGeneric = GeneralConfig>(\n  generalConfig: GeneralConfigGeneric = null\n) {\n  return {\n    withConfig<\n      HandlerMethod extends (\n        generalConfig: GeneralConfigGeneric,\n        handlerConfig: unknown\n      ) => ReturnType<HandlerMethod>,\n    >(fn: HandlerMethod, handlerConfig?: Parameters<HandlerMethod>[1]) {\n      return fn(generalConfig, handlerConfig)\n    },\n  }\n}\n\nexport type HandlerConfig = {\n  preResponseResolver?: PreResponseResolver\n  responseResolver?: ResponseResolver\n}\nexport type PreResponseResolver = (fromField: { value: string }) => unknown\nexport type ResponseResolver<\n  Response = unknown,\n  Payload = Record<string, unknown>,\n> = (\n  response: Response,\n  handlerConfig?: HandlerConfig\n) => {\n  /**\n   * The matcher to be used to determine if and how the connector,\n   * such as an validator for `onChangeValidator` or `onBlurValidator`,\n   * should validate the field value.\n   */\n  matcher?: (value: string) => boolean\n\n  /**\n   * The payload to be returned and used by the connector.\n   */\n  payload?: Payload\n}\n\nexport type FetchDataFromAPIOptions = {\n  generalConfig: GeneralConfig\n  parameters?: UrlSecondParameter\n  abortControllerRef?: { current: null | AbortController }\n  preResponseResolver?: PreResponseResolver\n}\n\nasync function fetchDataFromAPI<Data = unknown>(\n  generalConfig: GeneralConfig & { fetchConfig: { url: string } },\n  options?: FetchDataFromAPIOptions\n): Promise<{\n  data: Data\n  response: Response\n}> {\n  const { fetchConfig } = generalConfig\n\n  const controller = options?.abortControllerRef\n  if (controller) {\n    if (controller.current) {\n      controller.current.abort()\n      controller.current = null\n    }\n    if (!controller.current) {\n      controller.current = new AbortController()\n    }\n  }\n  const { signal } = controller?.current || {}\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      ...fetchConfig.headers,\n    },\n    signal,\n  }\n\n  try {\n    const response = await fetch(fetchConfig.url, fetchOptions)\n\n    if (controller) {\n      controller.current = null\n    }\n\n    return {\n      response,\n      data: await response.json(),\n    }\n  } catch (error) {\n    if (error.name !== 'AbortError') {\n      return error\n    }\n  }\n}\n\nexport type FetchDataReturnValue<Data = unknown> = {\n  data: Data\n  status: number\n}\n\nexport async function fetchData<Data = unknown>(\n  value: string,\n  options: FetchDataFromAPIOptions\n): Promise<FetchDataReturnValue<Data>> {\n  const { generalConfig, parameters } = options || {}\n\n  const result = options?.preResponseResolver?.({ value })\n  if (typeof result !== 'undefined') {\n    return result as FetchDataReturnValue<Data>\n  }\n\n  try {\n    const u = generalConfig.fetchConfig.url\n    const url = typeof u === 'function' ? await u(value, parameters) : u\n\n    const { data, response } = await fetchDataFromAPI<Data>(\n      {\n        ...generalConfig,\n        fetchConfig: {\n          ...generalConfig.fetchConfig,\n          url,\n        },\n      },\n      options\n    )\n\n    // Check if the response status is in the range of 200-299\n    if (!response.ok) {\n      throw new Error(\n        `${response.statusText} – Status: ${response.status}`\n      )\n    }\n\n    return { data, status: response.status }\n  } catch (error) {\n    return error\n  }\n}\n\nexport function getCountryCodeValue({\n  additionalArgs,\n}: {\n  additionalArgs: ReceiveAdditionalEventArgs<unknown>\n}) {\n  const countryCodeValue =\n    additionalArgs.props['data-country-code'] || defaultCountry\n  const countryCode =\n    additionalArgs.getSourceValue<string>(countryCodeValue)\n  return { countryCode, countryCodeValue }\n}\n\nexport function handleCountryPath({\n  value,\n  additionalArgs,\n  handler,\n}: {\n  value: string\n  additionalArgs: ReceiveAdditionalEventArgs<unknown>\n  handler: (\n    value: string,\n    additionalArgs: ReceiveAdditionalEventArgs<unknown>\n  ) => void\n}) {\n  const { countryCode, countryCodeValue } = getCountryCodeValue({\n    additionalArgs,\n  })\n\n  if (\n    String(countryCodeValue).startsWith('/') &&\n    additionalArgs[handler.name] !== handler\n  ) {\n    additionalArgs[handler.name] = handler\n    additionalArgs.setFieldEventListener(\n      countryCodeValue,\n      'onPathChange',\n      () => {\n        handler(value, additionalArgs)\n      }\n    )\n  }\n\n  return { countryCode }\n}\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","mockFetchTimeout","async","mockFetch","countryCode","originalFetch","globalThis","fetch","Promise","resolve","ok","json","getMockData","setTimeout","clearTimeout","PostalCode","ComponentBox","scope","Connectors","noInline","_components","h2","p","code","Examples","_missingMdxReference","id","component","Error","a","ul","li","pre","h3","href","className","supportedCountryCodes","join","unsupportedCountryCodeMessage","preResponseResolver","_ref","value","postal_codes","responseResolver","data","handlerConfig","_data$postal_codes","resolver","postal_code","city","matcher","payload","autofill","generalConfig","abortControllerRef","current","autofillHandler","additionalArgs","length","handleCountryPath","handler","includes","_handlerConfig$preRes","parameters","String","toLowerCase","fetchData","onMatch","cityPath","dataContext","handlePathChangeUnvalidated","error","validator","getCountryCodeValue","replace","_handlerConfig$preRes2","status","FormError","match","toUpperCase","createContext","withConfig","fn","options","_options$preResponseR","result","call","u","fetchConfig","url","response","controller","abort","AbortController","signal","fetchOptions","method","headers","Accept","name","fetchDataFromAPI","statusText","countryCodeValue","defaultCountry","getSourceValue","_ref2","startsWith","setFieldEventListener"],"sourceRoot":""}