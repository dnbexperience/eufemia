"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[95971],{2329:function(e,n,r){r.r(n);var a=r(52322),o=r(45392);function s(e){const n=Object.assign({h2:"h2",p:"p",code:"code",ul:"ul",li:"li",a:"a",pre:"pre"},(0,o.a)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{children:"Description"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Connectors"})," are an opt-in way to extend the functionality of a form. They can be used to add features like API calls for autofill, validation, and more."]}),"\n",(0,a.jsx)(n.p,{children:"Available connectors:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/Connectors/Bring/",children:"Bring"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{children:"Import"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { Connectors } from '@dnb/eufemia/extensions/forms'\n"})}),"\n",(0,a.jsx)(n.h2,{children:"How to create your own connector"}),"\n",(0,a.jsxs)(n.p,{children:["Connectors are created by returning a function that takes the ",(0,a.jsx)(n.code,{children:"generalConfig"})," and optionally a ",(0,a.jsx)(n.code,{children:"handlerConfig"})," as an argument."]}),"\n",(0,a.jsxs)(n.p,{children:["Here is an example of how to create a connector that can be used as a field's ",(0,a.jsx)(n.code,{children:"onChangeValidator"})," or ",(0,a.jsx)(n.code,{children:"onBlurValidator"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"export function validator(generalConfig: GeneralConfig) {\n  // - The handler to be used as the validator\n  return async function validatorHandler(value) {\n    try {\n      const { data, status } = await fetchData(value, {\n        generalConfig,\n        parameters: {},\n      })\n\n      const onMatch = () => {\n        return new FormError('PostalCodeAndCity.invalidCode')\n      }\n\n      const { matcher } = responseResolver(data, handlerConfig)\n      const match = matcher(value)\n\n      if (status !== 400 && !match) {\n        return onMatch()\n      }\n    } catch (error) {\n      return error\n    }\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Here is the ",(0,a.jsx)(n.code,{children:"GeneralConfig"})," type simplified:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"type GeneralConfig = {\n  fetchConfig?: {\n    url: string | ((value: string) => string | Promise<string>)\n    headers?: HeadersInit\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"responseResolver"})," is used to take care of the response from the API and return the ",(0,a.jsx)(n.code,{children:"matcher"})," and ",(0,a.jsx)(n.code,{children:"payload"})," to be used by the connector."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const responseResolver: ResponseResolver<\n  PostalCodeResolverData,\n  PostalCodeResolverPayload\n> = (data, handlerConfig) => {\n  // - Here we align the data from the API with the expected data structure\n  const { postal_code, city } = data?.postal_codes?.[0] || {}\n\n  return {\n    /**\n     * The matcher to be used to determine if and how the connector,\n     * such as an validator for `onChangeValidator` or `onBlurValidator`,\n     * should validate the field value.\n     */\n    matcher: (value) => value === postal_code,\n\n    /**\n     * The payload to be returned and used by the connector.\n     */\n    payload: { city },\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You can extend a response resolver to support a custom resolver, given via the ",(0,a.jsx)(n.code,{children:"handlerConfig"})," argument."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const responseResolver = (data, handlerConfig) => {\n  const resolver = handlerConfig?.responseResolver\n  if (typeof resolver === 'function') {\n    return resolver(data)\n  }\n\n  // ... the rest of the response resolver.\n}\n"})})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,o.a)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(s,e)})):s(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-connectors-info-mdx-70b5dd86223ff941546e.js.map