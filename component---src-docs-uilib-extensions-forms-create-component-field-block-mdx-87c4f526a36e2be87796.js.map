{"version":3,"file":"component---src-docs-uilib-extensions-forms-create-component-field-block-mdx-87c4f526a36e2be87796.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/create-component/FieldBlock.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/create-component/FieldBlock/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/create-component/FieldBlock/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/create-component/FieldBlock/info.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/utils/TestElement/TestElement.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/create-component/FieldBlock/info';\nimport Demos from 'Docs/uilib/extensions/forms/create-component/FieldBlock/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport {\n  FieldBlock,\n  Field,\n  TestElement,\n  Form,\n} from '@dnb/eufemia/src/extensions/forms'\nimport { Anchor, Flex, Slider } from '@dnb/eufemia/src'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      <FieldBlock label=\"Label text\">Input features goes here</FieldBlock>\n    </ComponentBox>\n  )\n}\n\nexport const WithInfo = () => {\n  return (\n    <ComponentBox>\n      <FieldBlock label=\"Label text\" info=\"For your information\">\n        Input features goes here\n      </FieldBlock>\n    </ComponentBox>\n  )\n}\n\nexport const Horizontal = () => {\n  return (\n    <ComponentBox>\n      <FieldBlock label=\"Label text\" layout=\"horizontal\">\n        Input features goes here\n      </FieldBlock>\n    </ComponentBox>\n  )\n}\n\nexport const HorizontalWithInfo = () => {\n  return (\n    <ComponentBox>\n      <FieldBlock\n        label=\"Label text\"\n        layout=\"horizontal\"\n        info=\"For your information\"\n      >\n        Input features goes here\n      </FieldBlock>\n    </ComponentBox>\n  )\n}\n\nexport const Widths = () => {\n  return (\n    <ComponentBox\n      scope={{ TestElement }}\n      hideCode\n      data-visual-test=\"forms-field-block-widths\"\n    >\n      <Flex.Stack>\n        <FieldBlock label=\"Default width (no width props)\">\n          <TestElement>Contents</TestElement>\n        </FieldBlock>\n        <FieldBlock\n          label=\"Small (affects outer block element)\"\n          width=\"small\"\n        >\n          <TestElement>Contents</TestElement>\n        </FieldBlock>\n        <FieldBlock\n          label=\"Medium (affects outer block element)\"\n          width=\"medium\"\n        >\n          <TestElement>Contents</TestElement>\n        </FieldBlock>\n        <FieldBlock\n          label=\"Large (affects outer block element)\"\n          width=\"large\"\n        >\n          <TestElement>Contents</TestElement>\n        </FieldBlock>\n        <FieldBlock\n          label=\"Custom (affects outer block element)\"\n          width=\"8rem\"\n        >\n          <TestElement>Contents</TestElement>\n        </FieldBlock>\n        <FieldBlock\n          label=\"Stretch (affects outer block element). This label is long to validate that label also stretches full width.\"\n          width=\"stretch\"\n        >\n          <TestElement>Contents</TestElement>\n        </FieldBlock>\n\n        <FieldBlock\n          label=\"Small (affects contents only)\"\n          contentWidth=\"small\"\n        >\n          <TestElement>Contents</TestElement>\n        </FieldBlock>\n        <FieldBlock\n          label=\"Medium (affects contents only)\"\n          contentWidth=\"medium\"\n        >\n          <TestElement>Contents</TestElement>\n        </FieldBlock>\n        <FieldBlock\n          label=\"Large (affects contents only)\"\n          contentWidth=\"large\"\n        >\n          <TestElement>Contents</TestElement>\n        </FieldBlock>\n        <FieldBlock\n          label=\"Custom (affects contents only)\"\n          contentWidth=\"8rem\"\n        >\n          <TestElement>Contents</TestElement>\n        </FieldBlock>\n        <FieldBlock\n          label=\"Stretch (affects contents only)\"\n          contentWidth=\"stretch\"\n        >\n          <TestElement>Contents</TestElement>\n        </FieldBlock>\n\n        <Flex.Horizontal gap={false}>\n          <FieldBlock\n            width=\"stretch\"\n            style={{ backgroundColor: 'var(--color-mint-green)' }}\n          >\n            Left content\n          </FieldBlock>\n          <FieldBlock\n            width=\"stretch\"\n            style={{ backgroundColor: 'var(--color-pistachio)' }}\n          >\n            Right content\n          </FieldBlock>\n        </Flex.Horizontal>\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n\nexport const WithDescription = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-field-block-label-description\">\n      <FieldBlock label=\"Label text\" labelDescription=\"Description text\">\n        Input features goes here\n      </FieldBlock>\n    </ComponentBox>\n  )\n}\n\nexport const HorizontalAutoSize = () => {\n  return (\n    <ComponentBox>\n      <FieldBlock label=\"Label\">\n        <Flex.Container>\n          <Flex.Item size={{ small: 12, large: 'auto' }}>\n            <Field.Name.First\n              path=\"/firstName\"\n              width=\"medium\"\n              minLength={2}\n            />\n          </Flex.Item>\n          <Flex.Item size={{ small: 12, large: 'auto' }}>\n            <Field.Name.Last path=\"/lastName\" width=\"medium\" required />\n          </Flex.Item>\n          <Flex.Item size={{ small: 12, large: 'auto' }}>\n            <FieldBlock width=\"large\">\n              <Slider\n                min={1900}\n                max={new Date().getFullYear()}\n                step={1}\n                value={2010}\n                label=\"Birth year\"\n                label_direction=\"vertical\"\n                tooltip\n                alwaysShowTooltip\n              />\n            </FieldBlock>\n          </Flex.Item>\n        </Flex.Container>\n      </FieldBlock>\n    </ComponentBox>\n  )\n}\n\nexport const LabelSize = () => (\n  <ComponentBox data-visual-test=\"forms-field-block-label-size\">\n    <Form.Handler>\n      <Flex.Stack>\n        <Form.MainHeading>Heading</Form.MainHeading>\n        <FieldBlock\n          label=\"Legend with medium heading size\"\n          labelSize=\"medium\"\n        >\n          <Field.String\n            label=\"Label with a long text that goes beyond the field\"\n            width=\"medium\"\n          />\n        </FieldBlock>\n      </Flex.Stack>\n    </Form.Handler>\n  </ComponentBox>\n)\n\nexport const CombineErrorMessages = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-field-block-combined-errors\">\n      <Field.Composition>\n        <Field.Number\n          width=\"small\"\n          label=\"Number\"\n          value={99}\n          minimum={100}\n          validateInitially\n        />\n        <Field.String\n          width=\"medium\"\n          label=\"Text\"\n          value=\"Text\"\n          minLength={5}\n          validateInitially\n        />\n      </Field.Composition>\n    </ComponentBox>\n  )\n}\n\nexport const InlineHelpButtonVerticalLabel = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-field-block-help-button-vertical-label\">\n      <Flex.Stack>\n        <Field.String\n          label=\"Ønsket lånebeløp\"\n          help={{\n            title: 'Hva betyr lånebeløp?',\n            content: (\n              <>\n                Dette er hvor mye du har tenkt å låne{' '}\n                <Anchor href=\"#test\">totalt</Anchor>.\n              </>\n            ),\n          }}\n          onChange={async () => {\n            await new Promise((resolve) => setTimeout(resolve, 1000))\n          }}\n        />\n        <Field.String\n          label=\"Ønsket lånebeløp\"\n          multiline\n          rows={3}\n          help={{\n            title: 'Hva betyr lånebeløp?',\n            content: 'Dette er hvor mye du har tenkt å låne totalt.',\n          }}\n        />\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n\nexport const InlineHelpButtonLabelDescription = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-field-block-help-button-label-description\">\n      <Flex.Stack>\n        <Field.String\n          label=\"Ønsket lånebeløp\"\n          labelDescription=\"Description Nisi ad ullamco ut anim proident sint eiusmod.\"\n          help={{\n            title: 'Hva betyr lånebeløp?',\n            content: 'Dette er hvor mye du har tenkt å låne totalt.',\n          }}\n          onChange={async () => {\n            await new Promise((resolve) => setTimeout(resolve, 1000))\n          }}\n        />\n        <Field.String\n          label=\"Ønsket lånebeløp\"\n          labelDescription=\"Description\"\n          multiline\n          rows={3}\n          help={{\n            open: true,\n            title: 'Hva betyr lånebeløp?',\n            content: 'Dette er hvor mye du har tenkt å låne totalt.',\n          }}\n        />\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n\nexport const InlineHelpButtonHTML = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-field-block-help-button-html\">\n      <Flex.Stack>\n        <Field.String\n          label={<strong>Ønsket lånebeløp</strong>}\n          labelDescription={\n            <span>\n              <br />\n              Label description with a <Anchor>Anchor</Anchor>\n            </span>\n          }\n          help={{\n            open: true,\n            title: <strong>Help title</strong>,\n            content: (\n              <>\n                Help content with a <Anchor>Anchor</Anchor>.\n              </>\n            ),\n          }}\n          onChange={async () => {\n            await new Promise((resolve) => setTimeout(resolve, 1000))\n          }}\n        />\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n\nexport const InlineHelpButtonVerticalLabelDescription = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-field-block-help-button-vertical-label-description\">\n      <Form.Card>\n        <Field.String\n          label=\"Ønsket lånebeløp\"\n          labelDescription={'\\\\nDescription'}\n          help={{\n            title: 'Hva betyr lånebeløp?',\n            content: 'Dette er hvor mye du har tenkt å låne totalt.',\n          }}\n          onChange={async () => {\n            await new Promise((resolve) => setTimeout(resolve, 1000))\n          }}\n        />\n        <Field.String\n          label=\"Ønsket lånebeløp\"\n          labelDescription={'\\\\nDescription'}\n          multiline\n          rows={3}\n          help={{\n            open: true,\n            title: 'Hva betyr lånebeløp?',\n            content: 'Dette er hvor mye du har tenkt å låne totalt.',\n          }}\n        />\n      </Form.Card>\n    </ComponentBox>\n  )\n}\n\nexport const InlineHelpButtonHorizontalLabel = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-field-block-help-button-horizontal-label\">\n      <Form.Card>\n        <Field.String\n          label=\"Ønsket lånebeløp\"\n          layout=\"horizontal\"\n          help={{\n            open: true,\n            title: 'Hva betyr lånebeløp?',\n            content: 'Dette er hvor mye du har tenkt å låne totalt.',\n          }}\n          info=\"Info message\"\n          onChange={async () => {\n            await new Promise((resolve) => setTimeout(resolve, 1000))\n          }}\n        />\n        <Field.String\n          label=\"Ønsket lånebeløp\"\n          layout=\"horizontal\"\n          layoutOptions={{ width: '8rem' }}\n          help={{\n            title: 'Hva betyr lånebeløp?',\n            content: 'Dette er hvor mye du har tenkt å låne totalt.',\n          }}\n          info=\"Info message\"\n        />\n        <Field.String\n          label=\"Ønsket lånebeløp\"\n          layout=\"horizontal\"\n          layoutOptions={{ width: '8rem' }}\n          multiline\n          rows={3}\n          help={{\n            title: 'Hva betyr lånebeløp?',\n            content: 'Dette er hvor mye du har tenkt å låne totalt.',\n          }}\n          info=\"Info message\"\n        />\n      </Form.Card>\n    </ComponentBox>\n  )\n}\n\nexport const InlineHelpButtonCompositionFields = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-field-block-help-button-composition-fields\">\n      <Form.Card>\n        <Field.Composition label=\"Field.Composition\" width=\"large\">\n          <Field.String\n            width=\"medium\"\n            label=\"Label\"\n            help={{\n              title: 'Hva betyr lånebeløp? ',\n              content: 'Dette er hvor mye du har tenkt å låne totalt.',\n            }}\n          />\n          <Field.String\n            width=\"stretch\"\n            label=\"Label\"\n            help={{\n              title: 'Hva betyr lånebeløp? ',\n              content: 'Dette er hvor mye du har tenkt å låne totalt.',\n            }}\n          />\n        </Field.Composition>\n        <Field.PostalCodeAndCity\n          help={{\n            title: 'Hva betyr lånebeløp? ',\n            content: 'Dette er hvor mye du har tenkt å låne totalt.',\n          }}\n        />\n        <Field.PhoneNumber\n          help={{\n            open: true,\n            title: 'Hva betyr lånebeløp? ',\n            content: 'Dette er hvor mye du har tenkt å låne totalt.',\n          }}\n        />\n      </Form.Card>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.CombineErrorMessages) _missingMdxReference(\"Examples.CombineErrorMessages\", true);\n  if (!Examples.Default) _missingMdxReference(\"Examples.Default\", true);\n  if (!Examples.Horizontal) _missingMdxReference(\"Examples.Horizontal\", true);\n  if (!Examples.HorizontalAutoSize) _missingMdxReference(\"Examples.HorizontalAutoSize\", true);\n  if (!Examples.HorizontalWithInfo) _missingMdxReference(\"Examples.HorizontalWithInfo\", true);\n  if (!Examples.InlineHelpButtonCompositionFields) _missingMdxReference(\"Examples.InlineHelpButtonCompositionFields\", true);\n  if (!Examples.InlineHelpButtonHTML) _missingMdxReference(\"Examples.InlineHelpButtonHTML\", true);\n  if (!Examples.InlineHelpButtonHorizontalLabel) _missingMdxReference(\"Examples.InlineHelpButtonHorizontalLabel\", true);\n  if (!Examples.InlineHelpButtonLabelDescription) _missingMdxReference(\"Examples.InlineHelpButtonLabelDescription\", true);\n  if (!Examples.InlineHelpButtonVerticalLabel) _missingMdxReference(\"Examples.InlineHelpButtonVerticalLabel\", true);\n  if (!Examples.InlineHelpButtonVerticalLabelDescription) _missingMdxReference(\"Examples.InlineHelpButtonVerticalLabelDescription\", true);\n  if (!Examples.LabelSize) _missingMdxReference(\"Examples.LabelSize\", true);\n  if (!Examples.Widths) _missingMdxReference(\"Examples.Widths\", true);\n  if (!Examples.WithDescription) _missingMdxReference(\"Examples.WithDescription\", true);\n  if (!Examples.WithInfo) _missingMdxReference(\"Examples.WithInfo\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Label only (default layout)\"\n    }), \"\\n\", _jsx(Examples.Default, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With info\"\n    }), \"\\n\", _jsx(Examples.WithInfo, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Label size\"\n    }), \"\\n\", _jsx(Examples.LabelSize, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Horizontal layout\"\n    }), \"\\n\", _jsx(Examples.Horizontal, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Horizontal layout with info\"\n    }), \"\\n\", _jsx(Examples.HorizontalWithInfo, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With description (vertical only)\"\n    }), \"\\n\", _jsx(Examples.WithDescription, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Responsive forms\"\n    }), \"\\n\", _jsx(Examples.HorizontalAutoSize, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Combine error messages\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Error messages from all fields inside the FieldBlock are combined as one message below the whole block\"\n    }), \"\\n\", _jsx(Examples.CombineErrorMessages, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inline help button (vertical only)\"\n    }), \"\\n\", _jsx(Examples.InlineHelpButtonVerticalLabel, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inline help button (with label description)\"\n    }), \"\\n\", _jsx(Examples.InlineHelpButtonLabelDescription, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inline help button (vertical label description)\"\n    }), \"\\n\", _jsx(Examples.InlineHelpButtonVerticalLabelDescription, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inline help button (horizontal label)\"\n    }), \"\\n\", _jsx(Examples.InlineHelpButtonHorizontalLabel, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inline help button (composition fields)\"\n    }), \"\\n\", _jsx(Examples.InlineHelpButtonCompositionFields, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inline help button with HTML\"\n    }), \"\\n\", _jsx(Examples.InlineHelpButtonHTML, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Widths\"\n    }), \"\\n\", _jsx(Examples.Widths, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"FieldBlock\"\n      }), \" is a reusable wrapper \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/\",\n        children: \"for building\"\n      }), \" interactive \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/feature-fields\",\n        children: \"Field\"\n      }), \" components.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It shows surrounding elements through properties from \", _jsx(_components.code, {\n        children: \"FieldProps\"\n      }), \" like \", _jsx(_components.code, {\n        children: \"label\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"error\"\n      }), \", and ensure that spacing between different fields work as required when put into surrounding components like \", _jsx(_components.a, {\n        href: \"/uilib/layout/flex/container/\",\n        children: \"Flex.Container\"\n      }), \" or \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Card/\",\n        children: \"Form.Card\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It can also be used to group multiple inner FieldBlock components, composing status (error) messages together as one component. Check out the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/base-fields/Composition/\",\n        children: \"Field.Composition\"\n      }), \" docs for that.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { FieldBlock } from '@dnb/eufemia/extensions/forms'\\n\\nconst YourFieldComponent = () => {\\n  return (\\n    <FieldBlock\\n      forId=\\\"unique-id\\\"\\n      label=\\\"A label\\\"\\n      info=\\\"Info at the bottom\\\"\\n    >\\n      <Input id=\\\"unique-id\\\" />\\n    </FieldBlock>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"More information about the usage can be found in the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/\",\n        children: \"create your own component\"\n      }), \" section.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from 'react'\nimport classnames from 'classnames'\nimport { Space } from '../../../../components'\n\nexport default function TestElement({ className = null, ...props }) {\n  return (\n    <Space\n      className={classnames('dnb-forms-test-element', className)}\n      {...props}\n    />\n  )\n}\n\nTestElement._supportsSpacingProps = true\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","Default","ComponentBox","WithInfo","Horizontal","HorizontalWithInfo","Widths","scope","TestElement","hideCode","WithDescription","HorizontalAutoSize","LabelSize","CombineErrorMessages","InlineHelpButtonVerticalLabel","InlineHelpButtonLabelDescription","InlineHelpButtonHTML","InlineHelpButtonVerticalLabelDescription","InlineHelpButtonHorizontalLabel","InlineHelpButtonCompositionFields","_components","h2","h3","p","Examples","_missingMdxReference","id","component","Error","code","a","pre","href","className","_ref","Space","classnames","_supportsSpacingProps"],"sourceRoot":""}