{"version":3,"file":"component---src-docs-uilib-extensions-forms-create-component-mdx-1f1cec09380cdd8559cf.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/create-component.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/create-component/ListBasisAPIs.tsx","webpack://dnb-design-system-portal/./src/shared/parts/ListSummaryFromEdges.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/DataContext/At/At.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/DataContext/index.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport ListBasisAPIs from './create-component/ListBasisAPIs';\nimport {CreateBasicFieldComponent, CreateBasicValueComponent, CreateComposedFieldComponent} from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    code: \"code\",\n    pre: \"pre\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Create your own component\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Eufemia Forms contains helper fields and tools so you can declaratively create interactive form components that flawlessly integrates between existing data and your custom form components.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By using the building blocks for value and field components, you save development time, and at the same time ensure that local, custom components work similarly, and fit into the setup with the standardized base \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Value/#base-components\",\n        children: \"value components\"\n      }), \" and base \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/base-fields/\",\n        children: \"field components\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Table of Contents\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#value-components\",\n          children: \"Value components\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#field-components\",\n          children: \"Field components\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#layout\",\n          children: \"Layout\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#localization-and-translations\",\n          children: \"Localization and translations\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Value components\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For creating a \", _jsx(_components.code, {\n        children: \"Value.*\"\n      }), \" component you can use \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/ValueBlock/\",\n        children: \"ValueBlock\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/useValueProps/\",\n        children: \"useValueProps\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { ValueBlock, useValueProps } from '@dnb/eufemia/extensions/forms'\\n\\nconst MyValue = (props) => {\\n  const { value, ...rest } = useValueProps(props)\\n  return <ValueBlock {...rest}>{value}</ValueBlock>\\n}\\n\\nrender(<MyValue path=\\\"/dataSelector\\\" />)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/ValueBlock/\",\n        children: \"ValueBlock\"\n      }), \" provides a standardized way to display labels and other surrounding elements in a consistent manner.\"]\n    }), \"\\n\", _jsx(CreateBasicValueComponent, {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useValueProps\"\n      }), \" provides a standardized way to handle data flow in a consistent manner.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"FieldBlock\"\n      }), \" provides a standardized way to display a label and other surrounding elements in a consistent manner.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Field components\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For creating a \", _jsx(_components.code, {\n        children: \"Field.*\"\n      }), \" component, you can use \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/FieldBlock/\",\n        children: \"FieldBlock\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/useFieldProps/\",\n        children: \"useFieldProps\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { FieldBlock, useFieldProps } from '@dnb/eufemia/extensions/forms'\\n\\nconst MyField = (props) => {\\n  const {\\n    id,\\n    value,\\n    handleChange,\\n    handleFocus,\\n    handleBlur,\\n    htmlAttributes,\\n  } = useFieldProps(props)\\n\\n  return (\\n    <FieldBlock\\n      forId={id}\\n      id={id} // If your field component not supports the HTML \\\"for\\\" attribute, you can use the \\\"id\\\" property instead of \\\"forId\\\".\\n    >\\n      <input\\n        id={id}\\n        value={value}\\n        onChange={handleChange}\\n        onFocus={handleFocus}\\n        onBlur={handleBlur}\\n        {...htmlAttributes}\\n      />\\n    </FieldBlock>\\n  )\\n}\\n\\nrender(<MyField label=\\\"Label text\\\" path=\\\"/dataSelector\\\" />)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useFieldProps\"\n      }), \" provides a standardized way to handle data flow, validation and error messages in a consistent manner.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"FieldBlock\"\n      }), \" provides a standardized way to display labels, error messages and other surrounding elements in a consistent manner.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is a working example with code you can edit in the playground:\"\n    }), \"\\n\", _jsx(CreateBasicFieldComponent, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Further customization\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can customize the behavior of the field component. For example, you can add a custom error message:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { useFieldProps } from '@dnb/eufemia/extensions/forms'\\n\\nuseFieldProps({\\n  errorMessages: {\\n    'Field.errorRequired': 'Show this when \\\"required\\\" fails.',\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"or a custom \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" property validation function:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { FormError } from '@dnb/eufemia/extensions/forms'\\n\\nconst validateRequired = (value, { emptyValue, required, isChanged }) => {\\n  if (required && value === emptyValue) {\\n    return new FormError('Field.errorRequired')\\n  }\\n}\\n\\nuseFieldProps({ validateRequired })\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For more information about all the available parameters, see the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/useFieldProps/\",\n        children: \"useFieldProps\"\n      }), \" or the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/FieldBlock/\",\n        children: \"FieldBlock\"\n      }), \" documentation.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"More details\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This example shows a custom component. The \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/useFieldProps/\",\n        children: \"useFieldProps\"\n      }), \" hook receives the properties and adds extra properties to standardize field behavior. These includes \", _jsx(_components.code, {\n        children: \"handleFocus\"\n      }), \", \", _jsx(_components.code, {\n        children: \"handleChange\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"handleBlur\"\n      }), \" functions. Even if the field components has external callbacks like \\\"onChange\\\", these won't be altered. The \\\"handle\\\" variants simplifies your code.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"The example explained\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using these two form helpers in your field component triggers several automatic processes. These include timely validation checks, syncing value changes with the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/DataContext/\",\n        children: \"DataContext\"\n      }), \", coordinating error messages across multiple fields, and preventing premature error displays while the user is editing the field.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Keep in mind, you can customize the behavior of \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/useFieldProps/\",\n        children: \"useFieldProps\"\n      }), \" and other helper functions to make the component work exactly as you want.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Your own validation\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you need custom validation that can't use the built-in JSON Schema or a derivative validator (like in the example above), you can create your own logic. Then, pass the result as an \", _jsx(_components.code, {\n        children: \"error\"\n      }), \" property to \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/FieldBlock/\",\n        children: \"FieldBlock\"\n      }), \". All direct properties override standard handling, giving you full control over your component.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Customized even further\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you need something that looks even more different than the usual fields, you can drop \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/FieldBlock/\",\n        children: \"FieldBlock\"\n      }), \" and display surrounding elements in other ways – but still get all the help of a data flow logic, such as \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/useFieldProps/\",\n        children: \"useFieldProps\"\n      }), \" offers.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here follows an example that retrieves data from a surrounding DataContext, and creates a composite field based on other components from Eufemia:\"\n    }), \"\\n\", _jsx(CreateComposedFieldComponent, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Layout\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When building your custom form components, preferably use the \", _jsx(_components.a, {\n        href: \"/uilib/layout\",\n        children: \"Layout\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Width definitions\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"These are the official sizes you can use when \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/\",\n        children: \"creating your own form fields\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-css\",\n        children: \":root {\\n  --forms-field-width--small: 5rem;\\n  --forms-field-width--medium: 11rem;\\n  --forms-field-width--large: 21rem;\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also use a \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/FieldBlock/\",\n        children: \"FieldBlock\"\n      }), \" and provide a \", _jsx(_components.code, {\n        children: \"width\"\n      }), \" property with a value of either \", _jsx(_components.code, {\n        children: \"small\"\n      }), \", \", _jsx(_components.code, {\n        children: \"medium\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"large\"\n      }), \" and use it as a sized wrapper.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Localization and translations\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/useTranslation/\",\n        children: \"Form.useTranslation\"\n      }), \" hook to use existing translations or extend it with your custom field localization:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import {\\n  Form,\\n  FieldBlock,\\n  useFieldProps,\\n} from '@dnb/eufemia/extensions/forms'\\n\\nconst myFieldTranslations = {\\n  'en-GB': {\\n    MyField: {\\n      label: 'My field',\\n      requiredMessage: 'Custom required message',\\n    },\\n  },\\n  'nb-NO': {\\n    MyField: {\\n      label: 'Mitt felt',\\n      requiredMessage: 'Obligatorisk felt melding',\\n    },\\n  },\\n}\\n\\ntype Translation =\\n  (typeof myFieldTranslations)[keyof typeof myFieldTranslations]\\n\\nconst MyField = (props) => {\\n  const translations = Form.useTranslation<Translation>(\\n    myFieldTranslations,\\n  )\\n  const { label, requiredMessage } = translations.MyField\\n\\n  const preparedProps = {\\n    label,\\n    errorMessages: {\\n      'Field.errorRequired': requiredMessage,\\n    },\\n    ...props,\\n  }\\n\\n  const { id, value, handleChange, handleFocus, handleBlur } =\\n    useFieldProps(preparedProps)\\n\\n  return (\\n    <FieldBlock forId={id}>\\n      <input\\n        id={id}\\n        value={value}\\n        onChange={handleChange}\\n        onFocus={handleFocus}\\n        onBlur={handleBlur}\\n      />\\n    </FieldBlock>\\n  )\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { Input, Slider, Card, Flex, NumberFormat } from '@dnb/eufemia/src'\nimport {\n  Form,\n  Field,\n  Value,\n  FieldBlock,\n  useFieldProps,\n  DataContext,\n  ValueBlock,\n  Wizard,\n  Iterate,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport const CreateBasicValueComponent = () => {\n  return (\n    <ComponentBox scope={{ ValueBlock }} hideCode>\n      {() => {\n        const MyValue = ({ value, ...props }) => {\n          return (\n            <ValueBlock {...props}>\n              <NumberFormat currency>{value}</NumberFormat>\n            </ValueBlock>\n          )\n        }\n\n        return <MyValue label=\"Label\" value={1234} />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const CreateBasicFieldComponent = () => {\n  return (\n    <ComponentBox\n      scope={{\n        useFieldProps,\n      }}\n      hideCode\n    >\n      {() => {\n        const MyField = (props) => {\n          const fromInput = React.useCallback(({ value }) => value, [])\n\n          const preparedProps = {\n            label: 'What is the secret of this field?',\n            fromInput,\n            validator: (value) => {\n              if (value === 'secret') {\n                return new Error('Do not reveal the secret!')\n              }\n            },\n            ...props,\n          }\n\n          const {\n            id,\n            value,\n            label,\n            handleChange,\n            handleFocus,\n            handleBlur,\n          } = useFieldProps(preparedProps)\n\n          return (\n            <FieldBlock forId={id} label={label}>\n              <Input\n                id={id}\n                value={value}\n                on_change={handleChange}\n                on_focus={handleFocus}\n                on_blur={handleBlur}\n              />\n            </FieldBlock>\n          )\n        }\n\n        return (\n          <MyField\n            onChange={(value) => console.log('onChange', value)}\n            required\n          />\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const GettingStarted = () => {\n  return (\n    <ComponentBox hideCode>\n      {() => {\n        const existingData = {\n          companyName: 'DNB',\n          companyOrganizationNumber: '123456789',\n          postalAddressSelect: 'companyAddress',\n        }\n\n        function Component() {\n          const { data } = Form.useData('company-form')\n          console.log('State:', data)\n\n          return (\n            <Form.Handler\n              id=\"company-form\"\n              defaultData={existingData}\n              onChange={console.log}\n              onSubmit={console.log}\n            >\n              <Flex.Stack>\n                <Form.MainHeading>Bedrift</Form.MainHeading>\n                <Card stack>\n                  <Field.Name.Company path=\"/companyName\" required />\n                  <Field.OrganizationNumber\n                    path=\"/companyOrganizationNumber\"\n                    required\n                  />\n                  <Field.Selection\n                    path=\"/postalAddressSelect\"\n                    label=\"Ønsket sted for tilsendt post\"\n                    variant=\"radio\"\n                  >\n                    <Field.Option\n                      value=\"companyAddress\"\n                      title=\"Samme som forretningsadresse\"\n                    />\n                    <Field.Option value=\"other\" title=\"Annet\" />\n                  </Field.Selection>\n                </Card>\n                <Form.ButtonRow>\n                  <Form.SubmitButton />\n                </Form.ButtonRow>\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <Component />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const CreateComposedFieldComponent = () => {\n  return (\n    <ComponentBox\n      scope={{\n        DataContext,\n        useFieldProps,\n      }}\n      hideCode\n    >\n      {() => {\n        const MyComposedField = (props) => {\n          const {\n            id,\n            value,\n            hasError,\n            handleChange,\n            handleFocus,\n            handleBlur,\n          } = useFieldProps({\n            path: '/birthYear',\n          })\n\n          const handleBirthYearChange = React.useCallback(\n            (sliderData) => {\n              handleChange(sliderData.value)\n            },\n            [handleChange],\n          )\n\n          return (\n            <FieldBlock id={id} label={props.label ?? 'Name and age'}>\n              <Flex.Horizontal>\n                <Field.Name.First\n                  path=\"/firstName\"\n                  width=\"medium\"\n                  minLength={2}\n                />\n                <Field.Name.Last\n                  path=\"/lastName\"\n                  width=\"medium\"\n                  required\n                />\n                <FieldBlock width=\"large\">\n                  <Slider\n                    min={1900}\n                    max={new Date().getFullYear()}\n                    step={1}\n                    label=\"Birth year\"\n                    label_direction=\"vertical\"\n                    value={parseFloat(String(value))}\n                    on_change={handleBirthYearChange}\n                    on_drag_start={handleFocus}\n                    on_drag_end={handleBlur}\n                    status={hasError}\n                    tooltip\n                  />\n                </FieldBlock>\n              </Flex.Horizontal>\n            </FieldBlock>\n          )\n        }\n\n        const data = {\n          firstName: 'John',\n          birthYear: 2000,\n        }\n\n        return (\n          <DataContext.Provider\n            defaultData={data}\n            onChange={(data) => console.log('onChange', data)}\n          >\n            <MyComposedField label=\"My custom label\" />\n          </DataContext.Provider>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const BaseFieldComponents = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Card stack>\n        <Field.String\n          label=\"Text field\"\n          value=\"Lorem Ipsum\"\n          onChange={(value) => console.log('onChange', value)}\n        />\n        <Field.Number\n          label=\"Number Field\"\n          value={789}\n          onChange={(value) => console.log('onChange', value)}\n        />\n        <Field.Boolean\n          label=\"Boolean Field\"\n          value={true}\n          onChange={(value) => console.log('onChange', value)}\n        />\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const FeatureFields = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Card stack>\n        <Field.String label=\"Fornavn\" value=\"John\" />\n        <Field.String label=\"Etternavn\" value=\"Smith\" />\n        <Field.NationalIdentityNumber value=\"20058512345\" />\n        <Field.Email value=\"john@smith.email\" />\n        <Field.PhoneNumber value=\"+47 98765432\" />\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const LayoutComponents = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Flex.Stack>\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Card stack>\n          <Form.SubHeading>Name</Form.SubHeading>\n\n          <Field.String label=\"Fornavn\" value=\"John\" />\n          <Field.String label=\"Etternavn\" value=\"Smith\" />\n        </Card>\n\n        <Card stack>\n          <Form.SubHeading>More information</Form.SubHeading>\n\n          <Field.NationalIdentityNumber value=\"20058512345\" />\n          <Field.Email value=\"john@smith.email\" />\n          <Field.PhoneNumber value=\"+47 98765432\" />\n        </Card>\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n\nexport const VisibilityBasedOnData = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Form.Handler\n        defaultData={{\n          firstName: undefined,\n          lastName: 'Smith',\n          advanced: false,\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Flex.Stack>\n          <Form.MainHeading>Profile</Form.MainHeading>\n\n          <Card stack>\n            <Form.SubHeading>Name</Form.SubHeading>\n\n            <Field.String path=\"/firstName\" label=\"Fornavn\" />\n            <Field.String path=\"/lastName\" label=\"Etternavn\" />\n          </Card>\n\n          <Field.Boolean\n            path=\"/advanced\"\n            variant=\"checkbox-button\"\n            label=\"More fields\"\n          />\n          <Form.Visibility pathTrue=\"/advanced\">\n            <Flex.Stack>\n              <Card stack>\n                <Form.SubHeading>More information</Form.SubHeading>\n\n                <Field.NationalIdentityNumber value=\"20058512345\" />\n                <Field.Email value=\"john@smith.email\" />\n                <Field.PhoneNumber value=\"+47 98765432\" />\n              </Card>\n            </Flex.Stack>\n          </Form.Visibility>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const UsingFormHandler = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Form.Handler\n        defaultData={{\n          firstName: 'John',\n          lastName: 'Smith',\n          ssn: '20058512345',\n          email: 'john@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Card stack>\n          <Field.String path=\"/firstName\" label=\"Fornavn\" />\n          <Field.String path=\"/lastName\" label=\"Etternavn\" />\n          <Field.NationalIdentityNumber path=\"/ssn\" />\n          <Field.Email path=\"/email\" />\n          <Field.PhoneNumber path=\"/phone\" />\n\n          <Form.ButtonRow>\n            <Form.SubmitButton />\n          </Form.ButtonRow>\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Validation = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Form.Handler\n        defaultData={{\n          firstName: undefined,\n          lastName: 'Smith',\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Card stack>\n          <Field.String path=\"/firstName\" label=\"Fornavn\" required />\n          <Field.String path=\"/lastName\" label=\"Etternavn\" required />\n          <Field.NationalIdentityNumber path=\"/ssn\" validateInitially />\n          <Field.Email path=\"/email\" validateInitially />\n          <Field.PhoneNumber path=\"/phone\" validateInitially />\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const UsingWizard = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyForm = () => {\n          // Routers like \"react-router\" are supported as well\n          Wizard.useQueryLocator('my-wizard')\n          const { summaryTitle } = Form.useLocale().Step\n\n          return (\n            <Form.Handler\n              defaultData={{\n                firstName: undefined,\n                lastName: 'Smith',\n                advanced: false,\n                ssn: '123',\n                email: '@smith.email',\n                phone: '+47 98765432',\n              }}\n              onChange={(data) => console.log('onChange', data)}\n              onPathChange={(path, value) =>\n                console.log('onPathChange', path, value)\n              }\n              onSubmit={(data) => console.log('onSubmit', data)}\n            >\n              <Wizard.Container id=\"my-wizard\" mode=\"loose\">\n                <Wizard.Step title=\"Name\">\n                  <Form.MainHeading>Profile</Form.MainHeading>\n\n                  <Card stack>\n                    <Form.SubHeading>Name</Form.SubHeading>\n\n                    <Field.String\n                      path=\"/firstName\"\n                      label=\"Fornavn\"\n                      required\n                    />\n                    <Field.String\n                      path=\"/lastName\"\n                      label=\"Etternavn\"\n                      required\n                    />\n                  </Card>\n\n                  <Wizard.Buttons />\n                </Wizard.Step>\n\n                <Wizard.Step title=\"More information\">\n                  <Form.MainHeading>Profile</Form.MainHeading>\n\n                  <Card stack>\n                    <Form.SubHeading>More information</Form.SubHeading>\n\n                    <Field.NationalIdentityNumber path=\"/ssn\" />\n                    <Field.Email path=\"/email\" />\n                    <Field.PhoneNumber path=\"/phone\" />\n                  </Card>\n\n                  <Wizard.Buttons />\n                </Wizard.Step>\n\n                <Wizard.Step title={summaryTitle}>\n                  <Form.MainHeading>Profile</Form.MainHeading>\n\n                  <Card stack>\n                    <Value.SummaryList layout=\"grid\">\n                      <Value.String path=\"/firstName\" label=\"Fornavn\" />\n                      <Value.String path=\"/lastName\" label=\"Etternavn\" />\n\n                      <Value.NationalIdentityNumber path=\"/ssn\" />\n                      <Value.Email path=\"/email\" />\n                      <Value.PhoneNumber path=\"/phone\" />\n                    </Value.SummaryList>\n                  </Card>\n\n                  <Form.ButtonRow>\n                    <Wizard.Buttons />\n                    <Form.SubmitButton />\n                  </Form.ButtonRow>\n                </Wizard.Step>\n              </Wizard.Container>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const UsingFormSection = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyEditContainer = () => {\n          return (\n            <Form.Section.EditContainer variant=\"basic\">\n              <Field.Name.First path=\"/firstName\" />\n              <Field.Name.Last path=\"/lastName\" />\n            </Form.Section.EditContainer>\n          )\n        }\n\n        const MyViewContainer = () => {\n          return (\n            <Form.Section.ViewContainer variant=\"basic\">\n              <Value.SummaryList>\n                <Value.Name.First path=\"/firstName\" />\n                <Value.Name.Last path=\"/lastName\" />\n              </Value.SummaryList>\n            </Form.Section.ViewContainer>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            defaultData={{\n              nestedPath: {\n                firstName: 'Nora',\n                lastName: undefined, // initiate error\n              },\n            }}\n          >\n            <Card stack>\n              <Form.SubHeading>Your account</Form.SubHeading>\n              <Form.Section path=\"/nestedPath\" required>\n                <MyEditContainer />\n                <MyViewContainer />\n              </Form.Section>\n            </Card>\n            <Form.SubmitButton />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const UsingIterate = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyEditItemForm = () => {\n          return (\n            <Field.Composition>\n              <Field.Name.First itemPath=\"/firstName\" width=\"medium\" />\n              <Field.Name.Last\n                itemPath=\"/lastName\"\n                width=\"medium\"\n                required\n              />\n            </Field.Composition>\n          )\n        }\n\n        const MyEditItem = () => {\n          return (\n            <Iterate.EditContainer\n              title=\"Edit account holder {itemNo}\"\n              titleWhenNew=\"New account holder {itemNo}\"\n            >\n              <MyEditItemForm />\n            </Iterate.EditContainer>\n          )\n        }\n\n        const MyViewItem = () => {\n          const item = Iterate.useItem()\n          console.log('index:', item.index)\n\n          return (\n            <Iterate.ViewContainer title=\"Account holder {itemNo}\">\n              <Value.SummaryList>\n                <Value.Name.First itemPath=\"/firstName\" showEmpty />\n                <Value.Name.Last itemPath=\"/lastName\" placeholder=\"-\" />\n              </Value.SummaryList>\n            </Iterate.ViewContainer>\n          )\n        }\n\n        const CreateNewEntry = () => {\n          return (\n            <Iterate.PushContainer\n              path=\"/accounts\"\n              title=\"New account holder\"\n              openButton={\n                <Iterate.PushContainer.OpenButton text=\"Add another account\" />\n              }\n              showOpenButtonWhen={(list) => list.length > 0}\n            >\n              <MyEditItemForm />\n            </Iterate.PushContainer>\n          )\n        }\n\n        const MyForm = () => {\n          return (\n            <Form.Handler\n              data={{\n                accounts: [\n                  {\n                    firstName: 'Tony',\n                    lastName: undefined, // initiate error\n                  },\n                ],\n              }}\n              onChange={(data) =>\n                console.log('DataContext/onChange', data)\n              }\n              onSubmit={async (data) => console.log('onSubmit', data)}\n            >\n              <Flex.Vertical>\n                <Form.MainHeading>Accounts</Form.MainHeading>\n\n                <Card stack>\n                  <Iterate.Array path=\"/accounts\">\n                    <MyViewItem />\n                    <MyEditItem />\n                  </Iterate.Array>\n\n                  <CreateNewEntry />\n                </Card>\n\n                <Form.SubmitButton variant=\"send\" />\n              </Flex.Vertical>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const Transformers = () => {\n  return (\n    <ComponentBox hideCode>\n      {() => {\n        const MyForm = () => {\n          const transformToUpper = (value) => {\n            return value?.toUpperCase()\n          }\n          const transformToLower = (value) => {\n            return value?.toLowerCase()\n          }\n\n          return (\n            <Form.Handler onChange={console.log}>\n              <Card stack>\n                <Field.String\n                  width=\"medium\"\n                  label=\"Input value\"\n                  placeholder=\"Type letters\"\n                  path=\"/myField\"\n                  transformIn={transformToUpper}\n                  transformOut={transformToLower}\n                />\n\n                <Value.String label=\"Output value\" path=\"/myField\" />\n              </Card>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const QuickStart = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyForm = () => {\n          const existingData = { companyName: 'DNB' }\n          return (\n            <Form.Handler\n              defaultData={existingData}\n              onChange={console.log}\n              onSubmit={console.log}\n            >\n              <Card stack>\n                <Field.Name.Company path=\"/companyName\" required />\n                <Field.OrganizationNumber\n                  path=\"/companyOrganizationNumber\"\n                  required\n                />\n                <Field.Selection\n                  path=\"/postalAddressSelect\"\n                  label=\"Ønsket sted for tilsendt post\"\n                  variant=\"radio\"\n                >\n                  <Field.Option\n                    value=\"companyAddress\"\n                    title=\"Samme som forretningsadresse\"\n                  />\n                  <Field.Option value=\"other\" title=\"Annet\" />\n                </Field.Selection>\n                <Form.Visibility\n                  visibleWhen={{\n                    path: '/postalAddressSelect',\n                    hasValue: 'other',\n                  }}\n                  animate\n                >\n                  <Field.String\n                    path=\"/postalAddress\"\n                    label=\"Sted for tilsendt post\"\n                    required\n                  />\n                </Form.Visibility>\n              </Card>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n","import React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport ListSummaryFromEdges from '../../../../../shared/parts/ListSummaryFromEdges'\n\nexport default function ListBasisAPIs(props) {\n  const {\n    allMdx: { edges },\n  } = useStaticQuery(graphql`\n    {\n      allMdx(\n        filter: {\n          frontmatter: {\n            title: { ne: null }\n            draft: { ne: true }\n            componentType: { in: \"basis-api\" }\n          }\n          internal: {\n            contentFilePath: { glob: \"**/uilib/extensions/forms/**/*\" }\n          }\n        }\n        sort: [{ frontmatter: { title: ASC } }]\n      ) {\n        edges {\n          node {\n            fields {\n              slug\n            }\n            frontmatter {\n              title\n              description\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  return <ListSummaryFromEdges edges={edges} {...props} />\n}\n","import React from 'react'\nimport { Ul, Li } from '@dnb/eufemia/src'\nimport AutoLinkHeader from '../tags/AutoLinkHeader'\nimport Anchor from '../tags/Anchor'\nimport {\n  HeadingSize,\n  resetLevels,\n} from '@dnb/eufemia/src/components/Heading'\nimport ReactMarkdown from 'react-markdown'\nimport { basicComponents } from '../../shared/tags'\nimport { SpacingProps } from '@dnb/eufemia/src/shared/types'\n\nimport type {\n  HeadingLevel,\n  InternalHeadingLevel,\n} from '@dnb/eufemia/src/components/Heading'\n\ntype ListEdge = {\n  node: {\n    frontmatter: {\n      title: string\n      description?: string\n      order?: number\n    }\n    fields: {\n      slug: string\n    }\n  }\n}\nexport type ListEdges = Array<ListEdge>\ntype ListSummaryFromEdgesProps = {\n  edges: ListEdges\n  level?: HeadingLevel\n  size?: HeadingSize\n  description?: string\n  returnListItems?: boolean\n} & SpacingProps\n\nexport default function ListSummaryFromEdges({\n  edges,\n  level = undefined,\n  size = undefined,\n  description: description = null,\n  returnListItems = false,\n  ...props\n}: ListSummaryFromEdgesProps) {\n  const ListWrapper = returnListItems ? Ul : React.Fragment\n  const ItemWrapper = returnListItems ? Li : React.Fragment\n\n  resetLevels((level || 2) as InternalHeadingLevel)\n\n  const jsx = edges.map(\n    (\n      {\n        node: {\n          frontmatter: { title, description: fmDescription },\n          fields: { slug },\n        },\n      },\n      i,\n    ) => {\n      return (\n        <ItemWrapper key={i}>\n          <Title />\n          <Description />\n        </ItemWrapper>\n      )\n\n      function Title() {\n        const titleLink = <Anchor href={'/' + slug}>{title}</Anchor>\n\n        if (returnListItems) {\n          return titleLink\n        }\n\n        return (\n          <AutoLinkHeader\n            level={level || 2}\n            size={size}\n            useSlug={'/' + slug}\n            title={title}\n            {...props}\n          >\n            {titleLink}\n          </AutoLinkHeader>\n        )\n      }\n\n      function Description() {\n        const rawDescription =\n          description !== null ? description : fmDescription\n\n        if (rawDescription) {\n          if (returnListItems) {\n            return (\n              <>\n                :{' '}\n                <ReactMarkdown\n                  components={basicComponents}\n                  disallowedElements={['p']}\n                  unwrapDisallowed={true}\n                >\n                  {rawDescription}\n                </ReactMarkdown>\n              </>\n            )\n          }\n\n          return (\n            <ReactMarkdown components={basicComponents}>\n              {rawDescription}\n            </ReactMarkdown>\n          )\n        }\n      }\n    },\n  )\n\n  return <ListWrapper>{jsx}</ListWrapper>\n}\n","import React, { useCallback, useContext } from 'react'\nimport pointer from '../../utils/json-pointer'\nimport type { ComponentProps } from '../../types'\nimport Context, { ContextState } from '../Context'\n\nexport type Props = ComponentProps & {\n  /** JSON Pointer for where in the source dataset to point at in sub components */\n  path?: string\n  iterate?: boolean\n  children?: React.ReactNode\n}\n\nfunction At(props: Props) {\n  const { path = '/', iterate, children } = props\n  const dataContext = useContext(Context)\n  const {\n    data: contextData,\n    handlePathChange: handlePathChangeDataContext,\n  } = dataContext\n\n  const data =\n    contextData && pointer.has(contextData, path)\n      ? pointer.get(contextData, path)\n      : undefined\n\n  const handlePathChange: ContextState['handlePathChange'] = useCallback(\n    (changePath, value) => {\n      handlePathChangeDataContext(`${path}${changePath}`, value)\n    },\n    [handlePathChangeDataContext, path]\n  )\n\n  if (iterate) {\n    if (!Array.isArray(data)) {\n      return null\n    }\n    return (\n      <>\n        {data.map((element, i) => {\n          const handlePathChange = (\n            handlePathChangeDataContext\n              ? (changePath, value) => {\n                  handlePathChangeDataContext(\n                    `${path}/${i}${changePath}`,\n                    value\n                  )\n                }\n              : undefined\n          ) as ContextState['handlePathChange']\n\n          return (\n            <Context.Provider\n              key={`element${i}`}\n              value={{\n                ...dataContext,\n                data: element,\n                handlePathChange,\n              }}\n            >\n              {children}\n            </Context.Provider>\n          )\n        })}\n      </>\n    )\n  }\n\n  return (\n    <Context.Provider\n      value={{\n        ...dataContext,\n        data,\n        handlePathChange,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  )\n}\n\nAt._supportsSpacingProps = true\nexport default At\n","import Context from './Context'\n\nconst Consumer = Context.Consumer\nexport { Consumer }\n\nexport * from './Context'\nexport { default as Context } from './Context'\nexport { default as Provider } from './Provider'\nexport { default as At } from './At'\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","a","strong","ul","li","h2","code","pre","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","className","CreateBasicValueComponent","CreateBasicFieldComponent","CreateComposedFieldComponent","wrapper","MDXLayout","ComponentBox","scope","ValueBlock","hideCode","noInline","useFieldProps","GettingStarted","DataContext","BaseFieldComponents","Value","FeatureFields","LayoutComponents","VisibilityBasedOnData","UsingFormHandler","Validation","UsingWizard","UsingFormSection","UsingIterate","Transformers","QuickStart","ListBasisAPIs","allMdx","edges","useStaticQuery","ListSummaryFromEdges","_ref","level","size","description","returnListItems","ListWrapper","Ul","React","ItemWrapper","Li","resetLevels","jsx","map","_ref2","i","node","frontmatter","title","fmDescription","fields","slug","Title","Description","titleLink","Anchor","AutoLinkHeader","useSlug","rawDescription","ReactMarkdown","basicComponents","disallowedElements","unwrapDisallowed","At","path","iterate","dataContext","useContext","Context","data","contextData","handlePathChange","handlePathChangeDataContext","pointer","undefined","useCallback","changePath","value","Array","isArray","element","Provider","_supportsSpacingProps","Consumer"],"sourceRoot":""}