"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[48338,4117],{85753:function(e,n,s){s.r(n);var o=s(52322),a=s(45392),i=s(69403),r=s(94929);function t(e){const n=Object.assign({h1:"h1",p:"p",a:"a",pre:"pre",code:"code",h2:"h2",h3:"h3"},(0,a.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{children:"Create your own component"}),"\n",(0,o.jsx)(n.p,{children:"Eufemia Forms contains helper fields and tools so you can declaratively create interactive form components that flawlessly integrates between existing data and your custom form components."}),"\n",(0,o.jsxs)(n.p,{children:["By using the building blocks for field components, you save development time, and at the same time ensure that local, custom components work similarly, and fit into the setup with ",(0,o.jsx)(n.a,{href:"/uilib/extensions/forms/base-fields/",children:"the standardized field components"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import {\n  FieldBlock,\n  ValueBlock,\n  useDataValue,\n} from '@dnb/eufemia/extensions/forms'\n"})}),"\n",(0,o.jsx)(i.default,{}),"\n",(0,o.jsx)(n.h2,{children:"FieldBlock and useDataValue"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"FieldBlock"})," component and the ",(0,o.jsx)(n.code,{children:"useDataValue"})," hook are the basis for all field components in Eufemia Forms."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"FieldBlock"})," provides a standardized way to display labels, error messages and other surrounding elements in a consistent manner."]}),"\n",(0,o.jsxs)(n.p,{children:["While ",(0,o.jsx)(n.code,{children:"useDataValue"})," provides a standardized way to handle data flow, validation and error messages in a consistent manner."]}),"\n",(0,o.jsx)(r.CreateBasicFieldComponent,{}),"\n",(0,o.jsx)(n.h3,{children:"More details"}),"\n",(0,o.jsxs)(n.p,{children:["This example shows a custom component. The ",(0,o.jsx)(n.code,{children:"useDataValue"})," hook receives the props and adds extra properties to standardize field behavior. These includes ",(0,o.jsx)(n.code,{children:"handleFocus"}),", ",(0,o.jsx)(n.code,{children:"handleChange"}),", and ",(0,o.jsx)(n.code,{children:"handleBlur"}),' functions. Even if the field components has external callbacks like "onChange", these won\'t be altered. The "handle" variants simplifies your code.']}),"\n",(0,o.jsx)(n.h3,{children:"The example explained"}),"\n",(0,o.jsxs)(n.p,{children:["Using these two form helpers in your field component triggers several automatic processes. These include timely validation checks, syncing value changes with the ",(0,o.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/DataContext/",children:"DataContext"}),", coordinating error messages across multiple fields, and preventing premature error displays while the user is editing the field."]}),"\n",(0,o.jsxs)(n.p,{children:["Keep in mind, you can customize the behavior of ",(0,o.jsx)(n.a,{href:"/uilib/extensions/forms/create-component/useDataValue",children:"useDataValue"})," and other helper functions to make the component work exactly as you want."]}),"\n",(0,o.jsx)(n.h3,{children:"Your own validation"}),"\n",(0,o.jsxs)(n.p,{children:["If you need custom validation that can't use the built-in JSON Schema or a derivative validator (like in the example above), you can create your own logic. Then, pass the result as an ",(0,o.jsx)(n.code,{children:"error"})," prop to ",(0,o.jsx)(n.code,{children:"FieldBlock"}),". All direct props override standard handling, giving you full control over your component."]}),"\n",(0,o.jsx)(n.h3,{children:"Customized even further"}),"\n",(0,o.jsxs)(n.p,{children:["If you need something that looks even more different than the usual fields, you can drop ",(0,o.jsx)(n.code,{children:"FieldBlock"})," and display surrounding elements in other ways â€“ but still get all the help of a data flow logic, such as ",(0,o.jsx)(n.code,{children:"useDataValue"})," offers."]}),"\n",(0,o.jsx)(n.p,{children:"Here follows an example that retrieves data from a surrounding DataContext, and creates a composite field based on other components from Eufemia:"}),"\n",(0,o.jsx)(r.CreateComposedFieldComponent,{}),"\n",(0,o.jsx)(n.h2,{children:"Layout"}),"\n",(0,o.jsxs)(n.p,{children:["When building your custom form components, preferably use the ",(0,o.jsx)(n.a,{href:"/uilib/layout",children:"Layout"})," component."]}),"\n",(0,o.jsx)(n.h3,{children:"Width definitions"}),"\n",(0,o.jsxs)(n.p,{children:["These are the official sizes you can use when ",(0,o.jsx)(n.a,{href:"/uilib/extensions/forms/create-component/",children:"creating your own form fields"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-css",children:":root {\n  --forms-field-width--small: 5rem;\n  --forms-field-width--medium: 11rem;\n  --forms-field-width--large: 21rem;\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can also use a ",(0,o.jsx)(n.a,{href:"/uilib/extensions/forms/create-component/FieldBlock/",children:"FieldBlock"})," and provide a ",(0,o.jsx)(n.code,{children:"width"})," prop with a value of either ",(0,o.jsx)(n.code,{children:"small"}),", ",(0,o.jsx)(n.code,{children:"medium"})," or ",(0,o.jsx)(n.code,{children:"large"})," and use it as a sized wrapper."]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(t,e)})):t(e)}},69403:function(e,n,s){s.r(n),s.d(n,{default:function(){return r}});var o=s(68270),a=s(75440),i=s(52322);function r(){const{allMdx:{edges:e}}=(0,o.useStaticQuery)("1487441482");return(0,i.jsx)(a.Z,{edges:e})}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-create-component-mdx-3a06865bb67e41d52227.js.map