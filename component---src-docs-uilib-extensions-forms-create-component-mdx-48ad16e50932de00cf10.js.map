{"version":3,"file":"component---src-docs-uilib-extensions-forms-create-component-mdx-48ad16e50932de00cf10.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/create-component.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/create-component/ListBasisAPIs.tsx","webpack://dnb-design-system-portal/./src/shared/parts/ListSummaryFromEdges.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/DataContext/At/At.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport ListBasisAPIs from './create-component/ListBasisAPIs';\nimport {CreateBasicFieldComponent, CreateBasicValueComponent, CreateComposedFieldComponent} from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    code: \"code\",\n    pre: \"pre\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Create your own component\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Eufemia Forms contains helper fields and tools so you can declaratively create interactive form components that flawlessly integrates between existing data and your custom form components.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By using the building blocks for field components, you save development time, and at the same time ensure that local, custom components work similarly, and fit into the setup with \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/base-fields/\",\n        children: \"the standardized field components\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Value components\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For creating a \", _jsx(_components.code, {\n        children: \"Value.*\"\n      }), \" component you can use \", _jsx(_components.code, {\n        children: \"ValueBlock\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { ValueBlock } from '@dnb/eufemia/extensions/forms'\\n\\nconst MyValue = ({ value, ...props }) => {\\n  return <ValueBlock {...props}>{value}</ValueBlock>\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"ValueBlock\"\n      }), \" provides a standardized way to display labels and other surrounding elements in a consistent manner.\"]\n    }), \"\\n\", _jsx(CreateBasicValueComponent, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Filed components\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For creating a \", _jsx(_components.code, {\n        children: \"Field.*\"\n      }), \" component, you can use \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/FieldBlock/\",\n        children: \"FieldBlock\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/useFieldProps/\",\n        children: \"useFieldProps\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { FieldBlock, useFieldProps } from '@dnb/eufemia/extensions/forms'\\n\\nconst MyField = (props) => {\\n  const { id, value, label, handleChange, handleFocus, handleBlur } =\\n    useFieldProps(props)\\n\\n  return (\\n    <FieldBlock forId={id}>\\n      <input\\n        id={id}\\n        value={value}\\n        label={label}\\n        onChange={handleChange}\\n        onFocus={handleFocus}\\n        onBlur={handleBlur}\\n      />\\n    </FieldBlock>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"While \", _jsx(_components.code, {\n        children: \"useFieldProps\"\n      }), \" provides a standardized way to handle data flow, validation and error messages in a consistent manner.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"FieldBlock\"\n      }), \" provides a standardized way to display labels, error messages and other surrounding elements in a consistent manner.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is a working example with code you can edit in the playground:\"\n    }), \"\\n\", _jsx(CreateBasicFieldComponent, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"More details\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This example shows a custom component. The \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/useFieldProps/\",\n        children: \"useFieldProps\"\n      }), \" hook receives the props and adds extra properties to standardize field behavior. These includes \", _jsx(_components.code, {\n        children: \"handleFocus\"\n      }), \", \", _jsx(_components.code, {\n        children: \"handleChange\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"handleBlur\"\n      }), \" functions. Even if the field components has external callbacks like \\\"onChange\\\", these won't be altered. The \\\"handle\\\" variants simplifies your code.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"The example explained\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using these two form helpers in your field component triggers several automatic processes. These include timely validation checks, syncing value changes with the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/extended-features/DataContext/\",\n        children: \"DataContext\"\n      }), \", coordinating error messages across multiple fields, and preventing premature error displays while the user is editing the field.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Keep in mind, you can customize the behavior of \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/useFieldProps/\",\n        children: \"useFieldProps\"\n      }), \" and other helper functions to make the component work exactly as you want.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Your own validation\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you need custom validation that can't use the built-in JSON Schema or a derivative validator (like in the example above), you can create your own logic. Then, pass the result as an \", _jsx(_components.code, {\n        children: \"error\"\n      }), \" prop to \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/FieldBlock/\",\n        children: \"FieldBlock\"\n      }), \". All direct props override standard handling, giving you full control over your component.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Customized even further\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you need something that looks even more different than the usual fields, you can drop \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/FieldBlock/\",\n        children: \"FieldBlock\"\n      }), \" and display surrounding elements in other ways – but still get all the help of a data flow logic, such as \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/useFieldProps/\",\n        children: \"useFieldProps\"\n      }), \" offers.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here follows an example that retrieves data from a surrounding DataContext, and creates a composite field based on other components from Eufemia:\"\n    }), \"\\n\", _jsx(CreateComposedFieldComponent, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Layout\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When building your custom form components, preferably use the \", _jsx(_components.a, {\n        href: \"/uilib/layout\",\n        children: \"Layout\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Width definitions\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"These are the official sizes you can use when \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/\",\n        children: \"creating your own form fields\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-css\",\n        children: \":root {\\n  --forms-field-width--small: 5rem;\\n  --forms-field-width--medium: 11rem;\\n  --forms-field-width--large: 21rem;\\n  --forms-card-max-width: 36.5rem;\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also use a \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component/FieldBlock/\",\n        children: \"FieldBlock\"\n      }), \" and provide a \", _jsx(_components.code, {\n        children: \"width\"\n      }), \" prop with a value of either \", _jsx(_components.code, {\n        children: \"small\"\n      }), \", \", _jsx(_components.code, {\n        children: \"medium\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"large\"\n      }), \" and use it as a sized wrapper.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Localization and translations\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the \", _jsx(_components.code, {\n        children: \"Form.useLocale\"\n      }), \" hook to use existing translations or extend it with your custom field localization:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import {\\n  Form,\\n  FieldBlock,\\n  useFieldProps,\\n} from '@dnb/eufemia/extensions/forms'\\n\\nconst myFieldTranslations = {\\n  'en-GB': {\\n    MyField: { label: 'My field', required: 'Custom required message' },\\n  },\\n  'nb-NO': {\\n    MyField: { label: 'Mitt felt', required: 'Obligatorisk felt melding' },\\n  },\\n}\\n\\nconst MyField = (props) => {\\n  const translations = Form.useLocale(myFieldTranslations)\\n  const { label, required } = translations.MyField\\n\\n  const preparedProps = {\\n    label,\\n    errorMessages: {\\n      required,\\n    },\\n    ...props,\\n  }\\n\\n  const { id, value, label, handleChange, handleFocus, handleBlur } =\\n    useFieldProps(preparedProps)\\n\\n  return (\\n    <FieldBlock forId={id}>\\n      <input\\n        id={id}\\n        value={value}\\n        label={label}\\n        onChange={handleChange}\\n        onFocus={handleFocus}\\n        onBlur={handleBlur}\\n      />\\n    </FieldBlock>\\n  )\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { Input, Slider, Card, Flex, NumberFormat } from '@dnb/eufemia/src'\nimport {\n  Form,\n  Field,\n  Value,\n  FieldBlock,\n  useFieldProps,\n  DataContext,\n  ValueBlock,\n  Wizard,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport const CreateBasicValueComponent = () => {\n  return (\n    <ComponentBox scope={{ ValueBlock }} hideCode>\n      {() => {\n        const MyValue = ({ value, ...props }) => {\n          return (\n            <ValueBlock {...props}>\n              <NumberFormat currency>{value}</NumberFormat>\n            </ValueBlock>\n          )\n        }\n\n        return <MyValue label=\"Label\" value={1234} />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const CreateBasicFieldComponent = () => {\n  return (\n    <ComponentBox\n      scope={{\n        useFieldProps,\n      }}\n      hideCode\n    >\n      {() => {\n        const MyField = (props) => {\n          const fromInput = React.useCallback(({ value }) => value, [])\n\n          const preparedProps = {\n            label: 'What is the secret of this field?',\n            fromInput,\n            validator: (value) => {\n              if (value === 'secret') {\n                return new Error('Do not reveal the secret!')\n              }\n            },\n            ...props,\n          }\n\n          const {\n            id,\n            value,\n            label,\n            handleChange,\n            handleFocus,\n            handleBlur,\n          } = useFieldProps(preparedProps)\n\n          return (\n            <FieldBlock forId={id} label={label}>\n              <Input\n                id={id}\n                value={value}\n                on_change={handleChange}\n                on_focus={handleFocus}\n                on_blur={handleBlur}\n              />\n            </FieldBlock>\n          )\n        }\n\n        return (\n          <MyField\n            onChange={(value) => console.log('onChange', value)}\n            required\n          />\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const GettingStarted = () => {\n  return (\n    <ComponentBox hideCode>\n      {() => {\n        const existingData = {\n          companyName: 'DNB',\n          companyOrganizationNumber: '123456789',\n          postalAddressSelect: 'companyAddress',\n        }\n\n        function Component() {\n          const { data } = Form.useData('company-form')\n          console.log('State:', data)\n\n          return (\n            <Form.Handler\n              id=\"company-form\"\n              data={existingData}\n              onChange={console.log}\n              onSubmit={console.log}\n            >\n              <Flex.Stack>\n                <Form.MainHeading>Bedrift</Form.MainHeading>\n                <Card spacing=\"medium\">\n                  <Field.String\n                    path=\"/companyName\"\n                    label=\"Bedriftens navn\"\n                    required\n                  />\n                  <Field.OrganizationNumber\n                    path=\"/companyOrganizationNumber\"\n                    required\n                  />\n                  <Field.Selection\n                    path=\"/postalAddressSelect\"\n                    label=\"Ønsket sted for tilsendt post\"\n                    variant=\"radio\"\n                  >\n                    <Field.Option\n                      value=\"companyAddress\"\n                      title=\"Samme som forretningsadresse\"\n                    />\n                    <Field.Option value=\"other\" title=\"Annet\" />\n                  </Field.Selection>\n                </Card>\n                <Form.ButtonRow>\n                  <Form.SubmitButton />\n                </Form.ButtonRow>\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <Component />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const CreateComposedFieldComponent = () => {\n  return (\n    <ComponentBox\n      scope={{\n        DataContext,\n        useFieldProps,\n      }}\n      hideCode\n    >\n      {() => {\n        const MyComposedField = (props) => {\n          const birthYear = useFieldProps({\n            path: '/birthYear',\n          })\n\n          const handleBirthYearChange = React.useCallback(\n            (sliderData) => {\n              birthYear.handleChange(sliderData.value)\n            },\n            [birthYear],\n          )\n\n          return (\n            <FieldBlock label={props.label ?? 'Name and age'}>\n              <Flex.Horizontal>\n                <Field.String\n                  path=\"/firstName\"\n                  label=\"First name\"\n                  width=\"medium\"\n                  minLength={2}\n                />\n                <Field.String\n                  path=\"/lastName\"\n                  label=\"Last name\"\n                  width=\"medium\"\n                  required\n                />\n                <FieldBlock width=\"large\">\n                  <Slider\n                    min={1900}\n                    max={new Date().getFullYear()}\n                    step={1}\n                    label=\"Birth year\"\n                    label_direction=\"vertical\"\n                    value={parseFloat(String(birthYear.value))}\n                    on_change={handleBirthYearChange}\n                    on_drag_start={birthYear.handleFocus}\n                    on_drag_end={birthYear.handleBlur}\n                    status={birthYear.error?.message}\n                    tooltip\n                  />\n                </FieldBlock>\n              </Flex.Horizontal>\n            </FieldBlock>\n          )\n        }\n\n        const data = {\n          firstName: 'John',\n          birthYear: 2000,\n        }\n\n        return (\n          <DataContext.Provider\n            data={data}\n            onChange={(data) => console.log('onChange', data)}\n          >\n            <MyComposedField label=\"My custom label\" />\n          </DataContext.Provider>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const BaseFieldComponents = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Card stack>\n        <Field.String\n          label=\"Text field\"\n          value=\"Lorem Ipsum\"\n          onChange={(value) => console.log('onChange', value)}\n        />\n        <Field.Number\n          label=\"Number Field\"\n          value={789}\n          onChange={(value) => console.log('onChange', value)}\n        />\n        <Field.Boolean\n          label=\"Boolean Field\"\n          value={true}\n          onChange={(value) => console.log('onChange', value)}\n        />\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const FeatureFields = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Card stack>\n        <Field.String label=\"Fornavn\" value=\"John\" />\n        <Field.String label=\"Etternavn\" value=\"Smith\" />\n        <Field.NationalIdentityNumber value=\"20058512345\" />\n        <Field.Email value=\"john@smith.email\" />\n        <Field.PhoneNumber value=\"+47 98765432\" />\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const LayoutComponents = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Flex.Stack>\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Card stack>\n          <Form.SubHeading>Name</Form.SubHeading>\n\n          <Field.String label=\"Fornavn\" value=\"John\" />\n          <Field.String label=\"Etternavn\" value=\"Smith\" />\n        </Card>\n\n        <Card stack>\n          <Form.SubHeading>More information</Form.SubHeading>\n\n          <Field.NationalIdentityNumber value=\"20058512345\" />\n          <Field.Email value=\"john@smith.email\" />\n          <Field.PhoneNumber value=\"+47 98765432\" />\n        </Card>\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n\nexport const VisibilityBasedOnData = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Form.Handler\n        data={{\n          firstName: undefined,\n          lastName: 'Smith',\n          advanced: false,\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Flex.Stack>\n          <Form.MainHeading>Profile</Form.MainHeading>\n\n          <Card stack>\n            <Form.SubHeading>Name</Form.SubHeading>\n\n            <Field.String path=\"/firstName\" label=\"Fornavn\" />\n            <Field.String path=\"/lastName\" label=\"Etternavn\" />\n          </Card>\n        </Flex.Stack>\n        <Field.Boolean\n          path=\"/advanced\"\n          variant=\"checkbox-button\"\n          label=\"More fields\"\n        />\n        <Form.Visibility pathTrue=\"/advanced\">\n          <Flex.Stack>\n            <Card stack>\n              <Form.SubHeading>More information</Form.SubHeading>\n\n              <Field.NationalIdentityNumber value=\"20058512345\" />\n              <Field.Email value=\"john@smith.email\" />\n              <Field.PhoneNumber value=\"+47 98765432\" />\n            </Card>\n          </Flex.Stack>\n        </Form.Visibility>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const UsingFormHandler = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Smith',\n          ssn: '20058512345',\n          email: 'john@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Card stack>\n          <Field.String path=\"/firstName\" label=\"Fornavn\" />\n          <Field.String path=\"/lastName\" label=\"Etternavn\" />\n          <Field.NationalIdentityNumber path=\"/ssn\" />\n          <Field.Email path=\"/email\" />\n          <Field.PhoneNumber path=\"/phone\" />\n\n          <Form.ButtonRow>\n            <Form.SubmitButton />\n          </Form.ButtonRow>\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Validation = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Form.Handler\n        data={{\n          firstName: undefined,\n          lastName: 'Smith',\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Card stack>\n          <Field.String path=\"/firstName\" label=\"Fornavn\" required />\n          <Field.String path=\"/lastName\" label=\"Etternavn\" required />\n          <Field.NationalIdentityNumber path=\"/ssn\" validateInitially />\n          <Field.Email path=\"/email\" validateInitially />\n          <Field.PhoneNumber path=\"/phone\" validateInitially />\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithWizard = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Form.Handler\n        data={{\n          firstName: undefined,\n          lastName: 'Smith',\n          advanced: false,\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Wizard.Container mode=\"loose\">\n          <Wizard.Step title=\"Name\">\n            <Form.MainHeading>Profile</Form.MainHeading>\n\n            <Card stack>\n              <Form.SubHeading>Name</Form.SubHeading>\n\n              <Field.String path=\"/firstName\" label=\"Fornavn\" required />\n              <Field.String path=\"/lastName\" label=\"Etternavn\" required />\n            </Card>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step title=\"More information\">\n            <Form.MainHeading>Profile</Form.MainHeading>\n\n            <Card stack>\n              <Form.SubHeading>More information</Form.SubHeading>\n\n              <Field.NationalIdentityNumber path=\"/ssn\" />\n              <Field.Email path=\"/email\" />\n              <Field.PhoneNumber path=\"/phone\" />\n            </Card>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step title=\"Summary\">\n            <Form.MainHeading>Profile</Form.MainHeading>\n\n            <Card stack>\n              <Flex.Container>\n                <Value.String path=\"/firstName\" label=\"Fornavn\" />\n                <Value.String path=\"/lastName\" label=\"Etternavn\" />\n              </Flex.Container>\n\n              <Value.NationalIdentityNumber path=\"/ssn\" />\n              <Value.Email path=\"/email\" />\n              <Value.PhoneNumber path=\"/phone\" />\n            </Card>\n\n            <Form.ButtonRow>\n              <Wizard.Buttons />\n              <Form.SubmitButton />\n            </Form.ButtonRow>\n          </Wizard.Step>\n        </Wizard.Container>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Transformers = () => {\n  return (\n    <ComponentBox hideCode>\n      {() => {\n        const MyForm = () => {\n          const transformToUpper = (value) => {\n            return value?.toUpperCase()\n          }\n          const transformToLower = (value) => {\n            return value?.toLowerCase()\n          }\n\n          return (\n            <Form.Handler onChange={console.log}>\n              <Card stack>\n                <Field.String\n                  width=\"medium\"\n                  label=\"Input value\"\n                  placeholder=\"Type letters\"\n                  path=\"/myField\"\n                  transformIn={transformToUpper}\n                  transformOut={transformToLower}\n                />\n\n                <Value.String label=\"Output value\" path=\"/myField\" />\n              </Card>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n","import React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport ListSummaryFromEdges from '../../../../../shared/parts/ListSummaryFromEdges'\n\nexport default function ListBasisAPIs(props) {\n  const {\n    allMdx: { edges },\n  } = useStaticQuery(graphql`\n    {\n      allMdx(\n        filter: {\n          frontmatter: {\n            title: { ne: null }\n            draft: { ne: true }\n            componentType: { in: \"basis-api\" }\n          }\n          internal: {\n            contentFilePath: { glob: \"**/uilib/extensions/forms/**/*\" }\n          }\n        }\n        sort: [{ frontmatter: { title: ASC } }]\n      ) {\n        edges {\n          node {\n            fields {\n              slug\n            }\n            frontmatter {\n              title\n              description\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  return <ListSummaryFromEdges edges={edges} {...props} />\n}\n","import React from 'react'\nimport { Ul, Li } from '@dnb/eufemia/src'\nimport AutoLinkHeader from '../tags/AutoLinkHeader'\nimport Anchor from '../tags/Anchor'\nimport {\n  HeadingSize,\n  resetLevels,\n} from '@dnb/eufemia/src/components/Heading'\nimport ReactMarkdown from 'react-markdown'\nimport { basicComponents } from '../../shared/tags'\nimport { SpacingProps } from '@dnb/eufemia/src/shared/types'\n\nimport type {\n  HeadingLevel,\n  InternalHeadingLevel,\n} from '@dnb/eufemia/src/components/Heading'\n\ntype ListEdge = {\n  node: {\n    frontmatter: {\n      title: string\n      description?: string\n      order?: number\n    }\n    fields: {\n      slug: string\n    }\n  }\n}\nexport type ListEdges = Array<ListEdge>\ntype ListSummaryFromEdgesProps = {\n  edges: ListEdges\n  level?: HeadingLevel\n  size?: HeadingSize\n  description?: string\n  returnListItems?: boolean\n} & SpacingProps\n\nexport default function ListSummaryFromEdges({\n  edges,\n  level = undefined,\n  size = undefined,\n  description: description = null,\n  returnListItems = false,\n  ...props\n}: ListSummaryFromEdgesProps) {\n  const Wrapper = returnListItems ? Ul : React.Fragment\n\n  resetLevels((level || 2) as InternalHeadingLevel)\n\n  const jsx = edges.map(\n    (\n      {\n        node: {\n          frontmatter: { title, description: fmDescription },\n          fields: { slug },\n        },\n      },\n      i,\n    ) => {\n      return (\n        <Wrapper key={i}>\n          <Title />\n        </Wrapper>\n      )\n\n      function Title() {\n        if (returnListItems) {\n          return (\n            <Li>\n              <Anchor href={'/' + slug}>{title}</Anchor>\n              <br />\n            </Li>\n          )\n        }\n\n        return (\n          <>\n            <AutoLinkHeader\n              level={level || 2}\n              size={size}\n              useSlug={'/' + slug}\n              title={title}\n              {...props}\n            >\n              <Anchor href={'/' + slug}>{title}</Anchor>\n            </AutoLinkHeader>\n            {(description !== null ? description : fmDescription) && (\n              <ReactMarkdown components={basicComponents}>\n                {description !== null ? description : fmDescription}\n              </ReactMarkdown>\n            )}\n          </>\n        )\n      }\n    },\n  )\n\n  return <>{jsx}</>\n}\n","import React, { useCallback, useContext } from 'react'\nimport pointer from 'json-pointer'\nimport type { ComponentProps } from '../../types'\nimport Context, { ContextState } from '../Context'\n\nexport type Props = ComponentProps & {\n  /** JSON Pointer for where in the source dataset to point at in sub components */\n  path?: string\n  iterate?: boolean\n  children?: React.ReactNode\n}\n\nfunction At(props: Props) {\n  const { path = '/', iterate, children } = props\n  const dataContext = useContext(Context)\n  const {\n    data: contextData,\n    handlePathChange: handlePathChangeDataContext,\n  } = dataContext\n\n  const data =\n    contextData && pointer.has(contextData, path)\n      ? pointer.get(contextData, path)\n      : undefined\n\n  const handlePathChange: ContextState['handlePathChange'] = useCallback(\n    (changePath, value) => {\n      handlePathChangeDataContext(`${path}${changePath}`, value)\n    },\n    [handlePathChangeDataContext, path]\n  )\n\n  if (iterate) {\n    if (!Array.isArray(data)) {\n      return null\n    }\n    return (\n      <>\n        {data.map((element, i) => {\n          const handlePathChange = (\n            handlePathChangeDataContext\n              ? (changePath, value) => {\n                  handlePathChangeDataContext(\n                    `${path}/${i}${changePath}`,\n                    value\n                  )\n                }\n              : undefined\n          ) as ContextState['handlePathChange']\n\n          return (\n            <Context.Provider\n              key={`element${i}`}\n              value={{\n                ...dataContext,\n                data: element,\n                handlePathChange,\n              }}\n            >\n              {children}\n            </Context.Provider>\n          )\n        })}\n      </>\n    )\n  }\n\n  return (\n    <Context.Provider\n      value={{\n        ...dataContext,\n        data,\n        handlePathChange,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  )\n}\n\nAt._supportsSpacingProps = true\nexport default At\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","a","h2","code","pre","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","className","CreateBasicValueComponent","CreateBasicFieldComponent","CreateComposedFieldComponent","wrapper","MDXLayout","ComponentBox","scope","ValueBlock","hideCode","noInline","useFieldProps","GettingStarted","DataContext","BaseFieldComponents","Value","FeatureFields","LayoutComponents","VisibilityBasedOnData","UsingFormHandler","Validation","WithWizard","Transformers","ListBasisAPIs","allMdx","edges","useStaticQuery","ListSummaryFromEdges","_ref","level","size","description","returnListItems","Wrapper","Ul","React","resetLevels","jsx","map","_ref2","i","node","frontmatter","title","fmDescription","fields","slug","Title","Li","Anchor","AutoLinkHeader","useSlug","ReactMarkdown","basicComponents","At","path","iterate","dataContext","useContext","Context","data","contextData","handlePathChange","handlePathChangeDataContext","pointer","undefined","useCallback","changePath","value","Array","isArray","element","Provider","_supportsSpacingProps"],"sourceRoot":""}