"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[48338,4117],{85753:function(n,e,a){a.r(e);var t=a(52322),o=a(45392),i=a(69403),r=a(94929);function l(n){const e=Object.assign({h1:"h1",p:"p",a:"a",pre:"pre",code:"code",h2:"h2",h3:"h3"},(0,o.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{children:"Create your own component"}),"\n",(0,t.jsx)(e.p,{children:"Eufemia Forms contains helper fields and tools so you can declaratively create interactive form components that flawlessly integrates between existing data and your custom form components."}),"\n",(0,t.jsxs)(e.p,{children:["By using the building blocks for field components, you save development time, and at the same time ensure that local, custom components work similarly, and fit into the setup with ",(0,t.jsx)(e.a,{href:"/uilib/extensions/forms/base-fields/",children:"the standardized field components"}),"."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:"import {\n  FieldBlock,\n  ValueBlock,\n  useDataValue,\n} from '@dnb/eufemia/extensions/forms'\n"})}),"\n",(0,t.jsx)(i.default,{}),"\n",(0,t.jsx)(e.h2,{children:"FieldBlock and useDataValue"}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"FieldBlock"})," component and the ",(0,t.jsx)(e.code,{children:"useDataValue"})," hook are the basis for all field components in Eufemia Forms."]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"FieldBlock"})," provides a standardized way to display labels, error messages and other surrounding elements in a consistent manner."]}),"\n",(0,t.jsxs)(e.p,{children:["While ",(0,t.jsx)(e.code,{children:"useDataValue"})," provides a standardized way to handle data flow, validation and error messages in a consistent manner."]}),"\n",(0,t.jsx)(r.CreateBasicFieldComponent,{}),"\n",(0,t.jsx)(e.h3,{children:"More details"}),"\n",(0,t.jsxs)(e.p,{children:["This example shows a custom component. The ",(0,t.jsx)(e.code,{children:"useDataValue"})," hook receives the props and adds extra properties to standardize field behavior. These includes ",(0,t.jsx)(e.code,{children:"handleFocus"}),", ",(0,t.jsx)(e.code,{children:"handleChange"}),", and ",(0,t.jsx)(e.code,{children:"handleBlur"}),' functions. Even if the field components has external callbacks like "onChange", these won\'t be altered. The "handle" variants simplifies your code.']}),"\n",(0,t.jsx)(e.h3,{children:"The example explained"}),"\n",(0,t.jsxs)(e.p,{children:["Using these two form helpers in your field component triggers several automatic processes. These include timely validation checks, syncing value changes with the ",(0,t.jsx)(e.a,{href:"/uilib/extensions/forms/extended-features/DataContext/",children:"DataContext"}),", coordinating error messages across multiple fields, and preventing premature error displays while the user is editing the field."]}),"\n",(0,t.jsxs)(e.p,{children:["Keep in mind, you can customize the behavior of ",(0,t.jsx)(e.a,{href:"/uilib/extensions/forms/create-component/useDataValue",children:"useDataValue"})," and other helper functions to make the component work exactly as you want."]}),"\n",(0,t.jsx)(e.h3,{children:"Your own validation"}),"\n",(0,t.jsxs)(e.p,{children:["If you need custom validation that can't use the built-in JSON Schema or a derivative validator (like in the example above), you can create your own logic. Then, pass the result as an ",(0,t.jsx)(e.code,{children:"error"})," prop to ",(0,t.jsx)(e.code,{children:"FieldBlock"}),". All direct props override standard handling, giving you full control over your component."]}),"\n",(0,t.jsx)(e.h3,{children:"Customized even further"}),"\n",(0,t.jsxs)(e.p,{children:["If you need something that looks even more different than the usual fields, you can drop ",(0,t.jsx)(e.code,{children:"FieldBlock"})," and display surrounding elements in other ways – but still get all the help of a data flow logic, such as ",(0,t.jsx)(e.code,{children:"useDataValue"})," offers."]}),"\n",(0,t.jsx)(e.p,{children:"Here follows an example that retrieves data from a surrounding DataContext, and creates a composite field based on other components from Eufemia:"}),"\n",(0,t.jsx)(r.CreateComposedFieldComponent,{}),"\n",(0,t.jsx)(e.h2,{children:"Layout"}),"\n",(0,t.jsxs)(e.p,{children:["When building your custom form components, preferably use the ",(0,t.jsx)(e.a,{href:"/uilib/layout",children:"Layout"})," component."]}),"\n",(0,t.jsx)(e.h3,{children:"Width definitions"}),"\n",(0,t.jsxs)(e.p,{children:["These are the official sizes you can use when ",(0,t.jsx)(e.a,{href:"/uilib/extensions/forms/create-component/",children:"creating your own form fields"}),"."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-css",children:":root {\n  --forms-field-width--small: 5rem;\n  --forms-field-width--medium: 11rem;\n  --forms-field-width--large: 21rem;\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["You can also use a ",(0,t.jsx)(e.a,{href:"/uilib/extensions/forms/create-component/FieldBlock/",children:"FieldBlock"})," and provide a ",(0,t.jsx)(e.code,{children:"width"})," prop with a value of either ",(0,t.jsx)(e.code,{children:"small"}),", ",(0,t.jsx)(e.code,{children:"medium"})," or ",(0,t.jsx)(e.code,{children:"large"})," and use it as a sized wrapper."]})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(l,n)})):l(n)}},94929:function(n,e,a){a.r(e),a.d(e,{BaseFieldComponents:function(){return h},CreateBasicFieldComponent:function(){return d},CreateComposedFieldComponent:function(){return c},FeatureFields:function(){return m},GettingStarted:function(){return u},LayoutComponents:function(){return p},UsingFormHandler:function(){return f},Validation:function(){return F},VisibilityBasedOnData:function(){return g},WithSteps:function(){return v}});a(2784);var t=a(44464),o=a(35533),i=a(16620),r=a(64129),l=a(85221),s=a(52322);const d=()=>(0,s.jsx)(t.Z,{scope:{useDataValue:o.Z},hideCode:!0,noInline:!0,children:"const MyCustomField = (props) => {\n  const fromInput = React.useCallback(({ value }) => value, [])\n  const preparedProps = {\n    ...props,\n    fromInput,\n    validator: (value) => {\n      return value === 'secret'\n        ? new Error('Do not reveal the secret!')\n        : undefined\n    },\n  }\n  const {\n    id,\n    info,\n    warning,\n    error,\n    value,\n    handleChange,\n    handleFocus,\n    handleBlur,\n  } = useDataValue(preparedProps)\n  return (\n    <FieldBlock\n      forId={id}\n      label=\"What is the secret of the custom field?\"\n      info={info}\n      warning={warning}\n      error={error}\n    >\n      <Input\n        id={id}\n        value={value}\n        on_change={handleChange}\n        on_focus={handleFocus}\n        on_blur={handleBlur}\n      />\n    </FieldBlock>\n  )\n}\nrender(\n  <MyCustomField\n    value=\"Nothing to see here\"\n    onChange={(value) => console.log('onChange', value)}\n  />,\n)\n"}),u=()=>(0,s.jsx)(t.Z,{hideCode:!0,noInline:!0,children:'const existingData = {\n  companyName: \'DNB\',\n  companyOrganizationNumber: \'123456789\',\n  postalAddressSelect: \'companyAddress\',\n}\nfunction Component() {\n  const { data } = Form.useData(\'company-form\')\n  console.log(\'State:\', data)\n  return (\n    <Form.Handler\n      id="company-form"\n      data={existingData}\n      onChange={console.log}\n      onSubmit={console.log}\n    >\n      <Flex.Stack>\n        <Form.MainHeading>Bedrift</Form.MainHeading>\n        <Card spacing="medium">\n          <Field.String\n            path="/companyName"\n            label="Bedriftens navn"\n            required\n          />\n          <Field.OrganizationNumber\n            path="/companyOrganizationNumber"\n            required\n          />\n          <Field.Selection\n            path="/postalAddressSelect"\n            label="Ønsket sted for tilsendt post"\n            variant="radio"\n          >\n            <Field.Option\n              value="companyAddress"\n              title="Samme som forretningsadresse"\n            />\n            <Field.Option value="other" title="Annet" />\n          </Field.Selection>\n        </Card>\n        <Form.ButtonRow>\n          <Form.SubmitButton />\n        </Form.ButtonRow>\n      </Flex.Stack>\n    </Form.Handler>\n  )\n}\nrender(<Component />)\n'}),c=()=>(0,s.jsx)(t.Z,{scope:{DataContext:i,useDataValue:o.Z},hideCode:!0,noInline:!0,children:'const MyComposedField = (props) => {\n  const birthYear = useDataValue({\n    path: \'/birthYear\',\n  })\n  const handleBirthYearChange = React.useCallback(\n    (sliderData) => {\n      birthYear.handleChange(sliderData.value)\n    },\n    [birthYear],\n  )\n  return (\n    <FieldBlock label={props.label ?? \'Name and age\'}>\n      <Flex.Horizontal>\n        <Field.String\n          path="/firstName"\n          label="First name"\n          width="medium"\n          minLength={2}\n        />\n        <Field.String\n          path="/lastName"\n          label="Last name"\n          width="medium"\n          required\n        />\n        <FieldBlock width="large">\n          <Slider\n            min={1900}\n            max={new Date().getFullYear()}\n            step={1}\n            label="Birth year"\n            label_direction="vertical"\n            value={parseFloat(String(birthYear.value))}\n            on_change={handleBirthYearChange}\n            on_drag_start={birthYear.handleFocus}\n            on_drag_end={birthYear.handleBlur}\n            status={birthYear.error?.message}\n            tooltip\n          />\n        </FieldBlock>\n      </Flex.Horizontal>\n    </FieldBlock>\n  )\n}\nconst data = {\n  firstName: \'John\',\n  birthYear: 2000,\n}\nrender(\n  <DataContext.Provider\n    data={data}\n    onChange={(data) => console.log(\'onChange\', data)}\n  >\n    <MyComposedField label="My custom label" />\n  </DataContext.Provider>,\n)\n'}),h=()=>(0,s.jsx)(t.Z,{scope:{StepsLayout:r.Z,Value:l},children:'<Card stack>\n  <Field.String\n    label="Text field"\n    value="Lorem Ipsum"\n    onChange={(value) => console.log(\'onChange\', value)}\n  />\n  <Field.Number\n    label="Number Field"\n    value={789}\n    onChange={(value) => console.log(\'onChange\', value)}\n  />\n  <Field.Boolean\n    label="Boolean Field"\n    value={true}\n    onChange={(value) => console.log(\'onChange\', value)}\n  />\n</Card>\n'}),m=()=>(0,s.jsx)(t.Z,{scope:{StepsLayout:r.Z,Value:l},children:'<Card stack>\n  <Field.String label="Fornavn" value="John" />\n  <Field.String label="Etternavn" value="Smith" />\n  <Field.NationalIdentityNumber value="20058512345" />\n  <Field.Email value="john@smith.email" />\n  <Field.PhoneNumber value="+47 98765432" />\n</Card>\n'}),p=()=>(0,s.jsx)(t.Z,{scope:{StepsLayout:r.Z,Value:l},children:'<Flex.Stack>\n  <Form.MainHeading>Profile</Form.MainHeading>\n\n  <Card stack>\n    <Form.SubHeading>Name</Form.SubHeading>\n\n    <Field.String label="Fornavn" value="John" />\n    <Field.String label="Etternavn" value="Smith" />\n  </Card>\n\n  <Card stack>\n    <Form.SubHeading>More information</Form.SubHeading>\n\n    <Field.NationalIdentityNumber value="20058512345" />\n    <Field.Email value="john@smith.email" />\n    <Field.PhoneNumber value="+47 98765432" />\n  </Card>\n</Flex.Stack>\n'}),g=()=>(0,s.jsx)(t.Z,{scope:{StepsLayout:r.Z,Value:l},children:'<Form.Handler\n  data={{\n    firstName: undefined,\n    lastName: \'Smith\',\n    advanced: false,\n    ssn: \'123\',\n    email: \'@smith.email\',\n    phone: \'+47 98765432\',\n  }}\n  onChange={(data) => console.log(\'onChange\', data)}\n  onPathChange={(path, value) => console.log(\'onPathChange\', path, value)}\n  onSubmit={(data) => console.log(\'onSubmit\', data)}\n>\n  <Flex.Stack>\n    <Form.MainHeading>Profile</Form.MainHeading>\n\n    <Card stack>\n      <Form.SubHeading>Name</Form.SubHeading>\n\n      <Field.String path="/firstName" label="Fornavn" />\n      <Field.String path="/lastName" label="Etternavn" />\n    </Card>\n  </Flex.Stack>\n  <Field.Boolean\n    path="/advanced"\n    variant="checkbox-button"\n    label="More fields"\n  />\n  <Form.Visibility pathTrue="/advanced">\n    <Flex.Stack>\n      <Card stack>\n        <Form.SubHeading>More information</Form.SubHeading>\n\n        <Field.NationalIdentityNumber value="20058512345" />\n        <Field.Email value="john@smith.email" />\n        <Field.PhoneNumber value="+47 98765432" />\n      </Card>\n    </Flex.Stack>\n  </Form.Visibility>\n</Form.Handler>\n'}),f=()=>(0,s.jsx)(t.Z,{scope:{StepsLayout:r.Z,Value:l},children:"<Form.Handler\n  data={{\n    firstName: 'John',\n    lastName: 'Smith',\n    ssn: '20058512345',\n    email: 'john@smith.email',\n    phone: '+47 98765432',\n  }}\n  onChange={(data) => console.log('onChange', data)}\n  onPathChange={(path, value) => console.log('onPathChange', path, value)}\n  onSubmit={(data) => console.log('onSubmit', data)}\n>\n  <Form.MainHeading>Profile</Form.MainHeading>\n\n  <Card stack>\n    <Field.String path=\"/firstName\" label=\"Fornavn\" />\n    <Field.String path=\"/lastName\" label=\"Etternavn\" />\n    <Field.NationalIdentityNumber path=\"/ssn\" />\n    <Field.Email path=\"/email\" />\n    <Field.PhoneNumber path=\"/phone\" />\n\n    <Form.ButtonRow>\n      <Form.SubmitButton />\n    </Form.ButtonRow>\n  </Card>\n</Form.Handler>\n"}),F=()=>(0,s.jsx)(t.Z,{scope:{StepsLayout:r.Z,Value:l},children:"<Form.Handler\n  data={{\n    firstName: undefined,\n    lastName: 'Smith',\n    ssn: '123',\n    email: '@smith.email',\n    phone: '+47 98765432',\n  }}\n  onChange={(data) => console.log('onChange', data)}\n  onPathChange={(path, value) => console.log('onPathChange', path, value)}\n  onSubmit={(data) => console.log('onSubmit', data)}\n>\n  <Form.MainHeading>Profile</Form.MainHeading>\n\n  <Card stack>\n    <Field.String path=\"/firstName\" label=\"Fornavn\" required />\n    <Field.String path=\"/lastName\" label=\"Etternavn\" required />\n    <Field.NationalIdentityNumber path=\"/ssn\" validateInitially />\n    <Field.Email path=\"/email\" validateInitially />\n    <Field.PhoneNumber path=\"/phone\" validateInitially />\n  </Card>\n</Form.Handler>\n"}),v=()=>(0,s.jsx)(t.Z,{scope:{StepsLayout:r.Z,Value:l},children:'<Form.Handler\n  data={{\n    firstName: undefined,\n    lastName: \'Smith\',\n    advanced: false,\n    ssn: \'123\',\n    email: \'@smith.email\',\n    phone: \'+47 98765432\',\n  }}\n  onChange={(data) => console.log(\'onChange\', data)}\n  onPathChange={(path, value) => console.log(\'onPathChange\', path, value)}\n  onSubmit={(data) => console.log(\'onSubmit\', data)}\n>\n  <StepsLayout mode="loose">\n    <StepsLayout.Step title="Name">\n      <Form.MainHeading>Profile</Form.MainHeading>\n\n      <Card stack>\n        <Form.SubHeading>Name</Form.SubHeading>\n\n        <Field.String path="/firstName" label="Fornavn" required />\n        <Field.String path="/lastName" label="Etternavn" required />\n      </Card>\n\n      <Form.ButtonRow>\n        <StepsLayout.NextButton />\n      </Form.ButtonRow>\n    </StepsLayout.Step>\n\n    <StepsLayout.Step title="More information">\n      <Form.MainHeading>Profile</Form.MainHeading>\n\n      <Card stack>\n        <Form.SubHeading>More information</Form.SubHeading>\n\n        <Field.NationalIdentityNumber path="/ssn" />\n        <Field.Email path="/email" />\n        <Field.PhoneNumber path="/phone" />\n      </Card>\n\n      <Form.ButtonRow>\n        <StepsLayout.PreviousButton />\n        <StepsLayout.NextButton />\n      </Form.ButtonRow>\n    </StepsLayout.Step>\n\n    <StepsLayout.Step title="Summary">\n      <Form.MainHeading>Profile</Form.MainHeading>\n\n      <Card stack>\n        <Flex.Container>\n          <Value.String path="/firstName" label="Fornavn" />\n          <Value.String path="/lastName" label="Etternavn" />\n        </Flex.Container>\n\n        <Value.NationalIdentityNumber path="/ssn" />\n        <Value.Email path="/email" />\n        <Value.PhoneNumber path="/phone" />\n      </Card>\n\n      <Form.ButtonRow>\n        <StepsLayout.PreviousButton />\n        <Form.SubmitButton />\n      </Form.ButtonRow>\n    </StepsLayout.Step>\n  </StepsLayout>\n</Form.Handler>\n'})},69403:function(n,e,a){a.r(e),a.d(e,{default:function(){return r}});var t=a(68270),o=a(75440),i=a(52322);function r(){const{allMdx:{edges:n}}=(0,t.useStaticQuery)("1487441482");return(0,i.jsx)(o.Z,{edges:n})}},16620:function(n,e,a){a.r(e),a.d(e,{At:function(){return u},Context:function(){return t.Z},Provider:function(){return o.Z},defaultContextState:function(){return t.E}});var t=a(21068),o=a(80370),i=a(2784),r=a(95955),l=a.n(r),s=a(52322);function d(n){const{path:e="/",iterate:a,children:o}=n,r=(0,i.useContext)(t.Z),{data:d,handlePathChange:u}=r,c=d&&l().has(d,e)?l().get(d,e):void 0,h=(0,i.useMemo)((()=>u?(n,a)=>{u(`${e}${n}`,a)}:void 0),[u,e]);return a?Array.isArray(c)?(0,s.jsx)(s.Fragment,{children:c.map(((n,a)=>{const i=u?(n,t)=>{u(`${e}/${a}${n}`,t)}:void 0;return(0,s.jsx)(t.Z.Provider,{value:{...r,data:n,handlePathChange:i},children:o},`element${a}`)}))}):null:(0,s.jsx)(t.Z.Provider,{value:{...r,data:c,handlePathChange:h},children:o})}d._supportsSpacingProps=!0;var u=d},59626:function(n,e,a){const t=a(2784).createContext(void 0);e.Z=t},64129:function(n,e,a){a.d(e,{Z:function(){return w}});var t=a(2784),o=a(72779),i=a.n(o),r=a(80215),l=a(76603),s=a(93573),d=a(21068),u=a(30392),c=a(59626),h=a(52322);function m(n){const{className:e,index:a,children:o}=n,r=(0,t.useContext)(c.Z);return(null==r?void 0:r.activeIndex)!==a?null:(0,h.jsx)(u.Z,{className:i()("dnb-forms-step",e),direction:"vertical",...(0,u.W)(n),children:o})}m._supportsSpacingProps=!0;var p=m,g=a(96844),f=a(28952),F=a(65927);function v(n){const e=(0,t.useContext)(f.Z),{className:a,variant:o="primary",icon_position:r="right",icon:l="chevron_right",children:s=(null==e?void 0:e.translation.Forms.stepNext)}=n,d=(0,t.useContext)(c.Z);return(0,h.jsx)(F.Z,{children:(0,h.jsx)(g.Z,{...n,className:i()("dnb-forms-next-button",a),onClick:null==d?void 0:d.handleNext,variant:o,icon_position:r,icon:l,children:s})})}v._supportsSpacingProps=!0;var x=v;function b(n){const e=(0,t.useContext)(f.Z),{className:a,variant:o="tertiary",icon_position:r="left",icon:l="chevron_left",children:s=(null==e?void 0:e.translation.Forms.stepPrevious)}=n,d=(0,t.useContext)(c.Z);return(0,h.jsx)(F.Z,{children:(0,h.jsx)(g.Z,{...n,className:i()("dnb-forms-previous-button",a),onClick:null==d?void 0:d.handlePrevious,variant:o,icon_position:r,icon:l,children:s})})}b._supportsSpacingProps=!0;var C=b;function S(n){const{className:e}=n;return(0,h.jsxs)(F.Z,{className:i()("dnb-forms-buttons",e),...n,children:[(0,h.jsx)(C,{}),(0,h.jsx)(x,{})]})}S._supportsSpacingProps=!0;var y=S,j=a(80370),N=a(70242);function k(n){const{className:e,id:a,mode:o="strict",scrollTopOnStepChange:u,initialActiveIndex:m=0,onStepChange:g,children:f,noAnimation:F=!0,variant:v="sidebar",sidebarId:x,...b}=n,C=(0,t.useContext)(d.Z),{hasContext:S,hasErrors:y,setShowAllErrors:w,scrollToTop:B}=C,{0:Z,1:P}=(0,t.useState)(m),H=(0,N.Z)(a),_=(0,t.useCallback)((()=>{P((n=>(null==g||g(n-1),n-1))),u&&B()}),[u,g,B]),V=(0,t.useCallback)((()=>{y()?w(!0):(P((n=>(null==g||g(n+1),n+1))),u&&B())}),[y,u,g,B,w]),M=t.Children.map(f,(n=>{var e;if(!t.isValidElement(n)||n.type!==p)throw new Error("Only Step can be children of StepsLayout");return null!==(e=n.props.title)&&void 0!==e?e:"Title missing"})),D=(0,t.useCallback)((n=>{let{current_step:e}=n;P(e)}),[]);return S?(0,h.jsx)(c.Z.Provider,{value:{activeIndex:Z,handlePrevious:_,handleNext:V},children:(0,h.jsxs)(r.Z,{className:i()("dnb-forms-steps-layout","drawer"===v&&"dnb-forms-steps-layout--drawer",e),...b,children:[(0,h.jsxs)("aside",{className:"dnb-forms-steps-layout__sidebar",children:[(0,h.jsx)(l.Z.Sidebar,{sidebar_id:H}),(0,h.jsx)(l.Z,{bottom:!0,current_step:Z,data:M,mode:o,no_animation:F,on_change:D,sidebar_id:"drawer"!==v||x?x||H:""})]}),(0,h.jsx)("div",{className:"dnb-forms-steps-layout__contents",children:t.Children.map(f,((n,e)=>t.isValidElement(n)&&n.type===p?t.cloneElement(n,{index:e}):n))})]})}):((0,s.ZK)("You may wrap StepsLayout in Form.Handler"),(0,h.jsx)(j.Z,{children:(0,h.jsx)(k,{...n,id:H})}))}k._supportsSpacingProps=!0,k.Step=p,k.NextButton=x,k.PreviousButton=C,k.Buttons=y;var w=k}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-create-component-mdx-611e4bf6f86d42a26949.js.map