"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[48338,4117],{85753:function(e,n,o){o.r(n);var t=o(52322),s=o(45392),a=o(69403),i=o(94929);function r(e){const n=Object.assign({h1:"h1",p:"p",a:"a",pre:"pre",code:"code",h2:"h2",h3:"h3",hr:"hr"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{children:"Create your own component"}),"\n",(0,t.jsx)(n.p,{children:"Eufemia Forms contains helper fields and tools so you can declaratively create interactive form components that flawlessly integrates between existing data and your custom form components."}),"\n",(0,t.jsxs)(n.p,{children:["By using the building blocks for field components, you save development time, and at the same time ensure that local, custom components work similarly, and fit into the setup with ",(0,t.jsx)(n.a,{href:"/uilib/extensions/forms/base-fields/",children:"the standardized field components"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import {\n  DataContext,\n  Field,\n  FieldBlock,\n  Iterate,\n  Value,\n  ValueBlock,\n  Visibility,\n  useDataValue,\n} from '@dnb/eufemia/extensions/forms'\n"})}),"\n",(0,t.jsx)(n.h2,{children:"More details"}),"\n",(0,t.jsxs)(n.p,{children:["Here is an example of a custom component. Notice how the props received by your field component are passed through the ",(0,t.jsx)(n.code,{children:"useDataValue"})," hook. This hook does not change the API of the props, so the props returned by the hook share the same typescript type with which it was called. However, it adds a few additional properties to simplify the standardization of field behavior. This in the form of the handler functions ",(0,t.jsx)(n.code,{children:"handleFocus"}),", ",(0,t.jsx)(n.code,{children:"handleChange"})," and ",(0,t.jsx)(n.code,{children:"handleBlur"}),'. Even if field components externally have these callback functions named with "on" (eg "onChange"), these will remain untouched, while the "handle" variants add handling that saves you a lot of extra work.']}),"\n",(0,t.jsx)(i.CreateBasicFieldComponent,{}),"\n",(0,t.jsx)(n.h3,{children:"The example explained"}),"\n",(0,t.jsxs)(n.p,{children:["In the example above, you see how you can create your own user input functionality in a standardized context using ",(0,t.jsx)(n.code,{children:"FieldBlock"}),". This allows you to display labels, error messages and other surrounding elements in a consistent manner with the ready-made fields found in Eufemia Forms."]}),"\n",(0,t.jsxs)(n.p,{children:["When you call these three functions as used above from your own implementation of the user experience for the field component, a lot will happen in the background. All available validation functions will be called at the right time, changes in value will be synchronized with any surrounding ",(0,t.jsx)(n.code,{children:"DataContext"}),", co-operation between several fields that should display error messages collectively instead of individually, and not least it ensures that error messages are not displayed on unnecessary times such as while the user is making changes to the field."]}),"\n",(0,t.jsxs)(n.p,{children:["Remember that everything that happens by using ",(0,t.jsx)(n.code,{children:"useDataValue"})," and the rest of the available helper functionality, you can override the behavior individually to make the component work exactly as you want."]}),"\n",(0,t.jsx)(n.h3,{children:"Your own validation"}),"\n",(0,t.jsxs)(n.p,{children:["If – for example; you need to carry out your own custom validation and cannot use the built-in validation with a JSON Schema or by sending in a derivative validator (as is done in the example above), you can write your own logic for it, and send the result in as props to ",(0,t.jsx)(n.code,{children:"FieldBlock"})," in the form of ",(0,t.jsx)(n.code,{children:"error"}),". All direct props override standard handling, so you have full control over your component."]}),"\n",(0,t.jsx)(n.h3,{children:"Customized even further"}),"\n",(0,t.jsxs)(n.p,{children:["If you need something that looks even more different than the usual fields, you can drop ",(0,t.jsx)(n.code,{children:"FieldBlock"})," and display surrounding elements in other ways – but still get all the help of a data flow logic, such as ",(0,t.jsx)(n.code,{children:"useDataValue"})," offers."]}),"\n",(0,t.jsx)(n.p,{children:"Here follows an example that retrieves data from a surrounding DataContext, and creates a composite field based on other components from Eufemia:"}),"\n",(0,t.jsx)(i.CreateComposedFieldComponent,{}),"\n",(0,t.jsx)(n.h2,{children:"Layout"}),"\n",(0,t.jsxs)(n.p,{children:["When building your custom form components, preferably use the ",(0,t.jsx)(n.a,{href:"/uilib/layout",children:"Layout"})," component."]}),"\n",(0,t.jsx)(n.h3,{children:"Width definitions"}),"\n",(0,t.jsxs)(n.p,{children:["These are the official sizes you can use when ",(0,t.jsx)(n.a,{href:"/uilib/extensions/forms/create-component/",children:"creating your own form fields"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:":root {\n  --forms-field-width--small: 5rem;\n  --forms-field-width--medium: 11rem;\n  --forms-field-width--large: 21rem;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can also use a ",(0,t.jsx)(n.a,{href:"/uilib/extensions/forms/create-component/FieldBlock/",children:"FieldBlock"})," and provide a ",(0,t.jsx)(n.code,{children:"width"})," prop with a value of either ",(0,t.jsx)(n.code,{children:"small"}),", ",(0,t.jsx)(n.code,{children:"medium"})," or ",(0,t.jsx)(n.code,{children:"large"})," and use it as a sized wrapper."]}),"\n",(0,t.jsx)(n.h2,{children:"Components"}),"\n",(0,t.jsx)(a.default,{}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{children:"Hooks"}),"\n",(0,t.jsx)(n.h3,{children:"useDataValue"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"useDataValue"})," hook standardize handling of the value flow for a single consumer component representing one data point. It holds error state, hides it while the field is in focus, connects to surrounding ",(0,t.jsx)(n.code,{children:"DataContext"})," (if present) and other things that all field or value components needs to do. By implementing custom field or value components and passing the received props through ",(0,t.jsx)(n.code,{children:"useDataValue"}),", all these features work the same way as other field or value components, and you only need to implement the specific unique features of that component."]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(r,e)})):r(e)}},69403:function(e,n,o){o.r(n),o.d(n,{default:function(){return i}});var t=o(68270),s=o(75440),a=o(52322);function i(){const{allMdx:{edges:e}}=(0,t.useStaticQuery)("1487441482");return(0,a.jsx)(s.Z,{edges:e})}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-create-component-mdx-9153c6873ce057215b6e.js.map