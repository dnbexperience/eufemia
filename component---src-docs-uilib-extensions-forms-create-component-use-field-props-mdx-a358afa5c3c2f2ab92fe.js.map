{"version":3,"file":"component---src-docs-uilib-extensions-forms-create-component-use-field-props-mdx-a358afa5c3c2f2ab92fe.js","mappings":"imSAGA,I,oBCSO,MAAMA,EAAsCA,KACjDC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,MAAA,CACFC,cACA,MAAAC,UAAA,EAAAC,SAAA,ozDA+FaC,EAAsCA,KACjDN,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,MAAA,CACFC,cAAA,KACAI,EACA,GAAAH,UAAA,EAAAC,SAAA,27EAqGaG,EAAgCA,KAC3CR,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,MAAA,CACFC,cAAA,KACAM,IACA,KAAAL,UAAA,EAAAC,SAAA,69DCvNA,SAASK,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,IAAK,MACLC,KAAM,OACNC,GAAI,OACHC,EAAAA,EAAAA,KAAsBT,EAAMU,YAI/B,OAHKC,GAAUC,EAAqB,YAAY,GAC3CD,GAA8CC,EAAqB,gDAAgD,GACnHD,GAA8CC,EAAqB,gDAAgD,IACjHC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBpB,SAAU,EAACL,EAAAA,EAAAA,KAAKY,EAAYG,GAAI,CAC9BV,SAAU,UACR,MAAML,EAAAA,EAAAA,KAAKY,EAAYI,EAAG,CAC5BX,SAAU,oEACR,MAAML,EAAAA,EAAAA,KAAKY,EAAYK,IAAK,CAC9BZ,UAAUL,EAAAA,EAAAA,KAAKY,EAAYM,KAAM,CAC/BQ,UAAW,eACXrB,SAAU,2LAEV,MAAML,EAAAA,EAAAA,KAAKY,EAAYO,GAAI,CAC7Bd,SAAU,uBACR,MAAML,EAAAA,EAAAA,KAAKY,EAAYI,EAAG,CAC5BX,SAAU,iHACR,MAAML,EAAAA,EAAAA,KAAKsB,EAA8C,CAAC,GAAI,MAAMtB,EAAAA,EAAAA,KAAKY,EAAYO,GAAI,CAC3Fd,SAAU,uBACR,MAAML,EAAAA,EAAAA,KAAKsB,EAA8C,CAAC,KAElE,CAOA,MANA,SAAoBX,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOgB,QAASC,GAAaf,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,KAAsBT,EAAMU,YAC3E,OAAOO,GAAY5B,EAAAA,EAAAA,KAAK4B,EAAWf,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DN,UAAUL,EAAAA,EAAAA,KAAKU,EAAmBC,MAC9BD,EAAkBC,EAC1B,EAEA,SAASY,EAAqBM,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,C,+ECtCA,SAASnB,EAAkBC,GACzB,OAAOa,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBpB,SAAU,EAACL,EAAAA,EAAAA,KAAKgC,EAAAA,QAAM,CAAC,GAAI,MAAMhC,EAAAA,EAAAA,KAAKiC,EAAAA,QAAO,CAAC,KAElD,CAOA,UANA,SAAoBtB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOgB,QAASC,GAAaf,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,KAAsBT,EAAMU,YAC3E,OAAOO,GAAY5B,EAAAA,EAAAA,KAAK4B,EAAWf,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DN,UAAUL,EAAAA,EAAAA,KAAKU,EAAmBC,MAC9BD,GACR,C","sources":["webpack://dnb-design-system-portal/../../node_modules/zod/index.js","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/create-component/useFieldProps/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/create-component/useFieldProps/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/create-component/useFieldProps.mdx"],"sourcesContent":["import * as z from \"./v4/classic/external.js\";\nexport * from \"./v4/classic/external.js\";\nexport { z };\nexport default z;\n","import React from 'react'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport {\n  Field,\n  FieldBlock,\n  Form,\n  useFieldProps,\n  Ajv,\n  z,\n} from '@dnb/eufemia/src/extensions/forms'\nimport { Flex, Slider } from '@dnb/eufemia/src'\n\nexport const CustomComponentWithAjvSchemaExample = () => {\n  return (\n    <ComponentBox scope={{ useFieldProps }}>\n      {() => {\n        const MySliderComponent = (props) => {\n          const fromInput = React.useCallback(\n            (event) =>\n              typeof event === 'number' ? event : event?.value || 0,\n            [],\n          )\n\n          const errorMessages = React.useMemo(() => {\n            return {\n              'Field.errorRequired': 'This field is required',\n              ...props.errorMessages,\n            }\n          }, [props.errorMessages])\n\n          // No schema - uses built-in validation from field props\n          const schema = props.schema ?? {\n            type: 'number',\n            minimum: props.minimum,\n            maximum: props.maximum,\n          }\n\n          const preparedProps = {\n            fromInput,\n            schema,\n            ...errorMessages,\n            label: 'Label',\n            ...props,\n          }\n\n          const {\n            id,\n            label,\n            info,\n            warning,\n            error,\n            value,\n            width = 'medium',\n            minimum = 0,\n            maximum = 100,\n            step = 1,\n            handleChange,\n            handleFocus,\n            handleBlur,\n          } = useFieldProps(preparedProps)\n\n          const steps = { minimum, maximum, step }\n\n          return (\n            <FieldBlock\n              forId={id}\n              label={label}\n              info={info}\n              warning={warning}\n              error={error}\n              width={width}\n            >\n              <Flex.Stack>\n                <Field.Number\n                  id={id}\n                  value={value}\n                  showStepControls\n                  onChange={handleChange}\n                  onFocus={handleFocus}\n                  onBlur={handleBlur}\n                  {...steps}\n                />\n                <Slider\n                  value={value}\n                  onChange={handleChange}\n                  onDragStart={handleFocus}\n                  onDragEnd={handleBlur}\n                  {...steps}\n                />\n              </Flex.Stack>\n            </FieldBlock>\n          )\n        }\n\n        return (\n          <Form.Handler data={{ sliderValue: 50 }}>\n            <MySliderComponent\n              path=\"/sliderValue\"\n              minimum={50}\n              maximum={80}\n              required\n              info=\"Info\"\n            />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const CustomComponentWithZodSchemaExample = () => {\n  return (\n    <ComponentBox scope={{ useFieldProps, z }}>\n      {() => {\n        const MySliderComponent = (props) => {\n          const fromInput = React.useCallback(\n            (event) =>\n              typeof event === 'number' ? event : event?.value || 0,\n            [],\n          )\n\n          const errorMessages = React.useMemo(() => {\n            return {\n              'Field.errorRequired': 'This field is required',\n              ...props.errorMessages,\n            }\n          }, [props.errorMessages])\n\n          // Preferred: Use Zod schemas when possible\n          // They work out of the box and provide better TypeScript integration\n          const schema =\n            props.schema ??\n            z\n              .number()\n              .min(props.minimum || 0)\n              .max(props.maximum || 100)\n\n          const preparedProps = {\n            fromInput,\n            schema,\n            ...errorMessages,\n            label: 'Label',\n            ...props,\n          }\n\n          const {\n            id,\n            label,\n            info,\n            warning,\n            error,\n            value,\n            width = 'medium',\n            minimum = 0,\n            maximum = 100,\n            step = 1,\n            handleChange,\n            handleFocus,\n            handleBlur,\n          } = useFieldProps(preparedProps)\n\n          const steps = { minimum, maximum, step }\n\n          return (\n            <FieldBlock\n              forId={id}\n              label={label}\n              info={info}\n              warning={warning}\n              error={error}\n              width={width}\n            >\n              <Flex.Stack>\n                <Field.Number\n                  id={id}\n                  value={value}\n                  showStepControls\n                  onChange={handleChange}\n                  onFocus={handleFocus}\n                  onBlur={handleBlur}\n                  {...steps}\n                />\n                <Slider\n                  value={value}\n                  onChange={handleChange}\n                  onDragStart={handleFocus}\n                  onDragEnd={handleBlur}\n                  {...steps}\n                />\n              </Flex.Stack>\n            </FieldBlock>\n          )\n        }\n\n        // Example with Zod schema (preferred)\n        // Note: You can pass a Zod schema via props.schema and it will work without AJV\n        // The component now uses a Zod schema by default: z.number().min(50).max(80)\n        return (\n          <Form.Handler data={{ sliderValue: 50 }}>\n            <MySliderComponent\n              path=\"/sliderValue\"\n              minimum={50}\n              maximum={80}\n              required\n              info=\"Info\"\n              // You can override with a custom Zod schema if needed\n              // Example: schema={z.number().min(40).max(90).refine(val => val > 60, 'Value must be greater than 60')}\n            />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const CustomComponentWithJsonSchema = () => {\n  return (\n    <ComponentBox scope={{ useFieldProps, Ajv }}>\n      {() => {\n        const MySliderComponent = (props) => {\n          const fromInput = React.useCallback(\n            (event) =>\n              typeof event === 'number' ? event : event?.value || 0,\n            [],\n          )\n\n          const errorMessages = React.useMemo(() => {\n            return {\n              'Field.errorRequired': 'This field is required',\n              ...props.errorMessages,\n            }\n          }, [props.errorMessages])\n\n          // This approach requires explicitly providing ajvInstance to Form.Handler\n          const schema = props.schema ?? {\n            type: 'number',\n            minimum: props.minimum,\n            maximum: props.maximum,\n          }\n\n          const preparedProps = {\n            fromInput,\n            schema,\n            ...errorMessages,\n            label: 'Label',\n            ...props,\n          }\n\n          const {\n            id,\n            label,\n            info,\n            warning,\n            error,\n            value,\n            width = 'medium',\n            minimum = 0,\n            maximum = 100,\n            step = 1,\n            handleChange,\n            handleFocus,\n            handleBlur,\n          } = useFieldProps(preparedProps)\n\n          const steps = { minimum, maximum, step }\n\n          return (\n            <FieldBlock\n              forId={id}\n              label={label}\n              info={info}\n              warning={warning}\n              error={error}\n              width={width}\n            >\n              <Flex.Stack>\n                <Field.Number\n                  id={id}\n                  value={value}\n                  showStepControls\n                  onChange={handleChange}\n                  onFocus={handleFocus}\n                  onBlur={handleBlur}\n                  {...steps}\n                />\n                <Slider\n                  value={value}\n                  onChange={handleChange}\n                  onDragStart={handleFocus}\n                  onDragEnd={handleBlur}\n                  {...steps}\n                />\n              </Flex.Stack>\n            </FieldBlock>\n          )\n        }\n\n        // Note: When using JSON Schema, you must provide ajvInstance to Form.Handler\n        const ajv = new Ajv({\n          allErrors: true,\n        })\n        return (\n          <Form.Handler data={{ sliderValue: 50 }} ajvInstance={ajv}>\n            <MySliderComponent\n              path=\"/sliderValue\"\n              minimum={50}\n              maximum={80}\n              required\n              info=\"Info\"\n            />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.CustomComponentWithAjvSchemaExample) _missingMdxReference(\"Examples.CustomComponentWithAjvSchemaExample\", true);\n  if (!Examples.CustomComponentWithZodSchemaExample) _missingMdxReference(\"Examples.CustomComponentWithZodSchemaExample\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"On the consumer side, we can use this custom component like so:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Form.Handler data={{ sliderValue: 50 }}>\\n  <MySliderComponent\\n    path=\\\"/sliderValue\\\"\\n    minimum={50}\\n    maximum={80}\\n    required\\n    info=\\\"Info\\\"\\n  />\\n</Form.Handler>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Using a Zod schema\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It is recommended to use Zod schemas instead of JSON Schemas, as they provide better TypeScript integration.\"\n    }), \"\\n\", _jsx(Examples.CustomComponentWithZodSchemaExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Using a Ajv schema\"\n    }), \"\\n\", _jsx(Examples.CustomComponentWithAjvSchemaExample, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from './useFieldProps/info.mdx';\nimport Demos from './useFieldProps/demos.mdx';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["CustomComponentWithAjvSchemaExample","_jsx","ComponentBox","scope","useFieldProps","noInline","children","CustomComponentWithZodSchemaExample","z","CustomComponentWithJsonSchema","Ajv","_createMdxContent","props","_components","Object","assign","h2","p","pre","code","h3","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","className","wrapper","MDXLayout","id","component","Error","Info","Demos"],"sourceRoot":""}