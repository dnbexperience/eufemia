{"version":3,"file":"component---src-docs-uilib-extensions-forms-create-component-value-block-demos-mdx-c790b385862885380733.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/utils/TestElement/TestElement.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/create-component/ValueBlock/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/create-component/ValueBlock/demos.mdx"],"sourcesContent":["import React from 'react'\nimport classnames from 'classnames'\nimport { Space } from '../../../../components'\n\nexport default function TestElement({ className = null, ...props }) {\n  return (\n    <Space\n      className={classnames('dnb-forms-test-element', className)}\n      {...props}\n    />\n  )\n}\n\nTestElement._supportsSpacingProps = true\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport {\n  TestElement,\n  ValueBlock,\n  Form,\n} from '@dnb/eufemia/src/extensions/forms'\nimport { Anchor, Flex, P } from '@dnb/eufemia/src'\n\nexport const Default = () => {\n  return (\n    <ComponentBox scope={{ ValueBlock }}>\n      <ValueBlock label=\"Label text\">Data-value goes here</ValueBlock>\n    </ComponentBox>\n  )\n}\n\nexport const Inline = () => {\n  return (\n    <ComponentBox\n      data-visual-test=\"value-block-inline\"\n      scope={{ ValueBlock }}\n    >\n      <P>\n        this is before the value <ValueBlock inline>Foo</ValueBlock>{' '}\n        <ValueBlock inline>Bar</ValueBlock> this is after the value\n      </P>\n    </ComponentBox>\n  )\n}\n\nexport const Help = () => {\n  return (\n    <ComponentBox\n      scope={{ ValueBlock }}\n      data-visual-test=\"value-block-help-button\"\n    >\n      <ValueBlock\n        label=\"Label text\"\n        help={{ title: 'Help title', content: 'Help content' }}\n      >\n        Data-value goes here\n      </ValueBlock>\n    </ComponentBox>\n  )\n}\n\nexport const HelpHtml = () => {\n  return (\n    <ComponentBox\n      scope={{ ValueBlock }}\n      data-visual-test=\"value-block-help-button-html\"\n    >\n      <ValueBlock\n        label=\"Label text with a long label label – lorem ipsum\n        dolor sit\"\n        help={{\n          open: true,\n          title: <strong>Help title</strong>,\n          content: (\n            <>\n              Help content with a <Anchor href=\"/\">Anchor</Anchor>.\n            </>\n          ),\n        }}\n      >\n        Data-value goes here – lorem ipsum dolor sit amet consectetur.\n      </ValueBlock>\n    </ComponentBox>\n  )\n}\n\nexport const Widths = () => {\n  return (\n    <ComponentBox\n      scope={{ ValueBlock, TestElement }}\n      hideCode\n      data-visual-test=\"forms-value-block-widths\"\n    >\n      <Flex.Stack>\n        <ValueBlock label=\"No maxWidth: This label is long so we can validate that the label can be longer until it will wrap.\">\n          <TestElement>\n            This content is long so we can see the maxWidth defined. It\n            should wrap at a certain amount of characters.\n          </TestElement>\n        </ValueBlock>\n        <ValueBlock\n          label=\"maxWidth='small': This label is long so we can validate that the label can be longer.\"\n          maxWidth=\"small\"\n        >\n          <TestElement>\n            This content is long so we can see the maxWidth defined. It\n            should wrap at a certain amount of characters.\n          </TestElement>\n        </ValueBlock>\n        <ValueBlock\n          label=\"maxWidth='medium': This label is long so we can validate that the label can be longer.\"\n          maxWidth=\"medium\"\n        >\n          <TestElement>\n            This content is long so we can see the maxWidth defined. It\n            should wrap at a certain amount of characters.\n          </TestElement>\n        </ValueBlock>\n        <ValueBlock\n          label=\"maxWidth='large': This label is long so we can validate that the label can be longer.\"\n          maxWidth=\"large\"\n        >\n          <TestElement>\n            This content is long so we can see the maxWidth defined. It\n            should wrap at a certain amount of characters.\n          </TestElement>\n        </ValueBlock>\n        <ValueBlock\n          label=\"maxWidth='auto': This label is long so we can validate that the label can be longer.\"\n          maxWidth=\"auto\"\n        >\n          <TestElement>\n            This content is long so we can see the maxWidth defined. It\n            should wrap at a certain amount of characters.\n          </TestElement>\n        </ValueBlock>\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n\nexport const Wrapping = () => {\n  const sixtyOneChars =\n    '0000000000000000000000000000000000000000000000000000000000000'\n  const sixtyOneCharsIncludingASpace =\n    '000000000000000000000000000000 000000000000000000000000000000'\n  const fiftyEightCharsIncludingASpace =\n    '00000000000000000000000000000000000000000000000000000000 0'\n  return (\n    <ComponentBox\n      scope={{\n        ValueBlock,\n        sixtyOneChars,\n        sixtyOneCharsIncludingASpace,\n        fiftyEightCharsIncludingASpace,\n      }}\n      data-visual-test=\"forms-value-block-wrapping\"\n    >\n      <Flex.Stack>\n        <Form.Card>\n          <Form.SubHeading>\n            Breaking word with 61 characters\n          </Form.SubHeading>\n          <ValueBlock label={sixtyOneChars}>{sixtyOneChars}</ValueBlock>\n          <ValueBlock\n            label={sixtyOneChars}\n            help={{ title: 'Help title', content: 'Help content' }}\n          >\n            {sixtyOneChars}\n          </ValueBlock>\n        </Form.Card>\n        <Form.Card>\n          <Form.SubHeading>\n            Breaking a sentence of 61 characters that include a space\n          </Form.SubHeading>\n          <ValueBlock label={sixtyOneCharsIncludingASpace}>\n            {sixtyOneCharsIncludingASpace}\n          </ValueBlock>\n          <ValueBlock\n            label={sixtyOneCharsIncludingASpace}\n            help={{ title: 'Help title', content: 'Help content' }}\n          >\n            {sixtyOneCharsIncludingASpace}\n          </ValueBlock>\n        </Form.Card>\n        <Form.Card>\n          <Form.SubHeading>\n            Help button should not wrap alone\n          </Form.SubHeading>\n          <ValueBlock\n            label={fiftyEightCharsIncludingASpace}\n            help={{ title: 'Help title', content: 'Help content' }}\n          >\n            {'value'}\n          </ValueBlock>\n        </Form.Card>\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {VisibleWhenVisualTest} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.Default) _missingMdxReference(\"Examples.Default\", true);\n  if (!Examples.Help) _missingMdxReference(\"Examples.Help\", true);\n  if (!Examples.HelpHtml) _missingMdxReference(\"Examples.HelpHtml\", true);\n  if (!Examples.Inline) _missingMdxReference(\"Examples.Inline\", true);\n  if (!Examples.Widths) _missingMdxReference(\"Examples.Widths\", true);\n  if (!Examples.Wrapping) _missingMdxReference(\"Examples.Wrapping\", true);\n  if (!VisibleWhenVisualTest) _missingMdxReference(\"VisibleWhenVisualTest\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(Examples.Default, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inline\"\n    }), \"\\n\", _jsx(Examples.Inline, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Help button\"\n    }), \"\\n\", _jsx(Examples.Help, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Help button with HTML\"\n    }), \"\\n\", _jsx(Examples.HelpHtml, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Widths\"\n    }), \"\\n\", _jsx(Examples.Widths, {}), \"\\n\", _jsx(VisibleWhenVisualTest, {\n      children: _jsx(Examples.Wrapping, {})\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["TestElement","_ref","className","props","_jsx","Space","classnames","_supportsSpacingProps","Default","ComponentBox","scope","ValueBlock","children","Inline","Help","HelpHtml","Widths","hideCode","Wrapping","sixtyOneChars","sixtyOneCharsIncludingASpace","fiftyEightCharsIncludingASpace","_createMdxContent","_components","Object","assign","h2","h3","_provideComponents","components","VisibleWhenVisualTest","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error"],"sourceRoot":""}