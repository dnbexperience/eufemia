"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[30679,40040,66256],{18106:function(e,n,l){l.r(n);var t=l(31085),a=l(71184),o=l(39959),s=l(43992);function i(e){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.default,{}),"\n",(0,t.jsx)(s.default,{})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.R)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(i,e)})):i()}},26690:function(e,n,l){l.d(n,{A:function(){return i}});var t=l(60906),a=l.n(t),o=l(13110),s=l(31085);function i(e){let{className:n=null,...l}=e;return(0,s.jsx)(o.A,{className:a()("dnb-forms-test-element",n),...l})}i._supportsSpacingProps=!0},39959:function(e,n,l){l.r(n);var t=l(31085),a=l(71184);function o(e){const n=Object.assign({h2:"h2",p:"p",code:"code",a:"a",pre:"pre"},(0,a.R)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{children:"Description"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"FieldBlock"})," is a reusable wrapper for building ",(0,t.jsx)(n.a,{href:"/uilib/extensions/forms/Value",children:"Value"})," components."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { ValueBlock } from '@dnb/eufemia/extensions/forms'\n\nconst MyValueComponent = ({ value }) => (\n  <ValueBlock label=\"Label\">{value}</ValueBlock>\n)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Check out the docs for the ",(0,t.jsx)(n.a,{href:"/uilib/extensions/forms/create-component/useValueProps/",children:"useValueProps"})," hook. It will connect your value component to the data context."]}),"\n",(0,t.jsxs)(n.p,{children:["For combining several value components into one, you can use ",(0,t.jsx)(n.a,{href:"/uilib/extensions/forms/Value/Composition/",children:"Value.Composition"}),"."]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.R)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(o,e)})):o(e)}},43992:function(e,n,l){l.r(n),l.d(n,{default:function(){return b}});var t={};l.r(t),l.d(t,{Default:function(){return r},Help:function(){return h},HelpHtml:function(){return d},Inline:function(){return u},Widths:function(){return p},Wrapping:function(){return m}});var a=l(31085),o=l(71184),s=l(78913),i=l(64938),c=l(26690);const r=()=>(0,a.jsx)(s.A,{scope:{ValueBlock:i.A},children:'<ValueBlock label="Label text">Data-value goes here</ValueBlock>\n'}),u=()=>(0,a.jsx)(s.A,{"data-visual-test":"value-block-inline",scope:{ValueBlock:i.A},children:"<P>\n  this is before the value <ValueBlock inline>Foo</ValueBlock>{' '}\n  <ValueBlock inline>Bar</ValueBlock> this is after the value\n</P>\n"}),h=()=>(0,a.jsx)(s.A,{scope:{ValueBlock:i.A},"data-visual-test":"value-block-help-button",children:"<ValueBlock\n  label=\"Label text\"\n  help={{\n    title: 'Help title',\n    content: 'Help content',\n  }}\n>\n  Data-value goes here\n</ValueBlock>\n"}),d=()=>(0,a.jsx)(s.A,{scope:{ValueBlock:i.A},"data-visual-test":"value-block-help-button-html",children:'<ValueBlock\n  label="Label text with a long label label – lorem ipsum\n        dolor sit"\n  help={{\n    open: true,\n    title: <strong>Help title</strong>,\n    content: (\n      <>\n        Help content with a <Anchor href="/">Anchor</Anchor>.\n      </>\n    ),\n  }}\n>\n  Data-value goes here – lorem ipsum dolor sit amet consectetur.\n</ValueBlock>\n'}),p=()=>(0,a.jsx)(s.A,{scope:{ValueBlock:i.A,TestElement:c.A},hideCode:!0,"data-visual-test":"forms-value-block-widths",children:'<Flex.Stack>\n  <ValueBlock label="No maxWidth: This label is long so we can validate that the label can be longer until it will wrap.">\n    <TestElement>\n      This content is long so we can see the maxWidth defined. It should\n      wrap at a certain amount of characters.\n    </TestElement>\n  </ValueBlock>\n  <ValueBlock\n    label="maxWidth=\'small\': This label is long so we can validate that the label can be longer."\n    maxWidth="small"\n  >\n    <TestElement>\n      This content is long so we can see the maxWidth defined. It should\n      wrap at a certain amount of characters.\n    </TestElement>\n  </ValueBlock>\n  <ValueBlock\n    label="maxWidth=\'medium\': This label is long so we can validate that the label can be longer."\n    maxWidth="medium"\n  >\n    <TestElement>\n      This content is long so we can see the maxWidth defined. It should\n      wrap at a certain amount of characters.\n    </TestElement>\n  </ValueBlock>\n  <ValueBlock\n    label="maxWidth=\'large\': This label is long so we can validate that the label can be longer."\n    maxWidth="large"\n  >\n    <TestElement>\n      This content is long so we can see the maxWidth defined. It should\n      wrap at a certain amount of characters.\n    </TestElement>\n  </ValueBlock>\n  <ValueBlock\n    label="maxWidth=\'auto\': This label is long so we can validate that the label can be longer."\n    maxWidth="auto"\n  >\n    <TestElement>\n      This content is long so we can see the maxWidth defined. It should\n      wrap at a certain amount of characters.\n    </TestElement>\n  </ValueBlock>\n</Flex.Stack>\n'}),m=()=>(0,a.jsx)(s.A,{scope:{ValueBlock:i.A,sixtyOneChars:"0000000000000000000000000000000000000000000000000000000000000",sixtyOneCharsIncludingASpace:"000000000000000000000000000000 000000000000000000000000000000",fiftyEightCharsIncludingASpace:"00000000000000000000000000000000000000000000000000000000 0"},"data-visual-test":"forms-value-block-wrapping",children:"<Flex.Stack>\n  <Form.Card>\n    <Form.SubHeading>Breaking word with 61 characters</Form.SubHeading>\n    <ValueBlock label={sixtyOneChars}>{sixtyOneChars}</ValueBlock>\n    <ValueBlock\n      label={sixtyOneChars}\n      help={{\n        title: 'Help title',\n        content: 'Help content',\n      }}\n    >\n      {sixtyOneChars}\n    </ValueBlock>\n  </Form.Card>\n  <Form.Card>\n    <Form.SubHeading>\n      Breaking a sentence of 61 characters that include a space\n    </Form.SubHeading>\n    <ValueBlock label={sixtyOneCharsIncludingASpace}>\n      {sixtyOneCharsIncludingASpace}\n    </ValueBlock>\n    <ValueBlock\n      label={sixtyOneCharsIncludingASpace}\n      help={{\n        title: 'Help title',\n        content: 'Help content',\n      }}\n    >\n      {sixtyOneCharsIncludingASpace}\n    </ValueBlock>\n  </Form.Card>\n  <Form.Card>\n    <Form.SubHeading>Help button should not wrap alone</Form.SubHeading>\n    <ValueBlock\n      label={fiftyEightCharsIncludingASpace}\n      help={{\n        title: 'Help title',\n        content: 'Help content',\n      }}\n    >\n      {'value'}\n    </ValueBlock>\n  </Form.Card>\n</Flex.Stack>\n"});function x(e){const n=Object.assign({h2:"h2",h3:"h3"},(0,o.R)(),e.components),{VisibleWhenVisualTest:l}=n;return t||f("Examples",!1),r||f("Examples.Default",!0),h||f("Examples.Help",!0),d||f("Examples.HelpHtml",!0),u||f("Examples.Inline",!0),p||f("Examples.Widths",!0),m||f("Examples.Wrapping",!0),l||f("VisibleWhenVisualTest",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{children:"Demos"}),"\n",(0,a.jsx)(r,{}),"\n",(0,a.jsx)(n.h3,{children:"Inline"}),"\n",(0,a.jsx)(u,{}),"\n",(0,a.jsx)(n.h2,{children:"Help button"}),"\n",(0,a.jsx)(h,{}),"\n",(0,a.jsx)(n.h2,{children:"Help button with HTML"}),"\n",(0,a.jsx)(d,{}),"\n",(0,a.jsx)(n.h3,{children:"Widths"}),"\n",(0,a.jsx)(p,{}),"\n",(0,a.jsx)(l,{children:(0,a.jsx)(m,{})})]})}var b=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,o.R)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(x,e)})):x(e)};function f(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-create-component-value-block-mdx-ec4319a5384e676f1298.js.map