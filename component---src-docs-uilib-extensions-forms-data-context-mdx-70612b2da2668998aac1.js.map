{"version":3,"file":"component---src-docs-uilib-extensions-forms-data-context-mdx-70612b2da2668998aac1.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/DataContext.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/DataContext/ListDataContextComponents.tsx","webpack://dnb-design-system-portal/./src/shared/parts/ListSummaryFromEdges.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport ListDataContextComponents from './DataContext/ListDataContextComponents';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\",\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"DataContext\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"DataContext\"\n      }), \" builds a surrounding \", _jsx(_components.a, {\n        href: \"https://react.dev/learn/passing-data-deeply-with-context\",\n        children: \"React context\"\n      }), \" that binds an entire source dataset together with the fields placed within. It enables fields and other components to retrieve data from the source data using \", _jsx(_components.code, {\n        children: \"path\"\n      }), \" parameters that identify where in the source data the target value is located, and the same components will report changes to the data back so the context can update the dataset.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Example of using the \", _jsx(_components.code, {\n        children: \"DataContext.Provider\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<DataContext.Provider data={data} onChange={handleChange}>\\n  <Field.String path=\\\"/firstName\\\" />\\n</DataContext.Provider>\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For a more complete feature set tailored to building forms, please use \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Handler\",\n        children: \"Form.Handler\"\n      }), \". It uses DataContext internally.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Components\"\n    }), \"\\n\", _jsx(ListDataContextComponents, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"More details\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you don't want to repeat all the logic that drills down to values in the source data, and ensure that changes are sent to the right place, you can surround the components with a \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/DataContext/Provider\",\n        children: \"DataContext.Provider\"\n      }), \" component. This means that you feed the form with source data in one place, and give it only one \", _jsx(_components.code, {\n        children: \"onChange\"\n      }), \" callback. Then you only send the individual fields instructions about where in the data set the value that field is to process is located. The components then communicate internally and ensure that the values are retrieved and sent to the correct location.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The reference to a specific field's value in the dataset is given with a property called \", _jsx(_components.code, {\n        children: \"path\"\n      }), \". Paths are defined in a syntax called JSON Pointer, which is basically a slash-separated string that can go several levels, and consist of both object-properties and array indexes. Examples of paths are: \", _jsx(_components.code, {\n        children: \"/firstName\"\n      }), \", \", _jsx(_components.code, {\n        children: \"/nested/path/to/value\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"/list/2/keyInThirdObject\"\n      }), \". More information about JSON Pointers can be found on \", _jsx(_components.a, {\n        href: \"https://json-schema.org/draft/2020-12/relative-json-pointer.html\",\n        children: \"the website of JSON Schema\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In practice, this means that you can go from:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"const handleChange = useCallback((path, value) => {\\n  // Update external state\\n})\\n\\nreturn (\\n  <div id=\\\"my-form\\\">\\n    <Field.String\\n      value={data.firstName}\\n      onChange={(value) => handleChange('firstName', value)}\\n    />\\n    <Field.String\\n      value={data.lastName}\\n      onChange={(value) => handleChange('lastName', value)}\\n    />\\n    <Field.Email\\n      value={data.email}\\n      onChange={(value) => handleChange('email', value)}\\n    />\\n    <Field.String\\n      label=\\\"Special non-standardized value\\\"\\n      value={data.specialValue}\\n      onChange={(value) => handleChange('specialValue', value)}\\n    />\\n  </div>\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"to:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"const handleChange = useCallback((path, value) => {\\n  // Update external state\\n})\\n\\nreturn (\\n  <DataContext.Provider data={data} onChange={handleChange}>\\n    <Field.String path=\\\"/firstName\\\" />\\n    <Field.String path=\\\"/lastName\\\" />\\n    <Field.Email path=\\\"/email\\\" />\\n    <Field.String\\n      path=\\\"/specialValue\\\"\\n      label=\\\"Special non-standardized value\\\"\\n    />\\n  </DataContext.Provider>\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This abstracts away some logic that many are used to having available for debugging and adjustments, which can be unfamiliar and difficult to get used to. The goal of the way this is designed is for it to be well tested and predictable, so that you don't need to have this boilerplate logic available. In addition, properties from the individual components make them flexible in use, and this can be continuously expanded to cover recurring needs from implementations.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Error handling\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Besides how the forms are built up and the link to the surrounding data flow, these form components must ensure that the user experience is as much as possible in line with the way we have defined that it should work in practice. An example of this is when the error messages appear on the screen. Both the individual input component and any surrounding \", _jsx(_components.code, {\n        children: \"DataContext.Provider\"\n      }), \" component hold an internal state that says whether the value in the field has an error or not. In addition, it has a separate state that states whether error messages should be displayed or not.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"An example of what this leads to is when a field has an invalid value, for example because the field starts empty but is required. Or if the field requires a given syntax (such as national identity number), then the error message is not displayed before or at the same time as the user fills in the field in question. However, when the user jumps out of the field, the error message will appear if the value is still not valid based on the validation properties the component has received. When the user then starts to adjust the field in question, the error message is hidden again until they jump out of the field. In addition, a surrounding \", _jsx(_components.code, {\n        children: \"DataContext.Provider\"\n      }), \" will check all the fields for errors, so that you do not get to the next step in a step-divided form, or can send the form and trigger \", _jsx(_components.code, {\n        children: \"onSubmit\"\n      }), \" if there are still fields on the screen that have errors.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the case of forms divided into several wizard steps, the combination of the components \", _jsx(_components.code, {\n        children: \"DataContext.Provider\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"Wizard.Step\"\n      }), \" will also ensure that only the fields that are visible on the screen (for the relevant step, or based on what is hidden or shown via the Visibility component) provide a basis for whether one can proceed in the process or not.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Hierarchically overridable properties\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Configuration of the form functionality through properties for all components can be hierarchically overridden. This means that the further into the component structure you get, the higher priority properties have. For example, a component that is given a \", _jsx(_components.code, {\n        children: \"path\"\n      }), \" to retrieve data from the \", _jsx(_components.code, {\n        children: \"DataContext.Provider\"\n      }), \" will rather prioritize a \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" property that the component receives directly if both parts are available:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<DataContext.Provider data={{ foo: 'I am the chosen one!' }}>\\n  <Value.String path=\\\"/foo\\\" />\\n</DataContext.Provider>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<DataContext.Provider data={{ foo: 'I am not chosen :-(' }}>\\n  <Value.String path=\\\"/foo\\\" value=\\\"I am the one!\\\" />\\n</DataContext.Provider>\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the same way, components that have text properties built in, such as field label and error message for required field on \", _jsx(_components.code, {\n        children: \"Field.Email\"\n      }), \", will choose what it receives instead of the default values if both are available:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Field.Email />\\n// Gets the default label, and the email-pattern validation.\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Field.Email label=\\\"Send me e-mail on this address\\\" />\\n// Gets the custom label, but still the default email-pattern validation.\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport ListSummaryFromEdges from '../../../../../shared/parts/ListSummaryFromEdges'\n\nexport default function ListDataContextComponents(props) {\n  const {\n    allMdx: { edges },\n  } = useStaticQuery(graphql`\n    {\n      allMdx(\n        filter: {\n          frontmatter: { title: { ne: null }, draft: { ne: true } }\n          internal: {\n            contentFilePath: {\n              glob: \"**/uilib/extensions/forms/DataContext/**/*\"\n            }\n          }\n        }\n        sort: [\n          { frontmatter: { order: ASC } }\n          { frontmatter: { title: ASC } }\n        ]\n      ) {\n        edges {\n          node {\n            fields {\n              slug\n            }\n            frontmatter {\n              title\n              description\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  return <ListSummaryFromEdges edges={edges} {...props} />\n}\n","import React from 'react'\nimport { Ul, Li } from '@dnb/eufemia/src'\nimport AutoLinkHeader from '../tags/AutoLinkHeader'\nimport Anchor from '../tags/Anchor'\nimport {\n  HeadingSize,\n  resetLevels,\n} from '@dnb/eufemia/src/components/Heading'\nimport ReactMarkdown from 'react-markdown'\nimport { basicComponents } from '../../shared/tags'\nimport { SpacingProps } from '@dnb/eufemia/src/shared/types'\n\nimport type {\n  HeadingLevel,\n  InternalHeadingLevel,\n} from '@dnb/eufemia/src/components/Heading'\n\ntype ListEdge = {\n  node: {\n    frontmatter: {\n      title: string\n      description?: string\n      order?: number\n    }\n    fields: {\n      slug: string\n    }\n  }\n}\nexport type ListEdges = Array<ListEdge>\ntype ListSummaryFromEdgesProps = {\n  edges: ListEdges\n  level?: HeadingLevel\n  size?: HeadingSize\n  description?: string\n  returnListItems?: boolean\n} & SpacingProps\n\nexport default function ListSummaryFromEdges({\n  edges,\n  level = undefined,\n  size = undefined,\n  description: description = null,\n  returnListItems = false,\n  ...props\n}: ListSummaryFromEdgesProps) {\n  const ListWrapper = returnListItems ? Ul : React.Fragment\n  const ItemWrapper = returnListItems ? Li : React.Fragment\n\n  resetLevels((level || 2) as InternalHeadingLevel)\n\n  const jsx = edges.map(\n    (\n      {\n        node: {\n          frontmatter: { title, description: fmDescription },\n          fields: { slug },\n        },\n      },\n      i,\n    ) => {\n      return (\n        <ItemWrapper key={i}>\n          <Title />\n          <Description />\n        </ItemWrapper>\n      )\n\n      function Title() {\n        const titleLink = <Anchor href={'/' + slug}>{title}</Anchor>\n\n        if (returnListItems) {\n          return titleLink\n        }\n\n        return (\n          <AutoLinkHeader\n            level={level || 2}\n            size={size}\n            useSlug={'/' + slug}\n            title={title}\n            {...props}\n          >\n            {titleLink}\n          </AutoLinkHeader>\n        )\n      }\n\n      function Description() {\n        const rawDescription =\n          description !== null ? description : fmDescription\n\n        if (rawDescription) {\n          if (returnListItems) {\n            return (\n              <>\n                :{' '}\n                <ReactMarkdown\n                  components={basicComponents}\n                  disallowedElements={['p']}\n                  unwrapDisallowed={true}\n                >\n                  {rawDescription}\n                </ReactMarkdown>\n              </>\n            )\n          }\n\n          return (\n            <ReactMarkdown components={basicComponents}>\n              {rawDescription}\n            </ReactMarkdown>\n          )\n        }\n      }\n    },\n  )\n\n  return <ListWrapper>{jsx}</ListWrapper>\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","code","a","pre","h2","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","className","ListDataContextComponents","wrapper","MDXLayout","allMdx","edges","useStaticQuery","ListSummaryFromEdges","_ref","level","size","description","returnListItems","ListWrapper","Ul","React","ItemWrapper","Li","resetLevels","jsx","map","_ref2","i","node","frontmatter","title","fmDescription","fields","slug","Title","Description","titleLink","Anchor","AutoLinkHeader","useSlug","rawDescription","ReactMarkdown","basicComponents","disallowedElements","unwrapDisallowed"],"sourceRoot":""}