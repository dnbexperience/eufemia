{"version":3,"file":"component---src-docs-uilib-extensions-forms-demo-cases-casedemo-1-mdx-44573bcdf26e0e881ab6.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/demo-cases/casedemo1.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/demo-cases/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/StepsContext.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/Step/Step.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/NextButton/NextButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/PreviousButton/PreviousButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/Buttons/Buttons.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/StepsLayout.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/index.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {BecomeCorporateCustomer} from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Case Demo 1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Below, you can extend the demo code.\"\n    }), \"\\n\", _jsx(BecomeCorporateCustomer, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { Section, Code, Card, Flex } from '@dnb/eufemia/src'\nimport * as React from 'react'\nimport {\n  Form,\n  StepsLayout,\n  Field,\n  Value,\n  FieldBlock,\n} from '@dnb/eufemia/src/extensions/forms'\nimport { Provider } from '@dnb/eufemia/src/shared'\nimport ComponentBox from '../../../../../shared/tags/ComponentBox'\n\nexport const BecomeCorporateCustomer = () => {\n  return (\n    <ComponentBox hideCode scope={{ StepsLayout }}>\n      {() => {\n        const Output = () => {\n          const { data } = Form.useData('example-form', {\n            website: 'www.dnb.no',\n          })\n\n          return (\n            <Section\n              element=\"output\"\n              innerSpace\n              backgroundColor=\"sand-yellow\"\n              top\n              bottom=\"large\"\n            >\n              JSON Output: <Code>{JSON.stringify(data, null, 4)}</Code>\n            </Section>\n          )\n        }\n\n        return (\n          <>\n            <Form.Handler\n              id=\"example-form\"\n              onSubmit={(data) => console.log('onSubmit', data)}\n            >\n              <StepsLayout top scrollTopOnStepChange>\n                <StepsLayout.Step title=\"Bedriftsopplysninger\">\n                  <Form.MainHeading>Bedriftsopplysninger</Form.MainHeading>\n\n                  <Card spacing=\"medium\">\n                    <Field.OrganizationNumber\n                      path=\"/companyOrganizationNumber\"\n                      required\n                    />\n                    <Field.String\n                      path=\"/companyName\"\n                      label=\"Bedriftens navn\"\n                      required\n                    />\n                    <Field.String\n                      path=\"/companyAddress\"\n                      label=\"Forretningsadresse (NB! Ikke postadresse)\"\n                      required\n                    />\n                    <Field.PostalCodeAndCity\n                      postalCode={{\n                        path: '/companyPostalCode',\n                      }}\n                      city={{\n                        path: '/companyCity',\n                      }}\n                    />\n                    <Field.Selection\n                      variant=\"radio\"\n                      path=\"/postalAddressSelect\"\n                      label=\"Postadresse (Ã¸nsket sted for tilsendt post)\"\n                    >\n                      <Field.Option\n                        value=\"companyAddress\"\n                        title=\"Samme som forretningsadresse\"\n                      />\n                      <Field.Option value=\"other\" title=\"Annet\" />\n                    </Field.Selection>\n                    <Field.Selection\n                      variant=\"radio\"\n                      path=\"/hqAddress\"\n                      label=\"Hovedkontoradresse\"\n                    >\n                      <Field.Option\n                        value=\"companyAddress\"\n                        title=\"Samme som forretningsadresse\"\n                      />\n                      <Field.Option\n                        value=\"postalAddress\"\n                        title=\"Samme som postadresse\"\n                      />\n                      <Field.Option value=\"other\" title=\"Annet\" />\n                    </Field.Selection>\n                    <Field.SelectCountry\n                      path=\"/countryOfEstablishment\"\n                      label=\"Etableringsland\"\n                      required\n                    />\n                  </Card>\n\n                  <Card spacing=\"medium\">\n                    <Field.PhoneNumber\n                      path=\"/phoneNumber\"\n                      label=\"Telefon/mobilnummer\"\n                      required\n                    />\n                    <Field.Email path=\"/email\" required />\n                    <Field.String\n                      path=\"/website\"\n                      label=\"Nettstedsadresse (valgfritt)\"\n                    />\n                  </Card>\n\n                  <Form.ButtonRow>\n                    <StepsLayout.NextButton />\n                  </Form.ButtonRow>\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Kontaktperson\">\n                  <Form.MainHeading>Profile</Form.MainHeading>\n\n                  <Card stack>\n                    <Form.SubHeading>More information</Form.SubHeading>\n\n                    <Field.NationalIdentityNumber path=\"/ssn\" />\n                    <Field.Email path=\"/email\" />\n                    <Field.PhoneNumber path=\"/phone\" />\n                  </Card>\n\n                  <Form.ButtonRow>\n                    <StepsLayout.PreviousButton />\n                    <StepsLayout.NextButton />\n                  </Form.ButtonRow>\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Bedriftens virksomhet\">\n                  <em>Bedriftens virksomhet</em>\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Bruk av DNBs tjenester\">\n                  <em>Bruk av DNBs tjenester</em>\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Inntekt og egenkapital\">\n                  <em>Inntekt og egenkapital</em>\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Skatterapportering\">\n                  <em>Skatterapportering</em>\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Eierskap og kontroll\">\n                  ...\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Roller i bedriften\">\n                  ...\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Oppsummering\">\n                  <Form.MainHeading>Profile</Form.MainHeading>\n\n                  <Card stack>\n                    <Flex.Container>\n                      <Value.String path=\"/firstName\" />\n                      <Value.String path=\"/lastName\" />\n                    </Flex.Container>\n\n                    <Value.NationalIdentityNumber path=\"/ssn\" />\n                    <Value.Email path=\"/email\" />\n                    <Value.PhoneNumber path=\"/phone\" />\n                  </Card>\n\n                  <Form.ButtonRow>\n                    <StepsLayout.PreviousButton />\n                    <Form.SubmitButton />\n                  </Form.ButtonRow>\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Kvittering\">\n                  Kvittering...\n                </StepsLayout.Step>\n              </StepsLayout>\n            </Form.Handler>\n\n            <Output />\n          </>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport function PizzaDemo() {\n  return (\n    <ComponentBox hideCode scope={{ StepsLayout }}>\n      {() => {\n        const Output = () => {\n          const { data } = Form.useData('pizza-demo', {})\n\n          return (\n            <Section\n              element=\"output\"\n              innerSpace\n              backgroundColor=\"sand-yellow\"\n              top\n              bottom=\"large\"\n            >\n              JSON Output: <Code>{JSON.stringify(data, null, 4)}</Code>\n            </Section>\n          )\n        }\n\n        return (\n          <Provider locale=\"en-GB\">\n            <Form.Handler\n              onSubmit={(data) => console.log('onSubmit', data)}\n              id=\"pizza-demo\"\n              sessionStorageId=\"pizza-form\"\n            >\n              <StepsLayout scrollTopOnStepChange>\n                <StepsLayout.Step title=\"Which pizza do you want?\">\n                  <Form.MainHeading>\n                    Which pizza do you want?\n                  </Form.MainHeading>\n\n                  <Card stack>\n                    <Form.SubHeading>Your Pizza</Form.SubHeading>\n                    <Field.Selection\n                      variant=\"button\"\n                      label=\"Choose a flavour\"\n                      path=\"/flavour\"\n                      required\n                    >\n                      <Field.Option value=\"pepperoni\" title=\"Pepperoni\" />\n                      <Field.Option value=\"margarita\" title=\"Margarita\" />\n                      <Field.Option value=\"parma\" title=\"Parma\" />\n                    </Field.Selection>\n                  </Card>\n\n                  <Card stack>\n                    <Form.SubHeading>Allergies</Form.SubHeading>\n                    <Field.Boolean\n                      label=\"Do you have any allergies?\"\n                      path=\"/hasAllergies\"\n                      variant=\"buttons\"\n                      required\n                    />\n\n                    <Form.Visibility pathTrue=\"/hasAllergies\" animate>\n                      <Field.String\n                        label=\"Write down your allergies\"\n                        path=\"/allergies\"\n                        required // only if visible ð\n                      />\n                    </Form.Visibility>\n                  </Card>\n\n                  <Form.ButtonRow>\n                    <StepsLayout.NextButton />\n                  </Form.ButtonRow>\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Delivery address\">\n                  <Form.MainHeading>Delivery address</Form.MainHeading>\n\n                  <Card stack>\n                    <Form.SubHeading>Your name</Form.SubHeading>\n\n                    <Field.String\n                      label=\"First name\"\n                      path=\"/firstName\"\n                      required\n                    />\n                    <Field.String\n                      label=\"Last name\"\n                      path=\"/lastName\"\n                      required\n                    />\n                  </Card>\n\n                  <Card stack>\n                    <Form.SubHeading>Your address</Form.SubHeading>\n\n                    <FieldBlock label=\"Address\" width=\"large\" composition>\n                      <Field.String\n                        label=\"Street\"\n                        width=\"stretch\"\n                        path=\"/streetName\"\n                        required\n                      />\n                      <Field.Number\n                        label=\"Nr.\"\n                        width=\"small\"\n                        path=\"/streetNr\"\n                        required\n                      />\n                    </FieldBlock>\n\n                    <Field.PostalCodeAndCity\n                      postalCode={{ required: true, path: '/postalCode' }}\n                      city={{ required: true, path: '/city' }}\n                    />\n                  </Card>\n\n                  <Form.ButtonRow>\n                    <StepsLayout.PreviousButton />\n                    <StepsLayout.NextButton />\n                  </Form.ButtonRow>\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Summary\">\n                  <Form.MainHeading>Summary</Form.MainHeading>\n\n                  <Card stack>\n                    <Value.String label=\"My flavour\" path=\"/flavour\" />\n                    <Value.Boolean\n                      label=\"I have allergies\"\n                      path=\"/hasAllergies\"\n                    />\n                    <Value.String label=\"My allergies\" path=\"/allergies\" />\n                  </Card>\n\n                  <Card stack>\n                    <Flex.Horizontal>\n                      <Value.String label=\"First name\" path=\"/firstName\" />\n                      <Value.String label=\"Last name\" path=\"/lastName\" />\n                    </Flex.Horizontal>\n\n                    <Flex.Horizontal>\n                      <Value.String label=\"Street\" path=\"/streetName\" />\n                      <Value.Number label=\"Nr.\" path=\"/streetNr\" />\n                    </Flex.Horizontal>\n\n                    <Flex.Horizontal>\n                      <Value.String\n                        label=\"Postal Code\"\n                        path=\"/postalCode\"\n                      />\n                      <Value.String label=\"City\" path=\"/city\" />\n                    </Flex.Horizontal>\n                  </Card>\n\n                  <Form.ButtonRow>\n                    <StepsLayout.PreviousButton />\n                    <Form.SubmitButton />\n                  </Form.ButtonRow>\n                </StepsLayout.Step>\n              </StepsLayout>\n            </Form.Handler>\n\n            <Output />\n          </Provider>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n","import React from 'react'\n\ninterface StepsContextState {\n  activeIndex: number\n  handlePrevious: () => void\n  handleNext: () => void\n}\n\nconst StepsContext = React.createContext<StepsContextState | undefined>(\n  undefined\n)\n\nexport default StepsContext\n","import React, { useContext } from 'react'\nimport classnames from 'classnames'\nimport { ComponentProps } from '../../types'\nimport {\n  Props as FlexContainerProps,\n  pickFlexContainerProps,\n} from '../../../../components/flex/Container'\nimport StepsContext from '../StepsContext'\nimport Flex from '../../../../components/flex/Flex'\n\nexport type Props = ComponentProps &\n  FlexContainerProps & {\n    index?: number\n    title?: string\n  }\n\nfunction Step(props: Props) {\n  const { className, index, children } = props\n  const stepsContext = useContext(StepsContext)\n\n  if (stepsContext?.activeIndex !== index) {\n    // Another step is active\n    return null\n  }\n\n  return (\n    <Flex.Container\n      className={classnames('dnb-forms-step', className)}\n      direction=\"vertical\"\n      {...pickFlexContainerProps(props)}\n    >\n      {children}\n    </Flex.Container>\n  )\n}\n\nStep._supportsSpacingProps = true\nexport default Step\n","import React, { useContext } from 'react'\nimport classnames from 'classnames'\nimport type { ComponentProps } from '../../types'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/button/Button'\nimport SharedContext from '../../../../shared/Context'\nimport StepsContext from '../StepsContext'\nimport ButtonRow from '../../Form/ButtonRow'\n\nexport type Props = ComponentProps &\n  ButtonProps & {\n    children?: string\n  }\n\nfunction NextButton(props: Props) {\n  const sharedContext = useContext(SharedContext)\n  const {\n    className,\n    variant = 'primary',\n    icon_position = 'right',\n    icon = 'chevron_right',\n    children = sharedContext?.translation.Forms.stepNext,\n  } = props\n  const stepsContext = useContext(StepsContext)\n\n  return (\n    <ButtonRow>\n      <Button\n        {...props}\n        className={classnames('dnb-forms-next-button', className)}\n        onClick={stepsContext?.handleNext}\n        variant={variant}\n        icon_position={icon_position}\n        icon={icon}\n      >\n        {children}\n      </Button>\n    </ButtonRow>\n  )\n}\n\nNextButton._supportsSpacingProps = true\nexport default NextButton\n","import React, { useContext } from 'react'\nimport classnames from 'classnames'\nimport type { ComponentProps } from '../../types'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/button/Button'\nimport SharedContext from '../../../../shared/Context'\nimport StepsContext from '../StepsContext'\nimport ButtonRow from '../../Form/ButtonRow'\n\nexport type Props = ComponentProps &\n  ButtonProps & {\n    children?: string\n  }\n\nfunction PreviousButton(props: Props) {\n  const sharedContext = useContext(SharedContext)\n  const {\n    className,\n    variant = 'tertiary',\n    icon_position = 'left',\n    icon = 'chevron_left',\n    children = sharedContext?.translation.Forms.stepPrevious,\n  } = props\n  const stepsContext = useContext(StepsContext)\n\n  return (\n    <ButtonRow>\n      <Button\n        {...props}\n        className={classnames('dnb-forms-previous-button', className)}\n        onClick={stepsContext?.handlePrevious}\n        variant={variant}\n        icon_position={icon_position}\n        icon={icon}\n      >\n        {children}\n      </Button>\n    </ButtonRow>\n  )\n}\n\nPreviousButton._supportsSpacingProps = true\nexport default PreviousButton\n","import React from 'react'\nimport classnames from 'classnames'\nimport { ComponentProps } from '../../types'\nimport ButtonRow from '../../Form/ButtonRow'\nimport NextButton from '../NextButton'\nimport PreviousButton from '../PreviousButton'\n\nexport type Props = ComponentProps & {\n  children?: string\n}\n\nfunction Buttons(props: Props) {\n  const { className } = props\n  return (\n    <ButtonRow\n      className={classnames('dnb-forms-buttons', className)}\n      {...props}\n    >\n      <PreviousButton />\n      <NextButton />\n    </ButtonRow>\n  )\n}\n\nButtons._supportsSpacingProps = true\nexport default Buttons\n","import React, { useContext, useState, useCallback } from 'react'\nimport classnames from 'classnames'\nimport { Space, StepIndicator } from '../../../components'\nimport { warn } from '../../../shared/component-helper'\nimport { ComponentProps } from '../types'\nimport DataContext from '../DataContext/Context'\nimport Step, { Props as StepProps } from './Step'\nimport StepsContext from './StepsContext'\nimport NextButton from './NextButton'\nimport PreviousButton from './PreviousButton'\nimport Buttons from './Buttons'\nimport Provider from '../DataContext/Provider'\nimport useId from '../hooks/useId'\n\nexport type Props = ComponentProps & {\n  id?: string\n  mode?: 'static' | 'strict' | 'loose'\n  scrollTopOnStepChange?: boolean\n  initialActiveIndex?: number\n  onStepChange?: (index: number) => void\n  children: React.ReactNode\n  variant?: 'sidebar' | 'drawer'\n  noAnimation?: boolean\n  sidebarId?: string\n}\n\nfunction StepsLayout(props: Props) {\n  const {\n    className,\n    id: _id,\n    mode = 'strict',\n    scrollTopOnStepChange,\n    initialActiveIndex = 0,\n    onStepChange,\n    children,\n    noAnimation = true,\n    variant = 'sidebar',\n    sidebarId,\n    ...rest\n  } = props\n  const dataContext = useContext(DataContext)\n  const { hasContext, hasErrors, setShowAllErrors, scrollToTop } =\n    dataContext\n\n  const [activeIndex, setActiveIndex] =\n    useState<number>(initialActiveIndex)\n\n  const id = useId(_id)\n\n  const handlePrevious = useCallback(() => {\n    setActiveIndex((activeIndex) => {\n      onStepChange?.(activeIndex - 1)\n      return activeIndex - 1\n    })\n    if (scrollTopOnStepChange) {\n      scrollToTop()\n    }\n  }, [scrollTopOnStepChange, onStepChange, scrollToTop])\n\n  const handleNext = useCallback(() => {\n    if (!hasErrors()) {\n      setActiveIndex((activeIndex) => {\n        onStepChange?.(activeIndex + 1)\n        return activeIndex + 1\n      })\n      if (scrollTopOnStepChange) {\n        scrollToTop()\n      }\n    } else {\n      setShowAllErrors(true)\n    }\n  }, [\n    hasErrors,\n    scrollTopOnStepChange,\n    onStepChange,\n    scrollToTop,\n    setShowAllErrors,\n  ])\n\n  const stepIndicatorData = React.Children.map(children, (child) => {\n    if (!React.isValidElement(child) || child.type !== Step) {\n      throw new Error('Only Step can be children of StepsLayout')\n    }\n    return child.props.title ?? 'Title missing'\n  }) as string[]\n\n  const handleChange = useCallback(({ current_step }) => {\n    setActiveIndex(current_step)\n  }, [])\n\n  if (!hasContext) {\n    warn('You may wrap StepsLayout in Form.Handler')\n    return (\n      <Provider>\n        <StepsLayout {...props} id={id} />\n      </Provider>\n    )\n  }\n\n  return (\n    <StepsContext.Provider\n      value={{\n        activeIndex,\n        handlePrevious,\n        handleNext,\n      }}\n    >\n      <Space\n        className={classnames(\n          'dnb-forms-steps-layout',\n          variant === 'drawer' && 'dnb-forms-steps-layout--drawer',\n          className\n        )}\n        {...rest}\n      >\n        <aside className=\"dnb-forms-steps-layout__sidebar\">\n          <StepIndicator.Sidebar sidebar_id={id} />\n          <StepIndicator\n            bottom\n            current_step={activeIndex}\n            data={stepIndicatorData}\n            mode={mode}\n            no_animation={noAnimation}\n            on_change={handleChange}\n            sidebar_id={\n              variant === 'drawer' && !sidebarId\n                ? ''\n                : sidebarId\n                ? sidebarId\n                : id\n            }\n          />\n        </aside>\n        <div className=\"dnb-forms-steps-layout__contents\">\n          {React.Children.map(children, (child, i) => {\n            if (React.isValidElement(child) && child.type === Step) {\n              return React.cloneElement(\n                child as React.ReactElement<StepProps>,\n                {\n                  index: i,\n                }\n              )\n            }\n            return child\n          })}\n        </div>\n      </Space>\n    </StepsContext.Provider>\n  )\n}\n\nStepsLayout._supportsSpacingProps = true\n\nStepsLayout.Step = Step\nStepsLayout.NextButton = NextButton\nStepsLayout.PreviousButton = PreviousButton\nStepsLayout.Buttons = Buttons\n\nexport default StepsLayout\n","import StepsLayout from './StepsLayout'\nexport { default as StepsContext } from './StepsContext'\n\nexport default StepsLayout\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","_provideComponents","components","_jsxs","_Fragment","children","_jsx","BecomeCorporateCustomer","wrapper","MDXLayout","ComponentBox","hideCode","scope","StepsLayout","noInline","PizzaDemo","StepsContext","React","undefined","Step","className","index","stepsContext","useContext","activeIndex","Flex","classnames","direction","pickFlexContainerProps","_supportsSpacingProps","NextButton","sharedContext","SharedContext","variant","icon_position","icon","translation","Forms","stepNext","ButtonRow","Button","onClick","handleNext","PreviousButton","stepPrevious","handlePrevious","Buttons","id","_id","mode","scrollTopOnStepChange","initialActiveIndex","onStepChange","noAnimation","sidebarId","rest","dataContext","DataContext","hasContext","hasErrors","setShowAllErrors","scrollToTop","setActiveIndex","useState","useId","useCallback","stepIndicatorData","map","child","_child$props$title","type","Error","title","handleChange","_ref","current_step","Provider","value","Space","StepIndicator","Sidebar","sidebar_id","bottom","data","no_animation","on_change","i","warn"],"sourceRoot":""}