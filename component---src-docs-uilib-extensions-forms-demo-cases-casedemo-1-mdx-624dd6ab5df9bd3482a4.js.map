{"version":3,"file":"component---src-docs-uilib-extensions-forms-demo-cases-casedemo-1-mdx-624dd6ab5df9bd3482a4.js","mappings":"wLAIA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,MACFC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKV,EAAYG,GAAI,CAC9BM,SAAU,gBACR,MAAMC,EAAAA,EAAAA,KAAKV,EAAYI,EAAG,CAC5BK,SAAU,yCACR,MAAMC,EAAAA,EAAAA,KAAKC,EAAAA,EAAyB,CAAC,KAE7C,CAOA,UANA,SAAoBZ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOO,GAAYH,EAAAA,EAAAA,KAAKG,EAAWZ,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DU,UAAUC,EAAAA,EAAAA,KAAKZ,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,mHCVO,MAAMY,EAA0BA,KACrCD,EAAAA,EAAAA,KAAAI,EAAAA,EAAA,CAAAC,UAAA,EAAAC,MAAA,CACFC,MACA,GAAAC,UAAA,EAAAT,SAAA,mgJAiKO,SAASU,IACd,OAAAT,EAAAA,EAAAA,KAAAI,EAAAA,EAAA,CAAAC,UAAA,EAAAC,MAAA,CACFC,MACA,GAAAC,UAAA,EAAAT,SAAA,4tIAoJA,C,sGCpTO,MAAMW,EAAe,CAC1B,YACA,YACA,UACA,cACA,MACA,MACA,aACA,mBACA,oBAGa,SAASC,EAAetB,GACrC,MAAM,YAAEuB,EAAW,WAAEC,EAAU,IAAEC,EAAG,SAAEf,GAAaV,GAAS,CAAC,GACvD,cAAE0B,EAAa,cAAEC,EAAa,KAAEC,EAAI,WAAEC,IAC1CC,EAAAA,EAAAA,YAAWC,EAAAA,GAEPC,GAAUC,EAAAA,EAAAA,QAAmB,CAAC,GACpCD,EAAQE,QAAUN,EAElB,MAAMO,GAAWC,EAAAA,EAAAA,cAAY,KAC3B,MAAMC,EAASnC,OAAOoC,SAAQZ,aAAa,EAAbA,EAAeQ,UAAW,CAAC,GAAGK,QAC1D,CAACC,EAAGC,KAAqB,IAAlBC,EAAM1C,GAAMyC,EACjB,GAAIC,EAAKC,WAAW,KAAM,CACxB,MAAMC,EAAYF,EAAKG,UAAU,GAE3BC,EAAWF,EAAUG,MAAM,KAC3BC,EAAaF,EAASG,OAGtBC,EAAgB,CACpBC,KAFWnD,EAAMoD,WAAa,UAKhC,IAAK,MAAMC,KAAQhC,EACbrB,EAAMqD,KACRH,EAAcG,GAAQrD,EAAMqD,IAIhC,GAAIL,EAAa,EAAG,CAClB,MAAMM,EAAa,CAAC,IACpB,IAAK,MAAMZ,KAAQI,EAAU,CAC3BQ,EAAWC,KAAKb,GAChB,MAAMc,EAAYF,EAAWG,KAAK,gBAC5BC,EAASJ,EAAWL,OAAS,IAAMH,EAASG,OAE5CU,EAAgBC,EAAAA,GAAYpB,EAAKgB,GACnCI,EAAAA,GAAYpB,EAAKgB,GACjB,KAEEK,EAAYH,EAASR,EAAgBS,EAE3C,GAAID,GAC8B,KAA5BlC,aAAU,EAAVA,EAAagC,KACfI,EAAAA,GAAYpB,EAAKgB,EAAWK,OAEzB,CACL,MAAMA,EAAY,CAChBV,KAAM,YACHQ,GAICG,EAAW,GACb9D,EAAM8D,UACRA,EAASP,KAAKT,EAASiB,IAAI,IAEzBJ,SAAAA,EAAeG,UACjBA,EAASP,KAAIS,MAAbF,GAAQG,EAAAA,EAAAA,GAASN,EAAcG,WAE7BA,EAASb,OAAS,IACpBY,EAAUC,SAAWA,IAGS,KAA5BtC,aAAU,EAAVA,EAAagC,KACfI,EAAAA,GAAYpB,EAAKgB,EAAWK,EAEhC,CACF,CACF,MAC6B,KAAvBrC,aAAU,EAAVA,EAAakB,KACfkB,EAAAA,GAAYpB,EAAI0B,WAAYxB,EAAMQ,GAEhClD,EAAM8D,UACRtB,EAAIsB,SAASP,KAAKX,EAGxB,CAEA,OAAOJ,CAAG,GAEZ,CAAEW,KAAM,SAAUe,WAAY,CAAC,EAAGJ,SAAU,KAGxCK,EAAgBjE,OAAOoC,SAC3BZ,aAAa,EAAbA,EAAeQ,UAAW,CAAC,GAC3BK,QAAO,CAACC,EAAG4B,KAAqB,IAAlB1B,EAAM1C,GAAMoE,EAC1B,GAAI1B,EAAKC,WAAW,KAAM,CACxB,MAAMO,EAAgB,CAAC,EAEvB,IAAK,MAAMG,KAAQrD,OAECqE,IAAhBrE,EAAMqD,IACiB,mBAAhBrD,EAAMqD,KAEbH,EAAcG,GAAQrD,EAAMqD,IAIhCO,EAAAA,GAAYpB,EAAKE,EAAMQ,EACzB,CAEA,OAAOV,CAAG,GACT,CAAC,GAEE8B,EAAgBpE,OAAOoC,SAC3BX,aAAa,EAAbA,EAAeO,UAAW,CAAC,GAC3BK,QAAO,CAACC,EAAG+B,KAAqB,IAAlB7B,EAAM1C,GAAMuE,EAC1B,GAAI7B,EAAKC,WAAW,KAAM,CACxB,MAAMO,EAAgB,CAAC,EAEvB,IAAK,MAAMG,KAAQrD,OAECqE,IAAhBrE,EAAMqD,IACiB,mBAAhBrD,EAAMqD,KAEbH,EAAcG,GAAQrD,EAAMqD,IAIhCO,EAAAA,GAAYpB,EAAKE,EAAMQ,EACzB,CAEA,OAAOV,CAAG,GACT,CAAC,GAMJ,OAJ+B,IAA3BH,EAAOyB,SAASb,eACXZ,EAAOyB,SAGT,CACLzB,SACAT,KAAMI,EAAQE,QACdiC,gBACAG,gBACD,GACA,CAAC5C,EAAeF,EAAYG,IAY/B,OAVIE,IACEJ,GACF+C,QAAQ/C,IAAIU,IAAWE,QAGrBd,IACFA,EAAYW,QAAUC,IAInBzB,CACT,C,2FCnKe,SAAS+D,EAAazE,GACnC,MAAM,IAAEyB,EAAG,YAAEF,EAAW,WAAEC,EAAU,SAAEd,GAAaV,GAAS,CAAC,GACvD,cAAE0B,EAAa,cAAEC,EAAa,KAAEC,EAAI,WAAEC,IAC1CC,EAAAA,EAAAA,YAAWC,EAAAA,IAEGE,EAAAA,EAAAA,QAAmB,CAAC,GAC5BC,QAAUN,EAElB,MAAMO,GAAWC,EAAAA,EAAAA,cAAY,KAC3B,MAAM+B,EAAgBjE,OAAOoC,SAC3BZ,aAAa,EAAbA,EAAeQ,UAAW,CAAC,GAC3BK,QAAO,CAACC,EAAGC,KAAqB,IAAlBC,EAAM1C,GAAMyC,EAC1B,GAAIC,EAAKC,WAAW,KAAM,CACxB,MAAMO,EAAgB,CAAC,EAEvB,IAAK,MAAMG,KAAQrD,OAECqE,IAAhBrE,EAAMqD,IACiB,mBAAhBrD,EAAMqD,KACZqB,EAAAA,EAAAA,gBAAe1E,EAAMqD,MAEtBH,EAAcG,GAAQrD,EAAMqD,KAIL,KAAvB7B,aAAU,EAAVA,EAAakB,KACfkB,EAAAA,GAAYpB,EAAKE,EAAMQ,EAE3B,CAEA,OAAOV,CAAG,GACT,CAAC,GAEE8B,EAAgBpE,OAAOoC,SAC3BX,aAAa,EAAbA,EAAeO,UAAW,CAAC,GAC3BK,QAAO,CAACC,EAAG4B,KAAqB,IAAlB1B,EAAM1C,GAAMoE,EAC1B,GAAI1B,EAAKC,WAAW,KAAM,CACxB,MAAMO,EAAgB,CAAC,EAEvB,IAAK,MAAMG,KAAQrD,OAECqE,IAAhBrE,EAAMqD,IACiB,mBAAhBrD,EAAMqD,KACZqB,EAAAA,EAAAA,gBAAe1E,EAAMqD,MAEtBH,EAAcG,GAAQrD,EAAMqD,KAIL,KAAvB7B,aAAU,EAAVA,EAAakB,KACfkB,EAAAA,GAAYpB,EAAKE,EAAMQ,EAE3B,CAEA,OAAOV,CAAG,GACT,CAAC,GAEJ,MAAO,CAAE2B,gBAAeG,gBAAe,GACtC,CAAC5C,EAAeF,EAAYG,IAY/B,OAVIE,IACEJ,GACF+C,QAAQ/C,IAAIU,KAGVZ,IACFA,EAAYW,QAAUC,IAInBzB,CACT,C,gFClFA,SAASiE,EAAGlC,GASR,IATS,YACXmC,EAAW,MACXC,EACAjD,KAAMkD,KACH9E,GAKJyC,EACC,MAAM,KAAEb,IAASE,EAAAA,EAAAA,YAAWC,EAAAA,GAE5B,OACEvB,EAAAA,EAAAA,MAACuE,EAAAA,EAAO,CACNC,QAAQ,SACRC,gBAAgB,cAChBC,MAAO,CAAEC,SAAU,QACnBC,YAAU,KACNpF,EAAKU,SAAA,CAERmE,IACClE,EAAAA,EAAAA,KAAC0E,EAAAA,EAAS,CAACC,QAAM,EAAA5E,UACfC,EAAAA,EAAAA,KAAA,KAAAD,SAAImE,OAGRrE,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CACGkE,GAA+D,IAAhD1E,OAAOqF,MAAMT,QAAAA,EAAWlD,IAAS,CAAC,GAAGqB,OACjD2B,EACAY,KAAKC,UACHC,EAAuBZ,QAAAA,EAAWlD,GAClC,KACA,GAEL,SAIT,CAQA,SAAS8D,EACPC,EACAC,GAEA,YAFW,IAAXA,IAAAA,EAAc,kBAEO,IAAVD,EACFC,EACED,GAA0B,iBAAVA,GAAsBA,IAAUC,EAClD,IACFD,KACAzF,OAAO2F,YACR3F,OAAOoC,QAAQqD,GAAOG,KAAI1B,IAAA,IAAE2B,EAAGC,GAAE5B,EAAA,MAAK,CACpC2B,EACAL,EAAuBM,GACxB,MAIEL,CAEX,CAEAhB,EAAIsB,uBAAwB,EAC5B,K","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/demo-cases/casedemo1.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/demo-cases/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/GenerateSchema.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/ListAllProps.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/Log.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {BecomeCorporateCustomer} from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Case Demo 1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Below, you can extend the demo code.\"\n    }), \"\\n\", _jsx(BecomeCorporateCustomer, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import * as React from 'react'\nimport { Flex } from '@dnb/eufemia/src'\nimport {\n  Form,\n  Field,\n  Value,\n  Wizard,\n  Tools,\n} from '@dnb/eufemia/src/extensions/forms'\nimport { Provider } from '@dnb/eufemia/src/shared'\nimport ComponentBox from '../../../../../shared/tags/ComponentBox'\n\nexport const BecomeCorporateCustomer = () => {\n  return (\n    <ComponentBox hideCode scope={{ Tools }}>\n      {() => {\n        const Output = () => {\n          const { data } = Form.useData('example-form', {\n            website: 'www.dnb.no',\n          })\n\n          return <Tools.Log data={data} top bottom=\"large\" />\n        }\n\n        const MyForm = () => {\n          // Routers like \"react-router\" are supported as well\n          Wizard.useQueryLocator('example-wizard')\n\n          return (\n            <Form.Handler\n              id=\"example-form\"\n              onSubmit={(data) => console.log('onSubmit', data)}\n            >\n              <Wizard.Container id=\"example-wizard\" top>\n                <Wizard.Step title=\"Bedriftsopplysninger\">\n                  <Form.MainHeading>Bedriftsopplysninger</Form.MainHeading>\n\n                  <Form.Card>\n                    <Field.OrganizationNumber\n                      path=\"/companyOrganizationNumber\"\n                      required\n                    />\n                    <Field.Name.Company path=\"/companyName\" required />\n                    <Field.String\n                      path=\"/companyAddress\"\n                      label=\"Forretningsadresse (NB! Ikke postadresse)\"\n                      required\n                    />\n                    <Field.PostalCodeAndCity\n                      postalCode={{\n                        path: '/companyPostalCode',\n                      }}\n                      city={{\n                        path: '/companyCity',\n                      }}\n                    />\n                    <Field.Selection\n                      variant=\"radio\"\n                      path=\"/postalAddressSelect\"\n                      label=\"Postadresse (Ã¸nsket sted for tilsendt post)\"\n                    >\n                      <Field.Option\n                        value=\"companyAddress\"\n                        title=\"Samme som forretningsadresse\"\n                      />\n                      <Field.Option value=\"other\" title=\"Annet\" />\n                    </Field.Selection>\n                    <Field.Selection\n                      variant=\"radio\"\n                      path=\"/hqAddress\"\n                      label=\"Hovedkontoradresse\"\n                    >\n                      <Field.Option\n                        value=\"companyAddress\"\n                        title=\"Samme som forretningsadresse\"\n                      />\n                      <Field.Option\n                        value=\"postalAddress\"\n                        title=\"Samme som postadresse\"\n                      />\n                      <Field.Option value=\"other\" title=\"Annet\" />\n                    </Field.Selection>\n                    <Field.SelectCountry\n                      path=\"/countryOfEstablishment\"\n                      label=\"Etableringsland\"\n                      required\n                    />\n                  </Form.Card>\n\n                  <Form.Card>\n                    <Field.PhoneNumber\n                      path=\"/phoneNumber\"\n                      label=\"Telefon/mobilnummer\"\n                      required\n                    />\n                    <Field.Email path=\"/email\" required />\n                    <Field.String\n                      path=\"/website\"\n                      label=\"Nettstedsadresse (valgfritt)\"\n                    />\n                  </Form.Card>\n\n                  <Wizard.Buttons />\n                </Wizard.Step>\n\n                <Wizard.Step title=\"Kontaktperson\">\n                  <Form.MainHeading>Profile</Form.MainHeading>\n\n                  <Form.Card>\n                    <Form.SubHeading>More information</Form.SubHeading>\n\n                    <Field.NationalIdentityNumber path=\"/ssn\" />\n                    <Field.Email path=\"/email\" />\n                    <Field.PhoneNumber path=\"/phone\" />\n                  </Form.Card>\n\n                  <Wizard.Buttons />\n                </Wizard.Step>\n\n                <Wizard.Step title=\"Bedriftens virksomhet\">\n                  <em>Bedriftens virksomhet</em>\n                </Wizard.Step>\n\n                <Wizard.Step title=\"Bruk av DNBs tjenester\">\n                  <em>Bruk av DNBs tjenester</em>\n                </Wizard.Step>\n\n                <Wizard.Step title=\"Inntekt og egenkapital\">\n                  <em>Inntekt og egenkapital</em>\n                </Wizard.Step>\n\n                <Wizard.Step title=\"Skatterapportering\">\n                  <em>Skatterapportering</em>\n                </Wizard.Step>\n\n                <Wizard.Step title=\"Eierskap og kontroll\">...</Wizard.Step>\n\n                <Wizard.Step title=\"Roller i bedriften\">...</Wizard.Step>\n\n                <Wizard.Step title=\"Oppsummering\">\n                  <Form.MainHeading>Profile</Form.MainHeading>\n\n                  <Form.Card>\n                    <Flex.Container>\n                      <Value.String path=\"/firstName\" />\n                      <Value.String path=\"/lastName\" />\n                    </Flex.Container>\n\n                    <Value.NationalIdentityNumber path=\"/ssn\" />\n                    <Value.Email path=\"/email\" />\n                    <Value.PhoneNumber path=\"/phone\" />\n                  </Form.Card>\n\n                  <Form.ButtonRow>\n                    <Wizard.Buttons />\n                    <Form.SubmitButton />\n                  </Form.ButtonRow>\n                </Wizard.Step>\n\n                <Wizard.Step title=\"Kvittering\">Kvittering...</Wizard.Step>\n              </Wizard.Container>\n            </Form.Handler>\n          )\n        }\n\n        return (\n          <>\n            <MyForm />\n            <Output />\n          </>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport function PizzaDemo() {\n  return (\n    <ComponentBox hideCode scope={{ Tools }}>\n      {() => {\n        const MyForm = () => {\n          // Routers like \"react-router\" are supported as well\n          Wizard.useQueryLocator('my-wizard')\n          const { summaryTitle } = Form.useLocale().Step\n\n          return (\n            <Provider locale=\"en-GB\">\n              <Form.Handler\n                onSubmit={(data) => console.log('onSubmit', data)}\n                sessionStorageId=\"pizza-form\"\n              >\n                <Wizard.Container id=\"my-wizard\">\n                  <Wizard.Step title=\"Which pizza do you want?\">\n                    <Form.MainHeading>\n                      Which pizza do you want?\n                    </Form.MainHeading>\n\n                    <Form.Card>\n                      <Form.SubHeading>Your Pizza</Form.SubHeading>\n                      <Field.Selection\n                        variant=\"button\"\n                        label=\"Choose a flavour\"\n                        path=\"/flavour\"\n                        required\n                      >\n                        <Field.Option\n                          value=\"pepperoni\"\n                          title=\"Pepperoni\"\n                        />\n                        <Field.Option\n                          value=\"margarita\"\n                          title=\"Margarita\"\n                        />\n                        <Field.Option value=\"parma\" title=\"Parma\" />\n                      </Field.Selection>\n                    </Form.Card>\n\n                    <Form.Card>\n                      <Form.SubHeading>Allergies</Form.SubHeading>\n                      <Field.Boolean\n                        label=\"Do you have any allergies?\"\n                        path=\"/hasAllergies\"\n                        variant=\"buttons\"\n                        required\n                      />\n\n                      <Form.Visibility pathTrue=\"/hasAllergies\" animate>\n                        <Field.String\n                          label=\"Write down your allergies\"\n                          path=\"/allergies\"\n                          required // only if visible ð\n                        />\n                      </Form.Visibility>\n                    </Form.Card>\n\n                    <Wizard.Buttons />\n                  </Wizard.Step>\n\n                  <Wizard.Step title=\"Delivery address\">\n                    <Form.MainHeading>Delivery address</Form.MainHeading>\n\n                    <Form.Card>\n                      <Form.SubHeading>Your name</Form.SubHeading>\n                      <Field.Name.First path=\"/firstName\" required />\n                      <Field.Name.Last path=\"/lastName\" required />\n                    </Form.Card>\n\n                    <Form.Card>\n                      <Form.SubHeading>Your address</Form.SubHeading>\n\n                      <Field.Composition width=\"large\">\n                        <Field.String\n                          label=\"Street\"\n                          width=\"stretch\"\n                          path=\"/streetName\"\n                          required\n                        />\n                        <Field.Number\n                          label=\"Nr.\"\n                          width=\"small\"\n                          path=\"/streetNr\"\n                          required\n                        />\n                      </Field.Composition>\n\n                      <Field.PostalCodeAndCity\n                        postalCode={{\n                          required: true,\n                          path: '/postalCode',\n                        }}\n                        city={{ required: true, path: '/city' }}\n                      />\n                    </Form.Card>\n\n                    <Wizard.Buttons />\n                  </Wizard.Step>\n\n                  <Wizard.Step title={summaryTitle}>\n                    <Form.MainHeading>Summary</Form.MainHeading>\n\n                    <Form.Card>\n                      <Value.SummaryList>\n                        <Value.String label=\"My flavour\" path=\"/flavour\" />\n                        <Value.Boolean\n                          label=\"I have allergies\"\n                          path=\"/hasAllergies\"\n                        />\n                        <Value.String\n                          label=\"My allergies\"\n                          path=\"/allergies\"\n                        />\n                      </Value.SummaryList>\n                    </Form.Card>\n\n                    <Form.Card>\n                      <Value.SummaryList layout=\"grid\">\n                        <Value.Name.First path=\"/firstName\" />\n                        <Value.Name.Last path=\"/lastName\" />\n\n                        <Value.String label=\"Street\" path=\"/streetName\" />\n                        <Value.Number label=\"Nr.\" path=\"/streetNr\" />\n\n                        <Value.String\n                          label=\"Postal Code\"\n                          path=\"/postalCode\"\n                        />\n                        <Value.String label=\"City\" path=\"/city\" />\n                      </Value.SummaryList>\n                    </Form.Card>\n\n                    <Form.ButtonRow>\n                      <Wizard.Buttons />\n                      <Form.SubmitButton />\n                    </Form.ButtonRow>\n                  </Wizard.Step>\n                </Wizard.Container>\n              </Form.Handler>\n\n              <Tools.Log />\n            </Provider>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n","import { useCallback, useContext, useRef } from 'react'\nimport pointer, { JsonObject } from '../utils/json-pointer'\nimport DataContext, { FilterData } from '../DataContext/Context'\nimport { JSONSchema } from '../types'\n\nexport type GenerateSchemaReturn = {\n  schema: JSONSchema\n  data: JsonObject\n  propsOfFields: JsonObject\n  propsOfValues: JsonObject\n}\nexport type GenerateSchemaProps = {\n  log?: boolean\n  generateRef?: React.MutableRefObject<() => GenerateSchemaReturn>\n  filterData?: FilterData\n  children: React.ReactNode\n}\nexport type GenerateRef = GenerateSchemaProps['generateRef']['current']\n\nexport const schemaParams = [\n  'minLength',\n  'maxLength',\n  'pattern',\n  'description',\n  'min',\n  'max',\n  'multipleOf',\n  'exclusiveMinimum',\n  'exclusiveMaximum',\n]\n\nexport default function GenerateSchema(props: GenerateSchemaProps) {\n  const { generateRef, filterData, log, children } = props || {}\n  const { fieldPropsRef, valuePropsRef, data, hasContext } =\n    useContext(DataContext)\n\n  const dataRef = useRef<JsonObject>({})\n  dataRef.current = data\n\n  const generate = useCallback(() => {\n    const schema = Object.entries(fieldPropsRef?.current || {}).reduce(\n      (acc, [path, props]) => {\n        if (path.startsWith('/')) {\n          const objectKey = path.substring(1)\n\n          const pathList = objectKey.split('/')\n          const slashCount = pathList.length\n\n          const type = props.valueType || 'string'\n          const propertyValue = {\n            type,\n          }\n\n          for (const prop of schemaParams) {\n            if (props[prop]) {\n              propertyValue[prop] = props[prop]\n            }\n          }\n\n          if (slashCount > 1) {\n            const nestedPath = ['']\n            for (const path of pathList) {\n              nestedPath.push(path)\n              const pathToSet = nestedPath.join('/properties/')\n              const isLast = nestedPath.length - 1 === pathList.length\n\n              const existingValue = pointer.has(acc, pathToSet)\n                ? pointer.get(acc, pathToSet)\n                : null\n\n              const pathValue = isLast ? propertyValue : existingValue\n\n              if (isLast) {\n                if (filterData?.[pathToSet] !== false) {\n                  pointer.set(acc, pathToSet, pathValue)\n                }\n              } else {\n                const pathValue = {\n                  type: 'object',\n                  ...existingValue,\n                }\n\n                // - Add required\n                const required = []\n                if (props.required) {\n                  required.push(pathList.at(-1))\n                }\n                if (existingValue?.required) {\n                  required.push(...existingValue.required)\n                }\n                if (required.length > 0) {\n                  pathValue.required = required\n                }\n\n                if (filterData?.[pathToSet] !== false) {\n                  pointer.set(acc, pathToSet, pathValue)\n                }\n              }\n            }\n          } else {\n            if (filterData?.[path] !== false) {\n              pointer.set(acc.properties, path, propertyValue)\n            }\n            if (props.required) {\n              acc.required.push(objectKey)\n            }\n          }\n        }\n\n        return acc\n      },\n      { type: 'object', properties: {}, required: [] }\n    )\n\n    const propsOfFields = Object.entries(\n      fieldPropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function'\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        pointer.set(acc, path, propertyValue)\n      }\n\n      return acc\n    }, {})\n\n    const propsOfValues = Object.entries(\n      valuePropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function'\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        pointer.set(acc, path, propertyValue)\n      }\n\n      return acc\n    }, {})\n\n    if (schema.required.length === 0) {\n      delete schema.required\n    }\n\n    return {\n      schema,\n      data: dataRef.current,\n      propsOfFields,\n      propsOfValues,\n    } as GenerateSchemaReturn\n  }, [fieldPropsRef, filterData, valuePropsRef])\n\n  if (hasContext) {\n    if (log) {\n      console.log(generate().schema)\n    }\n\n    if (generateRef) {\n      generateRef.current = generate\n    }\n  }\n\n  return children\n}\n","import { isValidElement, useCallback, useContext, useRef } from 'react'\nimport pointer, { JsonObject } from '../utils/json-pointer'\nimport DataContext, { FilterData } from '../DataContext/Context'\n\nexport type ListAllPropsReturn = {\n  propsOfFields: JsonObject\n  propsOfValues: JsonObject\n}\nexport type ListAllPropsProps = {\n  log?: boolean\n  generateRef?: React.MutableRefObject<() => ListAllPropsReturn>\n  filterData?: FilterData\n  children: React.ReactNode\n}\nexport type GenerateRef = ListAllPropsProps['generateRef']['current']\n\nexport default function ListAllProps(props: ListAllPropsProps) {\n  const { log, generateRef, filterData, children } = props || {}\n  const { fieldPropsRef, valuePropsRef, data, hasContext } =\n    useContext(DataContext)\n\n  const dataRef = useRef<JsonObject>({})\n  dataRef.current = data\n\n  const generate = useCallback(() => {\n    const propsOfFields = Object.entries(\n      fieldPropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function' &&\n            !isValidElement(props[prop])\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        if (filterData?.[path] !== false) {\n          pointer.set(acc, path, propertyValue)\n        }\n      }\n\n      return acc\n    }, {})\n\n    const propsOfValues = Object.entries(\n      valuePropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function' &&\n            !isValidElement(props[prop])\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        if (filterData?.[path] !== false) {\n          pointer.set(acc, path, propertyValue)\n        }\n      }\n\n      return acc\n    }, {})\n\n    return { propsOfFields, propsOfValues } as ListAllPropsReturn\n  }, [fieldPropsRef, filterData, valuePropsRef])\n\n  if (hasContext) {\n    if (log) {\n      console.log(generate())\n    }\n\n    if (generateRef) {\n      generateRef.current = generate\n    }\n  }\n\n  return children\n}\n","import React, { useContext } from 'react'\nimport DataContext from '../DataContext/Context'\nimport Section, { SectionAllProps } from '../../../components/Section'\nimport { FormLabel } from '../../../components'\n\nfunction Log({\n  placeholder,\n  label,\n  data: logData,\n  ...props\n}: Omit<SectionAllProps, 'data' | 'label'> & {\n  data?: unknown\n  label?: React.ReactNode\n  placeholder?: React.ReactNode\n}) {\n  const { data } = useContext(DataContext)\n\n  return (\n    <Section\n      element=\"output\"\n      backgroundColor=\"sand-yellow\"\n      style={{ maxWidth: '80vw' }}\n      innerSpace\n      {...props}\n    >\n      {label && (\n        <FormLabel bottom>\n          <b>{label}</b>\n        </FormLabel>\n      )}\n      <pre>\n        {placeholder && Object.keys((logData ?? data) || {}).length === 0\n          ? placeholder\n          : JSON.stringify(\n              replaceUndefinedValues(logData ?? data),\n              null,\n              2\n            )}\n        {'Â ' /* Ensure one line of spacing */}\n      </pre>\n    </Section>\n  )\n}\n\n/**\n * Replaces undefined values in an object with a specified replacement value.\n * @param value - The value to check for undefined values.\n * @param replaceWith - The value to replace undefined values with. Default is null.\n * @returns The object with undefined values replaced.\n */\nfunction replaceUndefinedValues(\n  value: unknown,\n  replaceWith = 'undefined' as unknown\n): unknown {\n  if (typeof value === 'undefined') {\n    return replaceWith\n  } else if (value && typeof value === 'object' && value !== replaceWith) {\n    return {\n      ...value,\n      ...Object.fromEntries(\n        Object.entries(value).map(([k, v]) => [\n          k,\n          replaceUndefinedValues(v),\n        ])\n      ),\n    }\n  } else {\n    return value\n  }\n}\n\nLog._supportsSpacingProps = true\nexport default Log\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","_provideComponents","components","_jsxs","_Fragment","children","_jsx","BecomeCorporateCustomer","wrapper","MDXLayout","ComponentBox","hideCode","scope","Tools","noInline","PizzaDemo","schemaParams","GenerateSchema","generateRef","filterData","log","fieldPropsRef","valuePropsRef","data","hasContext","useContext","DataContext","dataRef","useRef","current","generate","useCallback","schema","entries","reduce","acc","_ref","path","startsWith","objectKey","substring","pathList","split","slashCount","length","propertyValue","type","valueType","prop","nestedPath","push","pathToSet","join","isLast","existingValue","pointer","pathValue","required","at","apply","_toConsumableArray","properties","propsOfFields","_ref2","undefined","propsOfValues","_ref3","console","ListAllProps","isValidElement","Log","placeholder","label","logData","Section","element","backgroundColor","style","maxWidth","innerSpace","FormLabel","bottom","keys","JSON","stringify","replaceUndefinedValues","value","replaceWith","fromEntries","map","k","v","_supportsSpacingProps"],"sourceRoot":""}