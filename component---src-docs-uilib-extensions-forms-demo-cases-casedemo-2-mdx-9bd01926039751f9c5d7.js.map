{"version":3,"file":"component---src-docs-uilib-extensions-forms-demo-cases-casedemo-2-mdx-9bd01926039751f9c5d7.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/demo-cases/casedemo2.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/demo-cases/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/StepsContext.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/Step/Step.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/NextButton/NextButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/PreviousButton/PreviousButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/Buttons/Buttons.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/StepsLayout.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/useStep.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/index.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {PizzaDemo} from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Case Demo 2\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Below, you can extend the demo code.\"\n    }), \"\\n\", _jsx(PizzaDemo, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { Section, Code, Card, Flex } from '@dnb/eufemia/src'\nimport * as React from 'react'\nimport {\n  Form,\n  StepsLayout,\n  Field,\n  Value,\n  FieldBlock,\n} from '@dnb/eufemia/src/extensions/forms'\nimport { Provider } from '@dnb/eufemia/src/shared'\nimport ComponentBox from '../../../../../shared/tags/ComponentBox'\n\nexport const BecomeCorporateCustomer = () => {\n  return (\n    <ComponentBox hideCode scope={{ StepsLayout }}>\n      {() => {\n        const Output = () => {\n          const { data } = Form.useData('example-form', {\n            website: 'www.dnb.no',\n          })\n\n          return (\n            <Section\n              element=\"output\"\n              innerSpace\n              backgroundColor=\"sand-yellow\"\n              top\n              bottom=\"large\"\n            >\n              JSON Output: <Code>{JSON.stringify(data, null, 4)}</Code>\n            </Section>\n          )\n        }\n\n        return (\n          <>\n            <Form.Handler\n              id=\"example-form\"\n              onSubmit={(data) => console.log('onSubmit', data)}\n            >\n              <StepsLayout top scrollTopOnStepChange>\n                <StepsLayout.Step title=\"Bedriftsopplysninger\">\n                  <Form.MainHeading>Bedriftsopplysninger</Form.MainHeading>\n\n                  <Card spacing=\"medium\">\n                    <Field.OrganizationNumber\n                      path=\"/companyOrganizationNumber\"\n                      required\n                    />\n                    <Field.String\n                      path=\"/companyName\"\n                      label=\"Bedriftens navn\"\n                      required\n                    />\n                    <Field.String\n                      path=\"/companyAddress\"\n                      label=\"Forretningsadresse (NB! Ikke postadresse)\"\n                      required\n                    />\n                    <Field.PostalCodeAndCity\n                      postalCode={{\n                        path: '/companyPostalCode',\n                      }}\n                      city={{\n                        path: '/companyCity',\n                      }}\n                    />\n                    <Field.Selection\n                      variant=\"radio\"\n                      path=\"/postalAddressSelect\"\n                      label=\"Postadresse (ønsket sted for tilsendt post)\"\n                    >\n                      <Field.Option\n                        value=\"companyAddress\"\n                        title=\"Samme som forretningsadresse\"\n                      />\n                      <Field.Option value=\"other\" title=\"Annet\" />\n                    </Field.Selection>\n                    <Field.Selection\n                      variant=\"radio\"\n                      path=\"/hqAddress\"\n                      label=\"Hovedkontoradresse\"\n                    >\n                      <Field.Option\n                        value=\"companyAddress\"\n                        title=\"Samme som forretningsadresse\"\n                      />\n                      <Field.Option\n                        value=\"postalAddress\"\n                        title=\"Samme som postadresse\"\n                      />\n                      <Field.Option value=\"other\" title=\"Annet\" />\n                    </Field.Selection>\n                    <Field.SelectCountry\n                      path=\"/countryOfEstablishment\"\n                      label=\"Etableringsland\"\n                      required\n                    />\n                  </Card>\n\n                  <Card spacing=\"medium\">\n                    <Field.PhoneNumber\n                      path=\"/phoneNumber\"\n                      label=\"Telefon/mobilnummer\"\n                      required\n                    />\n                    <Field.Email path=\"/email\" required />\n                    <Field.String\n                      path=\"/website\"\n                      label=\"Nettstedsadresse (valgfritt)\"\n                    />\n                  </Card>\n\n                  <Form.ButtonRow>\n                    <StepsLayout.NextButton />\n                  </Form.ButtonRow>\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Kontaktperson\">\n                  <Form.MainHeading>Profile</Form.MainHeading>\n\n                  <Card stack>\n                    <Form.SubHeading>More information</Form.SubHeading>\n\n                    <Field.NationalIdentityNumber path=\"/ssn\" />\n                    <Field.Email path=\"/email\" />\n                    <Field.PhoneNumber path=\"/phone\" />\n                  </Card>\n\n                  <Form.ButtonRow>\n                    <StepsLayout.PreviousButton />\n                    <StepsLayout.NextButton />\n                  </Form.ButtonRow>\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Bedriftens virksomhet\">\n                  <em>Bedriftens virksomhet</em>\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Bruk av DNBs tjenester\">\n                  <em>Bruk av DNBs tjenester</em>\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Inntekt og egenkapital\">\n                  <em>Inntekt og egenkapital</em>\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Skatterapportering\">\n                  <em>Skatterapportering</em>\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Eierskap og kontroll\">\n                  ...\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Roller i bedriften\">\n                  ...\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Oppsummering\">\n                  <Form.MainHeading>Profile</Form.MainHeading>\n\n                  <Card stack>\n                    <Flex.Container>\n                      <Value.String path=\"/firstName\" />\n                      <Value.String path=\"/lastName\" />\n                    </Flex.Container>\n\n                    <Value.NationalIdentityNumber path=\"/ssn\" />\n                    <Value.Email path=\"/email\" />\n                    <Value.PhoneNumber path=\"/phone\" />\n                  </Card>\n\n                  <Form.ButtonRow>\n                    <StepsLayout.PreviousButton />\n                    <Form.SubmitButton />\n                  </Form.ButtonRow>\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Kvittering\">\n                  Kvittering...\n                </StepsLayout.Step>\n              </StepsLayout>\n            </Form.Handler>\n\n            <Output />\n          </>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport function PizzaDemo() {\n  return (\n    <ComponentBox hideCode scope={{ StepsLayout }}>\n      {() => {\n        const Output = () => {\n          const { data } = Form.useData('pizza-demo', {})\n\n          return (\n            <Section\n              element=\"output\"\n              innerSpace\n              backgroundColor=\"sand-yellow\"\n              top\n              bottom=\"large\"\n            >\n              JSON Output: <Code>{JSON.stringify(data, null, 4)}</Code>\n            </Section>\n          )\n        }\n\n        return (\n          <Provider locale=\"en-GB\">\n            <Form.Handler\n              onSubmit={(data) => console.log('onSubmit', data)}\n              id=\"pizza-demo\"\n              sessionStorageId=\"pizza-form\"\n            >\n              <StepsLayout scrollTopOnStepChange>\n                <StepsLayout.Step title=\"Which pizza do you want?\">\n                  <Form.MainHeading>\n                    Which pizza do you want?\n                  </Form.MainHeading>\n\n                  <Card stack>\n                    <Form.SubHeading>Your Pizza</Form.SubHeading>\n                    <Field.Selection\n                      variant=\"button\"\n                      label=\"Choose a flavour\"\n                      path=\"/flavour\"\n                      required\n                    >\n                      <Field.Option value=\"pepperoni\" title=\"Pepperoni\" />\n                      <Field.Option value=\"margarita\" title=\"Margarita\" />\n                      <Field.Option value=\"parma\" title=\"Parma\" />\n                    </Field.Selection>\n                  </Card>\n\n                  <Card stack>\n                    <Form.SubHeading>Allergies</Form.SubHeading>\n                    <Field.Boolean\n                      label=\"Do you have any allergies?\"\n                      path=\"/hasAllergies\"\n                      variant=\"buttons\"\n                      required\n                    />\n\n                    <Form.Visibility pathTrue=\"/hasAllergies\" animate>\n                      <Field.String\n                        label=\"Write down your allergies\"\n                        path=\"/allergies\"\n                        required // only if visible 👌\n                      />\n                    </Form.Visibility>\n                  </Card>\n\n                  <Form.ButtonRow>\n                    <StepsLayout.NextButton />\n                  </Form.ButtonRow>\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Delivery address\">\n                  <Form.MainHeading>Delivery address</Form.MainHeading>\n\n                  <Card stack>\n                    <Form.SubHeading>Your name</Form.SubHeading>\n\n                    <Field.String\n                      label=\"First name\"\n                      path=\"/firstName\"\n                      required\n                    />\n                    <Field.String\n                      label=\"Last name\"\n                      path=\"/lastName\"\n                      required\n                    />\n                  </Card>\n\n                  <Card stack>\n                    <Form.SubHeading>Your address</Form.SubHeading>\n\n                    <FieldBlock width=\"large\" composition>\n                      <Field.String\n                        label=\"Street\"\n                        width=\"stretch\"\n                        path=\"/streetName\"\n                        required\n                      />\n                      <Field.Number\n                        label=\"Nr.\"\n                        width=\"small\"\n                        path=\"/streetNr\"\n                        required\n                      />\n                    </FieldBlock>\n\n                    <Field.PostalCodeAndCity\n                      postalCode={{\n                        required: true,\n                        path: '/postalCode',\n                      }}\n                      city={{ required: true, path: '/city' }}\n                    />\n                  </Card>\n\n                  <Form.ButtonRow>\n                    <StepsLayout.PreviousButton />\n                    <StepsLayout.NextButton />\n                  </Form.ButtonRow>\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Summary\">\n                  <Form.MainHeading>Summary</Form.MainHeading>\n\n                  <Card stack>\n                    <Value.String label=\"My flavour\" path=\"/flavour\" />\n                    <Value.Boolean\n                      label=\"I have allergies\"\n                      path=\"/hasAllergies\"\n                    />\n                    <Value.String label=\"My allergies\" path=\"/allergies\" />\n                  </Card>\n\n                  <Card stack>\n                    <Flex.Horizontal>\n                      <Value.String label=\"First name\" path=\"/firstName\" />\n                      <Value.String label=\"Last name\" path=\"/lastName\" />\n                    </Flex.Horizontal>\n\n                    <Flex.Horizontal>\n                      <Value.String label=\"Street\" path=\"/streetName\" />\n                      <Value.Number label=\"Nr.\" path=\"/streetNr\" />\n                    </Flex.Horizontal>\n\n                    <Flex.Horizontal>\n                      <Value.String\n                        label=\"Postal Code\"\n                        path=\"/postalCode\"\n                      />\n                      <Value.String label=\"City\" path=\"/city\" />\n                    </Flex.Horizontal>\n                  </Card>\n\n                  <Form.ButtonRow>\n                    <StepsLayout.PreviousButton />\n                    <Form.SubmitButton />\n                  </Form.ButtonRow>\n                </StepsLayout.Step>\n              </StepsLayout>\n            </Form.Handler>\n\n            <Output />\n          </Provider>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n","import React from 'react'\n\nexport type StepIndex = number\nexport interface StepsContextState {\n  activeIndex?: StepIndex\n  handlePrevious?: () => void\n  handleNext?: () => void\n  setActiveIndex?: (index: StepIndex) => void\n}\n\nconst StepsContext = React.createContext<StepsContextState | undefined>({\n  activeIndex: 0,\n  setActiveIndex: () => null,\n  handlePrevious: () => null,\n  handleNext: () => null,\n})\n\nexport default StepsContext\n","import React, { useContext } from 'react'\nimport classnames from 'classnames'\nimport { ComponentProps } from '../../types'\nimport {\n  Props as FlexContainerProps,\n  pickFlexContainerProps,\n} from '../../../../components/flex/Container'\nimport StepsContext from '../StepsContext'\nimport Flex from '../../../../components/flex/Flex'\n\nexport type Props = ComponentProps &\n  FlexContainerProps & {\n    index?: number\n    title?: string\n  }\n\nfunction Step(props: Props) {\n  const { className, index, children } = props\n  const stepsContext = useContext(StepsContext)\n\n  if (stepsContext?.activeIndex !== index) {\n    // Another step is active\n    return null\n  }\n\n  return (\n    <Flex.Stack\n      className={classnames('dnb-forms-step', className)}\n      {...pickFlexContainerProps(props)}\n    >\n      {children}\n    </Flex.Stack>\n  )\n}\n\nStep._supportsSpacingProps = true\nexport default Step\n","import React, { useContext } from 'react'\nimport classnames from 'classnames'\nimport type { ComponentProps } from '../../types'\nimport { ButtonProps } from '../../../../components/button/Button'\nimport SharedContext from '../../../../shared/Context'\nimport StepsContext from '../StepsContext'\nimport ButtonRow from '../../Form/ButtonRow'\nimport SubmitButton from '../../Form/SubmitButton'\n\nexport type Props = ComponentProps & ButtonProps\n\nfunction NextButton(props: Props) {\n  const sharedContext = useContext(SharedContext)\n  const {\n    className,\n    variant = 'primary',\n    icon_position = 'right',\n    icon = 'chevron_right',\n    children = sharedContext?.translation.Forms.stepNext,\n  } = props\n  const stepsContext = useContext(StepsContext)\n\n  return (\n    <ButtonRow>\n      {/* Use SubmitButton to inherit the indicator functionality */}\n      <SubmitButton\n        type=\"button\"\n        className={classnames('dnb-forms-next-button', className)}\n        onClick={stepsContext?.handleNext}\n        variant={variant}\n        icon_position={icon_position}\n        icon={icon}\n        {...props}\n      >\n        {children}\n      </SubmitButton>\n    </ButtonRow>\n  )\n}\n\nNextButton._supportsSpacingProps = true\nexport default NextButton\n","import React, { useContext } from 'react'\nimport classnames from 'classnames'\nimport type { ComponentProps } from '../../types'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/button/Button'\nimport SharedContext from '../../../../shared/Context'\nimport StepsContext from '../StepsContext'\nimport ButtonRow from '../../Form/ButtonRow'\n\nexport type Props = ComponentProps & ButtonProps\n\nfunction PreviousButton(props: Props) {\n  const sharedContext = useContext(SharedContext)\n  const {\n    className,\n    variant = 'tertiary',\n    icon_position = 'left',\n    icon = 'chevron_left',\n    children = sharedContext?.translation.Forms.stepPrevious,\n  } = props\n  const stepsContext = useContext(StepsContext)\n\n  const params: Props = {}\n  if (stepsContext?.activeIndex === 0) {\n    params.disabled = true\n  }\n\n  return (\n    <ButtonRow>\n      <Button\n        className={classnames('dnb-forms-previous-button', className)}\n        onClick={stepsContext?.handlePrevious}\n        variant={variant}\n        icon_position={icon_position}\n        icon={icon}\n        {...params}\n        {...props}\n      >\n        {children}\n      </Button>\n    </ButtonRow>\n  )\n}\n\nPreviousButton._supportsSpacingProps = true\nexport default PreviousButton\n","import React from 'react'\nimport classnames from 'classnames'\nimport { ComponentProps } from '../../types'\nimport ButtonRow from '../../Form/ButtonRow'\nimport NextButton from '../NextButton'\nimport PreviousButton from '../PreviousButton'\n\nexport type Props = ComponentProps & {\n  children?: string\n}\n\nfunction Buttons(props: Props) {\n  const { className } = props\n  return (\n    <ButtonRow\n      className={classnames('dnb-forms-buttons', className)}\n      {...props}\n    >\n      <PreviousButton />\n      <NextButton />\n    </ButtonRow>\n  )\n}\n\nButtons._supportsSpacingProps = true\nexport default Buttons\n","import React, {\n  useContext,\n  useCallback,\n  useRef,\n  useReducer,\n  useMemo,\n  useEffect,\n} from 'react'\nimport classnames from 'classnames'\nimport { Space, StepIndicator } from '../../../components'\nimport { warn } from '../../../shared/component-helper'\nimport { isAsync } from '../../../shared/helpers/isAsync'\nimport useId from '../../../shared/helpers/useId'\nimport DataContext from '../DataContext/Context'\nimport Step, { Props as StepProps } from './Step'\nimport StepsContext, { StepIndex, StepsContextState } from './StepsContext'\nimport NextButton from './NextButton'\nimport PreviousButton from './PreviousButton'\nimport Buttons from './Buttons'\nimport Provider from '../DataContext/Provider'\nimport { useSharedState } from '../../../shared/helpers/useSharedState'\nimport { useStep } from './useStep'\nimport { ComponentProps, EventReturnWithStateObject } from '../types'\n\nexport type Props = ComponentProps & {\n  id?: string\n  mode?: 'static' | 'strict' | 'loose'\n  scrollTopOnStepChange?: boolean\n  initialActiveIndex?: StepIndex\n  onStepChange?: (\n    index: StepIndex,\n    mode: 'previous' | 'next'\n  ) =>\n    | EventReturnWithStateObject\n    | void\n    | Promise<EventReturnWithStateObject | void>\n  children: React.ReactNode\n  variant?: 'sidebar' | 'drawer'\n  noAnimation?: boolean\n  sidebarId?: string\n}\n\nfunction StepsLayout(props: Props) {\n  const {\n    className,\n    id: _id,\n    mode = 'strict',\n    scrollTopOnStepChange,\n    initialActiveIndex = 0,\n    onStepChange,\n    children,\n    noAnimation = true,\n    variant = 'sidebar',\n    sidebarId,\n    ...rest\n  } = props\n\n  const {\n    hasContext,\n    setFormState,\n    handleSubmitCall,\n    setShowAllErrors,\n    showAllErrors,\n    scrollToTop,\n  } = useContext(DataContext)\n\n  const id = useId(_id)\n  const [, forceUpdate] = useReducer(() => ({}), {})\n  const activeIndexRef = useRef<StepIndex>(initialActiveIndex)\n  const errorOnStepRef = useRef<Record<StepIndex, boolean>>({})\n\n  // Store the current state of showAllErrors\n  errorOnStepRef.current[activeIndexRef.current] = showAllErrors\n\n  const callOnStepChange = useCallback(\n    async (index: StepIndex, mode: 'previous' | 'next') => {\n      if (isAsync(onStepChange)) {\n        return await onStepChange(index, mode)\n      }\n\n      return onStepChange?.(index, mode)\n    },\n    [onStepChange]\n  )\n\n  const handleStepChange = useCallback(\n    ({\n      index,\n      skipErrorCheck,\n      mode,\n    }: {\n      index: StepIndex\n      skipErrorCheck: boolean\n      mode: 'previous' | 'next'\n    }) => {\n      handleSubmitCall({\n        skipErrorCheck,\n        skipFieldValidation: skipErrorCheck,\n        enableAsyncBehaviour: isAsync(onStepChange),\n        onSubmit: async () => {\n          const result = await callOnStepChange(index, mode)\n\n          // Hide async indicator\n          setFormState('abort')\n\n          if (!skipErrorCheck) {\n            // Set the showAllErrors to the step we got to\n            setShowAllErrors(errorOnStepRef.current[index])\n          }\n\n          if (!(result instanceof Error)) {\n            activeIndexRef.current = index\n            forceUpdate()\n          }\n\n          if (scrollTopOnStepChange) {\n            scrollToTop()\n          }\n\n          return result\n        },\n      })\n    },\n    [\n      callOnStepChange,\n      handleSubmitCall,\n      onStepChange,\n      scrollToTop,\n      scrollTopOnStepChange,\n      setFormState,\n      setShowAllErrors,\n    ]\n  )\n\n  const setActiveIndex = useCallback(\n    (index: StepIndex, options?: { skipErrorCheck: boolean }) => {\n      if (index === activeIndexRef.current) {\n        return\n      }\n\n      const mode = index > activeIndexRef.current ? 'next' : 'previous'\n\n      handleStepChange({\n        index,\n        skipErrorCheck: mode === 'previous',\n        mode,\n        ...options,\n      })\n    },\n    [handleStepChange]\n  )\n\n  const handlePrevious = useCallback(() => {\n    setActiveIndex(activeIndexRef.current - 1)\n  }, [setActiveIndex])\n\n  const handleNext = useCallback(() => {\n    setActiveIndex(activeIndexRef.current + 1)\n  }, [setActiveIndex])\n\n  const handleChange = useCallback(\n    ({ current_step }) => {\n      setActiveIndex(current_step, { skipErrorCheck: true })\n    },\n    [setActiveIndex]\n  )\n\n  const providerValue = useMemo(\n    () => ({\n      activeIndex: activeIndexRef.current,\n      setActiveIndex,\n      handlePrevious,\n      handleNext,\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [activeIndexRef.current, setActiveIndex, handlePrevious, handleNext]\n  )\n\n  // - Handle shared state\n  const sharedState = useSharedState<StepsContextState>(\n    hasContext && id ? id + '-steps' : undefined\n  )\n  const { extend } = sharedState\n  useEffect(() => {\n    if (hasContext && id) {\n      extend(providerValue)\n    }\n  }, [id, extend, providerValue]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (!hasContext) {\n    warn('You may wrap StepsLayout in Form.Handler')\n    return (\n      <Provider>\n        <StepsLayout {...props} id={id} />\n      </Provider>\n    )\n  }\n\n  const titles = []\n  const contents = React.Children.map(children, (child, i) => {\n    if (React.isValidElement(child)) {\n      let step = child\n\n      if (child?.type !== Step && typeof child.type === 'function') {\n        step = child.type.apply(child.type, [\n          child.props,\n        ]) as React.ReactElement\n\n        if (step?.type === Step) {\n          child = step\n        }\n      }\n\n      if (child?.type === Step) {\n        titles.push(child.props.title ?? 'Title missing')\n        return React.cloneElement(child as React.ReactElement<StepProps>, {\n          index: i,\n        })\n      }\n    }\n\n    return child\n  })\n\n  return (\n    <StepsContext.Provider value={providerValue}>\n      <Space\n        className={classnames(\n          'dnb-forms-steps-layout',\n          variant === 'drawer' && 'dnb-forms-steps-layout--drawer',\n          className\n        )}\n        {...rest}\n      >\n        <aside className=\"dnb-forms-steps-layout__sidebar\">\n          <StepIndicator.Sidebar sidebar_id={id} />\n          <StepIndicator\n            bottom\n            current_step={activeIndexRef.current}\n            data={titles}\n            mode={mode}\n            no_animation={noAnimation}\n            on_change={handleChange}\n            sidebar_id={\n              variant === 'drawer' && !sidebarId\n                ? ''\n                : sidebarId\n                ? sidebarId\n                : id\n            }\n          />\n        </aside>\n\n        <div className=\"dnb-forms-steps-layout__contents\">{contents}</div>\n      </Space>\n    </StepsContext.Provider>\n  )\n}\n\nStepsLayout._supportsSpacingProps = true\n\nStepsLayout.Step = Step\nStepsLayout.NextButton = NextButton\nStepsLayout.PreviousButton = PreviousButton\nStepsLayout.Buttons = Buttons\nStepsLayout.useStep = useStep\n\nexport default StepsLayout\n","import { useContext, useRef } from 'react'\nimport StepsContext, { StepsContextState } from './StepsContext'\nimport { Identifier } from '../types'\nimport { useSharedState } from '../../../shared/helpers/useSharedState'\n\nexport function useStep(id: Identifier = null) {\n  const sharedDataRef =\n    useRef<ReturnType<typeof useSharedState<StepsContextState>>>(null)\n  sharedDataRef.current = useSharedState<StepsContextState>(\n    id ? id + '-steps' : undefined\n  )\n\n  const context = useContext(StepsContext)\n  return sharedDataRef.current.data || context\n}\n","import StepsLayout from './StepsLayout'\nexport { default as StepsContext } from './StepsContext'\n\nexport default StepsLayout\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PizzaDemo","wrapper","MDXLayout","BecomeCorporateCustomer","ComponentBox","hideCode","scope","StepsLayout","noInline","StepsContext","React","activeIndex","setActiveIndex","handlePrevious","handleNext","Step","className","index","stepsContext","useContext","Flex","classnames","pickFlexContainerProps","_supportsSpacingProps","NextButton","sharedContext","SharedContext","variant","icon_position","icon","translation","Forms","stepNext","ButtonRow","SubmitButton","type","onClick","PreviousButton","stepPrevious","params","disabled","Button","Buttons","id","_id","mode","scrollTopOnStepChange","initialActiveIndex","onStepChange","noAnimation","sidebarId","rest","hasContext","setFormState","handleSubmitCall","setShowAllErrors","showAllErrors","scrollToTop","DataContext","useId","forceUpdate","useReducer","activeIndexRef","useRef","errorOnStepRef","current","callOnStepChange","useCallback","async","isAsync","handleStepChange","_ref","skipErrorCheck","skipFieldValidation","enableAsyncBehaviour","onSubmit","result","Error","options","handleChange","_ref2","current_step","providerValue","useMemo","sharedState","useSharedState","undefined","extend","useEffect","warn","Provider","titles","contents","map","child","i","_child","_child2","step","_step","_child$props$title","apply","push","title","value","Space","StepIndicator","Sidebar","sidebar_id","bottom","data","no_animation","on_change","useStep","sharedDataRef","context"],"sourceRoot":""}