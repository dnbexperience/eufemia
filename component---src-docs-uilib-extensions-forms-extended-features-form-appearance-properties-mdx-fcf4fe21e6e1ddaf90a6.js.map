{"version":3,"file":"component---src-docs-uilib-extensions-forms-extended-features-form-appearance-properties-mdx-fcf4fe21e6e1ddaf90a6.js","mappings":"8NAEO,MAAMA,EAAiD,CAC5DC,KAAM,CACJC,IAAK,oDACLC,KAAM,SACNC,OAAQ,aCDZ,SAASC,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,OACHC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKT,EAAYG,GAAI,CAC9BK,SAAU,eACR,MAAMC,EAAAA,EAAAA,KAAKC,EAAAA,EAAiB,CAC9BX,MAAON,MAGb,CAOA,MANA,SAAoBM,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOO,GAAYH,EAAAA,EAAAA,KAAKG,EAAWX,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DS,UAAUC,EAAAA,EAAAA,KAAKX,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,mLCdA,MAAMM,EAAa,IACdQ,EAAAA,EACHC,EAAIf,IAAUU,EAAAA,EAAAA,KAAA,WAAUV,KAEpBgB,GAAcC,EAAAA,EAAAA,GAAOC,EAAAA,GAAK,CAAAC,OAAA,aAAZF,CAAa,CAAAG,KAAA,UAAAC,OAAA,4BAMlB,SAASV,EAAeW,GAUnC,IAVoC,MACtCtB,EAAK,UACLuB,EAAY,SAAQ,UACpBC,EAAS,KACTC,GAMDH,EACC,MAAMI,EAAOxB,OAAOwB,KAAK1B,GACnB2B,EAAYzB,OAAO0B,QAAQ5B,GAAO6B,KACtCC,IAAmC,IAAjCC,GAAK,KAAElC,EAAI,IAAED,EAAG,OAAEE,IAASgC,EAC3B,OAAIL,GAAQA,EAAKO,SAASD,GACjB,MAIS,iBAATlC,GACPoC,OAAOpC,GAAMmC,SAAS,iBAEtBnC,EAAO0B,IAIPhB,EAAAA,EAAAA,MAAC2B,EAAAA,EAAE,CAAAzB,SAAA,EACDC,EAAAA,EAAAA,KAACyB,EAAAA,EAAE,CAAA1B,UACDC,EAAAA,EAAAA,KAAC0B,EAAAA,EAAI,CAAA3B,UACHC,EAAAA,EAAAA,KAAC2B,EAAAA,EAAI,CAAA5B,SAAE6B,EAAWd,GAAYe,EAAAA,EAAAA,IAAYR,GAAOA,UAGrDrB,EAAAA,EAAAA,KAACyB,EAAAA,EAAE,CAAA1B,SACA+B,MAAMC,QAAQ5C,GACbA,EACGgC,KAAKa,IACJhC,EAAAA,EAAAA,KAAC0B,EAAAA,EAAI,CAAA3B,UACHC,EAAAA,EAAAA,KAAC2B,EAAAA,EAAI,CAAA5B,SAAEiC,KADEA,KAIZC,QAAO,CAACC,EAAMC,KACbtC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGmC,EAAK,OAAKC,QAIjBnC,EAAAA,EAAAA,KAAC0B,EAAAA,EAAI,CAAA3B,UACHC,EAAAA,EAAAA,KAAC2B,EAAAA,EAAI,CAAA5B,SAAEZ,SAIbU,EAAAA,EAAAA,MAAC4B,EAAAA,EAAE,CAAA1B,SAAA,EACDF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,IAAEX,EAAO,OAAO,KACpBY,EAAAA,EAAAA,KAACoC,EAAAA,EAAa,CAACxC,WAAYA,EAAWG,SACnCe,EAAYuB,EAAmBnD,EAAK8B,GAAQ9B,SA5B1CmC,GA+BJ,IAKX,OACErB,EAAAA,EAAAA,KAACQ,EAAAA,GAAAA,WAAgB,CAAAT,UACfF,EAAAA,EAAAA,MAACS,EAAW,CAAAP,SAAA,EACVC,EAAAA,EAAAA,KAAA,SAAAD,UACEF,EAAAA,EAAAA,MAAC2B,EAAAA,EAAE,CAAAzB,SAAA,EACDC,EAAAA,EAAAA,KAACsC,EAAAA,EAAE,CAAAvC,SAAC,cACJC,EAAAA,EAAAA,KAACsC,EAAAA,EAAE,CAAAvC,SAAC,UACJC,EAAAA,EAAAA,KAACsC,EAAAA,EAAE,CAAAvC,SAAC,sBAGRC,EAAAA,EAAAA,KAAA,SAAAD,SAAQkB,QAIhB,CAGA,SAASoB,EAAmBnD,EAAa8B,GAIvC,OAHAA,EAAKuB,SAASlB,IACZnC,EAAMA,EAAIsD,QAAQ,IAAIC,OAAOpB,EAAK,MAAMQ,EAAAA,EAAAA,IAAYR,GAAK,IAEpDnC,CACT,CAEA,SAAS0C,EAAWlB,GAClB,OAAIA,EAAKY,SAAS,MACTtB,EAAAA,EAAAA,KAACoC,EAAAA,EAAa,CAACxC,WAAYA,EAAWG,SAAEW,IAG1CA,CACT,C,uCCvGA,IAAe4B,EAAE,C,uCCAjB,IAAed,EAAE,C","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Form/Appearance/AppearanceDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/Appearance/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../../../shared/types'\n\nexport const FormAppearanceProperties: PropertiesTableProps = {\n  size: {\n    doc: 'The sizes you can choose is `medium` and `large`.',\n    type: 'string',\n    status: 'optional',\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {FormAppearanceProperties} from '@dnb/eufemia/src/extensions/forms/Form/Appearance/AppearanceDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: FormAppearanceProperties\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Code, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\nimport Copy from '../tags/Copy'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n}) {\n  const keys = Object.keys(props)\n  const tableRows = Object.entries(props).map(\n    ([key, { type, doc, status }]) => {\n      if (omit && omit.includes(key)) {\n        return null\n      }\n\n      if (\n        typeof type === 'string' &&\n        String(type).includes('{valueType}')\n      ) {\n        type = valueType as string\n      }\n\n      return (\n        <Tr key={key}>\n          <Td>\n            <Copy>\n              <Code>{formatName(camelCase ? toCamelCase(key) : key)}</Code>\n            </Copy>\n          </Td>\n          <Td>\n            {Array.isArray(type) ? (\n              type\n                .map((t) => (\n                  <Copy key={t}>\n                    <Code>{t}</Code>\n                  </Copy>\n                ))\n                .reduce((prev, curr) => (\n                  <>\n                    {prev} or {curr}\n                  </>\n                ))\n            ) : (\n              <Copy>\n                <Code>{type}</Code>\n              </Copy>\n            )}\n          </Td>\n          <Td>\n            <em>({status})</em>{' '}\n            <ReactMarkdown components={components}>\n              {camelCase ? convertToCamelCase(doc, keys) : doc}\n            </ReactMarkdown>\n          </Td>\n        </Tr>\n      )\n    },\n  )\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nfunction formatName(name: string): React.ReactNode | string {\n  if (name.includes('/')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["FormAppearanceProperties","size","doc","type","status","_createMdxContent","props","_components","Object","assign","h2","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","wrapper","MDXLayout","basicComponents","p","StyledTable","_styled","Table","target","name","styles","_ref","valueType","camelCase","omit","keys","tableRows","entries","map","_ref2","key","includes","String","Tr","Td","Copy","Code","formatName","toCamelCase","Array","isArray","t","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp"],"sourceRoot":""}