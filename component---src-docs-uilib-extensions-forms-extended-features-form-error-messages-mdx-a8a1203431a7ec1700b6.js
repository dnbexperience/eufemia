"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[78258,38326,8033],{93645:function(e,n,r){r.r(n);var s=r(52322),o=r(45392),a=r(21222),i=r(78079);function l(e){return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.default,{}),"\n",(0,s.jsx)(i.default,{})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(l,e)})):l()}},78079:function(e,n,r){r.r(n),r.d(n,{default:function(){return d}});var s={};r.r(s),r.d(s,{BasicErrorMessage:function(){return l}});var o=r(52322),a=r(45392),i=r(52394);const l=()=>(0,o.jsx)(i.Z,{children:"<Form.Handler\n  errorMessages={{\n    // Level 1\n    pattern: 'Or on the provider',\n    '/myKey': {\n      // Level 2\n      pattern: 'Or on the provider for just one field',\n    },\n  }}\n>\n  <Field.String\n    errorMessages={{\n      // Level 3\n      pattern: 'Or on a single Field itself',\n    }}\n    path=\"/myKey\"\n    value=\"abc\"\n    pattern=\"^[0-9]+$\"\n    validateInitially\n  />\n</Form.Handler>\n"});function t(e){const n=Object.assign({h2:"h2"},(0,a.ah)(),e.components);return s||c("Examples",!1),l||c("Examples.BasicErrorMessage",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{children:"Demos"}),"\n",(0,o.jsx)(l,{})]})}var d=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(t,e)})):t(e)};function c(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},21222:function(e,n,r){r.r(n);var s=r(52322),o=r(45392);function a(e){const n=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",h3:"h3",ul:"ul",li:"li",ol:"ol"},(0,o.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"Error messages in Eufemia Forms are used to provide feedback to users when there are issues with their input."}),"\n",(0,s.jsx)(n.h2,{children:"Error object"}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"new Error"})," with a message to display a custom error message."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"render(<Field.PhoneNumber error={new Error('Show this message')} />)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Or in case of a validator:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const validator = (value) => {\n  // Your validation logic\n  return new Error('Show this message')\n}\nrender(<Field.PhoneNumber validator={validator} />)\n"})}),"\n",(0,s.jsx)(n.h3,{children:"FormError object"}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"new FormError"})," with a message to display an existing and translated error message."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"validationRule"})," is used to identify the error message to display."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"required"})," - Displayed when the field is required and the user has not provided a value."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pattern"})," - Displayed when the user has provided a value that does not match the pattern."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { FormError, Field } from '@dnb/eufemia/extensions/forms'\nrender(\n  <Field.PhoneNumber\n    error={\n      new FormError('Invalid value', {\n        validationRule: 'pattern',\n      })\n    }\n  />,\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Here is how you can provide validation rules, or even overwrite existing ones:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"render(\n  <Form.Handler\n    errorMessages={{\n      pattern: 'Display me, instead of the default message',\n    }}\n  >\n    ...\n  </Form.Handler>,\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"For one field only:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"render(\n  <Field.PhoneNumber\n    errorMessages={{\n      pattern: 'Display me, instead of the default message',\n    }}\n  />,\n)\n"})}),"\n",(0,s.jsx)(n.h2,{children:"Localization of error messages"}),"\n",(0,s.jsx)(n.p,{children:"You can also provide localized error messages:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"render(\n  <Form.Handler\n    errorMessages={{\n      'en-GB': {\n        pattern: 'Display me, instead of the default message',\n      },\n      'nb-NO': {\n        pattern: 'Vis meg i stedet for standardmeldingen',\n      },\n    }}\n  >\n    ...\n  </Form.Handler>,\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"In addition, you can customize the translations globally:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import Provider from '@dnb/eufemia/shared/Provider'\n\nrender(\n  <Provider\n    locales={{\n      'nb-NO': {\n        Forms: { inputErrorPattern: 'Custom pattern error' },\n      },\n    }}\n  >\n    <Form.Handler>\n      <Field.String pattern=\"^([a-z]+)$\" value=\"123\" validateInitially />\n    </Form.Handler>\n  </Provider>,\n)\n"})}),"\n",(0,s.jsxs)(n.h2,{children:["Levels of ",(0,s.jsx)(n.code,{children:"errorMessages"})]}),"\n",(0,s.jsxs)(n.p,{children:["You can provide custom error message different levels with the ",(0,s.jsx)(n.code,{children:"errorMessages"})," prop:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"On the Form.Handler (Provider) level."}),"\n",(0,s.jsx)(n.li,{children:"On the Form.Handler (Provider) level with a JSON Pointer path."}),"\n",(0,s.jsx)(n.li,{children:"On the field level."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The levels are prioritized in the order above, so the field level error message will overwrite all other levels."}),"\n",(0,s.jsxs)(n.p,{children:["Here is an example of how to do expose a custom error message for the ",(0,s.jsx)(n.code,{children:"pattern"})," validation rule on all levels:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { Form, Field } from '@dnb/eufemia/extensions/forms'\n\nrender(\n  <Form.Handler\n    errorMessages={{\n      // Level 1\n      pattern: 'Or on the provider',\n      '/myKey': {\n        // Level 2\n        pattern: 'Or on the provider for just one field',\n      },\n    }}\n  >\n    <Field.String\n      path=\"/myKey\"\n      errorMessages={{\n        // Level 3\n        pattern: 'Or on a single Field itself',\n      }}\n      ...\n    />\n  </Form.Handler>,\n)\n"})})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(a,e)})):a(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-extended-features-form-error-messages-mdx-a8a1203431a7ec1700b6.js.map