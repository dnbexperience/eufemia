"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[59247],{88430:function(n,e,t){t.r(e),t.d(e,{default:function(){return p}});var a={};t.r(a),t.d(a,{Autofill:function(){return s},Default:function(){return l},FilterData:function(){return u},SessionStorage:function(){return d}});var r=t(52322),o=t(45392),i=t(44464);const l=()=>(0,r.jsx)(i.Z,{children:'<Form.Handler\n  data={{}}\n  onSubmit={(data) => console.log(\'onSubmit\', data)}\n>\n  <Card spacing="medium">\n    <Field.Email path="/email" />\n    <Form.ButtonRow>\n      <Form.SubmitButton />\n    </Form.ButtonRow>\n  </Card>\n</Form.Handler>\n'}),d=()=>(0,r.jsx)(i.Z,{children:'<Form.Handler\n  onSubmit={(data, { resetForm, clearData }) => {\n    console.log(\'onSubmit\', data)\n\n    // Docs: https://eufemia.dnb.no/uilib/extensions/forms/extended-features/DataContext/Provider/events/#onsubmit-parameters\n    resetForm()\n    clearData()\n  }}\n  sessionStorageId="session-key"\n>\n  <Card spacing="medium">\n    <Field.String label="Name" path="/name" />\n    <Field.Email path="/email" />\n    <Form.ButtonRow>\n      <Form.SubmitButton />\n    </Form.ButtonRow>\n  </Card>\n</Form.Handler>\n'}),s=()=>(0,r.jsx)(i.Z,{children:'<Form.Handler\n  onSubmit={(data) => console.log(\'onSubmit\', data)}\n  autoComplete\n>\n  <Form.MainHeading>Delivery address</Form.MainHeading>\n\n  <Card stack>\n    <Form.SubHeading>Your name</Form.SubHeading>\n\n    <Field.String label="First name" path="/firstName" required />\n    <Field.String label="Last name" path="/lastName" required />\n  </Card>\n\n  <Card stack>\n    <Form.SubHeading>Your address</Form.SubHeading>\n\n    <FieldBlock label="Address">\n      <Flex.Horizontal>\n        <Field.String\n          label="Street"\n          width="medium"\n          path="/streetName"\n          required\n        />\n        <Field.Number\n          label="Nr."\n          width="small"\n          path="/streetNr"\n          required\n        />\n      </Flex.Horizontal>\n    </FieldBlock>\n\n    <Field.PostalCodeAndCity\n      postalCode={{\n        required: true,\n        path: \'/postalCode\',\n      }}\n      city={{\n        required: true,\n        path: \'/city\',\n      }}\n    />\n  </Card>\n\n  <Card spacing="medium">\n    <P>More information about this form.</P>\n    <Form.ButtonRow>\n      <Form.SubmitButton />\n    </Form.ButtonRow>\n  </Card>\n</Form.Handler>\n'}),u=()=>(0,r.jsx)(i.Z,{scope:{id:"disabled-fields",replaceUndefinedValues:m},noInline:!0,children:'const filterDataHandler = (path, value, props) => !props.disabled\nconst MyComponent = () => {\n  const { data } = Form.useData(id, {\n    disabled: false,\n    validate: false,\n    myField: \'Value\',\n  })\n  return (\n    <Form.Handler\n      id={id}\n      onSubmit={(data) => console.log(\'onSubmit\', data)}\n      filterData={filterDataHandler}\n    >\n      <Flex.Stack spacing="medium">\n        <Field.Boolean label="Disabled" path="/disabled" />\n        <Field.Boolean label="Validate" path="/validate" />\n        <Field.String\n          label="My Field"\n          path="/myField"\n          required={data.validate}\n          disabled={data.disabled}\n        />\n        <Form.ButtonRow>\n          <Form.SubmitButton />\n        </Form.ButtonRow>\n      </Flex.Stack>\n    </Form.Handler>\n  )\n}\nconst Output = () => {\n  const { filterData } = Form.useData(id)\n  const { hasErrors } = Form.useError(id)\n  return (\n    <Section top innerSpace backgroundColor="sand-yellow" breakout={false}>\n      <output>\n        hasErrors: {JSON.stringify(hasErrors(), null, 2)}\n        <pre>\n          {JSON.stringify(\n            replaceUndefinedValues(filterData(filterDataHandler)),\n            null,\n            2,\n          )}\n        </pre>\n      </output>\n    </Section>\n  )\n}\nrender(\n  <>\n    <MyComponent />\n    <Output />\n  </>,\n)\n'});function m(n,e){return void 0===e&&(e=null),void 0===n?e:"object"==typeof n&&n!==e?{...n,...Object.fromEntries(Object.entries(n).map((n=>{let[e,t]=n;return[e,m(t)]})))}:n}function c(n){const e=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code",a:"a"},(0,o.ah)(),n.components);return a||h("Examples",!1),s||h("Examples.Autofill",!0),l||h("Examples.Default",!0),u||h("Examples.FilterData",!0),d||h("Examples.SessionStorage",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:"Demos"}),"\n",(0,r.jsx)(e.h3,{children:"In combination with a SubmitButton"}),"\n",(0,r.jsx)(l,{}),"\n",(0,r.jsx)(e.h3,{children:"Filter your data"}),"\n",(0,r.jsxs)(e.p,{children:["By using the ",(0,r.jsx)(e.code,{children:"filterData"})," prop you can filter out data that you don't want to send to your server."]}),"\n",(0,r.jsxs)(e.p,{children:["It will filter out data from the ",(0,r.jsx)(e.code,{children:"onSubmit"})," event property."]}),"\n",(0,r.jsx)(e.p,{children:"In this example we filter out all fields that are disabled."}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/extended-features/Form/useData/",children:"useData"})," hook also returns a ",(0,r.jsx)(e.code,{children:"filterData"})," function you can use to filter data the same way."]}),"\n",(0,r.jsx)(u,{}),"\n",(0,r.jsx)(e.h3,{children:"With session storage"}),"\n",(0,r.jsx)(e.p,{children:"Changes you make to the fields are temporarily saved and loaded\nwhen the browser reloads. The data is stored until the session storage is invalidated."}),"\n",(0,r.jsx)(d,{}),"\n",(0,r.jsx)(e.h3,{children:"Autocomplete (autofill) user data"}),"\n",(0,r.jsx)(s,{})]})}var p=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(c,n)})):c(n)};function h(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-extended-features-form-handler-demos-mdx-94818412753551665489.js.map