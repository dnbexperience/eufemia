{"version":3,"file":"component---src-docs-uilib-extensions-forms-extended-features-form-handler-demos-mdx-d4bc6d1daa0a87da4a40.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/Handler/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/Handler/demos.mdx"],"sourcesContent":["import ComponentBox from '../../../../../../../shared/tags/ComponentBox'\nimport { Form, Field, FieldBlock } from '@dnb/eufemia/src/extensions/forms'\nimport { Card, Flex, P, Section } from '@dnb/eufemia/src'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        data={{}}\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Card spacing=\"medium\">\n          <Field.Email path=\"/email\" />\n          <Form.ButtonRow>\n            <Form.SubmitButton />\n          </Form.ButtonRow>\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const SessionStorage = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        onSubmit={(data, { resetForm, clearData }) => {\n          console.log('onSubmit', data)\n\n          // Docs: https://eufemia.dnb.no/uilib/extensions/forms/extended-features/DataContext/Provider/events/#onsubmit-parameters\n          resetForm()\n          clearData()\n        }}\n        sessionStorageId=\"session-key\"\n      >\n        <Card spacing=\"medium\">\n          <Field.String label=\"Name\" path=\"/name\" />\n          <Field.Email path=\"/email\" />\n          <Form.ButtonRow>\n            <Form.SubmitButton />\n          </Form.ButtonRow>\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Autofill = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        onSubmit={(data) => console.log('onSubmit', data)}\n        autoComplete\n      >\n        <Form.MainHeading>Delivery address</Form.MainHeading>\n\n        <Card stack>\n          <Form.SubHeading>Your name</Form.SubHeading>\n\n          <Field.String label=\"First name\" path=\"/firstName\" required />\n          <Field.String label=\"Last name\" path=\"/lastName\" required />\n        </Card>\n\n        <Card stack>\n          <Form.SubHeading>Your address</Form.SubHeading>\n\n          <FieldBlock label=\"Address\">\n            <Flex.Horizontal>\n              <Field.String\n                label=\"Street\"\n                width=\"stretch\"\n                path=\"/streetName\"\n                required\n              />\n              <Field.Number\n                label=\"Nr.\"\n                width=\"small\"\n                path=\"/streetNr\"\n                required\n              />\n            </Flex.Horizontal>\n          </FieldBlock>\n\n          <Field.PostalCodeAndCity\n            postalCode={{ required: true, path: '/postalCode' }}\n            city={{ required: true, path: '/city' }}\n          />\n        </Card>\n\n        <Card spacing=\"medium\">\n          <P>More information about this form.</P>\n          <Form.ButtonRow>\n            <Form.SubmitButton />\n          </Form.ButtonRow>\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const FilterData = () => {\n  const id = 'disabled-fields'\n  return (\n    <ComponentBox scope={{ id, replaceUndefinedValues }}>\n      {() => {\n        const filterDataHandler = (path, value, props) => !props.disabled\n\n        const MyComponent = () => {\n          const { data } = Form.useData(id, {\n            disabled: false,\n            validate: false,\n            myField: 'Value',\n          })\n\n          return (\n            <Form.Handler\n              id={id}\n              onSubmit={(data) => console.log('onSubmit', data)}\n              filterData={filterDataHandler}\n            >\n              <Flex.Stack spacing=\"medium\">\n                <Field.Boolean label=\"Disabled\" path=\"/disabled\" />\n                <Field.Boolean label=\"Validate\" path=\"/validate\" />\n                <Field.String\n                  label=\"My Field\"\n                  path=\"/myField\"\n                  required={data.validate}\n                  disabled={data.disabled}\n                />\n                <Form.ButtonRow>\n                  <Form.SubmitButton />\n                </Form.ButtonRow>\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        const Output = () => {\n          const { filterData } = Form.useData(id)\n          const { hasErrors } = Form.useError(id)\n\n          return (\n            <Section\n              top\n              innerSpace\n              backgroundColor=\"sand-yellow\"\n              breakout={false}\n            >\n              <output>\n                hasErrors: {JSON.stringify(hasErrors(), null, 2)}\n                <pre>\n                  {JSON.stringify(\n                    replaceUndefinedValues(filterData(filterDataHandler)),\n                    null,\n                    2,\n                  )}\n                </pre>\n              </output>\n            </Section>\n          )\n        }\n\n        return (\n          <>\n            <MyComponent />\n            <Output />\n          </>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\n/**\n * Replaces undefined values in an object with a specified replacement value.\n * @param value - The value to check for undefined values.\n * @param replaceWith - The value to replace undefined values with. Default is null.\n * @returns The object with undefined values replaced.\n */\nfunction replaceUndefinedValues(\n  value: unknown,\n  replaceWith = null,\n): unknown {\n  if (typeof value === 'undefined') {\n    return replaceWith\n  } else if (typeof value === 'object' && value !== replaceWith) {\n    return {\n      ...value,\n      ...Object.fromEntries(\n        Object.entries(value).map(([k, v]) => [\n          k,\n          replaceUndefinedValues(v),\n        ]),\n      ),\n    }\n  } else {\n    return value\n  }\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.Autofill) _missingMdxReference(\"Examples.Autofill\", true);\n  if (!Examples.Default) _missingMdxReference(\"Examples.Default\", true);\n  if (!Examples.FilterData) _missingMdxReference(\"Examples.FilterData\", true);\n  if (!Examples.SessionStorage) _missingMdxReference(\"Examples.SessionStorage\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"In combination with a SubmitButton\"\n    }), \"\\n\", _jsx(Examples.Default, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Filter your data\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By using the \", _jsx(_components.code, {\n        children: \"filterData\"\n      }), \" prop you can filter out data that you don't want to send to your server.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It will filter out data from the \", _jsx(_components.code, {\n        children: \"onSubmit\"\n      }), \" event property.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this example we filter out all fields that are disabled.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/extended-features/Form/useData/\",\n        children: \"useData\"\n      }), \" hook also returns a \", _jsx(_components.code, {\n        children: \"filterData\"\n      }), \" function you can use to filter data the same way.\"]\n    }), \"\\n\", _jsx(Examples.FilterData, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With session storage\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Changes you make to the fields are temporarily saved and loaded\\nwhen the browser reloads. The data is stored until the session storage is invalidated.\"\n    }), \"\\n\", _jsx(Examples.SessionStorage, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Autocomplete (autofill) user data\"\n    }), \"\\n\", _jsx(Examples.Autofill, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["Default","_jsx","ComponentBox","children","SessionStorage","Autofill","FilterData","scope","id","replaceUndefinedValues","noInline","value","replaceWith","Object","fromEntries","entries","map","_ref","k","v","_createMdxContent","props","_components","assign","h2","h3","p","code","a","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","href","wrapper","MDXLayout","component","Error"],"sourceRoot":""}