"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[59247],{88430:function(n,e,t){t.r(e),t.d(e,{default:function(){return f}});var a={};t.r(a),t.d(a,{AsyncChangeAndValidation:function(){return c},AsyncSubmit:function(){return d},AsyncSubmitComplete:function(){return u},Autofill:function(){return h},FilterData:function(){return p},SessionStorage:function(){return m}});var r=t(52322),o=t(45392),i=t(7325),s=t(52750),l=t(17897);const d=()=>(0,r.jsx)(i.Z,{children:'<Form.Handler onSubmit={async (data) => console.log(\'onSubmit\', data)}>\n  <Card spacing="medium">\n    <Field.Email path="/email" />\n    <Form.ButtonRow>\n      <Form.SubmitButton />\n    </Form.ButtonRow>\n  </Card>\n</Form.Handler>\n'}),u=()=>(0,r.jsx)(i.Z,{children:"<Form.Handler\n  onSubmit={async (data) => {\n    console.log('onSubmit', data)\n\n    // Wait for 2 seconds\n    await new Promise((resolve) => setTimeout(resolve, 2000))\n\n    // e.g. go to new location\n\n    // Optionally, you can return an object with these keys, depending your needs\n    return {\n      info: 'Redirecting to a new location',\n      // Force the form to stay in pending state\n      status: 'pending',\n    }\n  }}\n>\n  <Flex.Stack>\n    <Field.String label=\"Required field\" path=\"/myField\" required />\n    <Form.ButtonRow>\n      <Form.SubmitButton text=\"Save\" />\n    </Form.ButtonRow>\n  </Flex.Stack>\n</Form.Handler>\n"}),c=()=>(0,r.jsx)(i.Z,{scope:{debounceAsync:s.k,createRequest:l.createRequest},noInline:!0,children:"const validator = debounceAsync(async function secondValidator(\n  value: string,\n) {\n  try {\n    const request = createRequest()\n    const wasCanceled = this.addCancelEvent(request.cancel)\n    await request(2000) // Simulate a request\n\n    if (wasCanceled()) {\n      throw new Error('Validation request canceled')\n    }\n  } catch (error) {\n    return error\n  }\n  if (value !== 'valid') {\n    return new Error('Custom error with invalid value: ' + value) // Show this message\n  }\n})\n\nconst cancelRequest = () => {\n  validator.cancel()\n}\nconst onSubmit = async (data) => {\n  console.log('onSubmit', data)\n\n  // Wait for 2 seconds\n  await new Promise((resolve) => setTimeout(resolve, 2000))\n\n  // For demo purposes, we show a message\n  return {\n    info: 'Redirecting to a new location',\n  }\n}\nconst onChangeForm = async (data) => {\n  console.log('onChange', data)\n\n  // Wait for 2 seconds\n  await new Promise((resolve) => setTimeout(resolve, 2000))\n\n  // For demo purposes, we show a message\n  return {\n    warning: 'Warning message',\n  }\n}\nconst onChangeField = async (data) => {\n  console.log('onChange', data)\n\n  // Wait for 2 seconds\n  await new Promise((resolve) => setTimeout(resolve, 2000))\n\n  // For demo purposes, we show a message\n  return {\n    info: 'Info message',\n  }\n}\nrender(\n  <Form.Handler onSubmit={onSubmit} onChange={onChangeForm}>\n    <Flex.Stack>\n      <Field.String\n        label=\"Required field\"\n        path=\"/myField\"\n        required\n        validator={validator}\n        onChange={onChangeField}\n      />\n      <Form.ButtonRow>\n        <Form.SubmitButton text=\"Save\" />\n        <Button\n          text=\"Stop async operations\"\n          variant=\"tertiary\"\n          disabled={false}\n          onClick={cancelRequest}\n        />\n      </Form.ButtonRow>\n    </Flex.Stack>\n  </Form.Handler>,\n)\n"}),m=()=>(0,r.jsx)(i.Z,{children:'<Form.Handler\n  onSubmit={(data, { resetForm, clearData }) => {\n    console.log(\'onSubmit\', data)\n\n    // Docs: https://eufemia.dnb.no/uilib/extensions/forms/extended-features/DataContext/Provider/events/#onsubmit-parameters\n    resetForm()\n    clearData()\n  }}\n  sessionStorageId="session-key"\n>\n  <Card spacing="medium">\n    <Field.String label="Name" path="/name" />\n    <Field.Email path="/email" />\n    <Form.ButtonRow>\n      <Form.SubmitButton />\n    </Form.ButtonRow>\n  </Card>\n</Form.Handler>\n'}),h=()=>(0,r.jsx)(i.Z,{children:'<Form.Handler\n  onSubmit={(data) => console.log(\'onSubmit\', data)}\n  autoComplete\n>\n  <Flex.Stack>\n    <Form.MainHeading>Delivery address</Form.MainHeading>\n\n    <Card stack>\n      <Form.SubHeading>Your name</Form.SubHeading>\n\n      <Field.String label="First name" path="/firstName" required />\n      <Field.String label="Last name" path="/lastName" required />\n    </Card>\n\n    <Card stack>\n      <Form.SubHeading>Your address</Form.SubHeading>\n\n      <FieldBlock width="large" composition>\n        <Field.String\n          label="Street"\n          width="stretch"\n          path="/streetName"\n          required\n        />\n        <Field.Number\n          label="Nr."\n          width="small"\n          path="/streetNr"\n          required\n        />\n      </FieldBlock>\n\n      <Field.PostalCodeAndCity\n        postalCode={{\n          required: true,\n          path: \'/postalCode\',\n        }}\n        city={{\n          required: true,\n          path: \'/city\',\n        }}\n      />\n    </Card>\n\n    <Card spacing="medium">\n      <P>More information about this form.</P>\n      <Form.ButtonRow>\n        <Form.SubmitButton />\n      </Form.ButtonRow>\n    </Card>\n  </Flex.Stack>\n</Form.Handler>\n'}),p=()=>(0,r.jsx)(i.Z,{scope:{id:"disabled-fields",replaceUndefinedValues:F},noInline:!0,children:'const filterDataHandler = (path, value, props) => !props.disabled\nconst MyComponent = () => {\n  const { data } = Form.useData(id, {\n    disabled: false,\n    validate: false,\n    myField: \'Value\',\n  })\n  return (\n    <Form.Handler\n      id={id}\n      onSubmit={(data) => console.log(\'onSubmit\', data)}\n      filterData={filterDataHandler}\n    >\n      <Flex.Stack spacing="medium">\n        <Field.Boolean label="Disabled" path="/disabled" />\n        <Field.Boolean label="Validate" path="/validate" />\n        <Field.String\n          label="My Field"\n          path="/myField"\n          required={data.validate}\n          disabled={data.disabled}\n        />\n        <Form.ButtonRow>\n          <Form.SubmitButton />\n        </Form.ButtonRow>\n      </Flex.Stack>\n    </Form.Handler>\n  )\n}\nconst Output = () => {\n  const { filterData } = Form.useData(id)\n  const { hasErrors } = Form.useError(id)\n  return (\n    <Section top innerSpace backgroundColor="sand-yellow" breakout={false}>\n      <output>\n        hasErrors: {JSON.stringify(hasErrors(), null, 2)}\n        <pre>\n          {JSON.stringify(\n            replaceUndefinedValues(filterData(filterDataHandler)),\n            null,\n            2,\n          )}\n        </pre>\n      </output>\n    </Section>\n  )\n}\nrender(\n  <>\n    <MyComponent />\n    <Output />\n  </>,\n)\n'});function F(n,e){return void 0===e&&(e=null),void 0===n?e:"object"==typeof n&&n!==e?{...n,...Object.fromEntries(Object.entries(n).map((n=>{let[e,t]=n;return[e,F(t)]})))}:n}function b(n){const e=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code",a:"a",pre:"pre"},(0,o.ah)(),n.components);return a||y("Examples",!1),c||y("Examples.AsyncChangeAndValidation",!0),d||y("Examples.AsyncSubmit",!0),u||y("Examples.AsyncSubmitComplete",!0),h||y("Examples.Autofill",!0),p||y("Examples.FilterData",!0),m||y("Examples.SessionStorage",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:"Demos"}),"\n",(0,r.jsx)(e.h3,{children:"In combination with a SubmitButton"}),"\n",(0,r.jsxs)(e.p,{children:["This example uses an async ",(0,r.jsx)(e.code,{children:"onSubmit"})," event handler. It will disable all fields and show an indicator on the ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/extended-features/Form/SubmitButton/",children:"SubmitButton"})," while the form is pending."]}),"\n",(0,r.jsx)(e.p,{children:"With an async function, you can also handle the response from the server and update the form with the new data."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"// Async function\nconst onSubmit = async (data) => {\n  try {\n    const response = await fetch('https://api.example.com', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    })\n    const data = await response.json()\n    Form.setData('unique', data) // Whatever you want to do with the data\n  } catch (error) {\n    return error // Will display the error message in the form\n  }\n}\n"})}),"\n",(0,r.jsx)(d,{}),"\n",(0,r.jsx)(e.h3,{children:"New location after async submit"}),"\n",(0,r.jsx)(u,{}),"\n",(0,r.jsx)(e.h3,{children:"Async validation with async onChange"}),"\n",(0,r.jsx)(e.p,{children:'Type "valid" in order to see the validation message.'}),"\n",(0,r.jsx)(c,{}),"\n",(0,r.jsx)(e.h3,{children:"Filter your data"}),"\n",(0,r.jsxs)(e.p,{children:["By using the ",(0,r.jsx)(e.code,{children:"filterData"})," prop you can filter out data that you don't want to send to your server."]}),"\n",(0,r.jsxs)(e.p,{children:["It will filter out data from the ",(0,r.jsx)(e.code,{children:"onSubmit"})," event property."]}),"\n",(0,r.jsx)(e.p,{children:"In this example we filter out all fields that are disabled."}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/extended-features/Form/useData/",children:"useData"})," hook also returns a ",(0,r.jsx)(e.code,{children:"filterData"})," function you can use to filter data the same way."]}),"\n",(0,r.jsx)(p,{}),"\n",(0,r.jsx)(e.h3,{children:"With session storage"}),"\n",(0,r.jsx)(e.p,{children:"Changes you make to the fields are temporarily saved and loaded\nwhen the browser reloads. The data is stored until the session storage is invalidated."}),"\n",(0,r.jsx)(m,{}),"\n",(0,r.jsx)(e.h3,{children:"Autocomplete (autofill) user data"}),"\n",(0,r.jsx)(h,{})]})}var f=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(b,n)})):b(n)};function y(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},17897:function(n,e,t){t.r(e),t.d(e,{AsyncChangeBehavior:function(){return l},AsyncSubmitBehavior:function(){return s},Default:function(){return i},WithinOtherComponents:function(){return u},createRequest:function(){return d}});var a=t(7325),r=t(52750),o=t(52322);const i=()=>(0,o.jsx)(a.Z,{children:'<Form.SubmitIndicator state="pending" />\n'}),s=()=>(0,o.jsx)(a.Z,{scope:{createRequest:d,debounceAsync:r.k},noInline:!0,children:'const delay = debounceAsync(async function () {\n  try {\n    const request = createRequest()\n    await request(1000) // Simulate a request\n  } catch (error) {\n    return error\n  }\n})\nrender(\n  <Form.Handler onSubmit={delay}>\n    <Card stack>\n      <Field.String path="/myField" label="Short label" />\n      <Form.ButtonRow>\n        <Form.SubmitButton />\n        <Button variant="tertiary">Cancel</Button>\n      </Form.ButtonRow>\n    </Card>\n  </Form.Handler>,\n)\n'}),l=()=>(0,o.jsx)(a.Z,{scope:{createRequest:d,debounceAsync:r.k},noInline:!0,children:'const delay = debounceAsync(async function () {\n  try {\n    const request = createRequest()\n    await request(1000) // Simulate a request\n  } catch (error) {\n    return error\n  }\n})\nrender(\n  <Form.Handler onSubmit={delay} onChange={delay}>\n    <Card stack>\n      <Field.String\n        path="/myField1"\n        label="Label (with async validation)"\n        placeholder="Write something ..."\n        validator={delay}\n      />\n      <FieldBlock width="medium">\n        <Field.String\n          path="/myField2"\n          width="stretch"\n          label="This is a long label"\n        />\n      </FieldBlock>\n      <Form.ButtonRow>\n        <Form.SubmitButton />\n        <Button variant="tertiary">Cancel</Button>\n      </Form.ButtonRow>\n    </Card>\n  </Form.Handler>,\n)\n'}),d=()=>{let n,e;const t=t=>new Promise((a=>{e=a,n=setTimeout((()=>{a({hasError:!1})}),t)}));return t.cancel=()=>{var t;null===(t=e)||void 0===t||t({hasError:!0}),clearTimeout(n),n=null},t},u=()=>(0,o.jsx)(a.Z,{children:'<Form.Handler>\n  <Flex.Horizontal align="center">\n    <Form.SubmitButton showIndicator />\n    <Button variant="secondary" icon="chevron_right">\n      Secondary\n      <Form.SubmitIndicator state="pending" />\n    </Button>\n    <Button variant="tertiary">\n      Tertiary\n      <Form.SubmitIndicator state="pending" />\n    </Button>\n    <FormLabel>\n      Label\n      <Form.SubmitIndicator state="pending" />\n    </FormLabel>\n  </Flex.Horizontal>\n</Form.Handler>\n'})}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-extended-features-form-handler-demos-mdx-eecf6a16df64e9e3dbea.js.map