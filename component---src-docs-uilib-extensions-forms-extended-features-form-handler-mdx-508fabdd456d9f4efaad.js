"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[58152,59247,85352],{13124:function(e,n,t){t.r(n);var r=t(52322),o=t(45392),s=t(29647),a=t(88430);function i(e){return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.default,{}),"\n",(0,r.jsx)(a.default,{})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(i,e)})):i()}},88430:function(e,n,t){t.r(n),t.d(n,{default:function(){return m}});var r={};t.r(r),t.d(r,{Autofill:function(){return l},Default:function(){return i},SessionStorage:function(){return d}});var o=t(52322),s=t(45392),a=t(50716);const i=()=>(0,o.jsx)(a.Z,{children:"<Form.Handler\n  data={{\n    email: '',\n  }}\n  onSubmit={(data) => console.log('onSubmit', data)}\n>\n  <Card spacing=\"medium\">\n    <Field.Email path=\"/email\" />\n    <Form.ButtonRow>\n      <Form.SubmitButton />\n    </Form.ButtonRow>\n  </Card>\n</Form.Handler>\n"}),d=()=>(0,o.jsx)(a.Z,{children:'<Form.Handler\n  onSubmit={(data, { resetForm, clearData }) => {\n    console.log(\'onSubmit\', data)\n\n    // Docs: https://eufemia.dnb.no/uilib/extensions/forms/extended-features/DataContext/Provider/events/#onsubmit-parameters\n    resetForm()\n    clearData()\n  }}\n  sessionStorageId="session-key"\n>\n  <Card spacing="medium">\n    <Field.String label="Name" path="/name" />\n    <Field.Email path="/email" />\n    <Form.ButtonRow>\n      <Form.SubmitButton />\n    </Form.ButtonRow>\n  </Card>\n</Form.Handler>\n'}),l=()=>(0,o.jsx)(a.Z,{children:'<Form.Handler\n  onSubmit={(data) => console.log(\'onSubmit\', data)}\n  autoComplete\n>\n  <Form.MainHeading>Delivery address</Form.MainHeading>\n\n  <Card stack>\n    <Form.SubHeading>Your name</Form.SubHeading>\n\n    <Field.String label="First name" path="/firstName" required />\n    <Field.String label="Last name" path="/lastName" required />\n  </Card>\n\n  <Card stack>\n    <Form.SubHeading>Your address</Form.SubHeading>\n\n    <FieldBlock label="Address">\n      <Flex.Horizontal>\n        <Field.String\n          label="Street"\n          width="medium"\n          path="/streetName"\n          required\n        />\n        <Field.Number\n          label="Nr."\n          width="small"\n          path="/streetNr"\n          required\n        />\n      </Flex.Horizontal>\n    </FieldBlock>\n\n    <Field.PostalCodeAndCity\n      postalCode={{\n        required: true,\n        path: \'/postalCode\',\n      }}\n      city={{\n        required: true,\n        path: \'/city\',\n      }}\n    />\n  </Card>\n\n  <Card spacing="medium">\n    <P>More information about this form.</P>\n    <Form.ButtonRow>\n      <Form.SubmitButton />\n    </Form.ButtonRow>\n  </Card>\n</Form.Handler>\n'});function u(e){const n=Object.assign({h2:"h2",h3:"h3",p:"p"},(0,s.ah)(),e.components);return r||c("Examples",!1),l||c("Examples.Autofill",!0),i||c("Examples.Default",!0),d||c("Examples.SessionStorage",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{children:"Demos"}),"\n",(0,o.jsx)(n.h3,{children:"In combination with a SubmitButton"}),"\n",(0,o.jsx)(i,{}),"\n",(0,o.jsx)(n.h3,{children:"With session storage"}),"\n",(0,o.jsx)(n.p,{children:"Changes you make to the fields are temporarily saved and loaded\nwhen the browser reloads. The data is stored until the session storage is invalidated."}),"\n",(0,o.jsx)(d,{}),"\n",(0,o.jsx)(n.h3,{children:"Autocomplete (autofill) user data"}),"\n",(0,o.jsx)(l,{})]})}var m=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(u,e)})):u(e)};function c(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},29647:function(e,n,t){t.r(n);var r=t(52322),o=t(45392);function s(e){const n=Object.assign({h2:"h2",p:"p",code:"code",a:"a",ul:"ul",li:"li",strong:"strong",pre:"pre"},(0,o.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Form.Handler"})," component provides both the ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Form/Element",children:"Form.Element"})," and a HTML form element."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["It ensures, users can press ",(0,r.jsx)(n.strong,{children:"enter key"})," while focusing on an input field."]}),"\n",(0,r.jsxs)(n.li,{children:["It calls ",(0,r.jsx)(n.code,{children:"preventDefault"})," by default."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\nrender(\n  <Form.Handler\n    data={existingData}\n    onChange={...}\n    onSubmit={...}\n  >\n    Your Form\n  </Form.Handler>,\n)\n"})}),"\n",(0,r.jsx)(n.p,{children:"The form data can be handled outside of the form. This is useful if you want to use the form data in other components:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\nfunction Component() {\n  const { data } = Form.useData('unique')\n\n  return <Form.Handler id=\"unique\">...</Form.Handler>\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["More examples can be found in the ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Form/useData/",children:"Form.useData"})," docs."]}),"\n",(0,r.jsx)(n.h2,{children:"Browser autofill"}),"\n",(0,r.jsxs)(n.p,{children:["You can set ",(0,r.jsx)(n.code,{children:"autoComplete"})," on the ",(0,r.jsx)(n.code,{children:"Form.Handler"})," â€“ each ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/base-fields/String/",children:"Field.String"}),"-field will then get ",(0,r.jsx)(n.code,{children:'autoComplete="on"'}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'<Form.Handler autoComplete={true}>\n  <Field.String path="/firstName" />\n  <Field.String path="/lastName" />\n</Form.Handler>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"path"})," property will be used to set the ",(0,r.jsx)(n.code,{children:"name"})," attribute, which lets browser know which autocomplete value should be proposed to the user."]}),"\n",(0,r.jsx)(n.h2,{children:"Temporary storage"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"sessionStorageId"})," feature uses the browsers session-storage (temporary storage mechanism) to store data entered by the user."]}),"\n",(0,r.jsx)(n.p,{children:"This lets the user navigate away and come back to the form, without loosing already entered data."}),"\n",(0,r.jsx)(n.p,{children:"Ensure you only use this feature for non-sensitive data."}),"\n",(0,r.jsx)(n.p,{children:"It will flush the storage once the form gets submitted."})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(s,e)})):s(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-extended-features-form-handler-mdx-508fabdd456d9f4efaad.js.map