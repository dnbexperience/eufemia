{"version":3,"file":"component---src-docs-uilib-extensions-forms-extended-features-form-handler-mdx-6a16bba9d9562e831540.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/Handler.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/Handler/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/Handler/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/Handler/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/Handler/parts/async-change-example.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/Handler/parts/async-state-return-example.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/SubmitIndicator/Examples.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/extended-features/Form/Handler/info';\nimport Demos from 'Docs/uilib/extensions/forms/extended-features/Form/Handler/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ComponentBox from '../../../../../../../shared/tags/ComponentBox'\nimport { Form, Field, FieldBlock } from '@dnb/eufemia/src/extensions/forms'\nimport { Button, Card, Flex, P, Section } from '@dnb/eufemia/src'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\nimport { createRequest } from '../SubmitIndicator/Examples'\n\nexport const AsyncSubmit = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        onSubmit={async (data) => console.log('onSubmit', data)}\n      >\n        <Card spacing=\"medium\">\n          <Field.Email path=\"/email\" />\n          <Form.ButtonRow>\n            <Form.SubmitButton />\n          </Form.ButtonRow>\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const AsyncSubmitComplete = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        onSubmit={async (data) => {\n          console.log('onSubmit', data)\n\n          // Wait for 2 seconds\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n\n          // e.g. go to new location\n\n          // Optionally, you can return an object with these keys, depending your needs\n          return {\n            info: 'Redirecting to a new location',\n\n            // Force the form to stay in pending state\n            status: 'pending',\n          }\n        }}\n      >\n        <Flex.Stack>\n          <Field.String label=\"Required field\" path=\"/myField\" required />\n          <Form.ButtonRow>\n            <Form.SubmitButton text=\"Save\" />\n          </Form.ButtonRow>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const AsyncChangeAndValidation = () => {\n  return (\n    <ComponentBox scope={{ debounceAsync, createRequest }}>\n      {() => {\n        const validator = debounceAsync(async function secondValidator(\n          value: string,\n        ) {\n          try {\n            const request = createRequest()\n            const wasCanceled = this.addCancelEvent(request.cancel)\n            await request(2000) // Simulate a request\n\n            if (wasCanceled()) {\n              throw new Error('Validation request canceled')\n            }\n          } catch (error) {\n            return error\n          }\n\n          if (value !== 'valid') {\n            return new Error('Custom error with invalid value: ' + value) // Show this message\n          }\n        })\n\n        const cancelRequest = () => {\n          validator.cancel()\n        }\n\n        const onSubmit = async (data) => {\n          console.log('onSubmit', data)\n\n          // Wait for 2 seconds\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n\n          // For demo purposes, we show a message\n          return { info: 'Redirecting to a new location' }\n        }\n\n        const onChangeForm = async (data) => {\n          console.log('onChange', data)\n\n          // Wait for 2 seconds\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n\n          // For demo purposes, we show a message\n          return { warning: 'Warning message' }\n        }\n\n        const onChangeField = async (data) => {\n          console.log('onChange', data)\n\n          // Wait for 2 seconds\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n\n          // For demo purposes, we show a message\n          return { info: 'Info message' }\n        }\n\n        return (\n          <Form.Handler onSubmit={onSubmit} onChange={onChangeForm}>\n            <Flex.Stack>\n              <Field.String\n                label=\"Required field\"\n                path=\"/myField\"\n                required\n                validator={validator}\n                onChange={onChangeField}\n              />\n              <Form.ButtonRow>\n                <Form.SubmitButton text=\"Save\" />\n                <Button\n                  text=\"Stop async operations\"\n                  variant=\"tertiary\"\n                  disabled={false}\n                  onClick={cancelRequest}\n                />\n              </Form.ButtonRow>\n            </Flex.Stack>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const SessionStorage = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        onSubmit={(data, { resetForm, clearData }) => {\n          console.log('onSubmit', data)\n\n          // Docs: https://eufemia.dnb.no/uilib/extensions/forms/extended-features/DataContext/Provider/events/#onsubmit-parameters\n          resetForm()\n          clearData()\n        }}\n        sessionStorageId=\"session-key\"\n      >\n        <Card spacing=\"medium\">\n          <Field.String label=\"Name\" path=\"/name\" />\n          <Field.Email path=\"/email\" />\n          <Form.ButtonRow>\n            <Form.SubmitButton />\n          </Form.ButtonRow>\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Autofill = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        onSubmit={(data) => console.log('onSubmit', data)}\n        autoComplete\n      >\n        <Flex.Stack>\n          <Form.MainHeading>Delivery address</Form.MainHeading>\n\n          <Card stack>\n            <Form.SubHeading>Your name</Form.SubHeading>\n\n            <Field.String label=\"First name\" path=\"/firstName\" required />\n            <Field.String label=\"Last name\" path=\"/lastName\" required />\n          </Card>\n\n          <Card stack>\n            <Form.SubHeading>Your address</Form.SubHeading>\n\n            <FieldBlock width=\"large\" composition>\n              <Field.String\n                label=\"Street\"\n                width=\"stretch\"\n                path=\"/streetName\"\n                required\n              />\n              <Field.Number\n                label=\"Nr.\"\n                width=\"small\"\n                path=\"/streetNr\"\n                required\n              />\n            </FieldBlock>\n\n            <Field.PostalCodeAndCity\n              postalCode={{ required: true, path: '/postalCode' }}\n              city={{ required: true, path: '/city' }}\n            />\n          </Card>\n\n          <Card spacing=\"medium\">\n            <P>More information about this form.</P>\n            <Form.ButtonRow>\n              <Form.SubmitButton />\n            </Form.ButtonRow>\n          </Card>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const FilterData = () => {\n  const id = 'disabled-fields'\n  return (\n    <ComponentBox scope={{ id, replaceUndefinedValues }}>\n      {() => {\n        const filterDataHandler = (path, value, props) => !props.disabled\n\n        const MyComponent = () => {\n          const { data } = Form.useData(id, {\n            disabled: false,\n            validate: false,\n            myField: 'Value',\n          })\n\n          return (\n            <Form.Handler\n              id={id}\n              onSubmit={(data) => console.log('onSubmit', data)}\n              filterData={filterDataHandler}\n            >\n              <Flex.Stack spacing=\"medium\">\n                <Field.Boolean label=\"Disabled\" path=\"/disabled\" />\n                <Field.Boolean label=\"Validate\" path=\"/validate\" />\n                <Field.String\n                  label=\"My Field\"\n                  path=\"/myField\"\n                  required={data.validate}\n                  disabled={data.disabled}\n                />\n                <Form.ButtonRow>\n                  <Form.SubmitButton />\n                </Form.ButtonRow>\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        const Output = () => {\n          const { filterData } = Form.useData(id)\n          const { hasErrors } = Form.useError(id)\n\n          return (\n            <Section\n              top\n              innerSpace\n              backgroundColor=\"sand-yellow\"\n              breakout={false}\n            >\n              <output>\n                hasErrors: {JSON.stringify(hasErrors(), null, 2)}\n                <pre>\n                  {JSON.stringify(\n                    replaceUndefinedValues(filterData(filterDataHandler)),\n                    null,\n                    2,\n                  )}\n                </pre>\n              </output>\n            </Section>\n          )\n        }\n\n        return (\n          <>\n            <MyComponent />\n            <Output />\n          </>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\n/**\n * Replaces undefined values in an object with a specified replacement value.\n * @param value - The value to check for undefined values.\n * @param replaceWith - The value to replace undefined values with. Default is null.\n * @returns The object with undefined values replaced.\n */\nfunction replaceUndefinedValues(\n  value: unknown,\n  replaceWith = null,\n): unknown {\n  if (typeof value === 'undefined') {\n    return replaceWith\n  } else if (typeof value === 'object' && value !== replaceWith) {\n    return {\n      ...value,\n      ...Object.fromEntries(\n        Object.entries(value).map(([k, v]) => [\n          k,\n          replaceUndefinedValues(v),\n        ]),\n      ),\n    }\n  } else {\n    return value\n  }\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.AsyncChangeAndValidation) _missingMdxReference(\"Examples.AsyncChangeAndValidation\", true);\n  if (!Examples.AsyncSubmit) _missingMdxReference(\"Examples.AsyncSubmit\", true);\n  if (!Examples.AsyncSubmitComplete) _missingMdxReference(\"Examples.AsyncSubmitComplete\", true);\n  if (!Examples.Autofill) _missingMdxReference(\"Examples.Autofill\", true);\n  if (!Examples.FilterData) _missingMdxReference(\"Examples.FilterData\", true);\n  if (!Examples.SessionStorage) _missingMdxReference(\"Examples.SessionStorage\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"In combination with a SubmitButton\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This example uses an async \", _jsx(_components.code, {\n        children: \"onSubmit\"\n      }), \" event handler. It will disable all fields and show an indicator on the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/extended-features/Form/SubmitButton/\",\n        children: \"SubmitButton\"\n      }), \" while the form is pending.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With an async function, you can also handle the response from the server and update the form with the new data.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// Async function\\nconst onSubmit = async (data) => {\\n  try {\\n    const response = await fetch('https://api.example.com', {\\n      method: 'POST',\\n      body: JSON.stringify(data),\\n    })\\n    const data = await response.json()\\n    Form.setData('unique', data) // Whatever you want to do with the data\\n  } catch (error) {\\n    return error // Will display the error message in the form\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Examples.AsyncSubmit, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"New location after async submit\"\n    }), \"\\n\", _jsx(Examples.AsyncSubmitComplete, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Async validation with async onChange\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Type \\\"valid\\\" in order to see the validation message.\"\n    }), \"\\n\", _jsx(Examples.AsyncChangeAndValidation, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Filter your data\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By using the \", _jsx(_components.code, {\n        children: \"filterData\"\n      }), \" prop you can filter out data that you don't want to send to your server.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It will filter out data from the \", _jsx(_components.code, {\n        children: \"onSubmit\"\n      }), \" event property.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this example we filter out all fields that are disabled.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/extended-features/Form/useData/\",\n        children: \"useData\"\n      }), \" hook also returns a \", _jsx(_components.code, {\n        children: \"filterData\"\n      }), \" function you can use to filter data the same way.\"]\n    }), \"\\n\", _jsx(Examples.FilterData, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With session storage\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Changes you make to the fields are temporarily saved and loaded\\nwhen the browser reloads. The data is stored until the session storage is invalidated.\"\n    }), \"\\n\", _jsx(Examples.SessionStorage, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Autocomplete (autofill) user data\"\n    }), \"\\n\", _jsx(Examples.Autofill, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport AsyncStateReturnExample from './parts/async-state-return-example.mdx';\nimport AsyncChangeExample from './parts/async-change-example.mdx';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Form.Handler\"\n      }), \" component provides both the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/extended-features/Form/Element\",\n        children: \"Form.Element\"\n      }), \" and a HTML form element.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"It ensures, users can press \", _jsx(_components.strong, {\n          children: \"enter key\"\n        }), \" while focusing on an input field.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"It calls \", _jsx(_components.code, {\n          children: \"preventDefault\"\n        }), \" by default.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Form } from '@dnb/eufemia/extensions/forms'\\nrender(\\n  <Form.Handler\\n    data={existingData}\\n    onChange={...}\\n    onSubmit={...}\\n  >\\n    Your Form\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The form data can be handled outside of the form. This is useful if you want to use the form data in other components:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Form } from '@dnb/eufemia/extensions/forms'\\nfunction Component() {\\n  const { data } = Form.useData('unique')\\n\\n  return <Form.Handler id=\\\"unique\\\">...</Form.Handler>\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"More examples can be found in the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/extended-features/Form/useData/\",\n        children: \"Form.useData\"\n      }), \" docs.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Async form behavior\"\n    }), \"\\n\", _jsx(AsyncChangeExample, {}), \"\\n\", _jsx(AsyncStateReturnExample, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Browser autofill\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can set \", _jsx(_components.code, {\n        children: \"autoComplete\"\n      }), \" on the \", _jsx(_components.code, {\n        children: \"Form.Handler\"\n      }), \" – each \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/base-fields/String/\",\n        children: \"Field.String\"\n      }), \"-field will then get \", _jsx(_components.code, {\n        children: \"autoComplete=\\\"on\\\"\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<Form.Handler autoComplete={true}>\\n  <Field.String path=\\\"/firstName\\\" />\\n  <Field.String path=\\\"/lastName\\\" />\\n</Form.Handler>\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"path\"\n      }), \" property will be used to set the \", _jsx(_components.code, {\n        children: \"name\"\n      }), \" attribute, which lets browser know which autocomplete value should be proposed to the user.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Temporary storage\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"sessionStorageId\"\n      }), \" feature uses the browsers session-storage (temporary storage mechanism) to store data entered by the user.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This lets the user navigate away and come back to the form, without loosing already entered data.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ensure you only use this feature for non-sensitive data.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It will flush the storage once the form gets submitted.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"You can return parameters from inside the \", _jsx(_components.code, {\n        children: \"onChange\"\n      }), \" event handler. This way you can display more related information, such as an error or an object with these keys:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// Async event handler\\nconst onChange = debounceAsync(async function (data) {\\n  try {\\n    await makeRequest(data)\\n  } catch (error) {\\n    return error\\n  }\\n\\n  // Optionally, you can return an object with these keys, depending your needs\\n  return {\\n    info: 'Info message',\\n    warning: 'Warning message',\\n\\n    // and either an error\\n    error: new Error('Error message'),\\n\\n    // or success (when used for autosave)\\n    success: 'saved',\\n  } as const\\n})\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"In all async operations, you can simply return an error object to display it in the form or influence the form behavior.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form } from '@dnb/eufemia/extensions/forms'\\n\\n// Async function\\nconst onSubmit = async (data) => {\\n  try {\\n    const response = await fetch('https://api.example.com', {\\n      method: 'POST',\\n      body: JSON.stringify(data),\\n    })\\n    const data = await response.json()\\n\\n    Form.setData('unique', data) // Whatever you want to do with the data\\n  } catch (error) {\\n    return error // Will display the error message in the form\\n  }\\n\\n  // Optionally, you can return an object with these keys, depending your needs\\n  return {\\n    info: 'Info message',\\n    warning: 'Warning message',\\n\\n    // Force the form to stay in pending state\\n    status: 'pending',\\n\\n    // and either an error\\n    error: new Error('Error message'),\\n  } as const\\n}\\n\\nfunction Component() {\\n  return (\\n    <Form.Handler id=\\\"unique\\\" onSubmit={onSubmit}>\\n      ...\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { Button, Card, Flex, FormLabel } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../../shared/tags/ComponentBox'\nimport { Field, FieldBlock, Form } from '@dnb/eufemia/src/extensions/forms'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      <Form.SubmitIndicator state=\"pending\" />\n    </ComponentBox>\n  )\n}\n\nexport const AsyncSubmitBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay}>\n            <Card stack>\n              <Field.String path=\"/myField\" label=\"Short label\" />\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AsyncChangeBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay} onChange={delay}>\n            <Card stack>\n              <Field.String\n                path=\"/myField1\"\n                label=\"Label (with async validation)\"\n                placeholder=\"Write something ...\"\n                validator={delay}\n              />\n              <FieldBlock width=\"medium\">\n                <Field.String\n                  path=\"/myField2\"\n                  width=\"stretch\"\n                  label=\"This is a long label\"\n                />\n              </FieldBlock>\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\ntype CreateRequestReturn = Promise<{ hasError: boolean; cancel?: boolean }>\n\nexport const createRequest = () => {\n  let timeout: NodeJS.Timeout | null\n  let resolvePromise: ((value?: unknown) => void) | undefined\n\n  const fn = (t: number): CreateRequestReturn => {\n    return new Promise((resolve) => {\n      resolvePromise = resolve\n      timeout = setTimeout(() => {\n        resolve({ hasError: false })\n      }, t)\n    })\n  }\n\n  fn.cancel = () => {\n    resolvePromise?.({ hasError: true })\n    clearTimeout(timeout)\n    timeout = null\n  }\n\n  return fn\n}\n\nexport const WithinOtherComponents = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Flex.Horizontal align=\"center\">\n          <Form.SubmitButton showIndicator />\n          <Button variant=\"secondary\" icon=\"chevron_right\">\n            Secondary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <Button variant=\"tertiary\">\n            Tertiary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <FormLabel>\n            Label\n            <Form.SubmitIndicator state=\"pending\" />\n          </FormLabel>\n        </Flex.Horizontal>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","AsyncSubmit","ComponentBox","AsyncSubmitComplete","AsyncChangeAndValidation","scope","debounceAsync","createRequest","noInline","SessionStorage","Autofill","FilterData","id","replaceUndefinedValues","value","replaceWith","fromEntries","entries","map","_ref","k","v","_components","h2","h3","p","code","a","pre","Examples","_missingMdxReference","href","className","component","Error","ul","li","strong","AsyncChangeExample","AsyncStateReturnExample","Default","AsyncSubmitBehavior","AsyncChangeBehavior","timeout","resolvePromise","fn","t","Promise","resolve","setTimeout","hasError","cancel","_resolvePromise","clearTimeout","WithinOtherComponents"],"sourceRoot":""}