{"version":3,"file":"component---src-docs-uilib-extensions-forms-extended-features-form-handler-parts-async-change-example-mdx-e7a641d09ab7fee9fe2d.js","mappings":"6KAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,KAAM,OACNC,IAAK,QACJC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACF,EAAAA,EAAAA,MAAMR,EAAYG,EAAG,CAC9BO,SAAU,CAAC,8CAA8CC,EAAAA,EAAAA,KAAKX,EAAYI,KAAM,CAC9EM,SAAU,aACR,uHACF,MAAMC,EAAAA,EAAAA,KAAKX,EAAYK,IAAK,CAC9BK,UAAUC,EAAAA,EAAAA,KAAKX,EAAYI,KAAM,CAC/BQ,UAAW,cACXF,SAAU,meAIlB,CAOA,UANA,SAAoBX,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOc,QAASC,GAAab,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOO,GAAYH,EAAAA,EAAAA,KAAKG,EAAWb,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DW,UAAUC,EAAAA,EAAAA,KAAKb,EAAmBC,MAC9BD,EAAkBC,EAC1B,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/Handler/parts/async-change-example.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"You can return parameters from inside the \", _jsx(_components.code, {\n        children: \"onChange\"\n      }), \" event handler. This way you can display more related information, such as an error or an object with these keys:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// Async event handler\\nconst onChange = debounceAsync(async function (data) {\\n  try {\\n    await makeRequest(data)\\n  } catch (error) {\\n    return error\\n  }\\n\\n  // Optionally, you can return an object with these keys, depending your needs\\n  return {\\n    info: 'Info message',\\n    warning: 'Warning message',\\n\\n    // and either an error\\n    error: new Error('Error message'),\\n\\n    // or success (when used for autosave)\\n    success: 'saved',\\n  } as const\\n})\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","pre","_provideComponents","components","_jsxs","_Fragment","children","_jsx","className","wrapper","MDXLayout"],"sourceRoot":""}