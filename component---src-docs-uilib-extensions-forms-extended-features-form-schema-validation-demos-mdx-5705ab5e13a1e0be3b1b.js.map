{"version":3,"file":"component---src-docs-uilib-extensions-forms-extended-features-form-schema-validation-demos-mdx-5705ab5e13a1e0be3b1b.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/schema-validation/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/schema-validation/demos.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/Array/Array.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/ArrayPushButton/ArrayPushButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/ArrayRemoveElementButton/ArrayRemoveElementButton.tsx"],"sourcesContent":["import ComponentBox from '../../../../../../../shared/tags/ComponentBox'\nimport { Card, Flex } from '@dnb/eufemia/src'\nimport { Form, Field, Iterate } from '@dnb/eufemia/src/extensions/forms'\nimport { trash as TrashIcon } from '@dnb/eufemia/src/icons'\n\nexport const SingleFieldSchema = () => {\n  return (\n    <ComponentBox>\n      <Field.String schema={{ type: 'string', minLength: 5 }} />\n    </ComponentBox>\n  )\n}\n\nexport const DataSetSchema = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        data={{\n          address: 'Prefilled address',\n        }}\n        schema={{\n          type: 'object',\n          properties: {\n            name: { type: 'string', minLength: 2 },\n            address: { type: 'string', minLength: 3 },\n          },\n          required: ['name', 'address'],\n        }}\n      >\n        <Card spacing=\"small\" bottom=\"small\">\n          <Form.MainHeading>Company information</Form.MainHeading>\n\n          <Field.String path=\"/name\" label=\"Name\" />\n          <Field.String path=\"/address\" label=\"Address\" />\n        </Card>\n\n        <Form.SubmitButton />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const IfRuleSchema = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        data={{}}\n        schema={{\n          type: 'object',\n          properties: {\n            name: { type: 'string' },\n            customerType: {\n              type: 'string',\n              enum: ['corporate', 'private'],\n            },\n            companyName: { type: 'string' },\n          },\n          if: {\n            properties: { customerType: { enum: ['corporate'] } },\n            required: ['customerType'],\n          },\n          then: { required: ['name', 'companyName'] },\n          else: { required: ['name'] },\n        }}\n      >\n        <Card spacing=\"small\" bottom=\"small\">\n          <Form.MainHeading>Customer information</Form.MainHeading>\n\n          <Field.String path=\"/name\" label=\"Name\" />\n          <Field.String\n            path=\"/customerType\"\n            label=\"Customer type (corporate or private)\"\n          />\n          <Field.String\n            path=\"/companyName\"\n            label=\"Company name (required for corporate customers)\"\n          />\n        </Card>\n\n        <Form.SubmitButton />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const DependantListSchema = () => {\n  return (\n    <ComponentBox scope={{ Iterate, TrashIcon }}>\n      <Form.Handler\n        data={{\n          accounts: [{}],\n        }}\n        schema={{\n          type: 'object',\n          definitions: {\n            account: {\n              type: 'object',\n              properties: {\n                accountNumber: {\n                  type: 'string',\n                  pattern: '^[0-9]{11}$',\n                },\n                alias: {\n                  type: 'string',\n                  minLength: 2,\n                  maxLength: 32,\n                },\n              },\n              required: ['accountNumber'],\n            },\n          },\n          properties: {\n            name: { type: 'string' },\n            email: { type: 'string' },\n            phone: { type: 'string' },\n            accounts: {\n              type: 'array',\n              items: {\n                $ref: '#/definitions/account',\n              },\n            },\n            bsuAccount: {\n              $ref: '#/definitions/account',\n            },\n          },\n          oneOf: [\n            {\n              properties: {\n                accounts: {\n                  type: 'array',\n                  minItems: 1,\n                },\n              },\n            },\n            {\n              properties: {\n                accounts: {\n                  type: 'array',\n                  minItems: 0,\n                },\n                bsuAccount: {\n                  type: 'object',\n                  required: ['accountNumber'],\n                },\n              },\n              required: ['bsuAccount'],\n            },\n          ],\n        }}\n      >\n        <Flex.Vertical spacing=\"small\">\n          <Form.MainHeading>Customer information</Form.MainHeading>\n          <Card spacing=\"small\">\n            <Field.String path=\"/name\" label=\"Name\" />\n            <Field.Email path=\"/email\" label=\"E-mail\" />\n            <Field.PhoneNumber path=\"/phone\" label=\"Phone number\" />\n          </Card>\n\n          <Form.MainHeading>Accounts</Form.MainHeading>\n          <Card spacing=\"small\">\n            <Form.SubHeading>Standard accounts</Form.SubHeading>\n\n            <Iterate.Array path=\"/accounts\">\n              <Flex.Horizontal align=\"flex-end\">\n                <Field.BankAccountNumber\n                  itemPath=\"/accountNumber\"\n                  label=\"Account number\"\n                />\n                <Field.String\n                  itemPath=\"/alias\"\n                  label=\"Alias\"\n                  width=\"medium\"\n                />\n                <Iterate.ArrayRemoveElementButton icon={TrashIcon} />\n              </Flex.Horizontal>\n            </Iterate.Array>\n\n            <Iterate.ArrayPushButton\n              icon=\"add\"\n              icon_position=\"left\"\n              text=\"Add account\"\n              path=\"/accounts\"\n              pushValue={{}}\n              size=\"medium\"\n            />\n\n            <Form.SubHeading>BSU Account</Form.SubHeading>\n            <Field.BankAccountNumber\n              path=\"/bsuAccount/accountNumber\"\n              label=\"Account number\"\n            />\n            <Field.String path=\"/bsuAccount/alias\" label=\"Alias\" />\n          </Card>\n\n          <Form.SubmitButton />\n        </Flex.Vertical>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.DataSetSchema) _missingMdxReference(\"Examples.DataSetSchema\", true);\n  if (!Examples.DependantListSchema) _missingMdxReference(\"Examples.DependantListSchema\", true);\n  if (!Examples.IfRuleSchema) _missingMdxReference(\"Examples.IfRuleSchema\", true);\n  if (!Examples.SingleFieldSchema) _missingMdxReference(\"Examples.SingleFieldSchema\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Schema for single field\"\n    }), \"\\n\", _jsx(Examples.SingleFieldSchema, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Schema for a whole data set\"\n    }), \"\\n\", _jsx(Examples.DataSetSchema, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Schema with if-rule\"\n    }), \"\\n\", _jsx(Examples.IfRuleSchema, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Dependant list schema\"\n    }), \"\\n\", _jsx(\"em\", {\n      children: _jsx(_components.p, {\n        children: \"Becoming a new customer, this form requires at least one normal account\\nto be added, unless the customer opens a BSU account, then normal\\naccounts can still be added, but is optional.\"\n      })\n    }), \"\\n\", _jsx(Examples.DependantListSchema, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import React, { useMemo, useCallback } from 'react'\nimport classnames from 'classnames'\nimport pointer from 'json-pointer'\nimport IterateElementContext from '../IterateElementContext'\nimport FieldBlock, { Props as FieldBlockProps } from '../../FieldBlock'\nimport { useDataValue } from '../../hooks'\nimport { FieldProps, FieldHelpProps } from '../../types'\nimport { pickSpacingProps } from '../../../../components/flex/utils'\nimport {\n  BasicProps as FlexContainerProps,\n  pickFlexContainerProps,\n} from '../../../../components/flex/Container'\nimport Flex from '../../../../components/flex/Flex'\n\ninterface ErrorMessages {\n  required?: string\n  schema?: string\n}\n\nexport type Props = FieldHelpProps &\n  FieldProps<unknown[], undefined, ErrorMessages> &\n  Omit<FieldBlockProps, 'children'> &\n  Omit<FlexContainerProps, 'children' | 'width'> & {\n    children:\n      | React.ReactNode\n      | ((value: any, index: number) => React.ReactNode)\n      | Array<\n          | React.ReactNode\n          | ((value: any, index: number) => React.ReactNode)\n        >\n  }\n\nfunction ArrayComponent(props: Props) {\n  const {\n    className,\n    layout = 'vertical',\n    placeholder,\n    label,\n    labelDescription,\n    labelSecondary,\n    path,\n    value: arrayValue,\n    info,\n    warning,\n    error,\n    emptyValue,\n    width,\n    handleChange,\n    children,\n  } = useDataValue(props)\n\n  const elementData: {\n    elementValue: unknown\n    handleElementChange: (path: string, value: unknown) => void\n    handleRemoveElement: () => void\n  }[] = useMemo(() => {\n    return (arrayValue ?? []).map((elementValue, elementIndex) => ({\n      elementValue,\n      handleElementChange: (path, value) => {\n        const newArrayValue = structuredClone(arrayValue)\n        pointer.set(newArrayValue, path, value)\n        handleChange?.(newArrayValue)\n      },\n      handleRemoveElement: () => {\n        const newArrayValue = structuredClone(arrayValue)\n        newArrayValue.splice(elementIndex, 1)\n        handleChange?.(newArrayValue)\n      },\n    }))\n  }, [arrayValue, handleChange])\n\n  const handlePush = useCallback(\n    (element: unknown) => {\n      handleChange([...(arrayValue ?? []), element])\n    },\n    [arrayValue, handleChange]\n  )\n\n  return (\n    <FieldBlock\n      className={classnames('dnb-forms-field-number', className)}\n      layout={layout}\n      label={label}\n      labelDescription={labelDescription}\n      labelSecondary={labelSecondary}\n      info={info}\n      warning={warning}\n      error={error}\n      width={width}\n      contentsWidth={width !== false ? width : undefined}\n      {...pickSpacingProps(props)}\n    >\n      <Flex.Container\n        {...pickFlexContainerProps(props as FlexContainerProps, {\n          spacing: 'small',\n        })}\n      >\n        {arrayValue === emptyValue ? (\n          <em>{placeholder}</em>\n        ) : (\n          elementData.map(\n            (\n              { elementValue, handleElementChange, handleRemoveElement },\n              elementIndex\n            ) => {\n              return (\n                <IterateElementContext.Provider\n                  key={`element-${elementIndex}`}\n                  value={{\n                    index: elementIndex,\n                    value: elementValue,\n                    path,\n                    handleChange: handleElementChange,\n                    handleRemove: handleRemoveElement,\n                    handlePush,\n                  }}\n                >\n                  {Array.isArray(children)\n                    ? children.map((childElement) =>\n                        typeof childElement === 'function'\n                          ? childElement(elementValue, elementIndex)\n                          : childElement\n                      )\n                    : typeof children === 'function'\n                    ? children(elementValue, elementIndex)\n                    : children}\n                </IterateElementContext.Provider>\n              )\n            }\n          )\n        )}\n      </Flex.Container>\n    </FieldBlock>\n  )\n}\n\nArrayComponent._supportsSpacingProps = true\nexport default ArrayComponent\n","import React, { useCallback, useContext } from 'react'\nimport classnames from 'classnames'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/Button'\nimport IterateElementContext from '../IterateElementContext'\nimport { useDataValue } from '../../hooks'\nimport {\n  DataValueReadWriteComponentProps,\n  omitDataValueReadWriteProps,\n} from '../../types'\n\nexport type Props = ButtonProps &\n  DataValueReadWriteComponentProps<unknown[]> & {\n    pushValue: unknown\n  }\n\nfunction ArrayPushButton(props: Props) {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { handlePush } = iterateElementContext ?? {}\n\n  const { pushValue, ...restProps } = props\n  const buttonProps = omitDataValueReadWriteProps(restProps)\n  const { value, handleChange, children } = useDataValue(restProps)\n\n  if (value !== undefined && !Array.isArray(value)) {\n    throw new Error('ArrayPushButton received a non-array value.')\n  }\n\n  const handleClick = useCallback(() => {\n    if (handlePush) {\n      // Inside an Iterate element - make the change through the Iterate component\n      handlePush(pushValue)\n      return\n    }\n\n    // If not inside an iterate, it could still manipulate a source data set through useDataValue\n    handleChange([...(value ?? []), pushValue])\n  }, [value, pushValue, handlePush, handleChange])\n\n  return (\n    <Button\n      className={classnames(\n        'dnb-forms-array-push-button',\n        props.className\n      )}\n      on_click={handleClick}\n      {...buttonProps}\n    >\n      {children}\n    </Button>\n  )\n}\n\nArrayPushButton._supportsSpacingProps = true\nexport default ArrayPushButton\n","import React, { useCallback, useContext } from 'react'\nimport classnames from 'classnames'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/Button'\nimport IterateElementContext from '../IterateElementContext'\nimport { useDataValue } from '../../hooks'\nimport {\n  DataValueReadWriteComponentProps,\n  omitDataValueReadWriteProps,\n} from '../../types'\n\nexport type Props = ButtonProps &\n  DataValueReadWriteComponentProps<unknown[]>\n\nfunction ArrayRemoveElementButton(props: Props) {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { handleRemove } = iterateElementContext ?? {}\n\n  if (!iterateElementContext) {\n    throw new Error(\n      'ArrayRemoveElementButton must be inside an Iterate.Array component.'\n    )\n  }\n\n  const buttonProps = omitDataValueReadWriteProps(props)\n\n  const { children } = useDataValue(props)\n\n  const handleClick = useCallback(() => {\n    handleRemove()\n  }, [handleRemove])\n\n  return (\n    <Button\n      className={classnames(\n        'dnb-forms-array-remove-element-button',\n        props.className\n      )}\n      on_click={handleClick}\n      {...buttonProps}\n    >\n      {children}\n    </Button>\n  )\n}\n\nArrayRemoveElementButton._supportsSpacingProps = true\nexport default ArrayRemoveElementButton\n"],"names":["SingleFieldSchema","_jsx","ComponentBox","children","DataSetSchema","IfRuleSchema","DependantListSchema","scope","Iterate","TrashIcon","_createMdxContent","props","_components","Object","assign","h2","h3","p","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error","ArrayComponent","className","layout","placeholder","label","labelDescription","labelSecondary","path","value","arrayValue","info","warning","error","emptyValue","width","handleChange","useDataValue","elementData","useMemo","map","elementValue","elementIndex","handleElementChange","newArrayValue","structuredClone","pointer","handleRemoveElement","splice","handlePush","useCallback","element","concat","_toConsumableArray","FieldBlock","classnames","contentsWidth","undefined","pickSpacingProps","Flex","pickFlexContainerProps","spacing","_ref","IterateElementContext","Provider","index","handleRemove","Array","isArray","childElement","_supportsSpacingProps","ArrayPushButton","iterateElementContext","useContext","pushValue","restProps","buttonProps","omitDataValueReadWriteProps","handleClick","Button","on_click","ArrayRemoveElementButton"],"sourceRoot":""}