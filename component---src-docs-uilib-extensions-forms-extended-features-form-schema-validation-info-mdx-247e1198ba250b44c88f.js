"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[33329],{10201:function(e,n,s){s.r(n);var r=s(52322),a=s(45392);function i(e){const n=Object.assign({h2:"h2",p:"p",a:"a",pre:"pre",code:"code",h3:"h3",strong:"strong",ul:"ul",li:"li",h4:"h4",ol:"ol"},(0,a.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["JSON Schema is a vocabulary for annotating and validating data in js. More about JSON Schema on ",(0,r.jsx)(n.a,{href:"https://json-schema.org/",children:"json-schema.org"})]}),"\n",(0,r.jsx)(n.p,{children:"A schema can be used from the simplest description of the data type of a value:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"{\n  type: 'string'\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Results in:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"Foo"\n'})}),"\n",(0,r.jsx)(n.p,{children:"To an object with both rules for required fields and validation rules for single values:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"{\n  type: \"object\",\n  properties: {\n    textField: { type: 'string', minLength: 5 },\n    numberField: { type: 'number', maximum: 100 },\n  },\n  required: ['textField']\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Results in:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "textField": "abcde",\n  "numberField": 123\n}\n'})}),"\n",(0,r.jsx)(n.h3,{children:"Using schema with DataContext"}),"\n",(0,r.jsx)(n.p,{children:"These two examples will result in the same validation for the user:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<Form.Handler data={user}>\n  <Field.String path="/name" label="Name" minLength={3} required />\n  <Field.Email path="/email" label="E-mail" required />\n  <Field.Number\n    path="/birthyear"\n    label="Birth year"\n    minimum={1900}\n    maximum={2023}\n    required\n  />\n</Form.Handler>\n'})}),"\n",(0,r.jsx)(n.p,{children:"vs."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { JSONSchema } from \'@dnb/eufemia/extensions/forms\'\n\nconst schema: JSONSchema = {\n  properties: {\n    name: { minLength: 3 },\n    email: { type: \'string\' },\n    birthyear: { minimum: 1900, maximum: 2023 },\n  },\n  required: [\'name\', \'email\', \'birthyear\'],\n}\n\n<Form.Handler data={user} schema={schema}>\n  <Field.String path="/name" label="Name" />\n  <Field.Email path="/email" label="E-mail" />\n  <Field.Number path="/birthyear" label="Birth year" />\n</Form.Handler>\n'})}),"\n",(0,r.jsx)(n.p,{children:"This makes it possible to create a uniform, testable description and requirements specification for the data, which can be tested independently of frontend code, and used across systems, e.g. frontend and backend."}),"\n",(0,r.jsxs)(n.p,{children:["Also, note you can describe the schema without using the ",(0,r.jsx)(n.code,{children:"type"})," property, as the type is inferred from schema type. More on that topic in the ",(0,r.jsx)(n.a,{href:"https://ajv.js.org/guide/typescript.html#utility-types-for-schemas",children:"Ajv docs"}),"."]}),"\n",(0,r.jsx)(n.h3,{children:"Fields which are disabled or read-only"}),"\n",(0,r.jsxs)(n.p,{children:["Fields which have the ",(0,r.jsx)(n.code,{children:"disabled"})," prop or the ",(0,r.jsx)(n.code,{children:"readOnly"})," prop, will skip validation."]}),"\n",(0,r.jsx)(n.h3,{children:"JSONSchema and TypeScript"}),"\n",(0,r.jsxs)(n.p,{children:["You can import the ",(0,r.jsx)(n.code,{children:"JSONSchema"})," type from the ",(0,r.jsx)(n.code,{children:"@dnb/eufemia/extensions/forms"})," package."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { JSONSchema } from '@dnb/eufemia/extensions/forms'\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Its a shorthand for ",(0,r.jsx)(n.code,{children:"JSONSchema7"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["You can also use the utility ",(0,r.jsx)(n.code,{children:"JSONSchemaType"})," type, so you can validate your data types."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"NB:"})," This requires ",(0,r.jsx)(n.code,{children:"strictNullChecks"})," in the ",(0,r.jsx)(n.code,{children:"tsconfig"})," settings to be true."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { JSONSchemaType } from '@dnb/eufemia/extensions/forms'\n\ntype MyData = {\n  foo: number\n  bar?: string\n}\n\nconst schema: JSONSchemaType<MyData> = {\n  type: 'object',\n  properties: {\n    foo: { type: 'integer' },\n    bar: { type: 'string', nullable: true },\n  },\n  required: ['foo'],\n}\n"})}),"\n",(0,r.jsx)(n.h3,{children:"Complex schemas"}),"\n",(0,r.jsx)(n.p,{children:"In addition to basic validation as in the example above, JSON Schema can be used for more complex. Examples of definitions supported by the standard are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Requirement that the object must not have other properties than those defined in ",(0,r.jsx)(n.code,{children:"properties"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Nested data structures and combinations of objects and arrays with rules for array elements (fixed or repetitive elements)."}),"\n",(0,r.jsx)(n.li,{children:"Regular expressions for the syntax of individual values."}),"\n",(0,r.jsx)(n.li,{children:"Enum (a set of valid values)."}),"\n",(0,r.jsx)(n.li,{children:"Rules for the number of elements in arrays."}),"\n",(0,r.jsx)(n.li,{children:"Rules for the number of properties in objects."}),"\n",(0,r.jsx)(n.li,{children:"Predefined format rules (eg 'uri', 'email' and 'hostname')."}),"\n",(0,r.jsx)(n.li,{children:"Logical operators such as 'not', 'oneOf', 'allOf' and 'anyOf' which can be filled with rules for all or part of the data set."}),"\n",(0,r.jsx)(n.li,{children:"Rule set based on the content of values (if-then-else)."}),"\n",(0,r.jsx)(n.li,{children:"Rules (sub-schemas) that become applicable if a given value is present."}),"\n",(0,r.jsx)(n.li,{children:"Reuse within the definition, such as one and the same object structure being used as a definition for several locations in a structure."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["To learn more about what is possible with the JSON Schema standard, see ",(0,r.jsx)(n.a,{href:"https://json-schema.org/",children:"json-schema.org"}),"."]}),"\n",(0,r.jsx)(n.h4,{children:"Custom Ajv instance and keywords"}),"\n",(0,r.jsxs)(n.p,{children:["You can provide your custom ",(0,r.jsx)(n.code,{children:"validate"})," function with your own keywords to your schema. Below are two examples of how to do that."]}),"\n",(0,r.jsx)(n.p,{children:"First, you need to create your won instance of Ajv:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Ajv } from '@dnb/eufemia/extensions/forms'\n\nconst ajv = new Ajv({\n  strict: true,\n  allErrors: true,\n})\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then you add your custom keyword to the Ajv instance:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Add a custom keyword 'isEven'\najv.addKeyword({\n  keyword: 'isEven',\n  validate: (schema, value) => {\n    // Check if the number is even.\n    return value % 2 === 0\n  },\n})\n\n// Now we can use the 'isEven' keyword in our schema.\nconst schema = {\n  type: 'object',\n  properties: {\n    myKey: {\n      type: 'string',\n      isEven: true, // The number must be even.\n    },\n  },\n} as const\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"as const"})," to make sure the schema is not inferred as ",(0,r.jsx)(n.code,{children:"JSONSchema7"})," but as a literal type."]}),"\n",(0,r.jsx)(n.p,{children:"And finally add the Ajv instance to your form:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { Form, Field } from \'@dnb/eufemia/extensions/forms\'\n\nrender(\n  <Form.Handler schema={schema} ajvInstance={ajv}>\n    <Field.String path="/myKey" value="1" validateInitially />\n  </Form.Handler>,\n)\n'})}),"\n",(0,r.jsx)(n.h4,{children:"Custom Ajv keyword in a field"}),"\n",(0,r.jsx)(n.p,{children:"Here is another example of a custom keyword, used in one field only:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Ajv } from '@dnb/'\nimport { Form, Field } from '@dnb/eufemia/extensions/forms'\n\nconst ajv = new Ajv({\n  strict: true,\n  allErrors: true,\n})\n\najv.addKeyword({\n  keyword: 'notEmpty',\n  validate: (schema, value) => {\n    return value.length > 0\n  },\n})\n\nconst schema = {\n  type: 'string',\n  notEmpty: true, // The value must be more than one character.\n} as const\n\nrender(\n  <Form.Handler ajvInstance={ajv}>\n    <Field.String\n      schema={schema}\n      path=\"/myKey\"\n      value=\"\"\n      validateInitially\n    />\n  </Form.Handler>,\n)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can find more info about error messages in the ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Form/error-messages/",children:"Error messages"})," docs."]}),"\n",(0,r.jsx)(n.h4,{children:"Custom error messages"}),"\n",(0,r.jsxs)(n.p,{children:["When having a custom keyword, you can provide custom error message on four levels with the ",(0,r.jsx)(n.code,{children:"errorMessage"})," or ",(0,r.jsx)(n.code,{children:"errorMessages"})," prop:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"On the schema level."}),"\n",(0,r.jsx)(n.li,{children:"On the Form.Handler (Provider) level."}),"\n",(0,r.jsx)(n.li,{children:"On the Form.Handler (Provider) level with a JSON Pointer path."}),"\n",(0,r.jsx)(n.li,{children:"On the field level."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The levels are prioritized in the order above, so the field level error message will overwrite all other levels."}),"\n",(0,r.jsx)(n.p,{children:"Here is an example of how to do that:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"const schema = {\n  type: 'string',\n  notEmpty: true, // The value must be more than one character.\n  // Level 1\n  errorMessage: 'You can provide a custom message in the schema itself',\n} as const\n\nrender(\n  <Form.Handler\n    ajvInstance={ajv}\n    errorMessages={{\n      // Level 2\n      notEmpty: 'Or on the provider',\n      '/myKey': {\n        // Level 3\n        notEmpty: 'Or on the provider for just one field',\n      },\n    }}\n  >\n    <Field.String\n      schema={schema}\n      path=\"/myKey\"\n      value=\"\"\n      validateInitially\n      errorMessages={{\n        // Level 4\n        notEmpty: 'Or on a single Field itself',\n      }}\n    />\n  </Form.Handler>,\n)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can find more info about error messages in the ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Form/error-messages/",children:"Error messages"})," docs."]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(i,e)})):i(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-extended-features-form-schema-validation-info-mdx-247e1198ba250b44c88f.js.map