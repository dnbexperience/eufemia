{"version":3,"file":"component---src-docs-uilib-extensions-forms-extended-features-form-schema-validation-info-mdx-63cf98c9ee6c3fe0129e.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/schema-validation/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"JSON Schema is a vocabulary for annotating and validating data in js. More about JSON Schema on \", _jsx(_components.a, {\n        href: \"https://json-schema.org/\",\n        children: \"json-schema.org\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A schema can be used from the simplest description of the data type of a value:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"{\\n  type: 'string'\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Results in:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"\\\"Foo\\\"\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To an object with both rules for required fields and validation rules for single values:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"{\\n  type: \\\"object\\\",\\n  properties: {\\n    textField: { type: 'string', minLength: 5 },\\n    numberField: { type: 'number', maximum: 100 },\\n  },\\n  required: ['textField']\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Results in:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"{\\n  \\\"textField\\\": \\\"abcde\\\",\\n  \\\"numberField\\\": 123\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Using schema with DataContext\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since a \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/extended-features/DataContext/\",\n        children: \"DataContext\"\n      }), \" (used in isolation or through the use of \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/extended-features/Form/Handler/\",\n        children: \"Form.Handler\"\n      }), \") supports JSON Schema, these two examples will result in the same validation for the user:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Form.Handler data={user}>\\n  <Field.String path=\\\"/name\\\" label=\\\"Name\\\" minLength={3} required />\\n  <Field.Email path=\\\"/email\\\" label=\\\"E-mail\\\" required />\\n  <Field.Number\\n    path=\\\"/birthyear\\\"\\n    label=\\\"Birth year\\\"\\n    minimum={1900}\\n    maximum={2023}\\n    required\\n  />\\n</Form.Handler>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"vs.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { JSONSchema } from '@dnb/eufemia/extensions/forms'\\nconst schema: JSONSchema = {\\n  properties: {\\n    name: { minLength: 3 },\\n    email: { type: 'string' },\\n    birthyear: { minimum: 1900, maximum: 2023 },\\n  },\\n  required: ['name', 'email', 'birthyear'],\\n}\\n<Form.Handler data={user} schema={schema}>\\n  <Field.String path=\\\"/name\\\" label=\\\"Name\\\" />\\n  <Field.Email path=\\\"/email\\\" label=\\\"E-mail\\\" />\\n  <Field.Number path=\\\"/birthyear\\\" label=\\\"Birth year\\\" />\\n</Form.Handler>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This makes it possible to create a uniform, testable description and requirements specification for the data, which can be tested independently of frontend code, and used across systems, e.g. frontend and backend.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Also, note you can describe the schema without using the \", _jsx(_components.code, {\n        children: \"type\"\n      }), \" property, as the type is inferred from schema type. More on that topic in the \", _jsx(_components.a, {\n        href: \"https://ajv.js.org/guide/typescript.html#utility-types-for-schemas\",\n        children: \"Ajv docs\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Complex schemas\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In addition to basic validation as in the example above, JSON Schema can be used for more complex. Examples of definitions supported by the standard are:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Requirement that the object must not have other properties than those defined in \", _jsx(_components.code, {\n          children: \"properties\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Nested data structures and combinations of objects and arrays with rules for array elements (fixed or repetitive elements).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Regular expressions for the syntax of individual values.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Enum (a set of valid values).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Rules for the number of elements in arrays.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Rules for the number of properties in objects.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Predefined format rules (eg 'uri', 'email' and 'hostname').\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Logical operators such as 'not', 'oneOf', 'allOf' and 'anyOf' which can be filled with rules for all or part of the data set.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Rule set based on the content of values (if-then-else).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Rules (sub-schemas) that become applicable if a given value is present.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Reuse within the definition, such as one and the same object structure being used as a definition for several locations in a structure.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To learn more about what is possible with the JSON Schema standard, see \", _jsx(_components.a, {\n        href: \"https://json-schema.org/\",\n        children: \"json-schema.org\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","a","pre","code","h3","ul","li","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","className","wrapper","MDXLayout"],"sourceRoot":""}