"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[33329],{10201:function(e,n,a){a.r(n);var s=a(52322),i=a(45392);function r(e){const n=Object.assign({h2:"h2",p:"p",a:"a",pre:"pre",code:"code",h3:"h3",ul:"ul",li:"li"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{children:"Description"}),"\n",(0,s.jsxs)(n.p,{children:["JSON Schema is a vocabulary for annotating and validating data in JavaScript. More about JSON Schema on ",(0,s.jsx)(n.a,{href:"https://json-schema.org/",children:"json-schema.org"})]}),"\n",(0,s.jsx)(n.p,{children:"A schema can be used from the simplest description of the data type of a value:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-JavaScript",children:'{\n  type: "string"\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-JSON",children:'"Foo"\n'})}),"\n",(0,s.jsx)(n.p,{children:"To an object with both rules for required fields and validation rules for single values:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-JavaScript",children:"{\n  type: \"object\",\n  properties: {\n    txt: { type: 'string', minLength: 5 },\n    num: { type: 'number', maximum: 100 },\n  },\n  required: ['txt']\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-JSON",children:'{\n  "txt": "abcde",\n  "num": 123\n}\n'})}),"\n",(0,s.jsx)(n.h3,{children:"Using schema with DataContext"}),"\n",(0,s.jsxs)(n.p,{children:["Since a ",(0,s.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/DataContext/",children:"DataContext"})," (used in isolation or through the use of ",(0,s.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Form/Handler/",children:"Form.Handler"}),") supports JSON Schema, these two examples will result in the same validation for the user:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'<Form.Handler data={user}>\n  <Field.String path="/name" label="Name" minLength={3} required />\n  <Field.Email path="/email" label="E-mail" required />\n  <Field.Number\n    path="/birthyear"\n    label="Birth year"\n    minimum={1900}\n    maximum={2023}\n    required\n  />\n</Form.Handler>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"const schema = {\n  type: 'object',\n  properties: {\n    name: { type: 'string', minLength: 3 },\n    email: { type: 'string' },\n    birthyear: { type: 'number', minimum: 1900, maximum: 2023 }\n  },\n  required: ['name', 'email', 'birthyear'],\n}\n<Form.Handler data={user} schema={schema}>\n  <Field.String path=\"/name\" label=\"Name\"  />\n  <Field.Email path=\"/email\" label=\"E-mail\" />\n  <Field.Number path=\"/birthyear\" label=\"Birth year\" />\n</Form.Handler>\n"})}),"\n",(0,s.jsx)(n.p,{children:"This makes it possible to create a uniform, testable description and requirements specification for the data, which can be tested independently of frontend code, and used across systems, e.g. frontend and backend."}),"\n",(0,s.jsx)(n.h3,{children:"Complex schemas"}),"\n",(0,s.jsx)(n.p,{children:"In addition to basic validation as in the example above, JSON Schema can be used for more complex. Examples of definitions supported by the standard are:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Requirement that the object must not have other properties than those defined in ",(0,s.jsx)(n.code,{children:"properties"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Nested data structures and combinations of objects and arrays with rules for array elements (fixed or repetitive elements)."}),"\n",(0,s.jsx)(n.li,{children:"Regular expressions for the syntax of individual values."}),"\n",(0,s.jsx)(n.li,{children:"Enum (a set of valid values)."}),"\n",(0,s.jsx)(n.li,{children:"Rules for the number of elements in arrays."}),"\n",(0,s.jsx)(n.li,{children:"Rules for the number of properties in objects."}),"\n",(0,s.jsx)(n.li,{children:"Predefined format rules (eg 'uri', 'email' and 'hostname')."}),"\n",(0,s.jsx)(n.li,{children:"Logical operators such as 'not', 'oneOf', 'allOf' and 'anyOf' which can be filled with rules for all or part of the data set."}),"\n",(0,s.jsx)(n.li,{children:"Rule set based on the content of values (if-then-else)."}),"\n",(0,s.jsx)(n.li,{children:"Rules (sub-schemas) that become applicable if a given value is present."}),"\n",(0,s.jsx)(n.li,{children:"Reuse within the definition, such as one and the same object structure being used as a definition for several locations in a structure."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["To learn more about what is possible with the JSON Schema standard, see ",(0,s.jsx)(n.a,{href:"https://json-schema.org/",children:"json-schema.org"}),"."]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(r,e)})):r(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-extended-features-form-schema-validation-info-mdx-ade07a9006e402de5f4d.js.map