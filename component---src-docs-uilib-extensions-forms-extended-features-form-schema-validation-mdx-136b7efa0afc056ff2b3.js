"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[52701,3062,33329],{77411:function(n,e,a){a.r(e);var t=a(52322),r=a(45392),s=a(10201),i=a(78831);function o(n){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.default,{}),"\n",(0,t.jsx)(i.default,{})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(o,n)})):o()}},78831:function(n,e,a){a.r(e),a.d(e,{default:function(){return p}});var t={};a.r(t),a.d(t,{DataSetSchema:function(){return d},DependantListSchema:function(){return u},IfRuleSchema:function(){return m},SingleFieldSchema:function(){return c}});var r=a(52322),s=a(45392),i=a(50716),o=a(10535),l=a(42277);const c=()=>(0,r.jsx)(i.Z,{children:"<Field.String\n  schema={{\n    type: 'string',\n    minLength: 5,\n  }}\n/>\n"}),d=()=>(0,r.jsx)(i.Z,{children:'<Form.Handler\n  data={{\n    address: \'Prefilled address\',\n  }}\n  schema={{\n    properties: {\n      name: {\n        minLength: 2,\n      },\n      address: {\n        minLength: 3,\n      },\n    },\n    required: [\'name\', \'address\'],\n  }}\n>\n  <Card spacing="small" bottom="small">\n    <Form.MainHeading>Company information</Form.MainHeading>\n\n    <Field.String path="/name" label="Name" />\n    <Field.String path="/address" label="Address" />\n  </Card>\n\n  <Form.SubmitButton />\n</Form.Handler>\n'}),m=()=>(0,r.jsx)(i.Z,{children:"<Form.Handler\n  data={{}}\n  schema={{\n    type: 'object',\n    properties: {\n      name: {\n        type: 'string',\n      },\n      customerType: {\n        type: 'string',\n        enum: ['corporate', 'private'],\n      },\n      companyName: {\n        type: 'string',\n      },\n    },\n    if: {\n      properties: {\n        customerType: {\n          enum: ['corporate'],\n        },\n      },\n      required: ['customerType'],\n    },\n    then: {\n      required: ['name', 'companyName'],\n    },\n    else: {\n      required: ['name'],\n    },\n  }}\n>\n  <Card spacing=\"small\" bottom=\"small\">\n    <Form.MainHeading>Customer information</Form.MainHeading>\n\n    <Field.String path=\"/name\" label=\"Name\" />\n    <Field.String\n      path=\"/customerType\"\n      label=\"Customer type (corporate or private)\"\n    />\n    <Field.String\n      path=\"/companyName\"\n      label=\"Company name (required for corporate customers)\"\n    />\n  </Card>\n\n  <Form.SubmitButton />\n</Form.Handler>\n"}),u=()=>(0,r.jsx)(i.Z,{scope:{Iterate:o,TrashIcon:l.Z},children:'<Form.Handler\n  data={{\n    accounts: [{}],\n  }}\n  schema={{\n    type: \'object\',\n    definitions: {\n      account: {\n        type: \'object\',\n        properties: {\n          accountNumber: {\n            type: \'string\',\n            pattern: \'^[0-9]{11}$\',\n          },\n          alias: {\n            type: \'string\',\n            minLength: 2,\n            maxLength: 32,\n          },\n        },\n        required: [\'accountNumber\'],\n      },\n    },\n    properties: {\n      name: {\n        type: \'string\',\n      },\n      email: {\n        type: \'string\',\n      },\n      phone: {\n        type: \'string\',\n      },\n      accounts: {\n        type: \'array\',\n        items: {\n          $ref: \'#/definitions/account\',\n        },\n      },\n      bsuAccount: {\n        $ref: \'#/definitions/account\',\n      },\n    },\n    oneOf: [\n      {\n        properties: {\n          accounts: {\n            type: \'array\',\n            minItems: 1,\n          },\n        },\n      },\n      {\n        properties: {\n          accounts: {\n            type: \'array\',\n            minItems: 0,\n          },\n          bsuAccount: {\n            type: \'object\',\n            required: [\'accountNumber\'],\n          },\n        },\n        required: [\'bsuAccount\'],\n      },\n    ],\n  }}\n>\n  <Flex.Vertical spacing="small">\n    <Form.MainHeading>Customer information</Form.MainHeading>\n    <Card spacing="small">\n      <Field.String path="/name" label="Name" />\n      <Field.Email path="/email" label="E-mail" />\n      <Field.PhoneNumber path="/phone" label="Phone number" />\n    </Card>\n\n    <Form.MainHeading>Accounts</Form.MainHeading>\n    <Card spacing="small">\n      <Form.SubHeading>Standard accounts</Form.SubHeading>\n\n      <Iterate.Array path="/accounts">\n        <Flex.Horizontal align="flex-end">\n          <Field.BankAccountNumber\n            itemPath="/accountNumber"\n            label="Account number"\n          />\n          <Field.String itemPath="/alias" label="Alias" width="medium" />\n          <Iterate.ArrayRemoveElementButton icon={TrashIcon} />\n        </Flex.Horizontal>\n      </Iterate.Array>\n\n      <Iterate.ArrayPushButton\n        icon="add"\n        icon_position="left"\n        text="Add account"\n        path="/accounts"\n        pushValue={{}}\n        size="medium"\n      />\n\n      <Form.SubHeading>BSU Account</Form.SubHeading>\n      <Field.BankAccountNumber\n        path="/bsuAccount/accountNumber"\n        label="Account number"\n      />\n      <Field.String path="/bsuAccount/alias" label="Alias" />\n    </Card>\n\n    <Form.SubmitButton />\n  </Flex.Vertical>\n</Form.Handler>\n'});function h(n){const e=Object.assign({h2:"h2",h3:"h3",p:"p"},(0,s.ah)(),n.components);return t||f("Examples",!1),d||f("Examples.DataSetSchema",!0),u||f("Examples.DependantListSchema",!0),m||f("Examples.IfRuleSchema",!0),c||f("Examples.SingleFieldSchema",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:"Demos"}),"\n",(0,r.jsx)(e.h3,{children:"Schema for single field"}),"\n",(0,r.jsx)(c,{}),"\n",(0,r.jsx)(e.h3,{children:"Schema for a whole data set"}),"\n",(0,r.jsx)(d,{}),"\n",(0,r.jsx)(e.h3,{children:"Schema with if-rule"}),"\n",(0,r.jsx)(m,{}),"\n",(0,r.jsx)(e.h3,{children:"Dependant list schema"}),"\n",(0,r.jsx)("em",{children:(0,r.jsx)(e.p,{children:"Becoming a new customer, this form requires at least one normal account\nto be added, unless the customer opens a BSU account, then normal\naccounts can still be added, but is optional."})}),"\n",(0,r.jsx)(u,{})]})}var p=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(h,n)})):h(n)};function f(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},10201:function(n,e,a){a.r(e);var t=a(52322),r=a(45392);function s(n){const e=Object.assign({h2:"h2",p:"p",a:"a",pre:"pre",code:"code",h3:"h3",ul:"ul",li:"li"},(0,r.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:"Description"}),"\n",(0,t.jsxs)(e.p,{children:["JSON Schema is a vocabulary for annotating and validating data in js. More about JSON Schema on ",(0,t.jsx)(e.a,{href:"https://json-schema.org/",children:"json-schema.org"})]}),"\n",(0,t.jsx)(e.p,{children:"A schema can be used from the simplest description of the data type of a value:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"{\n  type: 'string'\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"Results in:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'"Foo"\n'})}),"\n",(0,t.jsx)(e.p,{children:"To an object with both rules for required fields and validation rules for single values:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"{\n  type: \"object\",\n  properties: {\n    textField: { type: 'string', minLength: 5 },\n    numberField: { type: 'number', maximum: 100 },\n  },\n  required: ['textField']\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"Results in:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\n  "textField": "abcde",\n  "numberField": 123\n}\n'})}),"\n",(0,t.jsx)(e.h3,{children:"Using schema with DataContext"}),"\n",(0,t.jsxs)(e.p,{children:["Since a ",(0,t.jsx)(e.a,{href:"/uilib/extensions/forms/extended-features/DataContext/",children:"DataContext"})," (used in isolation or through the use of ",(0,t.jsx)(e.a,{href:"/uilib/extensions/forms/extended-features/Form/Handler/",children:"Form.Handler"}),") supports JSON Schema, these two examples will result in the same validation for the user:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'<Form.Handler data={user}>\n  <Field.String path="/name" label="Name" minLength={3} required />\n  <Field.Email path="/email" label="E-mail" required />\n  <Field.Number\n    path="/birthyear"\n    label="Birth year"\n    minimum={1900}\n    maximum={2023}\n    required\n  />\n</Form.Handler>\n'})}),"\n",(0,t.jsx)(e.p,{children:"vs."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:'import { JSONSchema } from \'@dnb/eufemia/extensions/forms\'\nconst schema: JSONSchema = {\n  properties: {\n    name: { minLength: 3 },\n    email: { type: \'string\' },\n    birthyear: { minimum: 1900, maximum: 2023 },\n  },\n  required: [\'name\', \'email\', \'birthyear\'],\n}\n<Form.Handler data={user} schema={schema}>\n  <Field.String path="/name" label="Name" />\n  <Field.Email path="/email" label="E-mail" />\n  <Field.Number path="/birthyear" label="Birth year" />\n</Form.Handler>\n'})}),"\n",(0,t.jsx)(e.p,{children:"This makes it possible to create a uniform, testable description and requirements specification for the data, which can be tested independently of frontend code, and used across systems, e.g. frontend and backend."}),"\n",(0,t.jsxs)(e.p,{children:["Also, note you can describe the schema without using the ",(0,t.jsx)(e.code,{children:"type"})," property, as the type is inferred from schema type. More on that topic in the ",(0,t.jsx)(e.a,{href:"https://ajv.js.org/guide/typescript.html#utility-types-for-schemas",children:"Ajv docs"}),"."]}),"\n",(0,t.jsx)(e.h3,{children:"Complex schemas"}),"\n",(0,t.jsx)(e.p,{children:"In addition to basic validation as in the example above, JSON Schema can be used for more complex. Examples of definitions supported by the standard are:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Requirement that the object must not have other properties than those defined in ",(0,t.jsx)(e.code,{children:"properties"}),"."]}),"\n",(0,t.jsx)(e.li,{children:"Nested data structures and combinations of objects and arrays with rules for array elements (fixed or repetitive elements)."}),"\n",(0,t.jsx)(e.li,{children:"Regular expressions for the syntax of individual values."}),"\n",(0,t.jsx)(e.li,{children:"Enum (a set of valid values)."}),"\n",(0,t.jsx)(e.li,{children:"Rules for the number of elements in arrays."}),"\n",(0,t.jsx)(e.li,{children:"Rules for the number of properties in objects."}),"\n",(0,t.jsx)(e.li,{children:"Predefined format rules (eg 'uri', 'email' and 'hostname')."}),"\n",(0,t.jsx)(e.li,{children:"Logical operators such as 'not', 'oneOf', 'allOf' and 'anyOf' which can be filled with rules for all or part of the data set."}),"\n",(0,t.jsx)(e.li,{children:"Rule set based on the content of values (if-then-else)."}),"\n",(0,t.jsx)(e.li,{children:"Rules (sub-schemas) that become applicable if a given value is present."}),"\n",(0,t.jsx)(e.li,{children:"Reuse within the definition, such as one and the same object structure being used as a definition for several locations in a structure."}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["To learn more about what is possible with the JSON Schema standard, see ",(0,t.jsx)(e.a,{href:"https://json-schema.org/",children:"json-schema.org"}),"."]})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(s,n)})):s(n)}},10535:function(n,e,a){a.r(e),a.d(e,{Array:function(){return b},ArrayPushButton:function(){return y},ArrayRemoveElementButton:function(){return S},IterateElementContext:function(){return c.Z}});var t=a(84616),r=a(2784),s=a(72779),i=a.n(s),o=a(95955),l=a.n(o),c=a(38875),d=a(96781),m=a(34424),u=a(55590),h=a(30392),p=a(52322);function f(n){const{className:e,layout:a="vertical",placeholder:s,label:o,path:f,value:b,info:x,warning:j,error:g,emptyValue:y,width:F,handleChange:S,children:v}=(0,m.Z)(n),N=(0,r.useMemo)((()=>(null!=b?b:[]).map(((n,e)=>({elementValue:n,handleElementChange:(n,e)=>{const a=structuredClone(b);l().set(a,n,e),null==S||S(a)},handleRemoveElement:()=>{const n=structuredClone(b);n.splice(e,1),null==S||S(n)}})))),[b,S]),w=(0,r.useCallback)((n=>{S([].concat((0,t.Z)(null!=b?b:[]),[n]))}),[b,S]);return(0,p.jsx)(d.Z,{className:i()("dnb-forms-field-number",e),layout:a,label:o,info:x,warning:j,error:g,width:F,contentsWidth:!1!==F?F:void 0,...(0,u.SR)(n),children:(0,p.jsx)(h.Z,{...(0,h.W)(n,{spacing:"small"}),children:b===y?(0,p.jsx)("em",{children:s}):N.map(((n,e)=>{let{elementValue:a,handleElementChange:t,handleRemoveElement:r}=n;return(0,p.jsx)(c.Z.Provider,{value:{index:e,value:a,path:f,handleChange:t,handleRemove:r,handlePush:w},children:Array.isArray(v)?v.map((n=>"function"==typeof n?n(a,e):n)):"function"==typeof v?v(a,e):v},`element-${e}`)}))})})}f._supportsSpacingProps=!0;var b=f,x=a(96844),j=a(27439);function g(n){const e=(0,r.useContext)(c.Z),{handlePush:a}=null!=e?e:{},{pushValue:s,...o}=n,l=(0,j.wH)(o),{value:d,handleChange:u,children:h}=(0,m.Z)(o);if(void 0!==d&&!Array.isArray(d))throw new Error("ArrayPushButton received a non-array value.");const f=(0,r.useCallback)((()=>{a?a(s):u([].concat((0,t.Z)(null!=d?d:[]),[s]))}),[d,s,a,u]);return(0,p.jsx)(x.Z,{className:i()("dnb-forms-array-push-button",n.className),on_click:f,...l,children:h})}g._supportsSpacingProps=!0;var y=g;function F(n){const e=(0,r.useContext)(c.Z),{handleRemove:a}=null!=e?e:{};if(!e)throw new Error("ArrayRemoveElementButton must be inside an Iterate.Array component.");const t=(0,j.wH)(n),{children:s}=(0,m.Z)(n),o=(0,r.useCallback)((()=>{a()}),[a]);return(0,p.jsx)(x.Z,{className:i()("dnb-forms-array-remove-element-button",n.className),on_click:o,...t,children:s})}F._supportsSpacingProps=!0;var S=F}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-extended-features-form-schema-validation-mdx-136b7efa0afc056ff2b3.js.map