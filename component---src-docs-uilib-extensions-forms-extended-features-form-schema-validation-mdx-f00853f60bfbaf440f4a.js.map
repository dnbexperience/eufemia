{"version":3,"file":"component---src-docs-uilib-extensions-forms-extended-features-form-schema-validation-mdx-f00853f60bfbaf440f4a.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/schema-validation.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/schema-validation/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/schema-validation/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/schema-validation/info.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/Array/Array.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/ArrayPushButton/ArrayPushButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/ArrayRemoveElementButton/ArrayRemoveElementButton.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/extended-features/Form/schema-validation/info';\nimport Demos from 'Docs/uilib/extensions/forms/extended-features/Form/schema-validation/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ComponentBox from '../../../../../../../shared/tags/ComponentBox'\nimport { Card, Flex } from '@dnb/eufemia/src'\nimport { Form, Field, Iterate } from '@dnb/eufemia/src/extensions/forms'\nimport { trash as TrashIcon } from '@dnb/eufemia/src/icons'\n\nexport const SingleFieldSchema = () => {\n  return (\n    <ComponentBox>\n      <Field.String schema={{ type: 'string', minLength: 5 }} />\n    </ComponentBox>\n  )\n}\n\nexport const DataSetSchema = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        data={{\n          address: 'Prefilled address',\n        }}\n        schema={{\n          properties: {\n            name: { minLength: 2 },\n            address: { minLength: 3 },\n          },\n          required: ['name', 'address'],\n        }}\n      >\n        <Card spacing=\"small\" bottom=\"small\">\n          <Form.MainHeading>Company information</Form.MainHeading>\n\n          <Field.String path=\"/name\" label=\"Name\" />\n          <Field.String path=\"/address\" label=\"Address\" />\n        </Card>\n\n        <Form.SubmitButton />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const IfRuleSchema = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        data={{}}\n        schema={{\n          type: 'object',\n          properties: {\n            name: { type: 'string' },\n            customerType: {\n              type: 'string',\n              enum: ['corporate', 'private'],\n            },\n            companyName: { type: 'string' },\n          },\n          if: {\n            properties: { customerType: { enum: ['corporate'] } },\n            required: ['customerType'],\n          },\n          then: { required: ['name', 'companyName'] },\n          else: { required: ['name'] },\n        }}\n      >\n        <Card spacing=\"small\" bottom=\"small\">\n          <Form.MainHeading>Customer information</Form.MainHeading>\n\n          <Field.String path=\"/name\" label=\"Name\" />\n          <Field.String\n            path=\"/customerType\"\n            label=\"Customer type (corporate or private)\"\n          />\n          <Field.String\n            path=\"/companyName\"\n            label=\"Company name (required for corporate customers)\"\n          />\n        </Card>\n\n        <Form.SubmitButton />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const DependantListSchema = () => {\n  return (\n    <ComponentBox scope={{ Iterate, TrashIcon }}>\n      <Form.Handler\n        data={{\n          accounts: [{}],\n        }}\n        schema={{\n          type: 'object',\n          definitions: {\n            account: {\n              type: 'object',\n              properties: {\n                accountNumber: {\n                  type: 'string',\n                  pattern: '^[0-9]{11}$',\n                },\n                alias: {\n                  type: 'string',\n                  minLength: 2,\n                  maxLength: 32,\n                },\n              },\n              required: ['accountNumber'],\n            },\n          },\n          properties: {\n            name: { type: 'string' },\n            email: { type: 'string' },\n            phone: { type: 'string' },\n            accounts: {\n              type: 'array',\n              items: {\n                $ref: '#/definitions/account',\n              },\n            },\n            bsuAccount: {\n              $ref: '#/definitions/account',\n            },\n          },\n          oneOf: [\n            {\n              properties: {\n                accounts: {\n                  type: 'array',\n                  minItems: 1,\n                },\n              },\n            },\n            {\n              properties: {\n                accounts: {\n                  type: 'array',\n                  minItems: 0,\n                },\n                bsuAccount: {\n                  type: 'object',\n                  required: ['accountNumber'],\n                },\n              },\n              required: ['bsuAccount'],\n            },\n          ],\n        }}\n      >\n        <Flex.Vertical spacing=\"small\">\n          <Form.MainHeading>Customer information</Form.MainHeading>\n          <Card spacing=\"small\">\n            <Field.String path=\"/name\" label=\"Name\" />\n            <Field.Email path=\"/email\" label=\"E-mail\" />\n            <Field.PhoneNumber path=\"/phone\" label=\"Phone number\" />\n          </Card>\n\n          <Form.MainHeading>Accounts</Form.MainHeading>\n          <Card spacing=\"small\">\n            <Form.SubHeading>Standard accounts</Form.SubHeading>\n\n            <Iterate.Array path=\"/accounts\">\n              <Flex.Horizontal align=\"flex-end\">\n                <Field.BankAccountNumber\n                  itemPath=\"/accountNumber\"\n                  label=\"Account number\"\n                />\n                <Field.String\n                  itemPath=\"/alias\"\n                  label=\"Alias\"\n                  width=\"medium\"\n                />\n                <Iterate.ArrayRemoveElementButton icon={TrashIcon} />\n              </Flex.Horizontal>\n            </Iterate.Array>\n\n            <Iterate.ArrayPushButton\n              icon=\"add\"\n              icon_position=\"left\"\n              text=\"Add account\"\n              path=\"/accounts\"\n              pushValue={{}}\n              size=\"medium\"\n            />\n\n            <Form.SubHeading>BSU Account</Form.SubHeading>\n            <Field.BankAccountNumber\n              path=\"/bsuAccount/accountNumber\"\n              label=\"Account number\"\n            />\n            <Field.String path=\"/bsuAccount/alias\" label=\"Alias\" />\n          </Card>\n\n          <Form.SubmitButton />\n        </Flex.Vertical>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.DataSetSchema) _missingMdxReference(\"Examples.DataSetSchema\", true);\n  if (!Examples.DependantListSchema) _missingMdxReference(\"Examples.DependantListSchema\", true);\n  if (!Examples.IfRuleSchema) _missingMdxReference(\"Examples.IfRuleSchema\", true);\n  if (!Examples.SingleFieldSchema) _missingMdxReference(\"Examples.SingleFieldSchema\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Schema for single field\"\n    }), \"\\n\", _jsx(Examples.SingleFieldSchema, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Schema for a whole data set\"\n    }), \"\\n\", _jsx(Examples.DataSetSchema, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Schema with if-rule\"\n    }), \"\\n\", _jsx(Examples.IfRuleSchema, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Dependant list schema\"\n    }), \"\\n\", _jsx(\"em\", {\n      children: _jsx(_components.p, {\n        children: \"Becoming a new customer, this form requires at least one normal account\\nto be added, unless the customer opens a BSU account, then normal\\naccounts can still be added, but is optional.\"\n      })\n    }), \"\\n\", _jsx(Examples.DependantListSchema, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"JSON Schema is a vocabulary for annotating and validating data in js. More about JSON Schema on \", _jsx(_components.a, {\n        href: \"https://json-schema.org/\",\n        children: \"json-schema.org\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A schema can be used from the simplest description of the data type of a value:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"{\\n  type: 'string'\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Results in:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"\\\"Foo\\\"\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To an object with both rules for required fields and validation rules for single values:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"{\\n  type: \\\"object\\\",\\n  properties: {\\n    textField: { type: 'string', minLength: 5 },\\n    numberField: { type: 'number', maximum: 100 },\\n  },\\n  required: ['textField']\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Results in:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"{\\n  \\\"textField\\\": \\\"abcde\\\",\\n  \\\"numberField\\\": 123\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Using schema with DataContext\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since a \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/extended-features/DataContext/\",\n        children: \"DataContext\"\n      }), \" (used in isolation or through the use of \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/extended-features/Form/Handler/\",\n        children: \"Form.Handler\"\n      }), \") supports JSON Schema, these two examples will result in the same validation for the user:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Form.Handler data={user}>\\n  <Field.String path=\\\"/name\\\" label=\\\"Name\\\" minLength={3} required />\\n  <Field.Email path=\\\"/email\\\" label=\\\"E-mail\\\" required />\\n  <Field.Number\\n    path=\\\"/birthyear\\\"\\n    label=\\\"Birth year\\\"\\n    minimum={1900}\\n    maximum={2023}\\n    required\\n  />\\n</Form.Handler>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"vs.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { JSONSchema } from '@dnb/eufemia/extensions/forms'\\nconst schema: JSONSchema = {\\n  properties: {\\n    name: { minLength: 3 },\\n    email: { type: 'string' },\\n    birthyear: { minimum: 1900, maximum: 2023 },\\n  },\\n  required: ['name', 'email', 'birthyear'],\\n}\\n<Form.Handler data={user} schema={schema}>\\n  <Field.String path=\\\"/name\\\" label=\\\"Name\\\" />\\n  <Field.Email path=\\\"/email\\\" label=\\\"E-mail\\\" />\\n  <Field.Number path=\\\"/birthyear\\\" label=\\\"Birth year\\\" />\\n</Form.Handler>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This makes it possible to create a uniform, testable description and requirements specification for the data, which can be tested independently of frontend code, and used across systems, e.g. frontend and backend.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Also, note you can describe the schema without using the \", _jsx(_components.code, {\n        children: \"type\"\n      }), \" property, as the type is inferred from schema type. More on that topic in the \", _jsx(_components.a, {\n        href: \"https://ajv.js.org/guide/typescript.html#utility-types-for-schemas\",\n        children: \"Ajv docs\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Complex schemas\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In addition to basic validation as in the example above, JSON Schema can be used for more complex. Examples of definitions supported by the standard are:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Requirement that the object must not have other properties than those defined in \", _jsx(_components.code, {\n          children: \"properties\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Nested data structures and combinations of objects and arrays with rules for array elements (fixed or repetitive elements).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Regular expressions for the syntax of individual values.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Enum (a set of valid values).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Rules for the number of elements in arrays.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Rules for the number of properties in objects.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Predefined format rules (eg 'uri', 'email' and 'hostname').\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Logical operators such as 'not', 'oneOf', 'allOf' and 'anyOf' which can be filled with rules for all or part of the data set.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Rule set based on the content of values (if-then-else).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Rules (sub-schemas) that become applicable if a given value is present.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Reuse within the definition, such as one and the same object structure being used as a definition for several locations in a structure.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To learn more about what is possible with the JSON Schema standard, see \", _jsx(_components.a, {\n        href: \"https://json-schema.org/\",\n        children: \"json-schema.org\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React, { useMemo, useCallback } from 'react'\nimport classnames from 'classnames'\nimport pointer from 'json-pointer'\nimport IterateElementContext from '../IterateElementContext'\nimport FieldBlock, { Props as FieldBlockProps } from '../../FieldBlock'\nimport { useDataValue } from '../../hooks'\nimport { FieldProps, FieldHelpProps } from '../../types'\nimport { pickSpacingProps } from '../../../../components/flex/utils'\nimport {\n  BasicProps as FlexContainerProps,\n  pickFlexContainerProps,\n} from '../../../../components/flex/Container'\nimport Flex from '../../../../components/flex/Flex'\n\ninterface ErrorMessages {\n  required?: string\n  schema?: string\n}\n\nexport type Props = FieldHelpProps &\n  FieldProps<unknown[], undefined, ErrorMessages> &\n  Omit<FieldBlockProps, 'children'> &\n  Omit<FlexContainerProps, 'children' | 'width'> & {\n    children:\n      | React.ReactNode\n      | ((value: any, index: number) => React.ReactNode)\n      | Array<\n          | React.ReactNode\n          | ((value: any, index: number) => React.ReactNode)\n        >\n  }\n\nfunction ArrayComponent(props: Props) {\n  const {\n    className,\n    layout = 'vertical',\n    placeholder,\n    label,\n    labelDescription,\n    path,\n    value: arrayValue,\n    info,\n    warning,\n    error,\n    emptyValue,\n    width,\n    handleChange,\n    children,\n  } = useDataValue(props)\n\n  const elementData: {\n    elementValue: unknown\n    handleElementChange: (path: string, value: unknown) => void\n    handleRemoveElement: () => void\n  }[] = useMemo(() => {\n    return (arrayValue ?? []).map((elementValue, elementIndex) => ({\n      elementValue,\n      handleElementChange: (path, value) => {\n        const newArrayValue = structuredClone(arrayValue)\n        pointer.set(newArrayValue, path, value)\n        handleChange?.(newArrayValue)\n      },\n      handleRemoveElement: () => {\n        const newArrayValue = structuredClone(arrayValue)\n        newArrayValue.splice(elementIndex, 1)\n        handleChange?.(newArrayValue)\n      },\n    }))\n  }, [arrayValue, handleChange])\n\n  const handlePush = useCallback(\n    (element: unknown) => {\n      handleChange([...(arrayValue ?? []), element])\n    },\n    [arrayValue, handleChange]\n  )\n\n  return (\n    <FieldBlock\n      className={classnames('dnb-forms-field-number', className)}\n      layout={layout}\n      label={label}\n      labelDescription={labelDescription}\n      info={info}\n      warning={warning}\n      error={error}\n      width={width}\n      contentWidth={width !== false ? width : undefined}\n      {...pickSpacingProps(props)}\n    >\n      <Flex.Container\n        {...pickFlexContainerProps(props as FlexContainerProps, {\n          spacing: 'small',\n        })}\n      >\n        {arrayValue === emptyValue ? (\n          <em>{placeholder}</em>\n        ) : (\n          elementData.map(\n            (\n              { elementValue, handleElementChange, handleRemoveElement },\n              elementIndex\n            ) => {\n              return (\n                <IterateElementContext.Provider\n                  key={`element-${elementIndex}`}\n                  value={{\n                    index: elementIndex,\n                    value: elementValue,\n                    path,\n                    handleChange: handleElementChange,\n                    handleRemove: handleRemoveElement,\n                    handlePush,\n                  }}\n                >\n                  {Array.isArray(children)\n                    ? children.map((childElement) =>\n                        typeof childElement === 'function'\n                          ? childElement(elementValue, elementIndex)\n                          : childElement\n                      )\n                    : typeof children === 'function'\n                    ? children(elementValue, elementIndex)\n                    : children}\n                </IterateElementContext.Provider>\n              )\n            }\n          )\n        )}\n      </Flex.Container>\n    </FieldBlock>\n  )\n}\n\nArrayComponent._supportsSpacingProps = true\nexport default ArrayComponent\n","import React, { useCallback, useContext } from 'react'\nimport classnames from 'classnames'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/Button'\nimport IterateElementContext from '../IterateElementContext'\nimport { useDataValue } from '../../hooks'\nimport {\n  DataValueReadWriteComponentProps,\n  omitDataValueReadWriteProps,\n} from '../../types'\n\nexport type Props = ButtonProps &\n  DataValueReadWriteComponentProps<unknown[]> & {\n    pushValue: unknown\n  }\n\nfunction ArrayPushButton(props: Props) {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { handlePush } = iterateElementContext ?? {}\n\n  const { pushValue, ...restProps } = props\n  const buttonProps = omitDataValueReadWriteProps(restProps)\n  const { value, handleChange, children } = useDataValue(restProps)\n\n  if (value !== undefined && !Array.isArray(value)) {\n    throw new Error('ArrayPushButton received a non-array value.')\n  }\n\n  const handleClick = useCallback(() => {\n    if (handlePush) {\n      // Inside an Iterate element - make the change through the Iterate component\n      handlePush(pushValue)\n      return\n    }\n\n    // If not inside an iterate, it could still manipulate a source data set through useDataValue\n    handleChange([...(value ?? []), pushValue])\n  }, [value, pushValue, handlePush, handleChange])\n\n  return (\n    <Button\n      className={classnames(\n        'dnb-forms-array-push-button',\n        props.className\n      )}\n      on_click={handleClick}\n      {...buttonProps}\n    >\n      {children}\n    </Button>\n  )\n}\n\nArrayPushButton._supportsSpacingProps = true\nexport default ArrayPushButton\n","import React, { useCallback, useContext } from 'react'\nimport classnames from 'classnames'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/Button'\nimport IterateElementContext from '../IterateElementContext'\nimport { useDataValue } from '../../hooks'\nimport {\n  DataValueReadWriteComponentProps,\n  omitDataValueReadWriteProps,\n} from '../../types'\n\nexport type Props = ButtonProps &\n  DataValueReadWriteComponentProps<unknown[]>\n\nfunction ArrayRemoveElementButton(props: Props) {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { handleRemove } = iterateElementContext ?? {}\n\n  if (!iterateElementContext) {\n    throw new Error(\n      'ArrayRemoveElementButton must be inside an Iterate.Array component.'\n    )\n  }\n\n  const buttonProps = omitDataValueReadWriteProps(props)\n\n  const { children } = useDataValue(props)\n\n  const handleClick = useCallback(() => {\n    handleRemove()\n  }, [handleRemove])\n\n  return (\n    <Button\n      className={classnames(\n        'dnb-forms-array-remove-element-button',\n        props.className\n      )}\n      on_click={handleClick}\n      {...buttonProps}\n    >\n      {children}\n    </Button>\n  )\n}\n\nArrayRemoveElementButton._supportsSpacingProps = true\nexport default ArrayRemoveElementButton\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","SingleFieldSchema","ComponentBox","DataSetSchema","IfRuleSchema","DependantListSchema","scope","Iterate","TrashIcon","_components","h2","h3","p","Examples","_missingMdxReference","id","component","Error","a","pre","code","ul","li","href","className","ArrayComponent","layout","placeholder","label","labelDescription","path","value","arrayValue","info","warning","error","emptyValue","width","handleChange","useDataValue","elementData","useMemo","map","elementValue","elementIndex","handleElementChange","newArrayValue","structuredClone","pointer","handleRemoveElement","splice","handlePush","useCallback","element","concat","_toConsumableArray","FieldBlock","classnames","contentWidth","undefined","pickSpacingProps","Flex","pickFlexContainerProps","spacing","_ref","IterateElementContext","Provider","index","handleRemove","Array","isArray","childElement","_supportsSpacingProps","ArrayPushButton","iterateElementContext","useContext","pushValue","restProps","buttonProps","omitDataValueReadWriteProps","handleClick","Button","on_click","ArrayRemoveElementButton"],"sourceRoot":""}