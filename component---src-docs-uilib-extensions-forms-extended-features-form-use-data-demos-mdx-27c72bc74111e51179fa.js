"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[3431],{9945:function(n,t,e){e.r(t),e.d(t,{default:function(){return p}});var r={};e.r(r),e.d(r,{Default:function(){return c},FilterData:function(){return u},Update:function(){return d},WithoutFormHandler:function(){return s}});var o=e(52322),a=e(45392),i=(e(2784),e(52394));function c(){return(0,o.jsx)(i.Z,{noInline:!0,children:"const existingData = {\n  foo: 'bar',\n}\nconst Component = () => {\n  const { data } = Form.useData('default-id', existingData)\n  return (\n    <Form.Handler id=\"default-id\">\n      <Field.String path=\"/foo\" label={data.foo} />\n    </Form.Handler>\n  )\n}\nrender(<Component />)\n"})}function d(){return(0,o.jsx)(i.Z,{noInline:!0,children:"const existingData = {\n  count: 1,\n}\nconst Component = () => {\n  const { data, update } = Form.useData('update-id', existingData)\n  const increment = React.useCallback(() => {\n    update('/count', (count) => {\n      return count + 1\n    })\n  }, [update])\n  return (\n    <Form.Handler id=\"update-id\">\n      <Flex.Horizontal>\n        <Field.Number path=\"/count\" showStepControls />\n        <Form.SubmitButton\n          onClick={increment}\n          text={'Increment ' + data.count}\n        />\n      </Flex.Horizontal>\n    </Form.Handler>\n  )\n}\nrender(<Component />)\n"})}function s(){return(0,o.jsx)(i.Z,{noInline:!0,children:"const existingData = {\n  count: 1,\n}\nconst Component = () => {\n  const { data, update } = Form.useData('idependent-id', existingData)\n  const increment = React.useCallback(() => {\n    update('/count', (count) => {\n      return count + 1\n    })\n  }, [update])\n  return (\n    <Button\n      on_click={increment}\n      text={'Increment ' + data.count}\n      variant=\"secondary\"\n    />\n  )\n}\nrender(\n  <Flex.Vertical>\n    <Component />\n    <Component />\n  </Flex.Vertical>,\n)\n"})}function u(){return(0,o.jsx)(i.Z,{noInline:!0,children:'const filterDataHandler = (path, value, props) => {\n  if (value === \'removed\') {\n    return false\n  }\n}\nconst Component = () => {\n  const { data, filterData } = Form.useData(\'filter-data\')\n  return (\n    <>\n      <Form.Handler id="filter-data">\n        <Flex.Stack>\n          <Field.String path="/foo" value="bar" />\n          <Field.String path="/baz" value="removed" />\n\n          <Section backgroundColor="sand-yellow" innerSpace>\n            <pre>{JSON.stringify(data)}</pre>\n            <pre>{JSON.stringify(filterData(filterDataHandler))}</pre>\n          </Section>\n        </Flex.Stack>\n      </Form.Handler>\n    </>\n  )\n}\nrender(<Component />)\n'})}function l(n){const t=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code"},(0,a.ah)(),n.components);return r||m("Examples",!1),c||m("Examples.Default",!0),u||m("Examples.FilterData",!0),d||m("Examples.Update",!0),s||m("Examples.WithoutFormHandler",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{children:"Demos"}),"\n",(0,o.jsx)(t.h3,{children:"Set data outside of the form"}),"\n",(0,o.jsx)(c,{}),"\n",(0,o.jsx)(t.h3,{children:"Update the data outside of the form"}),"\n",(0,o.jsxs)(t.p,{children:["The update function ",(0,o.jsx)(t.code,{children:"update('/count', (count) => count + 1)"})," has TypeScript support and returns the correct type for ",(0,o.jsx)(t.code,{children:"count"})," (number)."]}),"\n",(0,o.jsx)(d,{}),"\n",(0,o.jsx)(t.h3,{children:"Shared state without a Form.Handler"}),"\n",(0,o.jsx)(s,{}),"\n",(0,o.jsx)(t.h3,{children:"Filter data"}),"\n",(0,o.jsx)(u,{})]})}var p=function(n){void 0===n&&(n={});const{wrapper:t}=Object.assign({},(0,a.ah)(),n.components);return t?(0,o.jsx)(t,Object.assign({},n,{children:(0,o.jsx)(l,n)})):l(n)};function m(n,t){throw new Error("Expected "+(t?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-extended-features-form-use-data-demos-mdx-27c72bc74111e51179fa.js.map