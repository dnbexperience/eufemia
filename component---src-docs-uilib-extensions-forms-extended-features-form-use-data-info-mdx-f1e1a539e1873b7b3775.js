"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[35073],{46793:function(e,n,t){t.r(n);var a=t(52322),o=t(45392);function i(e){const n=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",a:"a"},(0,o.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{children:"Description"}),"\n",(0,a.jsxs)(n.p,{children:["With the ",(0,a.jsx)(n.code,{children:"Form.useData"})," hook, you can manage your form data outside of the form itself. This is beneficial when you need to utilize the form data in other places within your application:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nfunction Component() {\n  const { data } = Form.useData('unique')\n\n  return <Form.Handler id=\"unique\">...</Form.Handler>\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You link them together via the ",(0,a.jsx)(n.code,{children:"id"})," (string) property."]}),"\n",(0,a.jsx)(n.h2,{children:"Initial data"}),"\n",(0,a.jsxs)(n.p,{children:["You decide where you want to provide the initial ",(0,a.jsx)(n.code,{children:"data"}),". It can be done via the ",(0,a.jsx)(n.code,{children:"Form.Handler"})," component, or via the ",(0,a.jsx)(n.code,{children:"Form.useData"})," Hook â€“ or even in each Field, with the value property:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import { Form, Field } from '@dnb/eufemia/extensions/forms'\n\nconst existingData = {\n  foo: 'bar',\n}\n\nfunction Component() {\n  const { data } = Form.useData('unique', existingData)\n\n  return (\n    <Form.Handler id=\"unique\">\n      <Field.String path=\"/foo\" />\n    </Form.Handler>\n  )\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"When you're providing the initial data, it's important to make sure that React can remember this data. If it doesn't, React will treat the data as a new object every time it re-renders, which can lead to unnecessary comparisons and performance issues."}),"\n",(0,a.jsx)(n.p,{children:"You can use the useMemo hook to make sure React remembers the data:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import { Form, Field } from '@dnb/eufemia/extensions/forms'\nfunction Component() {\n  const existingData = React.useMemo(\n    {\n      foo: 'bar',\n    },\n    [],\n  )\n\n  const { data } = Form.useData('unique-id', existingData)\n}\n"})}),"\n",(0,a.jsx)(n.h2,{children:"Update data"}),"\n",(0,a.jsxs)(n.p,{children:["If you need to update the data, you can use the ",(0,a.jsx)(n.code,{children:"update"})," method."]}),"\n",(0,a.jsxs)(n.p,{children:["It takes a path (",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/#what-is-a-json-pointer",children:"JSON Pointer"}),") and a callback function. The callback function receives the existing value as the first argument, and the second argument is the path itself. The callback function must return the new value."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nconst existingData = {\n  foo: 'bar',\n}\n\nfunction Component() {\n  const { update } = Form.useData('unique' data={existingData})\n\n  useEffect(() => {\n    update('/foo', () => 'new value')\n    // or\n    update('/foo', (existingValue) => existingValue + 'new value')\n  }, [])\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"update"})," function has TypeScript support and returns the correct type for ",(0,a.jsx)(n.code,{children:"existingValue"}),"."]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(i,e)})):i(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-extended-features-form-use-data-info-mdx-f1e1a539e1873b7b3775.js.map