{"version":3,"file":"component---src-docs-uilib-extensions-forms-extended-features-form-use-data-info-mdx-f1e1a539e1873b7b3775.js","mappings":"6KAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,KAAM,OACNC,IAAK,MACLC,EAAG,MACFC,EAAAA,EAAAA,MAAsBT,EAAMU,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKb,EAAYG,GAAI,CAC9BS,SAAU,gBACR,MAAMF,EAAAA,EAAAA,MAAMV,EAAYI,EAAG,CAC7BQ,SAAU,CAAC,aAAaC,EAAAA,EAAAA,KAAKb,EAAYK,KAAM,CAC7CO,SAAU,iBACR,yKACF,MAAMC,EAAAA,EAAAA,KAAKb,EAAYM,IAAK,CAC9BM,UAAUC,EAAAA,EAAAA,KAAKb,EAAYK,KAAM,CAC/BS,UAAW,eACXF,SAAU,gMAEV,MAAMF,EAAAA,EAAAA,MAAMV,EAAYI,EAAG,CAC7BQ,SAAU,CAAC,mCAAmCC,EAAAA,EAAAA,KAAKb,EAAYK,KAAM,CACnEO,SAAU,OACR,yBACF,MAAMC,EAAAA,EAAAA,KAAKb,EAAYG,GAAI,CAC7BS,SAAU,iBACR,MAAMF,EAAAA,EAAAA,MAAMV,EAAYI,EAAG,CAC7BQ,SAAU,CAAC,qDAAqDC,EAAAA,EAAAA,KAAKb,EAAYK,KAAM,CACrFO,SAAU,SACR,6BAA6BC,EAAAA,EAAAA,KAAKb,EAAYK,KAAM,CACtDO,SAAU,iBACR,2BAA2BC,EAAAA,EAAAA,KAAKb,EAAYK,KAAM,CACpDO,SAAU,iBACR,6DACF,MAAMC,EAAAA,EAAAA,KAAKb,EAAYM,IAAK,CAC9BM,UAAUC,EAAAA,EAAAA,KAAKb,EAAYK,KAAM,CAC/BS,UAAW,eACXF,SAAU,sTAEV,MAAMC,EAAAA,EAAAA,KAAKb,EAAYI,EAAG,CAC5BQ,SAAU,gQACR,MAAMC,EAAAA,EAAAA,KAAKb,EAAYI,EAAG,CAC5BQ,SAAU,wEACR,MAAMC,EAAAA,EAAAA,KAAKb,EAAYM,IAAK,CAC9BM,UAAUC,EAAAA,EAAAA,KAAKb,EAAYK,KAAM,CAC/BS,UAAW,eACXF,SAAU,oPAEV,MAAMC,EAAAA,EAAAA,KAAKb,EAAYG,GAAI,CAC7BS,SAAU,gBACR,MAAMF,EAAAA,EAAAA,MAAMV,EAAYI,EAAG,CAC7BQ,SAAU,CAAC,oDAAoDC,EAAAA,EAAAA,KAAKb,EAAYK,KAAM,CACpFO,SAAU,WACR,cACF,MAAMF,EAAAA,EAAAA,MAAMV,EAAYI,EAAG,CAC7BQ,SAAU,CAAC,qBAAqBC,EAAAA,EAAAA,KAAKb,EAAYO,EAAG,CAClDQ,KAAM,kDACNH,SAAU,iBACR,sMACF,MAAMC,EAAAA,EAAAA,KAAKb,EAAYM,IAAK,CAC9BM,UAAUC,EAAAA,EAAAA,KAAKb,EAAYK,KAAM,CAC/BS,UAAW,eACXF,SAAU,8VAEV,MAAMF,EAAAA,EAAAA,MAAMV,EAAYI,EAAG,CAC7BQ,SAAU,CAAC,QAAQC,EAAAA,EAAAA,KAAKb,EAAYK,KAAM,CACxCO,SAAU,WACR,sEAAsEC,EAAAA,EAAAA,KAAKb,EAAYK,KAAM,CAC/FO,SAAU,kBACR,SAGV,CAOA,UANA,SAAoBb,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOiB,QAASC,GAAahB,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,MAAsBT,EAAMU,YAC3E,OAAOQ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWhB,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1Da,UAAUC,EAAAA,EAAAA,KAAKf,EAAmBC,MAC9BD,EAAkBC,EAC1B,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/useData/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"With the \", _jsx(_components.code, {\n        children: \"Form.useData\"\n      }), \" hook, you can manage your form data outside of the form itself. This is beneficial when you need to utilize the form data in other places within your application:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Form } from '@dnb/eufemia/extensions/forms'\\n\\nfunction Component() {\\n  const { data } = Form.useData('unique')\\n\\n  return <Form.Handler id=\\\"unique\\\">...</Form.Handler>\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You link them together via the \", _jsx(_components.code, {\n        children: \"id\"\n      }), \" (string) property.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Initial data\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You decide where you want to provide the initial \", _jsx(_components.code, {\n        children: \"data\"\n      }), \". It can be done via the \", _jsx(_components.code, {\n        children: \"Form.Handler\"\n      }), \" component, or via the \", _jsx(_components.code, {\n        children: \"Form.useData\"\n      }), \" Hook â€“ or even in each Field, with the value property:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Form, Field } from '@dnb/eufemia/extensions/forms'\\n\\nconst existingData = {\\n  foo: 'bar',\\n}\\n\\nfunction Component() {\\n  const { data } = Form.useData('unique', existingData)\\n\\n  return (\\n    <Form.Handler id=\\\"unique\\\">\\n      <Field.String path=\\\"/foo\\\" />\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When you're providing the initial data, it's important to make sure that React can remember this data. If it doesn't, React will treat the data as a new object every time it re-renders, which can lead to unnecessary comparisons and performance issues.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can use the useMemo hook to make sure React remembers the data:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Form, Field } from '@dnb/eufemia/extensions/forms'\\nfunction Component() {\\n  const existingData = React.useMemo(\\n    {\\n      foo: 'bar',\\n    },\\n    [],\\n  )\\n\\n  const { data } = Form.useData('unique-id', existingData)\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Update data\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you need to update the data, you can use the \", _jsx(_components.code, {\n        children: \"update\"\n      }), \" method.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It takes a path (\", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/#what-is-a-json-pointer\",\n        children: \"JSON Pointer\"\n      }), \") and a callback function. The callback function receives the existing value as the first argument, and the second argument is the path itself. The callback function must return the new value.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Form } from '@dnb/eufemia/extensions/forms'\\n\\nconst existingData = {\\n  foo: 'bar',\\n}\\n\\nfunction Component() {\\n  const { update } = Form.useData('unique' data={existingData})\\n\\n  useEffect(() => {\\n    update('/foo', () => 'new value')\\n    // or\\n    update('/foo', (existingValue) => existingValue + 'new value')\\n  }, [])\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"update\"\n      }), \" function has TypeScript support and returns the correct type for \", _jsx(_components.code, {\n        children: \"existingValue\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","pre","a","_provideComponents","components","_jsxs","_Fragment","children","_jsx","className","href","wrapper","MDXLayout"],"sourceRoot":""}