{"version":3,"file":"component---src-docs-uilib-extensions-forms-extended-features-form-use-data-mdx-5edfa2e6b489f89c6901.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/useData.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/useData/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/useData/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/useData/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/extended-features/Form/useData/info';\nimport Demos from 'Docs/uilib/extensions/forms/extended-features/Form/useData/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from 'react'\nimport ComponentBox from '../../../../../../../shared/tags/ComponentBox'\nimport { Button, Flex } from '@dnb/eufemia/src'\nimport { Form, Field } from '@dnb/eufemia/src/extensions/forms'\n\nexport function Default() {\n  return (\n    <ComponentBox>\n      {() => {\n        const existingData = { foo: 'bar' }\n\n        const Component = () => {\n          const { data } = Form.useData('default-id', existingData)\n\n          return (\n            <Form.Handler id=\"default-id\">\n              <Field.String path=\"/foo\" label={data.foo} />\n            </Form.Handler>\n          )\n        }\n\n        return <Component />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport function Update() {\n  return (\n    <ComponentBox>\n      {() => {\n        const existingData = { count: 1 }\n\n        const Component = () => {\n          const { data, update } = Form.useData('update-id', existingData)\n\n          const increment = React.useCallback(() => {\n            update('/count', (count) => {\n              return count + 1\n            })\n          }, [update])\n\n          return (\n            <Form.Handler id=\"update-id\">\n              <Flex.Horizontal>\n                <Field.Number path=\"/count\" showStepControls />\n                <Form.SubmitButton\n                  onClick={increment}\n                  text={'Increment ' + data.count}\n                />\n              </Flex.Horizontal>\n            </Form.Handler>\n          )\n        }\n\n        return <Component />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport function WithoutFormHandler() {\n  return (\n    <ComponentBox>\n      {() => {\n        const existingData = { count: 1 }\n\n        const Component = () => {\n          const { data, update } = Form.useData(\n            'idependent-id',\n            existingData,\n          )\n\n          const increment = React.useCallback(() => {\n            update('/count', (count) => {\n              return count + 1\n            })\n          }, [update])\n\n          return (\n            <Button\n              on_click={increment}\n              text={'Increment ' + data.count}\n              variant=\"secondary\"\n            />\n          )\n        }\n\n        return (\n          <Flex.Vertical>\n            <Component />\n            <Component />\n          </Flex.Vertical>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.Default) _missingMdxReference(\"Examples.Default\", true);\n  if (!Examples.Update) _missingMdxReference(\"Examples.Update\", true);\n  if (!Examples.WithoutFormHandler) _missingMdxReference(\"Examples.WithoutFormHandler\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Set data outside of the form\"\n    }), \"\\n\", _jsx(Examples.Default, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Update the data outside of the form\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The update function \", _jsx(_components.code, {\n        children: \"update('/count', (count) => count + 1)\"\n      }), \" has TypeScript support and returns the correct type for \", _jsx(_components.code, {\n        children: \"count\"\n      }), \" (number).\"]\n    }), \"\\n\", _jsx(Examples.Update, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Shared state without a Form.Handler\"\n    }), \"\\n\", _jsx(Examples.WithoutFormHandler, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"With the \", _jsx(_components.code, {\n        children: \"Form.useData\"\n      }), \" hook, you can manage your form data outside of the form itself. This is beneficial when you need to utilize the form data in other places within your application:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Form } from '@dnb/eufemia/extensions/forms'\\n\\nfunction Component() {\\n  const { data } = Form.useData('unique')\\n\\n  return <Form.Handler id=\\\"unique\\\">...</Form.Handler>\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You link them together via the \", _jsx(_components.code, {\n        children: \"id\"\n      }), \" (string) property.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Initial data\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You decide where you want to provide the initial \", _jsx(_components.code, {\n        children: \"data\"\n      }), \". It can be done via the \", _jsx(_components.code, {\n        children: \"Form.Handler\"\n      }), \" component, or via the \", _jsx(_components.code, {\n        children: \"Form.useData\"\n      }), \" Hook – or even in each Field, with the value property:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Form, Field } from '@dnb/eufemia/extensions/forms'\\n\\nconst existingData = {\\n  foo: 'bar',\\n}\\n\\nfunction Component() {\\n  const { data } = Form.useData('unique', existingData)\\n\\n  return (\\n    <Form.Handler id=\\\"unique\\\">\\n      <Field.String path=\\\"/foo\\\" />\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When you're providing the initial data, it's important to make sure that React can remember this data. If it doesn't, React will treat the data as a new object every time it re-renders, which can lead to unnecessary comparisons and performance issues.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can use the useMemo hook to make sure React remembers the data:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Form, Field } from '@dnb/eufemia/extensions/forms'\\nfunction Component() {\\n  const existingData = React.useMemo(\\n    {\\n      foo: 'bar',\\n    },\\n    [],\\n  )\\n\\n  const { data } = Form.useData('unique-id', existingData)\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Update data\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you need to update the data, you can use the \", _jsx(_components.code, {\n        children: \"update\"\n      }), \" method.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It takes a path (\", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/#what-is-a-json-pointer\",\n        children: \"JSON Pointer\"\n      }), \") and a callback function. The callback function receives the existing value as the first argument, and the second argument is the path itself. The callback function must return the new value.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Form } from '@dnb/eufemia/extensions/forms'\\n\\nconst existingData = {\\n  foo: 'bar',\\n}\\n\\nfunction Component() {\\n  const { update } = Form.useData('unique' data={existingData})\\n\\n  useEffect(() => {\\n    update('/foo', () => 'new value')\\n    // or\\n    update('/foo', (existingValue) => existingValue + 'new value')\\n  }, [])\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"update\"\n      }), \" function has TypeScript support and returns the correct type for \", _jsx(_components.code, {\n        children: \"existingValue\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","Default","ComponentBox","noInline","Update","WithoutFormHandler","_components","h2","h3","p","code","Examples","_missingMdxReference","id","component","Error","pre","a","className","href"],"sourceRoot":""}