"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[73002],{53128:function(n,e,t){t.r(e),t.d(e,{default:function(){return p}});var a={};t.r(a),t.d(a,{BasedOnBooleanTrue:function(){return m},BasedOnContext:function(){return h},BooleanExample:function(){return r},InferData:function(){return u},PathValue:function(){return c}});var i=t(52322),l=t(45392),o=(t(2784),t(7325)),s=t(99210);const r=()=>(0,i.jsx)(o.Z,{scope:{TestElement:s.Z},children:'<Form.Handler>\n  <Flex.Stack>\n    <Field.Boolean\n      label="Show content"\n      variant="buttons"\n      path="/toggleValue"\n      value={false}\n    />\n    <Form.Visibility pathTrue="/toggleValue" animate>\n      <TestElement>Item 1</TestElement>\n      <TestElement>Item 2</TestElement>\n    </Form.Visibility>\n  </Flex.Stack>\n</Form.Handler>\n'}),c=()=>(0,i.jsx)(o.Z,{children:'<Form.Handler>\n  <Field.Toggle\n    label="Show content"\n    valueOn="checked"\n    valueOff="unchecked"\n    variant="buttons"\n    path="/toggleValue"\n    value="unchecked"\n  />\n  <Form.Visibility pathValue="/toggleValue" whenValue="checked" animate>\n    <P>This is visible</P>\n  </Form.Visibility>\n</Form.Handler>\n'}),u=()=>(0,i.jsx)(o.Z,{noInline:!0,children:'const MyComponent = () => {\n  const { data } = Form.useData(\'example-form\', {\n    toggleValue: false,\n  })\n  const inferDataFunc = React.useCallback(\n    () => data.toggleValue,\n    [data.toggleValue],\n  )\n  return (\n    <Form.Handler id="example-form">\n      <Flex.Stack>\n        <Field.Boolean path="/toggleValue" label="Check me" />\n        <Form.Visibility inferData={inferDataFunc} animate>\n          <P>This is visible</P>\n        </Form.Visibility>\n      </Flex.Stack>\n    </Form.Handler>\n  )\n}\nrender(<MyComponent />)\n'}),m=()=>(0,i.jsx)(o.Z,{children:"<Form.Visibility visible={true}>\n  <P>This is visible</P>\n</Form.Visibility>\n"}),h=()=>(0,i.jsx)(o.Z,{children:'<Form.Handler\n  data={{\n    toBe: true,\n    notToBe: false,\n  }}\n>\n  <Form.Visibility pathTrue="/toBe">\n    <P>This will show, as long as `toBe` is true.</P>\n  </Form.Visibility>\n  <Form.Visibility pathTrue="/notToBe">\n    <P>This will not show until `notToBe` is true.</P>\n  </Form.Visibility>\n</Form.Handler>\n'});function d(n){const e=Object.assign({h2:"h2",h3:"h3"},(0,l.ah)(),n.components);return a||x("Examples",!1),m||x("Examples.BasedOnBooleanTrue",!0),h||x("Examples.BasedOnContext",!0),r||x("Examples.BooleanExample",!0),u||x("Examples.InferData",!0),c||x("Examples.PathValue",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:"Demos"}),"\n",(0,i.jsx)(e.h3,{children:"Boolean example"}),"\n",(0,i.jsx)(r,{}),"\n",(0,i.jsx)(e.h3,{children:"Matching value"}),"\n",(0,i.jsx)(c,{}),"\n",(0,i.jsx)(e.h3,{children:"Direct properties"}),"\n",(0,i.jsx)(m,{}),"\n",(0,i.jsx)(e.h3,{children:"Based on DataContext"}),"\n",(0,i.jsx)(h,{}),"\n",(0,i.jsx)(e.h3,{children:"InferData"}),"\n",(0,i.jsx)(u,{})]})}var p=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,l.ah)(),n.components);return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(d,n)})):d(n)};function x(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},99210:function(n,e,t){t.d(e,{Z:function(){return s}});var a=t(72779),i=t.n(a),l=t(80215),o=t(52322);function s(n){let{className:e=null,...t}=n;return(0,o.jsx)(l.Z,{className:i()("dnb-forms-test-element",e),...t})}s._supportsSpacingProps=!0}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-extended-features-form-visibility-demos-mdx-eb26bd1858762a1716a4.js.map