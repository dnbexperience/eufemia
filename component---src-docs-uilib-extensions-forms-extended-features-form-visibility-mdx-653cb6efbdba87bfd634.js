"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[44969,73002,43272],{4991:function(n,e,t){t.r(e);var a=t(52322),i=t(45392),s=t(46235),o=t(53128);function r(n){return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.default,{}),"\n",(0,a.jsx)(o.default,{})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,a.jsx)(e,Object.assign({},n,{children:(0,a.jsx)(r,n)})):r()}},53128:function(n,e,t){t.r(e),t.d(e,{default:function(){return p}});var a={};t.r(a),t.d(a,{BasedOnBooleanTrue:function(){return u},BasedOnContext:function(){return h},BooleanExample:function(){return l},InferData:function(){return d},PathValue:function(){return c}});var i=t(52322),s=t(45392),o=(t(2784),t(52394)),r=t(99210);const l=()=>(0,i.jsx)(o.Z,{scope:{TestElement:r.Z},children:'<Form.Handler>\n  <Flex.Stack>\n    <Field.Boolean\n      label="Show content"\n      variant="buttons"\n      path="/toggleValue"\n      value={false}\n    />\n    <Form.Visibility pathTrue="/toggleValue" animate>\n      <TestElement>Item 1</TestElement>\n      <TestElement>Item 2</TestElement>\n    </Form.Visibility>\n  </Flex.Stack>\n</Form.Handler>\n'}),c=()=>(0,i.jsx)(o.Z,{children:'<Form.Handler>\n  <Field.Toggle\n    label="Show content"\n    valueOn="checked"\n    valueOff="unchecked"\n    variant="buttons"\n    path="/toggleValue"\n    value="unchecked"\n  />\n  <Form.Visibility pathValue="/toggleValue" whenValue="checked" animate>\n    <P>This is visible</P>\n  </Form.Visibility>\n</Form.Handler>\n'}),d=()=>(0,i.jsx)(o.Z,{noInline:!0,children:'const MyComponent = () => {\n  const { data } = Form.useData(\'example-form\', {\n    toggleValue: false,\n  })\n  const inferDataFunc = React.useCallback(\n    () => data.toggleValue,\n    [data.toggleValue],\n  )\n  return (\n    <Form.Handler id="example-form">\n      <Flex.Stack>\n        <Field.Boolean path="/toggleValue" label="Check me" />\n        <Form.Visibility inferData={inferDataFunc} animate>\n          <P>This is visible</P>\n        </Form.Visibility>\n      </Flex.Stack>\n    </Form.Handler>\n  )\n}\nrender(<MyComponent />)\n'}),u=()=>(0,i.jsx)(o.Z,{children:"<Form.Visibility visible={true}>\n  <P>This is visible</P>\n</Form.Visibility>\n"}),h=()=>(0,i.jsx)(o.Z,{children:'<Form.Handler\n  data={{\n    toBe: true,\n    notToBe: false,\n  }}\n>\n  <Form.Visibility pathTrue="/toBe">\n    <P>This will show, as long as `toBe` is true.</P>\n  </Form.Visibility>\n  <Form.Visibility pathTrue="/notToBe">\n    <P>This will not show until `notToBe` is true.</P>\n  </Form.Visibility>\n</Form.Handler>\n'});function m(n){const e=Object.assign({h2:"h2",h3:"h3"},(0,s.ah)(),n.components);return a||x("Examples",!1),u||x("Examples.BasedOnBooleanTrue",!0),h||x("Examples.BasedOnContext",!0),l||x("Examples.BooleanExample",!0),d||x("Examples.InferData",!0),c||x("Examples.PathValue",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:"Demos"}),"\n",(0,i.jsx)(e.h3,{children:"Boolean example"}),"\n",(0,i.jsx)(l,{}),"\n",(0,i.jsx)(e.h3,{children:"Matching value"}),"\n",(0,i.jsx)(c,{}),"\n",(0,i.jsx)(e.h3,{children:"Direct properties"}),"\n",(0,i.jsx)(u,{}),"\n",(0,i.jsx)(e.h3,{children:"Based on DataContext"}),"\n",(0,i.jsx)(h,{}),"\n",(0,i.jsx)(e.h3,{children:"InferData"}),"\n",(0,i.jsx)(d,{})]})}var p=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(m,n)})):m(n)};function x(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},46235:function(n,e,t){t.r(e);var a=t(52322),i=t(45392),s=t(53128);function o(n){const e=Object.assign({h2:"h2",p:"p",code:"code",a:"a",pre:"pre"},(0,i.ah)(),n.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{children:"Description"}),"\n",(0,a.jsxs)(e.p,{children:["The ",(0,a.jsx)(e.code,{children:"Form.Visibility"})," component makes it possible to show or hide components on the screen based on the state of data. It can either be fed with the values directly via props, or it can read data from a surrounding ",(0,a.jsx)(e.a,{href:"/uilib/extensions/forms/extended-features/Form/Handler",children:"Form.Handler"})," and show or hide components based on the data it points to."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-tsx",children:'import { Form } from \'@dnb/eufemia/extensions/forms\'\nrender(\n  <>\n    <Field.Boolean path="/myState" />\n    <Form.Visibility pathTrue="/myState">\n      show me when the state value is true\n    </Form.Visibility>\n  </>,\n)\n'})}),"\n",(0,a.jsx)(s.default,{})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,a.jsx)(e,Object.assign({},n,{children:(0,a.jsx)(o,n)})):o(n)}},99210:function(n,e,t){t.d(e,{Z:function(){return r}});var a=t(72779),i=t.n(a),s=t(80215),o=t(52322);function r(n){let{className:e=null,...t}=n;return(0,o.jsx)(s.Z,{className:i()("dnb-forms-test-element",e),...t})}r._supportsSpacingProps=!0}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-extended-features-form-visibility-mdx-653cb6efbdba87bfd634.js.map