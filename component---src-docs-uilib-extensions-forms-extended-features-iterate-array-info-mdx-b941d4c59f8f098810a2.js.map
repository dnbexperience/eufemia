{"version":3,"file":"component---src-docs-uilib-extensions-forms-extended-features-iterate-array-info-mdx-b941d4c59f8f098810a2.js","mappings":"6KAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,KAAM,OACNC,IAAK,MACLC,GAAI,KACJC,GAAI,KACJC,EAAG,MACFC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKf,EAAYG,GAAI,CAC9BW,SAAU,gBACR,MAAMF,EAAAA,EAAAA,MAAMZ,EAAYI,EAAG,CAC7BU,SAAU,EAACC,EAAAA,EAAAA,KAAKf,EAAYK,KAAM,CAChCS,SAAU,kBACR,8DAA8DC,EAAAA,EAAAA,KAAKf,EAAYK,KAAM,CACvFS,SAAU,UACR,yDAAyDC,EAAAA,EAAAA,KAAKf,EAAYK,KAAM,CAClFS,SAAU,SACR,4DAA4DC,EAAAA,EAAAA,KAAKf,EAAYK,KAAM,CACrFS,SAAU,gBACR,iCAAiCC,EAAAA,EAAAA,KAAKf,EAAYK,KAAM,CAC1DS,SAAU,kBACR,iEACF,MAAMC,EAAAA,EAAAA,KAAKf,EAAYM,IAAK,CAC9BQ,UAAUC,EAAAA,EAAAA,KAAKf,EAAYK,KAAM,CAC/BW,UAAW,eACXF,SAAU,wPAEV,MAAMC,EAAAA,EAAAA,KAAKf,EAAYO,GAAI,CAC7BO,SAAU,wCACR,MAAMF,EAAAA,EAAAA,MAAMZ,EAAYI,EAAG,CAC7BU,SAAU,CAAC,UAAUC,EAAAA,EAAAA,KAAKf,EAAYK,KAAM,CAC1CS,SAAU,kBACR,yKACF,MAAMC,EAAAA,EAAAA,KAAKf,EAAYQ,GAAI,CAC7BM,SAAU,gBACR,MAAMF,EAAAA,EAAAA,MAAMZ,EAAYI,EAAG,CAC7BU,SAAU,CAAC,+BAA+BC,EAAAA,EAAAA,KAAKf,EAAYK,KAAM,CAC/DS,SAAU,kBACR,kBAAkBC,EAAAA,EAAAA,KAAKf,EAAYK,KAAM,CAC3CS,SAAU,aACR,2QAA2QC,EAAAA,EAAAA,KAAKf,EAAYK,KAAM,CACpSS,SAAU,kBACR,+EACF,MAAMC,EAAAA,EAAAA,KAAKf,EAAYQ,GAAI,CAC7BM,SAAU,oBACR,MAAMF,EAAAA,EAAAA,MAAMZ,EAAYI,EAAG,CAC7BU,SAAU,CAAC,6IAA6IC,EAAAA,EAAAA,KAAKf,EAAYK,KAAM,CAC7KS,SAAU,kBACR,kMACF,MAAMF,EAAAA,EAAAA,MAAMZ,EAAYI,EAAG,CAC7BU,SAAU,CAAC,gCAAgCC,EAAAA,EAAAA,KAAKf,EAAYK,KAAM,CAChES,SAAU,aACR,yBAAyBC,EAAAA,EAAAA,KAAKf,EAAYK,KAAM,CAClDS,SAAU,kBACR,qBAAqBC,EAAAA,EAAAA,KAAKf,EAAYS,EAAG,CAC3CQ,KAAM,gEACNH,SAAU,UACR,SAGV,CAOA,UANA,SAAoBf,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOmB,QAASC,GAAalB,OAAOC,OAAO,CAAC,GAAGQ,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOQ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWlB,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1De,UAAUC,EAAAA,EAAAA,KAAKjB,EAAmBC,MAC9BD,EAAkBC,EAC1B,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Iterate/Array/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    h3: \"h3\",\n    h4: \"h4\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" works in many ways similar to field-components. It has a \", _jsx(_components.code, {\n        children: \"value\"\n      }), \"-prop that can receive an array or you can give it a \", _jsx(_components.code, {\n        children: \"path\"\n      }), \" if you want it to retrieve an array from a surrounding \", _jsx(_components.code, {\n        children: \"DataContext\"\n      }), \". All children components of \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" are rendered once per element the array-value consists of.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Field } from '@dnb/eufemia/extensions/forms'\\nrender(\\n  <Iterate.Array\\n    label=\\\"Array label\\\"\\n    value={['Iron Man', 'Captain America', 'The Hulk']}\\n  >\\n    <Field.String itemPath=\\\"/\\\" />\\n  </Iterate.Array>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Individual values and dynamic paths\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" renders its children once per element, the field components inside must receive values based on the different elements in the array. This can be done in two ways:\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"1. itemPath\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If field components inside \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" are given an \", _jsx(_components.code, {\n        children: \"itemPath\"\n      }), \" prop, this will look for values based on the array element being the root of the structure, even if the array often comes from a surrounding data set. This means that you do not need to think about which index the field should point to, because it is handled by \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" internally. You can look at the individual element as its own structure.\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"2. Render props\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you want to be able to provide values to the individual field component directly instead of pointing to them with paths, you can give \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" a render prop. It works a bit like an array-map call. The render function receives the value of the element as the first argument, and the index of which element you are on as the second.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Examples of both the use of \", _jsx(_components.code, {\n        children: \"itemPath\"\n      }), \" and Render Props in \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" can be found on \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/extended-features/Iterate/Array/demos\",\n        children: \"demos\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","pre","h3","h4","a","_provideComponents","components","_jsxs","_Fragment","children","_jsx","className","href","wrapper","MDXLayout"],"sourceRoot":""}