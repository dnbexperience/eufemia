"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[99276,23648,47049],{88016:function(e,n,t){t.r(n);var a=t(52322),r=t(45392),o=t(16299),s=t(51227),i=t(49659),l=t(69765);function c(e){return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(o.default,{}),"\n",(0,a.jsx)(s.default,{}),"\n",(0,a.jsx)(i.default,{}),"\n",(0,a.jsx)(l.default,{})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(c,e)})):c()}},51227:function(e,n,t){t.r(n),t.d(n,{default:function(){return x}});var a={};t.r(a),t.d(a,{ArrayFromFormHandler:function(){return m},ObjectElements:function(){return h},PrimitiveElements:function(){return d},RenderPropsObjectElements:function(){return p},RenderPropsPrimitiveElements:function(){return u}});var r=t(52322),o=t(45392),s=t(99587),i=t(10535),l=t(21975),c=t(42277);const d=()=>(0,r.jsx)(s.Z,{scope:{Iterate:i},children:"<Iterate.Array\n  label=\"Array label\"\n  value={['Iron Man', 'Captain America', 'The Hulk']}\n  onChange={(value) => console.log('onChange', value)}\n>\n  <Field.String itemPath=\"/\" />\n</Iterate.Array>\n"}),h=()=>(0,r.jsx)(s.Z,{scope:{Iterate:i,Value:l},children:"<Iterate.Array\n  label=\"Accounts\"\n  value={[\n    {\n      accountName: 'Brukskonto',\n      accountNumber: '90901134567',\n    },\n    {\n      accountName: 'Sparekonto',\n      accountNumber: '90901156789',\n    },\n  ]}\n  onChange={(value) => console.log('onChange', value)}\n>\n  <h3>\n    <Value.String itemPath=\"/nickname\" />\n  </h3>\n  <Flex.Horizontal>\n    <Field.BankAccountNumber itemPath=\"/accountNumber\" />\n    <Field.String label=\"Account name\" itemPath=\"/accountName\" />\n  </Flex.Horizontal>\n</Iterate.Array>\n"}),u=()=>(0,r.jsx)(s.Z,{scope:{Iterate:i},children:"<Iterate.Array\n  label=\"Array label\"\n  value={['foo', 'bar', 'baz']}\n  onChange={(value) => console.log('onChange', value)}\n>\n  {(elementValue) => <Field.String value={elementValue} />}\n</Iterate.Array>\n"}),p=()=>(0,r.jsx)(s.Z,{scope:{Iterate:i},children:"<Iterate.Array\n  label=\"Array label\"\n  value={[\n    {\n      num: 1,\n      txt: 'One',\n    },\n    {\n      num: 2,\n      txt: 'Two',\n    },\n    {\n      num: 3,\n      txt: 'Three',\n    },\n    {\n      num: 4,\n      txt: 'Four',\n    },\n  ]}\n  onChange={(value) => console.log('onChange', value)}\n>\n  {({ num, txt }) => (\n    <FieldBlock width=\"large\">\n      <Field.Number value={num} width=\"small\" />\n      <Field.String value={txt} width={false} />\n    </FieldBlock>\n  )}\n</Iterate.Array>\n"}),m=()=>(0,r.jsx)(s.Z,{scope:{Iterate:i,Value:l,TrashIcon:c.Z},children:'<Form.Handler\n  data={{\n    avengers: [\n      {\n        nickname: \'Iron Man\',\n        firstName: \'Tony\',\n        lastName: \'Stark\',\n        bornYear: 1970,\n      },\n      {\n        nickname: \'Captain America\',\n        firstName: \'Steve\',\n        lastName: \'Rogers\',\n        bornYear: 1918,\n      },\n    ],\n    alwaysThere: \'Nick Fury\',\n  }}\n  onChange={(data) => console.log(\'Source onChange\', data)}\n>\n  <Form.MainHeading>Avengers</Form.MainHeading>\n\n  <Iterate.Array\n    path="/avengers"\n    onChange={(value) => console.log(\'Iterate onChange\', value)}\n  >\n    <Form.SubHeading>\n      <Value.String itemPath="/nickname" />\n    </Form.SubHeading>\n\n    <Flex.Horizontal align="center">\n      <Field.String\n        itemPath="/firstName"\n        width="medium"\n        label="First name"\n      />\n      <Field.String\n        itemPath="/lastName"\n        width="medium"\n        label="Last name"\n      />\n      <Field.Number\n        itemPath="/bornYear"\n        label="Year of birth"\n        width="small"\n      />\n      <Iterate.ArrayRemoveElementButton icon={TrashIcon} />\n    </Flex.Horizontal>\n\n    <Field.String path="/alwaysThere" top="x-small" />\n  </Iterate.Array>\n\n  <Iterate.ArrayPushButton\n    top="small"\n    text="Add another avenger"\n    path="/avengers"\n    pushValue={{}}\n  />\n</Form.Handler>\n'});function f(e){const n=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code"},(0,o.ah)(),e.components);return a||g("Examples",!1),m||g("Examples.ArrayFromFormHandler",!0),h||g("Examples.ObjectElements",!0),d||g("Examples.PrimitiveElements",!0),p||g("Examples.RenderPropsObjectElements",!0),u||g("Examples.RenderPropsPrimitiveElements",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{children:"Demos"}),"\n",(0,r.jsx)(n.h3,{children:"Primitive elements"}),"\n",(0,r.jsx)(d,{}),"\n",(0,r.jsx)(n.h3,{children:"Object elements"}),"\n",(0,r.jsx)(h,{}),"\n",(0,r.jsx)(n.h3,{children:"Render props with primitive elements"}),"\n",(0,r.jsx)(u,{}),"\n",(0,r.jsx)(n.h3,{children:"Render props with object elements"}),"\n",(0,r.jsx)(p,{}),"\n",(0,r.jsx)(n.h3,{children:"With DataContext and add/remove buttons"}),"\n",(0,r.jsx)("em",{children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"itemPath"})," points to the root of each iterated element, while ",(0,r.jsx)(n.code,{children:"path"}),"\npoints to the root of the data source."]})}),"\n",(0,r.jsx)(m,{})]})}var x=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(f,e)})):f(e)};function g(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},69765:function(e,n,t){t.r(n);var a=t(52322),r=t(45392),o=t(85179),s=t(6024);function i(e){const n=Object.assign({h2:"h2"},(0,r.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{children:"Events"}),"\n",(0,a.jsx)(o.Z,{props:s.d})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(i,e)})):i(e)}},16299:function(e,n,t){t.r(n);var a=t(52322),r=t(45392);function o(e){const n=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",h3:"h3",h4:"h4",a:"a"},(0,r.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{children:"Description"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Iterate.Array"})," works in many ways similar to field-components. It has a ",(0,a.jsx)(n.code,{children:"value"}),"-prop that can receive an array or you can give it a ",(0,a.jsx)(n.code,{children:"path"})," if you want it to retrieve an array from a surrounding ",(0,a.jsx)(n.code,{children:"DataContext"}),". All children components of ",(0,a.jsx)(n.code,{children:"Iterate.Array"})," are rendered once per element the array-value consists of."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { Iterate, Field } from '@dnb/eufemia/extensions/forms'\nrender(\n  <Iterate.Array\n    label=\"Array label\"\n    value={['Iron Man', 'Captain America', 'The Hulk']}\n  >\n    <Field.String itemPath=\"/\" />\n  </Iterate.Array>,\n)\n"})}),"\n",(0,a.jsx)(n.h3,{children:"Individual values and dynamic paths"}),"\n",(0,a.jsxs)(n.p,{children:["Since ",(0,a.jsx)(n.code,{children:"Iterate.Array"})," renders its children once per element, the field components inside must receive values based on the different elements in the array. This can be done in two ways:"]}),"\n",(0,a.jsx)(n.h4,{children:"1. itemPath"}),"\n",(0,a.jsxs)(n.p,{children:["If field components inside ",(0,a.jsx)(n.code,{children:"Iterate.Array"})," are given an ",(0,a.jsx)(n.code,{children:"itemPath"})," prop, this will look for values based on the array element being the root of the structure, even if the array often comes from a surrounding data set. This means that you do not need to think about which index the field should point to, because it is handled by ",(0,a.jsx)(n.code,{children:"Iterate.Array"})," internally. You can look at the individual element as its own structure."]}),"\n",(0,a.jsx)(n.h4,{children:"2. Render props"}),"\n",(0,a.jsxs)(n.p,{children:["If you want to be able to provide values to the individual field component directly instead of pointing to them with paths, you can give ",(0,a.jsx)(n.code,{children:"Iterate.Array"})," a render prop. It works a bit like an array-map call. The render function receives the value of the element as the first argument, and the index of which element you are on as the second."]}),"\n",(0,a.jsxs)(n.p,{children:["Examples of both the use of ",(0,a.jsx)(n.code,{children:"itemPath"})," and Render Props in ",(0,a.jsx)(n.code,{children:"Iterate.Array"})," can be found on ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Iterate/Array/demos",children:"demos"}),"."]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(o,e)})):o(e)}},49659:function(e,n,t){t.r(n);var a=t(52322),r=t(45392),o=t(85179),s=t(6024);function i(e){const n=Object.assign({h2:"h2",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",em:"em",a:"a"},(0,r.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{children:"Properties"}),"\n",(0,a.jsx)(n.h3,{children:"Field-specific props"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Property"}),(0,a.jsx)(n.th,{children:"Type"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"value"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"array"})}),(0,a.jsxs)(n.td,{children:[(0,a.jsx)(n.em,{children:"(optional)"})," The data to process."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.a,{href:"/uilib/layout/flex/container/",children:"FlexContainer"})}),(0,a.jsx)(n.td,{children:"Various"}),(0,a.jsxs)(n.td,{children:[(0,a.jsx)(n.em,{children:"(optional)"})," All Flex.Container properties."]})]})]})]}),"\n",(0,a.jsx)(n.h3,{children:"General props"}),"\n",(0,a.jsx)(o.Z,{props:s.u})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(i,e)})):i(e)}},85179:function(e,n,t){t.d(n,{Z:function(){return x}});var a=t(70894),r=t(61185),o=t(55560),s=t(41676),i=t(6210),l=t(30730),c=t(64223),d=t(37339),h=t(1864),u=t(88504),p=t(52322);const m={...h.L,p:e=>(0,p.jsx)("span",{...e})},f=(0,a.Z)(o.ZP,{target:"e13h2c840"})({name:"1qdk5x4",styles:"td{white-space:nowrap;}"});function x(e){let{props:n,valueType:t="string",camelCase:a,omit:h}=e;const x=Object.keys(n),y=Object.entries(n).map((e=>{let[n,{type:o,doc:c,status:f}]=e;return h&&h.includes(n)?null:("string"==typeof o&&String(o).includes("{valueType}")&&(o=t),(0,p.jsxs)(s.Z,{children:[(0,p.jsx)(i.Z,{children:(0,p.jsx)(u.Z,{children:(0,p.jsx)(l.Z,{children:b(a?(0,d.zW)(n):n)})})}),(0,p.jsx)(i.Z,{children:Array.isArray(o)?o.map((e=>(0,p.jsx)(u.Z,{children:(0,p.jsx)(l.Z,{children:e})},e))).reduce(((e,n)=>(0,p.jsxs)(p.Fragment,{children:[e," or ",n]}))):(0,p.jsx)(u.Z,{children:(0,p.jsx)(l.Z,{children:o})})}),(0,p.jsxs)(i.Z,{children:[(0,p.jsxs)("em",{children:["(",f,")"]})," ",(0,p.jsx)(r.D,{components:m,children:a?g(c,x):c})]})]},n))}));return(0,p.jsx)(o.ZP.ScrollView,{children:(0,p.jsxs)(f,{children:[(0,p.jsx)("thead",{children:(0,p.jsxs)(s.Z,{children:[(0,p.jsx)(c.Z,{children:"Property"}),(0,p.jsx)(c.Z,{children:"Type"}),(0,p.jsx)(c.Z,{children:"Description"})]})}),(0,p.jsx)("tbody",{children:y})]})})}function g(e,n){return n.forEach((n=>{e=e.replace(new RegExp(n,"g"),(0,d.zW)(n))})),e}function b(e){return e.includes("/")?(0,p.jsx)(r.D,{components:m,children:e}):e}},6024:function(e,n,t){t.d(n,{d:function(){return r},u:function(){return a}});const a={value:{doc:"Source data value for the input.",type:"{valueType}",status:"optional"},path:{doc:"JSON Pointer for where the data for this input is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.",type:"string",status:"optional"},id:{doc:"Unique id for connecting Form.Handler and helper tools such as Form.useData.",type:"string",status:"optional"},info:{doc:"Info message shown below / after the input.",type:"React.Node",status:"optional"},warning:{doc:"Warning message shown below / after the input.",type:"React.Node",status:"optional"},error:{doc:"Error message shown below / after the input.",type:"Error",status:"optional"},disabled:{doc:"Set `true` to show the field but without the possibility of changing the value.",type:"boolean",status:"optional"},emptyValue:{doc:"The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.",type:"any",status:"optional"},required:{doc:"When set `true`, the input will give an error if the value cannot be empty.",type:"boolean",status:"optional"},schema:{doc:"Custom JSON Schema for validating the value.",type:"object",status:"optional"},validateInitially:{doc:"Set `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.",type:"boolean",status:"optional"},validateUnchanged:{doc:"Set `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.",type:"boolean",status:"optional"},continuousValidation:{doc:"Set `true` to show validation based errors continuously while writing, not just when blurring the field.",type:"boolean",status:"optional"},errorMessages:{doc:"Custom error messages for each type of error, overriding default messages.",type:"object",status:"optional"},validator:{doc:"Custom validator function that will be called for every change done by the user. Can be asynchronous or synchronous.",type:"function",status:"optional"},onBlurValidator:{doc:"Custom validator function that will be called when the user leaves the field (blurring a text input, closing a dropdown etc). Can be asynchronous or synchronous.",type:"function",status:"optional"},transformIn:{doc:"transforms the `value` before its displayed in the field (e.g. input).",type:"function",status:"optional"},transformOut:{doc:"transforms the value before it gets forwarded to the form data object or returned as the `onChange` value parameter.",type:"function",status:"optional"},...t(84187).o},r={onChange:{doc:"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`.",type:"function",status:"optional"},onFocus:{doc:"Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument.",type:"function",status:"optional"},onBlur:{doc:"Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument.",type:"function",status:"optional"}}},84187:function(e,n,t){t.d(n,{o:function(){return a}});const a={label:{doc:"Field label to show above / before the input feature.",type:"string",status:"optional"},labelDescription:{doc:'A more discreet text displayed beside the label (i.e for "(optional)").',type:"string",status:"optional"},labelSize:{doc:"Define one of the following [heading size](/uilib/elements/heading/): `medium` or `large`.",type:["string","false"],status:"optional"},layout:{doc:"Layout for the label and input. Can be `horizontal` or `vertical`.",type:"string",status:"optional"},width:{doc:"`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.",type:["string","false"],status:"optional"},contentWidth:{doc:"`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.",type:["string","false"],status:"optional"},composition:{doc:"Use `true` for when you have more than one field wrapped.",type:"string",status:"optional"},asFieldset:{doc:"Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.",type:"boolean",status:"optional"},disabled:{doc:"Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.",type:"boolean",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}}},10535:function(e,n,t){t.r(n),t.d(n,{Array:function(){return x},ArrayPushButton:function(){return j},ArrayRemoveElementButton:function(){return w},IterateElementContext:function(){return c.Z}});var a=t(84616),r=t(2784),o=t(72779),s=t.n(o),i=t(95955),l=t.n(i),c=t(38875),d=t(96781),h=t(26409),u=t(26),p=t(30392),m=t(52322);function f(e){const{className:n,layout:t="vertical",placeholder:o,label:i,labelDescription:f,path:x,value:g,info:b,warning:y,error:j,emptyValue:v,width:w,handleChange:A,children:F}=(0,h.Z)(e),C=(0,r.useMemo)((()=>(null!=g?g:[]).map(((e,n)=>({elementValue:e,handleElementChange:(e,n)=>{const t=structuredClone(g);l().set(t,e,n),null==A||A(t)},handleRemoveElement:()=>{const e=structuredClone(g);e.splice(n,1),null==A||A(e)}})))),[g,A]),I=(0,r.useCallback)((e=>{A([].concat((0,a.Z)(null!=g?g:[]),[e]))}),[g,A]);return(0,m.jsx)(d.Z,{className:s()("dnb-forms-field-number",n),layout:t,label:i,labelDescription:f,info:b,warning:y,error:j,width:w,contentWidth:!1!==w?w:void 0,...(0,u.SR)(e),children:(0,m.jsx)(p.Z,{...(0,p.W)(e,{spacing:"small"}),children:g===v?(0,m.jsx)("em",{children:o}):C.map(((e,n)=>{let{elementValue:t,handleElementChange:a,handleRemoveElement:r}=e;return(0,m.jsx)(c.Z.Provider,{value:{index:n,value:t,path:x,handleChange:a,handleRemove:r,handlePush:I},children:Array.isArray(F)?F.map((e=>"function"==typeof e?e(t,n):e)):"function"==typeof F?F(t,n):F},`element-${n}`)}))})})}f._supportsSpacingProps=!0;var x=f,g=t(96844),b=t(27439);function y(e){const n=(0,r.useContext)(c.Z),{handlePush:t}=null!=n?n:{},{pushValue:o,...i}=e,l=(0,b.wH)(i),{value:d,handleChange:u,children:p}=(0,h.Z)(i);if(void 0!==d&&!Array.isArray(d))throw new Error("ArrayPushButton received a non-array value.");const f=(0,r.useCallback)((()=>{t?t(o):u([].concat((0,a.Z)(null!=d?d:[]),[o]))}),[d,o,t,u]);return(0,m.jsx)(g.Z,{className:s()("dnb-forms-array-push-button",e.className),on_click:f,...l,children:p})}y._supportsSpacingProps=!0;var j=y;function v(e){const n=(0,r.useContext)(c.Z),{handleRemove:t}=null!=n?n:{};if(!n)throw new Error("ArrayRemoveElementButton must be inside an Iterate.Array component.");const a=(0,b.wH)(e),{children:o}=(0,h.Z)(e),i=(0,r.useCallback)((()=>{t()}),[t]);return(0,m.jsx)(g.Z,{className:s()("dnb-forms-array-remove-element-button",e.className),on_click:i,...a,children:o})}v._supportsSpacingProps=!0;var w=v}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-extended-features-iterate-array-mdx-41cd9841ddbc62ba3ee9.js.map