"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[99276,58925,97030,47049],{4125:function(e,n,t){t.r(n);var s=t(52322),r=t(45392);function i(e){const n=Object.assign({table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",em:"em"},(0,r.ah)(),e.components);return(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Event"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"onChange"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," Will be called on value changes made by the user, with the new value as argument."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"onFocus"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"onBlur"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"(optional)"})," Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument."]})]})]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}},88016:function(e,n,t){t.r(n);var s=t(52322),r=t(45392),i=t(16299),a=t(51227),o=t(49659),d=t(69765);function c(e){return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.default,{}),"\n",(0,s.jsx)(a.default,{}),"\n",(0,s.jsx)(o.default,{}),"\n",(0,s.jsx)(d.default,{})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(c,e)})):c()}},69765:function(e,n,t){t.r(n);var s=t(52322),r=t(45392),i=t(4125);function a(e){const n=Object.assign({h2:"h2"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{children:"Events"}),"\n",(0,s.jsx)(i.default,{})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(a,e)})):a(e)}},16299:function(e,n,t){t.r(n);var s=t(52322),r=t(45392);function i(e){const n=Object.assign({h2:"h2",p:"p",code:"code",h3:"h3",h4:"h4",a:"a"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{children:"Description"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Iterate.Array"})," works in many ways similar to field-components. It has a ",(0,s.jsx)(n.code,{children:"value"}),"-prop that can receive an array or you can give it a ",(0,s.jsx)(n.code,{children:"path"})," if you want it to retrieve an array from a surrounding ",(0,s.jsx)(n.code,{children:"DataContext"}),". All children components of ",(0,s.jsx)(n.code,{children:"Iterate.Array"})," are rendered once per element the array-value consists of."]}),"\n",(0,s.jsx)(n.h3,{children:"Individual values and dynamic paths"}),"\n",(0,s.jsxs)(n.p,{children:["Since ",(0,s.jsx)(n.code,{children:"Iterate.Array"})," renders its children once per element, the field components inside must receive values based on the different elements in the array. This can be done in two ways:"]}),"\n",(0,s.jsx)(n.h4,{children:"1. itemPath"}),"\n",(0,s.jsxs)(n.p,{children:["If field components inside ",(0,s.jsx)(n.code,{children:"Iterate.Array"})," are given an ",(0,s.jsx)(n.code,{children:"itemPath"})," prop, this will look for values based on the array element being the root of the structure, even if the array often comes from a surrounding data set. This means that you do not need to think about which index the field should point to, because it is handled by ",(0,s.jsx)(n.code,{children:"Iterate.Array"})," internally. You can look at the individual element as its own structure."]}),"\n",(0,s.jsx)(n.h4,{children:"2. Render props"}),"\n",(0,s.jsxs)(n.p,{children:["If you want to be able to provide values to the individual field component directly instead of pointing to them with paths, you can give ",(0,s.jsx)(n.code,{children:"Iterate.Array"})," a render prop. It works a bit like an array-map call. The render function receives the value of the element as the first argument, and the index of which element you are on as the second."]}),"\n",(0,s.jsxs)(n.p,{children:["Examples of both the use of ",(0,s.jsx)(n.code,{children:"itemPath"})," and Render Props in ",(0,s.jsx)(n.code,{children:"Iterate.Array"})," can be found on ",(0,s.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Iterate/Array/demos",children:"demos"}),"."]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-extended-features-iterate-array-mdx-87ca5ef3fdabd7fd147c.js.map