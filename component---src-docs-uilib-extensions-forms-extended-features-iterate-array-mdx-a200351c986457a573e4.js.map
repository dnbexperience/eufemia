{"version":3,"file":"component---src-docs-uilib-extensions-forms-extended-features-iterate-array-mdx-a200351c986457a573e4.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Iterate/Array.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Iterate/Array/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Iterate/Array/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Iterate/Array/events.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Iterate/Array/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Iterate/Array/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/Array/Array.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/ArrayPushButton/ArrayPushButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/ArrayRemoveElementButton/ArrayRemoveElementButton.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/extended-features/Iterate/Array/info';\nimport Demos from 'Docs/uilib/extensions/forms/extended-features/Iterate/Array/demos';\nimport Properties from 'Docs/uilib/extensions/forms/extended-features/Iterate/Array/properties';\nimport Events from 'Docs/uilib/extensions/forms/extended-features/Iterate/Array/events';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {}), \"\\n\", _jsx(Properties, {}), \"\\n\", _jsx(Events, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ComponentBox from '../../../../../../../shared/tags/ComponentBox'\nimport { Flex } from '@dnb/eufemia/src'\nimport {\n  Iterate,\n  Field,\n  Value,\n  Form,\n  FieldBlock,\n} from '@dnb/eufemia/src/extensions/forms'\nimport { trash as TrashIcon } from '@dnb/eufemia/src/icons'\n\nexport const PrimitiveElements = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Iterate.Array\n        label=\"Array label\"\n        value={['Iron Man', 'Captain America', 'The Hulk']}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        <Field.String itemPath=\"/\" />\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const ObjectElements = () => {\n  return (\n    <ComponentBox scope={{ Iterate, Value }}>\n      <Iterate.Array\n        label=\"Accounts\"\n        value={[\n          {\n            accountName: 'Brukskonto',\n            accountNumber: '90901134567',\n          },\n          {\n            accountName: 'Sparekonto',\n            accountNumber: '90901156789',\n          },\n        ]}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        <h3>\n          <Value.String itemPath=\"/nickname\" />\n        </h3>\n        <Flex.Horizontal>\n          <Field.BankAccountNumber itemPath=\"/accountNumber\" />\n          <Field.String label=\"Account name\" itemPath=\"/accountName\" />\n        </Flex.Horizontal>\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const RenderPropsPrimitiveElements = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Iterate.Array\n        label=\"Array label\"\n        value={['foo', 'bar', 'baz']}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        {(elementValue) => <Field.String value={elementValue} />}\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const RenderPropsObjectElements = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Iterate.Array\n        label=\"Array label\"\n        value={[\n          { num: 1, txt: 'One' },\n          { num: 2, txt: 'Two' },\n          { num: 3, txt: 'Three' },\n          { num: 4, txt: 'Four' },\n        ]}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        {({ num, txt }) => (\n          <FieldBlock width=\"large\">\n            <Field.Number value={num} width=\"small\" />\n            <Field.String value={txt} width={false} />\n          </FieldBlock>\n        )}\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const ArrayFromFormHandler = () => {\n  return (\n    <ComponentBox scope={{ Iterate, Value, TrashIcon }}>\n      <Form.Handler\n        data={{\n          avengers: [\n            {\n              nickname: 'Iron Man',\n              firstName: 'Tony',\n              lastName: 'Stark',\n              bornYear: 1970,\n            },\n            {\n              nickname: 'Captain America',\n              firstName: 'Steve',\n              lastName: 'Rogers',\n              bornYear: 1918,\n            },\n          ],\n          alwaysThere: 'Nick Fury',\n        }}\n        onChange={(data) => console.log('Source onChange', data)}\n      >\n        <Form.MainHeading>Avengers</Form.MainHeading>\n\n        <Iterate.Array\n          path=\"/avengers\"\n          onChange={(value) => console.log('Iterate onChange', value)}\n        >\n          <Form.SubHeading>\n            <Value.String itemPath=\"/nickname\" />\n          </Form.SubHeading>\n\n          <Flex.Horizontal align=\"center\">\n            <Field.String\n              itemPath=\"/firstName\"\n              width=\"medium\"\n              label=\"First name\"\n            />\n            <Field.String\n              itemPath=\"/lastName\"\n              width=\"medium\"\n              label=\"Last name\"\n            />\n            <Field.Number\n              itemPath=\"/bornYear\"\n              label=\"Year of birth\"\n              width=\"small\"\n            />\n            <Iterate.ArrayRemoveElementButton icon={TrashIcon} />\n          </Flex.Horizontal>\n\n          <Field.String path=\"/alwaysThere\" top=\"x-small\" />\n        </Iterate.Array>\n\n        <Iterate.ArrayPushButton\n          top=\"small\"\n          text=\"Add another avenger\"\n          path=\"/avengers\"\n          pushValue={{}}\n        />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.ArrayFromFormHandler) _missingMdxReference(\"Examples.ArrayFromFormHandler\", true);\n  if (!Examples.ObjectElements) _missingMdxReference(\"Examples.ObjectElements\", true);\n  if (!Examples.PrimitiveElements) _missingMdxReference(\"Examples.PrimitiveElements\", true);\n  if (!Examples.RenderPropsObjectElements) _missingMdxReference(\"Examples.RenderPropsObjectElements\", true);\n  if (!Examples.RenderPropsPrimitiveElements) _missingMdxReference(\"Examples.RenderPropsPrimitiveElements\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Primitive elements\"\n    }), \"\\n\", _jsx(Examples.PrimitiveElements, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Object elements\"\n    }), \"\\n\", _jsx(Examples.ObjectElements, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Render props with primitive elements\"\n    }), \"\\n\", _jsx(Examples.RenderPropsPrimitiveElements, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Render props with object elements\"\n    }), \"\\n\", _jsx(Examples.RenderPropsObjectElements, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With DataContext and add/remove buttons\"\n    }), \"\\n\", _jsx(\"em\", {\n      children: _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"itemPath\"\n        }), \" points to the root of each iterated element, while \", _jsx(_components.code, {\n          children: \"path\"\n        }), \"\\npoints to the root of the data source.\"]\n      })\n    }), \"\\n\", _jsx(Examples.ArrayFromFormHandler, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {fieldEvents} from '@dnb/eufemia/src/extensions/forms/Field/FieldDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Events\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: fieldEvents\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    h3: \"h3\",\n    h4: \"h4\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" works in many ways similar to field-components. It has a \", _jsx(_components.code, {\n        children: \"value\"\n      }), \"-prop that can receive an array or you can give it a \", _jsx(_components.code, {\n        children: \"path\"\n      }), \" if you want it to retrieve an array from a surrounding \", _jsx(_components.code, {\n        children: \"DataContext\"\n      }), \". All children components of \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" are rendered once per element the array-value consists of.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Field } from '@dnb/eufemia/extensions/forms'\\nrender(\\n  <Iterate.Array\\n    label=\\\"Array label\\\"\\n    value={['Iron Man', 'Captain America', 'The Hulk']}\\n  >\\n    <Field.String itemPath=\\\"/\\\" />\\n  </Iterate.Array>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Individual values and dynamic paths\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" renders its children once per element, the field components inside must receive values based on the different elements in the array. This can be done in two ways:\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"1. itemPath\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If field components inside \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" are given an \", _jsx(_components.code, {\n        children: \"itemPath\"\n      }), \" prop, this will look for values based on the array element being the root of the structure, even if the array often comes from a surrounding data set. This means that you do not need to think about which index the field should point to, because it is handled by \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" internally. You can look at the individual element as its own structure.\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"2. Render props\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you want to be able to provide values to the individual field component directly instead of pointing to them with paths, you can give \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" a render prop. It works a bit like an array-map call. The render function receives the value of the element as the first argument, and the index of which element you are on as the second.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Examples of both the use of \", _jsx(_components.code, {\n        children: \"itemPath\"\n      }), \" and Render Props in \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" can be found on \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/extended-features/Iterate/Array/demos\",\n        children: \"demos\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {fieldProperties} from '@dnb/eufemia/src/extensions/forms/Field/FieldDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    code: \"code\",\n    em: \"em\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field-specific props\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Type\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"value\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"array\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.em, {\n              children: \"(optional)\"\n            }), \" The data to process.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.a, {\n              href: \"/uilib/layout/flex/container/\",\n              children: \"FlexContainer\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Various\"\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.em, {\n              children: \"(optional)\"\n            }), \" All Flex.Container properties.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"General props\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: fieldProperties\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Code, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\nimport Copy from '../tags/Copy'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n}) {\n  const keys = Object.keys(props)\n  const tableRows = Object.entries(props).map(\n    ([key, { type, doc, status }]) => {\n      if (omit && omit.includes(key)) {\n        return null\n      }\n\n      if (\n        typeof type === 'string' &&\n        String(type).includes('{valueType}')\n      ) {\n        type = valueType as string\n      }\n\n      return (\n        <Tr key={key}>\n          <Td>\n            <Copy>\n              <Code>{formatName(camelCase ? toCamelCase(key) : key)}</Code>\n            </Copy>\n          </Td>\n          <Td>\n            {Array.isArray(type) ? (\n              type\n                .map((t) => (\n                  <Copy key={t}>\n                    <Code>{t}</Code>\n                  </Copy>\n                ))\n                .reduce((prev, curr) => (\n                  <>\n                    {prev} or {curr}\n                  </>\n                ))\n            ) : (\n              <Copy>\n                <Code>{type}</Code>\n              </Copy>\n            )}\n          </Td>\n          <Td>\n            <em>({status})</em>{' '}\n            <ReactMarkdown components={components}>\n              {camelCase ? convertToCamelCase(doc, keys) : doc}\n            </ReactMarkdown>\n          </Td>\n        </Tr>\n      )\n    },\n  )\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nfunction formatName(name: string): React.ReactNode | string {\n  if (name.includes('/')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const dataValueProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the input.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for this input is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  id: {\n    doc: 'Unique id for connecting Form.Handler and helper tools such as Form.useData.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: 'Info message shown below / after the input.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  warning: {\n    doc: 'Warning message shown below / after the input.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  error: {\n    doc: 'Error message shown below / after the input.',\n    type: 'Error',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: 'any',\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set `true`, the input will give an error if the value cannot be empty.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  continuousValidation: {\n    doc: 'Set `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages.',\n    type: 'object',\n    status: 'optional',\n  },\n  validator: {\n    doc: 'Custom validator function that will be called for every change done by the user. Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function that will be called when the user leaves the field (blurring a text input, closing a dropdown etc). Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  toInput: {\n    doc: 'Derivate called when the received / active value is sent to the input. Can be used for casting, changing syntax etc.',\n    type: 'function',\n    status: 'optional',\n  },\n  fromInput: {\n    doc: 'Derivate called when changes is made by the user, to cast or change syntax back to the original (opposite of `toInput`).',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const dataValueEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`.\",\n    type: 'function',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { fieldBlockProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  dataValueEvents,\n  dataValueProperties,\n} from '../hooks/DataValueDocs'\n\nexport const fieldProperties: PropertiesTableProps = {\n  ...dataValueProperties,\n  ...fieldBlockProperties,\n}\n\nexport const fieldEvents: PropertiesTableProps = {\n  ...dataValueEvents,\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const fieldBlockProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSize: {\n    doc: 'Define one of the following [heading size](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  width: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'string',\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n","import React, { useMemo, useCallback } from 'react'\nimport classnames from 'classnames'\nimport pointer from 'json-pointer'\nimport IterateElementContext from '../IterateElementContext'\nimport FieldBlock, { Props as FieldBlockProps } from '../../FieldBlock'\nimport { useFieldProps } from '../../hooks'\nimport {\n  FieldProps,\n  FieldHelpProps,\n  CustomErrorMessages,\n} from '../../types'\nimport { pickSpacingProps } from '../../../../components/flex/utils'\nimport {\n  BasicProps as FlexContainerProps,\n  pickFlexContainerProps,\n} from '../../../../components/flex/Container'\nimport Flex from '../../../../components/flex/Flex'\n\ninterface ErrorMessages extends CustomErrorMessages {\n  required?: string\n  schema?: string\n}\n\nexport type Props = FieldHelpProps &\n  FieldProps<unknown[], undefined, ErrorMessages> &\n  Omit<FieldBlockProps, 'children'> &\n  Omit<FlexContainerProps, 'children' | 'width'> & {\n    children:\n      | React.ReactNode\n      | ((value: any, index: number) => React.ReactNode)\n      | Array<\n          | React.ReactNode\n          | ((value: any, index: number) => React.ReactNode)\n        >\n  }\n\nfunction ArrayComponent(props: Props) {\n  const {\n    className,\n    layout = 'vertical',\n    placeholder,\n    label,\n    labelDescription,\n    path,\n    value: arrayValue,\n    info,\n    warning,\n    error,\n    emptyValue,\n    width,\n    handleChange,\n    children,\n  } = useFieldProps(props)\n\n  const elementData: {\n    elementValue: unknown\n    handleElementChange: (path: string, value: unknown) => void\n    handleRemoveElement: () => void\n  }[] = useMemo(() => {\n    return (arrayValue ?? []).map((elementValue, elementIndex) => ({\n      elementValue,\n      handleElementChange: (path, value) => {\n        const newArrayValue = structuredClone(arrayValue)\n        pointer.set(newArrayValue, path, value)\n        handleChange?.(newArrayValue)\n      },\n      handleRemoveElement: () => {\n        const newArrayValue = structuredClone(arrayValue)\n        newArrayValue.splice(elementIndex, 1)\n        handleChange?.(newArrayValue)\n      },\n    }))\n  }, [arrayValue, handleChange])\n\n  const handlePush = useCallback(\n    (element: unknown) => {\n      handleChange([...(arrayValue ?? []), element])\n    },\n    [arrayValue, handleChange]\n  )\n\n  return (\n    <FieldBlock\n      className={classnames('dnb-forms-field-number', className)}\n      layout={layout}\n      label={label}\n      labelDescription={labelDescription}\n      info={info}\n      warning={warning}\n      error={error}\n      width={width}\n      contentWidth={width !== false ? width : undefined}\n      {...pickSpacingProps(props)}\n    >\n      <Flex.Container\n        {...pickFlexContainerProps(props as FlexContainerProps, {\n          spacing: 'small',\n        })}\n      >\n        {arrayValue === emptyValue ? (\n          <em>{placeholder}</em>\n        ) : (\n          elementData.map(\n            (\n              { elementValue, handleElementChange, handleRemoveElement },\n              elementIndex\n            ) => {\n              return (\n                <IterateElementContext.Provider\n                  key={`element-${elementIndex}`}\n                  value={{\n                    index: elementIndex,\n                    value: elementValue,\n                    path,\n                    handleChange: handleElementChange,\n                    handleRemove: handleRemoveElement,\n                    handlePush,\n                  }}\n                >\n                  {Array.isArray(children)\n                    ? children.map((childElement) =>\n                        typeof childElement === 'function'\n                          ? childElement(elementValue, elementIndex)\n                          : childElement\n                      )\n                    : typeof children === 'function'\n                    ? children(elementValue, elementIndex)\n                    : children}\n                </IterateElementContext.Provider>\n              )\n            }\n          )\n        )}\n      </Flex.Container>\n    </FieldBlock>\n  )\n}\n\nArrayComponent._supportsSpacingProps = true\nexport default ArrayComponent\n","import React, { useCallback, useContext } from 'react'\nimport classnames from 'classnames'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/Button'\nimport IterateElementContext from '../IterateElementContext'\nimport { useFieldProps } from '../../hooks'\nimport {\n  DataValueReadWriteComponentProps,\n  omitDataValueReadWriteProps,\n} from '../../types'\n\nexport type Props = ButtonProps &\n  DataValueReadWriteComponentProps<unknown[]> & {\n    pushValue: unknown\n  }\n\nfunction ArrayPushButton(props: Props) {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { handlePush } = iterateElementContext ?? {}\n\n  const { pushValue, ...restProps } = props\n  const buttonProps = omitDataValueReadWriteProps(restProps)\n  const { value, handleChange, children } = useFieldProps(restProps)\n\n  if (value !== undefined && !Array.isArray(value)) {\n    throw new Error('ArrayPushButton received a non-array value.')\n  }\n\n  const handleClick = useCallback(() => {\n    if (handlePush) {\n      // Inside an Iterate element - make the change through the Iterate component\n      handlePush(pushValue)\n      return\n    }\n\n    // If not inside an iterate, it could still manipulate a source data set through useFieldProps\n    handleChange([...(value ?? []), pushValue])\n  }, [value, pushValue, handlePush, handleChange])\n\n  return (\n    <Button\n      className={classnames(\n        'dnb-forms-array-push-button',\n        props.className\n      )}\n      on_click={handleClick}\n      {...buttonProps}\n    >\n      {children}\n    </Button>\n  )\n}\n\nArrayPushButton._supportsSpacingProps = true\nexport default ArrayPushButton\n","import React, { useCallback, useContext } from 'react'\nimport classnames from 'classnames'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/Button'\nimport IterateElementContext from '../IterateElementContext'\nimport { useFieldProps } from '../../hooks'\nimport {\n  DataValueReadWriteComponentProps,\n  omitDataValueReadWriteProps,\n} from '../../types'\n\nexport type Props = ButtonProps &\n  DataValueReadWriteComponentProps<unknown[]>\n\nfunction ArrayRemoveElementButton(props: Props) {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { handleRemove } = iterateElementContext ?? {}\n\n  if (!iterateElementContext) {\n    throw new Error(\n      'ArrayRemoveElementButton must be inside an Iterate.Array component.'\n    )\n  }\n\n  const buttonProps = omitDataValueReadWriteProps(props)\n\n  const { children } = useFieldProps(props)\n\n  const handleClick = useCallback(() => {\n    handleRemove()\n  }, [handleRemove])\n\n  return (\n    <Button\n      className={classnames(\n        'dnb-forms-array-remove-element-button',\n        props.className\n      )}\n      on_click={handleClick}\n      {...buttonProps}\n    >\n      {children}\n    </Button>\n  )\n}\n\nArrayRemoveElementButton._supportsSpacingProps = true\nexport default ArrayRemoveElementButton\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","Properties","Events","wrapper","MDXLayout","Object","assign","_provideComponents","components","PrimitiveElements","ComponentBox","scope","Iterate","ObjectElements","Value","RenderPropsPrimitiveElements","RenderPropsObjectElements","ArrayFromFormHandler","TrashIcon","_components","h2","h3","p","code","Examples","_missingMdxReference","id","component","Error","PropertiesTable","fieldEvents","pre","h4","a","className","href","table","thead","tr","th","tbody","td","em","fieldProperties","basicComponents","StyledTable","_styled","Table","target","name","styles","_ref","valueType","camelCase","omit","keys","tableRows","entries","map","_ref2","key","type","doc","status","includes","String","Tr","Td","Copy","Code","formatName","toCamelCase","Array","isArray","t","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp","value","path","info","warning","error","disabled","emptyValue","required","schema","validateInitially","validateUnchanged","continuousValidation","errorMessages","validator","onBlurValidator","toInput","fromInput","fieldBlockProperties","onChange","onFocus","onBlur","label","labelDescription","labelSize","layout","width","contentWidth","composition","asFieldset","ArrayComponent","placeholder","arrayValue","handleChange","useFieldProps","elementData","useMemo","elementValue","elementIndex","handleElementChange","newArrayValue","structuredClone","pointer","handleRemoveElement","splice","handlePush","useCallback","element","concat","_toConsumableArray","FieldBlock","classnames","undefined","pickSpacingProps","Flex","pickFlexContainerProps","spacing","IterateElementContext","Provider","index","handleRemove","childElement","_supportsSpacingProps","ArrayPushButton","iterateElementContext","useContext","pushValue","restProps","buttonProps","omitDataValueReadWriteProps","handleClick","Button","on_click","ArrayRemoveElementButton"],"sourceRoot":""}