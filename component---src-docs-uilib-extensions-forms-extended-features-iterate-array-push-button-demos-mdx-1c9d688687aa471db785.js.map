{"version":3,"file":"component---src-docs-uilib-extensions-forms-extended-features-iterate-array-push-button-demos-mdx-1c9d688687aa471db785.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Iterate/ArrayPushButton/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Iterate/ArrayPushButton/demos.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/Array/Array.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/ArrayPushButton/ArrayPushButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/ArrayRemoveElementButton/ArrayRemoveElementButton.tsx"],"sourcesContent":["import ComponentBox from '../../../../../../../shared/tags/ComponentBox'\nimport { Iterate, Field, Form } from '@dnb/eufemia/src/extensions/forms'\n\nexport const PrimitiveElements = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Iterate.ArrayPushButton\n        text=\"Add another element\"\n        value={['foo', 'bar']}\n        pushValue=\"new\"\n        onChange={(value) => console.log('onChange', value)}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const ObjectElements = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Form.Handler\n        data={[\n          { name: 'Iron Man' },\n          { name: 'Captain America' },\n          { name: 'Thor' },\n        ]}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        <Iterate.Array path=\"/\">\n          <Field.String itemPath=\"/name\" />\n        </Iterate.Array>\n\n        <Iterate.ArrayPushButton\n          top=\"small\"\n          text=\"Add another element\"\n          path=\"/\"\n          pushValue={{}}\n        />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.ObjectElements) _missingMdxReference(\"Examples.ObjectElements\", true);\n  if (!Examples.PrimitiveElements) _missingMdxReference(\"Examples.PrimitiveElements\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Primitive elements\"\n    }), \"\\n\", _jsx(Examples.PrimitiveElements, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Object elements\"\n    }), \"\\n\", _jsx(Examples.ObjectElements, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import React, { useMemo, useCallback } from 'react'\nimport classnames from 'classnames'\nimport pointer from 'json-pointer'\nimport IterateElementContext from '../IterateElementContext'\nimport FieldBlock, { Props as FieldBlockProps } from '../../FieldBlock'\nimport { useFieldProps } from '../../hooks'\nimport {\n  FieldProps,\n  FieldHelpProps,\n  CustomErrorMessages,\n} from '../../types'\nimport { pickSpacingProps } from '../../../../components/flex/utils'\nimport {\n  BasicProps as FlexContainerProps,\n  pickFlexContainerProps,\n} from '../../../../components/flex/Container'\nimport Flex from '../../../../components/flex/Flex'\n\ninterface ErrorMessages extends CustomErrorMessages {\n  required?: string\n  schema?: string\n}\n\nexport type Props = FieldHelpProps &\n  FieldProps<unknown[], undefined, ErrorMessages> &\n  Omit<FieldBlockProps, 'children'> &\n  Omit<FlexContainerProps, 'children' | 'width'> & {\n    children:\n      | React.ReactNode\n      | ((value: any, index: number) => React.ReactNode)\n      | Array<\n          | React.ReactNode\n          | ((value: any, index: number) => React.ReactNode)\n        >\n  }\n\nfunction ArrayComponent(props: Props) {\n  const {\n    className,\n    layout = 'vertical',\n    placeholder,\n    label,\n    labelDescription,\n    path,\n    value: arrayValue,\n    info,\n    warning,\n    error,\n    emptyValue,\n    width,\n    handleChange,\n    children,\n  } = useFieldProps(props)\n\n  const elementData: {\n    elementValue: unknown\n    handleElementChange: (path: string, value: unknown) => void\n    handleRemoveElement: () => void\n  }[] = useMemo(() => {\n    return (arrayValue ?? []).map((elementValue, elementIndex) => ({\n      elementValue,\n      handleElementChange: (path, value) => {\n        const newArrayValue = structuredClone(arrayValue)\n        pointer.set(newArrayValue, path, value)\n        handleChange?.(newArrayValue)\n      },\n      handleRemoveElement: () => {\n        const newArrayValue = structuredClone(arrayValue)\n        newArrayValue.splice(elementIndex, 1)\n        handleChange?.(newArrayValue)\n      },\n    }))\n  }, [arrayValue, handleChange])\n\n  const handlePush = useCallback(\n    (element: unknown) => {\n      handleChange([...(arrayValue ?? []), element])\n    },\n    [arrayValue, handleChange]\n  )\n\n  return (\n    <FieldBlock\n      className={classnames('dnb-forms-field-number', className)}\n      layout={layout}\n      label={label}\n      labelDescription={labelDescription}\n      info={info}\n      warning={warning}\n      error={error}\n      width={width}\n      contentWidth={width !== false ? width : undefined}\n      {...pickSpacingProps(props)}\n    >\n      <Flex.Container\n        {...pickFlexContainerProps(props as FlexContainerProps, {\n          spacing: 'small',\n        })}\n      >\n        {arrayValue === emptyValue ? (\n          <em>{placeholder}</em>\n        ) : (\n          elementData.map(\n            (\n              { elementValue, handleElementChange, handleRemoveElement },\n              elementIndex\n            ) => {\n              return (\n                <IterateElementContext.Provider\n                  key={`element-${elementIndex}`}\n                  value={{\n                    index: elementIndex,\n                    value: elementValue,\n                    path,\n                    handleChange: handleElementChange,\n                    handleRemove: handleRemoveElement,\n                    handlePush,\n                  }}\n                >\n                  {Array.isArray(children)\n                    ? children.map((childElement) =>\n                        typeof childElement === 'function'\n                          ? childElement(elementValue, elementIndex)\n                          : childElement\n                      )\n                    : typeof children === 'function'\n                    ? children(elementValue, elementIndex)\n                    : children}\n                </IterateElementContext.Provider>\n              )\n            }\n          )\n        )}\n      </Flex.Container>\n    </FieldBlock>\n  )\n}\n\nArrayComponent._supportsSpacingProps = true\nexport default ArrayComponent\n","import React, { useCallback, useContext } from 'react'\nimport classnames from 'classnames'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/Button'\nimport IterateElementContext from '../IterateElementContext'\nimport { useFieldProps } from '../../hooks'\nimport {\n  DataValueReadWriteComponentProps,\n  omitDataValueReadWriteProps,\n} from '../../types'\n\nexport type Props = ButtonProps &\n  DataValueReadWriteComponentProps<unknown[]> & {\n    pushValue: unknown\n  }\n\nfunction ArrayPushButton(props: Props) {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { handlePush } = iterateElementContext ?? {}\n\n  const { pushValue, ...restProps } = props\n  const buttonProps = omitDataValueReadWriteProps(restProps)\n  const { value, handleChange, children } = useFieldProps(restProps)\n\n  if (value !== undefined && !Array.isArray(value)) {\n    throw new Error('ArrayPushButton received a non-array value.')\n  }\n\n  const handleClick = useCallback(() => {\n    if (handlePush) {\n      // Inside an Iterate element - make the change through the Iterate component\n      handlePush(pushValue)\n      return\n    }\n\n    // If not inside an iterate, it could still manipulate a source data set through useFieldProps\n    handleChange([...(value ?? []), pushValue])\n  }, [value, pushValue, handlePush, handleChange])\n\n  return (\n    <Button\n      className={classnames(\n        'dnb-forms-array-push-button',\n        props.className\n      )}\n      on_click={handleClick}\n      {...buttonProps}\n    >\n      {children}\n    </Button>\n  )\n}\n\nArrayPushButton._supportsSpacingProps = true\nexport default ArrayPushButton\n","import React, { useCallback, useContext } from 'react'\nimport classnames from 'classnames'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/Button'\nimport IterateElementContext from '../IterateElementContext'\nimport { useFieldProps } from '../../hooks'\nimport {\n  DataValueReadWriteComponentProps,\n  omitDataValueReadWriteProps,\n} from '../../types'\n\nexport type Props = ButtonProps &\n  DataValueReadWriteComponentProps<unknown[]>\n\nfunction ArrayRemoveElementButton(props: Props) {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { handleRemove } = iterateElementContext ?? {}\n\n  if (!iterateElementContext) {\n    throw new Error(\n      'ArrayRemoveElementButton must be inside an Iterate.Array component.'\n    )\n  }\n\n  const buttonProps = omitDataValueReadWriteProps(props)\n\n  const { children } = useFieldProps(props)\n\n  const handleClick = useCallback(() => {\n    handleRemove()\n  }, [handleRemove])\n\n  return (\n    <Button\n      className={classnames(\n        'dnb-forms-array-remove-element-button',\n        props.className\n      )}\n      on_click={handleClick}\n      {...buttonProps}\n    >\n      {children}\n    </Button>\n  )\n}\n\nArrayRemoveElementButton._supportsSpacingProps = true\nexport default ArrayRemoveElementButton\n"],"names":["PrimitiveElements","_jsx","ComponentBox","scope","Iterate","children","ObjectElements","_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error","ArrayComponent","className","layout","placeholder","label","labelDescription","path","value","arrayValue","info","warning","error","emptyValue","width","handleChange","useFieldProps","elementData","useMemo","map","elementValue","elementIndex","handleElementChange","newArrayValue","structuredClone","pointer","handleRemoveElement","splice","handlePush","useCallback","element","concat","_toConsumableArray","FieldBlock","classnames","contentWidth","undefined","pickSpacingProps","Flex","pickFlexContainerProps","spacing","_ref","IterateElementContext","Provider","index","handleRemove","Array","isArray","childElement","_supportsSpacingProps","ArrayPushButton","iterateElementContext","useContext","pushValue","restProps","buttonProps","omitDataValueReadWriteProps","handleClick","Button","on_click","ArrayRemoveElementButton"],"sourceRoot":""}