{"version":3,"file":"component---src-docs-uilib-extensions-forms-extended-features-steps-layout-steps-layout-mdx-76092f5828f4b9955173.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/StepsLayout/StepsLayout.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/StepsLayout/StepsLayout/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/StepsLayout/StepsLayout/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/SubmitIndicator/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/StepsLayout/StepsLayout/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/StepsContext.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/Step/Step.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/NextButton/NextButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/PreviousButton/PreviousButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/Buttons/Buttons.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/StepsLayout.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/index.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/extended-features/StepsLayout/StepsLayout/info';\nimport Demos from 'Docs/uilib/extensions/forms/extended-features/StepsLayout/StepsLayout/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.AsyncStepsLayout) _missingMdxReference(\"Examples.AsyncStepsLayout\", true);\n  if (!Examples.Default) _missingMdxReference(\"Examples.Default\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demo\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Basic usage\"\n    }), \"\\n\", _jsx(Examples.Default, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Async steps\"\n    }), \"\\n\", _jsx(Examples.AsyncStepsLayout, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"StepsLayout\"\n      }), \" is a wrapper component for showing forms with a StepIndicator for navigation between several steps.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import {\\n  StepsLayout,\\n  StepsContext,\\n  Form,\\n} from '@dnb/eufemia/extensions/forms'\\nrender(\\n  <StepsContext.Provider>\\n    <StepsLayout.Step>\\n      <Form.MainHeading>Heading</Form.MainHeading>\\n      <Card>\\n        <P>Contents</P>\\n      </Card>\\n      <StepsLayout.NextButton />\\n    </StepsLayout.Step>\\n  </StepsContext.Provider>,\\n)\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { Button, Card, Flex, FormLabel } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../../shared/tags/ComponentBox'\nimport { Field, FieldBlock, Form } from '@dnb/eufemia/src/extensions/forms'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      <Form.SubmitIndicator state=\"pending\" />\n    </ComponentBox>\n  )\n}\n\nexport const AsyncSubmitBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay}>\n            <Card stack>\n              <Field.String path=\"/myField\" label=\"Short label\" />\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AsyncChangeBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay} onChange={delay}>\n            <Card stack>\n              <Field.String\n                path=\"/myField1\"\n                label=\"Label (with async validation)\"\n                placeholder=\"Write something ...\"\n                validator={delay}\n              />\n              <FieldBlock width=\"medium\">\n                <Field.String\n                  path=\"/myField2\"\n                  width=\"stretch\"\n                  label=\"This is a long label\"\n                />\n              </FieldBlock>\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\ntype CreateRequestReturn = Promise<{ hasError: boolean; cancel?: boolean }>\n\nexport const createRequest = () => {\n  let timeout: NodeJS.Timeout | null\n  let resolvePromise: ((value?: unknown) => void) | undefined\n\n  const fn = (t: number): CreateRequestReturn => {\n    return new Promise((resolve) => {\n      resolvePromise = resolve\n      timeout = setTimeout(() => {\n        resolve({ hasError: false })\n      }, t)\n    })\n  }\n\n  fn.cancel = () => {\n    resolvePromise?.({ hasError: true })\n    clearTimeout(timeout)\n    timeout = null\n  }\n\n  return fn\n}\n\nexport const WithinOtherComponents = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Flex.Horizontal align=\"center\">\n          <Form.SubmitButton showIndicator />\n          <Button variant=\"secondary\" icon=\"chevron_right\">\n            Secondary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <Button variant=\"tertiary\">\n            Tertiary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <FormLabel>\n            Label\n            <Form.SubmitIndicator state=\"pending\" />\n          </FormLabel>\n        </Flex.Horizontal>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","import ComponentBox from '../../../../../../../shared/tags/ComponentBox'\nimport { Card, P } from '@dnb/eufemia/src'\nimport {\n  StepsLayout,\n  Form,\n  Field,\n  Value,\n} from '@dnb/eufemia/src/extensions/forms'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\nimport React from 'react'\nimport { createRequest } from '../../Form/SubmitIndicator/Examples'\n\nexport const Default = () => {\n  return (\n    <ComponentBox\n      scope={{ StepsLayout }}\n      data-visual-test=\"steps-layout-card-border\"\n    >\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n          streetName: 'Osloveien',\n          streetNr: 12,\n          postalCode: '1234',\n          city: 'Oslo',\n        }}\n      >\n        <StepsLayout>\n          <StepsLayout.Step title=\"Step 1\">\n            <Form.MainHeading>Heading</Form.MainHeading>\n            <Card>\n              <P>Contents</P>\n            </Card>\n            <Card>\n              <P>Contents</P>\n            </Card>\n            <StepsLayout.NextButton />\n          </StepsLayout.Step>\n\n          <StepsLayout.Step title=\"Step 2\">\n            <Form.MainHeading>Heading</Form.MainHeading>\n            <Card>\n              <P>Contents</P>\n            </Card>\n            <Form.ButtonRow>\n              <StepsLayout.PreviousButton />\n              <StepsLayout.NextButton />\n            </Form.ButtonRow>\n          </StepsLayout.Step>\n\n          <StepsLayout.Step title=\"Summary\">\n            <Form.MainHeading>Summary</Form.MainHeading>\n            <Card stack>\n              <Form.SubHeading>Deliver address</Form.SubHeading>\n\n              <Value.SummaryList layout=\"grid\">\n                <Value.String label=\"First name\" path=\"/firstName\" />\n                <Value.String label=\"Last name\" path=\"/lastName\" />\n\n                <Value.String label=\"Street\" path=\"/streetName\" />\n                <Value.Number label=\"Nr.\" path=\"/streetNr\" />\n\n                <Value.String label=\"Postalc.\" path=\"/postalCode\" />\n                <Value.String label=\"City\" path=\"/city\" />\n              </Value.SummaryList>\n            </Card>\n            <StepsLayout.PreviousButton />\n          </StepsLayout.Step>\n        </StepsLayout>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const AsyncStepsLayout = () => {\n  return (\n    <ComponentBox scope={{ StepsLayout, createRequest, debounceAsync }}>\n      {() => {\n        const MyForm = () => {\n          const onStepChange = React.useCallback(async (index, mode) => {\n            console.log('onStepChange', index)\n\n            if (mode === 'next') {\n              try {\n                const request = createRequest()\n                await request(1000) // Simulate a request\n              } catch (error) {\n                return error\n              }\n            }\n\n            // Optional, you can show a FormStatus at the bottom of the form\n            return { info: 'Info message: ' + index }\n          }, [])\n\n          const onSubmit = React.useCallback(async (data) => {\n            console.log('onSubmit', data)\n\n            try {\n              const request = createRequest()\n              await request(1000) // Simulate a request\n            } catch (error) {\n              return error\n            }\n\n            // Optional, you can show a FormStatus at the bottom of the form\n            return { warning: 'Warning message' }\n          }, [])\n\n          const validator = React.useCallback(async (value) => {\n            try {\n              const request = createRequest()\n              await request(1000) // Simulate a request\n            } catch (error) {\n              return error\n            }\n\n            if (value === 'invalid') {\n              return Error('Error message')\n            }\n          }, [])\n\n          const validator1 = debounceAsync(validator)\n          const validator2 = debounceAsync(validator)\n\n          return (\n            <Form.Handler onSubmit={onSubmit}>\n              <StepsLayout onStepChange={onStepChange} variant=\"drawer\">\n                <StepsLayout.Step title=\"Step 1\">\n                  <Card stack>\n                    <Field.String\n                      label=\"Required field with async validator\"\n                      validator={validator1}\n                      path=\"/field1\"\n                      required\n                    />\n                    <Field.String\n                      label=\"Field with async validator\"\n                      validator={validator2}\n                      path=\"/field2\"\n                    />\n                  </Card>\n                  <Form.ButtonRow>\n                    <StepsLayout.PreviousButton />\n                    <StepsLayout.NextButton />\n                  </Form.ButtonRow>\n                </StepsLayout.Step>\n\n                <StepsLayout.Step title=\"Step 2\">\n                  <Form.MainHeading>Heading</Form.MainHeading>\n                  <Card>\n                    <P>Contents of step 2</P>\n                  </Card>\n                  <Form.ButtonRow>\n                    <StepsLayout.PreviousButton />\n                    <Form.SubmitButton />\n                  </Form.ButtonRow>\n                </StepsLayout.Step>\n              </StepsLayout>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n","import React from 'react'\n\ninterface StepsContextState {\n  activeIndex: number\n  handlePrevious: () => void\n  handleNext: () => void\n}\n\nconst StepsContext = React.createContext<StepsContextState | undefined>(\n  undefined\n)\n\nexport default StepsContext\n","import React, { useContext } from 'react'\nimport classnames from 'classnames'\nimport { ComponentProps } from '../../types'\nimport {\n  Props as FlexContainerProps,\n  pickFlexContainerProps,\n} from '../../../../components/flex/Container'\nimport StepsContext from '../StepsContext'\nimport Flex from '../../../../components/flex/Flex'\n\nexport type Props = ComponentProps &\n  FlexContainerProps & {\n    index?: number\n    title?: string\n  }\n\nfunction Step(props: Props) {\n  const { className, index, children } = props\n  const stepsContext = useContext(StepsContext)\n\n  if (stepsContext?.activeIndex !== index) {\n    // Another step is active\n    return null\n  }\n\n  return (\n    <Flex.Container\n      className={classnames('dnb-forms-step', className)}\n      direction=\"vertical\"\n      {...pickFlexContainerProps(props)}\n    >\n      {children}\n    </Flex.Container>\n  )\n}\n\nStep._supportsSpacingProps = true\nexport default Step\n","import React, { useContext } from 'react'\nimport classnames from 'classnames'\nimport type { ComponentProps } from '../../types'\nimport { ButtonProps } from '../../../../components/button/Button'\nimport SharedContext from '../../../../shared/Context'\nimport StepsContext from '../StepsContext'\nimport ButtonRow from '../../Form/ButtonRow'\nimport SubmitButton from '../../Form/SubmitButton'\n\nexport type Props = ComponentProps & ButtonProps\n\nfunction NextButton(props: Props) {\n  const sharedContext = useContext(SharedContext)\n  const {\n    className,\n    variant = 'primary',\n    icon_position = 'right',\n    icon = 'chevron_right',\n    children = sharedContext?.translation.Forms.stepNext,\n  } = props\n  const stepsContext = useContext(StepsContext)\n\n  return (\n    <ButtonRow>\n      {/* Use SubmitButton to inherit the indicator functionality */}\n      <SubmitButton\n        type=\"button\"\n        className={classnames('dnb-forms-next-button', className)}\n        onClick={stepsContext?.handleNext}\n        variant={variant}\n        icon_position={icon_position}\n        icon={icon}\n        {...props}\n      >\n        {children}\n      </SubmitButton>\n    </ButtonRow>\n  )\n}\n\nNextButton._supportsSpacingProps = true\nexport default NextButton\n","import React, { useContext } from 'react'\nimport classnames from 'classnames'\nimport type { ComponentProps } from '../../types'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/button/Button'\nimport SharedContext from '../../../../shared/Context'\nimport StepsContext from '../StepsContext'\nimport ButtonRow from '../../Form/ButtonRow'\n\nexport type Props = ComponentProps & ButtonProps\n\nfunction PreviousButton(props: Props) {\n  const sharedContext = useContext(SharedContext)\n  const {\n    className,\n    variant = 'tertiary',\n    icon_position = 'left',\n    icon = 'chevron_left',\n    children = sharedContext?.translation.Forms.stepPrevious,\n  } = props\n  const stepsContext = useContext(StepsContext)\n\n  const params: Props = {}\n  if (stepsContext?.activeIndex === 0) {\n    params.disabled = true\n  }\n\n  return (\n    <ButtonRow>\n      <Button\n        className={classnames('dnb-forms-previous-button', className)}\n        onClick={stepsContext?.handlePrevious}\n        variant={variant}\n        icon_position={icon_position}\n        icon={icon}\n        {...params}\n        {...props}\n      >\n        {children}\n      </Button>\n    </ButtonRow>\n  )\n}\n\nPreviousButton._supportsSpacingProps = true\nexport default PreviousButton\n","import React from 'react'\nimport classnames from 'classnames'\nimport { ComponentProps } from '../../types'\nimport ButtonRow from '../../Form/ButtonRow'\nimport NextButton from '../NextButton'\nimport PreviousButton from '../PreviousButton'\n\nexport type Props = ComponentProps & {\n  children?: string\n}\n\nfunction Buttons(props: Props) {\n  const { className } = props\n  return (\n    <ButtonRow\n      className={classnames('dnb-forms-buttons', className)}\n      {...props}\n    >\n      <PreviousButton />\n      <NextButton />\n    </ButtonRow>\n  )\n}\n\nButtons._supportsSpacingProps = true\nexport default Buttons\n","import React, { useContext, useCallback, useRef, useReducer } from 'react'\nimport classnames from 'classnames'\nimport { Space, StepIndicator } from '../../../components'\nimport { warn } from '../../../shared/component-helper'\nimport { isAsync } from '../../../shared/helpers/isAsync'\nimport useId from '../../../shared/helpers/useId'\nimport DataContext from '../DataContext/Context'\nimport Step, { Props as StepProps } from './Step'\nimport StepsContext from './StepsContext'\nimport NextButton from './NextButton'\nimport PreviousButton from './PreviousButton'\nimport Buttons from './Buttons'\nimport Provider from '../DataContext/Provider'\nimport { ComponentProps, EventReturnWithStateObject } from '../types'\n\nexport type Props = ComponentProps & {\n  id?: string\n  mode?: 'static' | 'strict' | 'loose'\n  scrollTopOnStepChange?: boolean\n  initialActiveIndex?: number\n  onStepChange?: (\n    index: number,\n    mode: 'previous' | 'next'\n  ) =>\n    | EventReturnWithStateObject\n    | void\n    | Promise<EventReturnWithStateObject | void>\n  children: React.ReactNode\n  variant?: 'sidebar' | 'drawer'\n  noAnimation?: boolean\n  sidebarId?: string\n}\n\nfunction StepsLayout(props: Props) {\n  const {\n    className,\n    id: _id,\n    mode = 'strict',\n    scrollTopOnStepChange,\n    initialActiveIndex = 0,\n    onStepChange,\n    children,\n    noAnimation = true,\n    variant = 'sidebar',\n    sidebarId,\n    ...rest\n  } = props\n  const dataContext = useContext(DataContext)\n  const {\n    hasContext,\n    setFormState,\n    handleSubmitCall,\n    setShowAllErrors,\n    showAllErrors,\n    scrollToTop,\n  } = dataContext\n\n  const id = useId(_id)\n  const [, forceUpdate] = useReducer(() => ({}), {})\n  const activeIndexRef = useRef<number>(initialActiveIndex)\n  const errorOnStepRef = useRef<Record<number, boolean>>({})\n\n  // Store the current state of showAllErrors\n  errorOnStepRef.current[activeIndexRef.current] = showAllErrors\n\n  const callOnStepChange = useCallback(\n    async (index: number, mode: 'previous' | 'next') => {\n      if (isAsync(onStepChange)) {\n        return await onStepChange(index, mode)\n      }\n\n      return onStepChange?.(index, mode)\n    },\n    [onStepChange]\n  )\n\n  const handlePrevious = useCallback(() => {\n    handleSubmitCall({\n      skipFieldValidation: true,\n      skipErrorCheck: true,\n      enableAsyncBehaviour: isAsync(onStepChange),\n      onSubmit: async () => {\n        const result = await callOnStepChange(\n          activeIndexRef.current - 1,\n          'previous'\n        )\n\n        // Hide async indicator\n        setFormState('abort')\n\n        if (!(result instanceof Error)) {\n          activeIndexRef.current = activeIndexRef.current - 1\n          forceUpdate()\n        }\n\n        if (scrollTopOnStepChange) {\n          scrollToTop()\n        }\n\n        return result\n      },\n    })\n  }, [\n    callOnStepChange,\n    handleSubmitCall,\n    onStepChange,\n    scrollToTop,\n    scrollTopOnStepChange,\n    setFormState,\n  ])\n\n  const handleNext = useCallback(() => {\n    handleSubmitCall({\n      enableAsyncBehaviour: isAsync(onStepChange),\n      onSubmit: async () => {\n        const result = await callOnStepChange(\n          activeIndexRef.current + 1,\n          'next'\n        )\n\n        // Hide async indicator\n        setFormState('abort')\n\n        // Set the showAllErrors to the step we got to\n        setShowAllErrors(\n          errorOnStepRef.current[activeIndexRef.current + 1]\n        )\n\n        if (!(result instanceof Error)) {\n          activeIndexRef.current = activeIndexRef.current + 1\n          forceUpdate()\n        }\n\n        if (scrollTopOnStepChange) {\n          scrollToTop()\n        }\n\n        return result\n      },\n    })\n  }, [\n    callOnStepChange,\n    handleSubmitCall,\n    onStepChange,\n    scrollToTop,\n    scrollTopOnStepChange,\n    setFormState,\n    setShowAllErrors,\n  ])\n\n  const stepIndicatorData = React.Children.map(children, (child) => {\n    if (!React.isValidElement(child) || child.type !== Step) {\n      throw new Error('Only Step can be children of StepsLayout')\n    }\n    return child.props.title ?? 'Title missing'\n  }) as string[]\n\n  const handleChange = useCallback(\n    ({ current_step }) => {\n      activeIndexRef.current = current_step\n\n      // Set the showAllErrors to the step we got to\n      setShowAllErrors(errorOnStepRef.current[current_step])\n\n      forceUpdate()\n    },\n    [setShowAllErrors]\n  )\n\n  if (!hasContext) {\n    warn('You may wrap StepsLayout in Form.Handler')\n    return (\n      <Provider>\n        <StepsLayout {...props} id={id} />\n      </Provider>\n    )\n  }\n\n  return (\n    <StepsContext.Provider\n      value={{\n        activeIndex: activeIndexRef.current,\n        handlePrevious,\n        handleNext,\n      }}\n    >\n      <Space\n        className={classnames(\n          'dnb-forms-steps-layout',\n          variant === 'drawer' && 'dnb-forms-steps-layout--drawer',\n          className\n        )}\n        {...rest}\n      >\n        <aside className=\"dnb-forms-steps-layout__sidebar\">\n          <StepIndicator.Sidebar sidebar_id={id} />\n          <StepIndicator\n            bottom\n            current_step={activeIndexRef.current}\n            data={stepIndicatorData}\n            mode={mode}\n            no_animation={noAnimation}\n            on_change={handleChange}\n            sidebar_id={\n              variant === 'drawer' && !sidebarId\n                ? ''\n                : sidebarId\n                ? sidebarId\n                : id\n            }\n          />\n        </aside>\n        <div className=\"dnb-forms-steps-layout__contents\">\n          {React.Children.map(children, (child, i) => {\n            if (React.isValidElement(child) && child.type === Step) {\n              return React.cloneElement(\n                child as React.ReactElement<StepProps>,\n                {\n                  index: i,\n                }\n              )\n            }\n            return child\n          })}\n        </div>\n      </Space>\n    </StepsContext.Provider>\n  )\n}\n\nStepsLayout._supportsSpacingProps = true\n\nStepsLayout.Step = Step\nStepsLayout.NextButton = NextButton\nStepsLayout.PreviousButton = PreviousButton\nStepsLayout.Buttons = Buttons\n\nexport default StepsLayout\n","import StepsLayout from './StepsLayout'\nexport { default as StepsContext } from './StepsContext'\n\nexport default StepsLayout\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","_components","h2","h3","Examples","_missingMdxReference","id","component","Error","p","code","pre","className","Default","ComponentBox","AsyncSubmitBehavior","scope","createRequest","debounceAsync","noInline","AsyncChangeBehavior","timeout","resolvePromise","fn","t","Promise","resolve","setTimeout","hasError","cancel","_resolvePromise","clearTimeout","WithinOtherComponents","StepsLayout","AsyncStepsLayout","StepsContext","React","undefined","Step","index","stepsContext","useContext","activeIndex","Flex","classnames","direction","pickFlexContainerProps","_supportsSpacingProps","NextButton","sharedContext","SharedContext","variant","icon_position","icon","translation","Forms","stepNext","ButtonRow","SubmitButton","type","onClick","handleNext","PreviousButton","stepPrevious","params","disabled","Button","handlePrevious","Buttons","_id","mode","scrollTopOnStepChange","initialActiveIndex","onStepChange","noAnimation","sidebarId","rest","dataContext","DataContext","hasContext","setFormState","handleSubmitCall","setShowAllErrors","showAllErrors","scrollToTop","useId","forceUpdate","useReducer","activeIndexRef","useRef","errorOnStepRef","current","callOnStepChange","useCallback","async","isAsync","skipFieldValidation","skipErrorCheck","enableAsyncBehaviour","onSubmit","result","stepIndicatorData","map","child","_child$props$title","title","handleChange","_ref","current_step","Provider","value","Space","StepIndicator","Sidebar","sidebar_id","bottom","data","no_animation","on_change","i","warn"],"sourceRoot":""}