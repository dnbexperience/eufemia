{"version":3,"file":"component---src-docs-uilib-extensions-forms-extended-features-value-mdx-194d8e366586283ea69d.js","mappings":"4MAKA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,KAAM,OACNC,EAAG,IACHC,IAAK,MACLC,GAAI,OACHC,EAAAA,EAAAA,MAAsBV,EAAMW,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKd,EAAYG,GAAI,CAC9BU,SAAU,UACR,MAAMF,EAAAA,EAAAA,MAAMX,EAAYI,EAAG,CAC7BS,SAAU,CAAC,6VAA6VC,EAAAA,EAAAA,KAAKd,EAAYK,KAAM,CAC7XQ,SAAU,UACR,0CAA0CC,EAAAA,EAAAA,KAAKd,EAAYM,EAAG,CAChES,KAAM,yDACNF,SAAU,iBACR,kEAAkEC,EAAAA,EAAAA,KAAKd,EAAYK,KAAM,CAC3FQ,SAAU,SACR,2FACF,MAAMC,EAAAA,EAAAA,KAAKd,EAAYO,IAAK,CAC9BM,UAAUC,EAAAA,EAAAA,KAAKd,EAAYK,KAAM,CAC/BW,UAAW,eACXH,SAAU,8DAEV,MAAMC,EAAAA,EAAAA,KAAKd,EAAYQ,GAAI,CAC7BK,SAAU,qCACR,MAAMF,EAAAA,EAAAA,MAAMX,EAAYI,EAAG,CAC7BS,SAAU,CAAC,QAAQC,EAAAA,EAAAA,KAAKd,EAAYK,KAAM,CACxCQ,SAAU,aACR,kRACF,MAAMC,EAAAA,EAAAA,KAAKd,EAAYQ,GAAI,CAC7BK,SAAU,oBACR,MAAMC,EAAAA,EAAAA,KAAKG,EAAAA,QAAyB,CAAC,GAAI,MAAMH,EAAAA,EAAAA,KAAKd,EAAYQ,GAAI,CACtEK,SAAU,uBACR,MAAMC,EAAAA,EAAAA,KAAKI,EAAAA,QAA4B,CAAC,KAEhD,CAOA,UANA,SAAoBnB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOoB,QAASC,GAAanB,OAAOC,OAAO,CAAC,GAAGO,EAAAA,EAAAA,MAAsBV,EAAMW,YAC3E,OAAOU,GAAYN,EAAAA,EAAAA,KAAKM,EAAWnB,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1Dc,UAAUC,EAAAA,EAAAA,KAAKhB,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,0GC7Ce,SAASkB,IACtB,MACEI,QAAQ,MAAEC,KACRC,EAAAA,EAAAA,gBAAe,cAmCnB,OAAOT,EAAAA,EAAAA,KAACU,EAAAA,EAAoB,CAACF,MAAOA,GACtC,C,0GCvCe,SAASJ,IACtB,MACEG,QAAQ,MAAEC,KACRC,EAAAA,EAAAA,gBAAe,aAmCnB,OAAOT,EAAAA,EAAAA,KAACU,EAAAA,EAAoB,CAACF,MAAOA,GACtC,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Value.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Value/ListBaseValueComponents.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Value/ListFeatureValueComponents.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport ListBaseValueComponents from './Value/ListBaseValueComponents';\nimport ListFeatureValueComponents from './Value/ListFeatureValueComponents';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Value\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Many screens summarize values from the data set statically, such as a final screen where the user can review the data they have entered before submitting it to the bank. To make displaying such data easier, a number of Value components have been created. These function similarly as field components. That is, they are data-driven, can be given \", _jsx(_components.code, {\n        children: \"value\"\n      }), \"-props, or connected to a surrounding \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/extended-features/Form/Handler\",\n        children: \"Form.Handler\"\n      }), \" by pointing to the relevant value they are to display with a \", _jsx(_components.code, {\n        children: \"path\"\n      }), \"-prop. They are also available with more functional variants for given types of data.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Value } from '@dnb/eufemia/extensions/forms'\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Creating custom value components\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useValue\"\n      }), \" hook that is used in all existing value components is exported to make it possible to create custom value components that have the same properties and follow the same flow as the standard components, without the need to recreate all the basic state handling features.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Base components\"\n    }), \"\\n\", _jsx(ListBaseValueComponents, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Feature components\"\n    }), \"\\n\", _jsx(ListFeatureValueComponents, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport ListSummaryFromEdges from '../../../../../../shared/parts/ListSummaryFromEdges'\n\nexport default function ListBaseValueComponents() {\n  const {\n    allMdx: { edges },\n  } = useStaticQuery(graphql`\n    {\n      allMdx(\n        filter: {\n          frontmatter: {\n            title: { ne: null }\n            draft: { ne: true }\n            componentType: { regex: \"/base/\" }\n          }\n          internal: {\n            contentFilePath: {\n              glob: \"**/uilib/extensions/forms/extended-features/Value/**/*\"\n            }\n          }\n        }\n        sort: [\n          { frontmatter: { order: ASC } }\n          { frontmatter: { title: ASC } }\n        ]\n      ) {\n        edges {\n          node {\n            fields {\n              slug\n            }\n            frontmatter {\n              title\n              description\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  return <ListSummaryFromEdges edges={edges} />\n}\n","import React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport ListSummaryFromEdges from '../../../../../../shared/parts/ListSummaryFromEdges'\n\nexport default function ListFeatureValueComponents() {\n  const {\n    allMdx: { edges },\n  } = useStaticQuery(graphql`\n    {\n      allMdx(\n        filter: {\n          frontmatter: {\n            title: { ne: null }\n            draft: { ne: true }\n            componentType: { regex: \"/feature/\" }\n          }\n          internal: {\n            contentFilePath: {\n              glob: \"**/uilib/extensions/forms/extended-features/Value/**/*\"\n            }\n          }\n        }\n        sort: [\n          { frontmatter: { order: ASC } }\n          { frontmatter: { title: ASC } }\n        ]\n      ) {\n        edges {\n          node {\n            fields {\n              slug\n            }\n            frontmatter {\n              title\n              description\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  return <ListSummaryFromEdges edges={edges} />\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","code","a","pre","h2","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","className","ListBaseValueComponents","ListFeatureValueComponents","wrapper","MDXLayout","allMdx","edges","useStaticQuery","ListSummaryFromEdges"],"sourceRoot":""}