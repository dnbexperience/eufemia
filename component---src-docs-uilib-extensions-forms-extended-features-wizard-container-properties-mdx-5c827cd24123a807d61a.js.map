{"version":3,"file":"component---src-docs-uilib-extensions-forms-extended-features-wizard-container-properties-mdx-5c827cd24123a807d61a.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Wizard/Container/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Wizard/Container/WizardContainerDocs.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {WizardContainerProperties} from '@dnb/eufemia/src/extensions/forms/Wizard/Container/WizardContainerDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: WizardContainerProperties\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Code, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\nimport Copy from '../tags/Copy'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n}) {\n  const keys = Object.keys(props)\n  const tableRows = Object.entries(props).map(\n    ([key, { type, doc, status }]) => {\n      if (omit && omit.includes(key)) {\n        return null\n      }\n\n      if (\n        typeof type === 'string' &&\n        String(type).includes('{valueType}')\n      ) {\n        type = valueType as string\n      }\n\n      return (\n        <Tr key={key}>\n          <Td>\n            <Copy>\n              <Code>{formatName(camelCase ? toCamelCase(key) : key)}</Code>\n            </Copy>\n          </Td>\n          <Td>\n            {Array.isArray(type) ? (\n              type\n                .map((t) => (\n                  <Copy key={t}>\n                    <Code>{t}</Code>\n                  </Copy>\n                ))\n                .reduce((prev, curr) => (\n                  <>\n                    {prev} or {curr}\n                  </>\n                ))\n            ) : (\n              <Copy>\n                <Code>{type}</Code>\n              </Copy>\n            )}\n          </Td>\n          <Td>\n            <em>({status})</em>{' '}\n            <ReactMarkdown components={components}>\n              {camelCase ? convertToCamelCase(doc, keys) : doc}\n            </ReactMarkdown>\n          </Td>\n        </Tr>\n      )\n    },\n  )\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nfunction formatName(name: string): React.ReactNode | string {\n  if (name.includes('/')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../../shared/types'\n\nexport const WizardContainerProperties: PropertiesTableProps = {\n  initialActiveIndex: {\n    doc: 'What step should show initially (defaults to 0 for the first one).',\n    type: 'number',\n    status: 'optional',\n  },\n  mode: {\n    doc: 'How to show the wizard. Inherited from StepIndicator. Defaults to `strict`.',\n    type: 'string',\n    status: 'optional',\n  },\n  variant: {\n    doc: 'Sets the StepIndicator to be either `sidebar` or `drawer`. Defaults to `sidebar`.',\n    type: 'string',\n    status: 'optional',\n  },\n  noAnimation: {\n    doc: 'Determines if the height animation for step items and the drawer button will run. Inherited from StepIndicator. Defaults to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  sidebarId: {\n    doc: 'Sets the id for `<StepIndicator.Sidebar />` Inherited from StepIndicator.',\n    type: 'string',\n    status: 'required',\n  },\n  scrollTopOnStepChange: {\n    doc: 'True for the UI to scroll to the top of the page when navigating between wizard steps.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  children: {\n    doc: 'Contents (Step components).',\n    type: 'React.Node',\n    status: 'required',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const WizardContainerEvents: PropertiesTableProps = {\n  onStepChange: {\n    doc: 'Will be called when the user navigate to a different step, with step `index` as the first argument and `previous` or `next` (string) as the second argument. When an async function is provided, it will show an indicator on the submit button during the form submission. All form elements will be disabled during the submit. The indicator will be shown for minimum 1 second. Related Form.Handler props: `minimumAsyncBehaviorTime` and `asyncSubmitTimeout`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","WizardContainerProperties","wrapper","MDXLayout","basicComponents","p","StyledTable","_styled","Table","target","name","styles","_ref","valueType","camelCase","omit","keys","tableRows","entries","map","_ref2","key","type","doc","status","includes","String","Tr","Td","Copy","Code","formatName","toCamelCase","Array","isArray","t","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp","initialActiveIndex","mode","variant","noAnimation","sidebarId","scrollTopOnStepChange","WizardContainerEvents","onStepChange"],"sourceRoot":""}