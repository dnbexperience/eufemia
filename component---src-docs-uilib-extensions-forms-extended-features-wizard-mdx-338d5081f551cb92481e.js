"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[65330,159],{24503:function(n,e,t){t.r(e);var r=t(52322),a=t(45392),o=t(68197),i=t(30934);function s(n){const e=Object.assign({h1:"h1",p:"p",code:"code",a:"a",pre:"pre",h2:"h2"},(0,a.ah)(),n.components);return o||l("Examples",!1),o.Default||l("Examples.Default",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{children:"Wizard layouts"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"Wizard"})," is a set of components for showing forms with a ",(0,r.jsx)(e.a,{href:"/uilib/components/step-indicator/",children:"StepIndicator"})," for navigation between several wizard. It also includes components for navigating between wizard."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"import { Wizard } from '@dnb/eufemia/extensions/forms'\n"})}),"\n",(0,r.jsx)(i.default,{}),"\n",(0,r.jsx)(e.h2,{children:"Demo"}),"\n",(0,r.jsx)(o.Default,{})]})}function l(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(s,n)})):s(n)}},17897:function(n,e,t){t.r(e),t.d(e,{AsyncChangeBehavior:function(){return l},AsyncSubmitBehavior:function(){return s},Default:function(){return i},WithinOtherComponents:function(){return c},createRequest:function(){return d}});var r=t(99587),a=t(52750),o=t(52322);const i=()=>(0,o.jsx)(r.Z,{children:'<Form.SubmitIndicator state="pending" />\n'}),s=()=>(0,o.jsx)(r.Z,{scope:{createRequest:d,debounceAsync:a.k},noInline:!0,children:'const delay = debounceAsync(async function () {\n  try {\n    const request = createRequest()\n    await request(1000) // Simulate a request\n  } catch (error) {\n    return error\n  }\n})\nrender(\n  <Form.Handler onSubmit={delay}>\n    <Card stack>\n      <Field.String path="/myField" label="Short label" />\n      <Form.ButtonRow>\n        <Form.SubmitButton />\n        <Button variant="tertiary">Cancel</Button>\n      </Form.ButtonRow>\n    </Card>\n  </Form.Handler>,\n)\n'}),l=()=>(0,o.jsx)(r.Z,{scope:{createRequest:d,debounceAsync:a.k},noInline:!0,children:'const delay = debounceAsync(async function () {\n  try {\n    const request = createRequest()\n    await request(1000) // Simulate a request\n  } catch (error) {\n    return error\n  }\n})\nrender(\n  <Form.Handler onSubmit={delay} onChange={delay}>\n    <Card stack>\n      <Field.String\n        path="/myField1"\n        label="Label (with async validation)"\n        placeholder="Write something ..."\n        validator={delay}\n      />\n      <FieldBlock width="medium">\n        <Field.String\n          path="/myField2"\n          width="stretch"\n          label="This is a long label"\n        />\n      </FieldBlock>\n      <Form.ButtonRow>\n        <Form.SubmitButton />\n        <Button variant="tertiary">Cancel</Button>\n      </Form.ButtonRow>\n    </Card>\n  </Form.Handler>,\n)\n'}),d=()=>{let n,e;const t=t=>new Promise((r=>{e=r,n=setTimeout((()=>{r({hasError:!1})}),t)}));return t.cancel=()=>{var t;null===(t=e)||void 0===t||t({hasError:!0}),clearTimeout(n),n=null},t},c=()=>(0,o.jsx)(r.Z,{children:'<Form.Handler>\n  <Flex.Horizontal align="center">\n    <Form.SubmitButton showIndicator />\n    <Button variant="secondary" icon="chevron_right">\n      Secondary\n      <Form.SubmitIndicator state="pending" />\n    </Button>\n    <Button variant="tertiary">\n      Tertiary\n      <Form.SubmitIndicator state="pending" />\n    </Button>\n    <FormLabel>\n      Label\n      <Form.SubmitIndicator state="pending" />\n    </FormLabel>\n  </Flex.Horizontal>\n</Form.Handler>\n'})},68197:function(n,e,t){t.r(e),t.d(e,{AsyncWizardContainer:function(){return l},Default:function(){return s}});t(2784);var r=t(99587),a=t(52750),o=t(17897),i=t(52322);const s=()=>(0,i.jsx)(r.Z,{"data-visual-test":"wizard-layout-card-border",noInline:!0,children:'const initialData = {\n  firstName: \'John\',\n  lastName: \'Doe\',\n  streetName: \'Osloveien\',\n  streetNr: 12,\n  postalCode: \'1234\',\n  city: \'Oslo\',\n}\nconst Step1 = () => (\n  <Wizard.Step title="Step 1">\n    <Form.MainHeading>Heading</Form.MainHeading>\n    <Card stack>\n      <P>Contents</P>\n    </Card>\n    <Card stack>\n      <P>Contents</P>\n    </Card>\n\n    <Wizard.Buttons />\n  </Wizard.Step>\n)\nconst Step2 = () => (\n  <Wizard.Step title="Step 2">\n    <Form.MainHeading>Heading</Form.MainHeading>\n    <Card stack>\n      <P>Contents</P>\n    </Card>\n    <Card stack>\n      <P>Contents</P>\n    </Card>\n\n    <Wizard.Buttons />\n  </Wizard.Step>\n)\nconst Summary = () => (\n  <Wizard.Step title="Summary">\n    <Form.MainHeading>Summary</Form.MainHeading>\n    <Card stack>\n      <Form.SubHeading>Deliver address</Form.SubHeading>\n\n      <Value.SummaryList layout="grid">\n        <Value.String label="First name" path="/firstName" />\n        <Value.String label="Last name" path="/lastName" />\n\n        <Value.String label="Street" path="/streetName" />\n        <Value.Number label="Nr." path="/streetNr" />\n\n        <Value.String label="Postalc." path="/postalCode" />\n        <Value.String label="City" path="/city" />\n      </Value.SummaryList>\n    </Card>\n\n    <Form.ButtonRow>\n      <Wizard.Buttons />\n      <Form.SubmitButton />\n    </Form.ButtonRow>\n  </Wizard.Step>\n)\n\n// Can be an async function, in case you need to make some async stuff\nconst onStepChange = async (step, mode) => {\n  if (mode === \'next\') {\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n  }\n  console.log(\'onStepChange\', step, mode)\n}\n\n// Can be an async function, in case you need to make some async stuff\nconst onSubmit = async (data) => {\n  await new Promise((resolve) => setTimeout(resolve, 2000))\n  console.log(\'onSubmit\', data)\n}\nconst MyForm = () => (\n  <Form.Handler data={initialData} onSubmit={onSubmit}>\n    <Wizard.Container onStepChange={onStepChange}>\n      <Step1 />\n      <Step2 />\n      <Summary />\n    </Wizard.Container>\n  </Form.Handler>\n)\nrender(<MyForm />)\n'}),l=()=>(0,i.jsx)(r.Z,{scope:{createRequest:o.createRequest,debounceAsync:a.k},noInline:!0,children:"const MyForm = () => {\n  const onStepChange = React.useCallback(async (index, mode) => {\n    console.log('onStepChange', index)\n    if (mode === 'next') {\n      try {\n        const request = createRequest()\n        await request(1000) // Simulate a request\n      } catch (error) {\n        return error\n      }\n    }\n\n    // Optional, you can show a FormStatus at the bottom of the form\n    return {\n      info: 'Info message: ' + index,\n    }\n  }, [])\n  const onSubmit = React.useCallback(async (data) => {\n    console.log('onSubmit', data)\n    try {\n      const request = createRequest()\n      await request(1000) // Simulate a request\n    } catch (error) {\n      return error\n    }\n\n    // Optional, you can show a FormStatus at the bottom of the form\n    return {\n      warning: 'Warning message',\n    }\n  }, [])\n  const validator = React.useCallback(async (value) => {\n    try {\n      const request = createRequest()\n      await request(1000) // Simulate a request\n    } catch (error) {\n      return error\n    }\n    if (value === 'invalid') {\n      return Error('Error message')\n    }\n  }, [])\n  const validator1 = debounceAsync(validator)\n  const validator2 = debounceAsync(validator)\n  const Step1 = () => {\n    return (\n      <Wizard.Step title=\"Step 1\">\n        <Card stack>\n          <Field.String\n            label=\"Required field with async validator\"\n            validator={validator1}\n            path=\"/field1\"\n            required\n          />\n          <Field.String\n            label=\"Field with async validator\"\n            validator={validator2}\n            path=\"/field2\"\n          />\n        </Card>\n\n        <Wizard.Buttons />\n      </Wizard.Step>\n    )\n  }\n  const Step2 = () => {\n    return (\n      <Wizard.Step title=\"Step 2\">\n        <Form.MainHeading>Heading</Form.MainHeading>\n\n        <Card stack>\n          <P>Contents of step 2</P>\n        </Card>\n\n        <Form.ButtonRow>\n          <Wizard.Buttons />\n          <Form.SubmitButton />\n        </Form.ButtonRow>\n      </Wizard.Step>\n    )\n  }\n  return (\n    <Form.Handler onSubmit={onSubmit}>\n      <Wizard.Container onStepChange={onStepChange}>\n        <Step1 />\n        <Step2 />\n      </Wizard.Container>\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n"})},30934:function(n,e,t){t.r(e),t.d(e,{default:function(){return i}});var r=t(68270),a=t(77491),o=t(52322);function i(n){const{allMdx:{edges:e}}=(0,r.useStaticQuery)("2478229292");return(0,o.jsx)(a.Z,{edges:e,...n})}},77491:function(n,e,t){t.d(e,{Z:function(){return m}});var r=t(2784),a=t(42351),o=t(65359),i=t(43095),s=t(79254),l=t(68514),d=t(61185),c=t(1864),u=t(52322);function m(n){let{edges:e,level:t,size:m,description:h=null,returnListItems:p=!1,...S}=n;const g=p?a.Z:r.Fragment;(0,l.TW)(t||2);const b=e.map(((n,e)=>{let{node:{frontmatter:{title:r,description:a},fields:{slug:l}}}=n;return(0,u.jsx)(g,{children:(0,u.jsx)(b,{})},e);function b(){return p?(0,u.jsxs)(o.Z,{children:[(0,u.jsx)(s.Z,{href:"/"+l,children:r}),(0,u.jsx)("br",{})]}):(0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(i.Z,{level:t||2,size:m,useSlug:"/"+l,title:r,...S,children:(0,u.jsx)(s.Z,{href:"/"+l,children:r})}),(null!==h?h:a)&&(0,u.jsx)(d.D,{components:c.L,children:null!==h?h:a})]})}}));return(0,u.jsx)(u.Fragment,{children:b})}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-extended-features-wizard-mdx-338d5081f551cb92481e.js.map