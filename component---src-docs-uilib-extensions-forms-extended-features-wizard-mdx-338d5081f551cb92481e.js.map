{"version":3,"file":"component---src-docs-uilib-extensions-forms-extended-features-wizard-mdx-338d5081f551cb92481e.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Wizard.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Form/SubmitIndicator/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Wizard/Container/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/extended-features/Wizard/ListWizardComponents.tsx","webpack://dnb-design-system-portal/./src/shared/parts/ListSummaryFromEdges.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from 'Docs/uilib/extensions/forms/extended-features/Wizard/Container/Examples';\nimport ListWizardComponents from 'Docs/uilib/extensions/forms/extended-features/Wizard/ListWizardComponents';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.Default) _missingMdxReference(\"Examples.Default\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Wizard layouts\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Wizard\"\n      }), \" is a set of components for showing forms with a \", _jsx(_components.a, {\n        href: \"/uilib/components/step-indicator/\",\n        children: \"StepIndicator\"\n      }), \" for navigation between several wizard. It also includes components for navigating between wizard.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Wizard } from '@dnb/eufemia/extensions/forms'\\n\"\n      })\n    }), \"\\n\", _jsx(ListWizardComponents, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Demo\"\n    }), \"\\n\", _jsx(Examples.Default, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import { Button, Card, Flex, FormLabel } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../../shared/tags/ComponentBox'\nimport { Field, FieldBlock, Form } from '@dnb/eufemia/src/extensions/forms'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      <Form.SubmitIndicator state=\"pending\" />\n    </ComponentBox>\n  )\n}\n\nexport const AsyncSubmitBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay}>\n            <Card stack>\n              <Field.String path=\"/myField\" label=\"Short label\" />\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AsyncChangeBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay} onChange={delay}>\n            <Card stack>\n              <Field.String\n                path=\"/myField1\"\n                label=\"Label (with async validation)\"\n                placeholder=\"Write something ...\"\n                validator={delay}\n              />\n              <FieldBlock width=\"medium\">\n                <Field.String\n                  path=\"/myField2\"\n                  width=\"stretch\"\n                  label=\"This is a long label\"\n                />\n              </FieldBlock>\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\ntype CreateRequestReturn = Promise<{ hasError: boolean; cancel?: boolean }>\n\nexport const createRequest = () => {\n  let timeout: NodeJS.Timeout | null\n  let resolvePromise: ((value?: unknown) => void) | undefined\n\n  const fn = (t: number): CreateRequestReturn => {\n    return new Promise((resolve) => {\n      resolvePromise = resolve\n      timeout = setTimeout(() => {\n        resolve({ hasError: false })\n      }, t)\n    })\n  }\n\n  fn.cancel = () => {\n    resolvePromise?.({ hasError: true })\n    clearTimeout(timeout)\n    timeout = null\n  }\n\n  return fn\n}\n\nexport const WithinOtherComponents = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Flex.Horizontal align=\"center\">\n          <Form.SubmitButton showIndicator />\n          <Button variant=\"secondary\" icon=\"chevron_right\">\n            Secondary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <Button variant=\"tertiary\">\n            Tertiary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <FormLabel>\n            Label\n            <Form.SubmitIndicator state=\"pending\" />\n          </FormLabel>\n        </Flex.Horizontal>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","import React from 'react'\nimport ComponentBox from '../../../../../../../shared/tags/ComponentBox'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\nimport { createRequest } from '../../Form/SubmitIndicator/Examples'\nimport {\n  Form,\n  Field,\n  Value,\n  Wizard,\n} from '@dnb/eufemia/src/extensions/forms'\nimport { Card, P } from '@dnb/eufemia/src'\n\nexport const Default = () => {\n  return (\n    <ComponentBox data-visual-test=\"wizard-layout-card-border\">\n      {() => {\n        const initialData = {\n          firstName: 'John',\n          lastName: 'Doe',\n          streetName: 'Osloveien',\n          streetNr: 12,\n          postalCode: '1234',\n          city: 'Oslo',\n        }\n\n        const Step1 = () => (\n          <Wizard.Step title=\"Step 1\">\n            <Form.MainHeading>Heading</Form.MainHeading>\n            <Card stack>\n              <P>Contents</P>\n            </Card>\n            <Card stack>\n              <P>Contents</P>\n            </Card>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n        )\n\n        const Step2 = () => (\n          <Wizard.Step title=\"Step 2\">\n            <Form.MainHeading>Heading</Form.MainHeading>\n            <Card stack>\n              <P>Contents</P>\n            </Card>\n            <Card stack>\n              <P>Contents</P>\n            </Card>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n        )\n\n        const Summary = () => (\n          <Wizard.Step title=\"Summary\">\n            <Form.MainHeading>Summary</Form.MainHeading>\n            <Card stack>\n              <Form.SubHeading>Deliver address</Form.SubHeading>\n\n              <Value.SummaryList layout=\"grid\">\n                <Value.String label=\"First name\" path=\"/firstName\" />\n                <Value.String label=\"Last name\" path=\"/lastName\" />\n\n                <Value.String label=\"Street\" path=\"/streetName\" />\n                <Value.Number label=\"Nr.\" path=\"/streetNr\" />\n\n                <Value.String label=\"Postalc.\" path=\"/postalCode\" />\n                <Value.String label=\"City\" path=\"/city\" />\n              </Value.SummaryList>\n            </Card>\n\n            <Form.ButtonRow>\n              <Wizard.Buttons />\n              <Form.SubmitButton />\n            </Form.ButtonRow>\n          </Wizard.Step>\n        )\n\n        // Can be an async function, in case you need to make some async stuff\n        const onStepChange = async (step, mode) => {\n          if (mode === 'next') {\n            await new Promise((resolve) => setTimeout(resolve, 1000))\n          }\n          console.log('onStepChange', step, mode)\n        }\n\n        // Can be an async function, in case you need to make some async stuff\n        const onSubmit = async (data) => {\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n          console.log('onSubmit', data)\n        }\n\n        const MyForm = () => (\n          <Form.Handler data={initialData} onSubmit={onSubmit}>\n            <Wizard.Container onStepChange={onStepChange}>\n              <Step1 />\n              <Step2 />\n              <Summary />\n            </Wizard.Container>\n          </Form.Handler>\n        )\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AsyncWizardContainer = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const MyForm = () => {\n          const onStepChange = React.useCallback(async (index, mode) => {\n            console.log('onStepChange', index)\n\n            if (mode === 'next') {\n              try {\n                const request = createRequest()\n                await request(1000) // Simulate a request\n              } catch (error) {\n                return error\n              }\n            }\n\n            // Optional, you can show a FormStatus at the bottom of the form\n            return { info: 'Info message: ' + index }\n          }, [])\n\n          const onSubmit = React.useCallback(async (data) => {\n            console.log('onSubmit', data)\n\n            try {\n              const request = createRequest()\n              await request(1000) // Simulate a request\n            } catch (error) {\n              return error\n            }\n\n            // Optional, you can show a FormStatus at the bottom of the form\n            return { warning: 'Warning message' }\n          }, [])\n\n          const validator = React.useCallback(async (value) => {\n            try {\n              const request = createRequest()\n              await request(1000) // Simulate a request\n            } catch (error) {\n              return error\n            }\n\n            if (value === 'invalid') {\n              return Error('Error message')\n            }\n          }, [])\n\n          const validator1 = debounceAsync(validator)\n          const validator2 = debounceAsync(validator)\n\n          const Step1 = () => {\n            return (\n              <Wizard.Step title=\"Step 1\">\n                <Card stack>\n                  <Field.String\n                    label=\"Required field with async validator\"\n                    validator={validator1}\n                    path=\"/field1\"\n                    required\n                  />\n                  <Field.String\n                    label=\"Field with async validator\"\n                    validator={validator2}\n                    path=\"/field2\"\n                  />\n                </Card>\n\n                <Wizard.Buttons />\n              </Wizard.Step>\n            )\n          }\n\n          const Step2 = () => {\n            return (\n              <Wizard.Step title=\"Step 2\">\n                <Form.MainHeading>Heading</Form.MainHeading>\n\n                <Card stack>\n                  <P>Contents of step 2</P>\n                </Card>\n\n                <Form.ButtonRow>\n                  <Wizard.Buttons />\n                  <Form.SubmitButton />\n                </Form.ButtonRow>\n              </Wizard.Step>\n            )\n          }\n\n          return (\n            <Form.Handler onSubmit={onSubmit}>\n              <Wizard.Container onStepChange={onStepChange}>\n                <Step1 />\n                <Step2 />\n              </Wizard.Container>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n","import React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport ListSummaryFromEdges from '../../../../../../shared/parts/ListSummaryFromEdges'\n\nexport default function ListWizardComponents(props) {\n  const {\n    allMdx: { edges },\n  } = useStaticQuery(graphql`\n    {\n      allMdx(\n        filter: {\n          frontmatter: { title: { ne: null }, draft: { ne: true } }\n          internal: {\n            contentFilePath: {\n              glob: \"**/uilib/extensions/forms/extended-features/Wizard/**/*\"\n            }\n          }\n        }\n        sort: [\n          { frontmatter: { order: ASC } }\n          { frontmatter: { title: ASC } }\n        ]\n      ) {\n        edges {\n          node {\n            fields {\n              slug\n            }\n            frontmatter {\n              title\n              description\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  return <ListSummaryFromEdges edges={edges} {...props} />\n}\n","import React from 'react'\nimport { Ul, Li } from '@dnb/eufemia/src'\nimport AutoLinkHeader from '../tags/AutoLinkHeader'\nimport Anchor from '../tags/Anchor'\nimport {\n  HeadingSize,\n  resetLevels,\n} from '@dnb/eufemia/src/components/Heading'\nimport ReactMarkdown from 'react-markdown'\nimport { basicComponents } from '../../shared/tags'\nimport { SpacingProps } from '@dnb/eufemia/src/shared/types'\n\nimport type {\n  HeadingLevel,\n  InternalHeadingLevel,\n} from '@dnb/eufemia/src/components/Heading'\n\ntype ListEdge = {\n  node: {\n    frontmatter: {\n      title: string\n      description?: string\n      order?: number\n    }\n    fields: {\n      slug: string\n    }\n  }\n}\nexport type ListEdges = Array<ListEdge>\ntype ListSummaryFromEdgesProps = {\n  edges: ListEdges\n  level?: HeadingLevel\n  size?: HeadingSize\n  description?: string\n  returnListItems?: boolean\n} & SpacingProps\n\nexport default function ListSummaryFromEdges({\n  edges,\n  level = undefined,\n  size = undefined,\n  description: description = null,\n  returnListItems = false,\n  ...props\n}: ListSummaryFromEdgesProps) {\n  const Wrapper = returnListItems ? Ul : React.Fragment\n\n  resetLevels((level || 2) as InternalHeadingLevel)\n\n  const jsx = edges.map(\n    (\n      {\n        node: {\n          frontmatter: { title, description: fmDescription },\n          fields: { slug },\n        },\n      },\n      i,\n    ) => {\n      return (\n        <Wrapper key={i}>\n          <Title />\n        </Wrapper>\n      )\n\n      function Title() {\n        if (returnListItems) {\n          return (\n            <Li>\n              <Anchor href={'/' + slug}>{title}</Anchor>\n              <br />\n            </Li>\n          )\n        }\n\n        return (\n          <>\n            <AutoLinkHeader\n              level={level || 2}\n              size={size}\n              useSlug={'/' + slug}\n              title={title}\n              {...props}\n            >\n              <Anchor href={'/' + slug}>{title}</Anchor>\n            </AutoLinkHeader>\n            {(description !== null ? description : fmDescription) && (\n              <ReactMarkdown components={basicComponents}>\n                {description !== null ? description : fmDescription}\n              </ReactMarkdown>\n            )}\n          </>\n        )\n      }\n    },\n  )\n\n  return <>{jsx}</>\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","code","a","pre","h2","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","children","_jsx","href","className","ListWizardComponents","id","component","Error","wrapper","MDXLayout","Default","ComponentBox","AsyncSubmitBehavior","scope","createRequest","debounceAsync","noInline","AsyncChangeBehavior","timeout","resolvePromise","fn","t","Promise","resolve","setTimeout","hasError","cancel","_resolvePromise","clearTimeout","WithinOtherComponents","AsyncWizardContainer","allMdx","edges","useStaticQuery","ListSummaryFromEdges","_ref","level","size","description","returnListItems","Wrapper","Ul","React","resetLevels","jsx","map","_ref2","i","node","frontmatter","title","fmDescription","fields","slug","Title","Li","Anchor","AutoLinkHeader","useSlug","ReactMarkdown","basicComponents"],"sourceRoot":""}