"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[15364,36377,65255],{38197:function(n,e,a){a.r(e);var i=a(31085),r=a(71184);function o(n){const e=Object.assign({h2:"h2",p:"p",code:"code",a:"a",pre:"pre",h3:"h3"},(0,r.R)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:"Description"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"Field.BankAccountNumber"})," is a wrapper component for the ",(0,i.jsx)(e.a,{href:"/uilib/extensions/forms/base-fields/String",children:"input of strings"}),", with user experience tailored for bank account values."]}),"\n",(0,i.jsxs)(e.p,{children:["This field is meant for Norwegian bank account numbers, and therefor takes a 11-digit string as a value. A Norwegian bank account number can have a leading zero, which is why this value is a string and not a number. In addition, we validate ",(0,i.jsx)(e.code,{children:"0000 00 00000"})," as invalid.\nMore info can be found at ",(0,i.jsx)(e.a,{href:"https://no.wikipedia.org/wiki/Kontonummer",children:"Wikipedia"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:"import { Field } from '@dnb/eufemia/extensions/forms'\nrender(<Field.BankAccountNumber />)\n"})}),"\n",(0,i.jsxs)(e.p,{children:["There is a corresponding ",(0,i.jsx)(e.a,{href:"/uilib/extensions/forms/Value/BankAccountNumber",children:"Value.BankAccountNumber"})," component."]}),"\n",(0,i.jsx)(e.h2,{children:"Validators"}),"\n",(0,i.jsx)(e.h3,{children:"Internal validators exposed"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"Field.BankAccountNumber"})," expose the ",(0,i.jsx)(e.code,{children:"bankAccountNumberValidator"})," validator through its ",(0,i.jsx)(e.code,{children:"onChangeValidator"})," and ",(0,i.jsx)(e.code,{children:"onBlurValidator"})," property, take a look at ",(0,i.jsx)(e.a,{href:"/uilib/extensions/forms/feature-fields/BankAccountNumber/demos/#extend-validation-with-custom-validation-function",children:"this demo"}),".\nThe ",(0,i.jsx)(e.code,{children:"bankAccountNumberValidator"})," validator, validates if the bank account number provided is a ",(0,i.jsx)(e.a,{href:"https://no.wikipedia.org/wiki/Kontonummer",children:"Norwegian bank account number"})," or not."]})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,r.R)(),n.components);return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(o,n)})):o(n)}},66412:function(n,e,a){a.r(e);var i=a(31085),r=a(71184),o=a(38197),t=a(82938);function l(n){return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.default,{}),"\n",(0,i.jsx)(t.default,{})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,r.R)(),n.components);return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(l,n)})):l()}},82938:function(n,e,a){a.r(e),a.d(e,{default:function(){return g}});var i={};a.r(i),a.d(i,{Disabled:function(){return x},Empty:function(){return l},Label:function(){return d},LabelAndValue:function(){return u},OmitMask:function(){return s},Placeholder:function(){return c},ValidationExtendValidator:function(){return p},ValidationRequired:function(){return b},WithError:function(){return m},WithHelp:function(){return h}});var r=a(31085),o=a(71184),t=a(15924);const l=()=>(0,r.jsx)(t.A,{children:"<Field.BankAccountNumber\n  onChange={(value) => console.log('onChange', value)}\n/>\n"}),s=()=>(0,r.jsx)(t.A,{children:"<Field.BankAccountNumber\n  onChange={(value) => console.log('onChange', value)}\n  omitMask\n/>\n"}),c=()=>(0,r.jsx)(t.A,{children:"<Field.BankAccountNumber\n  placeholder=\"Enter 11 digits...\"\n  onChange={(value) => console.log('onChange', value)}\n/>\n"}),d=()=>(0,r.jsx)(t.A,{children:"<Field.BankAccountNumber\n  label=\"Label text\"\n  onChange={(value) => console.log('onChange', value)}\n/>\n"}),u=()=>(0,r.jsx)(t.A,{children:'<Field.BankAccountNumber\n  label="Label text"\n  value="20001234567"\n  onChange={(value) => console.log(\'onChange\', value)}\n/>\n'}),h=()=>(0,r.jsx)(t.A,{children:"<Field.BankAccountNumber\n  label=\"Label text\"\n  value=\"20001234567\"\n  help={{\n    title: 'Help is available',\n    content:\n      'The real point is that we all need help somewhere along lifeâ€™s path whether we think we will or not. And, if you are the one giving and helping, just remember this: no matter what happens later, you will always be secure in the fact knowing that you have remained strong and true to assist those that need your help.',\n  }}\n  onChange={(value) => console.log('onChange', value)}\n/>\n"}),x=()=>(0,r.jsx)(t.A,{children:'<Field.BankAccountNumber\n  value="20001234567"\n  label="Label text"\n  onChange={(value) => console.log(\'onChange\', value)}\n  disabled\n/>\n'}),m=()=>(0,r.jsx)(t.A,{children:"<Field.BankAccountNumber\n  value=\"007\"\n  label=\"Label text\"\n  onChange={(value) => console.log('onChange', value)}\n  error={new Error('This is what is wrong...')}\n/>\n"}),b=()=>(0,r.jsx)(t.A,{children:'<Field.BankAccountNumber\n  value="20001234567"\n  label="Label text"\n  onChange={(value) => console.log(\'onChange\', value)}\n  required\n/>\n'}),p=()=>(0,r.jsx)(t.A,{noInline:!0,children:"const firstDigitIs1Validator = (value: string) => {\n  if (value.substring(0, 1) !== '1') {\n    return new Error('First digit is not 1')\n  }\n}\nconst myValidator = (value, { validators }) => {\n  const { bankAccountNumberValidator } = validators\n  return [bankAccountNumberValidator, firstDigitIs1Validator]\n}\nrender(\n  <Field.BankAccountNumber\n    required\n    value=\"65845125621\"\n    onBlurValidator={myValidator}\n    validateInitially\n  />,\n)\n"});function j(n){const e=Object.assign({h2:"h2",h3:"h3",p:"p",a:"a",code:"code"},(0,o.R)(),n.components);return i||f("Examples",!1),x||f("Examples.Disabled",!0),l||f("Examples.Empty",!0),d||f("Examples.Label",!0),u||f("Examples.LabelAndValue",!0),s||f("Examples.OmitMask",!0),c||f("Examples.Placeholder",!0),p||f("Examples.ValidationExtendValidator",!0),b||f("Examples.ValidationRequired",!0),m||f("Examples.WithError",!0),h||f("Examples.WithHelp",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:"Demos"}),"\n",(0,r.jsx)(e.h3,{children:"Empty"}),"\n",(0,r.jsx)(l,{}),"\n",(0,r.jsx)(e.h3,{children:"Omit mask"}),"\n",(0,r.jsx)(s,{}),"\n",(0,r.jsx)(e.h3,{children:"Placeholder"}),"\n",(0,r.jsx)(c,{}),"\n",(0,r.jsx)(e.h3,{children:"Label"}),"\n",(0,r.jsx)(d,{}),"\n",(0,r.jsx)(e.h3,{children:"Label and value"}),"\n",(0,r.jsx)(u,{}),"\n",(0,r.jsx)(e.h3,{children:"With help"}),"\n",(0,r.jsx)(h,{}),"\n",(0,r.jsx)(e.h3,{children:"Disabled"}),"\n",(0,r.jsx)(x,{}),"\n",(0,r.jsx)(e.h3,{children:"Error"}),"\n",(0,r.jsx)(m,{}),"\n",(0,r.jsx)(e.h3,{children:"Validation - Required"}),"\n",(0,r.jsx)(b,{}),"\n",(0,r.jsx)(e.h3,{children:"Extend validation with custom validation function"}),"\n",(0,r.jsxs)(e.p,{children:["You can ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/create-component/useFieldProps/info/#validators",children:"extend the existing validation"})," (",(0,r.jsx)(e.code,{children:"bankAccountNumberValidator"}),") with your own validation function."]}),"\n",(0,r.jsx)(p,{})]})}var g=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.R)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(j,n)})):j(n)};function f(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-feature-fields-bank-account-number-mdx-937f8bad5b833a47d439.js.map