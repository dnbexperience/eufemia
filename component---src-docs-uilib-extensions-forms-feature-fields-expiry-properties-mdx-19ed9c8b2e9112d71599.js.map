{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-expiry-properties-mdx-19ed9c8b2e9112d71599.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/Expiry/ExpiryDocs.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/Expiry/properties.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/input/InputDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueWritePropsDocs.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../../../shared/types'\nimport { inputProperties } from '../../../../components/input/InputDocs'\n\nexport const ExpiryProperties: PropertiesTableProps = {\n  size: {\n    ...inputProperties.size,\n    doc: `${inputProperties.size.doc} Consider rather setting field sizes with [Form.Appearance](/uilib/extensions/forms/Form/Appearance/).`,\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport TranslationsTable from 'dnb-design-system-portal/src/shared/parts/TranslationsTable';\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {FieldProperties} from '@dnb/eufemia/src/extensions/forms/Field/FieldDocs';\nimport {ExpiryProperties} from '@dnb/eufemia/src/extensions/forms/Field/Expiry/ExpiryDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field-specific properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: ExpiryProperties\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"General properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: FieldProperties\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Translations\"\n    }), \"\\n\", _jsx(TranslationsTable, {\n      localeKey: ['Expiry', 'Field']\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const inputProperties: PropertiesTableProps = {\n  value: {\n    doc: 'The content value of the input.',\n    type: 'string',\n    status: 'optional',\n  },\n  align: {\n    doc: 'Defines the text alignment of the input. Can be `left`, `right` or `center`. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Prepends the Form Label component. If no ID is provided, a random ID is created.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  label_sr_only: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  label_direction: {\n    doc: 'Use `label_direction=\"vertical\"` to change the label layout direction. Defaults to `horizontal`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status: {\n    doc: 'Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'object',\n    status: 'optional',\n  },\n  placeholder: {\n    doc: 'The placeholder which shows up once the input value is empty.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon: {\n    doc: 'Icon to show before or after the input / placeholder. Can be either a string defining a primary icon or a Component using an SVG icon of either 16px or 24px.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  icon_position: {\n    doc: 'Defines the position of icon inside the input. Set to `left` or `right`. Defaults to `left` if not set.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'The icon size of the icon shows. Defaults to `medium`.',\n    type: 'string',\n    status: 'optional',\n  },\n  keep_placeholder: {\n    doc: 'Set to `true` in case the `placeholder` has to be kept during focus. By default, the placeholder disappears on focus.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  input_class: {\n    doc: 'In case we have to set a custom input class.',\n    type: 'string',\n    status: 'optional',\n  },\n  type: {\n    doc: 'Choose between `text`, `number`, `email`, `password`, `url`, `tel` and `search`.',\n    type: 'string',\n    status: 'optional',\n  },\n  autocomplete: {\n    doc: 'Defaults to `off`. Set to `on` or any of [allowed `attributes`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete). Keep in mind, 1. you may have to define a `name`, 2. have the input as a descendant of a `<form>` element, 3. and have a submit button inside the form.',\n    type: 'string',\n    status: 'optional',\n  },\n  submit_button_title: {\n    doc: 'Title attribute for the search icon. Only relevant if search input.',\n    type: 'string',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the input more than the label. you can also send in a React component, so it gets wrapped inside the Input component.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  size: {\n    doc: 'The sizes you can choose is `default` (2rem), `medium` (2.5rem) and `large` (3rem) are supported component sizes. Defaults to `default` / `null`. Also, if you define a number like `size={2}` then it will be forwarded as the input element attribute.',\n    type: ['string', 'number'],\n    status: 'optional',\n  },\n  selectall: {\n    doc: 'If set to `true`, then the whole input value gets selected on the entry focus. A second click will place the cursor on the wanted position.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  clear: {\n    doc: 'If set to `true`, then a clear button will be shown which lets the user clear any given input value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  stretch: {\n    doc: 'If set to `true`, then the input field will be 100% in `width`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  input_attributes: {\n    doc: 'Provide the Input element with any attributes by using an Object `input_attributes={{size:\\'2\\'}}` or a JSON Object `input_attributes=\\'{\"size\":\"2\"}\\'`. **NB:** Keep in mind, that also every not listed component property will be sent along and set as an Input element attribute.',\n    type: 'object',\n    status: 'optional',\n  },\n  input_state: {\n    doc: 'Defines a custom visual state of the input. Use it only if you have to simulate a custom state. Currently are three statuses `virgin` , `focus` and `dirty`. Defaults to `null`.',\n    type: 'string',\n    status: 'optional',\n  },\n  submit_element: {\n    doc: 'Accepts a React element which will show up like the \"submit button\" would do on `type=\"search\"`.',\n    type: ['string', 'React.Element'],\n    status: 'optional',\n  },\n  inner_ref: {\n    doc: 'By providing a React.ref we can get the internally used input element (DOM). E.g. `inner_ref={myRef}` by using `React.createRef()` or `React.useRef()`.',\n    type: 'React.Ref',\n    status: 'optional',\n  },\n  input_element: {\n    doc: 'By providing a new component we can change the internally used element. Also supports a string only, like `input_element=\"input\"`.',\n    type: ['string', 'React.Element'],\n    status: 'internal',\n  },\n  inner_element: {\n    doc: 'By providing a new component to be rendered inside the \"shell\" – we can add a freely customizable internal element. Used by the Autocomplete component.',\n    type: ['string', 'React.Element'],\n    status: 'internal',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { FieldBlockSharedProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  DataValueWritePropsEvents,\n  DataValueWritePropsProperties,\n} from '../hooks/DataValueWritePropsDocs'\n\nexport const FieldProperties: PropertiesTableProps = {\n  ...DataValueWritePropsProperties,\n  ...FieldBlockSharedProperties,\n}\n\nexport const FieldEvents: PropertiesTableProps = {\n  ...DataValueWritePropsEvents,\n}\n\nexport const getFieldEventsWithTypes = (\n  valueType: { type: string; optional?: boolean } = undefined,\n  additionalArgsType: { type: string; optional?: boolean } = undefined\n): PropertiesTableProps => {\n  const value = valueType\n    ? `value${valueType.optional ? '?' : ''}: ${valueType.type}`\n    : 'value'\n\n  const add = additionalArgsType\n    ? `, additionalArgs${additionalArgsType.optional ? '?' : ''}: ${\n        additionalArgsType.type\n      }`\n    : ''\n\n  const typeString = `(${value}${add}) => void`\n\n  return {\n    ...FieldEvents,\n    onChange: {\n      ...FieldEvents.onChange,\n      type: typeString,\n    },\n    onFocus: {\n      ...FieldEvents.onFocus,\n      type: typeString,\n    },\n    onBlur: {\n      ...FieldEvents.onBlur,\n      type: typeString,\n    },\n  }\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const FieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  help: {\n    doc: 'Provide help content for the field using `title` and `content` as a string or React.Node. Additionally, you can set `open` to `true` to display the inline help, set the `breakout` property to `false` to disable the breakout of the inline help content, or use `renderAs` set to `dialog` to render the content in a [Dialog](/uilib/components/dialog/) (recommended for larger amounts of content).',\n    type: 'object',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  layoutOptions: {\n    doc: 'Use this to set additional options for the `horizontal` layout. E.g. `{ width: \"medium\" }`. You can also use a custom width `{number}rem`. Instead of a width, you can use a min/max width. E.g. `{ minWidth: \"6rem\", maxWidth: \"12rem\" }`.',\n    type: 'object',\n    status: 'optional',\n  },\n  width: {\n    doc: 'Will set the width for the whole block. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: 'Will set the width for its contents. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\n/** For internal use only */\nexport const FieldBlockProperties: PropertiesTableProps = {\n  ...FieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading sizes](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  labelHeight: {\n    doc: 'Defines the height of an component (size prop), so the label can be aligned correctly. Can be `default`, `small`, `medium`, `large`.',\n    type: 'string',\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  disableStatusSummary: {\n    doc: 'Use `true` to disable the error summary.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'string',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const DataValueWritePropsProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: \"Info message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  warning: {\n    doc: \"Warning message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  error: {\n    doc: \"Error message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['Error', 'FormError', 'Array<Error | FormError>', 'function'],\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set to `true`, the field will give an error if the value fails the required validation. When set to `false`, the field will not be required, but will add a \"(optional)\" suffix to the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSuffix: {\n    doc: 'Will append an additional text to the label, like \"(optional)\". When using `inheritLabel`, the suffix will not be inherited. NB: The visual appearance of the `labelSuffix` may change in the future.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set to `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set to `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateContinuously: {\n    doc: 'Set to `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages.',\n    type: 'object',\n    status: 'optional',\n  },\n  onChangeValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered on every change done by the user. The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered when the user leaves a field (e.g., blurring a text input or closing a dropdown). The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'Transforms the value before it gets forwarded to the form data object (context) or returned as the `onChange` value parameter. The first parameter is the internal value. Some fields to support a second parameter, like the SelectCountry, where the country object is given.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const DataValueWritePropsEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).\",\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n}\n"],"names":["ExpiryProperties","size","inputProperties","doc","_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","FieldProperties","TranslationsTable","localeKey","wrapper","MDXLayout","value","type","status","align","label","label_sr_only","label_direction","status_state","status_props","globalStatus","placeholder","icon","icon_position","icon_size","keep_placeholder","input_class","autocomplete","submit_button_title","suffix","selectall","clear","stretch","skeleton","input_attributes","input_state","submit_element","inner_ref","input_element","inner_element","Td","Th","Tr","DataValueWritePropsProperties","FieldBlockSharedProperties","FieldEvents","DataValueWritePropsEvents","getFieldEventsWithTypes","valueType","additionalArgsType","undefined","typeString","optional","onChange","onFocus","onBlur","labelDescription","labelSrOnly","help","layout","layoutOptions","width","contentWidth","FieldBlockProperties","labelSize","labelHeight","asFieldset","disableStatusSummary","composition","disabled","defaultValue","path","info","warning","error","emptyValue","required","labelSuffix","schema","validateInitially","validateUnchanged","validateContinuously","errorMessages","onChangeValidator","onBlurValidator","transformIn","transformOut"],"sourceRoot":""}