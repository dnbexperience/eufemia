"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[16211],{26078:function(e,t,n){n.r(t);var s=n(52322),o=n(45392),i=n(85179),r=n(9670),a=n(88231);function l(e){const t=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code"},(0,o.a)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{children:"Events"}),"\n",(0,s.jsx)(i.ZP,{props:r.hK}),"\n",(0,s.jsx)(t.h2,{children:"Password visibility events"}),"\n",(0,s.jsx)(i.ZP,{props:a.r}),"\n",(0,s.jsx)(t.h3,{children:"Argument value"}),"\n",(0,s.jsxs)(t.p,{children:["The password visibility event values comes in the shape of an ",(0,s.jsx)(t.code,{children:"React.MouseEvent<HTMLButtonElement>"}),", that contains a ",(0,s.jsx)(t.code,{children:"value"})," property with the ",(0,s.jsx)(t.code,{children:"input"})," value."]})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,o.a)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(l,e)})):l(e)}},6210:function(e,t,n){var s=n(30600);t.Z=s.Z},64223:function(e,t,n){var s=n(91859);t.Z=s.Z},41676:function(e,t,n){var s=n(76711);t.Z=s.Z},88231:function(e,t,n){n.d(t,{r:function(){return o},z:function(){return s}});const s={...n(82700).t,pattern:{doc:'Validation based on regex pattern for the number field e.g. `pattern="w{8}d{4}"`.',type:"string",status:"optional"},size:{doc:'The sizes you can choose is small (1.5rem), default (2rem), medium (2.5rem) and large (3rem) are supported component sizes. Defaults to default / null. Also, if you define a number like size="2" then it will be forwarded as the input element attribute. Consider rather setting field sizes with [Form.Appearance](/uilib/extensions/forms/Form/Appearance/).',type:["string","number"],status:"optional"},innerRef:{doc:"`ElementRef` passed on to the password `input` element.",type:"React.RefObject",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},o={onShowPassword:{doc:"Will be called when the user toggles the password to be visible.",type:"function",status:"optional"},onHidePassword:{doc:"Will be called when the user toggles the password to be hidden.",type:"function",status:"optional"}}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-feature-fields-more-fields-password-events-mdx-3eeeb9cd4c83bd385446.js.map