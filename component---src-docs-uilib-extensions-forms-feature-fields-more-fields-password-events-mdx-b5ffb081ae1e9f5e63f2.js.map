{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-more-fields-password-events-mdx-b5ffb081ae1e9f5e63f2.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/more-fields/Password/events.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/Password/PasswordDocs.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueWritePropsDocs.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {FieldEvents} from '@dnb/eufemia/src/extensions/forms/Field/FieldDocs';\nimport {PasswordEvents} from '@dnb/eufemia/src/extensions/forms/Field/Password/PasswordDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Events\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: FieldEvents\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Password visibility events\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: PasswordEvents\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Argument value\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The password visibility event values comes in the shape of an \", _jsx(_components.code, {\n        children: \"React.MouseEvent<HTMLButtonElement>\"\n      }), \", that contains a \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" property with the \", _jsx(_components.code, {\n        children: \"input\"\n      }), \" value.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { FieldBlockSharedProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  DataValueWritePropsEvents,\n  DataValueWritePropsProperties,\n} from '../hooks/DataValueWritePropsDocs'\n\nexport const FieldProperties: PropertiesTableProps = {\n  ...DataValueWritePropsProperties,\n  ...FieldBlockSharedProperties,\n}\n\nexport const FieldEvents: PropertiesTableProps = {\n  ...DataValueWritePropsEvents,\n}\n\nexport const getFieldEventsWithTypes = (\n  valueType: { type: string; optional?: boolean } = undefined,\n  additionalArgsType: { type: string; optional?: boolean } = undefined\n): PropertiesTableProps => {\n  const value = valueType\n    ? `value${valueType.optional ? '?' : ''}: ${valueType.type}`\n    : 'value'\n\n  const add = additionalArgsType\n    ? `, additionalArgs${additionalArgsType.optional ? '?' : ''}: ${\n        additionalArgsType.type\n      }`\n    : ''\n\n  const typeString = `(${value}${add}) => void`\n\n  return {\n    ...FieldEvents,\n    onChange: {\n      ...FieldEvents.onChange,\n      type: typeString,\n    },\n    onFocus: {\n      ...FieldEvents.onFocus,\n      type: typeString,\n    },\n    onBlur: {\n      ...FieldEvents.onBlur,\n      type: typeString,\n    },\n  }\n}\n","import { PropertiesTableProps } from '../../../../shared/types'\n\nexport const PasswordProperties: PropertiesTableProps = {\n  pattern: {\n    doc: 'Validation based on regex pattern for the number field e.g. `pattern=\"w{8}d{4}\"`.',\n    type: 'string',\n    status: 'optional',\n  },\n  size: {\n    doc: 'The sizes you can choose is small (1.5rem), default (2rem), medium (2.5rem) and large (3rem) are supported component sizes. Defaults to default / null. Also, if you define a number like size=\"2\" then it will be forwarded as the input element attribute. Consider rather setting field sizes with [Form.Appearance](/uilib/extensions/forms/Form/Appearance/).',\n    type: ['string', 'number'],\n    status: 'optional',\n  },\n  innerRef: {\n    doc: '`ElementRef` passed on to the password `input` element.',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const PasswordEvents: PropertiesTableProps = {\n  onShowPassword: {\n    doc: 'Will be called when the user toggles the password to be visible.',\n    type: 'function',\n    status: 'optional',\n  },\n  onHidePassword: {\n    doc: 'Will be called when the user toggles the password to be hidden.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const FieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescriptionInline: {\n    doc: 'If true, the labelDescription will be displayed on the same line as the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSize: {\n    doc: 'Define the font-size of the label based on the [font-size](/uilib/typography/font-size/) table.',\n    type: ['medium', 'large'],\n    status: 'optional',\n  },\n  help: {\n    doc: 'Provide help content for the field using `title` and `content` as a string or React.Node. Additionally, you can set `open` to `true` to display the inline help, set the `breakout` property to `false` to disable the breakout of the inline help content, or use `renderAs` set to `dialog` to render the content in a [Dialog](/uilib/components/dialog/) (recommended for larger amounts of content).',\n    type: 'object',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  layoutOptions: {\n    doc: 'Use this to set additional options for the `horizontal` layout. E.g. `{ width: \"medium\" }`. You can also use a custom width `{number}rem`. Instead of a width, you can use a min/max width. E.g. `{ minWidth: \"6rem\", maxWidth: \"12rem\" }`.',\n    type: 'object',\n    status: 'optional',\n  },\n  width: {\n    doc: 'Will set the width for the whole block. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: 'Will set the width for its contents. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\n/** For internal use only */\nexport const FieldBlockProperties: PropertiesTableProps = {\n  ...FieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading sizes](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  labelHeight: {\n    doc: 'Defines the height of an component (size prop), so the label can be aligned correctly. Can be `default`, `small`, `medium`, `large`.',\n    type: 'string',\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  disableStatusSummary: {\n    doc: 'Use `true` to disable the error summary.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'true',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const DataValueWritePropsProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: \"Info message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  warning: {\n    doc: \"Warning message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  error: {\n    doc: \"Error message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['Error', 'FormError', 'Array<Error | FormError>', 'function'],\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set to `true`, the field will give an error if the value fails the required validation. When set to `false`, the field will not be required, but will add a \"(optional)\" suffix to the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSuffix: {\n    doc: 'Will append an additional text to the label, like \"(optional)\". When using `inheritLabel`, the suffix will not be inherited. NB: The visual appearance of the `labelSuffix` may change in the future.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set to `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set to `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateContinuously: {\n    doc: 'Set to `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages. The messages can be a React.ReactNode or a string.',\n    type: 'object',\n    status: 'optional',\n  },\n  onChangeValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered on every change done by the user. The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered when the user leaves a field (e.g., blurring a text input or closing a dropdown). The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'Transforms the value before it gets forwarded to the form data object (context) or returned as the `onChange` value parameter. The first parameter is the internal value. Some fields to support a second parameter, like the SelectCountry, where the country object is given.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const DataValueWritePropsEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).\",\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","h3","p","code","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","FieldEvents","PasswordEvents","wrapper","MDXLayout","Td","Th","Tr","FieldProperties","DataValueWritePropsProperties","FieldBlockSharedProperties","DataValueWritePropsEvents","getFieldEventsWithTypes","valueType","additionalArgsType","undefined","typeString","optional","type","onChange","onFocus","onBlur","PasswordProperties","pattern","doc","status","size","innerRef","onShowPassword","onHidePassword","label","labelDescription","labelDescriptionInline","labelSrOnly","labelSize","help","layout","layoutOptions","width","contentWidth","FieldBlockProperties","labelHeight","asFieldset","align","disableStatusSummary","composition","disabled","value","defaultValue","path","info","warning","error","emptyValue","required","labelSuffix","schema","validateInitially","validateUnchanged","validateContinuously","errorMessages","onChangeValidator","onBlurValidator","transformIn","transformOut"],"sourceRoot":""}