{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-more-fields-slider-properties-mdx-589c67046d67ba9b5f10.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/Slider/SliderDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/more-fields/Slider/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/TranslationsTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/slider/SliderDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueWritePropsDocs.ts"],"sourcesContent":["import { SliderProperties } from '../../../../components/slider/SliderDocs'\nimport { PropertiesTableProps } from '../../../../shared/types'\n\nexport const SliderFieldProperties: PropertiesTableProps = {\n  paths: {\n    doc: 'Define an array with JSON Pointer paths for multiple thumb buttons.',\n    type: 'Array<string>',\n    status: 'optional',\n  },\n  min: SliderProperties.min,\n  max: SliderProperties.max,\n  step: SliderProperties.step,\n  vertical: SliderProperties.vertical,\n  reverse: SliderProperties.reverse,\n  stretch: SliderProperties.stretch,\n  hideButtons: SliderProperties.hideButtons,\n  multiThumbBehavior: SliderProperties.multiThumbBehavior,\n  thumbTitle: SliderProperties.thumbTitle,\n  subtractTitle: SliderProperties.subtractTitle,\n  addTitle: SliderProperties.addTitle,\n  numberFormat: SliderProperties.numberFormat,\n  tooltip: SliderProperties.tooltip,\n  alwaysShowTooltip: SliderProperties.alwaysShowTooltip,\n  extensions: SliderProperties.extensions,\n  '[Space](/uilib/layout/space/properties)':\n    SliderProperties['[Space](/uilib/layout/space/properties)'],\n}\n\nexport const SliderFieldEvents: PropertiesTableProps = {}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport TranslationsTable from 'dnb-design-system-portal/src/shared/parts/TranslationsTable';\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {FieldProperties} from '@dnb/eufemia/src/extensions/forms/Field/FieldDocs';\nimport {SliderFieldProperties} from '@dnb/eufemia/src/extensions/forms/Field/Slider/SliderDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field-specific properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: SliderFieldProperties\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"General properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: FieldProperties,\n      valueType: ['number', 'Array<number>']\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Translations\"\n    }), \"\\n\", _jsx(TranslationsTable, {\n      localeKey: ['Field']\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { useMemo } from 'react'\nimport styled from '@emotion/styled'\nimport { Anchor, P, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { extendDeep, warn } from '@dnb/eufemia/src/shared/component-helper'\nimport globalTranslations from '@dnb/eufemia/src/shared/locales'\nimport formsTranslations from '@dnb/eufemia/src/extensions/forms/constants/locales'\nimport { FormattedCode } from './PropertiesTable'\nimport { Translation } from '@dnb/eufemia/src/shared/Context'\nimport { translationsWithoutEnUS } from '../../core/PortalProviders'\nimport { languageDisplayNames } from '../../core/ChangeLocale'\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nexport default function TranslationsTable({\n  localeKey,\n  source = null,\n}: {\n  localeKey?: string | Array<string>\n  source?: Record<string, Translation>\n}) {\n  source = useMemo(() => {\n    return (\n      source ||\n      Object.assign(\n        extendDeep({}, globalTranslations, formsTranslations),\n        translationsWithoutEnUS,\n      )\n    )\n  }, [source])\n\n  const entries = {}\n  const allowList = {}\n  const localeKeys = (\n    Array.isArray(localeKey) ? localeKey : [localeKey]\n  ).map((key) => {\n    if (key.includes('.')) {\n      const first = key.split('.')[0]\n      allowList[first] = allowList[first] || []\n      allowList[first].push(key)\n      return first\n    }\n\n    return key\n  })\n\n  const addToEntries = (key, translation, locale, localeKey) => {\n    key = `${localeKey}.${key}`\n    if (allowList[localeKey] && !allowList[localeKey].includes(key)) {\n      return\n    }\n    entries[key] = Object.assign(entries[key] || {}, {\n      [locale]: translation,\n    })\n  }\n\n  Object.entries(source).forEach(([locale, translations]) => {\n    localeKeys.forEach((localeKey) => {\n      const translationsObj = translations[localeKey]\n      if (!translationsObj) {\n        warn(\n          `TranslationsTable: Could not find any translations for key: \"${localeKey}\", perhaps you misspelled the key's name?`,\n        )\n        return\n      }\n      Object.entries(translationsObj).forEach(([key, translation]) => {\n        if (typeof translation === 'object') {\n          const nestedKey = `${localeKey}.${key}`\n          Object.entries(translation).forEach(([key, translation]) => {\n            addToEntries(key, translation, locale, nestedKey)\n          })\n        } else {\n          addToEntries(key, translation, locale, localeKey)\n        }\n      })\n    })\n  })\n\n  const locales = Object.keys(source)\n  const tableRows = Object.entries(entries).map(([key, values]) => {\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode variant=\"prop\">{key}</FormattedCode>\n        </Td>\n        {Object.entries(values).map(([locale, value], i) => {\n          return (\n            <Td key={i + locale}>\n              {typeof value === 'string' ? (\n                value\n              ) : (\n                <pre>{JSON.stringify(value, null, 2)}</pre>\n              )}\n            </Td>\n          )\n        })}\n      </Tr>\n    )\n  })\n\n  if (tableRows.length == 0) {\n    warn(\n      `TranslationsTable: Not able to find any translations for input : \"${localeKey}\", hence not rendering the translations table.`,\n    )\n    return\n  }\n\n  return (\n    <>\n      <P>\n        More info about translations can be found in the{' '}\n        <Anchor href=\"/uilib/usage/customisation/localization/\">\n          general localization\n        </Anchor>{' '}\n        and{' '}\n        <Anchor href=\"/uilib/extensions/forms/getting-started/#localization-and-translation\">\n          Eufemia Forms localization\n        </Anchor>{' '}\n        docs.\n      </P>\n      <Table.ScrollView>\n        <StyledTable>\n          <thead>\n            <Tr>\n              <Th>Key</Th>\n              {locales.map((locale) => {\n                const { status } = languageDisplayNames[locale]\n                return (\n                  <Th key={locale}>\n                    {locale}\n                    {status ? ` (${status})` : null}\n                  </Th>\n                )\n              })}\n            </Tr>\n          </thead>\n          <tbody>{tableRows}</tbody>\n        </StyledTable>\n      </Table.ScrollView>\n    </>\n  )\n}\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const SliderProperties: PropertiesTableProps = {\n  value: {\n    doc: 'The `value` of the slider as a number or an array. If an array with numbers is provided, each number will represent a thumb button (the `+` and `-` button will be hidden on multiple thumbs).',\n    type: ['number', 'Array<number>'],\n    status: 'required',\n  },\n  min: {\n    doc: 'The minimum value. Can be a negative number as well. Defaults to `0`.',\n    type: 'number',\n    status: 'optional',\n  },\n  max: {\n    doc: 'The maximum value. Defaults to `100`.',\n    type: 'number',\n    status: 'optional',\n  },\n  step: {\n    doc: 'The steps the slider takes on changing the value. Defaults to `null`.',\n    type: 'number',\n    status: 'optional',\n  },\n  vertical: {\n    doc: 'Show the slider vertically. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  reverse: {\n    doc: 'Show the slider reversed. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  stretch: {\n    doc: 'If set to `true`, then the slider will be 100% in `width`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  hideButtons: {\n    doc: 'Removes the helper buttons. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  multiThumbBehavior: {\n    doc: 'Use either `omit`, `push` or `swap`. This property only works for two (range) or more thumb buttons, while `omit` will stop the thumb from swapping, `push` will push its nearest thumb along. Defaults to `swap`.',\n    type: 'string',\n    status: 'optional',\n  },\n  thumbTitle: {\n    doc: 'Give the slider thumb button a title for accessibility reasons. Defaults to `null`.',\n    type: 'string',\n    status: 'optional',\n  },\n  subtractTitle: {\n    doc: 'Give the subtract button a title for accessibility reasons. Defaults to `Decrease (%s)`.',\n    type: 'string',\n    status: 'optional',\n  },\n  addTitle: {\n    doc: 'Give the add button a title for accessibility reasons. Defaults to `Increase (%s)`.',\n    type: 'string',\n    status: 'optional',\n  },\n  numberFormat: {\n    doc: 'Will extend the return object with a `number` property (from `onChange` event). You can use all the options from the [NumberFormat](/uilib/components/number-format/properties) component. It also will use that formatted number in the increase/decrease buttons. If it has to represent a currency, then use e.g. `numberFormat={{ currency: true, decimals: 0 }}`',\n    type: 'object',\n    status: 'optional',\n  },\n  tooltip: {\n    doc: 'Use `true` to show a tooltip on `mouseOver`, `touchStart` and `focus`, showing the current number (if `numberFormat` is given) or the raw value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  alwaysShowTooltip: {\n    doc: 'Use `true` to always show the tooltip, in addition to the `tooltip` property.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Prepends the Form Label component. If no ID is provided, a random ID is created.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDirection: {\n    doc: 'Use `labelDirection=\"vertical\"` to change the label layout direction. Defaults to `horizontal`.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  status: {\n    doc: 'Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: ['error', 'info', 'boolean'],\n    status: 'optional',\n  },\n  statusState: {\n    doc: 'Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.',\n    type: ['error', 'info'],\n    status: 'optional',\n  },\n  statusProps: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatusId: {\n    doc: 'The `status_id` used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'string',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the Slider more than the label. You can also send in a React component, so it gets wrapped inside the Slider component.',\n    type: 'string',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  extensions: {\n    doc: 'Makes it possible to display overlays with other functionality such as a marker on the slider marking a given value.',\n    type: 'object',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const SliderEvents: PropertiesTableProps = {\n  onChange: {\n    doc: 'will be called on state changes made by the user. The callback `value` and `rawValue` is a number `{ value, rawValue, event }`. But if the prop `numberFormat` is given, then it will return an additional `number` with the given format `{ value, number, rawValue, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  onDragStart: {\n    doc: 'will be called once the user stops dragging. Returns `{ event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  onDragEnd: {\n    doc: 'will be called once the user starts dragging. Returns `{ event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { FieldBlockSharedProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  DataValueWritePropsEvents,\n  DataValueWritePropsProperties,\n} from '../hooks/DataValueWritePropsDocs'\n\nexport const FieldProperties: PropertiesTableProps = {\n  ...DataValueWritePropsProperties,\n  ...FieldBlockSharedProperties,\n}\n\nexport const FieldEvents: PropertiesTableProps = {\n  ...DataValueWritePropsEvents,\n}\n\nexport const getFieldEventsWithTypes = (\n  valueType: { type: string; optional?: boolean } = undefined,\n  additionalArgsType: { type: string; optional?: boolean } = undefined\n): PropertiesTableProps => {\n  const value = valueType\n    ? `value${valueType.optional ? '?' : ''}: ${valueType.type}`\n    : 'value'\n\n  const add = additionalArgsType\n    ? `, additionalArgs${additionalArgsType.optional ? '?' : ''}: ${\n        additionalArgsType.type\n      }`\n    : ''\n\n  const typeString = `(${value}${add}) => void`\n\n  return {\n    ...FieldEvents,\n    onChange: {\n      ...FieldEvents.onChange,\n      type: typeString,\n    },\n    onFocus: {\n      ...FieldEvents.onFocus,\n      type: typeString,\n    },\n    onBlur: {\n      ...FieldEvents.onBlur,\n      type: typeString,\n    },\n  }\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const FieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescriptionInline: {\n    doc: 'If true, the labelDescription will be displayed on the same line as the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  help: {\n    doc: 'Provide help content for the field using `title` and `content` as a string or React.Node. Additionally, you can set `open` to `true` to display the inline help, set the `breakout` property to `false` to disable the breakout of the inline help content, or use `renderAs` set to `dialog` to render the content in a [Dialog](/uilib/components/dialog/) (recommended for larger amounts of content).',\n    type: 'object',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  layoutOptions: {\n    doc: 'Use this to set additional options for the `horizontal` layout. E.g. `{ width: \"medium\" }`. You can also use a custom width `{number}rem`. Instead of a width, you can use a min/max width. E.g. `{ minWidth: \"6rem\", maxWidth: \"12rem\" }`.',\n    type: 'object',\n    status: 'optional',\n  },\n  width: {\n    doc: 'Will set the width for the whole block. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: 'Will set the width for its contents. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\n/** For internal use only */\nexport const FieldBlockProperties: PropertiesTableProps = {\n  ...FieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading sizes](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  labelHeight: {\n    doc: 'Defines the height of an component (size prop), so the label can be aligned correctly. Can be `default`, `small`, `medium`, `large`.',\n    type: 'string',\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  disableStatusSummary: {\n    doc: 'Use `true` to disable the error summary.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'true',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const DataValueWritePropsProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: \"Info message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  warning: {\n    doc: \"Warning message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  error: {\n    doc: \"Error message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['Error', 'FormError', 'Array<Error | FormError>', 'function'],\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set to `true`, the field will give an error if the value fails the required validation. When set to `false`, the field will not be required, but will add a \"(optional)\" suffix to the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSuffix: {\n    doc: 'Will append an additional text to the label, like \"(optional)\". When using `inheritLabel`, the suffix will not be inherited. NB: The visual appearance of the `labelSuffix` may change in the future.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set to `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set to `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateContinuously: {\n    doc: 'Set to `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages. The messages can be a React.ReactNode or a string.',\n    type: 'object',\n    status: 'optional',\n  },\n  onChangeValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered on every change done by the user. The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered when the user leaves a field (e.g., blurring a text input or closing a dropdown). The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'Transforms the value before it gets forwarded to the form data object (context) or returned as the `onChange` value parameter. The first parameter is the internal value. Some fields to support a second parameter, like the SelectCountry, where the country object is given.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const DataValueWritePropsEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).\",\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n}\n"],"names":["SliderFieldProperties","paths","doc","type","status","min","SliderProperties","max","step","vertical","reverse","stretch","hideButtons","multiThumbBehavior","thumbTitle","subtractTitle","addTitle","numberFormat","tooltip","alwaysShowTooltip","extensions","_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","FieldProperties","valueType","TranslationsTable","localeKey","wrapper","MDXLayout","StyledTable","_styled","Table","target","name","styles","_ref","source","useMemo","extendDeep","globalTranslations","formsTranslations","translationsWithoutEnUS","entries","allowList","localeKeys","Array","isArray","map","key","includes","first","split","push","addToEntries","translation","locale","forEach","_ref2","translations","translationsObj","_ref3","nestedKey","_ref4","warn","locales","keys","tableRows","_ref5","values","Tr","Td","FormattedCode","variant","_ref6","i","value","JSON","stringify","length","P","Anchor","href","Th","languageDisplayNames","label","labelDirection","labelSrOnly","statusState","statusProps","globalStatusId","suffix","skeleton","SliderEvents","onChange","onDragStart","onDragEnd","DataValueWritePropsProperties","FieldBlockSharedProperties","FieldEvents","DataValueWritePropsEvents","getFieldEventsWithTypes","additionalArgsType","undefined","typeString","optional","onFocus","onBlur","labelDescription","labelDescriptionInline","help","layout","layoutOptions","width","contentWidth","FieldBlockProperties","labelSize","labelHeight","asFieldset","align","disableStatusSummary","composition","disabled","defaultValue","path","info","warning","error","emptyValue","required","labelSuffix","schema","validateInitially","validateUnchanged","validateContinuously","errorMessages","onChangeValidator","onBlurValidator","transformIn","transformOut"],"sourceRoot":""}