"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[84841],{7897:function(e,t,o){o.d(t,{P:function(){return n},r:function(){return a}});const a={value:{doc:"The `value` of the slider as a number or an array. If an array with numbers is provided, each number will represent a thumb button (the `+` and `-` button will be hidden on multiple thumbs).",type:["number","Array<number>"],status:"required"},min:{doc:"The minimum value. Can be a negative number as well. Defaults to `0`.",type:"number",status:"optional"},max:{doc:"The maximum value. Defaults to `100`.",type:"number",status:"optional"},step:{doc:"The steps the slider takes on changing the value. Defaults to `null`.",type:"number",status:"optional"},vertical:{doc:"Show the slider vertically. Defaults to `false`.",type:"boolean",status:"optional"},reverse:{doc:"Show the slider reversed. Defaults to `false`.",type:"boolean",status:"optional"},stretch:{doc:"If set to `true`, then the slider will be 100% in `width`.",type:"boolean",status:"optional"},hideButtons:{doc:"Removes the helper buttons. Defaults to `false`.",type:"boolean",status:"optional"},multiThumbBehavior:{doc:"Use either `omit`, `push` or `swap`. This property only works for two (range) or more thumb buttons, while `omit` will stop the thumb from swapping, `push` will push its nearest thumb along. Defaults to `swap`.",type:"string",status:"optional"},thumbTitle:{doc:"Give the slider thumb button a title for accessibility reasons. Defaults to `null`.",type:"string",status:"optional"},subtractTitle:{doc:"Give the subtract button a title for accessibility reasons. Defaults to `Decrease (%s)`.",type:"string",status:"optional"},addTitle:{doc:"Give the add button a title for accessibility reasons. Defaults to `Increase (%s)`.",type:"string",status:"optional"},numberFormat:{doc:"Will extend the return object with a `number` property (from `onChange` event). You can use all the options from the [NumberFormat](/uilib/components/number-format/properties) component. It also will use that formatted number in the increase/decrease buttons. If it has to represent a currency, then use e.g. `numberFormat={{ currency: true, decimals: 0 }}`.",type:"object",status:"optional"},tooltip:{doc:"Use `true` to show a tooltip on `mouseOver`, `touchStart` and `focus`, showing the current number (if `numberFormat` is given) or the raw value.",type:"boolean",status:"optional"},alwaysShowTooltip:{doc:"Use `true` to always show the tooltip, in addition to the `tooltip` property.",type:"boolean",status:"optional"},label:{doc:"Prepends the Form Label component. If no ID is provided, a random ID is created.",type:"string",status:"optional"},labelDirection:{doc:'Use `labelDirection="vertical"` to change the label layout direction. Defaults to `horizontal`.',type:"string",status:"optional"},labelSrOnly:{doc:"Use `true` to make the label only readable by screen readers.",type:"boolean",status:"optional"},status:{doc:"Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.",type:["error","info","boolean"],status:"optional"},statusState:{doc:"Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.",type:["error","info"],status:"optional"},statusProps:{doc:"Use an object to define additional FormStatus properties.",type:"object",status:"optional"},globalStatusId:{doc:"The `status_id` used for the target [GlobalStatus](/uilib/components/global-status).",type:"string",status:"optional"},suffix:{doc:"Text describing the content of the Slider more than the label. You can also send in a React component, so it gets wrapped inside the Slider component.",type:"string",status:"optional"},skeleton:{doc:"If set to `true`, an overlaying skeleton with animation will be shown.",type:"boolean",status:"optional"},extensions:{doc:"Makes it possible to display overlays with other functionality such as a marker on the slider marking a given value.",type:"object",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},n={onChange:{doc:"will be called on state changes made by the user. The callback `value` and `rawValue` is a number `{ value, rawValue, event }`. But if the prop `numberFormat` is given, then it will return an additional `number` with the given format `{ value, number, rawValue, event }`.",type:"function",status:"optional"},onDragStart:{doc:"will be called once the user stops dragging. Returns `{ event }`.",type:"function",status:"optional"},onDragEnd:{doc:"will be called once the user starts dragging. Returns `{ event }`.",type:"function",status:"optional"}}},38019:function(e,t,o){o.d(t,{$:function(){return n},g:function(){return a}});const a={label:{doc:"Field label to show above / before the input feature.",type:"string",status:"optional"},labelDescription:{doc:'A more discreet text displayed beside the label (i.e for "(optional)").',type:"string",status:"optional"},labelDescriptionInline:{doc:"If true, the `labelDescription` will be displayed on the same line as the label.",type:"boolean",status:"optional"},labelSrOnly:{doc:"Use `true` to make the label only readable by screen readers.",type:"boolean",status:"optional"},labelSize:{doc:"Define the font-size of the label based on the [font-size](/uilib/typography/font-size/) table.",type:["medium","large"],status:"optional"},help:{doc:"Provide help content for the field using `title` and `content` as a string or React.Node. Additionally, you can set `open` to `true` to display the inline help, set the `breakout` property to `false` to disable the breakout of the inline help content, or use `renderAs` set to `dialog` to render the content in a [Dialog](/uilib/components/dialog/) (recommended for larger amounts of content).",type:"object",status:"optional"},layout:{doc:"Layout for the label and input. Can be `horizontal` or `vertical`.",type:"string",status:"optional"},layoutOptions:{doc:'Use this to set additional options for the `horizontal` layout. E.g. `{ width: "medium" }`. You can also use a custom width `{number}rem`. Instead of a width, you can use a min/max width. E.g. `{ minWidth: "6rem", maxWidth: "12rem" }`.',type:"object",status:"optional"},width:{doc:"Will set the width for the whole block. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.",type:["string","false"],status:"optional"},contentWidth:{doc:"Will set the width for its contents. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.",type:["string","false"],status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},n={...a,labelSize:{doc:"Define one of the following [heading sizes](/uilib/elements/heading/): `medium` or `large`.",type:["string","false"],status:"optional"},labelHeight:{doc:"Defines the height of an component (size prop), so the label can be aligned correctly. Can be `default`, `small`, `medium`, `large`.",type:"string",status:"optional"},asFieldset:{doc:"Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.",type:"boolean",status:"optional"},align:{doc:"`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.",type:["string","false"],status:"optional"},disableStatusSummary:{doc:"Use `true` to disable the error summary.",type:"boolean",status:"optional"},composition:{doc:"Use `true` for when you have more than one field wrapped.",type:"true",status:"optional"},disabled:{doc:"Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.",type:"boolean",status:"optional"}}},52685:function(e,t,o){o.d(t,{I:function(){return a},O:function(){return n}});const a={value:{doc:"Source data value for the field. Will take precedence over the path value given in the data context.",type:"{valueType}",status:"optional"},defaultValue:{doc:"Default source data value for the field. Will not take precedence over the path value given in the data context.",type:"{valueType}",status:"optional"},path:{doc:"JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.",type:"string",status:"optional"},info:{doc:"Info message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`",type:["React.Node","Array<React.Node>","function"],status:"optional"},warning:{doc:"Warning message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`",type:["React.Node","Array<React.Node>","function"],status:"optional"},error:{doc:"Error message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`",type:["Error","FormError","Array<Error | FormError>","function"],status:"optional"},disabled:{doc:"Set `true` to show the field but without the possibility of changing the value.",type:"boolean",status:"optional"},emptyValue:{doc:"The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.",type:["{valueType}","undefined"],status:"optional"},required:{doc:'When set to `true`, the field will give an error if the value fails the required validation. When set to `false`, the field will not be required, but will add a "(optional)" suffix to the label.',type:"boolean",status:"optional"},labelSuffix:{doc:'Will append an additional text to the label, like "(optional)". When using `inheritLabel`, the suffix will not be inherited. NB: The visual appearance of the `labelSuffix` may change in the future.',type:"React.Node",status:"optional"},schema:{doc:"Custom JSON Schema for validating the value.",type:"object",status:"optional"},validateInitially:{doc:"Set to `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.",type:"boolean",status:"optional"},validateUnchanged:{doc:"Set to `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.",type:"boolean",status:"optional"},validateContinuously:{doc:"Set to `true` to show validation based errors continuously while writing, not just when blurring the field.",type:"boolean",status:"optional"},errorMessages:{doc:"Custom error messages for each type of error, overriding default messages. The messages can be a React.ReactNode or a string.",type:"object",status:"optional"},onChangeValidator:{doc:"Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered on every change done by the user. The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.",type:"function",status:"optional"},onBlurValidator:{doc:"Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered when the user leaves a field (e.g., blurring a text input or closing a dropdown). The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.",type:"function",status:"optional"},transformIn:{doc:"Transforms the `value` before its displayed in the field (e.g. input).",type:"function",status:"optional"},transformOut:{doc:"Transforms the value before it gets forwarded to the form data object (context) or returned as the `onChange` value parameter. The first parameter is the internal value. Some fields to support a second parameter, like the SelectCountry, where the country object is given.",type:"function",status:"optional"}},n={onChange:{doc:"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).",type:"(value) => void",status:"optional"},onFocus:{doc:"Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).",type:"(value) => void",status:"optional"},onBlur:{doc:"Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).",type:"(value) => void",status:"optional"}}},69094:function(e,t,o){var a=o(23722);t.A=a.A},81908:function(e,t,o){var a=o(94515);t.A=a.A},82737:function(e,t,o){o.r(t),o.d(t,{default:function(){return d}});var a=o(31085),n=o(71184),i=o(86058),s=o(15616),r=o(91135),l=o(7897);const u={paths:{doc:"Define an array with JSON Pointer paths for multiple thumb buttons.",type:"Array<string>",status:"optional"},min:l.r.min,max:l.r.max,step:l.r.step,vertical:l.r.vertical,reverse:l.r.reverse,stretch:l.r.stretch,hideButtons:l.r.hideButtons,multiThumbBehavior:l.r.multiThumbBehavior,thumbTitle:l.r.thumbTitle,subtractTitle:l.r.subtractTitle,addTitle:l.r.addTitle,numberFormat:l.r.numberFormat,tooltip:l.r.tooltip,alwaysShowTooltip:l.r.alwaysShowTooltip,extensions:l.r.extensions,"[Space](/uilib/layout/space/properties)":l.r["[Space](/uilib/layout/space/properties)"]};function c(e){const t=Object.assign({h2:"h2",h3:"h3"},(0,n.R)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{children:"Properties"}),"\n",(0,a.jsx)(t.h3,{children:"Field-specific properties"}),"\n",(0,a.jsx)(s.Ay,{props:u}),"\n",(0,a.jsx)(t.h3,{children:"General properties"}),"\n",(0,a.jsx)(s.Ay,{props:r.mT,valueType:["number","Array<number>"]}),"\n",(0,a.jsx)(t.h2,{children:"Translations"}),"\n",(0,a.jsx)(i.A,{localeKey:["Field"]})]})}var d=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,n.R)(),e.components);return t?(0,a.jsx)(t,Object.assign({},e,{children:(0,a.jsx)(c,e)})):c(e)}},86058:function(e,t,o){o.d(t,{A:function(){return v}});var a=o(42483),n=o(14041),i=o(42275),s=o(81908),r=o(92034),l=o(77352),u=o(29058),c=o(69094),d=o(21436),h=o(64034),p=o(1470),f=o(43350),b=o(15616),m=o(87554),y=o(97728),g=o(31085);const w=(0,a.A)(i.Ay,{target:"ejvypor0"})({name:"1qdk5x4",styles:"td{white-space:nowrap;}"});function v(e){let{localeKey:t,source:o=null}=e;o=(0,n.useMemo)((()=>o||Object.assign((0,d.zu)({},p.A,f.A),m._M)),[o]);const a={},v={},j=(Array.isArray(t)?t:[t]).map((e=>{if(e.includes(".")){const t=e.split(".")[0];return v[t]=v[t]||[],v[t].push(e),t}return e})),x=(e,t,o,n)=>{e=`${n}.${e}`,v[n]&&!v[n].includes(e)||(a[e]=Object.assign(a[e]||{},{[o]:t}))};Object.entries(o).forEach((e=>{let[t,o]=e;j.forEach((e=>{const a=o[e];a?Object.entries(a).forEach((o=>{let[a,n]=o;if("object"==typeof n){const o=`${e}.${a}`;Object.entries(n).forEach((e=>{let[a,n]=e;x(a,n,t,o)}))}else x(a,n,t,e)})):(0,h.R8)(`TranslationsTable: Could not find any translations for key: "${e}", perhaps you misspelled the key's name?`)}))}));const T=Object.keys(o),S=Object.entries(a).map((e=>{let[t,o]=e;return(0,g.jsxs)(s.A,{children:[(0,g.jsx)(r.A,{children:(0,g.jsx)(b.OH,{variant:"prop",children:t})}),Object.entries(o).map(((e,t)=>{let[o,a]=e;return(0,g.jsx)(r.A,{children:"string"==typeof a?a:(0,g.jsx)("pre",{children:JSON.stringify(a,null,2)})},t+o)}))]},t)}));if(0!=S.length)return(0,g.jsxs)(g.Fragment,{children:[(0,g.jsxs)(l.A,{children:["More info about translations can be found in the"," ",(0,g.jsx)(u.Ay,{href:"/uilib/usage/customisation/localization/",children:"general localization"})," ","and"," ",(0,g.jsx)(u.Ay,{href:"/uilib/extensions/forms/getting-started/#localization-and-translation",children:"Eufemia Forms localization"})," ","docs."]}),(0,g.jsx)(i.Ay.ScrollView,{children:(0,g.jsxs)(w,{children:[(0,g.jsx)("thead",{children:(0,g.jsxs)(s.A,{children:[(0,g.jsx)(c.A,{children:"Key"}),T.map((e=>{const{status:t}=y.R[e];return(0,g.jsxs)(c.A,{children:[e,t?` (${t})`:null]},e)}))]})}),(0,g.jsx)("tbody",{children:S})]})})]});(0,h.R8)(`TranslationsTable: Not able to find any translations for input : "${t}", hence not rendering the translations table.`)}},91135:function(e,t,o){o.d(t,{IE:function(){return s},j7:function(){return r},mT:function(){return i}});var a=o(38019),n=o(52685);const i={...n.I,...a.g},s={...n.O},r=function(e,t){void 0===e&&(e=void 0),void 0===t&&(t=void 0);const o=`(${e?`value${e.optional?"?":""}: ${e.type}`:"value"}${t?`, additionalArgs${t.optional?"?":""}: ${t.type}`:""}) => void`;return{...s,onChange:{...s.onChange,type:o},onFocus:{...s.onFocus,type:o},onBlur:{...s.onBlur,type:o}}}},92034:function(e,t,o){var a=o(31666);t.A=a.A}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-feature-fields-more-fields-slider-properties-mdx-ea99eb35d8ca97af627b.js.map