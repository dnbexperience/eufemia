"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[30206],{9487:function(e,n,l){l.r(n),l.d(n,{default:function(){return w}});var t={};l.r(t),l.d(t,{BasicUsage:function(){return d},CompactVariant:function(){return p},CompactVariantHelpButton:function(){return m},Customized:function(){return f},Required:function(){return u},SessionStorage:function(){return k},Width:function(){return M},WithAsyncFileHandler:function(){return g},WithAsyncOnFileClick:function(){return b},WithAsyncOnFileDelete:function(){return j},WithFileItemOptions:function(){return H},WithFileSizeValidation:function(){return S},WithHelp:function(){return h},WithHelpWithoutLabelDescription:function(){return F},WithPath:function(){return x},WithSyncFileHandler:function(){return y}});var o=l(31085),i=l(71184),r=l(32065),a=l(4565),s=l(6366),c=l(3869);const d=()=>(0,o.jsx)(r.A,{children:'<Form.Handler>\n  <Field.Upload\n    label="My custom label"\n    labelDescription="My description"\n    onChange={(files) => console.log(\'onChange\', files)}\n  />\n</Form.Handler>\n'}),p=()=>(0,o.jsx)(r.A,{children:'<Form.Handler>\n  <Field.Upload\n    variant="compact"\n    label="My custom label"\n    labelDescription="My description"\n    onChange={(files) => console.log(\'onChange\', files)}\n  />\n</Form.Handler>\n'}),m=()=>(0,o.jsx)(r.A,{"data-visual-test":"upload-field-compact-help-button",children:'<Form.Handler>\n  <Field.Upload\n    help={{\n      open: true,\n      title: \'Hva betyr lånebeløp?\',\n      content: (\n        <>\n          Dette er hvor mye du har tenkt å låne{\' \'}\n          <Anchor href="#test">totalt</Anchor>.\n        </>\n      ),\n    }}\n    variant="compact"\n    label="My custom label"\n    labelDescription="My description"\n    onChange={(files) => console.log(\'onChange\', files)}\n  />\n</Form.Handler>\n'}),u=()=>(0,o.jsx)(r.A,{children:"<Form.Handler onSubmit={(data) => console.log('onSubmit', data)}>\n  <Flex.Stack>\n    <Field.Upload path=\"/myFiles\" required />\n    <Form.SubmitButton />\n  </Flex.Stack>\n</Form.Handler>\n"}),h=()=>(0,o.jsx)(r.A,{"data-visual-test":"upload-field-help-button",children:"<Field.Upload\n  help={{\n    open: true,\n    title: 'Help title',\n    content: 'Help content',\n  }}\n/>\n"}),F=()=>(0,o.jsx)(r.A,{"data-visual-test":"upload-field-help-button-without-label-description",children:"<Field.Upload\n  labelDescription={false}\n  help={{\n    open: true,\n    title: 'Help title',\n    content: 'Help content',\n  }}\n/>\n"}),f=()=>(0,o.jsx)(r.A,{"data-visual-test":"upload-field-customized",children:'<Field.Upload\n  title="My custom title"\n  text="My text with a help button"\n  width="large"\n  help={{\n    title: \'Help title\',\n    content: \'Help content\',\n    open: true,\n  }}\n  warning="Warning message"\n  acceptedFileTypes={[\'pdf\']}\n  filesAmountLimit={1}\n  fileMaxSize={1}\n/>\n'}),x=()=>(0,o.jsx)(r.A,{scope:{createMockFile:s.pK},children:"<Form.Handler\n  onChange={(data) => console.log('onChange', data)}\n  data={{\n    myFiles: [\n      {\n        file: createMockFile('fileName-1.png', 100, 'image/png'),\n      },\n    ],\n  }}\n>\n  <Field.Upload path=\"/myFiles\" />\n</Form.Handler>\n"}),g=()=>(0,o.jsx)(r.A,{scope:{createRequest:c.createRequest},noInline:!0,children:"const MyForm = () => {\n  return (\n    <Form.Handler onSubmit={async (form) => console.log(form)}>\n      <Flex.Stack>\n        <Field.Upload\n          path=\"/attachments\"\n          labelDescription=\"Upload multiple files at once to see the upload error message. This demo has been set up so that every other file in a batch will fail.\"\n          fileHandler={mockAsyncFileUpload}\n          required\n        />\n        <Form.SubmitButton />\n        <Tools.Log />\n      </Flex.Stack>\n    </Form.Handler>\n  )\n}\nasync function mockAsyncFileUpload(\n  newFiles: UploadValue,\n): Promise<UploadValue> {\n  const updatedFiles: UploadValue = []\n  for (const [, file] of Object.entries(newFiles)) {\n    const formData = new FormData()\n    formData.append('file', file.file, file.file.name)\n    const request = createRequest()\n    await request(Math.floor(Math.random() * 2000) + 1000) // Simulate a request\n\n    try {\n      const mockResponse = {\n        ok: false,\n        // Fails virus check\n        json: async () => ({\n          server_generated_id: file.file.name + '_' + crypto.randomUUID(),\n        }),\n      }\n      if (!mockResponse.ok) {\n        throw new Error('Unable to upload this file')\n      }\n      const data = await mockResponse.json()\n      updatedFiles.push({\n        ...file,\n        id: data.server_generated_id,\n      })\n    } catch (error) {\n      updatedFiles.push({\n        ...file,\n        errorMessage: error.message,\n      })\n    }\n  }\n  return updatedFiles\n}\nrender(<MyForm />)\n"}),y=()=>(0,o.jsx)(r.A,{noInline:!0,children:"const MyForm = () => {\n  return (\n    <Form.Handler onSubmit={async (form) => console.log(form)}>\n      <Flex.Stack>\n        <Field.Upload\n          path=\"/myattachments\"\n          fileHandler={mockSyncFileUpload}\n          required\n        />\n        <Form.SubmitButton />\n        <Tools.Log />\n      </Flex.Stack>\n    </Form.Handler>\n  )\n}\nfunction mockSyncFileUpload(newFiles: UploadValue) {\n  return newFiles.map((file) => {\n    if (file.file.name.length > 5) {\n      file.errorMessage = 'File name is too long'\n    }\n    return file\n  })\n}\nrender(<MyForm />)\n"}),j=()=>(0,o.jsx)(r.A,{scope:{createRequest:c.createRequest},noInline:!0,children:"async function mockAsyncFileRemoval({ fileItem }) {\n  const request = createRequest()\n  console.log(`making API request to remove: ${fileItem.file.name}`)\n  await request(3000) // Simulate a request\n  const mockResponse = {\n    successful_removal: Math.random() < 0.5, // Randomly fails to remove the file\n  }\n\n  if (!mockResponse.successful_removal) {\n    throw new Error('Unable to remove this file')\n  }\n}\nrender(\n  <Field.Upload\n    onFileDelete={mockAsyncFileRemoval}\n    acceptedFileTypes={['jpg', 'png']}\n  />,\n)\n"}),b=()=>(0,o.jsx)(r.A,{scope:{createRequest:c.createRequest,createMockFile:s.pK},noInline:!0,children:"async function mockAsyncFileClick({ fileItem }) {\n  const request = createRequest()\n  console.log(\n    `making API request to fetch the url of the file: ${fileItem.file.name}`,\n  )\n  await request(2000) // Simulate a request\n  window.open(\n    `https://eufemia.dnb.no/images/avatars/${fileItem.file.name}`,\n    '_blank',\n  )\n}\nrender(\n  <Form.Handler\n    data={{\n      myFiles: [\n        {\n          file: createMockFile('1501870.jpg', 100, 'image/png'),\n          id: '1',\n        },\n      ],\n    }}\n  >\n    <Field.Upload path=\"/myFiles\" onFileClick={mockAsyncFileClick} />\n  </Form.Handler>,\n)\n"});function k(){return(0,o.jsx)(r.A,{children:'<Form.Handler sessionStorageId="documents">\n  <Flex.Stack>\n    <Form.Card>\n      <Field.Upload path="/documents" />\n      <Value.Upload\n        path="/documents"\n        label="Uploaded files"\n        placeholder="No files uploaded."\n        variant="ol"\n        showEmpty\n      />\n    </Form.Card>\n\n    <Form.SubmitButton />\n    <Tools.Log />\n  </Flex.Stack>\n</Form.Handler>\n'})}const H=()=>(0,o.jsx)(r.A,{scope:{createMockFile:s.pK},noInline:!0,children:"const MyForm = () => {\n  return (\n    <Form.Handler\n      data={{\n        myFiles: [\n          {\n            file: createMockFile('fileName-1.png', 100, 'image/png'),\n            id: '1',\n            description: 'My description',\n            errorMessage: 'My error message',\n            removeDeleteButton: true,\n          },\n        ],\n      }}\n    >\n      <Field.Upload\n        path=\"/myFiles\"\n        fileHandler={mockFileHandler}\n        required\n      />\n    </Form.Handler>\n  )\n}\nfunction mockFileHandler(newFiles: UploadValue) {\n  return newFiles.map((file) => {\n    file.errorMessage = 'File has a problem'\n    file.description = 'File description'\n    file.removeDeleteButton = true\n    return file\n  })\n}\nrender(<MyForm />)\n"}),S=()=>(0,o.jsx)(r.A,{scope:{FormError:a.j},noInline:!0,children:"const MAX_SIZE = 500 * 1024 // 500 KB\nconst MIN_SIZE = 50 * 1024 // 50 KB\n\nconst myTranslation = {\n  'nb-NO': {\n    errorFileTooSmall: 'Filen er for liten.',\n    errorFileTooLarge: 'Filen er for stor.',\n  },\n  'en-GB': {\n    errorFileTooSmall: 'File is too small.',\n    errorFileTooLarge: 'File is too large.',\n  },\n}\nfunction MyField() {\n  const tr = Form.useTranslation()\n  const fileHandler = (newFiles: UploadValue) => {\n    return newFiles.map((item) => {\n      console.log('item:', item)\n      if (item.file.size < MIN_SIZE) {\n        item.errorMessage = tr['errorFileTooSmall']\n      }\n      if (item.file.size > MAX_SIZE) {\n        item.errorMessage = tr['errorFileTooLarge']\n      }\n      return item\n    })\n  }\n  return (\n    <Field.Upload\n      label=\"Label\"\n      labelDescription=\"This is a Field\"\n      path=\"/myField\"\n      acceptedFileTypes={['PNG']}\n      fileMaxSize={false}\n      fileHandler={fileHandler}\n    />\n  )\n}\nrender(\n  <Form.Handler\n    translations={myTranslation}\n    onSubmit={(data) => console.log('onSubmit', data)}\n  >\n    <Form.Card>\n      <MyField />\n    </Form.Card>\n\n    <Form.SubmitButton />\n  </Form.Handler>,\n)\n"}),M=()=>(0,o.jsx)(r.A,{scope:{createMockFile:s.pK},"data-visual-test":"upload-field-width",children:'<Form.Handler\n  data={{\n    myFiles: [\n      {\n        file: createMockFile(\'fileName-1.png\', 100, \'image/png\'),\n      },\n    ],\n  }}\n>\n  <Form.Card>\n    <Field.String width="stretch" />\n    <Field.Upload path="/myFiles" label="default" />\n    <Field.Upload path="/myFiles" width="large" label="large" />\n    <Field.Upload path="/myFiles" width="stretch" label="stretch" />\n  </Form.Card>\n</Form.Handler>\n'});function U(e){const n=Object.assign({h2:"h2",p:"p",a:"a",h3:"h3",code:"code"},(0,i.R)(),e.components),{VisibleWhenVisualTest:l}=n;return t||A("Examples",!1),d||A("Examples.BasicUsage",!0),p||A("Examples.CompactVariant",!0),m||A("Examples.CompactVariantHelpButton",!0),f||A("Examples.Customized",!0),u||A("Examples.Required",!0),k||A("Examples.SessionStorage",!0),M||A("Examples.Width",!0),g||A("Examples.WithAsyncFileHandler",!0),b||A("Examples.WithAsyncOnFileClick",!0),j||A("Examples.WithAsyncOnFileDelete",!0),H||A("Examples.WithFileItemOptions",!0),S||A("Examples.WithFileSizeValidation",!0),h||A("Examples.WithHelp",!0),F||A("Examples.WithHelpWithoutLabelDescription",!0),x||A("Examples.WithPath",!0),y||A("Examples.WithSyncFileHandler",!0),l||A("VisibleWhenVisualTest",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{children:"Demos"}),"\n",(0,o.jsxs)(n.p,{children:["Consider taking a look at the demos for the ",(0,o.jsx)(n.a,{href:"/uilib/components/upload/demos/",children:"Upload component"})," as well."]}),"\n",(0,o.jsx)(n.h3,{children:"Basic usage"}),"\n",(0,o.jsx)(d,{}),"\n",(0,o.jsxs)(n.h3,{children:["Variant ",(0,o.jsx)(n.code,{children:"compact"})]}),"\n",(0,o.jsx)(p,{}),"\n",(0,o.jsx)(n.h3,{children:"Required"}),"\n",(0,o.jsx)(u,{}),"\n",(0,o.jsx)(n.h3,{children:"Path usage"}),"\n",(0,o.jsx)(x,{}),"\n",(0,o.jsx)(n.h3,{children:"With help"}),"\n",(0,o.jsx)(h,{}),"\n",(0,o.jsx)(n.h3,{children:"Customized"}),"\n",(0,o.jsx)(f,{}),"\n",(0,o.jsx)(n.h3,{children:"Session storage support"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"sessionStorageId"})," property can be used to store the files in the session storage so they persist between page reloads."]}),"\n",(0,o.jsx)(k,{}),"\n",(0,o.jsx)(n.h3,{children:"With asynchronous file handler"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"fileHandler"})," property supports an asynchronous function, and can be used for handling/validating files asynchronously, like to upload files to a virus checker and display errors based on the outcome:"]}),"\n",(0,o.jsx)(g,{}),"\n",(0,o.jsx)(n.h3,{children:"With synchronous file handler"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"fileHandler"})," property supports a synchronous function, and can be used for handling/validating files synchronously, like to check for file names that's too long:"]}),"\n",(0,o.jsx)(y,{}),"\n",(0,o.jsxs)(n.h3,{children:["With asynchronous ",(0,o.jsx)(n.code,{children:"onFileDelete"})]}),"\n",(0,o.jsx)(j,{}),"\n",(0,o.jsxs)(n.h3,{children:["With asynchronous ",(0,o.jsx)(n.code,{children:"onFileClick"})]}),"\n",(0,o.jsx)(b,{}),"\n",(0,o.jsxs)(n.h3,{children:["With ",(0,o.jsx)(n.a,{href:"/uilib/components/upload/properties/#fileitem",children:"FileItem"})," options"]}),"\n",(0,o.jsx)(H,{}),"\n",(0,o.jsx)(n.h3,{children:"With file size validation"}),"\n",(0,o.jsx)(S,{}),"\n",(0,o.jsxs)(l,{children:[(0,o.jsx)(M,{}),(0,o.jsx)(F,{}),(0,o.jsx)(m,{})]})]})}var w=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,i.R)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(U,e)})):U(e)};function A(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-feature-fields-more-fields-upload-demos-mdx-6d2397f0bc30188f1a8d.js.map