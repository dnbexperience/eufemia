{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-more-fields-upload-demos-mdx-6d2397f0bc30188f1a8d.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/more-fields/Upload/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/more-fields/Upload/demos.mdx"],"sourcesContent":["import { Flex, Anchor } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../../shared/tags/ComponentBox'\nimport {\n  Field,\n  Form,\n  FormError,\n  Tools,\n  Value,\n} from '@dnb/eufemia/src/extensions/forms'\nimport { createMockFile } from '../../../../../../../docs/uilib/components/upload/Examples'\nimport { UploadValue } from '@dnb/eufemia/src/extensions/forms/Field/Upload'\nimport { createRequest } from '../../../Form/SubmitIndicator/Examples'\n\nexport const BasicUsage = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Field.Upload\n          label=\"My custom label\"\n          labelDescription=\"My description\"\n          onChange={(files) => console.log('onChange', files)}\n        />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const CompactVariant = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Field.Upload\n          variant=\"compact\"\n          label=\"My custom label\"\n          labelDescription=\"My description\"\n          onChange={(files) => console.log('onChange', files)}\n        />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const CompactVariantHelpButton = () => {\n  return (\n    <ComponentBox data-visual-test=\"upload-field-compact-help-button\">\n      <Form.Handler>\n        <Field.Upload\n          help={{\n            open: true,\n            title: 'Hva betyr lånebeløp?',\n            content: (\n              <>\n                Dette er hvor mye du har tenkt å låne{' '}\n                <Anchor href=\"#test\">totalt</Anchor>.\n              </>\n            ),\n          }}\n          variant=\"compact\"\n          label=\"My custom label\"\n          labelDescription=\"My description\"\n          onChange={(files) => console.log('onChange', files)}\n        />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Required = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler onSubmit={(data) => console.log('onSubmit', data)}>\n        <Flex.Stack>\n          <Field.Upload path=\"/myFiles\" required />\n          <Form.SubmitButton />\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithHelp = () => {\n  return (\n    <ComponentBox data-visual-test=\"upload-field-help-button\">\n      <Field.Upload\n        help={{\n          open: true,\n          title: 'Help title',\n          content: 'Help content',\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithHelpWithoutLabelDescription = () => {\n  return (\n    <ComponentBox data-visual-test=\"upload-field-help-button-without-label-description\">\n      <Field.Upload\n        labelDescription={false}\n        help={{\n          open: true,\n          title: 'Help title',\n          content: 'Help content',\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Customized = () => {\n  return (\n    <ComponentBox data-visual-test=\"upload-field-customized\">\n      <Field.Upload\n        title=\"My custom title\"\n        text=\"My text with a help button\"\n        width=\"large\"\n        help={{\n          title: 'Help title',\n          content: 'Help content',\n          open: true,\n        }}\n        warning=\"Warning message\"\n        acceptedFileTypes={['pdf']}\n        filesAmountLimit={1}\n        fileMaxSize={1}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithPath = () => {\n  return (\n    <ComponentBox scope={{ createMockFile }}>\n      <Form.Handler\n        onChange={(data) => console.log('onChange', data)}\n        data={{\n          myFiles: [\n            { file: createMockFile('fileName-1.png', 100, 'image/png') },\n          ],\n        }}\n      >\n        <Field.Upload path=\"/myFiles\" />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithAsyncFileHandler = () => {\n  return (\n    <ComponentBox scope={{ createRequest }}>\n      {() => {\n        const MyForm = () => {\n          return (\n            <Form.Handler onSubmit={async (form) => console.log(form)}>\n              <Flex.Stack>\n                <Field.Upload\n                  path=\"/attachments\"\n                  labelDescription=\"Upload multiple files at once to see the upload error message. This demo has been set up so that every other file in a batch will fail.\"\n                  fileHandler={mockAsyncFileUpload}\n                  required\n                />\n                <Form.SubmitButton />\n                <Tools.Log />\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        async function mockAsyncFileUpload(\n          newFiles: UploadValue,\n        ): Promise<UploadValue> {\n          const updatedFiles: UploadValue = []\n\n          for (const [, file] of Object.entries(newFiles)) {\n            const formData = new FormData()\n            formData.append('file', file.file, file.file.name)\n\n            const request = createRequest()\n            await request(Math.floor(Math.random() * 2000) + 1000) // Simulate a request\n\n            try {\n              const mockResponse = {\n                ok: false, // Fails virus check\n                json: async () => ({\n                  server_generated_id:\n                    file.file.name + '_' + crypto.randomUUID(),\n                }),\n              }\n\n              if (!mockResponse.ok) {\n                throw new Error('Unable to upload this file')\n              }\n\n              const data = await mockResponse.json()\n              updatedFiles.push({\n                ...file,\n                id: data.server_generated_id,\n              })\n            } catch (error) {\n              updatedFiles.push({\n                ...file,\n                errorMessage: error.message,\n              })\n            }\n          }\n\n          return updatedFiles\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const WithSyncFileHandler = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyForm = () => {\n          return (\n            <Form.Handler onSubmit={async (form) => console.log(form)}>\n              <Flex.Stack>\n                <Field.Upload\n                  path=\"/myattachments\"\n                  fileHandler={mockSyncFileUpload}\n                  required\n                />\n                <Form.SubmitButton />\n                <Tools.Log />\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        function mockSyncFileUpload(newFiles: UploadValue) {\n          return newFiles.map((file) => {\n            if (file.file.name.length > 5) {\n              file.errorMessage = 'File name is too long'\n            }\n            return file\n          })\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const WithAsyncOnFileDelete = () => {\n  return (\n    <ComponentBox scope={{ createRequest }}>\n      {() => {\n        async function mockAsyncFileRemoval({ fileItem }) {\n          const request = createRequest()\n          console.log(\n            `making API request to remove: ${fileItem.file.name}`,\n          )\n          await request(3000) // Simulate a request\n          const mockResponse = {\n            successful_removal: Math.random() < 0.5, // Randomly fails to remove the file\n          }\n          if (!mockResponse.successful_removal) {\n            throw new Error('Unable to remove this file')\n          }\n        }\n\n        return (\n          <Field.Upload\n            onFileDelete={mockAsyncFileRemoval}\n            acceptedFileTypes={['jpg', 'png']}\n          />\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const WithAsyncOnFileClick = () => {\n  return (\n    <ComponentBox scope={{ createRequest, createMockFile }}>\n      {() => {\n        async function mockAsyncFileClick({ fileItem }) {\n          const request = createRequest()\n          console.log(\n            `making API request to fetch the url of the file: ${fileItem.file.name}`,\n          )\n          await request(2000) // Simulate a request\n          window.open(\n            `https://eufemia.dnb.no/images/avatars/${fileItem.file.name}`,\n            '_blank',\n          )\n        }\n\n        return (\n          <Form.Handler\n            data={{\n              myFiles: [\n                {\n                  file: createMockFile('1501870.jpg', 100, 'image/png'),\n                  id: '1',\n                },\n              ],\n            }}\n          >\n            <Field.Upload\n              path=\"/myFiles\"\n              onFileClick={mockAsyncFileClick}\n            />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport function SessionStorage() {\n  return (\n    <ComponentBox>\n      <Form.Handler sessionStorageId=\"documents\">\n        <Flex.Stack>\n          <Form.Card>\n            <Field.Upload path=\"/documents\" />\n            <Value.Upload\n              path=\"/documents\"\n              label=\"Uploaded files\"\n              placeholder=\"No files uploaded.\"\n              variant=\"ol\"\n              showEmpty\n            />\n          </Form.Card>\n\n          <Form.SubmitButton />\n          <Tools.Log />\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithFileItemOptions = () => {\n  return (\n    <ComponentBox scope={{ createMockFile }}>\n      {() => {\n        const MyForm = () => {\n          return (\n            <Form.Handler\n              data={{\n                myFiles: [\n                  {\n                    file: createMockFile(\n                      'fileName-1.png',\n                      100,\n                      'image/png',\n                    ),\n                    id: '1',\n                    description: 'My description',\n                    errorMessage: 'My error message',\n                    removeDeleteButton: true,\n                  },\n                ],\n              }}\n            >\n              <Field.Upload\n                path=\"/myFiles\"\n                fileHandler={mockFileHandler}\n                required\n              />\n            </Form.Handler>\n          )\n        }\n\n        function mockFileHandler(newFiles: UploadValue) {\n          return newFiles.map((file) => {\n            file.errorMessage = 'File has a problem'\n            file.description = 'File description'\n            file.removeDeleteButton = true\n\n            return file\n          })\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const WithFileSizeValidation = () => {\n  return (\n    <ComponentBox scope={{ FormError }}>\n      {() => {\n        const MAX_SIZE = 500 * 1024 // 500 KB\n        const MIN_SIZE = 50 * 1024 // 50 KB\n\n        const myTranslation = {\n          'nb-NO': {\n            errorFileTooSmall: 'Filen er for liten.',\n            errorFileTooLarge: 'Filen er for stor.',\n          },\n          'en-GB': {\n            errorFileTooSmall: 'File is too small.',\n            errorFileTooLarge: 'File is too large.',\n          },\n        }\n\n        function MyField() {\n          const tr = Form.useTranslation()\n\n          const fileHandler = (newFiles: UploadValue) => {\n            return newFiles.map((item) => {\n              console.log('item:', item)\n\n              if (item.file.size < MIN_SIZE) {\n                item.errorMessage = tr['errorFileTooSmall']\n              }\n              if (item.file.size > MAX_SIZE) {\n                item.errorMessage = tr['errorFileTooLarge']\n              }\n\n              return item\n            })\n          }\n\n          return (\n            <Field.Upload\n              label=\"Label\"\n              labelDescription=\"This is a Field\"\n              path=\"/myField\"\n              acceptedFileTypes={['PNG']}\n              fileMaxSize={false}\n              fileHandler={fileHandler}\n            />\n          )\n        }\n\n        return (\n          <Form.Handler\n            translations={myTranslation}\n            onSubmit={(data) => console.log('onSubmit', data)}\n          >\n            <Form.Card>\n              <MyField />\n            </Form.Card>\n\n            <Form.SubmitButton />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const Width = () => {\n  return (\n    <ComponentBox\n      scope={{ createMockFile }}\n      data-visual-test=\"upload-field-width\"\n    >\n      <Form.Handler\n        data={{\n          myFiles: [\n            { file: createMockFile('fileName-1.png', 100, 'image/png') },\n          ],\n        }}\n      >\n        <Form.Card>\n          <Field.String width=\"stretch\" />\n          <Field.Upload path=\"/myFiles\" label=\"default\" />\n          <Field.Upload path=\"/myFiles\" width=\"large\" label=\"large\" />\n          <Field.Upload path=\"/myFiles\" width=\"stretch\" label=\"stretch\" />\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    h3: \"h3\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {VisibleWhenVisualTest} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.BasicUsage) _missingMdxReference(\"Examples.BasicUsage\", true);\n  if (!Examples.CompactVariant) _missingMdxReference(\"Examples.CompactVariant\", true);\n  if (!Examples.CompactVariantHelpButton) _missingMdxReference(\"Examples.CompactVariantHelpButton\", true);\n  if (!Examples.Customized) _missingMdxReference(\"Examples.Customized\", true);\n  if (!Examples.Required) _missingMdxReference(\"Examples.Required\", true);\n  if (!Examples.SessionStorage) _missingMdxReference(\"Examples.SessionStorage\", true);\n  if (!Examples.Width) _missingMdxReference(\"Examples.Width\", true);\n  if (!Examples.WithAsyncFileHandler) _missingMdxReference(\"Examples.WithAsyncFileHandler\", true);\n  if (!Examples.WithAsyncOnFileClick) _missingMdxReference(\"Examples.WithAsyncOnFileClick\", true);\n  if (!Examples.WithAsyncOnFileDelete) _missingMdxReference(\"Examples.WithAsyncOnFileDelete\", true);\n  if (!Examples.WithFileItemOptions) _missingMdxReference(\"Examples.WithFileItemOptions\", true);\n  if (!Examples.WithFileSizeValidation) _missingMdxReference(\"Examples.WithFileSizeValidation\", true);\n  if (!Examples.WithHelp) _missingMdxReference(\"Examples.WithHelp\", true);\n  if (!Examples.WithHelpWithoutLabelDescription) _missingMdxReference(\"Examples.WithHelpWithoutLabelDescription\", true);\n  if (!Examples.WithPath) _missingMdxReference(\"Examples.WithPath\", true);\n  if (!Examples.WithSyncFileHandler) _missingMdxReference(\"Examples.WithSyncFileHandler\", true);\n  if (!VisibleWhenVisualTest) _missingMdxReference(\"VisibleWhenVisualTest\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Consider taking a look at the demos for the \", _jsx(_components.a, {\n        href: \"/uilib/components/upload/demos/\",\n        children: \"Upload component\"\n      }), \" as well.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Basic usage\"\n    }), \"\\n\", _jsx(Examples.BasicUsage, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Variant \", _jsx(_components.code, {\n        children: \"compact\"\n      })]\n    }), \"\\n\", _jsx(Examples.CompactVariant, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Required\"\n    }), \"\\n\", _jsx(Examples.Required, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Path usage\"\n    }), \"\\n\", _jsx(Examples.WithPath, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With help\"\n    }), \"\\n\", _jsx(Examples.WithHelp, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Customized\"\n    }), \"\\n\", _jsx(Examples.Customized, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Session storage support\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"sessionStorageId\"\n      }), \" property can be used to store the files in the session storage so they persist between page reloads.\"]\n    }), \"\\n\", _jsx(Examples.SessionStorage, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With asynchronous file handler\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"fileHandler\"\n      }), \" property supports an asynchronous function, and can be used for handling/validating files asynchronously, like to upload files to a virus checker and display errors based on the outcome:\"]\n    }), \"\\n\", _jsx(Examples.WithAsyncFileHandler, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With synchronous file handler\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"fileHandler\"\n      }), \" property supports a synchronous function, and can be used for handling/validating files synchronously, like to check for file names that's too long:\"]\n    }), \"\\n\", _jsx(Examples.WithSyncFileHandler, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"With asynchronous \", _jsx(_components.code, {\n        children: \"onFileDelete\"\n      })]\n    }), \"\\n\", _jsx(Examples.WithAsyncOnFileDelete, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"With asynchronous \", _jsx(_components.code, {\n        children: \"onFileClick\"\n      })]\n    }), \"\\n\", _jsx(Examples.WithAsyncOnFileClick, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"With \", _jsx(_components.a, {\n        href: \"/uilib/components/upload/properties/#fileitem\",\n        children: \"FileItem\"\n      }), \" options\"]\n    }), \"\\n\", _jsx(Examples.WithFileItemOptions, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With file size validation\"\n    }), \"\\n\", _jsx(Examples.WithFileSizeValidation, {}), \"\\n\", _jsxs(VisibleWhenVisualTest, {\n      children: [_jsx(Examples.Width, {}), _jsx(Examples.WithHelpWithoutLabelDescription, {}), _jsx(Examples.CompactVariantHelpButton, {})]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["BasicUsage","_jsx","ComponentBox","children","CompactVariant","CompactVariantHelpButton","Required","WithHelp","WithHelpWithoutLabelDescription","Customized","WithPath","scope","createMockFile","WithAsyncFileHandler","createRequest","noInline","WithSyncFileHandler","WithAsyncOnFileDelete","WithAsyncOnFileClick","SessionStorage","WithFileItemOptions","WithFileSizeValidation","FormError","Width","_createMdxContent","props","_components","Object","assign","h2","p","a","h3","code","_provideComponents","components","VisibleWhenVisualTest","Examples","_missingMdxReference","_jsxs","_Fragment","href","wrapper","MDXLayout","id","component","Error"],"sourceRoot":""}