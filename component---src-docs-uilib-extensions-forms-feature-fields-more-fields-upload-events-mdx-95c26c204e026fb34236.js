"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[74178],{86515:function(e,t,n){n.r(t);var i=n(52322),s=n(45392),o=n(85179),r=n(25189);function a(e){const t=Object.assign({h2:"h2"},(0,s.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{children:"Events"}),"\n",(0,i.jsx)(o.ZP,{props:r.K})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,s.ah)(),e.components);return t?(0,i.jsx)(t,Object.assign({},e,{children:(0,i.jsx)(a,e)})):a(e)}},85179:function(e,t,n){n.d(t,{Kw:function(){return b},ZP:function(){return g}});var i=n(70894),s=n(61185),o=n(55560),r=n(41676),a=n(6210),l=n(64223),c=n(37339),d=n(595),u=n(52322);const p={...d.L,p:e=>(0,u.jsx)("span",{...e})},f=(0,i.Z)(o.ZP,{target:"e13h2c840"})({name:"1gy8cio",styles:"td:not(.description){white-space:nowrap;}"}),h={default:"var(--color-success-green)",primitive:"var(--color-success-green)",string:"var(--color-fire-red)"},y={default:"var(--color-success-green)",undefined:"var(--color-black-55)",string:"var(--color-fire-red)"},b=e=>{let{variant:t,strikethrough:n,children:i,style:s={},...o}=e;if(n&&(s.textDecoration="line-through"),"string"==typeof i)switch(t){case"prop":break;case"type":s.color=m(i)?h.string:["boolean","true","false","number","bigint","string","symbol"].includes(function(e){return e.endsWith("[]")?e.slice(0,-2):e.startsWith("Array<")&&e.endsWith(">")?e.slice(6,-1):e}(i))?h.primitive:h.default,s.background="none",s.boxShadow="none";break;case"value":s.color=m(i)?y.string:"undefined"===i||"null"===i?y.undefined:y.default,s.background="none",s.boxShadow="none"}return p.code({children:i,style:s,...o})};function g(e){let{props:t,valueType:n="string",camelCase:i,omit:d,showDefaultValue:h=!1}=e;const y=Object.keys(t||{}),g=Object.entries(t||{}).map((e=>{let[t,o]=e;if(!o)return null;const{type:l,defaultValue:f,doc:g,status:m}=o;return d&&d.includes(t)?null:(0,u.jsxs)(r.Z,{children:[(0,u.jsx)(a.Z,{children:(0,u.jsx)(b,{variant:"prop",strikethrough:"deprecated"===m,children:j(i?(0,c.zW)(t):t)})}),(0,u.jsx)(a.Z,{children:(Array.isArray(l)?l:[l]).map((e=>{if("string"==typeof e){if(String(e).includes("{valueType}")){if(Array.isArray(n))return n.map(((e,t)=>(0,u.jsx)(b,{variant:"type",children:e},e+t))).reduce(((e,t)=>(0,u.jsxs)(u.Fragment,{children:[e," ",(0,u.jsx)("br",{})," ",t]})));e=n}return(0,u.jsx)(b,{variant:"type",children:e},e)}})).reduce(((e,t)=>(0,u.jsxs)(u.Fragment,{children:[e," ",(0,u.jsx)("br",{})," ",t]})))}),h&&(0,u.jsx)(a.Z,{children:f?(0,u.jsx)(b,{variant:"value",children:f}):"required"===m&&"REQUIRED"}),(0,u.jsxs)(a.Z,{className:"description",children:[(!h||"deprecated"===m)&&(0,u.jsxs)("em",{children:["(",m,") "]}),(0,u.jsx)(s.D,{components:p,children:i?x(g,y):g})]})]},t)}));return(0,u.jsx)(o.ZP.ScrollView,{children:(0,u.jsxs)(f,{children:[(0,u.jsx)("thead",{children:(0,u.jsxs)(r.Z,{children:[(0,u.jsx)(l.Z,{children:"Property"}),(0,u.jsx)(l.Z,{children:"Type"}),h&&(0,u.jsx)(l.Z,{children:"Default value"}),(0,u.jsx)(l.Z,{className:"description",children:"Description"})]})}),(0,u.jsx)("tbody",{children:g})]})})}function m(e){return["'",'"',"`"].includes(e.substring(0,1))}function x(e,t){return t.forEach((t=>{e=e.replace(new RegExp(t,"g"),(0,c.zW)(t))})),e}function j(e){return e.includes("[")?(0,u.jsx)(s.D,{components:p,children:e}):e}},22260:function(e,t,n){n.d(t,{TM:function(){return o},Ts:function(){return s},W8:function(){return i}});const i={id:{doc:"Unique id used with the useUpload hook to manage the files. Needed when wanting to connect with the useUpload hook.",type:["string","Function","Object","React.Context"],status:"optional"},acceptedFileTypes:{doc:"List of accepted file types. Either as string or [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype). When providing a list of [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype), the accepted file types will be presented in a table(see [example](/uilib/components/upload/demos/#upload-with-file-max-size-based-on-file-type)).",type:["Array<string>","Array<AcceptedFileType>"],status:"required"},filesAmountLimit:{doc:"Defines the amount of files the user can select and upload. Defaults to 100.",type:"number",status:"optional"},fileMaxSize:{doc:"Defines the max file size of each file in MB. Use either `0` or `false` to disable. Defaults to 5 MB.",type:["number","false"],status:"optional"},title:{doc:"Custom text property. Replaces the default title. Can be disabled using `false`.",type:"string",status:"optional"},text:{doc:"Custom text property. Replaces the default text. Can be disabled using `false`.",type:"string",status:"optional"},download:{doc:"Causes the browser to treat all listed files as downloadable instead of opening them in a new browser tab or window. Defaults to `false`.",type:"boolean",status:"optional"},skeleton:{doc:"Skeleton should be applied when loading content.",type:"boolean",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},s={fileType:{doc:"The name of the accepted file type.",type:"string",status:"required"},fileMaxSize:{doc:"Defines the max file size of the given file type in MB. Use either `0` or `false` to disable. If not provided, it defaults to the value of [Uploads](/uilib/components/upload/properties/#properties) `fileMaxSize` which defaults to 5 MB.",type:["number","false"],status:"optional"}},o={onChange:{doc:"Will be called on `files` changes made by the user. Access the files with `{ files }` (containing each a `fileItem`).",type:"function",status:"optional"},onFileDelete:{doc:"Will be called once a file gets deleted by the user. Access the deleted file with `{ fileItem }`.",type:"function",status:"optional"},onFileClick:{doc:"Will be called once a file gets clicked on by the user. Access the clicked file with `{ fileItem }`.",type:"function",status:"optional"}}},6210:function(e,t,n){var i=n(30600);t.Z=i.Z},64223:function(e,t,n){var i=n(91859);t.Z=i.Z},41676:function(e,t,n){var i=n(35610);t.Z=i.Z},25189:function(e,t,n){n.d(t,{K:function(){return o},s:function(){return s}});var i=n(22260);const s={fileHandler:{doc:"File handler function that takes newly added files (`newFiles: UploadValue`) as a parameter and returns the processed files. The function can either be synchronous or asynchronous. It returns a promise (`Promise<UploadValue>`) containing the processed files when asynchronous.",type:"function",status:"optional"},...i.W8,title:void 0,text:void 0},o={...i.TM}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-feature-fields-more-fields-upload-events-mdx-95c26c204e026fb34236.js.map