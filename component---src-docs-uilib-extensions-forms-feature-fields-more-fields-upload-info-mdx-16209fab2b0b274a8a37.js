"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[8936],{79273:function(e,n,r){r.r(n);var i=r(52322),a=r(45392);function s(e){const n=Object.assign({h2:"h2",p:"p",code:"code",a:"a",pre:"pre"},(0,a.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Field.Upload"})," is a wrapper for the ",(0,i.jsx)(n.a,{href:"/uilib/components/upload/",children:"Upload"})," component to make it easier to use inside a form."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"import { Field } from '@dnb/eufemia/extensions/forms'\nrender(<Field.Upload />)\n"})}),"\n",(0,i.jsx)(n.h2,{children:"The data and file format"}),"\n",(0,i.jsx)(n.p,{children:"The returned data is an array of objects containing a file object and a unique ID. The file object contains the file itself and some additional properties like an unique ID."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"{\n  id: '1234',\n  file: {\n    name: 'file1.jpg',\n    size: 1234,\n    type: 'image/jpeg',\n  },\n  errorMessage: 'error message ...',\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This data format will be returned by the ",(0,i.jsx)(n.code,{children:"onChange"})," and the ",(0,i.jsx)(n.code,{children:"onSubmit"})," event handlers."]}),"\n",(0,i.jsx)(n.h2,{children:"Validation"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"required"})," property will validate if there are valid files present. If there are files with an error, the validation will fail."]}),"\n",(0,i.jsxs)(n.p,{children:["If there are invalid files, the ",(0,i.jsx)(n.code,{children:"onSubmit"})," event will not be called and a validation error will be shown."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"onChange"})," event handler will return an array with objects containing the file object and some additional properties â€“ regardless of the validity of the file."]}),"\n",(0,i.jsxs)(n.p,{children:["For error handling of invalid files, you can refer to the ",(0,i.jsx)(n.a,{href:"/uilib/components/upload/",children:"Upload"})," component for more details."]}),"\n",(0,i.jsxs)(n.h2,{children:["About the ",(0,i.jsx)(n.code,{children:"value"})," and ",(0,i.jsx)(n.code,{children:"path"})," property"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"path"})," property represents an array with an object described above:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'render(\n  <Form.Handler defaultData={{ myFiles: files }}>\n    <Field.Upload path="/myFiles" />\n  </Form.Handler>,\n)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"value"})," property represents an array with an object described above:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"render(<Field.Upload value={files} />)\n"})})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(s,e)})):s(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-feature-fields-more-fields-upload-info-mdx-16209fab2b0b274a8a37.js.map