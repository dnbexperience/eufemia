{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-more-fields-upload-info-mdx-7d8c00a94ee159eb8dcb.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/more-fields/Upload/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Field.Upload\"\n      }), \" is a wrapper for the \", _jsx(_components.a, {\n        href: \"/uilib/components/upload/\",\n        children: \"Upload\"\n      }), \" component to make it easier to use inside a form.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Field } from '@dnb/eufemia/extensions/forms'\\nrender(<Field.Upload />)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There is a corresponding \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Value/Upload\",\n        children: \"Value.Upload\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"The data and file format\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The returned data is an array of objects containing a file object and a unique ID. The file object contains the file itself and some additional properties like an unique ID.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"{\\n  id: '1234',\\n  file: {\\n    name: 'file1.jpg',\\n    size: 1234,\\n    type: 'image/jpeg',\\n  },\\n  errorMessage: 'error message ...',\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This data format will be returned by the \", _jsx(_components.code, {\n        children: \"onChange\"\n      }), \" and the \", _jsx(_components.code, {\n        children: \"onSubmit\"\n      }), \" event handlers.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Validation\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" property will validate if there are valid files present. If there are files with an error, the validation will fail.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If there are invalid files, the \", _jsx(_components.code, {\n        children: \"onSubmit\"\n      }), \" event will not be called and a validation error will be shown.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"onChange\"\n      }), \" event handler will return an array with objects containing the file object and some additional properties â€“ regardless of the validity of the file.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For error handling of invalid files, you can refer to the \", _jsx(_components.a, {\n        href: \"/uilib/components/upload/\",\n        children: \"Upload\"\n      }), \" component for more details.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"About the \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"path\"\n      }), \" property\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"path\"\n      }), \" property represents an array with an object described above:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"render(\\n  <Form.Handler defaultData={{ myFiles: files }}>\\n    <Field.Upload path=\\\"/myFiles\\\" />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" property represents an array with an object described above:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"render(<Field.Upload value={files} />)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"About the \", _jsx(_components.code, {\n        children: \"fileHandler\"\n      }), \" property\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"fileHandler\"\n      }), \" is a handler function that supports both an asynchronous and synchronous function. It takes newly added files as a parameter and returns processed files (a promise when asynchronous).\\nThe component will automatically handle asynchronous loading states during the upload process. This feature is useful for tasks like uploading files to a virus checker, which returns a new file ID if the file passes the check. To indicate a failed upload, set the \", _jsx(_components.code, {\n        children: \"errorMessage\"\n      }), \" on the specific file object with the desired message to display next to the file in the upload list.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"async function virusCheck(newFiles) {\\n  const promises = newFiles.map(async (file) => {\\n    const formData = new FormData()\\n    formData.append('file', file.file, file.file.name)\\n\\n    return await fetch('/', { method: 'POST', body: formData })\\n      .then((response) => {\\n        if (response.ok) return response.json()\\n        throw new Error('Unable to upload this file')\\n      })\\n      .then((data) => {\\n        return {\\n          ...file,\\n          id: data.server_generated_id,\\n        }\\n      })\\n      .catch((error) => {\\n        return {\\n          ...file,\\n          errorMessage: error.message,\\n        }\\n      })\\n  })\\n\\n  return await Promise.all(promises)\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","a","pre","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","className","wrapper","MDXLayout"],"sourceRoot":""}