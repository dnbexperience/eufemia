{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-more-fields-upload-info-mdx-96a2e727550cc5c859be.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/more-fields/Upload/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Field.Upload\"\n      }), \" is a wrapper for the \", _jsx(_components.a, {\n        href: \"/uilib/components/upload/\",\n        children: \"Upload\"\n      }), \" component to make it easier to use inside a form.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Field } from '@dnb/eufemia/extensions/forms'\\nrender(<Field.Upload />)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There is a corresponding \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Value/Upload\",\n        children: \"Value.Upload\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"The data and file format\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The returned data is an array of objects containing a file object and a unique ID. The file object contains the file itself and some additional properties like an unique ID.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"{\\n  id: '1234',\\n  file: {\\n    name: 'file1.jpg',\\n    size: 1234,\\n    type: 'image/jpeg',\\n  },\\n  errorMessage: 'error message ...',\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This data format will be returned by the \", _jsx(_components.code, {\n        children: \"onChange\"\n      }), \" and the \", _jsx(_components.code, {\n        children: \"onSubmit\"\n      }), \" event handlers.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Validation\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" property will validate if there are valid files present. If there are files with an error, the validation will fail.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If there are invalid files, the \", _jsx(_components.code, {\n        children: \"onSubmit\"\n      }), \" event will not be called and a validation error will be shown.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"onChange\"\n      }), \" event handler will return an array with objects containing the file object and some additional properties â€“ regardless of the validity of the file.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For error handling of invalid files, you can refer to the \", _jsx(_components.a, {\n        href: \"/uilib/components/upload/\",\n        children: \"Upload\"\n      }), \" component for more details.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"About the \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"path\"\n      }), \" property\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"path\"\n      }), \" property represents an array with an object described above:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"render(\\n  <Form.Handler defaultData={{ myFiles: files }}>\\n    <Field.Upload path=\\\"/myFiles\\\" />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" property represents an array with an object described above:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"render(<Field.Upload value={files} />)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"About the \", _jsx(_components.code, {\n        children: \"fileHandler\"\n      }), \" property\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"fileHandler\"\n      }), \" is a handler function that supports both an asynchronous and synchronous function. It takes newly added files as a parameter and returns processed files (a promise when asynchronous).\\nThe component will automatically handle asynchronous loading states during the upload process. This feature is useful for tasks like uploading files to a virus checker, which returns a new file ID if the file passes the check. To indicate a failed upload, set the \", _jsx(_components.code, {\n        children: \"errorMessage\"\n      }), \" on the specific file object with the desired message to display next to the file in the upload list.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"async function virusCheck(newFiles) {\\n  const promises = newFiles.map(async (file) => {\\n    const formData = new FormData()\\n    formData.append('file', file.file, file.file.name)\\n\\n    return await fetch('/', { method: 'POST', body: formData })\\n      .then((response) => {\\n        if (response.ok) return response.json()\\n        throw new Error('Unable to upload this file')\\n      })\\n      .then((data) => {\\n        return {\\n          ...file,\\n          id: data.server_generated_id,\\n        }\\n      })\\n      .catch((error) => {\\n        return {\\n          ...file,\\n          errorMessage: error.message,\\n        }\\n      })\\n  })\\n\\n  return await Promise.all(promises)\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"TransformIn and TransformOut\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the \", _jsx(_components.code, {\n        children: \"transformIn\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"transformOut\"\n      }), \" properties to transform the data from the internal format to the external format and vice versa.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field, Tools } from '@dnb/eufemia/extensions/forms'\\nimport type {\\n  UploadValue,\\n  UploadFileNative,\\n} from '@dnb/eufemia/extensions/forms/Field/Upload'\\n\\n// Our external format\\ntype DocumentMetadata = {\\n  id: string\\n  fileName: string\\n}\\n\\nconst defaultValue = [\\n  {\\n    id: '1234',\\n    fileName: 'myFile.pdf',\\n  },\\n] satisfies DocumentMetadata[] as unknown as UploadValue\\n\\nconst filesCache = new Map<string, File>()\\n\\n// To the Field (from e.g. defaultValue)\\nconst transformIn = (external?: DocumentMetadata[]) => {\\n  return (\\n    external?.map(({ id, fileName }) => {\\n      const file: File =\\n        filesCache.get(id) ||\\n        new File([], fileName, { type: 'images/png' })\\n\\n      return { id, file }\\n    }) || []\\n  )\\n}\\n\\n// From the Field (internal value) to the data context or event parameter\\nconst transformOut = (internal?: UploadValue) => {\\n  return (\\n    internal?.map(({ id, file }) => {\\n      if (!filesCache.has(id)) {\\n        filesCache.set(id, file)\\n      }\\n\\n      return { id, fileName: file.name }\\n    }) || []\\n  )\\n}\\n\\nfunction MyForm() {\\n  return (\\n    <Form.Handler>\\n      <Field.Upload\\n        path=\\\"/documents\\\"\\n        transformIn={transformIn}\\n        transformOut={transformOut}\\n        defaultValue={defaultValue}\\n      />\\n\\n      <Tools.Log />\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Persist files in session storage\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"sessionStorageId\"\n      }), \" property can be used to store the files in the session storage so they persist between page reloads.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"But the persisted files only render the file name, and not the file itself. The file blob will be lost during the serialization process.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","a","pre","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","className","wrapper","MDXLayout"],"sourceRoot":""}