"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[33989,33316,8936],{49440:function(e,n,t){t.r(n);var i=t(52322),l=t(45392),s=t(79273),r=t(29582);function o(e){return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.default,{}),"\n",(0,i.jsx)(r.default,{})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(o,e)})):o()}},29582:function(e,n,t){t.r(n),t.d(n,{default:function(){return x}});var i={};t.r(i),t.d(i,{BasicUsage:function(){return c},Customized:function(){return f},Required:function(){return p},WithAsyncFileHandler:function(){return m},WithHelp:function(){return u},WithPath:function(){return h}});var l=t(52322),s=t(45392),r=t(46832),o=t(4902),a=t(36210),d=t(38265);const c=()=>(0,l.jsx)(r.Z,{children:'<Form.Handler>\n  <Field.Upload\n    label="My custom label"\n    labelDescription="My description"\n  />\n</Form.Handler>\n'}),p=()=>(0,l.jsx)(r.Z,{children:"<Form.Handler onSubmit={(data) => console.log('onSubmit', data)}>\n  <Flex.Stack>\n    <Field.Upload path=\"/myFiles\" required />\n    <Form.SubmitButton />\n  </Flex.Stack>\n</Form.Handler>\n"}),u=()=>(0,l.jsx)(r.Z,{children:"<Field.Upload\n  help={{\n    title: 'Help title',\n    content: 'Help content',\n  }}\n/>\n"}),f=()=>(0,l.jsx)(r.Z,{"data-visual-test":"upload-field-customized",children:'<Field.Upload\n  title="My custom title"\n  text="My text with a help button"\n  width="large"\n  help={{\n    title: \'Help title\',\n    content: \'Help content\',\n  }}\n  warning="Warning message"\n  acceptedFileTypes={[\'pdf\']}\n  filesAmountLimit={1}\n  fileMaxSize={1}\n/>\n'}),h=()=>(0,l.jsx)(r.Z,{scope:{createMockFile:a.lb},children:"<Form.Handler\n  onChange={(data) => console.log('onChange', data)}\n  data={{\n    myFiles: [\n      {\n        file: createMockFile('fileName-1.png', 100, 'image/png'),\n      },\n    ],\n  }}\n>\n  <Field.Upload path=\"/myFiles\" />\n</Form.Handler>\n"}),m=()=>(0,l.jsx)(r.Z,{scope:{mockAsyncFileUpload:a.bz,useUpload:d.Z,Tools:o},noInline:!0,children:'const MyForm = () => {\n  return (\n    <Form.Handler onSubmit={async (form) => console.log(form)}>\n      <Flex.Stack>\n        <Field.Upload\n          id="async_upload_context_id"\n          path="/attachments"\n          labelDescription="Upload multiple files at once to see the upload error message. This demo has been set up so that every other file in a batch will fail."\n          asyncFileHandler={mockAsyncFileUpload}\n          required\n        />\n        <Form.SubmitButton />\n      </Flex.Stack>\n      <Output />\n    </Form.Handler>\n  )\n}\nconst Output = () => {\n  const { files } = useUpload(\'async_upload_context_id\')\n  return <Tools.Log data={files} top />\n}\nrender(<MyForm />)\n'});function g(e){const n=Object.assign({h2:"h2",h3:"h3"},(0,s.ah)(),e.components);return i||j("Examples",!1),c||j("Examples.BasicUsage",!0),f||j("Examples.Customized",!0),p||j("Examples.Required",!0),m||j("Examples.WithAsyncFileHandler",!0),u||j("Examples.WithHelp",!0),h||j("Examples.WithPath",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{children:"Demos"}),"\n",(0,l.jsx)(n.h3,{children:"Basic usage"}),"\n",(0,l.jsx)(c,{}),"\n",(0,l.jsx)(n.h3,{children:"Required"}),"\n",(0,l.jsx)(p,{}),"\n",(0,l.jsx)(n.h3,{children:"Path usage"}),"\n",(0,l.jsx)(h,{}),"\n",(0,l.jsx)(n.h3,{children:"With help"}),"\n",(0,l.jsx)(u,{}),"\n",(0,l.jsx)(n.h3,{children:"Customized"}),"\n",(0,l.jsx)(f,{}),"\n",(0,l.jsx)(n.h3,{children:"With asynchronous file handler"}),"\n",(0,l.jsx)(m,{})]})}var x=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,l.jsx)(n,Object.assign({},e,{children:(0,l.jsx)(g,e)})):g(e)};function j(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},79273:function(e,n,t){t.r(n);var i=t(52322),l=t(45392);function s(e){const n=Object.assign({h2:"h2",p:"p",code:"code",a:"a",pre:"pre"},(0,l.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Field.Upload"})," is a wrapper for the ",(0,i.jsx)(n.a,{href:"/uilib/components/upload/",children:"Upload"})," component to make it easier to use inside a form."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"import { Field } from '@dnb/eufemia/extensions/forms'\nrender(<Field.Upload />)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["There is a corresponding ",(0,i.jsx)(n.a,{href:"/uilib/extensions/forms/Value/Upload",children:"Value.Upload"})," component."]}),"\n",(0,i.jsx)(n.h2,{children:"The data and file format"}),"\n",(0,i.jsx)(n.p,{children:"The returned data is an array of objects containing a file object and a unique ID. The file object contains the file itself and some additional properties like an unique ID."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"{\n  id: '1234',\n  file: {\n    name: 'file1.jpg',\n    size: 1234,\n    type: 'image/jpeg',\n  },\n  errorMessage: 'error message ...',\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This data format will be returned by the ",(0,i.jsx)(n.code,{children:"onChange"})," and the ",(0,i.jsx)(n.code,{children:"onSubmit"})," event handlers."]}),"\n",(0,i.jsx)(n.h2,{children:"Validation"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"required"})," property will validate if there are valid files present. If there are files with an error, the validation will fail."]}),"\n",(0,i.jsxs)(n.p,{children:["If there are invalid files, the ",(0,i.jsx)(n.code,{children:"onSubmit"})," event will not be called and a validation error will be shown."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"onChange"})," event handler will return an array with objects containing the file object and some additional properties â€“ regardless of the validity of the file."]}),"\n",(0,i.jsxs)(n.p,{children:["For error handling of invalid files, you can refer to the ",(0,i.jsx)(n.a,{href:"/uilib/components/upload/",children:"Upload"})," component for more details."]}),"\n",(0,i.jsxs)(n.h2,{children:["About the ",(0,i.jsx)(n.code,{children:"value"})," and ",(0,i.jsx)(n.code,{children:"path"})," property"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"path"})," property represents an array with an object described above:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'render(\n  <Form.Handler defaultData={{ myFiles: files }}>\n    <Field.Upload path="/myFiles" />\n  </Form.Handler>,\n)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"value"})," property represents an array with an object described above:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"render(<Field.Upload value={files} />)\n"})}),"\n",(0,i.jsxs)(n.h2,{children:["About the ",(0,i.jsx)(n.code,{children:"asyncFileHandler"})," property"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"asyncFileHandler"})," is an asynchronous handler function that takes newly added files as a parameter and returns a promise containing the processed files. The component will automatically handle loading states during the upload process. This feature is useful for tasks like uploading files to a virus checker, which returns a new file ID if the file passes the check. To indicate a failed upload, set the ",(0,i.jsx)(n.code,{children:"errorMessage"})," on the specific file object with the desired message to display next to the file in the upload list."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"async function virusCheck(newFiles) {\n  const promises = newFiles.map(async (file) => {\n    const formData = new FormData()\n    formData.append('file', file.file, file.file.name)\n\n    return await fetch('/', { method: 'POST', body: formData })\n      .then((response) => {\n        if (response.ok) return response.json()\n        throw new Error('Unable to upload this file')\n      })\n      .then((data) => {\n        return {\n          ...file,\n          id: data.server_generated_id,\n        }\n      })\n      .catch((error) => {\n        return {\n          ...file,\n          errorMessage: error.message,\n        }\n      })\n  })\n\n  return await Promise.all(promises)\n}\n"})})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(s,e)})):s(e)}},36210:function(e,n,t){t.d(n,{Gz:function(){return u},KN:function(){return h},KW:function(){return f},Lq:function(){return p},OV:function(){return g},QO:function(){return c},Qb:function(){return j},av:function(){return y},bz:function(){return a},ez:function(){return d},g_:function(){return m},lb:function(){return r},zV:function(){return x}});var i=t(2784),l=t(46832),s=t(52322);function r(e,n,t){const i=new File([],e,{type:t});return Object.defineProperty(i,"size",{get(){return n}}),i}const o=(e,n)=>{i.useEffect((()=>{e([{file:r("fileName.png",123,"image/png"),...n}])}),[])};async function a(e){const n=e.map((async(e,n)=>{(new FormData).append("file",e.file,e.file.name),await new Promise((e=>setTimeout(e,Math.floor(2e3*Math.random())+1e3)));const t={ok:(n+2)%2==0,json:async()=>({server_generated_id:`${e.file.name}_${crypto.randomUUID()}`})};return await Promise.resolve(t).then((e=>{if(e.ok)return e.json();throw new Error("Unable to upload this file")})).then((n=>({...e,id:n.server_generated_id}))).catch((n=>({...e,errorMessage:n.message})))}));return await Promise.all(n)}const d=()=>(0,s.jsx)(l.Z,{"data-visual-test":"upload-file-list",scope:{useMockFiles:o},noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('file-list')\n  if (files.length) {\n    console.log('files', files)\n  }\n  useMockFiles(setFiles, {\n    errorMessage: 'This is no real file!',\n  })\n  return <Upload acceptedFileTypes={['jpg', 'png']} id=\"file-list\" />\n}\nrender(<Component />)\n"}),c=()=>(0,s.jsx)(l.Z,{"data-visual-test":"upload-basic",children:"<Upload acceptedFileTypes={['jpg', 'png']} id=\"upload-basic\" />\n"}),p=()=>(0,s.jsx)(l.Z,{noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-single-file')\n  if (files.length) {\n    console.log('files', files, setFiles)\n  }\n  return (\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-single-file\"\n      filesAmountLimit={1}\n    />\n  )\n}\nrender(<Component />)\n"}),u=()=>(0,s.jsx)(l.Z,{"data-visual-test":"upload-remove-files",noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-remove-files')\n  return (\n    <>\n      <Upload\n        acceptedFileTypes={['jpg', 'png']}\n        id=\"upload-remove-files\"\n      />\n\n      <Button\n        top=\"small\"\n        disabled={files.length < 1}\n        onClick={() => setFiles([])}\n      >\n        Remove selected files\n      </Button>\n\n      <Preview files={files} />\n    </>\n  )\n  function Preview({ files }) {\n    const [images, setImages] = React.useState([])\n    React.useEffect(() => {\n      files.map(({ file }) => {\n        let reader = new FileReader()\n        reader.addEventListener(\n          'load',\n          (event) => {\n            images.push({\n              blob: event.target,\n              file,\n            })\n            setImages([...images])\n            reader = null\n          },\n          false,\n        )\n        reader.readAsDataURL(file)\n      })\n    }, [files])\n    return (\n      <Section aria-label=\"List of chosen images\">\n        {images.map((img, i) => (\n          <Img\n            top\n            key={i}\n            src={img.blob.result}\n            alt={img.file.name}\n            height={100}\n          />\n        ))}\n      </Section>\n    )\n  }\n}\nrender(<Component />)\n"}),f=()=>(0,s.jsx)(l.Z,{scope:{useMockFiles:o},"data-visual-test":"upload-is-loading",noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-is-loading')\n  useMockFiles(setFiles, {\n    isLoading: true,\n  })\n  return (\n    <>\n      <Upload acceptedFileTypes={['jpg', 'png']} id=\"upload-is-loading\" />\n      <ToggleButton\n        top=\"small\"\n        disabled={files.length < 1}\n        on_change={({ checked }) =>\n          setFiles(\n            files.map((fileItem) => {\n              return {\n                ...fileItem,\n                isLoading: checked,\n              }\n            }),\n          )\n        }\n      >\n        Files is loading toggle\n      </ToggleButton>\n    </>\n  )\n}\nrender(<Component />)\n"}),h=()=>(0,s.jsx)(l.Z,{"data-visual-test":"upload-error-message",noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-error-message')\n  return (\n    <>\n      <Upload\n        acceptedFileTypes={['jpg', 'png']}\n        id=\"upload-error-message\"\n      />\n      <ToggleButton\n        top=\"small\"\n        disabled={files.length < 1}\n        on_change={({ checked }) => {\n          setFiles(\n            files.map((fileItem) => {\n              return {\n                ...fileItem,\n                errorMessage: checked ? 'custom error message' : null,\n              }\n            }),\n          )\n        }}\n      >\n        Toggle error message\n      </ToggleButton>\n    </>\n  )\n}\nrender(<Component />)\n"}),m=()=>(0,s.jsx)(l.Z,{noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-accepted-formats')\n  if (files.length) {\n    console.log('files', files, setFiles)\n  }\n  return (\n    <Upload\n      acceptedFileTypes={['png', 'jpg', 'pdf']}\n      id=\"upload-accepted-formats\"\n    />\n  )\n}\nrender(<Component />)\n"}),g=()=>(0,s.jsx)(l.Z,{"data-visual-test":"upload-file-max-size-based-on-file-format",hideCode:!0,children:"<Upload\n  id=\"upload-file-max-size-based-on-file-format\"\n  fileMaxSize={99}\n  acceptedFileTypes={[\n    {\n      fileType: 'jpg',\n      fileMaxSize: 1,\n    },\n    {\n      fileType: 'doc',\n      fileMaxSize: 1,\n    },\n    {\n      fileType: 'svg',\n      fileMaxSize: 1,\n    },\n    {\n      fileType: 'gif',\n      fileMaxSize: 1,\n    },\n    {\n      fileType: 'doc',\n      fileMaxSize: 4,\n    },\n    {\n      fileType: 'docx',\n      fileMaxSize: 4,\n    },\n    {\n      fileType: 'tiff',\n      fileMaxSize: 5,\n    },\n    {\n      fileType: 'tif',\n      fileMaxSize: 5,\n    },\n    {\n      fileType: 'html',\n      fileMaxSize: 6,\n    },\n    {\n      fileType: 'htm',\n      fileMaxSize: 6,\n    },\n    {\n      fileType: 'xls',\n      fileMaxSize: 7,\n    },\n    {\n      fileType: 'xlsx',\n      fileMaxSize: 7,\n    },\n    {\n      fileType: 'odt',\n    },\n    {\n      fileType: 'pdf',\n    },\n    {\n      fileType: 'text',\n      fileMaxSize: false,\n    },\n    {\n      fileType: 'txt',\n      fileMaxSize: 0,\n    },\n    {\n      fileType: 'zip',\n      fileMaxSize: 99,\n    },\n  ]}\n/>\n"}),x=()=>(0,s.jsx)(l.Z,{children:"<Upload\n  id=\"upload-file-max-size-based-on-file-format-disabled\"\n  acceptedFileTypes={[\n    {\n      fileType: 'jpg',\n      fileMaxSize: 0,\n    },\n    {\n      fileType: 'doc',\n      fileMaxSize: false,\n    },\n    {\n      fileType: 'svg',\n    },\n  ]}\n/>\n"}),j=()=>(0,s.jsx)(l.Z,{"data-visual-test":"upload-disabled-file-max-size",children:"<Upload\n  acceptedFileTypes={['jpg', 'pdf']}\n  id=\"upload-disabled-file-max-size\"\n  fileMaxSize={false}\n/>\n"}),y=()=>(0,s.jsx)(l.Z,{"data-visual-test":"upload-no-title-no-text",children:"<Upload\n  title={false}\n  text={false}\n  acceptedFileTypes={['jpg', 'png']}\n  id=\"upload-no-title-no-text\"\n/>\n"})},38734:function(e,n,t){t.d(n,{Z:function(){return a}});var i=t(84616),l=t(2784),s=t(2394),r=t(21068);const o=["minLength","maxLength","pattern","description","min","max","multipleOf","exclusiveMinimum","exclusiveMaximum"];function a(e){const{generateRef:n,filterData:t,log:a,children:d}=e||{},{fieldPropsRef:c,valuePropsRef:p,data:u,hasContext:f}=(0,l.useContext)(r.Z),h=(0,l.useRef)({});h.current=u;const m=(0,l.useCallback)((()=>{const e=Object.entries((null==c?void 0:c.current)||{}).reduce(((e,n)=>{let[l,r]=n;if(l.startsWith("/")){const n=l.substring(1),a=n.split("/"),d=a.length,c={type:r.valueType||"string"};for(const e of o)r[e]&&(c[e]=r[e]);if(d>1){const n=[""];for(const l of a){n.push(l);const o=n.join("/properties/"),d=n.length-1===a.length,p=s.e$(e,o)?s.U2(e,o):null,u=d?c:p;if(d)!1!==(null==t?void 0:t[o])&&s.t8(e,o,u);else{const n={type:"object",...p},l=[];r.required&&l.push(a.at(-1)),null!=p&&p.required&&l.push.apply(l,(0,i.Z)(p.required)),l.length>0&&(n.required=l),!1!==(null==t?void 0:t[o])&&s.t8(e,o,n)}}}else!1!==(null==t?void 0:t[l])&&s.t8(e.properties,l,c),r.required&&e.required.push(n)}return e}),{type:"object",properties:{},required:[]}),n=Object.entries((null==c?void 0:c.current)||{}).reduce(((e,n)=>{let[t,i]=n;if(t.startsWith("/")){const n={};for(const e in i)void 0!==i[e]&&"function"!=typeof i[e]&&(n[e]=i[e]);s.t8(e,t,n)}return e}),{}),l=Object.entries((null==p?void 0:p.current)||{}).reduce(((e,n)=>{let[t,i]=n;if(t.startsWith("/")){const n={};for(const e in i)void 0!==i[e]&&"function"!=typeof i[e]&&(n[e]=i[e]);s.t8(e,t,n)}return e}),{});return 0===e.required.length&&delete e.required,{schema:e,data:h.current,propsOfFields:n,propsOfValues:l}}),[c,t,p]);return f&&(a&&console.log(m().schema),n&&(n.current=m)),d}},10454:function(e,n,t){t.d(n,{Z:function(){return r}});var i=t(2784),l=t(2394),s=t(21068);function r(e){const{log:n,generateRef:t,filterData:r,children:o}=e||{},{fieldPropsRef:a,valuePropsRef:d,data:c,hasContext:p}=(0,i.useContext)(s.Z);(0,i.useRef)({}).current=c;const u=(0,i.useCallback)((()=>{const e=Object.entries((null==a?void 0:a.current)||{}).reduce(((e,n)=>{let[t,s]=n;if(t.startsWith("/")){const n={};for(const e in s)void 0===s[e]||"function"==typeof s[e]||(0,i.isValidElement)(s[e])||(n[e]=s[e]);!1!==(null==r?void 0:r[t])&&l.t8(e,t,n)}return e}),{}),n=Object.entries((null==d?void 0:d.current)||{}).reduce(((e,n)=>{let[t,s]=n;if(t.startsWith("/")){const n={};for(const e in s)void 0===s[e]||"function"==typeof s[e]||(0,i.isValidElement)(s[e])||(n[e]=s[e]);!1!==(null==r?void 0:r[t])&&l.t8(e,t,n)}return e}),{});return{propsOfFields:e,propsOfValues:n}}),[a,r,d]);return p&&(n&&console.log(u()),t&&(t.current=u)),o}},90584:function(e,n,t){var i=t(2784),l=t(21068),s=t(4408),r=t(9149),o=t(52322);function a(e){let{placeholder:n,label:t,data:a,...c}=e;const{data:p}=(0,i.useContext)(l.Z);return(0,o.jsxs)(s.Z,{element:"output",backgroundColor:"sand-yellow",style:{maxWidth:"80vw"},innerSpace:!0,...c,children:[t&&(0,o.jsx)(r.Z,{bottom:!0,children:(0,o.jsx)("b",{children:t})}),(0,o.jsxs)("pre",{children:[n&&0===Object.keys((null!=a?a:p)||{}).length?n:JSON.stringify(d(null!=a?a:p),null,2),"Â "]})]})}function d(e,n){return void 0===n&&(n="undefined"),void 0===e?n:e&&"object"==typeof e&&e!==n?{...e,...Object.fromEntries(Object.entries(e).map((e=>{let[n,t]=e;return[n,d(t)]})))}:e}a._supportsSpacingProps=!0,n.Z=a},4902:function(e,n,t){t.r(n),t.d(n,{GenerateSchema:function(){return i.Z},ListAllProps:function(){return l.Z},Log:function(){return s.Z}});var i=t(38734),l=t(10454),s=t(90584)}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-feature-fields-more-fields-upload-mdx-668114819c1742171567.js.map