{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-more-fields-upload-mdx-668114819c1742171567.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/more-fields/Upload.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/more-fields/Upload/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/more-fields/Upload/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/more-fields/Upload/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/upload/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/GenerateSchema.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/ListAllProps.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/Log.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/feature-fields/more-fields/Upload/info';\nimport Demos from 'Docs/uilib/extensions/forms/feature-fields/more-fields/Upload/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { Flex } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../../shared/tags/ComponentBox'\nimport { Field, Form, Tools } from '@dnb/eufemia/src/extensions/forms'\nimport {\n  createMockFile,\n  mockAsyncFileUpload,\n} from '../../../../../../../docs/uilib/components/upload/Examples'\nimport useUpload from '@dnb/eufemia/src/components/upload/useUpload'\n\nexport const BasicUsage = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Field.Upload\n          label=\"My custom label\"\n          labelDescription=\"My description\"\n        />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Required = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler onSubmit={(data) => console.log('onSubmit', data)}>\n        <Flex.Stack>\n          <Field.Upload path=\"/myFiles\" required />\n          <Form.SubmitButton />\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithHelp = () => {\n  return (\n    <ComponentBox>\n      <Field.Upload\n        help={{\n          title: 'Help title',\n          content: 'Help content',\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Customized = () => {\n  return (\n    <ComponentBox data-visual-test=\"upload-field-customized\">\n      <Field.Upload\n        title=\"My custom title\"\n        text=\"My text with a help button\"\n        width=\"large\"\n        help={{\n          title: 'Help title',\n          content: 'Help content',\n        }}\n        warning=\"Warning message\"\n        acceptedFileTypes={['pdf']}\n        filesAmountLimit={1}\n        fileMaxSize={1}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithPath = () => {\n  return (\n    <ComponentBox scope={{ createMockFile }}>\n      <Form.Handler\n        onChange={(data) => console.log('onChange', data)}\n        data={{\n          myFiles: [\n            { file: createMockFile('fileName-1.png', 100, 'image/png') },\n          ],\n        }}\n      >\n        <Field.Upload path=\"/myFiles\" />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithAsyncFileHandler = () => {\n  return (\n    <ComponentBox scope={{ mockAsyncFileUpload, useUpload, Tools }}>\n      {() => {\n        const MyForm = () => {\n          return (\n            <Form.Handler onSubmit={async (form) => console.log(form)}>\n              <Flex.Stack>\n                <Field.Upload\n                  id=\"async_upload_context_id\"\n                  path=\"/attachments\"\n                  labelDescription=\"Upload multiple files at once to see the upload error message. This demo has been set up so that every other file in a batch will fail.\"\n                  asyncFileHandler={mockAsyncFileUpload}\n                  required\n                />\n                <Form.SubmitButton />\n              </Flex.Stack>\n              <Output />\n            </Form.Handler>\n          )\n        }\n\n        const Output = () => {\n          const { files } = useUpload('async_upload_context_id')\n          return <Tools.Log data={files} top />\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.BasicUsage) _missingMdxReference(\"Examples.BasicUsage\", true);\n  if (!Examples.Customized) _missingMdxReference(\"Examples.Customized\", true);\n  if (!Examples.Required) _missingMdxReference(\"Examples.Required\", true);\n  if (!Examples.WithAsyncFileHandler) _missingMdxReference(\"Examples.WithAsyncFileHandler\", true);\n  if (!Examples.WithHelp) _missingMdxReference(\"Examples.WithHelp\", true);\n  if (!Examples.WithPath) _missingMdxReference(\"Examples.WithPath\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Basic usage\"\n    }), \"\\n\", _jsx(Examples.BasicUsage, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Required\"\n    }), \"\\n\", _jsx(Examples.Required, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Path usage\"\n    }), \"\\n\", _jsx(Examples.WithPath, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With help\"\n    }), \"\\n\", _jsx(Examples.WithHelp, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Customized\"\n    }), \"\\n\", _jsx(Examples.Customized, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With asynchronous file handler\"\n    }), \"\\n\", _jsx(Examples.WithAsyncFileHandler, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Field.Upload\"\n      }), \" is a wrapper for the \", _jsx(_components.a, {\n        href: \"/uilib/components/upload/\",\n        children: \"Upload\"\n      }), \" component to make it easier to use inside a form.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Field } from '@dnb/eufemia/extensions/forms'\\nrender(<Field.Upload />)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There is a corresponding \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Value/Upload\",\n        children: \"Value.Upload\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"The data and file format\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The returned data is an array of objects containing a file object and a unique ID. The file object contains the file itself and some additional properties like an unique ID.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"{\\n  id: '1234',\\n  file: {\\n    name: 'file1.jpg',\\n    size: 1234,\\n    type: 'image/jpeg',\\n  },\\n  errorMessage: 'error message ...',\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This data format will be returned by the \", _jsx(_components.code, {\n        children: \"onChange\"\n      }), \" and the \", _jsx(_components.code, {\n        children: \"onSubmit\"\n      }), \" event handlers.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Validation\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" property will validate if there are valid files present. If there are files with an error, the validation will fail.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If there are invalid files, the \", _jsx(_components.code, {\n        children: \"onSubmit\"\n      }), \" event will not be called and a validation error will be shown.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"onChange\"\n      }), \" event handler will return an array with objects containing the file object and some additional properties – regardless of the validity of the file.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For error handling of invalid files, you can refer to the \", _jsx(_components.a, {\n        href: \"/uilib/components/upload/\",\n        children: \"Upload\"\n      }), \" component for more details.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"About the \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"path\"\n      }), \" property\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"path\"\n      }), \" property represents an array with an object described above:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"render(\\n  <Form.Handler defaultData={{ myFiles: files }}>\\n    <Field.Upload path=\\\"/myFiles\\\" />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" property represents an array with an object described above:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"render(<Field.Upload value={files} />)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"About the \", _jsx(_components.code, {\n        children: \"asyncFileHandler\"\n      }), \" property\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"asyncFileHandler\"\n      }), \" is an asynchronous handler function that takes newly added files as a parameter and returns a promise containing the processed files. The component will automatically handle loading states during the upload process. This feature is useful for tasks like uploading files to a virus checker, which returns a new file ID if the file passes the check. To indicate a failed upload, set the \", _jsx(_components.code, {\n        children: \"errorMessage\"\n      }), \" on the specific file object with the desired message to display next to the file in the upload list.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"async function virusCheck(newFiles) {\\n  const promises = newFiles.map(async (file) => {\\n    const formData = new FormData()\\n    formData.append('file', file.file, file.file.name)\\n\\n    return await fetch('/', { method: 'POST', body: formData })\\n      .then((response) => {\\n        if (response.ok) return response.json()\\n        throw new Error('Unable to upload this file')\\n      })\\n      .then((data) => {\\n        return {\\n          ...file,\\n          id: data.server_generated_id,\\n        }\\n      })\\n      .catch((error) => {\\n        return {\\n          ...file,\\n          errorMessage: error.message,\\n        }\\n      })\\n  })\\n\\n  return await Promise.all(promises)\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport {\n  Button,\n  ToggleButton,\n  Img,\n  Section,\n  Upload,\n} from '@dnb/eufemia/src'\nimport { UploadValue } from '@dnb/eufemia/src/extensions/forms/Field/Upload'\n\nexport function createMockFile(name: string, size: number, type: string) {\n  const file = new File([], name, { type })\n  Object.defineProperty(file, 'size', {\n    get() {\n      return size\n    },\n  })\n  return file\n}\n\nconst useMockFiles = (setFiles, extend) => {\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('fileName.png', 123, 'image/png'),\n        ...extend,\n      },\n    ])\n  }, [])\n}\n\nexport async function mockAsyncFileUpload(\n  newFiles: UploadValue,\n): Promise<UploadValue> {\n  const promises = newFiles.map(async (file, index) => {\n    const formData = new FormData()\n    formData.append('file', file.file, file.file.name)\n\n    await new Promise((resolve) =>\n      setTimeout(resolve, Math.floor(Math.random() * 2000) + 1000),\n    )\n\n    const mockResponse = {\n      ok: (index + 2) % 2 === 0, // Every other request will fail\n      json: async () => ({\n        server_generated_id: `${file.file.name}_${crypto.randomUUID()}`,\n      }),\n    }\n\n    return await Promise.resolve(mockResponse)\n      .then((res) => {\n        if (res.ok) return res.json()\n        throw new Error('Unable to upload this file')\n      })\n      .then((data) => {\n        return {\n          ...file,\n          id: data.server_generated_id,\n        }\n      })\n      .catch((error) => {\n        return {\n          ...file,\n          errorMessage: error.message,\n        }\n      })\n  })\n\n  return await Promise.all(promises)\n}\n\nexport const UploadPrefilledFileList = () => (\n  <ComponentBox\n    data-visual-test=\"upload-file-list\"\n    scope={{ useMockFiles }}\n  >\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('file-list')\n\n        if (files.length) {\n          console.log('files', files)\n        }\n\n        useMockFiles(setFiles, { errorMessage: 'This is no real file!' })\n\n        return <Upload acceptedFileTypes={['jpg', 'png']} id=\"file-list\" />\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadBasic = () => (\n  <ComponentBox data-visual-test=\"upload-basic\">\n    <Upload acceptedFileTypes={['jpg', 'png']} id=\"upload-basic\" />\n  </ComponentBox>\n)\n\nexport const UploadSingleFile = () => (\n  <ComponentBox>\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-single-file')\n\n        if (files.length) {\n          console.log('files', files, setFiles)\n        }\n\n        return (\n          <Upload\n            acceptedFileTypes={['jpg', 'png']}\n            id=\"upload-single-file\"\n            filesAmountLimit={1}\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadRemoveFile = () => (\n  <ComponentBox data-visual-test=\"upload-remove-files\">\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-remove-files')\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-remove-files\"\n            />\n\n            <Button\n              top=\"small\"\n              disabled={files.length < 1}\n              onClick={() => setFiles([])}\n            >\n              Remove selected files\n            </Button>\n\n            <Preview files={files} />\n          </>\n        )\n\n        function Preview({ files }) {\n          const [images, setImages] = React.useState([])\n\n          React.useEffect(() => {\n            files.map(({ file }) => {\n              let reader = new FileReader()\n\n              reader.addEventListener(\n                'load',\n                (event) => {\n                  images.push({ blob: event.target, file })\n                  setImages([...images])\n                  reader = null\n                },\n                false,\n              )\n\n              reader.readAsDataURL(file)\n            })\n          }, [files])\n\n          return (\n            <Section aria-label=\"List of chosen images\">\n              {images.map((img, i) => (\n                <Img\n                  top\n                  key={i}\n                  src={img.blob.result}\n                  alt={img.file.name}\n                  height={100}\n                />\n              ))}\n            </Section>\n          )\n        }\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadIsLoading = () => (\n  <ComponentBox\n    scope={{ useMockFiles }}\n    data-visual-test=\"upload-is-loading\"\n  >\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-is-loading')\n\n        useMockFiles(setFiles, { isLoading: true })\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-is-loading\"\n            />\n            <ToggleButton\n              top=\"small\"\n              disabled={files.length < 1}\n              on_change={({ checked }) =>\n                setFiles(\n                  files.map((fileItem) => {\n                    return { ...fileItem, isLoading: checked }\n                  }),\n                )\n              }\n            >\n              Files is loading toggle\n            </ToggleButton>\n          </>\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadErrorMessage = () => (\n  <ComponentBox data-visual-test=\"upload-error-message\">\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload(\n          'upload-error-message',\n        )\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-error-message\"\n            />\n            <ToggleButton\n              top=\"small\"\n              disabled={files.length < 1}\n              on_change={({ checked }) => {\n                setFiles(\n                  files.map((fileItem) => {\n                    return {\n                      ...fileItem,\n                      errorMessage: checked\n                        ? 'custom error message'\n                        : null,\n                    }\n                  }),\n                )\n              }}\n            >\n              Toggle error message\n            </ToggleButton>\n          </>\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadAcceptedFormats = () => (\n  <ComponentBox>\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload(\n          'upload-accepted-formats',\n        )\n\n        if (files.length) {\n          console.log('files', files, setFiles)\n        }\n\n        return (\n          <Upload\n            acceptedFileTypes={['png', 'jpg', 'pdf']}\n            id=\"upload-accepted-formats\"\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadFileMaxSizeBasedOnFileType = () => (\n  <ComponentBox\n    data-visual-test=\"upload-file-max-size-based-on-file-format\"\n    hideCode\n  >\n    <Upload\n      id=\"upload-file-max-size-based-on-file-format\"\n      fileMaxSize={99}\n      acceptedFileTypes={[\n        { fileType: 'jpg', fileMaxSize: 1 },\n        { fileType: 'doc', fileMaxSize: 1 },\n        { fileType: 'svg', fileMaxSize: 1 },\n        { fileType: 'gif', fileMaxSize: 1 },\n        { fileType: 'doc', fileMaxSize: 4 },\n        { fileType: 'docx', fileMaxSize: 4 },\n        { fileType: 'tiff', fileMaxSize: 5 },\n        { fileType: 'tif', fileMaxSize: 5 },\n        { fileType: 'html', fileMaxSize: 6 },\n        { fileType: 'htm', fileMaxSize: 6 },\n        { fileType: 'xls', fileMaxSize: 7 },\n        { fileType: 'xlsx', fileMaxSize: 7 },\n        { fileType: 'odt' },\n        { fileType: 'pdf' },\n        { fileType: 'text', fileMaxSize: false },\n        { fileType: 'txt', fileMaxSize: 0 },\n        { fileType: 'zip', fileMaxSize: 99 },\n      ]}\n    />\n  </ComponentBox>\n)\n\nexport const UploadFileMaxSizeBasedOnFileTypeDisabled = () => (\n  <ComponentBox>\n    <Upload\n      id=\"upload-file-max-size-based-on-file-format-disabled\"\n      acceptedFileTypes={[\n        { fileType: 'jpg', fileMaxSize: 0 },\n        { fileType: 'doc', fileMaxSize: false },\n        { fileType: 'svg' },\n      ]}\n    />\n  </ComponentBox>\n)\n\nexport const UploadDisabledFileMaxSize = () => (\n  <ComponentBox data-visual-test=\"upload-disabled-file-max-size\">\n    <Upload\n      acceptedFileTypes={['jpg', 'pdf']}\n      id=\"upload-disabled-file-max-size\"\n      fileMaxSize={false}\n    />\n  </ComponentBox>\n)\n\nexport const UploadNoTitleNoText = () => (\n  <ComponentBox data-visual-test=\"upload-no-title-no-text\">\n    <Upload\n      title={false}\n      text={false}\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-no-title-no-text\"\n    />\n  </ComponentBox>\n)\n","import { useCallback, useContext, useRef } from 'react'\nimport pointer, { JsonObject } from '../utils/json-pointer'\nimport DataContext, { FilterData } from '../DataContext/Context'\nimport { JSONSchema } from '../types'\n\nexport type GenerateSchemaReturn = {\n  schema: JSONSchema\n  data: JsonObject\n  propsOfFields: JsonObject\n  propsOfValues: JsonObject\n}\nexport type GenerateSchemaProps = {\n  log?: boolean\n  generateRef?: React.MutableRefObject<() => GenerateSchemaReturn>\n  filterData?: FilterData\n  children: React.ReactNode\n}\nexport type GenerateRef = GenerateSchemaProps['generateRef']['current']\n\nexport const schemaParams = [\n  'minLength',\n  'maxLength',\n  'pattern',\n  'description',\n  'min',\n  'max',\n  'multipleOf',\n  'exclusiveMinimum',\n  'exclusiveMaximum',\n]\n\nexport default function GenerateSchema(props: GenerateSchemaProps) {\n  const { generateRef, filterData, log, children } = props || {}\n  const { fieldPropsRef, valuePropsRef, data, hasContext } =\n    useContext(DataContext)\n\n  const dataRef = useRef<JsonObject>({})\n  dataRef.current = data\n\n  const generate = useCallback(() => {\n    const schema = Object.entries(fieldPropsRef?.current || {}).reduce(\n      (acc, [path, props]) => {\n        if (path.startsWith('/')) {\n          const objectKey = path.substring(1)\n\n          const pathList = objectKey.split('/')\n          const slashCount = pathList.length\n\n          const type = props.valueType || 'string'\n          const propertyValue = {\n            type,\n          }\n\n          for (const prop of schemaParams) {\n            if (props[prop]) {\n              propertyValue[prop] = props[prop]\n            }\n          }\n\n          if (slashCount > 1) {\n            const nestedPath = ['']\n            for (const path of pathList) {\n              nestedPath.push(path)\n              const pathToSet = nestedPath.join('/properties/')\n              const isLast = nestedPath.length - 1 === pathList.length\n\n              const existingValue = pointer.has(acc, pathToSet)\n                ? pointer.get(acc, pathToSet)\n                : null\n\n              const pathValue = isLast ? propertyValue : existingValue\n\n              if (isLast) {\n                if (filterData?.[pathToSet] !== false) {\n                  pointer.set(acc, pathToSet, pathValue)\n                }\n              } else {\n                const pathValue = {\n                  type: 'object',\n                  ...existingValue,\n                }\n\n                // - Add required\n                const required = []\n                if (props.required) {\n                  required.push(pathList.at(-1))\n                }\n                if (existingValue?.required) {\n                  required.push(...existingValue.required)\n                }\n                if (required.length > 0) {\n                  pathValue.required = required\n                }\n\n                if (filterData?.[pathToSet] !== false) {\n                  pointer.set(acc, pathToSet, pathValue)\n                }\n              }\n            }\n          } else {\n            if (filterData?.[path] !== false) {\n              pointer.set(acc.properties, path, propertyValue)\n            }\n            if (props.required) {\n              acc.required.push(objectKey)\n            }\n          }\n        }\n\n        return acc\n      },\n      { type: 'object', properties: {}, required: [] }\n    )\n\n    const propsOfFields = Object.entries(\n      fieldPropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function'\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        pointer.set(acc, path, propertyValue)\n      }\n\n      return acc\n    }, {})\n\n    const propsOfValues = Object.entries(\n      valuePropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function'\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        pointer.set(acc, path, propertyValue)\n      }\n\n      return acc\n    }, {})\n\n    if (schema.required.length === 0) {\n      delete schema.required\n    }\n\n    return {\n      schema,\n      data: dataRef.current,\n      propsOfFields,\n      propsOfValues,\n    } as GenerateSchemaReturn\n  }, [fieldPropsRef, filterData, valuePropsRef])\n\n  if (hasContext) {\n    if (log) {\n      console.log(generate().schema)\n    }\n\n    if (generateRef) {\n      generateRef.current = generate\n    }\n  }\n\n  return children\n}\n","import { isValidElement, useCallback, useContext, useRef } from 'react'\nimport pointer, { JsonObject } from '../utils/json-pointer'\nimport DataContext, { FilterData } from '../DataContext/Context'\n\nexport type ListAllPropsReturn = {\n  propsOfFields: JsonObject\n  propsOfValues: JsonObject\n}\nexport type ListAllPropsProps = {\n  log?: boolean\n  generateRef?: React.MutableRefObject<() => ListAllPropsReturn>\n  filterData?: FilterData\n  children: React.ReactNode\n}\nexport type GenerateRef = ListAllPropsProps['generateRef']['current']\n\nexport default function ListAllProps(props: ListAllPropsProps) {\n  const { log, generateRef, filterData, children } = props || {}\n  const { fieldPropsRef, valuePropsRef, data, hasContext } =\n    useContext(DataContext)\n\n  const dataRef = useRef<JsonObject>({})\n  dataRef.current = data\n\n  const generate = useCallback(() => {\n    const propsOfFields = Object.entries(\n      fieldPropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function' &&\n            !isValidElement(props[prop])\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        if (filterData?.[path] !== false) {\n          pointer.set(acc, path, propertyValue)\n        }\n      }\n\n      return acc\n    }, {})\n\n    const propsOfValues = Object.entries(\n      valuePropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function' &&\n            !isValidElement(props[prop])\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        if (filterData?.[path] !== false) {\n          pointer.set(acc, path, propertyValue)\n        }\n      }\n\n      return acc\n    }, {})\n\n    return { propsOfFields, propsOfValues } as ListAllPropsReturn\n  }, [fieldPropsRef, filterData, valuePropsRef])\n\n  if (hasContext) {\n    if (log) {\n      console.log(generate())\n    }\n\n    if (generateRef) {\n      generateRef.current = generate\n    }\n  }\n\n  return children\n}\n","import React, { useContext } from 'react'\nimport DataContext from '../DataContext/Context'\nimport Section, { SectionAllProps } from '../../../components/Section'\nimport { FormLabel } from '../../../components'\n\nfunction Log({\n  placeholder,\n  label,\n  data: logData,\n  ...props\n}: Omit<SectionAllProps, 'data' | 'label'> & {\n  data?: unknown\n  label?: React.ReactNode\n  placeholder?: React.ReactNode\n}) {\n  const { data } = useContext(DataContext)\n\n  return (\n    <Section\n      element=\"output\"\n      backgroundColor=\"sand-yellow\"\n      style={{ maxWidth: '80vw' }}\n      innerSpace\n      {...props}\n    >\n      {label && (\n        <FormLabel bottom>\n          <b>{label}</b>\n        </FormLabel>\n      )}\n      <pre>\n        {placeholder && Object.keys((logData ?? data) || {}).length === 0\n          ? placeholder\n          : JSON.stringify(\n              replaceUndefinedValues(logData ?? data),\n              null,\n              2\n            )}\n        {' ' /* Ensure one line of spacing */}\n      </pre>\n    </Section>\n  )\n}\n\n/**\n * Replaces undefined values in an object with a specified replacement value.\n * @param value - The value to check for undefined values.\n * @param replaceWith - The value to replace undefined values with. Default is null.\n * @returns The object with undefined values replaced.\n */\nfunction replaceUndefinedValues(\n  value: unknown,\n  replaceWith = 'undefined' as unknown\n): unknown {\n  if (typeof value === 'undefined') {\n    return replaceWith\n  } else if (value && typeof value === 'object' && value !== replaceWith) {\n    return {\n      ...value,\n      ...Object.fromEntries(\n        Object.entries(value).map(([k, v]) => [\n          k,\n          replaceUndefinedValues(v),\n        ])\n      ),\n    }\n  } else {\n    return value\n  }\n}\n\nLog._supportsSpacingProps = true\nexport default Log\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","BasicUsage","ComponentBox","Required","WithHelp","Customized","WithPath","scope","createMockFile","WithAsyncFileHandler","mockAsyncFileUpload","useUpload","Tools","noInline","_components","h2","h3","Examples","_missingMdxReference","id","component","Error","p","code","a","pre","href","className","name","size","type","file","File","defineProperty","get","useMockFiles","setFiles","extend","React","async","newFiles","promises","map","index","FormData","append","Promise","resolve","setTimeout","Math","floor","random","mockResponse","ok","json","server_generated_id","crypto","randomUUID","then","res","data","catch","error","errorMessage","message","all","UploadPrefilledFileList","UploadBasic","UploadSingleFile","UploadRemoveFile","UploadIsLoading","UploadErrorMessage","UploadAcceptedFormats","UploadFileMaxSizeBasedOnFileType","hideCode","UploadFileMaxSizeBasedOnFileTypeDisabled","UploadDisabledFileMaxSize","UploadNoTitleNoText","schemaParams","GenerateSchema","generateRef","filterData","log","fieldPropsRef","valuePropsRef","hasContext","useContext","DataContext","dataRef","useRef","current","generate","useCallback","schema","entries","reduce","acc","_ref","path","startsWith","objectKey","substring","pathList","split","slashCount","length","propertyValue","valueType","prop","nestedPath","push","pathToSet","join","isLast","existingValue","pointer","pathValue","required","at","apply","_toConsumableArray","properties","propsOfFields","_ref2","undefined","propsOfValues","_ref3","console","ListAllProps","isValidElement","Log","placeholder","label","logData","Section","element","backgroundColor","style","maxWidth","innerSpace","FormLabel","bottom","keys","JSON","stringify","replaceUndefinedValues","value","replaceWith","fromEntries","k","v","_supportsSpacingProps"],"sourceRoot":""}