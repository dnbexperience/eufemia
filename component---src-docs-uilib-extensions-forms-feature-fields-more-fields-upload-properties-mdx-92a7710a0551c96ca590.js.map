{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-more-fields-upload-properties-mdx-92a7710a0551c96ca590.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/more-fields/Upload/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/TranslationsTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/upload/UploadDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/Upload/UploadDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueWritePropsDocs.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport TranslationsTable from 'dnb-design-system-portal/src/shared/parts/TranslationsTable';\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {FieldProperties} from '@dnb/eufemia/src/extensions/forms/Field/FieldDocs';\nimport {UploadFieldProperties} from '@dnb/eufemia/src/extensions/forms/Field/Upload/UploadDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field-specific properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: UploadFieldProperties\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"General properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: FieldProperties,\n      valueType: ['Array<{ file, id }>'],\n      omit: ['layout', 'layoutOptions', 'onBlurValidator', 'contentWidth']\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Translations\"\n    }), \"\\n\", _jsx(TranslationsTable, {\n      localeKey: ['Upload']\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import styled from '@emotion/styled'\nimport { Anchor, P, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { extendDeep, warn } from '@dnb/eufemia/src/shared/component-helper'\nimport globalTranslations from '@dnb/eufemia/src/shared/locales'\nimport formsTranslations from '@dnb/eufemia/src/extensions/forms/constants/locales'\nimport { FormattedCode } from './PropertiesTable'\nimport { Translation } from '@dnb/eufemia/src/shared/Context'\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nexport default function TranslationsTable({\n  localeKey,\n  source = null,\n}: {\n  localeKey?: string | Array<string>\n  source?: Record<string, Translation>\n}) {\n  if (!source) {\n    source = extendDeep({}, globalTranslations, formsTranslations)\n  }\n\n  const entries = {}\n  const allowList = {}\n  const localeKeys = (\n    Array.isArray(localeKey) ? localeKey : [localeKey]\n  ).map((key) => {\n    if (key.includes('.')) {\n      const first = key.split('.')[0]\n      allowList[first] = allowList[first] || []\n      allowList[first].push(key)\n      return first\n    }\n\n    return key\n  })\n\n  const addToEntries = (key, translation, locale, localeKey) => {\n    key = `${localeKey}.${key}`\n    if (allowList[localeKey] && !allowList[localeKey].includes(key)) {\n      return\n    }\n    entries[key] = Object.assign(entries[key] || {}, {\n      [locale]: translation,\n    })\n  }\n\n  Object.entries(source).forEach(([locale, translations]) => {\n    localeKeys.forEach((localeKey) => {\n      const translationsObj = translations[localeKey]\n      if (!translationsObj) {\n        warn(\n          `TranslationsTable: Could not find any translations for key: \"${localeKey}\", perhaps you misspelled the key's name?`,\n        )\n        return\n      }\n      Object.entries(translationsObj).forEach(([key, translation]) => {\n        if (typeof translation === 'object') {\n          const nestedKey = `${localeKey}.${key}`\n          Object.entries(translation).forEach(([key, translation]) => {\n            addToEntries(key, translation, locale, nestedKey)\n          })\n        } else {\n          addToEntries(key, translation, locale, localeKey)\n        }\n      })\n    })\n  })\n\n  const locales = Object.keys(source)\n  const tableRows = Object.entries(entries).map(([key, values]) => {\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode variant=\"prop\">{key}</FormattedCode>\n        </Td>\n        {Object.entries(values).map(([locale, value], i) => {\n          return (\n            <Td key={i + locale}>\n              {typeof value === 'string' ? (\n                value\n              ) : (\n                <pre>{JSON.stringify(value, null, 2)}</pre>\n              )}\n            </Td>\n          )\n        })}\n      </Tr>\n    )\n  })\n\n  if (tableRows.length == 0) {\n    warn(\n      `TranslationsTable: Not able to find any translations for input : \"${localeKey}\", hence not rendering the translations table.`,\n    )\n    return\n  }\n\n  return (\n    <>\n      <P>\n        More info about translations can be found in the{' '}\n        <Anchor href=\"/uilib/usage/customisation/localization/\">\n          general localization\n        </Anchor>{' '}\n        and{' '}\n        <Anchor href=\"/uilib/extensions/forms/getting-started/#localization-and-translation\">\n          Eufemia Forms localization\n        </Anchor>{' '}\n        docs.\n      </P>\n      <Table.ScrollView>\n        <StyledTable>\n          <thead>\n            <Tr>\n              <Th>Key</Th>\n              {locales.map((locale) => (\n                <Th key={locale}>{locale}</Th>\n              ))}\n            </Tr>\n          </thead>\n          <tbody>{tableRows}</tbody>\n        </StyledTable>\n      </Table.ScrollView>\n    </>\n  )\n}\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const UploadProperties: PropertiesTableProps = {\n  id: {\n    doc: 'Unique id used with the useUpload hook to manage the files. Needed when wanting to connect with the useUpload hook.',\n    type: ['string', 'Function', 'Object', 'React.Context'],\n    status: 'optional',\n  },\n  acceptedFileTypes: {\n    doc: 'List of accepted file types. Either as string or [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype). When providing a list of [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype), the accepted file types will be presented in a table(see [example](/uilib/components/upload/demos/#upload-with-file-max-size-based-on-file-type)).',\n    type: ['Array<string>', 'Array<AcceptedFileType>'],\n    status: 'required',\n  },\n  filesAmountLimit: {\n    doc: 'Defines the amount of files the user can select and upload. Defaults to 100.',\n    type: 'number',\n    status: 'optional',\n  },\n  fileMaxSize: {\n    doc: 'Defines the max file size of each file in MB. Use either `0` or `false` to disable. Defaults to 5 MB.',\n    type: ['number', 'false'],\n    status: 'optional',\n  },\n  title: {\n    doc: 'Custom text property. Replaces the default title. Can be disabled using `false`.',\n    type: 'string',\n    status: 'optional',\n  },\n  text: {\n    doc: 'Custom text property. Replaces the default text. Can be disabled using `false`.',\n    type: 'string',\n    status: 'optional',\n  },\n  download: {\n    doc: 'Causes the browser to treat all listed files as downloadable instead of opening them in a new browser tab or window. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'Skeleton should be applied when loading content.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const AcceptedFileTypeProperties: PropertiesTableProps = {\n  fileType: {\n    doc: 'The name of the accepted file type.',\n    type: 'string',\n    status: 'required',\n  },\n  fileMaxSize: {\n    doc: 'Defines the max file size of the given file type in MB. Use either `0` or `false` to disable. If not provided, it defaults to the value of [Uploads](/uilib/components/upload/properties/#properties) `fileMaxSize` which defaults to 5 MB.',\n    type: ['number', 'false'],\n    status: 'optional',\n  },\n}\n\nexport const UploadEvents: PropertiesTableProps = {\n  onChange: {\n    doc: 'Will be called on `files` changes made by the user. Access the files with `{ files }` (containing each a `fileItem`).',\n    type: 'function',\n    status: 'optional',\n  },\n  onFileDelete: {\n    doc: 'Will be called once a file gets deleted by the user. Access the deleted file with `{ fileItem }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  onFileClick: {\n    doc: 'Will be called once a file gets clicked on by the user. Access the clicked file with `{ fileItem }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { FieldBlockSharedProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  DataValueWritePropsEvents,\n  DataValueWritePropsProperties,\n} from '../hooks/DataValueWritePropsDocs'\n\nexport const FieldProperties: PropertiesTableProps = {\n  ...DataValueWritePropsProperties,\n  ...FieldBlockSharedProperties,\n}\n\nexport const FieldEvents: PropertiesTableProps = {\n  ...DataValueWritePropsEvents,\n}\n\nexport const getFieldEventsWithTypes = (\n  valueType: { type: string; optional?: boolean } = undefined,\n  additionalArgsType: { type: string; optional?: boolean } = undefined\n): PropertiesTableProps => {\n  const value = valueType\n    ? `value${valueType.optional ? '?' : ''}: ${valueType.type}`\n    : 'value'\n\n  const add = additionalArgsType\n    ? `, additionalArgs${additionalArgsType.optional ? '?' : ''}: ${\n        additionalArgsType.type\n      }`\n    : ''\n\n  const typeString = `(${value}${add}) => void`\n\n  return {\n    ...FieldEvents,\n    onChange: {\n      ...FieldEvents.onChange,\n      type: typeString,\n    },\n    onFocus: {\n      ...FieldEvents.onFocus,\n      type: typeString,\n    },\n    onBlur: {\n      ...FieldEvents.onBlur,\n      type: typeString,\n    },\n  }\n}\n","import {\n  UploadEvents,\n  UploadProperties,\n} from '../../../../components/upload/UploadDocs'\nimport { PropertiesTableProps } from '../../../../shared/types'\n\nexport const UploadFieldProperties: PropertiesTableProps = {\n  fileHandler: {\n    doc: 'File handler function that takes newly added files (`newFiles: UploadValue`) as a parameter and returns the processed files. The function can either be synchronous or asynchronous. It returns a promise (`Promise<UploadValue>`) containing the processed files when asynchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  ...UploadProperties,\n  title: undefined,\n  text: undefined,\n}\n\nexport const UploadFieldEvents: PropertiesTableProps = {\n  ...UploadEvents,\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const FieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  help: {\n    doc: 'Provide help content for the field using `title` and `content` as a string or React.Node. Additionally, you can set `open` to `true` to display the inline help, set the `breakout` property to `false` to disable the breakout of the inline help content, or use `renderAs` set to `dialog` to render the content in a [Dialog](/uilib/components/dialog/) (recommended for larger amounts of content).',\n    type: 'object',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  layoutOptions: {\n    doc: 'Use this to set additional options for the `horizontal` layout. E.g. `{ width: \"medium\" }`. You can also use a custom width `{number}rem`. Instead of a width, you can use a min/max width. E.g. `{ minWidth: \"6rem\", maxWidth: \"12rem\" }`.',\n    type: 'object',\n    status: 'optional',\n  },\n  width: {\n    doc: 'Will set the width for the whole block. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: 'Will set the width for its contents. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\n/** For internal use only */\nexport const FieldBlockProperties: PropertiesTableProps = {\n  ...FieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading sizes](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  labelHeight: {\n    doc: 'Defines the height of an component (size prop), so the label can be aligned correctly. Can be `default`, `small`, `medium`, `large`.',\n    type: 'string',\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  disableStatusSummary: {\n    doc: 'Use `true` to disable the error summary.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'string',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const DataValueWritePropsProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: \"Info message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  warning: {\n    doc: \"Warning message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  error: {\n    doc: \"Error message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['Error', 'FormError', 'Array<Error | FormError>', 'function'],\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set to `true`, the field will give an error if the value fails the required validation. When set to `false`, the field will not be required, but will add a \"(optional)\" suffix to the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSuffix: {\n    doc: 'Will append an additional text to the label, like \"(optional)\". When using `inheritLabel`, the suffix will not be inherited. NB: The visual appearance of the `labelSuffix` may change in the future.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set to `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set to `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateContinuously: {\n    doc: 'Set to `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages.',\n    type: 'object',\n    status: 'optional',\n  },\n  onChangeValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered on every change done by the user. The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered when the user leaves a field (e.g., blurring a text input or closing a dropdown). The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'Transforms the value before it gets forwarded to the form data object (context) or returned as the `onChange` value parameter. The first parameter is the internal value. Some fields to support a second parameter, like the SelectCountry, where the country object is given.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const DataValueWritePropsEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).\",\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","UploadFieldProperties","FieldProperties","valueType","omit","TranslationsTable","localeKey","wrapper","MDXLayout","StyledTable","_styled","Table","target","name","styles","_ref","source","extendDeep","globalTranslations","formsTranslations","entries","allowList","localeKeys","Array","isArray","map","key","includes","first","split","push","addToEntries","translation","locale","forEach","_ref2","translations","translationsObj","_ref3","nestedKey","_ref4","warn","locales","keys","tableRows","_ref5","values","Tr","Td","FormattedCode","variant","_ref6","i","value","JSON","stringify","length","P","Anchor","href","Th","UploadProperties","id","doc","type","status","acceptedFileTypes","filesAmountLimit","fileMaxSize","title","text","download","skeleton","AcceptedFileTypeProperties","fileType","UploadEvents","onChange","onFileDelete","onFileClick","DataValueWritePropsProperties","FieldBlockSharedProperties","FieldEvents","DataValueWritePropsEvents","getFieldEventsWithTypes","additionalArgsType","undefined","typeString","optional","onFocus","onBlur","fileHandler","UploadFieldEvents","label","labelDescription","labelSrOnly","help","layout","layoutOptions","width","contentWidth","FieldBlockProperties","labelSize","labelHeight","asFieldset","align","disableStatusSummary","composition","disabled","defaultValue","path","info","warning","error","emptyValue","required","labelSuffix","schema","validateInitially","validateUnchanged","validateContinuously","errorMessages","onChangeValidator","onBlurValidator","transformIn","transformOut"],"sourceRoot":""}