{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-name-properties-mdx-51da2ef2da11c6cb43bb.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/Name/properties.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueDocs.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport TranslationsTable from 'dnb-design-system-portal/src/shared/parts/TranslationsTable';\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {fieldProperties} from '@dnb/eufemia/src/extensions/forms/Field/FieldDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"General props\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: fieldProperties\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Translations\"\n    }), \"\\n\", _jsx(TranslationsTable, {\n      localeKey: ['FirstName', 'LastName', 'CompanyName', 'Field']\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { fieldBlockSharedProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  dataValueEvents,\n  dataValueProperties,\n} from '../hooks/DataValueDocs'\n\nexport const fieldProperties: PropertiesTableProps = {\n  ...dataValueProperties,\n  ...fieldBlockSharedProperties,\n}\n\nexport const fieldEvents: PropertiesTableProps = {\n  ...dataValueEvents,\n}\n\nexport const getFieldEventsWithTypes = (\n  valueType: { type: string; optional?: boolean } = undefined,\n  additionalArgsType: { type: string; optional?: boolean } = undefined\n): PropertiesTableProps => {\n  const value = valueType\n    ? `value${valueType.optional ? '?' : ''}: ${valueType.type}`\n    : 'value'\n\n  const add = additionalArgsType\n    ? `, additionalArgs${additionalArgsType.optional ? '?' : ''}: ${\n        additionalArgsType.type\n      }`\n    : ''\n\n  const typeString = `(${value}${add}) => void`\n\n  return {\n    ...fieldEvents,\n    onChange: {\n      ...fieldEvents.onChange,\n      type: typeString,\n    },\n    onFocus: {\n      ...fieldEvents.onFocus,\n      type: typeString,\n    },\n    onBlur: {\n      ...fieldEvents.onBlur,\n      type: typeString,\n    },\n  }\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const fieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  width: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const fieldBlockProperties: PropertiesTableProps = {\n  ...fieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading size](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'string',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const dataValueProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: 'Info message shown below / after the field.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  warning: {\n    doc: 'Warning message shown below / after the field.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  error: {\n    doc: 'Error message shown below / after the field.',\n    type: 'Error',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set `true`, the field will give an error if the value cannot be empty.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  continuousValidation: {\n    doc: 'Set `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages.',\n    type: 'object',\n    status: 'optional',\n  },\n  validator: {\n    doc: 'Custom validator function that will be called for every change done by the user. Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function that will be called when the user leaves the field (blurring a text input, closing a dropdown etc). Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'transforms the value before it gets forwarded to the form data object or returned as the `onChange` value parameter.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const dataValueEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`.\",\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument.',\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument.',\n    type: '(value) => void',\n    status: 'optional',\n  },\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","fieldProperties","TranslationsTable","localeKey","wrapper","MDXLayout","dataValueProperties","fieldBlockSharedProperties","fieldEvents","dataValueEvents","getFieldEventsWithTypes","valueType","additionalArgsType","undefined","typeString","optional","type","onChange","onFocus","onBlur","label","doc","status","labelDescription","labelSrOnly","layout","width","contentWidth","fieldBlockProperties","labelSize","asFieldset","align","composition","disabled","value","defaultValue","path","info","warning","error","emptyValue","required","schema","validateInitially","validateUnchanged","continuousValidation","errorMessages","validator","onBlurValidator","transformIn","transformOut"],"sourceRoot":""}