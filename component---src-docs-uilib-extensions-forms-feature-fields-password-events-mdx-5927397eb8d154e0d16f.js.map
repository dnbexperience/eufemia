{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-password-events-mdx-5927397eb8d154e0d16f.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/Password/events.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {fieldEvents} from '@dnb/eufemia/src/extensions/forms/Field/FieldDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    code: \"code\",\n    em: \"em\",\n    h3: \"h3\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Events\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: fieldEvents\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Password visibility events\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Event\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"onShowPassword\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.em, {\n              children: \"(optional)\"\n            }), \" Will be called when the user toggles the password to be visible.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"onHidePassword\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.em, {\n              children: \"(optional)\"\n            }), \" Will be called when the user toggles the password to be hidden.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Argument value\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The password visibility event values comes in the shape of an \", _jsx(_components.code, {\n        children: \"React.MouseEvent<HTMLButtonElement>\"\n      }), \", that contains a \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" property with the \", _jsx(_components.code, {\n        children: \"input\"\n      }), \" value.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Code, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\nimport Copy from '../tags/Copy'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n}) {\n  const keys = Object.keys(props)\n  const tableRows = Object.entries(props).map(\n    ([key, { type, doc, status }]) => {\n      if (omit && omit.includes(key)) {\n        return null\n      }\n\n      if (\n        typeof type === 'string' &&\n        String(type).includes('{valueType}')\n      ) {\n        type = valueType as string\n      }\n\n      return (\n        <Tr key={key}>\n          <Td>\n            <Copy>\n              <Code>{formatName(camelCase ? toCamelCase(key) : key)}</Code>\n            </Copy>\n          </Td>\n          <Td>\n            {Array.isArray(type) ? (\n              type\n                .map((t) => (\n                  <Copy key={t}>\n                    <Code>{t}</Code>\n                  </Copy>\n                ))\n                .reduce((prev, curr) => (\n                  <>\n                    {prev} or {curr}\n                  </>\n                ))\n            ) : (\n              <Copy>\n                <Code>{type}</Code>\n              </Copy>\n            )}\n          </Td>\n          <Td>\n            <em>({status})</em>{' '}\n            <ReactMarkdown components={components}>\n              {camelCase ? convertToCamelCase(doc, keys) : doc}\n            </ReactMarkdown>\n          </Td>\n        </Tr>\n      )\n    },\n  )\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nfunction formatName(name: string): React.ReactNode | string {\n  if (name.includes('/')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const dataValueProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the input.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for this input is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  id: {\n    doc: 'Unique id for connecting Form.Handler and helper tools such as Form.useData.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: 'Info message shown below / after the input.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  warning: {\n    doc: 'Warning message shown below / after the input.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  error: {\n    doc: 'Error message shown below / after the input.',\n    type: 'Error',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: 'any',\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set `true`, the input will give an error if the value cannot be empty.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  continuousValidation: {\n    doc: 'Set `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages.',\n    type: 'object',\n    status: 'optional',\n  },\n  validator: {\n    doc: 'Custom validator function that will be called for every change done by the user. Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function that will be called when the user leaves the field (blurring a text input, closing a dropdown etc). Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  toInput: {\n    doc: 'Derivate called when the received / active value is sent to the input. Can be used for casting, changing syntax etc.',\n    type: 'function',\n    status: 'optional',\n  },\n  fromInput: {\n    doc: 'Derivate called when changes is made by the user, to cast or change syntax back to the original (opposite of `toInput`).',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const dataValueEvents: PropertiesTableProps = {\n  onChange: {\n    doc: ' Will be called on value changes made by the user, with the new value as argument.',\n    type: 'function',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: ' Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: ' Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { fieldBlockProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  dataValueEvents,\n  dataValueProperties,\n} from '../hooks/DataValueDocs'\n\nexport const fieldProperties: PropertiesTableProps = {\n  ...dataValueProperties,\n  ...fieldBlockProperties,\n}\n\nexport const fieldEvents: PropertiesTableProps = {\n  ...dataValueEvents,\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const fieldBlockProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSize: {\n    doc: 'Define one of the following [heading size](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  width: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'string',\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","table","thead","tr","th","tbody","td","code","em","h3","p","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","fieldEvents","wrapper","MDXLayout","basicComponents","StyledTable","_styled","Table","target","name","styles","_ref","valueType","camelCase","omit","keys","tableRows","entries","map","_ref2","key","type","doc","status","includes","String","Tr","Td","Copy","Code","formatName","toCamelCase","Array","isArray","t","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp","fieldProperties","value","path","id","info","warning","error","disabled","emptyValue","required","schema","validateInitially","validateUnchanged","continuousValidation","errorMessages","validator","onBlurValidator","toInput","fromInput","fieldBlockProperties","onChange","onFocus","onBlur","label","labelDescription","labelSize","layout","width","contentWidth","composition","asFieldset"],"sourceRoot":""}