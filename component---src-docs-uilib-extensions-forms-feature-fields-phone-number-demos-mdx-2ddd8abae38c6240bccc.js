"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[96899],{91311:function(n,e,o){o.r(e),o.d(e,{default:function(){return y}});var r={};o.r(r),o.d(r,{Disabled:function(){return c},Empty:function(){return a},FilterCountries:function(){return j},InCard:function(){return g},Label:function(){return s},LabelAndValue:function(){return h},LongLabel:function(){return x},Placeholder:function(){return u},ValidationPattern:function(){return p},ValidationRequired:function(){return m},Width:function(){return N},WithError:function(){return b},WithFilter:function(){return C},WithHelp:function(){return d}});var l=o(31085),t=o(71184),i=o(32065);const a=()=>(0,l.jsx)(i.A,{children:"<Field.PhoneNumber\n  onFocus={(value, { countryCode, phoneNumber, iso }) =>\n    console.log('onFocus', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n  onBlur={(value, { countryCode, phoneNumber, iso }) =>\n    console.log('onBlur', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n  onChange={(value, { countryCode, phoneNumber, iso }) =>\n    console.log('onChange', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n  onCountryCodeChange={(countryCode) =>\n    console.log('onCountryCodeChange', countryCode)\n  }\n  onNumberChange={(phoneNumber) =>\n    console.log('onNumberChange', phoneNumber)\n  }\n/>\n"}),u=()=>(0,l.jsx)(i.A,{children:"<Field.PhoneNumber\n  placeholder=\"Call this number\"\n  onChange={(value, { countryCode, phoneNumber, iso }) =>\n    console.log('onChange', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n/>\n"}),s=()=>(0,l.jsx)(i.A,{children:"<Field.PhoneNumber\n  label=\"Label text\"\n  onChange={(value, { countryCode, phoneNumber, iso }) =>\n    console.log('onChange', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n/>\n"}),h=()=>(0,l.jsx)(i.A,{"data-visual-test":"phone-number-label",children:'<Field.PhoneNumber\n  label="Label text"\n  value="+47 98765432"\n  onChange={(value, { countryCode, phoneNumber, iso }) =>\n    console.log(\'onChange\', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n/>\n'}),d=()=>(0,l.jsx)(i.A,{children:"<Field.PhoneNumber\n  onChange={(value, { countryCode, phoneNumber, iso }) =>\n    console.log('onChange', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n  help={{\n    title: 'Help is available',\n    content:\n      'Helping others, encouraging others, are often acts of being kind that have more meaning that you may realize.',\n  }}\n/>\n"}),c=()=>(0,l.jsx)(i.A,{children:'<Field.PhoneNumber\n  value="+47 12345678"\n  label="Label text"\n  onChange={(value, { countryCode, phoneNumber, iso }) =>\n    console.log(\'onChange\', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n  disabled\n/>\n'}),b=()=>(0,l.jsx)(i.A,{"data-visual-test":"phone-number-error",children:"<Field.PhoneNumber\n  value=\"007\"\n  label=\"Label text\"\n  onChange={(value, { countryCode, phoneNumber, iso }) =>\n    console.log('onChange', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n  error={new Error('This is what is wrong...')}\n/>\n"}),m=()=>(0,l.jsx)(i.A,{children:'<Field.PhoneNumber\n  value="+47 888"\n  label="Label text"\n  onChange={(value, { countryCode, phoneNumber, iso }) =>\n    console.log(\'onChange\', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n  required\n/>\n'}),p=()=>(0,l.jsx)(i.A,{children:'<Field.PhoneNumber\n  value="+41 123"\n  label="Label text"\n  onChange={(value, { countryCode, phoneNumber, iso }) =>\n    console.log(\'onChange\', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n  pattern="^\\+41 [1]\\d{2}$"\n/>\n'}),C=()=>(0,l.jsx)(i.A,{children:'<Field.PhoneNumber\n  label="Label text"\n  onChange={(value, { countryCode, phoneNumber, iso }) =>\n    console.log(\'onChange\', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n  countries="Scandinavia"\n/>\n'}),x=()=>(0,l.jsx)(i.A,{"data-visual-test":"phone-number-long-label",children:'<Field.PhoneNumber label="Telefon/mobilnummer with long label" />\n'}),g=()=>(0,l.jsx)(i.A,{"data-visual-test":"phone-number-in-card",children:"<Form.Card>\n  <Field.PhoneNumber />\n</Form.Card>\n"});function j(){return(0,l.jsx)(i.A,{children:"<Field.PhoneNumber\n  countries=\"Scandinavia\"\n  filterCountries={({ iso }) => iso !== 'DK'}\n/>\n"})}const N=()=>(0,l.jsx)(i.A,{"data-visual-test":"phone-number-width",children:'<Form.Card>\n  <Field.String width="stretch" />\n  <Field.PhoneNumber label="default" />\n  <Field.PhoneNumber width="large" label="large" />\n  <Field.PhoneNumber width="stretch" label="stretch" />\n  <Field.PhoneNumber omitCountryCodeField label="default" />\n  <Field.PhoneNumber omitCountryCodeField width="large" label="large" />\n  <Field.PhoneNumber\n    omitCountryCodeField\n    width="stretch"\n    label="stretch"\n  />\n</Form.Card>\n'});function v(n){const e=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code"},(0,t.R)(),n.components),{VisibleWhenVisualTest:o}=e;return r||f("Examples",!1),c||f("Examples.Disabled",!0),a||f("Examples.Empty",!0),j||f("Examples.FilterCountries",!0),g||f("Examples.InCard",!0),s||f("Examples.Label",!0),h||f("Examples.LabelAndValue",!0),x||f("Examples.LongLabel",!0),u||f("Examples.Placeholder",!0),p||f("Examples.ValidationPattern",!0),m||f("Examples.ValidationRequired",!0),N||f("Examples.Width",!0),b||f("Examples.WithError",!0),C||f("Examples.WithFilter",!0),d||f("Examples.WithHelp",!0),o||f("VisibleWhenVisualTest",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.h2,{children:"Demos"}),"\n",(0,l.jsx)(e.h3,{children:"Empty"}),"\n",(0,l.jsx)(a,{}),"\n",(0,l.jsx)(e.h3,{children:"Placeholder"}),"\n",(0,l.jsx)(u,{}),"\n",(0,l.jsx)(e.h3,{children:"Label"}),"\n",(0,l.jsx)(s,{}),"\n",(0,l.jsx)(e.h3,{children:"Label and value"}),"\n",(0,l.jsx)(h,{}),"\n",(0,l.jsx)(e.h3,{children:"Show only Scandinavian countries"}),"\n",(0,l.jsx)(C,{}),"\n",(0,l.jsx)(e.h3,{children:"With help"}),"\n",(0,l.jsx)(d,{}),"\n",(0,l.jsx)(e.h3,{children:"Used in Card"}),"\n",(0,l.jsx)(g,{}),"\n",(0,l.jsx)(e.h3,{children:"Disabled"}),"\n",(0,l.jsx)(c,{}),"\n",(0,l.jsx)(e.h3,{children:"Error"}),"\n",(0,l.jsx)(b,{}),"\n",(0,l.jsx)(e.h3,{children:"Validation - Required"}),"\n",(0,l.jsx)(m,{}),"\n",(0,l.jsx)(e.h3,{children:"Validation - Pattern"}),"\n",(0,l.jsx)(p,{}),"\n",(0,l.jsx)(e.h3,{children:"Filter countries"}),"\n",(0,l.jsxs)(e.p,{children:["This example demonstrates how to filter specific countries. Use the ",(0,l.jsx)(e.code,{children:"countries"})," property to define a set of countries and/or the ",(0,l.jsx)(e.code,{children:"filterCountries"})," property to apply custom filtering logic."]}),"\n",(0,l.jsx)(j,{}),"\n",(0,l.jsxs)(o,{children:[(0,l.jsx)(x,{}),(0,l.jsx)(N,{})]})]})}var y=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,t.R)(),n.components);return e?(0,l.jsx)(e,Object.assign({},n,{children:(0,l.jsx)(v,n)})):v(n)};function f(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-feature-fields-phone-number-demos-mdx-2ddd8abae38c6240bccc.js.map