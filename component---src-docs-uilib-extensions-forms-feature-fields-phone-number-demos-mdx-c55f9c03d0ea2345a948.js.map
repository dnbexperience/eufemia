{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-phone-number-demos-mdx-c55f9c03d0ea2345a948.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/PhoneNumber/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/PhoneNumber/demos.mdx"],"sourcesContent":["import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, Form, Tools } from '@dnb/eufemia/src/extensions/forms'\n\nexport const Empty = () => {\n  return (\n    <ComponentBox>\n      <Field.PhoneNumber\n        onFocus={(value, { countryCode, phoneNumber, iso }) =>\n          console.log('onFocus', value, { countryCode, phoneNumber, iso })\n        }\n        onBlur={(value, { countryCode, phoneNumber, iso }) =>\n          console.log('onBlur', value, { countryCode, phoneNumber, iso })\n        }\n        onChange={(value, { countryCode, phoneNumber, iso }) =>\n          console.log('onChange', value, { countryCode, phoneNumber, iso })\n        }\n        onCountryCodeChange={(countryCode) =>\n          console.log('onCountryCodeChange', countryCode)\n        }\n        onNumberChange={(phoneNumber) =>\n          console.log('onNumberChange', phoneNumber)\n        }\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Placeholder = () => {\n  return (\n    <ComponentBox>\n      <Field.PhoneNumber\n        placeholder=\"Call this number\"\n        onChange={(value, { countryCode, phoneNumber, iso }) =>\n          console.log('onChange', value, { countryCode, phoneNumber, iso })\n        }\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Label = () => {\n  return (\n    <ComponentBox>\n      <Field.PhoneNumber\n        label=\"Label text\"\n        onChange={(value, { countryCode, phoneNumber, iso }) =>\n          console.log('onChange', value, { countryCode, phoneNumber, iso })\n        }\n      />\n    </ComponentBox>\n  )\n}\n\nexport const LabelAndValue = () => {\n  return (\n    <ComponentBox data-visual-test=\"phone-number-label\">\n      <Field.PhoneNumber\n        label=\"Label text\"\n        value=\"+47 98765432\"\n        onChange={(value, { countryCode, phoneNumber, iso }) =>\n          console.log('onChange', value, { countryCode, phoneNumber, iso })\n        }\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithHelp = () => {\n  return (\n    <ComponentBox>\n      <Field.PhoneNumber\n        onChange={(value, { countryCode, phoneNumber, iso }) =>\n          console.log('onChange', value, { countryCode, phoneNumber, iso })\n        }\n        help={{\n          title: 'Help is available',\n          content:\n            'Helping others, encouraging others, are often acts of being kind that have more meaning that you may realize.',\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Disabled = () => {\n  return (\n    <ComponentBox>\n      <Field.PhoneNumber\n        value=\"+47 12345678\"\n        label=\"Label text\"\n        onChange={(value, { countryCode, phoneNumber, iso }) =>\n          console.log('onChange', value, { countryCode, phoneNumber, iso })\n        }\n        disabled\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithError = () => {\n  return (\n    <ComponentBox data-visual-test=\"phone-number-error\">\n      <Field.PhoneNumber\n        value=\"007\"\n        label=\"Label text\"\n        onChange={(value, { countryCode, phoneNumber, iso }) =>\n          console.log('onChange', value, { countryCode, phoneNumber, iso })\n        }\n        error={new Error('This is what is wrong...')}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const ValidationRequired = () => {\n  return (\n    <ComponentBox>\n      <Field.PhoneNumber\n        value=\"+47 888\"\n        label=\"Label text\"\n        onChange={(value, { countryCode, phoneNumber, iso }) =>\n          console.log('onChange', value, { countryCode, phoneNumber, iso })\n        }\n        required\n      />\n    </ComponentBox>\n  )\n}\n\nexport const ValidationPattern = () => {\n  return (\n    <ComponentBox>\n      <Field.PhoneNumber\n        value=\"+41 123\"\n        label=\"Label text\"\n        onChange={(value, { countryCode, phoneNumber, iso }) =>\n          console.log('onChange', value, { countryCode, phoneNumber, iso })\n        }\n        pattern=\"^\\\\+41 [1]\\\\d{2}$\"\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithFilter = () => {\n  return (\n    <ComponentBox>\n      <Field.PhoneNumber\n        label=\"Label text\"\n        onChange={(value, { countryCode, phoneNumber, iso }) =>\n          console.log('onChange', value, { countryCode, phoneNumber, iso })\n        }\n        countries=\"Scandinavia\"\n      />\n    </ComponentBox>\n  )\n}\n\nexport const LongLabel = () => {\n  return (\n    <ComponentBox data-visual-test=\"phone-number-long-label\">\n      <Field.PhoneNumber label=\"Telefon/mobilnummer with long label\" />\n    </ComponentBox>\n  )\n}\n\nexport const InCard = () => {\n  return (\n    <ComponentBox data-visual-test=\"phone-number-in-card\">\n      <Form.Card>\n        <Field.PhoneNumber />\n      </Form.Card>\n    </ComponentBox>\n  )\n}\n\nexport function FilterCountries() {\n  return (\n    <ComponentBox>\n      <Field.PhoneNumber\n        countries=\"Scandinavia\"\n        filterCountries={({ iso }) => iso !== 'DK'}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Width = () => {\n  return (\n    <ComponentBox data-visual-test=\"phone-number-width\">\n      <Form.Card>\n        <Field.String width=\"stretch\" />\n        <Field.PhoneNumber label=\"default\" />\n        <Field.PhoneNumber width=\"large\" label=\"large\" />\n        <Field.PhoneNumber width=\"stretch\" label=\"stretch\" />\n        <Field.PhoneNumber omitCountryCodeField label=\"default\" />\n        <Field.PhoneNumber\n          omitCountryCodeField\n          width=\"large\"\n          label=\"large\"\n        />\n        <Field.PhoneNumber\n          omitCountryCodeField\n          width=\"stretch\"\n          label=\"stretch\"\n        />\n      </Form.Card>\n    </ComponentBox>\n  )\n}\n\nexport const TransformInAndOut = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const transformOut = (internal, additionalArgs) => {\n          return {\n            countryCode: additionalArgs?.iso,\n            phoneNumber: additionalArgs?.phoneNumber,\n            countryCodePrefix: additionalArgs?.countryCode,\n          }\n        }\n\n        const transformIn = (external) => {\n          return {\n            countryCode: external?.iso,\n            phoneNumber: external?.phoneNumber,\n            iso: external?.countryCodePrefix,\n          }\n        }\n\n        return (\n          <Form.Handler\n            defaultData={{\n              myField: {\n                countryCode: 'GB',\n                phoneNumber: '9123457',\n                countryCodePrefix: '+44',\n              },\n            }}\n          >\n            <Form.Card>\n              <Field.PhoneNumber\n                path=\"/myField\"\n                transformOut={transformOut}\n                transformIn={transformIn}\n                label=\"Transform in and out\"\n              />\n              <Tools.Log />\n            </Form.Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {VisibleWhenVisualTest} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.Disabled) _missingMdxReference(\"Examples.Disabled\", true);\n  if (!Examples.Empty) _missingMdxReference(\"Examples.Empty\", true);\n  if (!Examples.FilterCountries) _missingMdxReference(\"Examples.FilterCountries\", true);\n  if (!Examples.InCard) _missingMdxReference(\"Examples.InCard\", true);\n  if (!Examples.Label) _missingMdxReference(\"Examples.Label\", true);\n  if (!Examples.LabelAndValue) _missingMdxReference(\"Examples.LabelAndValue\", true);\n  if (!Examples.LongLabel) _missingMdxReference(\"Examples.LongLabel\", true);\n  if (!Examples.Placeholder) _missingMdxReference(\"Examples.Placeholder\", true);\n  if (!Examples.TransformInAndOut) _missingMdxReference(\"Examples.TransformInAndOut\", true);\n  if (!Examples.ValidationPattern) _missingMdxReference(\"Examples.ValidationPattern\", true);\n  if (!Examples.ValidationRequired) _missingMdxReference(\"Examples.ValidationRequired\", true);\n  if (!Examples.Width) _missingMdxReference(\"Examples.Width\", true);\n  if (!Examples.WithError) _missingMdxReference(\"Examples.WithError\", true);\n  if (!Examples.WithFilter) _missingMdxReference(\"Examples.WithFilter\", true);\n  if (!Examples.WithHelp) _missingMdxReference(\"Examples.WithHelp\", true);\n  if (!VisibleWhenVisualTest) _missingMdxReference(\"VisibleWhenVisualTest\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Empty\"\n    }), \"\\n\", _jsx(Examples.Empty, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Placeholder\"\n    }), \"\\n\", _jsx(Examples.Placeholder, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Label\"\n    }), \"\\n\", _jsx(Examples.Label, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Label and value\"\n    }), \"\\n\", _jsx(Examples.LabelAndValue, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Show only Scandinavian countries\"\n    }), \"\\n\", _jsx(Examples.WithFilter, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With help\"\n    }), \"\\n\", _jsx(Examples.WithHelp, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Used in Card\"\n    }), \"\\n\", _jsx(Examples.InCard, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Disabled\"\n    }), \"\\n\", _jsx(Examples.Disabled, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Error\"\n    }), \"\\n\", _jsx(Examples.WithError, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Validation - Required\"\n    }), \"\\n\", _jsx(Examples.ValidationRequired, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Validation - Pattern\"\n    }), \"\\n\", _jsx(Examples.ValidationPattern, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Filter countries\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This example demonstrates how to filter specific countries. Use the \", _jsx(_components.code, {\n        children: \"countries\"\n      }), \" property to define a set of countries and/or the \", _jsx(_components.code, {\n        children: \"filterCountries\"\n      }), \" property to apply custom filtering logic.\"]\n    }), \"\\n\", _jsx(Examples.FilterCountries, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Transform in and out\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This example demonstrates how to transform data when it enters and leaves the form field.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the \", _jsx(_components.code, {\n        children: \"transformIn\"\n      }), \" property to modify the incoming data before it is displayed in the field, and the \", _jsx(_components.code, {\n        children: \"transformOut\"\n      }), \" property to adjust the data before it is submitted or processed.\"]\n    }), \"\\n\", _jsx(Examples.TransformInAndOut, {}), \"\\n\", _jsx(_components.p, {\n      children: \"Here is how you can deal with TypeScript types for the transform functions:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { AdditionalArgs } from '@dnb/eufemia/src/extensions/forms/Field/PhoneNumber'\\n\\ntype MyFieldShape = {\\n  countryCode: string\\n  phoneNumber: string\\n  countryCodePrefix: string\\n}\\n\\nconst transformOut = (internal, additionalArgs = {}) => {\\n  const {\\n    countryCode: countryCodePrefix,\\n    phoneNumber,\\n    iso: countryCode,\\n  } = additionalArgs as AdditionalArgs\\n\\n  return {\\n    countryCode,\\n    phoneNumber,\\n    countryCodePrefix,\\n  } satisfies MyFieldShape\\n}\\n\\nconst transformIn = (\\n  {\\n    countryCode: iso,\\n    phoneNumber,\\n    countryCodePrefix: countryCode,\\n  }: MyFieldShape = {} as MyFieldShape | undefined,\\n) => {\\n  return {\\n    countryCode,\\n    phoneNumber,\\n    iso,\\n  } satisfies AdditionalArgs\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(VisibleWhenVisualTest, {\n      children: [_jsx(Examples.LongLabel, {}), _jsx(Examples.Width, {})]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["Empty","_jsx","ComponentBox","children","Placeholder","Label","LabelAndValue","WithHelp","Disabled","WithError","ValidationRequired","ValidationPattern","WithFilter","LongLabel","InCard","FilterCountries","Width","TransformInAndOut","noInline","_createMdxContent","props","_components","Object","assign","h2","h3","p","code","pre","_provideComponents","components","VisibleWhenVisualTest","Examples","_missingMdxReference","_jsxs","_Fragment","className","wrapper","MDXLayout","id","component","Error"],"sourceRoot":""}