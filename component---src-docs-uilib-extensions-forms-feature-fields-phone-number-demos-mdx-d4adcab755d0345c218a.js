"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[96899],{91311:function(n,e,o){o.r(e),o.d(e,{default:function(){return v}});var r={};o.r(r),o.d(r,{Disabled:function(){return c},Empty:function(){return a},FilterCountries:function(){return f},InCard:function(){return g},Label:function(){return u},LabelAndValue:function(){return d},LongLabel:function(){return C},Placeholder:function(){return s},TransformInAndOut:function(){return j},ValidationPattern:function(){return p},ValidationRequired:function(){return b},Width:function(){return y},WithError:function(){return m},WithFilter:function(){return x},WithHelp:function(){return h}});var t=o(31085),l=o(71184),i=o(32065);const a=()=>(0,t.jsx)(i.A,{children:"<Field.PhoneNumber\n  onFocus={(value, { countryCode, phoneNumber, iso }) =>\n    console.log('onFocus', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n  onBlur={(value, { countryCode, phoneNumber, iso }) =>\n    console.log('onBlur', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n  onChange={(value, { countryCode, phoneNumber, iso }) =>\n    console.log('onChange', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n  onCountryCodeChange={(countryCode) =>\n    console.log('onCountryCodeChange', countryCode)\n  }\n  onNumberChange={(phoneNumber) =>\n    console.log('onNumberChange', phoneNumber)\n  }\n/>\n"}),s=()=>(0,t.jsx)(i.A,{children:"<Field.PhoneNumber\n  placeholder=\"Call this number\"\n  onChange={(value, { countryCode, phoneNumber, iso }) =>\n    console.log('onChange', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n/>\n"}),u=()=>(0,t.jsx)(i.A,{children:"<Field.PhoneNumber\n  label=\"Label text\"\n  onChange={(value, { countryCode, phoneNumber, iso }) =>\n    console.log('onChange', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n/>\n"}),d=()=>(0,t.jsx)(i.A,{"data-visual-test":"phone-number-label",children:'<Field.PhoneNumber\n  label="Label text"\n  value="+47 98765432"\n  onChange={(value, { countryCode, phoneNumber, iso }) =>\n    console.log(\'onChange\', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n/>\n'}),h=()=>(0,t.jsx)(i.A,{children:"<Field.PhoneNumber\n  onChange={(value, { countryCode, phoneNumber, iso }) =>\n    console.log('onChange', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n  help={{\n    title: 'Help is available',\n    content:\n      'Helping others, encouraging others, are often acts of being kind that have more meaning that you may realize.',\n  }}\n/>\n"}),c=()=>(0,t.jsx)(i.A,{children:'<Field.PhoneNumber\n  value="+47 12345678"\n  label="Label text"\n  onChange={(value, { countryCode, phoneNumber, iso }) =>\n    console.log(\'onChange\', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n  disabled\n/>\n'}),m=()=>(0,t.jsx)(i.A,{"data-visual-test":"phone-number-error",children:"<Field.PhoneNumber\n  value=\"007\"\n  label=\"Label text\"\n  onChange={(value, { countryCode, phoneNumber, iso }) =>\n    console.log('onChange', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n  error={new Error('This is what is wrong...')}\n/>\n"}),b=()=>(0,t.jsx)(i.A,{children:'<Field.PhoneNumber\n  value="+47 888"\n  label="Label text"\n  onChange={(value, { countryCode, phoneNumber, iso }) =>\n    console.log(\'onChange\', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n  required\n/>\n'}),p=()=>(0,t.jsx)(i.A,{children:'<Field.PhoneNumber\n  value="+41 123"\n  label="Label text"\n  onChange={(value, { countryCode, phoneNumber, iso }) =>\n    console.log(\'onChange\', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n  pattern="^\\+41 [1]\\d{2}$"\n/>\n'}),x=()=>(0,t.jsx)(i.A,{children:'<Field.PhoneNumber\n  label="Label text"\n  onChange={(value, { countryCode, phoneNumber, iso }) =>\n    console.log(\'onChange\', value, {\n      countryCode,\n      phoneNumber,\n      iso,\n    })\n  }\n  countries="Scandinavia"\n/>\n'}),C=()=>(0,t.jsx)(i.A,{"data-visual-test":"phone-number-long-label",children:'<Field.PhoneNumber label="Telefon/mobilnummer with long label" />\n'}),g=()=>(0,t.jsx)(i.A,{"data-visual-test":"phone-number-in-card",children:"<Form.Card>\n  <Field.PhoneNumber />\n</Form.Card>\n"});function f(){return(0,t.jsx)(i.A,{children:"<Field.PhoneNumber\n  countries=\"Scandinavia\"\n  filterCountries={({ iso }) => iso !== 'DK'}\n/>\n"})}const y=()=>(0,t.jsx)(i.A,{"data-visual-test":"phone-number-width",children:'<Form.Card>\n  <Field.String width="stretch" />\n  <Field.PhoneNumber label="default" />\n  <Field.PhoneNumber width="large" label="large" />\n  <Field.PhoneNumber width="stretch" label="stretch" />\n  <Field.PhoneNumber omitCountryCodeField label="default" />\n  <Field.PhoneNumber omitCountryCodeField width="large" label="large" />\n  <Field.PhoneNumber\n    omitCountryCodeField\n    width="stretch"\n    label="stretch"\n  />\n</Form.Card>\n'}),j=()=>(0,t.jsx)(i.A,{noInline:!0,children:"const transformOut = (internal, additionalArgs) => {\n  return {\n    countryCode: additionalArgs?.iso,\n    phoneNumber: additionalArgs?.phoneNumber,\n    countryCodePrefix: additionalArgs?.countryCode,\n  }\n}\nconst transformIn = (external) => {\n  return {\n    countryCode: external?.countryCodePrefix,\n    phoneNumber: external?.phoneNumber,\n  }\n}\nrender(\n  <Form.Handler\n    defaultData={{\n      myField: {\n        countryCode: 'GB',\n        phoneNumber: '9123457',\n        countryCodePrefix: '+44',\n      },\n    }}\n  >\n    <Form.Card>\n      <Field.PhoneNumber\n        path=\"/myField\"\n        transformOut={transformOut}\n        transformIn={transformIn}\n        label=\"Transform in and out\"\n      />\n      <Tools.Log />\n    </Form.Card>\n  </Form.Handler>,\n)\n"});function N(n){const e=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code",pre:"pre"},(0,l.R)(),n.components),{VisibleWhenVisualTest:o}=e;return r||F("Examples",!1),c||F("Examples.Disabled",!0),a||F("Examples.Empty",!0),f||F("Examples.FilterCountries",!0),g||F("Examples.InCard",!0),u||F("Examples.Label",!0),d||F("Examples.LabelAndValue",!0),C||F("Examples.LongLabel",!0),s||F("Examples.Placeholder",!0),j||F("Examples.TransformInAndOut",!0),p||F("Examples.ValidationPattern",!0),b||F("Examples.ValidationRequired",!0),y||F("Examples.Width",!0),m||F("Examples.WithError",!0),x||F("Examples.WithFilter",!0),h||F("Examples.WithHelp",!0),o||F("VisibleWhenVisualTest",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:"Demos"}),"\n",(0,t.jsx)(e.h3,{children:"Empty"}),"\n",(0,t.jsx)(a,{}),"\n",(0,t.jsx)(e.h3,{children:"Placeholder"}),"\n",(0,t.jsx)(s,{}),"\n",(0,t.jsx)(e.h3,{children:"Label"}),"\n",(0,t.jsx)(u,{}),"\n",(0,t.jsx)(e.h3,{children:"Label and value"}),"\n",(0,t.jsx)(d,{}),"\n",(0,t.jsx)(e.h3,{children:"Show only Scandinavian countries"}),"\n",(0,t.jsx)(x,{}),"\n",(0,t.jsx)(e.h3,{children:"With help"}),"\n",(0,t.jsx)(h,{}),"\n",(0,t.jsx)(e.h3,{children:"Used in Card"}),"\n",(0,t.jsx)(g,{}),"\n",(0,t.jsx)(e.h3,{children:"Disabled"}),"\n",(0,t.jsx)(c,{}),"\n",(0,t.jsx)(e.h3,{children:"Error"}),"\n",(0,t.jsx)(m,{}),"\n",(0,t.jsx)(e.h3,{children:"Validation - Required"}),"\n",(0,t.jsx)(b,{}),"\n",(0,t.jsx)(e.h3,{children:"Validation - Pattern"}),"\n",(0,t.jsx)(p,{}),"\n",(0,t.jsx)(e.h3,{children:"Filter countries"}),"\n",(0,t.jsxs)(e.p,{children:["This example demonstrates how to filter specific countries. Use the ",(0,t.jsx)(e.code,{children:"countries"})," property to define a set of countries and/or the ",(0,t.jsx)(e.code,{children:"filterCountries"})," property to apply custom filtering logic."]}),"\n",(0,t.jsx)(f,{}),"\n",(0,t.jsx)(e.h3,{children:"Transform in and out"}),"\n",(0,t.jsx)(e.p,{children:"This example demonstrates how to transform data when it enters and leaves the form field."}),"\n",(0,t.jsxs)(e.p,{children:["You can use the ",(0,t.jsx)(e.code,{children:"transformIn"})," property to modify the incoming data before it is displayed in the field, and the ",(0,t.jsx)(e.code,{children:"transformOut"})," property to adjust the data before it is submitted or processed.\nWhen ",(0,t.jsx)(e.code,{children:"transformIn"})," one can either return a simple value ",(0,t.jsx)(e.code,{children:'"+47 98765432"'})," or an object ",(0,t.jsx)(e.code,{children:'{ countryCode:"+47", phoneNumber:"98765432" }'}),"."]}),"\n",(0,t.jsx)(j,{}),"\n",(0,t.jsx)(e.p,{children:"Here is how you can deal with TypeScript types for the transform functions:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"import { AdditionalArgs } from '@dnb/eufemia/src/extensions/forms/Field/PhoneNumber'\n\ntype MyFieldShape = {\n  countryCode: string\n  phoneNumber: string\n  countryCodePrefix: string\n}\n\nconst transformOut = (internal, additionalArgs = {}) => {\n  const {\n    countryCode: countryCodePrefix,\n    phoneNumber,\n    iso: countryCode,\n  } = additionalArgs as AdditionalArgs\n\n  return {\n    countryCode,\n    phoneNumber,\n    countryCodePrefix,\n  } satisfies MyFieldShape\n}\n\nconst transformIn = (\n  {\n    countryCode: iso,\n    phoneNumber,\n    countryCodePrefix: countryCode,\n  }: MyFieldShape = {} as MyFieldShape | undefined,\n) => {\n  return {\n    countryCode,\n    phoneNumber,\n    iso,\n  } satisfies AdditionalArgs\n}\n"})}),"\n",(0,t.jsxs)(o,{children:[(0,t.jsx)(C,{}),(0,t.jsx)(y,{})]})]})}var v=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,l.R)(),n.components);return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(N,n)})):N(n)};function F(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-feature-fields-phone-number-demos-mdx-d4adcab755d0345c218a.js.map