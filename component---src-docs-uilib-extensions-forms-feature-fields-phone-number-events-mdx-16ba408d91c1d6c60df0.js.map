{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-phone-number-events-mdx-16ba408d91c1d6c60df0.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/PhoneNumber/events.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {fieldEvents} from '@dnb/eufemia/src/extensions/forms/Field/FieldDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Events\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: fieldEvents\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Info about arguments\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The first argument value returned by the event handlers is a string where the country code and phone-number is separated by a space, e.g. \", _jsx(_components.code, {\n        children: \"+47 9123457\"\n      }), \". If the \", _jsx(_components.code, {\n        children: \"omitCountryCodeField\"\n      }), \" is set to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \", then only the phone-number will be used, so the argument would be \", _jsx(_components.code, {\n        children: \"9123457\"\n      }), \" without the leading country code.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The second parameter is an object: \", _jsx(_components.code, {\n        children: \"{ countryCode, phoneNumber }\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colorValue = 'var(--color-success-green)'\nconst colorString = 'var(--color-fire-red)'\nconst colorType = 'var(--color-violet)'\nconst colorUndefined = 'var(--color-black-55)'\n\nconst FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = children.startsWith(`'`) ? colorString : colorType\n        // falls through\n      }\n      case 'value': {\n        style.color = children.startsWith(`'`)\n          ? colorString\n          : children === 'undefined'\n          ? colorUndefined\n          : colorValue\n        // falls through\n      }\n      default: {\n        style.background = 'none'\n        style.boxShadow = 'none'\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props)\n  const tableRows = Object.entries(props).map(\n    ([key, { type, defaultValue, doc, status }]) => {\n      if (omit && omit.includes(key)) {\n        return null\n      }\n\n      return (\n        <Tr key={key}>\n          <Td>\n            <FormattedCode\n              variant=\"prop\"\n              strikethrough={status === 'deprecated'}\n            >\n              {formatName(camelCase ? toCamelCase(key) : key)}\n            </FormattedCode>\n          </Td>\n          <Td>\n            {(Array.isArray(type) ? type : [type])\n              .map((t) => {\n                if (typeof t === 'string') {\n                  if (String(t).includes('{valueType}')) {\n                    t = valueType as string\n                  }\n                  return (\n                    <FormattedCode key={t} variant=\"type\">\n                      {t}\n                    </FormattedCode>\n                  )\n                }\n              })\n              .reduce((prev, curr) => (\n                <>\n                  {prev} <br /> {curr}\n                </>\n              ))}\n          </Td>\n          {showDefaultValue && (\n            <Td>\n              {defaultValue ? (\n                <FormattedCode variant=\"value\">\n                  {defaultValue}\n                </FormattedCode>\n              ) : (\n                status === 'required' && 'REQUIRED'\n              )}\n            </Td>\n          )}\n          <Td>\n            {(!showDefaultValue || status === 'deprecated') && (\n              <em>({status}) </em>\n            )}\n            <ReactMarkdown components={components}>\n              {camelCase ? convertToCamelCase(doc, keys) : doc}\n            </ReactMarkdown>\n          </Td>\n        </Tr>\n      )\n    },\n  )\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nfunction formatName(name: string): React.ReactNode | string {\n  if (name.includes('/')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const dataValueProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the input.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for this input is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  id: {\n    doc: 'Unique id for connecting Form.Handler and helper tools such as Form.useData.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: 'Info message shown below / after the input.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  warning: {\n    doc: 'Warning message shown below / after the input.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  error: {\n    doc: 'Error message shown below / after the input.',\n    type: 'Error',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: 'any',\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set `true`, the input will give an error if the value cannot be empty.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  continuousValidation: {\n    doc: 'Set `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages.',\n    type: 'object',\n    status: 'optional',\n  },\n  validator: {\n    doc: 'Custom validator function that will be called for every change done by the user. Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function that will be called when the user leaves the field (blurring a text input, closing a dropdown etc). Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'transforms the value before it gets forwarded to the form data object or returned as the `onChange` value parameter.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const dataValueEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`.\",\n    type: 'function',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { fieldBlockProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  dataValueEvents,\n  dataValueProperties,\n} from '../hooks/DataValueDocs'\n\nexport const fieldProperties: PropertiesTableProps = {\n  ...dataValueProperties,\n  ...fieldBlockProperties,\n}\n\nexport const fieldEvents: PropertiesTableProps = {\n  ...dataValueEvents,\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const fieldBlockProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSize: {\n    doc: 'Define one of the following [heading size](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  width: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'string',\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","h3","p","code","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","fieldEvents","wrapper","MDXLayout","basicComponents","StyledTable","_styled","Table","target","name","styles","colorString","FormattedCode","_ref","variant","strikethrough","style","rest","textDecoration","color","startsWith","background","boxShadow","_ref2","valueType","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","type","defaultValue","doc","status","includes","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp","fieldProperties","value","path","id","info","warning","error","disabled","emptyValue","required","schema","validateInitially","validateUnchanged","continuousValidation","errorMessages","validator","onBlurValidator","transformIn","transformOut","fieldBlockProperties","onChange","onFocus","onBlur","label","labelDescription","labelSize","layout","width","contentWidth","composition","asFieldset"],"sourceRoot":""}