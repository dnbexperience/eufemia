{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-phone-number-events-mdx-a6aa3cff40048f05368b.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/PhoneNumber/PhoneNumberDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/PhoneNumber/events.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueDocs.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../../../shared/types'\nimport { getFieldEventsWithTypes } from '../FieldDocs'\n\nexport const phoneNumberSpecificEvents: PropertiesTableProps = {\n  onCountryCodeChange: {\n    doc: ' Callback on country code change.',\n    type: '(value?: string) => void',\n    status: 'optional',\n  },\n  onNumberChange: {\n    doc: 'Callback on phone number change.',\n    type: '(value?: string) => void',\n    status: 'optional',\n  },\n}\n\nexport const phoneNumberGeneralEvents = getFieldEventsWithTypes(\n  { type: 'string', optional: true },\n  { type: 'object' }\n)\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {phoneNumberSpecificEvents, phoneNumberGeneralEvents} from '@dnb/eufemia/src/extensions/forms/Field/PhoneNumber/PhoneNumberDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Events\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field-specific events\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: phoneNumberSpecificEvents\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"General events\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: phoneNumberGeneralEvents\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Details about general events arguments\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The first argument value returned by the event handlers is a string where the country code and phone-number is separated by a space, e.g. \", _jsx(_components.code, {\n        children: \"+47 9123457\"\n      }), \". If the \", _jsx(_components.code, {\n        children: \"omitCountryCodeField\"\n      }), \" is set to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \", then only the phone-number will be used, so the argument would be \", _jsx(_components.code, {\n        children: \"9123457\"\n      }), \" without the leading country code.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"PhoneNumber also has an extra second parameter of type \", _jsx(_components.code, {\n        children: \"{ countryCode?: string, phoneNumber: string | undefined }\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The typing of the general event callbacks is as follows:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"(\\n  value: string | undefined, // e.g. \\\"+47 12345678\\\"\\n  additionalArgs: {\\n      countryCode?: string, // e.g. \\\"+47\\\"\\n      phoneNumber: string | undefined // e.g. \\\"12345678\\\"\\n  }\\n) => void\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colorValue = 'var(--color-success-green)'\nconst colorString = 'var(--color-fire-red)'\nconst colorType = 'var(--color-violet)'\nconst colorUndefined = 'var(--color-black-55)'\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = children.startsWith(`'`) ? colorString : colorType\n        // falls through\n      }\n      case 'value': {\n        style.color = children.startsWith(`'`)\n          ? colorString\n          : children === 'undefined' || children === 'null'\n          ? colorUndefined\n          : colorValue\n        // falls through\n      }\n      default: {\n        style.background = 'none'\n        style.boxShadow = 'none'\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('/')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { fieldBlockSharedProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  dataValueEvents,\n  dataValueProperties,\n} from '../hooks/DataValueDocs'\n\nexport const fieldProperties: PropertiesTableProps = {\n  ...dataValueProperties,\n  ...fieldBlockSharedProperties,\n}\n\nexport const fieldEvents: PropertiesTableProps = {\n  ...dataValueEvents,\n}\n\nexport const getFieldEventsWithTypes = (\n  valueType: { type: string; optional?: boolean } = undefined,\n  additionalArgsType: { type: string; optional?: boolean } = undefined\n): PropertiesTableProps => {\n  const value = valueType\n    ? `value${valueType.optional ? '?' : ''}: ${valueType.type}`\n    : 'value'\n\n  const add = additionalArgsType\n    ? `, additionalArgs${additionalArgsType.optional ? '?' : ''}: ${\n        additionalArgsType.type\n      }`\n    : ''\n\n  const typeString = `(${value}${add}) => void`\n\n  return {\n    ...fieldEvents,\n    onChange: {\n      ...fieldEvents.onChange,\n      type: typeString,\n    },\n    onFocus: {\n      ...fieldEvents.onFocus,\n      type: typeString,\n    },\n    onBlur: {\n      ...fieldEvents.onBlur,\n      type: typeString,\n    },\n  }\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const fieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  width: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const fieldBlockProperties: PropertiesTableProps = {\n  ...fieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading size](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'string',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const dataValueProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: 'Info message shown below / after the field.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  warning: {\n    doc: 'Warning message shown below / after the field.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  error: {\n    doc: 'Error message shown below / after the field.',\n    type: 'Error',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set `true`, the field will give an error if the value cannot be empty.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  continuousValidation: {\n    doc: 'Set `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages.',\n    type: 'object',\n    status: 'optional',\n  },\n  validator: {\n    doc: 'Custom validator function that will be called for every change done by the user. Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function that will be called when the user leaves the field (blurring a text input, closing a dropdown etc). Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'transforms the value before it gets forwarded to the form data object or returned as the `onChange` value parameter.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const dataValueEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`.\",\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument.',\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument.',\n    type: '(value) => void',\n    status: 'optional',\n  },\n}\n"],"names":["phoneNumberSpecificEvents","onCountryCodeChange","doc","type","status","onNumberChange","phoneNumberGeneralEvents","getFieldEventsWithTypes","optional","_createMdxContent","props","_components","Object","assign","h2","h3","h4","p","code","pre","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","className","wrapper","MDXLayout","basicComponents","StyledTable","_styled","Table","target","name","styles","colorString","FormattedCode","_ref","variant","strikethrough","style","rest","textDecoration","color","startsWith","background","boxShadow","_ref2","valueType","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","defaultValue","includes","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp","fieldProperties","dataValueProperties","fieldBlockSharedProperties","fieldEvents","dataValueEvents","additionalArgsType","undefined","typeString","onChange","onFocus","onBlur","label","labelDescription","labelSrOnly","layout","width","contentWidth","fieldBlockProperties","labelSize","asFieldset","align","composition","disabled","value","path","info","warning","error","emptyValue","required","schema","validateInitially","validateUnchanged","continuousValidation","errorMessages","validator","onBlurValidator","transformIn","transformOut"],"sourceRoot":""}