{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-phone-number-info-mdx-b23b009a6ebfe0348274.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/PhoneNumber/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Field.PhoneNumber\"\n      }), \" is a wrapper component for the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/base-fields/String\",\n        children: \"input of strings\"\n      }), \", with user experience tailored for phone number values.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Field } from '@dnb/eufemia/extensions/forms'\\nrender(<Field.PhoneNumber />)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There is a corresponding \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Value/PhoneNumber\",\n        children: \"Value.PhoneNumber\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Value\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This component behaves as \\\"one single component\\\". It combines the country code and the number to a single string during an event callback.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Also, the \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" property should be a string with the country code, separated from the main number by a space.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The component returns the \", _jsx(_components.code, {\n        children: \"emptyValue\"\n      }), \" when no number is set, which defaults to \", _jsx(_components.code, {\n        children: \"undefined\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It uses the HTML \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\",\n        children: \"autocomplete\"\n      }), \" attribute (\", _jsx(_components.code, {\n        children: \"tel-country-code\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"tel-national\"\n      }), \") in their respective fields(country code and phone number) to provide automated assistance in filling out form field values, as well as guidance to the browser as to the type of information expected in the field..\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Default country code\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The default country code is set to \", _jsx(_components.code, {\n        children: \"+47\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Structure and format of phone numbers\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Creating a list of all possible phone numbers would be impractical due to the vast number of combinations, especially considering the various country codes, area codes, and local numbers. Additionally, new numbers are constantly being allocated, and existing numbers may be reassigned over time.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Therefore, the structure and format is only used when \", _jsx(_components.code, {\n        children: \"+47\"\n      }), \" is selected.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"Support for locales like \", _jsx(_components.code, {\n        children: \"sv-SE\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to the default support for \", _jsx(_components.code, {\n        children: \"nb-NO\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"en-GB\"\n      }), \", you can also use the \", _jsx(_components.code, {\n        children: \"sv-SE\"\n      }), \" locale to display country names in Swedish.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Learn more about \", _jsx(_components.a, {\n        href: \"/uilib/usage/customisation/localization/#eufemia-forms\",\n        children: \"importing additional locales\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Filter or prioritize country listing\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can filter countries with the \", _jsx(_components.code, {\n        children: \"countries\"\n      }), \" property's values \", _jsx(_components.code, {\n        children: \"Scandinavia\"\n      }), \", \", _jsx(_components.code, {\n        children: \"Nordic\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"Europe\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Countries are sorted in alphabetically order, with the following prioritized countries on top of the list:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Norway\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Sweden\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Denmark\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Finland\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Validation\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default it has no validation. But you can enable it by giving a \", _jsx(_components.code, {\n        children: \"required\"\n      }), \", \", _jsx(_components.code, {\n        children: \"pattern\"\n      }), \", \", _jsx(_components.code, {\n        children: \"schema\"\n      }), \", \", _jsx(_components.code, {\n        children: \"onChangeValidator\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"onBlurValidator\"\n      }), \" property with the needed validation. More about validation in the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/getting-started/#validation-and-error-handling\",\n        children: \"Getting Started\"\n      }), \" section.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Norwegian mobile numbers\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"E.g. the following pattern will strictly match Norwegian mobile numbers, which are defined as having a \\\"+47\\\" country code, followed by a number starting with 4 or 9, and exactly 7 more digits. If the country code is set to any other two-digit code, the pattern will match any 6 digits after the country code.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Field.PhoneNumber pattern=\\\"((?=\\\\+47)^\\\\+47 [49]\\\\d{7}$)|((?!\\\\+47)^\\\\+\\\\d{2} \\\\d{6})\\\" />\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","a","pre","h3","ul","li","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","className","wrapper","MDXLayout"],"sourceRoot":""}