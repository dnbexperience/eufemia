"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[27789],{74818:function(e,t,n){n.r(t);var o=n(52322),r=n(45392),i=n(85179),s=n(9670);function a(e){const t=Object.assign({h2:"h2",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",em:"em",a:"a"},(0,r.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{children:"Properties"}),"\n",(0,o.jsx)(t.h3,{children:"Field-specific props"}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Property"}),(0,o.jsx)(t.th,{children:"Type"}),(0,o.jsx)(t.th,{children:"Description"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"pattern"})}),(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"string"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," Validation based on regex pattern for the number field e.g. ",(0,o.jsx)(t.code,{children:'pattern="^[49]+"'}),"."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"help"})}),(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"object"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," Provide a help button. Object consisting of ",(0,o.jsx)(t.code,{children:"title"})," and ",(0,o.jsx)(t.code,{children:"content"}),"."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"countries"})}),(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"string"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," List only a certain set of countries: ",(0,o.jsx)(t.code,{children:"Scandinavia"}),", ",(0,o.jsx)(t.code,{children:"Nordic"}),", ",(0,o.jsx)(t.code,{children:"Europe"})," or ",(0,o.jsx)(t.code,{children:"Prioritized"}),"(all countries ",(0,o.jsx)(t.a,{href:"/uilib/extensions/forms/feature-fields/PhoneNumber/#filter-or-prioritize-country-listing",children:"sorted by priority"}),"). Defaults to ",(0,o.jsx)(t.code,{children:"Prioritized"}),"."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"omitCountryCodeField"})}),(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"boolean"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," If ",(0,o.jsx)(t.code,{children:"true"})," is given, then everything related to country code is removed."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"countryCodeFieldClassName"})}),(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"string"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," Class name for the country code component."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"numberFieldClassName"})}),(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"string"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," Class name for the number component."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"countryCodePlaceholder"})}),(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"string"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," Placeholder for the country code field."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"countryCodeLabel"})}),(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"string"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," Label to show above / before the country code field."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"numberMask"})}),(0,o.jsx)(t.td,{children:"Various"}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," See property ",(0,o.jsx)(t.code,{children:"mask"})," of the ",(0,o.jsx)(t.a,{href:"/uilib/components/input-masked/properties",children:"InputMasked"})," component."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.code,{children:"width"})}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.code,{children:"string"})," or ",(0,o.jsx)(t.code,{children:"false"})]}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," ",(0,o.jsx)(t.code,{children:"large"})," for predefined standard width, ",(0,o.jsx)(t.code,{children:"stretch"})," for fill available width."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.a,{href:"/uilib/layout/space/properties",children:"Space"})}),(0,o.jsx)(t.td,{children:"Various"}),(0,o.jsxs)(t.td,{children:[(0,o.jsx)(t.em,{children:"(optional)"})," Spacing properties like ",(0,o.jsx)(t.code,{children:"top"})," or ",(0,o.jsx)(t.code,{children:"bottom"})," are supported."]})]})]})]}),"\n",(0,o.jsx)(t.h3,{children:"General props"}),"\n",(0,o.jsx)(i.Z,{props:s.u,omit:["layout","label","labelDescription"]})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,r.ah)(),e.components);return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(a,e)})):a(e)}},85179:function(e,t,n){n.d(t,{Z:function(){return f}});var o=n(70894),r=n(61185),i=n(55560),s=n(41676),a=n(6210),l=n(64223),d=n(37339),c=n(595),h=n(52322);const u={...c.L,p:e=>(0,h.jsx)("span",{...e})},p=(0,o.Z)(i.ZP,{target:"e13h2c840"})({name:"1qdk5x4",styles:"td{white-space:nowrap;}"}),x="var(--color-fire-red)",j=e=>{let{variant:t,strikethrough:n,children:o,style:r={},...i}=e;if(n&&(r.textDecoration="line-through"),"string"==typeof o)switch(t){case"prop":break;case"type":r.color=o.startsWith("'")?x:"var(--color-violet)";case"value":r.color=o.startsWith("'")?x:"undefined"===o?"var(--color-black-55)":"var(--color-success-green)";default:r.background="none",r.boxShadow="none"}return u.code({children:o,style:r,...i})};function f(e){let{props:t,valueType:n="string",camelCase:o,omit:c,showDefaultValue:x=!1}=e;const f=Object.keys(t),g=Object.entries(t).map((e=>{let[t,i]=e;if(!i)return null;const{type:l,defaultValue:p,doc:g,status:y}=i;return c&&c.includes(t)?null:(0,h.jsxs)(s.Z,{children:[(0,h.jsx)(a.Z,{children:(0,h.jsx)(j,{variant:"prop",strikethrough:"deprecated"===y,children:m(o?(0,d.zW)(t):t)})}),(0,h.jsx)(a.Z,{children:(Array.isArray(l)?l:[l]).map((e=>{if("string"==typeof e){if(String(e).includes("{valueType}")){if(Array.isArray(n))return n.map(((e,t)=>(0,h.jsx)(j,{variant:"type",children:e},e+t))).reduce(((e,t)=>(0,h.jsxs)(h.Fragment,{children:[e," ",(0,h.jsx)("br",{})," ",t]})));e=n}return(0,h.jsx)(j,{variant:"type",children:e},e)}})).reduce(((e,t)=>(0,h.jsxs)(h.Fragment,{children:[e," ",(0,h.jsx)("br",{})," ",t]})))}),x&&(0,h.jsx)(a.Z,{children:p?(0,h.jsx)(j,{variant:"value",children:p}):"required"===y&&"REQUIRED"}),(0,h.jsxs)(a.Z,{children:[(!x||"deprecated"===y)&&(0,h.jsxs)("em",{children:["(",y,") "]}),(0,h.jsx)(r.D,{components:u,children:o?b(g,f):g})]})]},t)}));return(0,h.jsx)(i.ZP.ScrollView,{children:(0,h.jsxs)(p,{children:[(0,h.jsx)("thead",{children:(0,h.jsxs)(s.Z,{children:[(0,h.jsx)(l.Z,{children:"Property"}),(0,h.jsx)(l.Z,{children:"Type"}),x&&(0,h.jsx)(l.Z,{children:"Default value"}),(0,h.jsx)(l.Z,{children:"Description"})]})}),(0,h.jsx)("tbody",{children:g})]})})}function b(e,t){return t.forEach((t=>{e=e.replace(new RegExp(t,"g"),(0,d.zW)(t))})),e}function m(e){return e.includes("/")?(0,h.jsx)(r.D,{components:u,children:e}):e}},6210:function(e,t,n){var o=n(30600);t.Z=o.Z},64223:function(e,t,n){var o=n(91859);t.Z=o.Z},41676:function(e,t,n){var o=n(47048);t.Z=o.Z},9670:function(e,t,n){n.d(t,{d:function(){return s},u:function(){return i}});var o=n(84187),r=n(5484);const i={...r.c,...o.L},s={...r.F}},84187:function(e,t,n){n.d(t,{L:function(){return o},o:function(){return r}});const o={label:{doc:"Field label to show above / before the input feature.",type:"string",status:"optional"},labelDescription:{doc:'A more discreet text displayed beside the label (i.e for "(optional)").',type:"string",status:"optional"},layout:{doc:"Layout for the label and input. Can be `horizontal` or `vertical`.",type:"string",status:"optional"},width:{doc:"`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.",type:["string","false"],status:"optional"},contentWidth:{doc:"`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.",type:["string","false"],status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},r={...o,labelSize:{doc:"Define one of the following [heading size](/uilib/elements/heading/): `medium` or `large`.",type:["string","false"],status:"optional"},asFieldset:{doc:"Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.",type:"boolean",status:"optional"},composition:{doc:"Use `true` for when you have more than one field wrapped.",type:"string",status:"optional"},disabled:{doc:"Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.",type:"boolean",status:"optional"}}},5484:function(e,t,n){n.d(t,{F:function(){return r},c:function(){return o}});const o={value:{doc:"Source data value for the input.",type:"{valueType}",status:"optional"},path:{doc:"JSON Pointer for where the data for this input is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.",type:"string",status:"optional"},id:{doc:"Unique id for connecting Form.Handler and helper tools such as Form.useData.",type:"string",status:"optional"},info:{doc:"Info message shown below / after the input.",type:"React.Node",status:"optional"},warning:{doc:"Warning message shown below / after the input.",type:"React.Node",status:"optional"},error:{doc:"Error message shown below / after the input.",type:"Error",status:"optional"},disabled:{doc:"Set `true` to show the field but without the possibility of changing the value.",type:"boolean",status:"optional"},emptyValue:{doc:"The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.",type:"any",status:"optional"},required:{doc:"When set `true`, the input will give an error if the value cannot be empty.",type:"boolean",status:"optional"},schema:{doc:"Custom JSON Schema for validating the value.",type:"object",status:"optional"},validateInitially:{doc:"Set `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.",type:"boolean",status:"optional"},validateUnchanged:{doc:"Set `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.",type:"boolean",status:"optional"},continuousValidation:{doc:"Set `true` to show validation based errors continuously while writing, not just when blurring the field.",type:"boolean",status:"optional"},errorMessages:{doc:"Custom error messages for each type of error, overriding default messages.",type:"object",status:"optional"},validator:{doc:"Custom validator function that will be called for every change done by the user. Can be asynchronous or synchronous.",type:"function",status:"optional"},onBlurValidator:{doc:"Custom validator function that will be called when the user leaves the field (blurring a text input, closing a dropdown etc). Can be asynchronous or synchronous.",type:"function",status:"optional"},transformIn:{doc:"transforms the `value` before its displayed in the field (e.g. input).",type:"function",status:"optional"},transformOut:{doc:"transforms the value before it gets forwarded to the form data object or returned as the `onChange` value parameter.",type:"function",status:"optional"}},r={onChange:{doc:"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`.",type:"function",status:"optional"},onFocus:{doc:"Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument.",type:"function",status:"optional"},onBlur:{doc:"Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument.",type:"function",status:"optional"}}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-feature-fields-phone-number-properties-mdx-c5e3c5c4ad363fb0cb0e.js.map