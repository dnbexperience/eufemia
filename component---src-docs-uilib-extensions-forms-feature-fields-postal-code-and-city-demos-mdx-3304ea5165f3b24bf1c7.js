"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[98806],{14338:function(n,e,o){o.r(e),o.d(e,{default:function(){return m}});var t={};o.r(t),o.d(t,{Disabled:function(){return u},Empty:function(){return s},IterateArray:function(){return g},Label:function(){return i},LabelAndValue:function(){return c},LongLabel:function(){return C},NonNorwegianPostalCode:function(){return j},Placeholder:function(){return d},SettingCountryBasedOnPath:function(){return x},ValidationRequired:function(){return y},WithError:function(){return p},WithHelp:function(){return h}});var l=o(31085),a=o(71184),r=o(32065);const s=()=>(0,l.jsx)(r.A,{children:"<Field.PostalCodeAndCity\n  postalCode={{\n    onChange: (value) => console.log('postalCode onChange', value),\n  }}\n  city={{\n    onChange: (value) => console.log('city onChange', value),\n  }}\n/>\n"}),d=()=>(0,l.jsx)(r.A,{children:"<Field.PostalCodeAndCity\n  postalCode={{\n    placeholder: '????',\n    onChange: (value) => console.log('postalCode onChange', value),\n  }}\n  city={{\n    placeholder: 'Your city',\n    onChange: (value) => console.log('city onChange', value),\n  }}\n/>\n"}),i=()=>(0,l.jsx)(r.A,{children:"<Field.PostalCodeAndCity\n  postalCode={{\n    label: 'PNR',\n    onChange: (value) => console.log('postalCode onChange', value),\n  }}\n  city={{\n    label: 'CTY',\n    onChange: (value) => console.log('city onChange', value),\n  }}\n/>\n"}),c=()=>(0,l.jsx)(r.A,{"data-visual-test":"postal-code-and-city-label",children:"<Field.PostalCodeAndCity\n  postalCode={{\n    label: 'Pnr.',\n    value: '0788',\n    onChange: (value) => console.log('postalCode onChange', value),\n  }}\n  city={{\n    value: 'Oslo',\n    onChange: (value) => console.log('city onChange', value),\n  }}\n/>\n"}),h=()=>(0,l.jsx)(r.A,{children:"<Field.PostalCodeAndCity\n  postalCode={{\n    onChange: (value) => console.log('postalCode onChange', value),\n  }}\n  city={{\n    onChange: (value) => console.log('city onChange', value),\n  }}\n  help={{\n    title: 'Help is available',\n    content:\n      'Helping others, encouraging others, are often acts of being kind that have more meaning that you may realize.',\n  }}\n/>\n"}),u=()=>(0,l.jsx)(r.A,{children:"<Field.PostalCodeAndCity\n  postalCode={{\n    value: '1234',\n    disabled: true,\n    onChange: (value) => console.log('postalCode onChange', value),\n  }}\n  city={{\n    value: 'Oslo',\n    disabled: true,\n    onChange: (value) => console.log('city onChange', value),\n  }}\n/>\n"}),p=()=>(0,l.jsx)(r.A,{"data-visual-test":"postal-code-and-city-error",children:"<Field.PostalCodeAndCity\n  postalCode={{}}\n  city={{}}\n  error={new Error('This is what is wrong...')}\n/>\n"}),y=()=>(0,l.jsx)(r.A,{children:"<Field.PostalCodeAndCity\n  postalCode={{\n    required: true,\n  }}\n  city={{\n    required: true,\n  }}\n/>\n"}),C=()=>(0,l.jsx)(r.A,{"data-visual-test":"postal-code-and-city-long-label",children:"<Field.PostalCodeAndCity\n  postalCode={{\n    label: 'With a very long label',\n  }}\n  city={{\n    label: 'With a very long label',\n  }}\n/>\n"}),g=()=>(0,l.jsx)(r.A,{children:"<Iterate.Array\n  value={[\n    {\n      postalCode: '0788',\n      city: 'Oslo',\n    },\n    {\n      postalCode: '0789',\n      city: 'Bergen',\n    },\n  ]}\n>\n  <Field.PostalCodeAndCity\n    postalCode={{\n      itemPath: '/postalCode',\n    }}\n    city={{\n      itemPath: '/city',\n    }}\n  />\n</Iterate.Array>\n"}),x=()=>(0,l.jsx)(r.A,{children:'<Form.Handler>\n  <Form.Card>\n    <Field.SelectCountry path="/country" defaultValue="NO" />\n    <Field.PostalCodeAndCity countryCode="/country" />\n  </Form.Card>\n</Form.Handler>\n'}),j=()=>(0,l.jsx)(r.A,{children:"<Form.Handler\n  translations={{\n    'nb-NO': {\n      'PostalCode.errorPattern':\n        'Dette er ikke et gyldig postnummer (fem siffer).',\n    },\n    'en-GB': {\n      'PostalCode.errorPattern':\n        'This is not a valid postal code (five-digits).',\n    },\n  }}\n>\n  <Field.PostalCodeAndCity\n    countryCode=\"DE\"\n    postalCode={{\n      pattern: '^[0-9]{5}$',\n      onBlurValidator: undefined,\n      mask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/],\n      placeholder: '00000',\n      width: '5.4rem',\n    }}\n    city={{\n      pattern: '^[a-zA-ZäöüÄÖÜß -]+$',\n      width: 'stretch',\n    }}\n  />\n</Form.Handler>\n"});function v(n){const e=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code"},(0,a.R)(),n.components),{VisibleWhenVisualTest:o}=e;return t||f("Examples",!1),u||f("Examples.Disabled",!0),s||f("Examples.Empty",!0),g||f("Examples.IterateArray",!0),i||f("Examples.Label",!0),c||f("Examples.LabelAndValue",!0),C||f("Examples.LongLabel",!0),j||f("Examples.NonNorwegianPostalCode",!0),d||f("Examples.Placeholder",!0),x||f("Examples.SettingCountryBasedOnPath",!0),y||f("Examples.ValidationRequired",!0),p||f("Examples.WithError",!0),h||f("Examples.WithHelp",!0),o||f("VisibleWhenVisualTest",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.h2,{children:"Demos"}),"\n",(0,l.jsx)(e.h3,{children:"Empty"}),"\n",(0,l.jsx)(s,{}),"\n",(0,l.jsx)(e.h3,{children:"Placeholder"}),"\n",(0,l.jsx)(d,{}),"\n",(0,l.jsx)(e.h3,{children:"Label"}),"\n",(0,l.jsx)(i,{}),"\n",(0,l.jsx)(e.h3,{children:"Label and value"}),"\n",(0,l.jsx)(c,{}),"\n",(0,l.jsx)(e.h3,{children:"Iterate over array"}),"\n",(0,l.jsxs)(e.p,{children:["By using the ",(0,l.jsx)(e.code,{children:"itemPath"})," property, you can iterate over an array and use the ",(0,l.jsx)(e.code,{children:"postalCode"})," and ",(0,l.jsx)(e.code,{children:"city"})," properties to render the fields."]}),"\n",(0,l.jsx)(g,{}),"\n",(0,l.jsx)(e.h3,{children:"Disabled"}),"\n",(0,l.jsx)(u,{}),"\n",(0,l.jsx)(e.h3,{children:"With help"}),"\n",(0,l.jsx)(h,{}),"\n",(0,l.jsx)(e.h3,{children:"Error"}),"\n",(0,l.jsx)(p,{}),"\n",(0,l.jsx)(e.h3,{children:"Validation - Required"}),"\n",(0,l.jsx)(y,{}),"\n",(0,l.jsx)(e.h3,{children:"Path Based Country"}),"\n",(0,l.jsxs)(e.p,{children:["The ",(0,l.jsx)(e.code,{children:"country"})," property supports a field path as value. This allows you to set the ",(0,l.jsx)(e.code,{children:"country"})," based on the value of another field."]}),"\n",(0,l.jsx)(x,{}),"\n",(0,l.jsx)(e.h3,{children:"Non-Norwegian Postal Codes"}),"\n",(0,l.jsxs)(e.p,{children:["If you want to allow for a postal code that is not Norwegian, just set the ",(0,l.jsx)(e.code,{children:"country"})," property to the desired country, and add your own custom validation."]}),"\n",(0,l.jsxs)(e.p,{children:["NB: As of today, setting ",(0,l.jsx)(e.code,{children:"country"})," property to anything other than ",(0,l.jsx)(e.code,{children:"NO"})," will only remove the default norwegian postal code pattern, mask, and placeholder, but not actually set the postal code pattern, mask, and placeholder for the value provided to the ",(0,l.jsx)(e.code,{children:"country"})," property. This functionality will hopefully be implemented in the future."]}),"\n",(0,l.jsx)(j,{}),"\n",(0,l.jsx)(o,{children:(0,l.jsx)(C,{})})]})}var m=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,a.R)(),n.components);return e?(0,l.jsx)(e,Object.assign({},n,{children:(0,l.jsx)(v,n)})):v(n)};function f(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-feature-fields-postal-code-and-city-demos-mdx-3304ea5165f3b24bf1c7.js.map