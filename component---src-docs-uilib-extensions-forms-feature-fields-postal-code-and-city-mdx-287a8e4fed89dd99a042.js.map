{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-postal-code-and-city-mdx-287a8e4fed89dd99a042.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/PostalCodeAndCity.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/PostalCodeAndCity/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/PostalCodeAndCity/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/PostalCodeAndCity/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/feature-fields/PostalCodeAndCity/info';\nimport Demos from 'Docs/uilib/extensions/forms/feature-fields/PostalCodeAndCity/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, FormError } from '@dnb/eufemia/src/extensions/forms'\n\nexport const Empty = () => {\n  return (\n    <ComponentBox>\n      <Field.PostalCodeAndCity\n        postalCode={{\n          onChange: (value) => console.log('postalCode onChange', value),\n        }}\n        city={{\n          onChange: (value) => console.log('city onChange', value),\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Placeholder = () => {\n  return (\n    <ComponentBox>\n      <Field.PostalCodeAndCity\n        postalCode={{\n          placeholder: '????',\n          onChange: (value) => console.log('postalCode onChange', value),\n        }}\n        city={{\n          placeholder: 'Your city..',\n          onChange: (value) => console.log('city onChange', value),\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Label = () => {\n  return (\n    <ComponentBox>\n      <Field.PostalCodeAndCity\n        postalCode={{\n          label: 'PNR',\n          onChange: (value) => console.log('postalCode onChange', value),\n        }}\n        city={{\n          label: 'CTY',\n          onChange: (value) => console.log('city onChange', value),\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const LabelAndValue = () => {\n  return (\n    <ComponentBox data-visual-test=\"postal-code-and-city-label\">\n      <Field.PostalCodeAndCity\n        postalCode={{\n          label: 'Pnr.',\n          value: '0788',\n          onChange: (value) => console.log('postalCode onChange', value),\n        }}\n        city={{\n          value: 'Oslo',\n          onChange: (value) => console.log('city onChange', value),\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithHelp = () => {\n  return (\n    <ComponentBox>\n      <Field.PostalCodeAndCity\n        postalCode={{\n          onChange: (value) => console.log('postalCode onChange', value),\n        }}\n        city={{\n          onChange: (value) => console.log('city onChange', value),\n        }}\n        help={{\n          title: 'Help is available',\n          content:\n            'Helping others, encouraging others, are often acts of being kind that have more meaning that you may realize.',\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Disabled = () => {\n  return (\n    <ComponentBox>\n      <Field.PostalCodeAndCity\n        postalCode={{\n          value: '1234',\n          disabled: true,\n          onChange: (value) => console.log('postalCode onChange', value),\n        }}\n        city={{\n          value: 'Oslo',\n          disabled: true,\n          onChange: (value) => console.log('city onChange', value),\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Error = () => {\n  return (\n    <ComponentBox\n      scope={{ FormError }}\n      data-visual-test=\"postal-code-and-city-error\"\n    >\n      <Field.PostalCodeAndCity\n        postalCode={{}}\n        city={{}}\n        error={new FormError('This is what is wrong...')}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const ValidationRequired = () => {\n  return (\n    <ComponentBox>\n      <Field.PostalCodeAndCity\n        postalCode={{\n          required: true,\n        }}\n        city={{\n          required: true,\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const LongLabel = () => {\n  return (\n    <ComponentBox data-visual-test=\"postal-code-and-city-long-label\">\n      <Field.PostalCodeAndCity\n        postalCode={{\n          label: 'With a very long label',\n        }}\n        city={{\n          label: 'With a very long label',\n        }}\n      />\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {VisibleWhenVisualTest} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.Disabled) _missingMdxReference(\"Examples.Disabled\", true);\n  if (!Examples.Empty) _missingMdxReference(\"Examples.Empty\", true);\n  if (!Examples.Error) _missingMdxReference(\"Examples.Error\", true);\n  if (!Examples.Label) _missingMdxReference(\"Examples.Label\", true);\n  if (!Examples.LabelAndValue) _missingMdxReference(\"Examples.LabelAndValue\", true);\n  if (!Examples.LongLabel) _missingMdxReference(\"Examples.LongLabel\", true);\n  if (!Examples.Placeholder) _missingMdxReference(\"Examples.Placeholder\", true);\n  if (!Examples.ValidationRequired) _missingMdxReference(\"Examples.ValidationRequired\", true);\n  if (!Examples.WithHelp) _missingMdxReference(\"Examples.WithHelp\", true);\n  if (!VisibleWhenVisualTest) _missingMdxReference(\"VisibleWhenVisualTest\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Empty\"\n    }), \"\\n\", _jsx(Examples.Empty, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Placeholder\"\n    }), \"\\n\", _jsx(Examples.Placeholder, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Label\"\n    }), \"\\n\", _jsx(Examples.Label, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Label and value\"\n    }), \"\\n\", _jsx(Examples.LabelAndValue, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Disabled\"\n    }), \"\\n\", _jsx(Examples.Disabled, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With help\"\n    }), \"\\n\", _jsx(Examples.WithHelp, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Error\"\n    }), \"\\n\", _jsx(Examples.Error, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Validation - Required\"\n    }), \"\\n\", _jsx(Examples.ValidationRequired, {}), \"\\n\", _jsx(VisibleWhenVisualTest, {\n      children: _jsx(Examples.LongLabel, {})\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Field.PostalCodeAndCity\"\n      }), \" is a wrapper component for input of two separate \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/base-fields/String\",\n        children: \"input of strings\"\n      }), \" with user experience tailored for postcode and city values.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"These fields is meant for Norwegian postcodes and cities. The postcode input takes a 4-digit string as values, since its meant for norwegian postcodes. A norwegian postcode can have a leading zero, which is why the value is a string and not a number.\\nMore info about postcodes can be found at \", _jsx(_components.a, {\n        href: \"https://www.bring.no/tjenester/adressetjenester/postnummer\",\n        children: \"Posten\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Field } from '@dnb/eufemia/extensions/forms'\\nrender(<Field.PostalCodeAndCity />)\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","Empty","ComponentBox","Placeholder","Label","LabelAndValue","WithHelp","Disabled","Error","scope","FormError","ValidationRequired","LongLabel","_components","h2","h3","VisibleWhenVisualTest","Examples","_missingMdxReference","id","component","p","code","a","pre","href","className"],"sourceRoot":""}