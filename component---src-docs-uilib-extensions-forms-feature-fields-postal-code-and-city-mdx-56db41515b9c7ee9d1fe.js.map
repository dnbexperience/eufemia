{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-postal-code-and-city-mdx-56db41515b9c7ee9d1fe.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/PostalCodeAndCity.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/PostalCodeAndCity/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/PostalCodeAndCity/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/PostalCodeAndCity/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/feature-fields/PostalCodeAndCity/info';\nimport Demos from 'Docs/uilib/extensions/forms/feature-fields/PostalCodeAndCity/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, Form, Iterate } from '@dnb/eufemia/src/extensions/forms'\n\nexport const Empty = () => {\n  return (\n    <ComponentBox>\n      <Field.PostalCodeAndCity\n        postalCode={{\n          onChange: (value) => console.log('postalCode onChange', value),\n        }}\n        city={{\n          onChange: (value) => console.log('city onChange', value),\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Placeholder = () => {\n  return (\n    <ComponentBox>\n      <Field.PostalCodeAndCity\n        postalCode={{\n          placeholder: '????',\n          onChange: (value) => console.log('postalCode onChange', value),\n        }}\n        city={{\n          placeholder: 'Your city',\n          onChange: (value) => console.log('city onChange', value),\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Label = () => {\n  return (\n    <ComponentBox>\n      <Field.PostalCodeAndCity\n        postalCode={{\n          label: 'PNR',\n          onChange: (value) => console.log('postalCode onChange', value),\n        }}\n        city={{\n          label: 'CTY',\n          onChange: (value) => console.log('city onChange', value),\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const LabelAndValue = () => {\n  return (\n    <ComponentBox data-visual-test=\"postal-code-and-city-label\">\n      <Field.PostalCodeAndCity\n        postalCode={{\n          label: 'Pnr.',\n          value: '0788',\n          onChange: (value) => console.log('postalCode onChange', value),\n        }}\n        city={{\n          value: 'Oslo',\n          onChange: (value) => console.log('city onChange', value),\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithHelp = () => {\n  return (\n    <ComponentBox>\n      <Field.PostalCodeAndCity\n        postalCode={{\n          onChange: (value) => console.log('postalCode onChange', value),\n        }}\n        city={{\n          onChange: (value) => console.log('city onChange', value),\n        }}\n        help={{\n          title: 'Help is available',\n          content:\n            'Helping others, encouraging others, are often acts of being kind that have more meaning that you may realize.',\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Disabled = () => {\n  return (\n    <ComponentBox>\n      <Field.PostalCodeAndCity\n        postalCode={{\n          value: '1234',\n          disabled: true,\n          onChange: (value) => console.log('postalCode onChange', value),\n        }}\n        city={{\n          value: 'Oslo',\n          disabled: true,\n          onChange: (value) => console.log('city onChange', value),\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithError = () => {\n  return (\n    <ComponentBox data-visual-test=\"postal-code-and-city-error\">\n      <Field.PostalCodeAndCity\n        postalCode={{}}\n        city={{}}\n        error={new Error('This is what is wrong...')}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const ValidationRequired = () => {\n  return (\n    <ComponentBox>\n      <Field.PostalCodeAndCity\n        postalCode={{\n          required: true,\n        }}\n        city={{\n          required: true,\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const LongLabel = () => {\n  return (\n    <ComponentBox data-visual-test=\"postal-code-and-city-long-label\">\n      <Field.PostalCodeAndCity\n        postalCode={{\n          label: 'With a very long label',\n        }}\n        city={{\n          label: 'With a very long label',\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const IterateArray = () => {\n  return (\n    <ComponentBox>\n      <Iterate.Array\n        value={[\n          {\n            postalCode: '0788',\n            city: 'Oslo',\n          },\n          {\n            postalCode: '0789',\n            city: 'Bergen',\n          },\n        ]}\n      >\n        <Field.PostalCodeAndCity\n          postalCode={{ itemPath: '/postalCode' }}\n          city={{ itemPath: '/city' }}\n        />\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const SettingCountryBasedOnPath = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Form.Card>\n          <Field.SelectCountry path=\"/country\" defaultValue=\"NO\" />\n          <Field.PostalCodeAndCity countryCode=\"/country\" />\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const NonNorwegianPostalCode = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        translations={{\n          'nb-NO': {\n            'PostalCode.errorPattern':\n              'Dette er ikke et gyldig postnummer (fem siffer).',\n          },\n          'en-GB': {\n            'PostalCode.errorPattern':\n              'This is not a valid postal code (five-digits).',\n          },\n        }}\n      >\n        <Field.PostalCodeAndCity\n          countryCode=\"DE\"\n          postalCode={{\n            pattern: '^[0-9]{5}$',\n            onBlurValidator: undefined,\n            mask: [/\\\\d/, /\\\\d/, /\\\\d/, /\\\\d/, /\\\\d/],\n            placeholder: '00000',\n            width: '5.4rem',\n          }}\n          city={{ pattern: '^[a-zA-ZäöüÄÖÜß -]+$', width: 'stretch' }}\n        />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {VisibleWhenVisualTest} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.Disabled) _missingMdxReference(\"Examples.Disabled\", true);\n  if (!Examples.Empty) _missingMdxReference(\"Examples.Empty\", true);\n  if (!Examples.IterateArray) _missingMdxReference(\"Examples.IterateArray\", true);\n  if (!Examples.Label) _missingMdxReference(\"Examples.Label\", true);\n  if (!Examples.LabelAndValue) _missingMdxReference(\"Examples.LabelAndValue\", true);\n  if (!Examples.LongLabel) _missingMdxReference(\"Examples.LongLabel\", true);\n  if (!Examples.NonNorwegianPostalCode) _missingMdxReference(\"Examples.NonNorwegianPostalCode\", true);\n  if (!Examples.Placeholder) _missingMdxReference(\"Examples.Placeholder\", true);\n  if (!Examples.SettingCountryBasedOnPath) _missingMdxReference(\"Examples.SettingCountryBasedOnPath\", true);\n  if (!Examples.ValidationRequired) _missingMdxReference(\"Examples.ValidationRequired\", true);\n  if (!Examples.WithError) _missingMdxReference(\"Examples.WithError\", true);\n  if (!Examples.WithHelp) _missingMdxReference(\"Examples.WithHelp\", true);\n  if (!VisibleWhenVisualTest) _missingMdxReference(\"VisibleWhenVisualTest\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Empty\"\n    }), \"\\n\", _jsx(Examples.Empty, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Placeholder\"\n    }), \"\\n\", _jsx(Examples.Placeholder, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Label\"\n    }), \"\\n\", _jsx(Examples.Label, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Label and value\"\n    }), \"\\n\", _jsx(Examples.LabelAndValue, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Iterate over array\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By using the \", _jsx(_components.code, {\n        children: \"itemPath\"\n      }), \" property, you can iterate over an array and use the \", _jsx(_components.code, {\n        children: \"postalCode\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"city\"\n      }), \" properties to render the fields.\"]\n    }), \"\\n\", _jsx(Examples.IterateArray, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Disabled\"\n    }), \"\\n\", _jsx(Examples.Disabled, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With help\"\n    }), \"\\n\", _jsx(Examples.WithHelp, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Error\"\n    }), \"\\n\", _jsx(Examples.WithError, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Validation - Required\"\n    }), \"\\n\", _jsx(Examples.ValidationRequired, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Path Based Country\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"country\"\n      }), \" property supports a field path as value. This allows you to set the \", _jsx(_components.code, {\n        children: \"country\"\n      }), \" based on the value of another field.\"]\n    }), \"\\n\", _jsx(Examples.SettingCountryBasedOnPath, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Non-Norwegian Postal Codes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you want to allow for a postal code that is not Norwegian, just set the \", _jsx(_components.code, {\n        children: \"country\"\n      }), \" property to the desired country, and add your own custom validation.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"NB: As of today, setting \", _jsx(_components.code, {\n        children: \"country\"\n      }), \" property to anything other than \", _jsx(_components.code, {\n        children: \"NO\"\n      }), \" will only remove the default norwegian postal code pattern, mask, and placeholder, but not actually set the postal code pattern, mask, and placeholder for the value provided to the \", _jsx(_components.code, {\n        children: \"country\"\n      }), \" property. This functionality will hopefully be implemented in the future.\"]\n    }), \"\\n\", _jsx(Examples.NonNorwegianPostalCode, {}), \"\\n\", _jsx(VisibleWhenVisualTest, {\n      children: _jsx(Examples.LongLabel, {})\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Field.PostalCodeAndCity\"\n      }), \" is a wrapper component for input of two separate \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/base-fields/String\",\n        children: \"input of strings\"\n      }), \" with user experience tailored for postal code and city values.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"These fields is meant for Norwegian postal codes and cities. The postal code input takes a 4-digit string as values, since it's meant for Norwegian postal codes. A Norwegian postal code can have a leading zero, which is why the value is a string and not a number.\\nMore info about postal codes can be found at \", _jsx(_components.a, {\n        href: \"https://www.bring.no/tjenester/adressetjenester/postnummer\",\n        children: \"Posten\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Field } from '@dnb/eufemia/extensions/forms'\\nrender(<Field.PostalCodeAndCity />)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There is a corresponding \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Value/PostalCodeAndCity\",\n        children: \"Value.PostalCodeAndCity\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Validation and autofill\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Read more about how to use the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Connectors/Bring/\",\n        children: \"Bring API\"\n      }), \" to validate and autofill a postal code and city name.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","Empty","ComponentBox","Placeholder","Label","LabelAndValue","WithHelp","Disabled","WithError","ValidationRequired","LongLabel","IterateArray","SettingCountryBasedOnPath","NonNorwegianPostalCode","_components","h2","h3","p","code","VisibleWhenVisualTest","Examples","_missingMdxReference","id","component","Error","a","pre","href","className"],"sourceRoot":""}