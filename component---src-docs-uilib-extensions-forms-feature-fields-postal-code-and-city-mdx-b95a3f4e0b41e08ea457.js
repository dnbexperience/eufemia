"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[3158,7077,98806],{9693:function(e,n,o){o.r(n);var t=o(31085),a=o(71184);function l(e){const n=Object.assign({h2:"h2",pre:"pre",code:"code",p:"p",a:"a",ul:"ul",li:"li"},(0,a.R)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{children:"Import"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Field } from '@dnb/eufemia/extensions/forms'\nrender(<Field.PostalCodeAndCity />)\n"})}),"\n",(0,t.jsx)(n.h2,{children:"Description"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Field.PostalCodeAndCity"})," is a wrapper component for input of two separate ",(0,t.jsx)(n.a,{href:"/uilib/extensions/forms/base-fields/String",children:"input of strings"})," with user experience tailored for postal code and city values."]}),"\n",(0,t.jsxs)(n.p,{children:["These fields is meant for Norwegian postal codes and cities. The postal code input takes a 4-digit string as values, since it's meant for Norwegian postal codes. A Norwegian postal code can have a leading zero, which is why the value is a string and not a number.\nMore info about postal codes can be found at ",(0,t.jsx)(n.a,{href:"https://www.bring.no/tjenester/adressetjenester/postnummer",children:"Posten"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["It supports the HTML ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete",children:"autocomplete"})," attribute, and by default set it to ",(0,t.jsx)(n.code,{children:"postal-code"})," for the postal code field, and to ",(0,t.jsx)(n.code,{children:"address-level2"})," for the city field."]}),"\n",(0,t.jsxs)(n.p,{children:["There is a corresponding ",(0,t.jsx)(n.a,{href:"/uilib/extensions/forms/Value/PostalCodeAndCity",children:"Value.PostalCodeAndCity"})," component."]}),"\n",(0,t.jsx)(n.h2,{children:"Relevant links"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/dnbexperience/eufemia/tree/main/packages/dnb-eufemia/src/extensions/forms/Field/PostalCodeAndCity",children:"Source code"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/dnbexperience/eufemia/tree/main/packages/dnb-design-system-portal/src/docs/uilib/extensions/forms/feature-fields/PostalCodeAndCity",children:"Docs code"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{children:"Validation and autofill"}),"\n",(0,t.jsxs)(n.p,{children:["Read more about how to use the ",(0,t.jsx)(n.a,{href:"/uilib/extensions/forms/Connectors/Bring/",children:"Bring API"})," to validate and autofill a postal code and city name."]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.R)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(l,e)})):l(e)}},14338:function(e,n,o){o.r(n),o.d(n,{default:function(){return m}});var t={};o.r(t),o.d(t,{Disabled:function(){return u},Empty:function(){return r},IterateArray:function(){return j},Label:function(){return d},LabelAndValue:function(){return c},LongLabel:function(){return C},NonNorwegianPostalCode:function(){return g},Placeholder:function(){return i},SettingCountryBasedOnPath:function(){return y},ValidationRequired:function(){return x},WithError:function(){return p},WithHelp:function(){return h}});var a=o(31085),l=o(71184),s=o(32065);const r=()=>(0,a.jsx)(s.A,{children:"<Field.PostalCodeAndCity\n  postalCode={{\n    onChange: (value) => console.log('postalCode onChange', value),\n  }}\n  city={{\n    onChange: (value) => console.log('city onChange', value),\n  }}\n/>\n"}),i=()=>(0,a.jsx)(s.A,{children:"<Field.PostalCodeAndCity\n  postalCode={{\n    placeholder: '????',\n    onChange: (value) => console.log('postalCode onChange', value),\n  }}\n  city={{\n    placeholder: 'Your city',\n    onChange: (value) => console.log('city onChange', value),\n  }}\n/>\n"}),d=()=>(0,a.jsx)(s.A,{children:"<Field.PostalCodeAndCity\n  postalCode={{\n    label: 'PNR',\n    onChange: (value) => console.log('postalCode onChange', value),\n  }}\n  city={{\n    label: 'CTY',\n    onChange: (value) => console.log('city onChange', value),\n  }}\n/>\n"}),c=()=>(0,a.jsx)(s.A,{"data-visual-test":"postal-code-and-city-label",children:"<Field.PostalCodeAndCity\n  postalCode={{\n    label: 'Pnr.',\n    value: '0788',\n    onChange: (value) => console.log('postalCode onChange', value),\n  }}\n  city={{\n    value: 'Oslo',\n    onChange: (value) => console.log('city onChange', value),\n  }}\n/>\n"}),h=()=>(0,a.jsx)(s.A,{children:"<Field.PostalCodeAndCity\n  postalCode={{\n    onChange: (value) => console.log('postalCode onChange', value),\n  }}\n  city={{\n    onChange: (value) => console.log('city onChange', value),\n  }}\n  help={{\n    title: 'Help is available',\n    content:\n      'Helping others, encouraging others, are often acts of being kind that have more meaning that you may realize.',\n  }}\n/>\n"}),u=()=>(0,a.jsx)(s.A,{children:"<Field.PostalCodeAndCity\n  postalCode={{\n    value: '1234',\n    disabled: true,\n    onChange: (value) => console.log('postalCode onChange', value),\n  }}\n  city={{\n    value: 'Oslo',\n    disabled: true,\n    onChange: (value) => console.log('city onChange', value),\n  }}\n/>\n"}),p=()=>(0,a.jsx)(s.A,{"data-visual-test":"postal-code-and-city-error",children:"<Field.PostalCodeAndCity\n  postalCode={{}}\n  city={{}}\n  error={new Error('This is what is wrong...')}\n/>\n"}),x=()=>(0,a.jsx)(s.A,{children:"<Field.PostalCodeAndCity\n  postalCode={{\n    required: true,\n  }}\n  city={{\n    required: true,\n  }}\n/>\n"}),C=()=>(0,a.jsx)(s.A,{"data-visual-test":"postal-code-and-city-long-label",children:"<Field.PostalCodeAndCity\n  postalCode={{\n    label: 'With a very long label',\n  }}\n  city={{\n    label: 'With a very long label',\n  }}\n/>\n"}),j=()=>(0,a.jsx)(s.A,{children:"<Iterate.Array\n  value={[\n    {\n      postalCode: '0788',\n      city: 'Oslo',\n    },\n    {\n      postalCode: '0789',\n      city: 'Bergen',\n    },\n  ]}\n>\n  <Field.PostalCodeAndCity\n    postalCode={{\n      itemPath: '/postalCode',\n    }}\n    city={{\n      itemPath: '/city',\n    }}\n  />\n</Iterate.Array>\n"}),y=()=>(0,a.jsx)(s.A,{children:'<Form.Handler>\n  <Form.Card>\n    <Field.SelectCountry path="/country" defaultValue="NO" />\n    <Field.PostalCodeAndCity countryCode="/country" />\n  </Form.Card>\n</Form.Handler>\n'}),g=()=>(0,a.jsx)(s.A,{children:"<Form.Handler\n  translations={{\n    'nb-NO': {\n      'PostalCode.errorPattern':\n        'Dette er ikke et gyldig postnummer (fem siffer).',\n    },\n    'en-GB': {\n      'PostalCode.errorPattern':\n        'This is not a valid postal code (five-digits).',\n    },\n  }}\n>\n  <Field.PostalCodeAndCity\n    countryCode=\"DE\"\n    postalCode={{\n      pattern: '^[0-9]{5}$',\n      onBlurValidator: undefined,\n      mask: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/],\n      placeholder: '00000',\n      width: '5.4rem',\n    }}\n    city={{\n      pattern: '^[a-zA-ZäöüÄÖÜß -]+$',\n      width: 'stretch',\n    }}\n  />\n</Form.Handler>\n"});function f(e){const n=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code"},(0,l.R)(),e.components),{VisibleWhenVisualTest:o}=n;return t||b("Examples",!1),u||b("Examples.Disabled",!0),r||b("Examples.Empty",!0),j||b("Examples.IterateArray",!0),d||b("Examples.Label",!0),c||b("Examples.LabelAndValue",!0),C||b("Examples.LongLabel",!0),g||b("Examples.NonNorwegianPostalCode",!0),i||b("Examples.Placeholder",!0),y||b("Examples.SettingCountryBasedOnPath",!0),x||b("Examples.ValidationRequired",!0),p||b("Examples.WithError",!0),h||b("Examples.WithHelp",!0),o||b("VisibleWhenVisualTest",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{children:"Demos"}),"\n",(0,a.jsx)(n.h3,{children:"Empty"}),"\n",(0,a.jsx)(r,{}),"\n",(0,a.jsx)(n.h3,{children:"Placeholder"}),"\n",(0,a.jsx)(i,{}),"\n",(0,a.jsx)(n.h3,{children:"Label"}),"\n",(0,a.jsx)(d,{}),"\n",(0,a.jsx)(n.h3,{children:"Label and value"}),"\n",(0,a.jsx)(c,{}),"\n",(0,a.jsx)(n.h3,{children:"Iterate over array"}),"\n",(0,a.jsxs)(n.p,{children:["By using the ",(0,a.jsx)(n.code,{children:"itemPath"})," property, you can iterate over an array and use the ",(0,a.jsx)(n.code,{children:"postalCode"})," and ",(0,a.jsx)(n.code,{children:"city"})," properties to render the fields."]}),"\n",(0,a.jsx)(j,{}),"\n",(0,a.jsx)(n.h3,{children:"Disabled"}),"\n",(0,a.jsx)(u,{}),"\n",(0,a.jsx)(n.h3,{children:"With help"}),"\n",(0,a.jsx)(h,{}),"\n",(0,a.jsx)(n.h3,{children:"Error"}),"\n",(0,a.jsx)(p,{}),"\n",(0,a.jsx)(n.h3,{children:"Validation - Required"}),"\n",(0,a.jsx)(x,{}),"\n",(0,a.jsx)(n.h3,{children:"Path Based Country"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"country"})," property supports a field path as value. This allows you to set the ",(0,a.jsx)(n.code,{children:"country"})," based on the value of another field."]}),"\n",(0,a.jsx)(y,{}),"\n",(0,a.jsx)(n.h3,{children:"Non-Norwegian Postal Codes"}),"\n",(0,a.jsxs)(n.p,{children:["If you want to allow for a postal code that is not Norwegian, just set the ",(0,a.jsx)(n.code,{children:"country"})," property to the desired country, and add your own custom validation."]}),"\n",(0,a.jsxs)(n.p,{children:["NB: As of today, setting ",(0,a.jsx)(n.code,{children:"country"})," property to anything other than ",(0,a.jsx)(n.code,{children:"NO"})," will only remove the default norwegian postal code pattern, mask, and placeholder, but not actually set the postal code pattern, mask, and placeholder for the value provided to the ",(0,a.jsx)(n.code,{children:"country"})," property. This functionality will hopefully be implemented in the future."]}),"\n",(0,a.jsx)(g,{}),"\n",(0,a.jsx)(o,{children:(0,a.jsx)(C,{})})]})}var m=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.R)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(f,e)})):f(e)};function b(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},40196:function(e,n,o){o.r(n);var t=o(31085),a=o(71184),l=o(9693),s=o(14338);function r(e){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(l.default,{}),"\n",(0,t.jsx)(s.default,{})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.R)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(r,e)})):r()}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-feature-fields-postal-code-and-city-mdx-b95a3f4e0b41e08ea457.js.map