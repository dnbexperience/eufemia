{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-postal-code-and-city-properties-mdx-b77dcc3b24a835ad6ed9.js","mappings":"yOAEO,MAAMA,EAAoD,CAC/DC,WAAY,CACVC,IAAK,yGACLC,KAAM,SACNC,OAAQ,YAEVC,KAAM,CACJH,IAAK,qGACLC,KAAM,SACNC,OAAQ,YAEVE,KAAM,CACJJ,IAAK,qEACLC,KAAM,SACNC,OAAQ,aCVZ,SAASG,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKV,EAAYG,GAAI,CAC9BM,SAAU,eACR,MAAMC,EAAAA,EAAAA,KAAKV,EAAYG,GAAI,CAC7BM,SAAU,6BACR,MAAMC,EAAAA,EAAAA,KAAKC,EAAAA,EAAiB,CAC9BZ,MAAOR,IACL,MAAMmB,EAAAA,EAAAA,KAAKV,EAAYI,GAAI,CAC7BK,SAAU,kBACR,MAAMC,EAAAA,EAAAA,KAAKC,EAAAA,EAAiB,CAC9BZ,MAAOa,EAAAA,EACPC,KAAM,CAAC,aAGb,CAOA,MANA,SAAoBd,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOe,QAASC,GAAad,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOS,GAAYL,EAAAA,EAAAA,KAAKK,EAAWd,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DU,UAAUC,EAAAA,EAAAA,KAAKZ,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,4JCxBA,MAAMO,EAAa,IACdU,EAAAA,EACHC,EAAIlB,IAAUW,EAAAA,EAAAA,KAAA,WAAUX,KAGpBmB,GAAcC,EAAAA,EAAAA,GAAOC,EAAAA,GAAK,CAAAC,OAAA,aAAZF,CAAa,CAAAG,KAAA,UAAAC,OAAA,4BAO3BC,EAAc,wBAIdC,EAAgBC,IAWf,IAXgB,QACrBC,EAAO,cACPC,EAAa,SACbnB,EAAQ,MACRoB,EAAQ,CAAC,KACNC,GAMJJ,EAIC,GAHIE,IACFC,EAAME,eAAiB,gBAED,iBAAbtB,EACT,OAAQkB,GACN,IAAK,OACH,MAEF,IAAK,OACHE,EAAMG,MAAQvB,EAASwB,WAAY,KAAMT,EAxB/B,sBA2BZ,IAAK,QACHK,EAAMG,MAAQvB,EAASwB,WAAY,KAC/BT,EACa,cAAbf,EA7BW,wBAHJ,6BAqCb,QACEoB,EAAMK,WAAa,OACnBL,EAAMM,UAAY,OAIxB,OAAO7B,EAAW8B,KAAK,CAAE3B,WAAUoB,WAAUC,GAAO,EAGvC,SAASnB,EAAe0B,GAYnC,IAZoC,MACtCtC,EAAK,UACLuC,EAAY,SAAQ,UACpBC,EAAS,KACT1B,EAAI,iBACJ2B,GAAmB,GAOpBH,EACC,MAAMI,EAAOxC,OAAOwC,KAAK1C,GACnB2C,EAAYzC,OAAO0C,QAAQ5C,GAAO6C,KAAIC,IAAmB,IAAjBC,EAAK/C,GAAM8C,EACvD,IAAK9C,EACH,OAAO,KAET,MAAM,KAAEL,EAAI,aAAEqD,EAAY,IAAEtD,EAAG,OAAEE,GAAWI,EAC5C,OAAIc,GAAQA,EAAKmC,SAASF,GACjB,MAIPvC,EAAAA,EAAAA,MAAC0C,EAAAA,EAAE,CAAAxC,SAAA,EACDC,EAAAA,EAAAA,KAACwC,EAAAA,EAAE,CAAAzC,UACDC,EAAAA,EAAAA,KAACe,EAAa,CACZE,QAAQ,OACRC,cAA0B,eAAXjC,EAAwBc,SAEtC0C,EAAWZ,GAAYa,EAAAA,EAAAA,IAAYN,GAAOA,QAG/CpC,EAAAA,EAAAA,KAACwC,EAAAA,EAAE,CAAAzC,UACC4C,MAAMC,QAAQ5D,GAAQA,EAAO,CAACA,IAC7BkD,KAAKW,IACJ,GAAiB,iBAANA,EAAgB,CACzB,GAAIC,OAAOD,GAAGP,SAAS,eAAgB,CACrC,GAAIK,MAAMC,QAAQhB,GAChB,OAAOA,EACJM,KAAI,CAACW,EAAGE,KAEL/C,EAAAA,EAAAA,KAACe,EAAa,CAAaE,QAAQ,OAAMlB,SACtC8C,GADiBA,EAAIE,KAK3BC,QAAO,CAACC,EAAMC,KACbrD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGkD,EAAK,KAACjD,EAAAA,EAAAA,KAAA,SAAM,IAAEkD,OAKvBL,EAAIjB,CACN,CAEA,OACE5B,EAAAA,EAAAA,KAACe,EAAa,CAASE,QAAQ,OAAMlB,SAClC8C,GADiBA,EAIxB,KAEDG,QAAO,CAACC,EAAMC,KACbrD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGkD,EAAK,KAACjD,EAAAA,EAAAA,KAAA,SAAM,IAAEkD,SAItBpB,IACC9B,EAAAA,EAAAA,KAACwC,EAAAA,EAAE,CAAAzC,SACAsC,GACCrC,EAAAA,EAAAA,KAACe,EAAa,CAACE,QAAQ,QAAOlB,SAAEsC,IAErB,aAAXpD,GAAyB,cAI/BY,EAAAA,EAAAA,MAAC2C,EAAAA,EAAE,CAAAzC,SAAA,GACE+B,GAA+B,eAAX7C,KACrBY,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,IAAEd,EAAO,SAEfe,EAAAA,EAAAA,KAACmD,EAAAA,EAAa,CAACvD,WAAYA,EAAWG,SACnC8B,EAAYuB,EAAmBrE,EAAKgD,GAAQhD,SA5D1CqD,EA+DJ,IAIT,OACEpC,EAAAA,EAAAA,KAACU,EAAAA,GAAAA,WAAgB,CAAAX,UACfF,EAAAA,EAAAA,MAACW,EAAW,CAAAT,SAAA,EACVC,EAAAA,EAAAA,KAAA,SAAAD,UACEF,EAAAA,EAAAA,MAAC0C,EAAAA,EAAE,CAAAxC,SAAA,EACDC,EAAAA,EAAAA,KAACqD,EAAAA,EAAE,CAAAtD,SAAC,cACJC,EAAAA,EAAAA,KAACqD,EAAAA,EAAE,CAAAtD,SAAC,SACH+B,IAAoB9B,EAAAA,EAAAA,KAACqD,EAAAA,EAAE,CAAAtD,SAAC,mBACzBC,EAAAA,EAAAA,KAACqD,EAAAA,EAAE,CAAAtD,SAAC,sBAGRC,EAAAA,EAAAA,KAAA,SAAAD,SAAQiC,QAIhB,CAGA,SAASoB,EAAmBrE,EAAagD,GAIvC,OAHAA,EAAKuB,SAASlB,IACZrD,EAAMA,EAAIwE,QAAQ,IAAIC,OAAOpB,EAAK,MAAMM,EAAAA,EAAAA,IAAYN,GAAK,IAEpDrD,CACT,CAEA,SAAS0D,EAAW7B,GAClB,OAAIA,EAAK0B,SAAS,MACTtC,EAAAA,EAAAA,KAACmD,EAAAA,EAAa,CAACvD,WAAYA,EAAWG,SAAEa,IAG1CA,CACT,C,sCCnLA,IAAe4B,EAAE,C,uCCAjB,IAAea,EAAE,C,uCCAjB,IAAed,EAAE,C,+ECLV,MAAMkB,EAAmD,CAC9DC,MAAO,CACL3E,IAAK,wDACLC,KAAM,SACNC,OAAQ,YAEV0E,iBAAkB,CAChB5E,IAAK,0EACLC,KAAM,SACNC,OAAQ,YAEV2E,OAAQ,CACN7E,IAAK,qEACLC,KAAM,SACNC,OAAQ,YAEV4E,MAAO,CACL9E,IAAK,mFACLC,KAAM,CAAC,SAAU,SACjBC,OAAQ,YAEV6E,aAAc,CACZ/E,IAAK,mFACLC,KAAM,CAAC,SAAU,SACjBC,OAAQ,YAEV,0CAA2C,CACzCF,IAAK,2DACLC,KAAM,CAAC,SAAU,UACjBC,OAAQ,aAICiB,EAA6C,IACrDuD,EACHM,UAAW,CACThF,IAAK,6FACLC,KAAM,CAAC,SAAU,SACjBC,OAAQ,YAEV+E,WAAY,CACVjF,IAAK,iGACLC,KAAM,UACNC,OAAQ,YAEVgF,MAAO,CACLlF,IAAK,mFACLC,KAAM,CAAC,SAAU,SACjBC,OAAQ,YAEViF,YAAa,CACXnF,IAAK,4DACLC,KAAM,SACNC,OAAQ,YAEVkF,SAAU,CACRpF,IAAK,8FACLC,KAAM,UACNC,OAAQ,Y","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/PostalCodeAndCity/PostalCodeAndCityDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/PostalCodeAndCity/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../../../shared/types'\n\nexport const PostalCodeAndCityProperties: PropertiesTableProps = {\n  postalCode: {\n    doc: 'Properties for the [Field.String](/uilib/extensions/forms/base-fields/String/) component for postcode.',\n    type: 'object',\n    status: 'required',\n  },\n  city: {\n    doc: 'Properties for the [Field.String](/uilib/extensions/forms/base-fields/String/) component for city.',\n    type: 'object',\n    status: 'required',\n  },\n  help: {\n    doc: 'Provide a help button. Object consisting of `title` and `content`.',\n    type: 'object',\n    status: 'optional',\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {fieldBlockProperties} from '@dnb/eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs';\nimport {PostalCodeAndCityProperties} from '@dnb/eufemia/src/extensions/forms/Field/PostalCodeAndCity/PostalCodeAndCityDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Component-specific props\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: PostalCodeAndCityProperties\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"General props\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: fieldBlockProperties,\n      omit: ['value']\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colorValue = 'var(--color-success-green)'\nconst colorString = 'var(--color-fire-red)'\nconst colorType = 'var(--color-violet)'\nconst colorUndefined = 'var(--color-black-55)'\n\nconst FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = children.startsWith(`'`) ? colorString : colorType\n        // falls through\n      }\n      case 'value': {\n        style.color = children.startsWith(`'`)\n          ? colorString\n          : children === 'undefined'\n          ? colorUndefined\n          : colorValue\n        // falls through\n      }\n      default: {\n        style.background = 'none'\n        style.boxShadow = 'none'\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props)\n  const tableRows = Object.entries(props).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nfunction formatName(name: string): React.ReactNode | string {\n  if (name.includes('/')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const fieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  width: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const fieldBlockProperties: PropertiesTableProps = {\n  ...fieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading size](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'string',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n"],"names":["PostalCodeAndCityProperties","postalCode","doc","type","status","city","help","_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","fieldBlockProperties","omit","wrapper","MDXLayout","basicComponents","p","StyledTable","_styled","Table","target","name","styles","colorString","FormattedCode","_ref","variant","strikethrough","style","rest","textDecoration","color","startsWith","background","boxShadow","code","_ref2","valueType","camelCase","showDefaultValue","keys","tableRows","entries","map","_ref3","key","defaultValue","includes","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp","fieldBlockSharedProperties","label","labelDescription","layout","width","contentWidth","labelSize","asFieldset","align","composition","disabled"],"sourceRoot":""}