{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-postal-code-and-city-properties-mdx-ba8c99e590924467cceb.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/PostalCodeAndCity/PostalCodeAndCityDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/PostalCodeAndCity/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/TranslationsTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/input/InputDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/String/StringDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueWritePropsDocs.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../../../shared/types'\nimport { FieldProperties } from '../FieldDocs'\nimport { stringProperties } from '../String/StringDocs'\n\nexport const PostalCodeAndCityProperties: PropertiesTableProps = {\n  countryCode: {\n    doc:\n      'Defines which country the postal code and city is for, based on the [ISO 3166-1 alpha-2 code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) i.e. `NO`, `DE` etc. ' +\n      'Setting it to anything other than `NO` will remove the default norwegian postal code pattern. ' +\n      'You can also use the value of another field to define the countryCode, by using a path value i.e. `/myCountryCodePath`. ' +\n      'Defaults to `NO`',\n    type: ['Path', 'string'],\n    status: 'optional',\n  },\n  postalCode: {\n    doc: 'Properties for the [Field.String](/uilib/extensions/forms/base-fields/String/) component for postal code.',\n    type: 'object',\n    status: 'required',\n  },\n  city: {\n    doc: 'Properties for the [Field.String](/uilib/extensions/forms/base-fields/String/) component for city.',\n    type: 'object',\n    status: 'required',\n  },\n  help: FieldProperties.help,\n  size: stringProperties.size,\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport TranslationsTable from 'dnb-design-system-portal/src/shared/parts/TranslationsTable';\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {FieldBlockProperties} from '@dnb/eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs';\nimport {PostalCodeAndCityProperties} from '@dnb/eufemia/src/extensions/forms/Field/PostalCodeAndCity/PostalCodeAndCityDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Component-specific properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: PostalCodeAndCityProperties\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"General properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: FieldBlockProperties,\n      omit: ['value', 'layout', 'layoutOptions', 'label', 'labelDescription']\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Translations\"\n    }), \"\\n\", _jsx(TranslationsTable, {\n      localeKey: ['PostalCode', 'City', 'Field']\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { useMemo } from 'react'\nimport styled from '@emotion/styled'\nimport { Anchor, P, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { extendDeep, warn } from '@dnb/eufemia/src/shared/component-helper'\nimport globalTranslations from '@dnb/eufemia/src/shared/locales'\nimport formsTranslations from '@dnb/eufemia/src/extensions/forms/constants/locales'\nimport { FormattedCode } from './PropertiesTable'\nimport { Translation } from '@dnb/eufemia/src/shared/Context'\nimport { translationsWithoutEnUS } from '../../core/PortalProviders'\nimport { languageDisplayNames } from '../../core/ChangeLocale'\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nexport default function TranslationsTable({\n  localeKey,\n  source = null,\n}: {\n  localeKey?: string | Array<string>\n  source?: Record<string, Translation>\n}) {\n  source = useMemo(() => {\n    return (\n      source ||\n      Object.assign(\n        extendDeep({}, globalTranslations, formsTranslations),\n        translationsWithoutEnUS,\n      )\n    )\n  }, [source])\n\n  const entries = {}\n  const allowList = {}\n  const localeKeys = (\n    Array.isArray(localeKey) ? localeKey : [localeKey]\n  ).map((key) => {\n    if (key.includes('.')) {\n      const first = key.split('.')[0]\n      allowList[first] = allowList[first] || []\n      allowList[first].push(key)\n      return first\n    }\n\n    return key\n  })\n\n  const addToEntries = (key, translation, locale, localeKey) => {\n    key = `${localeKey}.${key}`\n    if (allowList[localeKey] && !allowList[localeKey].includes(key)) {\n      return\n    }\n    entries[key] = Object.assign(entries[key] || {}, {\n      [locale]: translation,\n    })\n  }\n\n  Object.entries(source).forEach(([locale, translations]) => {\n    localeKeys.forEach((localeKey) => {\n      const translationsObj = translations[localeKey]\n      if (!translationsObj) {\n        warn(\n          `TranslationsTable: Could not find any translations for key: \"${localeKey}\", perhaps you misspelled the key's name?`,\n        )\n        return\n      }\n      Object.entries(translationsObj).forEach(([key, translation]) => {\n        if (typeof translation === 'object') {\n          const nestedKey = `${localeKey}.${key}`\n          Object.entries(translation).forEach(([key, translation]) => {\n            addToEntries(key, translation, locale, nestedKey)\n          })\n        } else {\n          addToEntries(key, translation, locale, localeKey)\n        }\n      })\n    })\n  })\n\n  const locales = Object.keys(source)\n  const tableRows = Object.entries(entries).map(([key, values]) => {\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode variant=\"prop\">{key}</FormattedCode>\n        </Td>\n        {Object.entries(values).map(([locale, value], i) => {\n          return (\n            <Td key={i + locale}>\n              {typeof value === 'string' ? (\n                value\n              ) : (\n                <pre>{JSON.stringify(value, null, 2)}</pre>\n              )}\n            </Td>\n          )\n        })}\n      </Tr>\n    )\n  })\n\n  if (tableRows.length == 0) {\n    warn(\n      `TranslationsTable: Not able to find any translations for input : \"${localeKey}\", hence not rendering the translations table.`,\n    )\n    return\n  }\n\n  return (\n    <>\n      <P>\n        More info about translations can be found in the{' '}\n        <Anchor href=\"/uilib/usage/customisation/localization/\">\n          general localization\n        </Anchor>{' '}\n        and{' '}\n        <Anchor href=\"/uilib/extensions/forms/getting-started/#localization-and-translation\">\n          Eufemia Forms localization\n        </Anchor>{' '}\n        docs.\n      </P>\n      <Table.ScrollView>\n        <StyledTable>\n          <thead>\n            <Tr>\n              <Th>Key</Th>\n              {locales.map((locale) => {\n                const { status } = languageDisplayNames[locale]\n                return (\n                  <Th key={locale}>\n                    {locale}\n                    {status ? ` (${status})` : null}\n                  </Th>\n                )\n              })}\n            </Tr>\n          </thead>\n          <tbody>{tableRows}</tbody>\n        </StyledTable>\n      </Table.ScrollView>\n    </>\n  )\n}\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const inputProperties: PropertiesTableProps = {\n  value: {\n    doc: 'The content value of the input.',\n    type: 'string',\n    status: 'optional',\n  },\n  align: {\n    doc: 'Defines the text alignment of the input. Can be `left`, `right` or `center`. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Prepends the Form Label component. If no ID is provided, a random ID is created.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  label_sr_only: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  label_direction: {\n    doc: 'Use `label_direction=\"vertical\"` to change the label layout direction. Defaults to `horizontal`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status: {\n    doc: 'Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: ['error', 'info', 'boolean'],\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.',\n    type: ['error', 'info'],\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'object',\n    status: 'optional',\n  },\n  placeholder: {\n    doc: 'The placeholder which shows up once the input value is empty.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon: {\n    doc: 'Icon to show before or after the input / placeholder. Can be either a string defining a primary icon or a Component using an SVG icon of either 16px or 24px.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  icon_position: {\n    doc: 'Defines the position of icon inside the input. Set to `left` or `right`. Defaults to `left` if not set.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'The icon size of the icon shows. Defaults to `medium`.',\n    type: 'string',\n    status: 'optional',\n  },\n  keep_placeholder: {\n    doc: 'Set to `true` in case the `placeholder` has to be kept during focus. By default, the placeholder disappears on focus.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  input_class: {\n    doc: 'In case we have to set a custom input class.',\n    type: 'string',\n    status: 'optional',\n  },\n  type: {\n    doc: 'Choose between `text`, `number`, `email`, `password`, `url`, `tel` and `search`.',\n    type: 'string',\n    status: 'optional',\n  },\n  autocomplete: {\n    doc: 'Defaults to `off`. Set to `on` or any of [allowed `attributes`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete). Keep in mind, 1. you may have to define a `name`, 2. have the input as a descendant of a `<form>` element, 3. and have a submit button inside the form.',\n    type: 'string',\n    status: 'optional',\n  },\n  submit_button_title: {\n    doc: 'Title attribute for the search icon. Only relevant if search input.',\n    type: 'string',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the input more than the label. you can also send in a React component, so it gets wrapped inside the Input component.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  size: {\n    doc: 'The sizes you can choose is `default` (2rem), `medium` (2.5rem) and `large` (3rem) are supported component sizes. Defaults to `default` / `null`. Also, if you define a number like `size={2}` then it will be forwarded as the input element attribute.',\n    type: ['string', 'number'],\n    status: 'optional',\n  },\n  selectall: {\n    doc: 'If set to `true`, then the whole input value gets selected on the entry focus. A second click will place the cursor on the wanted position.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  clear: {\n    doc: 'If set to `true`, then a clear button will be shown which lets the user clear any given input value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  stretch: {\n    doc: 'If set to `true`, then the input field will be 100% in `width`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  input_attributes: {\n    doc: 'Provide the Input element with any attributes by using an Object `input_attributes={{size:\\'2\\'}}` or a JSON Object `input_attributes=\\'{\"size\":\"2\"}\\'`. **NB:** Keep in mind, that also every not listed component property will be sent along and set as an Input element attribute.',\n    type: 'object',\n    status: 'optional',\n  },\n  input_state: {\n    doc: 'Defines a custom visual state of the input. Use it only if you have to simulate a custom state. Currently are three statuses `virgin` , `focus` and `dirty`. Defaults to `null`.',\n    type: 'string',\n    status: 'optional',\n  },\n  submit_element: {\n    doc: 'Accepts a React element which will show up like the \"submit button\" would do on `type=\"search\"`.',\n    type: ['string', 'React.Element'],\n    status: 'optional',\n  },\n  inner_ref: {\n    doc: 'By providing a React.ref we can get the internally used input element (DOM). E.g. `inner_ref={myRef}` by using `React.createRef()` or `React.useRef()`.',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  input_element: {\n    doc: 'By providing a new component we can change the internally used element. Also supports a string only, like `input_element=\"input\"`.',\n    type: ['string', 'React.Element'],\n    status: 'internal',\n  },\n  inner_element: {\n    doc: 'By providing a new component to be rendered inside the \"shell\" – we can add a freely customizable internal element. Used by the Autocomplete component.',\n    type: ['string', 'React.Element'],\n    status: 'internal',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const inputEvents: PropertiesTableProps = {\n  on_change: {\n    doc: 'will be called on value changes made by the user. Returns an object with the value as a string and the native event: `{ value, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_focus: {\n    doc: 'will be called on focus set by the user. Returns `{ value, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_key_down: {\n    doc: 'will be called on key down by the user. Returns `{ value, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_blur: {\n    doc: 'will be called on blur set by the user. Returns `{ value, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_submit: {\n    doc: 'will be called on submit button click. Returns `{ value, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_clear: {\n    doc: 'will be called on a clear button click. Returns `{ value, previousValue, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { FieldBlockSharedProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  DataValueWritePropsEvents,\n  DataValueWritePropsProperties,\n} from '../hooks/DataValueWritePropsDocs'\n\nexport const FieldProperties: PropertiesTableProps = {\n  ...DataValueWritePropsProperties,\n  ...FieldBlockSharedProperties,\n}\n\nexport const FieldEvents: PropertiesTableProps = {\n  ...DataValueWritePropsEvents,\n}\n\nexport const getFieldEventsWithTypes = (\n  valueType: { type: string; optional?: boolean } = undefined,\n  additionalArgsType: { type: string; optional?: boolean } = undefined\n): PropertiesTableProps => {\n  const value = valueType\n    ? `value${valueType.optional ? '?' : ''}: ${valueType.type}`\n    : 'value'\n\n  const add = additionalArgsType\n    ? `, additionalArgs${additionalArgsType.optional ? '?' : ''}: ${\n        additionalArgsType.type\n      }`\n    : ''\n\n  const typeString = `(${value}${add}) => void`\n\n  return {\n    ...FieldEvents,\n    onChange: {\n      ...FieldEvents.onChange,\n      type: typeString,\n    },\n    onFocus: {\n      ...FieldEvents.onFocus,\n      type: typeString,\n    },\n    onBlur: {\n      ...FieldEvents.onBlur,\n      type: typeString,\n    },\n  }\n}\n","import { inputProperties } from '../../../../components/input/InputDocs'\nimport { PropertiesTableProps } from '../../../../shared/types'\n\nexport const stringProperties: PropertiesTableProps = {\n  multiline: {\n    doc: 'True to be able to write in multiple lines (switching from input-element to textarea-element).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  leftIcon: {\n    doc: 'For icon at the left side of the text input.',\n    type: 'string',\n    status: 'optional',\n  },\n  rightIcon: {\n    doc: 'For icon at the right side of the text input.',\n    type: 'string',\n    status: 'optional',\n  },\n  capitalize: {\n    doc: 'When set to true, it will capitalize the first letter of every word, transforming the rest to lowercase.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  trim: {\n    doc: 'When true, it will trim leading and trailing whitespaces on blur, triggering onChange if the value changes.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  inputMode: {\n    doc: 'Define an [inputmode](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode).',\n    type: 'string',\n    status: 'optional',\n  },\n  autoComplete: {\n    doc: 'For HTML [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) attributes.',\n    type: ['on', 'string'],\n    status: 'optional',\n  },\n  minLength: {\n    doc: 'Validation for minimum length of the text (number of characters).',\n    type: 'number',\n    status: 'optional',\n  },\n  maxLength: {\n    doc: 'Validation for maximum length of the text (number of characters).',\n    type: 'number',\n    status: 'optional',\n  },\n  pattern: {\n    doc: 'Validation based on regex pattern.',\n    type: 'string',\n    status: 'optional',\n  },\n  width: {\n    doc: '`false` for no width (use browser default), `small`, `medium` or `large` for predefined standard widths, `stretch` to fill available width.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n\n  // - Input props\n  size: {\n    ...inputProperties.size,\n    doc: `${inputProperties.size.doc} Consider rather setting field sizes with [Form.Appearance](/uilib/extensions/forms/Form/Appearance/).`,\n  },\n  align: inputProperties.align,\n  selectall: inputProperties.selectall,\n  clear: inputProperties.clear,\n  keepPlaceholder: inputProperties.keep_placeholder,\n\n  // - Textarea props\n  rows: {\n    doc: 'For multiline, set how many rows of text can be shown by default. Defaults to 2.',\n    type: 'number',\n    status: 'optional',\n  },\n  autoresizeMaxRows: {\n    doc: 'For multiline, set how many rows of text can be shown at max. Defaults to 6',\n    type: 'number',\n    status: 'optional',\n  },\n  characterCounter: {\n    doc: \"For multiline, use a number to define the displayed max length e.g. `40` or `{ max: 40, variant: 'down' }`.\",\n    type: ['number', 'object'],\n    status: 'optional',\n  },\n  autoresize: {\n    doc: 'For multiline, set true to expand when writing longer texts. Defaults to true.',\n    type: 'boolean',\n    status: 'optional',\n  },\n\n  // - Additional props\n  inputClassName: {\n    doc: 'Class name set on the <input> DOM element.',\n    type: 'string',\n    status: 'optional',\n  },\n  innerRef: {\n    doc: 'By providing a React.Ref we can get the internally used input element (DOM).',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  submitElement: {\n    doc: 'Accepts a React element which will show up like the \"submit button\" would do on type=\"search\".',\n    type: 'React.Element',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const FieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescriptionInline: {\n    doc: 'If true, the labelDescription will be displayed on the same line as the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSize: {\n    doc: 'Define the font-size of the label based on the [font-size](/uilib/typography/font-size/) table.',\n    type: ['medium', 'large'],\n    status: 'optional',\n  },\n  help: {\n    doc: 'Provide help content for the field using `title` and `content` as a string or React.Node. Additionally, you can set `open` to `true` to display the inline help, set the `breakout` property to `false` to disable the breakout of the inline help content, or use `renderAs` set to `dialog` to render the content in a [Dialog](/uilib/components/dialog/) (recommended for larger amounts of content).',\n    type: 'object',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  layoutOptions: {\n    doc: 'Use this to set additional options for the `horizontal` layout. E.g. `{ width: \"medium\" }`. You can also use a custom width `{number}rem`. Instead of a width, you can use a min/max width. E.g. `{ minWidth: \"6rem\", maxWidth: \"12rem\" }`.',\n    type: 'object',\n    status: 'optional',\n  },\n  width: {\n    doc: 'Will set the width for the whole block. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: 'Will set the width for its contents. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\n/** For internal use only */\nexport const FieldBlockProperties: PropertiesTableProps = {\n  ...FieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading sizes](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  labelHeight: {\n    doc: 'Defines the height of an component (size prop), so the label can be aligned correctly. Can be `default`, `small`, `medium`, `large`.',\n    type: 'string',\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  disableStatusSummary: {\n    doc: 'Use `true` to disable the error summary.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'true',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const DataValueWritePropsProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: \"Info message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  warning: {\n    doc: \"Warning message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  error: {\n    doc: \"Error message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['Error', 'FormError', 'Array<Error | FormError>', 'function'],\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set to `true`, the field will give an error if the value fails the required validation. When set to `false`, the field will not be required, but will add a \"(optional)\" suffix to the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSuffix: {\n    doc: 'Will append an additional text to the label, like \"(optional)\". When using `inheritLabel`, the suffix will not be inherited. NB: The visual appearance of the `labelSuffix` may change in the future.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set to `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set to `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateContinuously: {\n    doc: 'Set to `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages. The messages can be a React.ReactNode or a string.',\n    type: 'object',\n    status: 'optional',\n  },\n  onChangeValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered on every change done by the user. The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered when the user leaves a field (e.g., blurring a text input or closing a dropdown). The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'Transforms the value before it gets forwarded to the form data object (context) or returned as the `onChange` value parameter. The first parameter is the internal value. Some fields to support a second parameter, like the SelectCountry, where the country object is given.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const DataValueWritePropsEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).\",\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n}\n"],"names":["PostalCodeAndCityProperties","countryCode","doc","type","status","postalCode","city","help","FieldProperties","size","stringProperties","_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","FieldBlockProperties","omit","TranslationsTable","localeKey","wrapper","MDXLayout","StyledTable","_styled","Table","target","name","styles","_ref","source","useMemo","extendDeep","globalTranslations","formsTranslations","translationsWithoutEnUS","entries","allowList","localeKeys","Array","isArray","map","key","includes","first","split","push","addToEntries","translation","locale","forEach","_ref2","translations","translationsObj","_ref3","nestedKey","_ref4","warn","locales","keys","tableRows","_ref5","values","Tr","Td","FormattedCode","variant","_ref6","i","value","JSON","stringify","length","P","Anchor","href","Th","languageDisplayNames","inputProperties","align","label","label_sr_only","label_direction","status_state","status_props","globalStatus","placeholder","icon","icon_position","icon_size","keep_placeholder","input_class","autocomplete","submit_button_title","suffix","selectall","clear","stretch","skeleton","input_attributes","input_state","submit_element","inner_ref","input_element","inner_element","inputEvents","on_change","on_focus","on_key_down","on_blur","on_submit","on_clear","DataValueWritePropsProperties","FieldBlockSharedProperties","FieldEvents","DataValueWritePropsEvents","getFieldEventsWithTypes","valueType","additionalArgsType","undefined","typeString","optional","onChange","onFocus","onBlur","multiline","leftIcon","rightIcon","capitalize","trim","inputMode","autoComplete","minLength","maxLength","pattern","width","keepPlaceholder","rows","autoresizeMaxRows","characterCounter","autoresize","inputClassName","innerRef","submitElement","labelDescription","labelDescriptionInline","labelSrOnly","labelSize","layout","layoutOptions","contentWidth","labelHeight","asFieldset","disableStatusSummary","composition","disabled","defaultValue","path","info","warning","error","emptyValue","required","labelSuffix","schema","validateInitially","validateUnchanged","validateContinuously","errorMessages","onChangeValidator","onBlurValidator","transformIn","transformOut"],"sourceRoot":""}