{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-provider-properties-mdx-ec221157c100e1d20f92.js","mappings":"yOAGO,MAAMA,EAAgD,CAC3DC,SAAUC,EAAAA,EAA8BD,SACxCE,SAAUD,EAAAA,EAA8BC,SACxCC,OAAQF,EAAAA,EAA8BE,OACtCC,cAAeH,EAAAA,EAA8BG,cAC7CC,MAAOJ,EAAAA,EAA8BI,MACrCC,OAAQ,CACNC,IAAK,8DACLC,KAAM,SACNC,OAAQ,aCPZ,SAASC,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,OACHC,EAAAA,EAAAA,KAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKT,EAAYG,GAAI,CAC9BK,SAAU,eACR,MAAMC,EAAAA,EAAAA,KAAKC,EAAAA,GAAiB,CAC9BX,MAAOZ,MAGb,CAOA,MANA,SAAoBY,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,KAAsBL,EAAMM,YAC3E,OAAOO,GAAYH,EAAAA,EAAAA,KAAKG,EAAWX,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DS,UAAUC,EAAAA,EAAAA,KAAKX,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,+ECpBO,MAAMV,EAAsD,CACjEwB,MAAO,CACLlB,IAAK,uGACLC,KAAM,cACNC,OAAQ,YAEViB,aAAc,CACZnB,IAAK,mHACLC,KAAM,cACNC,OAAQ,YAEVkB,KAAM,CACJpB,IAAK,oPACLC,KAAM,SACNC,OAAQ,YAEVmB,KAAM,CACJrB,IAAK,icACLC,KAAM,CAAC,aAAc,oBAAqB,YAC1CC,OAAQ,YAEVoB,QAAS,CACPtB,IAAK,ocACLC,KAAM,CAAC,aAAc,oBAAqB,YAC1CC,OAAQ,YAEVqB,MAAO,CACLvB,IAAK,kcACLC,KAAM,CAAC,QAAS,YAAa,2BAA4B,YACzDC,OAAQ,YAEVP,SAAU,CACRK,IAAK,kFACLC,KAAM,UACNC,OAAQ,YAEVsB,WAAY,CACVxB,IAAK,mMACLC,KAAM,CAAC,cAAe,aACtBC,OAAQ,YAEVT,SAAU,CACRO,IAAK,qMACLC,KAAM,UACNC,OAAQ,YAEVuB,YAAa,CACXzB,IAAK,wMACLC,KAAM,aACNC,OAAQ,YAEVwB,OAAQ,CACN1B,IAAK,+CACLC,KAAM,SACNC,OAAQ,YAEVyB,kBAAmB,CACjB3B,IAAK,2IACLC,KAAM,UACNC,OAAQ,YAEV0B,kBAAmB,CACjB5B,IAAK,yQACLC,KAAM,UACNC,OAAQ,YAEV2B,qBAAsB,CACpB7B,IAAK,8GACLC,KAAM,UACNC,OAAQ,YAEV4B,cAAe,CACb9B,IAAK,gIACLC,KAAM,SACNC,OAAQ,YAEV6B,kBAAmB,CACjB/B,IAAK,yZACLC,KAAM,WACNC,OAAQ,YAEV8B,gBAAiB,CACfhC,IAAK,ycACLC,KAAM,WACNC,OAAQ,YAEV+B,YAAa,CACXjC,IAAK,yEACLC,KAAM,WACNC,OAAQ,YAEVgC,aAAc,CACZlC,IAAK,kRACLC,KAAM,WACNC,OAAQ,aAICiC,EAAkD,CAC7DC,SAAU,CACRpC,IAAK,kiBACLC,KAAM,kBACNC,OAAQ,YAEVmC,QAAS,CACPrC,IAAK,mPACLC,KAAM,kBACNC,OAAQ,YAEVoC,OAAQ,CACNtC,IAAK,oPACLC,KAAM,kBACNC,OAAQ,Y,uCC3GZ,IAAeqC,EAAE,C,uCCAjB,IAAeC,EAAE,C,uCCAjB,IAAeC,EAAE,C","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/Provider/FieldProviderDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/Provider/properties.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueWritePropsDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../../../shared/types'\nimport { DataValueWritePropsProperties } from '../../hooks/DataValueWritePropsDocs'\n\nexport const FieldProviderProperties: PropertiesTableProps = {\n  required: DataValueWritePropsProperties.required,\n  disabled: DataValueWritePropsProperties.disabled,\n  layout: DataValueWritePropsProperties.layout,\n  layoutOptions: DataValueWritePropsProperties.layoutOptions,\n  width: DataValueWritePropsProperties.width,\n  locale: {\n    doc: 'Locale (language) to use for all nested Eufemia components.',\n    type: 'string',\n    status: 'optional',\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {FieldProviderProperties} from '@dnb/eufemia/src/extensions/forms/Field/Provider/FieldProviderDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: FieldProviderProperties\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const DataValueWritePropsProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: \"Info message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  warning: {\n    doc: \"Warning message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  error: {\n    doc: \"Error message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['Error', 'FormError', 'Array<Error | FormError>', 'function'],\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set to `true`, the field will give an error if the value fails the required validation. When set to `false`, the field will not be required, but will add a \"(optional)\" suffix to the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSuffix: {\n    doc: 'Will append an additional text to the label, like \"(optional)\". When using `inheritLabel`, the suffix will not be inherited. NB: The visual appearance of the `labelSuffix` may change in the future.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set to `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set to `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateContinuously: {\n    doc: 'Set to `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages. The messages can be a React.ReactNode or a string.',\n    type: 'object',\n    status: 'optional',\n  },\n  onChangeValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered on every change done by the user. The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered when the user leaves a field (e.g., blurring a text input or closing a dropdown). The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'Transforms the value before it gets forwarded to the form data object (context) or returned as the `onChange` value parameter. The first parameter is the internal value. Some fields to support a second parameter, like the SelectCountry, where the country object is given.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const DataValueWritePropsEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).\",\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n"],"names":["FieldProviderProperties","required","DataValueWritePropsProperties","disabled","layout","layoutOptions","width","locale","doc","type","status","_createMdxContent","props","_components","Object","assign","h2","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","wrapper","MDXLayout","value","defaultValue","path","info","warning","error","emptyValue","labelSuffix","schema","validateInitially","validateUnchanged","validateContinuously","errorMessages","onChangeValidator","onBlurValidator","transformIn","transformOut","DataValueWritePropsEvents","onChange","onFocus","onBlur","Th","Tr","Td"],"sourceRoot":""}