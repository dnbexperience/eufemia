{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-select-country-events-mdx-21a61d716531cb72e0e2.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/SelectCountry/events.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/SelectCountry/SelectCountryDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueWritePropsDocs.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {SelectCountryGeneralEvents} from '@dnb/eufemia/src/extensions/forms/Field/SelectCountry/SelectCountryDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Events\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: SelectCountryGeneralEvents\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Details about argument values\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The event handlers has two arguments. The first one is a \", _jsx(_components.code, {\n        children: \"string\"\n      }), \" containing the \", _jsx(_components.code, {\n        children: \"ISO\"\n      }), \" of the selected country, e.g. \", _jsx(_components.code, {\n        children: \"CH\"\n      }), \", and the second argument is an object with the properties \", _jsx(_components.code, {\n        children: \"cdc\"\n      }), \", \", _jsx(_components.code, {\n        children: \"continent\"\n      }), \", \", _jsx(_components.code, {\n        children: \"i18n\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"iso\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"(\\n  value?: string // e.g. \\\"CH\\\"\\n  additionalArgs?: {\\n    i18n: {\\n      en: string, // e.g. \\\"Switzerland\\\"\\n      nb: string // e.g. \\\"Sveits\\\"\\n    },\\n    cdc: string, // e.g. \\\"41\\\"\\n    iso: string, // e.g. \\\"CH\\\"\\n    continent: string // e.g. \\\"Europe\\\"\\n  }\\n) => void\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td:not(.description) {\n    white-space: nowrap;\n  }\n`\n\nconst colors = {\n  type: {\n    default: 'var(--color-success-green)',\n    primitive: 'var(--color-success-green)',\n    string: 'var(--color-fire-red)',\n  },\n  value: {\n    default: 'var(--color-success-green)',\n    undefined: 'var(--color-black-55)',\n    string: 'var(--color-fire-red)',\n  },\n}\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = isString(children)\n          ? colors.type.string\n          : isPrimitive(children)\n          ? colors.type.primitive\n          : colors.type.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n      case 'value': {\n        style.color = isString(children)\n          ? colors.value.string\n          : children === 'undefined' || children === 'null'\n          ? colors.value.undefined\n          : colors.value.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td className=\"description\">\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th className=\"description\">Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\nfunction isString(str: string) {\n  return [\"'\", '\"', '`'].includes(str.substring(0, 1))\n}\n\nfunction isPrimitive(type: string) {\n  return [\n    'boolean',\n    'true',\n    'false',\n    'number',\n    'bigint',\n    'string',\n    'symbol',\n  ].includes(typeWithoutArray(type))\n}\n\nfunction typeWithoutArray(type: string) {\n  if (type.endsWith('[]')) {\n    return type.slice(0, -2)\n  } else if (type.startsWith('Array<') && type.endsWith('>')) {\n    return type.slice(6, -1)\n  }\n  return type\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('[')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { FieldBlockSharedProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  DataValueWritePropsEvents,\n  DataValueWritePropsProperties,\n} from '../hooks/DataValueWritePropsDocs'\n\nexport const FieldProperties: PropertiesTableProps = {\n  ...DataValueWritePropsProperties,\n  ...FieldBlockSharedProperties,\n}\n\nexport const FieldEvents: PropertiesTableProps = {\n  ...DataValueWritePropsEvents,\n}\n\nexport const getFieldEventsWithTypes = (\n  valueType: { type: string; optional?: boolean } = undefined,\n  additionalArgsType: { type: string; optional?: boolean } = undefined\n): PropertiesTableProps => {\n  const value = valueType\n    ? `value${valueType.optional ? '?' : ''}: ${valueType.type}`\n    : 'value'\n\n  const add = additionalArgsType\n    ? `, additionalArgs${additionalArgsType.optional ? '?' : ''}: ${\n        additionalArgsType.type\n      }`\n    : ''\n\n  const typeString = `(${value}${add}) => void`\n\n  return {\n    ...FieldEvents,\n    onChange: {\n      ...FieldEvents.onChange,\n      type: typeString,\n    },\n    onFocus: {\n      ...FieldEvents.onFocus,\n      type: typeString,\n    },\n    onBlur: {\n      ...FieldEvents.onBlur,\n      type: typeString,\n    },\n  }\n}\n","import { PropertiesTableProps } from '../../../../shared/types'\nimport { getFieldEventsWithTypes } from '../FieldDocs'\n\nexport const SelectCountryProperties: PropertiesTableProps = {\n  countries: {\n    doc: 'List only a certain set of countries: `Scandinavia`, `Nordic`, `Europe` or `Prioritized`(all countries [sorted by priority](/uilib/extensions/forms/feature-fields/SelectCountry/#filter-or-prioritize-country-listing)). Defaults to `Prioritized`.',\n    type: 'string',\n    status: 'optional',\n  },\n  filterCountries: {\n    doc: 'Use this prop to filter out certain countries. The function receives the country object and should return a boolean. Returning `false` will omit the country.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const SelectCountryGeneralEvents = getFieldEventsWithTypes(\n  { type: 'string', optional: true },\n  { type: 'object', optional: true }\n)\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const FieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  help: {\n    doc: 'Provide help content for the field using `title` and `content` as a string or React.Node. Additionally, you can set `open` to `true` to display the inline help, set the `breakout` property to `false` to disable the breakout of the inline help content, or use `renderAs` set to `dialog` to render the content in a [Dialog](/uilib/components/dialog/) (recommended for larger amounts of content).',\n    type: 'object',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  layoutOptions: {\n    doc: 'Use this to set additional options for the `horizontal` layout. E.g. `{ width: \"medium\" }`. You can also use a custom width `{number}rem`. Instead of a width, you can use a min/max width. E.g. `{ minWidth: \"6rem\", maxWidth: \"12rem\" }`.',\n    type: 'object',\n    status: 'optional',\n  },\n  width: {\n    doc: 'Will set the width for the whole block. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: 'Will set the width for its contents. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\n/** For internal use only */\nexport const FieldBlockProperties: PropertiesTableProps = {\n  ...FieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading sizes](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  labelHeight: {\n    doc: 'Defines the height of an component (size prop), so the label can be aligned correctly. Can be `default`, `small`, `medium`, `large`.',\n    type: 'string',\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  disableStatusSummary: {\n    doc: 'Use `true` to disable the error summary.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'string',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const DataValueWritePropsProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: \"Info message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  warning: {\n    doc: \"Warning message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  error: {\n    doc: \"Error message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['Error', 'FormError', 'Array<Error | FormError>', 'function'],\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set to `true`, the field will give an error if the value fails the required validation. When set to `false`, the field will not be required, but will add a \"(optional)\" suffix to the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSuffix: {\n    doc: 'Will append an additional text to the label, like \"(optional)\". When using `inheritLabel`, the suffix will not be inherited. NB: The visual appearance of the `labelSuffix` may change in the future.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set to `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set to `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateContinuously: {\n    doc: 'Set to `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages.',\n    type: 'object',\n    status: 'optional',\n  },\n  onChangeValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered on every change done by the user. The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered when the user leaves a field (e.g., blurring a text input or closing a dropdown). The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'Transforms the value before it gets forwarded to the form data object (context) or returned as the `onChange` value parameter. The first parameter is the internal value. Some fields to support a second parameter, like the SelectCountry, where the country object is given.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const DataValueWritePropsEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).\",\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","h3","p","code","pre","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","SelectCountryGeneralEvents","className","wrapper","MDXLayout","basicComponents","StyledTable","_styled","Table","target","name","styles","colors","default","primitive","string","undefined","FormattedCode","_ref","variant","strikethrough","style","rest","textDecoration","color","isString","includes","type","endsWith","slice","startsWith","typeWithoutArray","background","boxShadow","_ref2","valueType","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","defaultValue","doc","status","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","str","substring","forEach","replace","RegExp","FieldProperties","DataValueWritePropsProperties","FieldBlockSharedProperties","FieldEvents","DataValueWritePropsEvents","getFieldEventsWithTypes","additionalArgsType","typeString","optional","onChange","onFocus","onBlur","SelectCountryProperties","countries","filterCountries","label","labelDescription","labelSrOnly","help","layout","layoutOptions","width","contentWidth","FieldBlockProperties","labelSize","labelHeight","asFieldset","align","disableStatusSummary","composition","disabled","value","path","info","warning","error","emptyValue","required","labelSuffix","schema","validateInitially","validateUnchanged","validateContinuously","errorMessages","onChangeValidator","onBlurValidator","transformIn","transformOut"],"sourceRoot":""}