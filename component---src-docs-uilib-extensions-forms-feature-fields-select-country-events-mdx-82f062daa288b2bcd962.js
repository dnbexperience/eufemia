"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[24567],{24427:function(e,t,n){n.r(t);var o=n(52322),i=n(45392),s=n(85179),a=n(6024);function r(e){const t=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code"},(0,i.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{children:"Events"}),"\n",(0,o.jsx)(s.Z,{props:a.d}),"\n",(0,o.jsx)(t.h3,{children:"Argument value"}),"\n",(0,o.jsxs)(t.p,{children:["The event handlers has two arguments. The first one is a ",(0,o.jsx)(t.code,{children:"string"})," containing the ",(0,o.jsx)(t.code,{children:"ISO"})," of the selected countr, e.g. ",(0,o.jsx)(t.code,{children:"CH"}),", and the second argument is an object with the properties ",(0,o.jsx)(t.code,{children:"cdc"}),", ",(0,o.jsx)(t.code,{children:"continent"}),", ",(0,o.jsx)(t.code,{children:"i18n"})," and ",(0,o.jsx)(t.code,{children:"iso"}),". e.g. ",(0,o.jsx)(t.code,{children:"{   cdc: '41',   iso: 'CH',     i18n: {     en: 'Switzerland',     nb: 'Sveits'   },   continent: 'Europe' }"})]})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,i.ah)(),e.components);return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(r,e)})):r(e)}},85179:function(e,t,n){n.d(t,{Z:function(){return b}});var o=n(70894),i=n(61185),s=n(55560),a=n(41676),r=n(6210),l=n(30730),c=n(64223),d=n(66485),u=n(1864),h=n(88504),p=n(52322);const f={...u.L,p:e=>(0,p.jsx)("span",{...e})},g=(0,o.Z)(s.ZP,{target:"e13h2c840"})({name:"1qdk5x4",styles:"td{white-space:nowrap;}"});function b(e){let{props:t,valueType:n="string",camelCase:o,omit:u}=e;const b=Object.keys(t),w=Object.entries(t).map((e=>{let[t,{type:s,doc:c,status:g}]=e;return u&&u.includes(t)?null:("string"==typeof s&&String(s).includes("{valueType}")&&(s=n),(0,p.jsxs)(a.Z,{children:[(0,p.jsx)(r.Z,{children:(0,p.jsx)(h.Z,{children:(0,p.jsx)(l.Z,{children:m(o?(0,d.zW)(t):t)})})}),(0,p.jsx)(r.Z,{children:Array.isArray(s)?s.map((e=>(0,p.jsx)(h.Z,{children:(0,p.jsx)(l.Z,{children:e})},e))).reduce(((e,t)=>(0,p.jsxs)(p.Fragment,{children:[e," or ",t]}))):(0,p.jsx)(h.Z,{children:(0,p.jsx)(l.Z,{children:s})})}),(0,p.jsxs)(r.Z,{children:[(0,p.jsxs)("em",{children:["(",g,")"]})," ",(0,p.jsx)(i.D,{components:f,children:o?y(c,b):c})]})]},t))}));return(0,p.jsx)(s.ZP.ScrollView,{children:(0,p.jsxs)(g,{children:[(0,p.jsx)("thead",{children:(0,p.jsxs)(a.Z,{children:[(0,p.jsx)(c.Z,{children:"Property"}),(0,p.jsx)(c.Z,{children:"Type"}),(0,p.jsx)(c.Z,{children:"Description"})]})}),(0,p.jsx)("tbody",{children:w})]})})}function y(e,t){return t.forEach((t=>{e=e.replace(new RegExp(t,"g"),(0,d.zW)(t))})),e}function m(e){return e.includes("/")?(0,p.jsx)(i.D,{components:f,children:e}):e}},64223:function(e,t,n){var o=n(91859);t.Z=o.Z},41676:function(e,t,n){var o=n(47048);t.Z=o.Z},6024:function(e,t,n){n.d(t,{d:function(){return i},u:function(){return o}});const o={value:{doc:"Source data value for the input.",type:"{valueType}",status:"optional"},path:{doc:"JSON Pointer for where the data for this input is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.",type:"string",status:"optional"},id:{doc:"Unique id for connecting Form.Handler and helper tools such as Form.useData.",type:"string",status:"optional"},info:{doc:"Info message shown below / after the input.",type:"React.Node",status:"optional"},warning:{doc:"Warning message shown below / after the input.",type:"React.Node",status:"optional"},error:{doc:"Error message shown below / after the input.",type:"Error",status:"optional"},disabled:{doc:"Set `true` to show the field but without the possibility of changing the value.",type:"boolean",status:"optional"},emptyValue:{doc:"The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.",type:"any",status:"optional"},required:{doc:"When set `true`, the input will give an error if the value cannot be empty.",type:"boolean",status:"optional"},schema:{doc:"Custom JSON Schema for validating the value.",type:"object",status:"optional"},validateInitially:{doc:"Set `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.",type:"boolean",status:"optional"},validateUnchanged:{doc:"Set `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.",type:"boolean",status:"optional"},continuousValidation:{doc:"Set `true` to show validation based errors continuously while writing, not just when blurring the field.",type:"boolean",status:"optional"},errorMessages:{doc:"Custom error messages for each type of error, overriding default messages.",type:"object",status:"optional"},validator:{doc:"Custom validator function that will be called for every change done by the user. Can be asynchronous or synchronous.",type:"function",status:"optional"},onBlurValidator:{doc:"Custom validator function that will be called when the user leaves the field (blurring a text input, closing a dropdown etc). Can be asynchronous or synchronous.",type:"function",status:"optional"},toInput:{doc:"Derivate called when the received / active value is sent to the input. Can be used for casting, changing syntax etc.",type:"function",status:"optional"},fromInput:{doc:"Derivate called when changes is made by the user, to cast or change syntax back to the original (opposite of `toInput`).",type:"function",status:"optional"},...n(84187).o},i={onChange:{doc:" Will be called on value changes made by the user, with the new value as argument.",type:"function",status:"optional"},onFocus:{doc:" Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument.",type:"function",status:"optional"},onBlur:{doc:" Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument.",type:"function",status:"optional"}}},84187:function(e,t,n){n.d(t,{o:function(){return o}});const o={label:{doc:"Field label to show above / before the input feature.",type:"string",status:"optional"},labelDescription:{doc:'A more discreet text displayed beside the label (i.e for "(optional)").',type:"string",status:"optional"},labelSize:{doc:"Define one of the following [heading size](/uilib/elements/heading/): `medium` or `large`.",type:["string","false"],status:"optional"},layout:{doc:"Layout for the label and input. Can be `horizontal` or `vertical`.",type:"string",status:"optional"},width:{doc:"`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.",type:["string","false"],status:"optional"},contentWidth:{doc:"`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.",type:["string","false"],status:"optional"},composition:{doc:"Use `true` for when you have more than one field wrapped.",type:"string",status:"optional"},asFieldset:{doc:"Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.",type:"boolean",status:"optional"},disabled:{doc:"Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.",type:"boolean",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-feature-fields-select-country-events-mdx-82f062daa288b2bcd962.js.map