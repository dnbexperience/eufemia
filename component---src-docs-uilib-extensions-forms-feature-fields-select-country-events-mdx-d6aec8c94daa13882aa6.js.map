{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-select-country-events-mdx-d6aec8c94daa13882aa6.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/SelectCountry/events.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/SelectCountry/SelectCountryDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueDocs.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {SelectCountryGeneralEvents} from '@dnb/eufemia/src/extensions/forms/Field/SelectCountry/SelectCountryDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Events\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: SelectCountryGeneralEvents\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Details about argument values\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The event handlers has two arguments. The first one is a \", _jsx(_components.code, {\n        children: \"string\"\n      }), \" containing the \", _jsx(_components.code, {\n        children: \"ISO\"\n      }), \" of the selected country, e.g. \", _jsx(_components.code, {\n        children: \"CH\"\n      }), \", and the second argument is an object with the properties \", _jsx(_components.code, {\n        children: \"cdc\"\n      }), \", \", _jsx(_components.code, {\n        children: \"continent\"\n      }), \", \", _jsx(_components.code, {\n        children: \"i18n\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"iso\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"(\\n  value?: string // e.g. \\\"CH\\\"\\n  additionalArgs?: {\\n    i18n: {\\n      en: string, // e.g. \\\"Switzerland\\\"\\n      nb: string // e.g. \\\"Sveits\\\"\\n    },\\n    cdc: string, // e.g. \\\"41\\\"\\n    iso: string, // e.g. \\\"CH\\\"\\n    continent: string // e.g. \\\"Europe\\\"\\n  }\\n) => void\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colorValue = 'var(--color-success-green)'\nconst colorString = 'var(--color-fire-red)'\nconst colorType = 'var(--color-violet)'\nconst colorUndefined = 'var(--color-black-55)'\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = children.startsWith(`'`) ? colorString : colorType\n        // falls through\n      }\n      case 'value': {\n        style.color = children.startsWith(`'`)\n          ? colorString\n          : children === 'undefined' || children === 'null'\n          ? colorUndefined\n          : colorValue\n        // falls through\n      }\n      default: {\n        style.background = 'none'\n        style.boxShadow = 'none'\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('/')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { fieldBlockSharedProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  dataValueEvents,\n  dataValueProperties,\n} from '../hooks/DataValueDocs'\n\nexport const fieldProperties: PropertiesTableProps = {\n  ...dataValueProperties,\n  ...fieldBlockSharedProperties,\n}\n\nexport const fieldEvents: PropertiesTableProps = {\n  ...dataValueEvents,\n}\n\nexport const getFieldEventsWithTypes = (\n  valueType: { type: string; optional?: boolean } = undefined,\n  additionalArgsType: { type: string; optional?: boolean } = undefined\n): PropertiesTableProps => {\n  const value = valueType\n    ? `value${valueType.optional ? '?' : ''}: ${valueType.type}`\n    : 'value'\n\n  const add = additionalArgsType\n    ? `, additionalArgs${additionalArgsType.optional ? '?' : ''}: ${\n        additionalArgsType.type\n      }`\n    : ''\n\n  const typeString = `(${value}${add}) => void`\n\n  return {\n    ...fieldEvents,\n    onChange: {\n      ...fieldEvents.onChange,\n      type: typeString,\n    },\n    onFocus: {\n      ...fieldEvents.onFocus,\n      type: typeString,\n    },\n    onBlur: {\n      ...fieldEvents.onBlur,\n      type: typeString,\n    },\n  }\n}\n","import { PropertiesTableProps } from '../../../../shared/types'\nimport { getFieldEventsWithTypes } from '../FieldDocs'\n\nexport const SelectCountryProperties: PropertiesTableProps = {\n  countries: {\n    doc: 'List only a certain set of countries: `Scandinavia`, `Nordic`, `Europe` or `Prioritized`(all countries [sorted by priority](/uilib/extensions/forms/feature-fields/SelectCountry/#filter-or-prioritize-country-listing)). Defaults to `Prioritized`.',\n    type: 'string',\n    status: 'optional',\n  },\n}\n\nexport const SelectCountryGeneralEvents = getFieldEventsWithTypes(\n  { type: 'string', optional: true },\n  { type: 'object', optional: true }\n)\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const fieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  width: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const fieldBlockProperties: PropertiesTableProps = {\n  ...fieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading size](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'string',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const dataValueProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: 'Info message shown below / after the field.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  warning: {\n    doc: 'Warning message shown below / after the field.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  error: {\n    doc: 'Error message shown below / after the field.',\n    type: 'Error',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set `true`, the field will give an error if the value cannot be empty.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set to `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set to `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  continuousValidation: {\n    doc: 'Set to `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages.',\n    type: 'object',\n    status: 'optional',\n  },\n  validator: {\n    doc: 'Custom validator function that will be called for every change done by the user. Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function that will be called when the user leaves the field (blurring a text input, closing a dropdown etc). Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'transforms the value before it gets forwarded to the form data object or returned as the `onChange` value parameter.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const dataValueEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`.\",\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument.',\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument.',\n    type: '(value) => void',\n    status: 'optional',\n  },\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","h3","p","code","pre","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","SelectCountryGeneralEvents","className","wrapper","MDXLayout","basicComponents","StyledTable","_styled","Table","target","name","styles","colorString","FormattedCode","_ref","variant","strikethrough","style","rest","textDecoration","color","startsWith","background","boxShadow","_ref2","valueType","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","type","defaultValue","doc","status","includes","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp","fieldProperties","dataValueProperties","fieldBlockSharedProperties","fieldEvents","dataValueEvents","getFieldEventsWithTypes","additionalArgsType","undefined","typeString","optional","onChange","onFocus","onBlur","SelectCountryProperties","countries","label","labelDescription","labelSrOnly","layout","width","contentWidth","fieldBlockProperties","labelSize","asFieldset","align","composition","disabled","value","path","info","warning","error","emptyValue","required","schema","validateInitially","validateUnchanged","continuousValidation","errorMessages","validator","onBlurValidator","transformIn","transformOut"],"sourceRoot":""}