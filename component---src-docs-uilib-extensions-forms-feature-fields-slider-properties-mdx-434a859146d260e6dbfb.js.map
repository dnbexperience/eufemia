{"version":3,"file":"component---src-docs-uilib-extensions-forms-feature-fields-slider-properties-mdx-434a859146d260e6dbfb.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/Slider/SliderDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/feature-fields/Slider/properties.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/slider/SliderDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueDocs.ts"],"sourcesContent":["import { SliderProperties } from '../../../../components/slider/SliderDocs'\nimport { PropertiesTableProps } from '../../../../shared/types'\n\nexport const SliderFieldProperties: PropertiesTableProps = {\n  paths: {\n    doc: 'Define an array with JSON Pointer paths for multiple thumb buttons.',\n    type: 'Array<string>',\n    status: 'required',\n  },\n  min: SliderProperties.min,\n  max: SliderProperties.max,\n  step: SliderProperties.step,\n  vertical: SliderProperties.vertical,\n  reverse: SliderProperties.reverse,\n  stretch: SliderProperties.stretch,\n  hideButtons: SliderProperties.hideButtons,\n  multiThumbBehavior: SliderProperties.multiThumbBehavior,\n  thumbTitle: SliderProperties.thumbTitle,\n  subtractTitle: SliderProperties.subtractTitle,\n  addTitle: SliderProperties.addTitle,\n  numberFormat: SliderProperties.numberFormat,\n  tooltip: SliderProperties.tooltip,\n  alwaysShowTooltip: SliderProperties.alwaysShowTooltip,\n  extensions: SliderProperties.extensions,\n  '[Space](/uilib/layout/space/properties)':\n    SliderProperties['[Space](/uilib/layout/space/properties)'],\n}\n\nexport const SliderFieldEvents: PropertiesTableProps = {}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport TranslationsTable from 'dnb-design-system-portal/src/shared/parts/TranslationsTable';\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {fieldProperties} from '@dnb/eufemia/src/extensions/forms/Field/FieldDocs';\nimport {SliderFieldProperties} from '@dnb/eufemia/src/extensions/forms/Field/Slider/SliderDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field-specific props\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: SliderFieldProperties\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"General props\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: fieldProperties,\n      valueType: ['number', 'Array<number>']\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Translations\"\n    }), \"\\n\", _jsx(TranslationsTable, {\n      localeKey: ['Field']\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const SliderProperties: PropertiesTableProps = {\n  value: {\n    doc: 'The `value` of the slider as a number or an array. If an array with numbers is provided, each number will represent a thumb button (the `+` and `-` button will be hidden on multiple thumbs).',\n    type: ['number', 'Array<number>'],\n    status: 'required',\n  },\n  min: {\n    doc: 'The minimum value. Can be a negative number as well. Defaults to `0`.',\n    type: 'number',\n    status: 'optional',\n  },\n  max: {\n    doc: 'The maximum value. Defaults to `100`.',\n    type: 'number',\n    status: 'optional',\n  },\n  step: {\n    doc: 'The steps the slider takes on changing the value. Defaults to `null`.',\n    type: 'number',\n    status: 'optional',\n  },\n  vertical: {\n    doc: 'Show the slider vertically. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  reverse: {\n    doc: 'Show the slider reversed. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  stretch: {\n    doc: 'If set to `true`, then the slider will be 100% in `width`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  hideButtons: {\n    doc: 'Removes the helper buttons. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  multiThumbBehavior: {\n    doc: 'Use either `omit`, `push` or `swap`. This property only works for two (range) or more thumb buttons, while `omit` will stop the thumb from swapping, `push` will push its nearest thumb along. Defaults to `swap`.',\n    type: 'string',\n    status: 'optional',\n  },\n  thumbTitle: {\n    doc: 'Give the slider thumb button a title for accessibility reasons. Defaults to `null`.',\n    type: 'string',\n    status: 'optional',\n  },\n  subtractTitle: {\n    doc: 'Give the subtract button a title for accessibility reasons. Defaults to `âˆ’`.',\n    type: 'string',\n    status: 'optional',\n  },\n  addTitle: {\n    doc: 'Give the add button a title for accessibility reasons. Defaults to `+`.',\n    type: 'string',\n    status: 'optional',\n  },\n  numberFormat: {\n    doc: 'Will extend the return object with a `number` property (from `onChange` event). You can use all the options from the [NumberFormat](/uilib/components/number-format/properties) component. It also will use that formatted number in the increase/decrease buttons. If it has to represent a currency, then use e.g. `numberFormat={{ currency: true, decimals: 0 }}`',\n    type: 'object',\n    status: 'optional',\n  },\n  tooltip: {\n    doc: 'Use `true` to show a tooltip on `mouseOver`, `touchStart` and `focus`, showing the current number (if `numberFormat` is given) or the raw value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  alwaysShowTooltip: {\n    doc: 'Use `true` to always show the tooltip, in addition to the `tooltip` property.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Prepends the Form Label component. If no ID is provided, a random ID is created.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDirection: {\n    doc: 'Use `labelDirection=\"vertical\"` to change the label layout direction. Defaults to `horizontal`.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  status: {\n    doc: 'Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: 'string',\n    status: 'optional',\n  },\n  statusState: {\n    doc: 'Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.',\n    type: 'string',\n    status: 'optional',\n  },\n  statusProps: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatusId: {\n    doc: 'The `status_id` used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'string',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the Slider more than the label. You can also send in a React component, so it gets wrapped inside the Slider component.',\n    type: 'string',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  extensions: {\n    doc: 'Makes it possible to display overlays with other functionality such as a marker on the slider marking a given value.',\n    type: 'object',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const SliderEvents: PropertiesTableProps = {\n  onChange: {\n    doc: 'will be called on state changes made by the user. The callback `value` and `rawValue` is a number `{ value, rawValue, event }`. But if the prop `numberFormat` is given, then it will return an additional `number` with the given format `{ value, number, rawValue, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  onDragStart: {\n    doc: 'will be called once the user stops dragging. Returns `{ event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  onDragEnd: {\n    doc: 'will be called once the user starts dragging. Returns `{ event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { fieldBlockSharedProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  dataValueEvents,\n  dataValueProperties,\n} from '../hooks/DataValueDocs'\n\nexport const fieldProperties: PropertiesTableProps = {\n  ...dataValueProperties,\n  ...fieldBlockSharedProperties,\n}\n\nexport const fieldEvents: PropertiesTableProps = {\n  ...dataValueEvents,\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const fieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  width: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: '`small`, `medium`, `large`, `stretch` or `false` for predefined standard widths.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const fieldBlockProperties: PropertiesTableProps = {\n  ...fieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading size](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'string',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const dataValueProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field Will take precedence over the path value given in the data context..',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: 'Info message shown below / after the field.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  warning: {\n    doc: 'Warning message shown below / after the field.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  error: {\n    doc: 'Error message shown below / after the field.',\n    type: 'Error',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set `true`, the field will give an error if the value cannot be empty.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  continuousValidation: {\n    doc: 'Set `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages.',\n    type: 'object',\n    status: 'optional',\n  },\n  validator: {\n    doc: 'Custom validator function that will be called for every change done by the user. Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function that will be called when the user leaves the field (blurring a text input, closing a dropdown etc). Can be asynchronous or synchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'transforms the value before it gets forwarded to the form data object or returned as the `onChange` value parameter.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const dataValueEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`.\",\n    type: 'function',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n"],"names":["SliderFieldProperties","paths","doc","type","status","min","SliderProperties","max","step","vertical","reverse","stretch","hideButtons","multiThumbBehavior","thumbTitle","subtractTitle","addTitle","numberFormat","tooltip","alwaysShowTooltip","extensions","_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","fieldProperties","valueType","TranslationsTable","localeKey","wrapper","MDXLayout","value","label","labelDirection","labelSrOnly","statusState","statusProps","globalStatusId","suffix","skeleton","SliderEvents","onChange","onDragStart","onDragEnd","dataValueProperties","fieldBlockSharedProperties","fieldEvents","dataValueEvents","labelDescription","layout","width","contentWidth","fieldBlockProperties","labelSize","asFieldset","align","composition","disabled","defaultValue","path","info","warning","error","emptyValue","required","schema","validateInitially","validateUnchanged","continuousValidation","errorMessages","validator","onBlurValidator","transformIn","transformOut","onFocus","onBlur"],"sourceRoot":""}