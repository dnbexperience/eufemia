{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-appearance-demos-mdx-7cda356d6bfc7fbcc43b.js","mappings":"gTAIO,MAAMA,EAAOA,KAClBC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,2CAAAC,UAAA,EAAAC,SAAA,smEA8EWC,EAAaA,KACxBJ,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,kDAAAE,SAAA,6SChFF,SAASE,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,KAAsBN,EAAMO,YAI/B,OAHKC,GAAUC,EAAqB,YAAY,GAC3CD,GAAqBC,EAAqB,uBAAuB,GACjED,GAAeC,EAAqB,iBAAiB,IACnDC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBd,SAAU,EAACH,EAAAA,EAAAA,KAAKO,EAAYG,GAAI,CAC9BP,SAAU,UACR,MAAMH,EAAAA,EAAAA,KAAKO,EAAYI,GAAI,CAC7BR,SAAU,gBACR,MAAMH,EAAAA,EAAAA,KAAKc,EAAe,CAAC,GAAI,MAAMd,EAAAA,EAAAA,KAAKO,EAAYI,GAAI,CAC5DR,SAAU,kBACR,MAAMH,EAAAA,EAAAA,KAAKc,EAAqB,CAAC,KAEzC,CAOA,MANA,SAAoBR,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,KAAsBN,EAAMO,YAC3E,OAAOM,GAAYnB,EAAAA,EAAAA,KAAKmB,EAAWX,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DH,UAAUH,EAAAA,EAAAA,KAAKK,EAAmBC,MAC9BD,EAAkBC,EAC1B,EAEA,SAASS,EAAqBK,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Appearance/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Appearance/demos.mdx"],"sourcesContent":["import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Form, Field } from '@dnb/eufemia/src/extensions/forms'\nimport { Flex } from '@dnb/eufemia/src'\n\nexport const Size = () => {\n  return (\n    <ComponentBox data-visual-test=\"form-appearance-size\">\n      {() => {\n        const Appearance = () => {\n          const { data } = Form.useData('appearance', { size: 'medium' })\n          const size: any = data.size\n          return (\n            <Form.Appearance size={size}>\n              <Form.Handler id=\"appearance\">\n                <Flex.Stack>\n                  <Field.Selection label=\"Choose size\" path=\"/size\">\n                    <Field.Option\n                      value=\"default\"\n                      title=\"Small (Default)\"\n                    />\n                    <Field.Option value=\"medium\" title=\"Medium\" />\n                    <Field.Option value=\"large\" title=\"Large\" />\n                  </Field.Selection>\n                  <Field.String label=\"String\" value=\"Foo\" />\n                  <Field.String\n                    label=\"String multiline\"\n                    multiline\n                    value=\"Foo\"\n                    rows={1}\n                  />\n                  <Field.Number label=\"Number\" value={1234} />\n                  <Field.Number\n                    label=\"Number\"\n                    currency\n                    currencyDisplay=\"name\"\n                    value={1234}\n                    showStepControls\n                  />\n                  <Field.Date />\n                  <Field.Email value=\"mail@dnb.no\" />\n                  <Field.Currency\n                    label=\"Amount\"\n                    currencyDisplay=\"name\"\n                    value={1234}\n                  />\n                  <Field.Expiry />\n                  <Field.NationalIdentityNumber value=\"12345678012\" />\n                  <Field.OrganizationNumber value=\"123123123\" />\n                  <Field.PhoneNumber />\n                  <Field.PostalCodeAndCity\n                    postalCode={{}}\n                    city={{ value: 'Oslo' }}\n                  />\n                  <Field.SelectCountry />\n                  <Field.BankAccountNumber />\n                  <Field.Name.First />\n                  <Field.Name.Last />\n                  <Field.Password />\n                  <Field.Slider />\n                  <Field.Upload />\n                  <Field.Address.Postal />\n                  <Field.Address.Street />\n                  <Field.Indeterminate dependencePaths={[]} />\n                  <Field.Toggle\n                    valueOn=\"what-ever\"\n                    valueOff=\"you-name-it\"\n                  />\n                  <Field.Boolean />\n                  <Form.ButtonRow>\n                    <Form.SubmitButton />\n                  </Form.ButtonRow>\n                </Flex.Stack>\n              </Form.Handler>\n            </Form.Appearance>\n          )\n        }\n\n        return <Appearance />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const NestedSize = () => {\n  return (\n    <ComponentBox data-visual-test=\"form-appearance-size-nested\">\n      <Form.Appearance size=\"medium\">\n        <Form.Handler>\n          <Flex.Stack>\n            <Field.String label=\"Medium\" value=\"Foo\" />\n\n            <Form.Appearance size=\"large\">\n              <Field.String label=\"Large\" value=\"Bar\" />\n            </Form.Appearance>\n          </Flex.Stack>\n        </Form.Handler>\n      </Form.Appearance>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.NestedSize) _missingMdxReference(\"Examples.NestedSize\", true);\n  if (!Examples.Size) _missingMdxReference(\"Examples.Size\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Medium size\"\n    }), \"\\n\", _jsx(Examples.Size, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Nested sizing\"\n    }), \"\\n\", _jsx(Examples.NestedSize, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["Size","_jsx","ComponentBox","noInline","children","NestedSize","_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error"],"sourceRoot":""}