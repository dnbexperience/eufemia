{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-appearance-mdx-1ba18ea494cedef2a134.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Appearance.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Appearance/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Appearance/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Appearance/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/Form/Appearance/info';\nimport Demos from 'Docs/uilib/extensions/forms/Form/Appearance/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Form, Field } from '@dnb/eufemia/src/extensions/forms'\nimport { Flex } from '@dnb/eufemia/src'\n\nexport const Size = () => {\n  return (\n    <ComponentBox data-visual-test=\"form-appearance-size\">\n      {() => {\n        const Appearance = () => {\n          const { data } = Form.useData('appearance', { size: 'medium' })\n          const size: any = data.size\n          return (\n            <Form.Appearance size={size}>\n              <Form.Handler id=\"appearance\">\n                <Flex.Stack>\n                  <Field.Selection label=\"Choose size\" path=\"/size\">\n                    <Field.Option\n                      value=\"default\"\n                      title=\"Small (Default)\"\n                    />\n                    <Field.Option value=\"medium\" title=\"Medium\" />\n                    <Field.Option value=\"large\" title=\"Large\" />\n                  </Field.Selection>\n                  <Field.String label=\"String\" value=\"Foo\" />\n                  <Field.String\n                    label=\"String multiline\"\n                    multiline\n                    value=\"Foo\"\n                    rows={1}\n                  />\n                  <Field.Number label=\"Number\" value={1234} />\n                  <Field.Number\n                    label=\"Number\"\n                    currency\n                    currencyDisplay=\"name\"\n                    value={1234}\n                    showStepControls\n                  />\n                  <Field.Date />\n                  <Field.Email value=\"mail@dnb.no\" />\n                  <Field.Currency\n                    label=\"Amount\"\n                    currencyDisplay=\"name\"\n                    value={1234}\n                  />\n                  <Field.Expiry />\n                  <Field.NationalIdentityNumber value=\"12345678012\" />\n                  <Field.OrganizationNumber value=\"123123123\" />\n                  <Field.PhoneNumber />\n                  <Field.PostalCodeAndCity\n                    postalCode={{}}\n                    city={{ value: 'Oslo' }}\n                  />\n                  <Field.SelectCountry />\n\n                  <Form.ButtonRow>\n                    <Form.SubmitButton />\n                  </Form.ButtonRow>\n                </Flex.Stack>\n              </Form.Handler>\n            </Form.Appearance>\n          )\n        }\n\n        return <Appearance />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const NestedSize = () => {\n  return (\n    <ComponentBox data-visual-test=\"form-appearance-size-nested\">\n      <Form.Appearance size=\"medium\">\n        <Form.Handler>\n          <Flex.Stack>\n            <Field.String label=\"Medium\" value=\"Foo\" />\n\n            <Form.Appearance size=\"large\">\n              <Field.String label=\"Large\" value=\"Bar\" />\n            </Form.Appearance>\n          </Flex.Stack>\n        </Form.Handler>\n      </Form.Appearance>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.NestedSize) _missingMdxReference(\"Examples.NestedSize\", true);\n  if (!Examples.Size) _missingMdxReference(\"Examples.Size\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Medium size\"\n    }), \"\\n\", _jsx(Examples.Size, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Nested sizing\"\n    }), \"\\n\", _jsx(Examples.NestedSize, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    strong: \"strong\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Form.Appearance\"\n      }), \" is a provider for theming form fields.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For now, it only provides theming of sizes of input fields, including Autocomplete and Dropdown. See example below.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can nest \", _jsx(_components.code, {\n        children: \"Form.Appearance\"\n      }), \" to provide different themes for different parts of the form.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"BETA:\"\n      }), \" The sizes are not 100% finalised and may change to be officially approved by UX through an RFC.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Usage\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form } from '@dnb/eufemia/extensions/forms'\\nrender(\\n  <Form.Appearance size=\\\"medium\\\">\\n    <Form.Input />\\n    <Form.Appearance size=\\\"large\\\">\\n      <Form.Input />\\n    </Form.Appearance>\\n  </Form.Appearance>,\\n)\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","Size","ComponentBox","noInline","NestedSize","_components","h2","h3","Examples","_missingMdxReference","id","component","Error","p","code","strong","pre","className"],"sourceRoot":""}