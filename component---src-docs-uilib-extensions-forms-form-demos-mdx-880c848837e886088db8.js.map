{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-demos-mdx-880c848837e886088db8.js","mappings":"+ZAKO,MAAMA,EAAUA,KACrBC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,+CAOWC,EAAsBA,KACjCH,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAG,MAAA,CACFC,gBACAC,cACA,KAAAC,UAAA,EAAAL,SAAA,yeAyBaM,EAAsBA,KACjCR,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAG,MAAA,CACFC,gBACAC,cACA,KAAAC,UAAA,EAAAL,SAAA,8yBAuCaG,EAAgBA,KAC3B,IAAII,EACAC,EAEJ,MAAMC,EAAMC,GACH,IAAIC,SAASC,IAClBJ,EAAiBI,EACjBL,EAAUM,YAAW,KACnBD,EAAQ,CAAEE,UAAU,GAAQ,GAC3BJ,EAAE,IAUT,OANAD,EAAGM,OAAS,KAAO,IAADC,EACF,QAAdA,EAAAR,SAAc,IAAAQ,GAAdA,EAAiB,CAAEF,UAAU,IAC7BG,aAAaV,GACbA,EAAU,IAAI,EAGTE,CAAE,EAGES,EAAwBA,KACnCpB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,geAuBWmB,EAAeA,KAC1BrB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,kDAAAC,SAAA,2F,uCCjHF,IAhBcoB,IACZtB,EAAAA,EAAAA,KAAA,OACEuB,MAAM,6BACNC,MAAO,GACPC,OAAQ,GACRC,KAAK,OACLC,QAAQ,eACJL,EAAKpB,UAETF,EAAAA,EAAAA,KAAA,QACE4B,OAAO,OACPC,YAAa,IACbC,EAAE,6E,kfCFD,MAAMC,EAA4BA,KACvC/B,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,mDAAAC,SAAA,6VAmBW8B,EAAcA,KACzBhC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,6OAgBW+B,EAAsBA,KACjCjC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,6xBAoCWgC,EAA2BA,KACtClC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAG,MAAA,CACFE,cAAA,IACAD,cAAA,gBACA8B,SACA,KAAA5B,UAAA,EAAAL,SAAA,2sEA6FakC,EAAiBA,KAC5BpC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,qfAwBWmC,EAAWA,KACtBrC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,wsCAoDWoC,EAASA,KACpBtC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAM,UAAA,EAAAL,SAAA,k7BA2CWqC,EAAcA,KACzBvC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,yxBAoCWsC,EAAaA,KACxBxC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAM,UAAA,EAAAL,SAAA,+hCAyDWuC,EAAgBA,KAC3BzC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAM,UAAA,EAAAL,SAAA,m/CAgEWwC,EAAWA,KACtB1C,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,+b,oEChdF,SAASyC,EAAkBrB,GACzB,MAAMsB,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,KAAsB3B,EAAM4B,YAM/B,OALKC,GAAUC,EAAqB,YAAY,GAC3CD,EAAAA,aAAsBC,EAAqB,wBAAwB,GACnED,EAAAA,qBAA8BC,EAAqB,gCAAgC,GACnFD,EAAAA,YAAqBC,EAAqB,uBAAuB,GACjED,EAAAA,UAAmBC,EAAqB,qBAAqB,IAC3DC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBpD,SAAU,EAACF,EAAAA,EAAAA,KAAK4C,EAAYG,GAAI,CAC9B7C,SAAU,UACR,MAAMF,EAAAA,EAAAA,KAAK4C,EAAYI,GAAI,CAC7B9C,SAAU,uBACR,MAAMF,EAAAA,EAAAA,KAAKmD,EAAAA,SAAmB,CAAC,GAAI,MAAMnD,EAAAA,EAAAA,KAAK4C,EAAYI,GAAI,CAChE9C,SAAU,uCACR,MAAMF,EAAAA,EAAAA,KAAKmD,EAAAA,YAAsB,CAAC,GAAI,MAAMnD,EAAAA,EAAAA,KAAK4C,EAAYI,GAAI,CACnE9C,SAAU,oCACR,MAAMF,EAAAA,EAAAA,KAAKmD,EAAAA,oBAA8B,CAAC,GAAI,MAAMnD,EAAAA,EAAAA,KAAK4C,EAAYI,GAAI,CAC3E9C,SAAU,qBACR,MAAMF,EAAAA,EAAAA,KAAKmD,EAAAA,WAAqB,CAAC,KAEzC,CAQA,SAASC,EAAqBG,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,CAHA,UANA,SAAoBjC,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOoC,QAASC,GAAad,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,KAAsB3B,EAAM4B,YAC3E,OAAOS,GAAY3D,EAAAA,EAAAA,KAAK2D,EAAWd,OAAOC,OAAO,CAAC,EAAGxB,EAAO,CAC1DpB,UAAUF,EAAAA,EAAAA,KAAK2C,EAAmBrB,MAC9BqB,EAAkBrB,EAC1B,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/SubmitIndicator/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/icons/dnb/stop.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Handler/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/demos.mdx"],"sourcesContent":["import { Button, Flex, FormLabel } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, FieldBlock, Form } from '@dnb/eufemia/src/extensions/forms'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      <Form.SubmitIndicator state=\"pending\" />\n    </ComponentBox>\n  )\n}\n\nexport const AsyncSubmitBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay}>\n            <Form.Card>\n              <Field.String path=\"/myField\" label=\"Short label\" />\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Form.Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AsyncChangeBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay} onChange={delay}>\n            <Form.Card>\n              <Field.String\n                path=\"/myField1\"\n                label=\"Label (with async validation)\"\n                placeholder=\"Write something ...\"\n                onChangeValidator={delay}\n              />\n              <FieldBlock width=\"medium\">\n                <Field.String\n                  path=\"/myField2\"\n                  width=\"stretch\"\n                  label=\"This is a long label\"\n                />\n              </FieldBlock>\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Form.Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\ntype CreateRequestReturn = Promise<{ hasError: boolean; cancel?: boolean }>\n\nexport const createRequest = () => {\n  let timeout: NodeJS.Timeout | null\n  let resolvePromise: ((value?: unknown) => void) | undefined\n\n  const fn = (t: number): CreateRequestReturn => {\n    return new Promise((resolve) => {\n      resolvePromise = resolve\n      timeout = setTimeout(() => {\n        resolve({ hasError: false })\n      }, t)\n    })\n  }\n\n  fn.cancel = () => {\n    resolvePromise?.({ hasError: true })\n    clearTimeout(timeout)\n    timeout = null\n  }\n\n  return fn\n}\n\nexport const WithinOtherComponents = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Flex.Horizontal align=\"center\">\n          <Form.SubmitButton showIndicator />\n          <Button variant=\"secondary\" icon=\"chevron_right\">\n            Secondary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <Button variant=\"tertiary\">\n            Tertiary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <FormLabel>\n            Label\n            <Form.SubmitIndicator state=\"pending\" />\n          </FormLabel>\n        </Flex.Horizontal>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithinALabel = () => {\n  return (\n    <ComponentBox data-visual-test=\"submit-indicator-with-label\">\n      <Form.Handler>\n        <Form.SubmitIndicator state=\"pending\" showLabel />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","/** This file is auto generated by convertSvgToJsx.ts */\n\nimport React from 'react'\nconst stop = (props) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={16}\n    height={16}\n    fill=\"none\"\n    viewBox=\"0 0 16 16\"\n    {...props}\n  >\n    <path\n      stroke=\"#000\"\n      strokeWidth={1.5}\n      d=\"M12.95 3.05a7 7 0 0 0-9.9 9.9m9.9-9.9a7 7 0 1 1-9.9 9.9m9.9-9.9-9.9 9.9\"\n    />\n  </svg>\n)\nexport default stop\n","import React from 'react'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport {\n  Form,\n  Field,\n  Value,\n  Tools,\n} from '@dnb/eufemia/src/extensions/forms'\nimport { stop as stopIcon } from '@dnb/eufemia/src/icons'\nimport { Button, Flex, P } from '@dnb/eufemia/src'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\nimport { createRequest } from '../SubmitIndicator/Examples'\n\nexport const RequiredAndOptionalFields = () => {\n  return (\n    <ComponentBox data-visual-test=\"required-and-optional-fields\">\n      <Form.Handler required>\n        <Form.Card>\n          <Field.Email path=\"/email\" required={false} />\n          <Field.String\n            path=\"/custom\"\n            label=\"Label\"\n            labelDescription=\"Label description\"\n            required={false}\n          />\n          <Field.Currency path=\"/amount\" label=\"Amount\" />\n          <Form.SubmitButton />\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const AsyncSubmit = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        onSubmit={async (data) => console.log('onSubmit', data)}\n      >\n        <Form.Card>\n          <Field.Email path=\"/email\" />\n          <Form.ButtonRow>\n            <Form.SubmitButton />\n          </Form.ButtonRow>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const AsyncSubmitComplete = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        data={{ myField: 'Some value' }}\n        onSubmit={async (data) => {\n          console.log('onSubmit', data)\n\n          // Wait for 2 seconds\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n\n          // e.g. go to new location\n\n          // Optionally, you can return e.g. the \"pending\" status with an additional info\n          return {\n            info: 'Redirecting to a new location',\n\n            // Force the form to stay in pending state\n            status: 'pending',\n          }\n        }}\n        asyncSubmitTimeout={10000}\n      >\n        <Flex.Stack>\n          <Form.MainHeading>Heading</Form.MainHeading>\n          <Form.Card>\n            <Value.String label=\"Summary\" path=\"/myField\" />\n          </Form.Card>\n          <Form.ButtonRow>\n            <Form.SubmitButton />\n          </Form.ButtonRow>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const AsyncChangeAndValidation = () => {\n  return (\n    <ComponentBox scope={{ debounceAsync, createRequest, stopIcon }}>\n      {() => {\n        const validator = debounceAsync(async function secondValidator(\n          value: string,\n        ) {\n          try {\n            const request = createRequest()\n            const wasCanceled = this.addCancelEvent(request.cancel)\n            await request(2000) // Simulate a request\n\n            if (wasCanceled()) {\n              throw new Error('Validation request canceled')\n            }\n          } catch (error) {\n            return error\n          }\n\n          if (value !== 'valid') {\n            return new Error(`Custom error with invalid value: ${value}`) // Show this message\n          }\n        })\n\n        const cancelRequest = () => {\n          validator.cancel()\n        }\n\n        const onSubmit = async (data) => {\n          console.log('onSubmit', data)\n\n          // Wait for 2 seconds\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n\n          // For demo purposes, we show a message\n          return { info: 'Message from onSubmit return' }\n        }\n\n        const onChangeForm = async (data) => {\n          console.log('onChangeForm', data)\n\n          // Wait for 2 seconds\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n\n          // For demo purposes, we show a message\n          return { warning: 'Warning message' }\n        }\n\n        const onChangeField = async (data) => {\n          console.log('onChangeField', data)\n\n          // Wait for 2 seconds\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n\n          // For demo purposes, we show a message\n          return { info: 'Info message' }\n        }\n\n        const MyForm = () => {\n          const { data } = Form.useData('unique-id')\n          console.log('data', data)\n          return (\n            <Form.Handler\n              id=\"unique-id\"\n              onSubmit={onSubmit}\n              onChange={onChangeForm}\n            >\n              <Flex.Stack>\n                <Field.String\n                  label='Type \"valid\" to validate the field'\n                  path=\"/myField\"\n                  required\n                  onChangeValidator={validator}\n                  onChange={onChangeField}\n                  autoComplete=\"off\"\n                />\n                <Form.ButtonRow>\n                  <Form.SubmitButton text=\"Save\" />\n                  <Button\n                    text=\"Stop async operations\"\n                    variant=\"tertiary\"\n                    icon={stopIcon}\n                    icon_position=\"left\"\n                    disabled={false}\n                    onClick={cancelRequest}\n                  />\n                </Form.ButtonRow>\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const SessionStorage = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        onSubmit={(data, { resetForm, clearData }) => {\n          console.log('onSubmit', data)\n\n          // Docs: https://eufemia.dnb.no/uilib/extensions/forms/DataContext/Provider/events/#onsubmit-parameters\n          resetForm()\n          clearData()\n        }}\n        sessionStorageId=\"session-key\"\n      >\n        <Form.Card>\n          <Field.String label=\"Name\" path=\"/name\" />\n          <Field.Email path=\"/email\" />\n          <Form.ButtonRow>\n            <Form.SubmitButton />\n          </Form.ButtonRow>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Autofill = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        onSubmit={(data) => console.log('onSubmit', data)}\n        autoComplete\n      >\n        <Flex.Stack>\n          <Form.MainHeading>Delivery address</Form.MainHeading>\n\n          <Form.Card>\n            <Form.SubHeading>Your name</Form.SubHeading>\n\n            <Field.Name.First path=\"/firstName\" required />\n            <Field.Name.Last path=\"/lastName\" required />\n          </Form.Card>\n\n          <Form.Card>\n            <Form.SubHeading>Your address</Form.SubHeading>\n\n            <Field.Composition width=\"large\">\n              <Field.String\n                label=\"Street\"\n                width=\"stretch\"\n                path=\"/streetName\"\n                required\n              />\n              <Field.Number\n                label=\"Nr.\"\n                width=\"small\"\n                path=\"/streetNr\"\n                required\n              />\n            </Field.Composition>\n\n            <Field.PostalCodeAndCity\n              postalCode={{ required: true, path: '/postalCode' }}\n              city={{ required: true, path: '/city' }}\n            />\n          </Form.Card>\n\n          <Form.Card>\n            <P>More information about this form.</P>\n            <Form.ButtonRow>\n              <Form.SubmitButton />\n            </Form.ButtonRow>\n          </Form.Card>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Locale = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const myTranslations = {\n          'nb-NO': { PhoneNumber: { label: 'Egendefinert 🚀' } },\n          'en-GB': { PhoneNumber: { label: 'Custom 🚀' } },\n        }\n\n        const MyForm = () => {\n          const { data } = Form.useData('my-form', {\n            locale: 'en-GB',\n          })\n\n          return (\n            <Form.Handler\n              id=\"my-form\"\n              locale={data?.locale}\n              translations={myTranslations}\n            >\n              <Form.Card>\n                <Field.PhoneNumber />\n\n                <Field.Selection\n                  path=\"/locale\"\n                  variant=\"button\"\n                  optionsLayout=\"horizontal\"\n                >\n                  <Field.Option value=\"nb-NO\">Norsk</Field.Option>\n                  <Field.Option value=\"sv-SE\">Svenska</Field.Option>\n                  <Field.Option value=\"da-DK\">Dansk</Field.Option>\n                  <Field.Option value=\"en-GB\">English</Field.Option>\n                </Field.Selection>\n              </Form.Card>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const VisibleData = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        defaultData={{\n          isVisible: true,\n        }}\n        onSubmit={(data, { reduceToVisibleFields }) => {\n          const myData = reduceToVisibleFields(data, {\n            removePaths: ['/isVisible'],\n          })\n          console.log('Result of reduceToVisibleFields: ', myData)\n        }}\n      >\n        <Flex.Stack>\n          <Field.Boolean\n            label=\"Show radio buttons\"\n            variant=\"button\"\n            path=\"/isVisible\"\n          />\n          <Form.Visibility pathTrue=\"/isVisible\" animate>\n            <Field.Selection\n              label=\"Radio buttons\"\n              variant=\"radio\"\n              path=\"/myValue\"\n              defaultValue=\"foo\"\n            >\n              <Field.Option value=\"foo\" title=\"Foo\" />\n              <Field.Option value=\"bar\" title=\"Bar\" />\n            </Field.Selection>\n          </Form.Visibility>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const FilterData = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const id = 'my-form'\n        const filterDataHandler = ({ props }) => !props.disabled\n\n        const MyForm = () => {\n          const { data } = Form.useData(id, {\n            disabled: false,\n            myField: 'Value',\n          })\n\n          return (\n            <Form.Handler\n              id={id}\n              onSubmit={(data, { filterData }) => {\n                console.log('onSubmit', filterData(filterDataHandler))\n              }}\n            >\n              <Flex.Stack>\n                <Field.Boolean label=\"Disabled\" path=\"/disabled\" />\n                <Field.String\n                  label=\"My Field\"\n                  path=\"/myField\"\n                  disabled={data.disabled}\n                />\n                <Form.ButtonRow>\n                  <Form.SubmitButton />\n                </Form.ButtonRow>\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        const Output = () => {\n          const { filterData } = Form.useData(id)\n          const { hasErrors } = Form.useValidation(id)\n\n          return (\n            <>\n              <Tools.Log top data={hasErrors()} label=\"hasErrors:\" />\n              <Tools.Log top data={filterData(filterDataHandler)} />\n            </>\n          )\n        }\n\n        return (\n          <>\n            <MyForm />\n            <Output />\n          </>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const TransformData = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyForm = () => {\n          const [submitData, setSubmitData] = React.useState({})\n          const onSubmit = (data, { transformData }) => {\n            const transformedData = transformData(\n              data,\n              ({ value, displayValue, label }) => {\n                return { value, displayValue, label }\n              },\n            )\n\n            setSubmitData(transformedData)\n            console.log('onSubmit', transformedData)\n          }\n\n          return (\n            <Form.Handler onSubmit={onSubmit}>\n              <Flex.Stack>\n                <Field.String\n                  label=\"Foo label\"\n                  path=\"/myString\"\n                  defaultValue=\"foo\"\n                />\n\n                <Field.Selection\n                  label=\"Bar label\"\n                  path=\"/mySelection\"\n                  defaultValue=\"bar\"\n                  variant=\"dropdown\"\n                >\n                  <Field.Option value=\"foo\" title=\"Foo Value\" />\n                  <Field.Option value=\"bar\" title=\"Bar Value\" />\n                </Field.Selection>\n\n                <Field.ArraySelection\n                  label=\"Bar label\"\n                  path=\"/myArraySelection\"\n                  defaultValue={['bar']}\n                  variant=\"checkbox\"\n                >\n                  <Field.Option value=\"foo\" title=\"Foo Value\" />\n                  <Field.Option value=\"bar\" title=\"Bar Value\" />\n                </Field.ArraySelection>\n\n                <Form.SubmitButton />\n\n                <Tools.Log\n                  label=\"Submit Data (press submit to update)\"\n                  data={submitData}\n                />\n                <Tools.Log label=\"Data Context\" />\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const WithHelp = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        defaultData={{\n          myField: 12345,\n        }}\n      >\n        <Form.Card>\n          <Field.Number\n            path=\"/myField\"\n            label=\"Label text\"\n            help={{\n              title: 'Help title',\n              content: 'Help content.',\n            }}\n          />\n          <Value.Number\n            path=\"/myField\"\n            inheritLabel\n            help={{\n              title: 'Help title',\n              content: 'Help content.',\n            }}\n          />\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Handler/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.AsyncSubmit) _missingMdxReference(\"Examples.AsyncSubmit\", true);\n  if (!Examples.AsyncSubmitComplete) _missingMdxReference(\"Examples.AsyncSubmitComplete\", true);\n  if (!Examples.FilterData) _missingMdxReference(\"Examples.FilterData\", true);\n  if (!Examples.WithHelp) _missingMdxReference(\"Examples.WithHelp\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"With a help button\"\n    }), \"\\n\", _jsx(Examples.WithHelp, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"In combination with a SubmitButton\"\n    }), \"\\n\", _jsx(Examples.AsyncSubmit, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"New location after async submit\"\n    }), \"\\n\", _jsx(Examples.AsyncSubmitComplete, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Filter your data\"\n    }), \"\\n\", _jsx(Examples.FilterData, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["Default","_jsx","ComponentBox","children","AsyncSubmitBehavior","scope","createRequest","debounceAsync","noInline","AsyncChangeBehavior","timeout","resolvePromise","fn","t","Promise","resolve","setTimeout","hasError","cancel","_resolvePromise","clearTimeout","WithinOtherComponents","WithinALabel","props","xmlns","width","height","fill","viewBox","stroke","strokeWidth","d","RequiredAndOptionalFields","AsyncSubmit","AsyncSubmitComplete","AsyncChangeAndValidation","stopIcon","SessionStorage","Autofill","Locale","VisibleData","FilterData","TransformData","WithHelp","_createMdxContent","_components","Object","assign","h2","h3","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","id","component","Error","wrapper","MDXLayout"],"sourceRoot":""}