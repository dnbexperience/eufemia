"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[40531],{74664:function(e,n,t){t.r(n);var a=t(52322),r=t(45392);function i(e){const n=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",ul:"ul",li:"li",a:"a"},(0,r.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{children:"Description"}),"\n",(0,a.jsxs)(n.p,{children:["With the ",(0,a.jsx)(n.code,{children:"Form.getData"})," method, you can manage your form data outside of the form itself. This is beneficial when you need to utilize the form data in other places within your application:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nfunction Component() {\n  return <Form.Handler id=\"unique-id\">...</Form.Handler>\n}\n\n// Later, when there is data available\nconst {\n  getValue, // Method to get a single value\n  data, // The whole dataset (unvalidated)\n  filterData, // Method to filter data with your own logic\n} = Form.getData('unique-id')\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You link them together via the ",(0,a.jsx)(n.code,{children:"id"})," (string) property."]}),"\n",(0,a.jsx)(n.p,{children:"TypeScript support:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"type Data = { foo: string }\nconst { data } = Form.getData<Data>('unique')\n"})}),"\n",(0,a.jsx)(n.p,{children:"Related helpers:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/Form/setData/",children:"setData"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/Form/useData/",children:"useData"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{children:"Filter data"}),"\n",(0,a.jsxs)(n.p,{children:["You can use the ",(0,a.jsx)(n.code,{children:"filterData"})," method to filter your data."]}),"\n",(0,a.jsxs)(n.p,{children:["You simply give it the same kind of callback function as you would with the ",(0,a.jsx)(n.code,{children:"Form.Handler"})," ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/Form/Handler/demos/#filter-your-data",children:"filterData"})," property method."]}),"\n",(0,a.jsx)(n.p,{children:"The callback function receives the path as the first argument, the value as the second argument, and the related field properties as the third argument. The callback function must return a boolean value or undefined. Return false to exclude an entry."}),"\n",(0,a.jsx)(n.p,{children:"It returns the filtered form data."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'const Component = () => {\n  return (\n    <Form.Handler id={id}>\n      <Field.String path="/foo" disabled />\n    </Form.Handler>\n  )\n}\n\nconst filterDataHandler = (path, value, props, internal) => {\n  if (props.disabled === true) {\n    return false\n  }\n}\n\n// Later, when there is data available\nconst { data, filterData } = Form.getData(id)\nconst filteredData = filterData(filterDataHandler)\n'})})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(i,e)})):i(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-get-data-info-mdx-0cedd680a500944572e5.js.map