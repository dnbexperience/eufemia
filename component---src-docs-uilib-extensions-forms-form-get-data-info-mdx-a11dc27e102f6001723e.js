"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[40531],{74664:function(e,n,i){i.r(n);var r=i(52322),t=i(45392);function s(e){const n=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",ul:"ul",li:"li",a:"a"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["With the ",(0,r.jsx)(n.code,{children:"Form.getData"})," method, you can manage your form data outside of the form itself. This is beneficial when you need to utilize the form data in other places within your application:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nconst myFormId = 'unique-id' // or a function, object or React Context reference\n\nfunction Component() {\n  return <Form.Handler id={myFormId}>...</Form.Handler>\n}\n\n// Later, when there is data available\nconst { getValue, data, filterData, reduceToVisibleFields } =\n  Form.getData(myFormId)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getValue"})," will return the value of the given path."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"data"})," will return the whole dataset (unvalidated)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filterData"})," will filter the data based on your own logic."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"reduceToVisibleFields"})," will reduce the given data set to only contain the visible fields (mounted fields)."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["You link them together via the ",(0,r.jsx)(n.code,{children:"id"})," (string, function, object or React Context as the reference) property."]}),"\n",(0,r.jsx)(n.p,{children:"TypeScript support:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"type Data = { foo: string }\nconst { data } = Form.getData<Data>('unique')\n"})}),"\n",(0,r.jsx)(n.p,{children:"Related helpers:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/Form/setData/",children:"Form.setData"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/Form/useData/",children:"Form.useData"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{children:"Visible data"}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.code,{children:"reduceToVisibleFields"})," function to get only the data of visible (mounted) fields."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nconst myFormId = 'unique-id' // or a function, object or React Context reference\n\nconst MyForm = () => {\n  return (\n    <Form.Handler id={myFormId}>\n      <Form.Visibility pathTrue=\"/isVisible\">\n        <Field.String path=\"/foo\" />\n      </Form.Visibility>\n    </Form.Handler>\n  )\n}\n\n// Later, when there is data available\nconst { data, reduceToVisibleFields } = Form.getData(myFormId)\nconst visibleData = reduceToVisibleFields(data)\n"})}),"\n",(0,r.jsx)(n.h2,{children:"Filter data"}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.code,{children:"filterData"})," function to filter your data."]}),"\n",(0,r.jsxs)(n.p,{children:["You simply give it the ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/Form/Handler/demos/#filter-your-data",children:"same kind of filter"})," as you would within the ",(0,r.jsx)(n.code,{children:"onSubmit"})," event callback."]}),"\n",(0,r.jsx)(n.p,{children:"The callback function receives the following properties in an object:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"path"})," The path of the field."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"value"})," The value of the field."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"displayValue"})," The displayed value of the field."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"label"})," The label of the field."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"props"})," The given field properties."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"error"})," The error of the field. Is ",(0,r.jsx)(n.code,{children:"undefined"})," if there is no error."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The callback function should return a ",(0,r.jsx)(n.code,{children:"boolean"})," or ",(0,r.jsx)(n.code,{children:"undefined"}),". Return ",(0,r.jsx)(n.code,{children:"false"})," to exclude an entry."]}),"\n",(0,r.jsx)(n.p,{children:"It returns the filtered form data."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"const myFormId = 'unique-id' // or a function, object or React Context reference\n\nconst MyForm = () => {\n  return (\n    <Form.Handler id={myFormId}>\n      <Field.String path=\"/foo\" disabled />\n    </Form.Handler>\n  )\n}\n\nconst filterDataHandler = ({ path, value, data, props, error }) => {\n  if (props.disabled === true) {\n    return false\n  }\n}\n\n// Later, when there is data available\nconst { filterData } = Form.getData(myFormId)\nconst filteredData = filterData(filterDataHandler)\n"})})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(s,e)})):s(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-get-data-info-mdx-a11dc27e102f6001723e.js.map