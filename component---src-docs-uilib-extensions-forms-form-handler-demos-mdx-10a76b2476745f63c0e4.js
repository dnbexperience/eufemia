"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[80504],{43316:function(e,n,t){t.r(n);var s=t(52322),i=t(45392),a=t(94012);function o(e){const n=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code",a:"a",pre:"pre",ul:"ul",li:"li"},(0,i.ah)(),e.components);return a||l("Examples",!1),a.AsyncChangeAndValidation||l("Examples.AsyncChangeAndValidation",!0),a.AsyncSubmit||l("Examples.AsyncSubmit",!0),a.AsyncSubmitComplete||l("Examples.AsyncSubmitComplete",!0),a.Autofill||l("Examples.Autofill",!0),a.FilterData||l("Examples.FilterData",!0),a.Locale||l("Examples.Locale",!0),a.RequiredAndOptionalFields||l("Examples.RequiredAndOptionalFields",!0),a.SessionStorage||l("Examples.SessionStorage",!0),a.TransformData||l("Examples.TransformData",!0),a.VisibleData||l("Examples.VisibleData",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{children:"Demos"}),"\n",(0,s.jsx)(n.h3,{children:"Required and Optional Fields"}),"\n",(0,s.jsxs)(n.p,{children:["To make all fields required, set the ",(0,s.jsx)(n.code,{children:"required"})," property on the ",(0,s.jsx)(n.code,{children:"Form.Handler"})," component."]}),"\n",(0,s.jsxs)(n.p,{children:["For fields that should remain optional, use ",(0,s.jsx)(n.code,{children:"required={false}"}),' property on the specific field. When doing so, it will append "(optional)" to the optional field\'s label(',(0,s.jsx)(n.code,{children:"labelSuffix"}),")."]}),"\n",(0,s.jsx)(a.RequiredAndOptionalFields,{}),"\n",(0,s.jsx)(n.h3,{children:"In combination with a SubmitButton"}),"\n",(0,s.jsxs)(n.p,{children:["This example uses an async ",(0,s.jsx)(n.code,{children:"onSubmit"})," event handler. It will disable all fields and show an indicator on the ",(0,s.jsx)(n.a,{href:"/uilib/extensions/forms/Form/SubmitButton/",children:"SubmitButton"})," while the form is pending."]}),"\n",(0,s.jsx)(n.p,{children:"With an async function, you can also handle the response from the server and update the form with the new data."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Async function\nconst onSubmit = async (data) => {\n  try {\n    const response = await fetch('https://api.example.com', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    })\n    const data = await response.json()\n    Form.setData('unique', data) // Whatever you want to do with the data\n  } catch (error) {\n    return error // Will display the error message in the form\n  }\n}\n"})}),"\n",(0,s.jsx)(a.AsyncSubmit,{}),"\n",(0,s.jsx)(n.h3,{children:"New location after async submit"}),"\n",(0,s.jsx)(n.p,{children:"This example is only for demo purpose and will NOT redirect to a new location. It will also time out after 10 seconds."}),"\n",(0,s.jsx)(a.AsyncSubmitComplete,{}),"\n",(0,s.jsx)(n.h3,{children:"Reduce your data to visible fields"}),"\n",(0,s.jsxs)(n.p,{children:["You can use the ",(0,s.jsx)(n.code,{children:"reduceToVisibleFields"})," function to get only the data of visible (mounted) fields."]}),"\n",(0,s.jsx)(a.VisibleData,{}),"\n",(0,s.jsx)(n.h3,{children:"With session storage"}),"\n",(0,s.jsx)(n.p,{children:"Changes you make to the fields are temporarily saved and loaded\nwhen the browser reloads. The data is stored until the session storage is invalidated."}),"\n",(0,s.jsx)(a.SessionStorage,{}),"\n",(0,s.jsx)(n.h3,{children:"Locale and translations"}),"\n",(0,s.jsx)(a.Locale,{}),"\n",(0,s.jsx)(n.h3,{children:"Autocomplete (autofill) user data"}),"\n",(0,s.jsx)(a.Autofill,{}),"\n",(0,s.jsx)(n.h3,{children:"Complex async (autosave) example"}),"\n",(0,s.jsxs)(n.p,{children:["This example demonstrates how to use async validation with an async ",(0,s.jsx)(n.code,{children:"onSubmit"})," and async ",(0,s.jsx)(n.code,{children:"onChange"})," event for both the ",(0,s.jsx)(n.code,{children:"Form.Handler"})," and a field itself."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"While you write, an async validation request is simulated to check if the input is valid. If it's not, an error message will be shown."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"During validation, only the relevant value will be evaluated. This means, when the delayed validation is done, and the value has changed, the validation result will be omitted."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["You can press enter to submit the form while you write. But only a string of ",(0,s.jsx)(n.code,{children:"valid"})," will be accepted to emit the form ",(0,s.jsx)(n.code,{children:"onSubmit"})," and ",(0,s.jsx)(n.code,{children:"onChange"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:'You can start writing, wait a second or two and remove the whole text again and blur the field. The async validation return will be omitted and the "required" error message will be shown.'}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"It also shows some status messages after the validation and submit requests are done."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["This example does not include an async ",(0,s.jsx)(n.code,{children:"onBlurValidator"})," – but it's possible to add one into the mix as well."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["To access the ",(0,s.jsx)(n.code,{children:"date"}),' "in sync" – you can use the ',(0,s.jsx)(n.a,{href:"/uilib/extensions/forms/Form/useData/",children:"useData"})," hook."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(a.AsyncChangeAndValidation,{}),"\n",(0,s.jsx)(n.h3,{children:"Filter your data"}),"\n",(0,s.jsxs)(n.p,{children:["By using the ",(0,s.jsx)(n.code,{children:"filterData"})," method from the ",(0,s.jsx)(n.code,{children:"onSubmit"})," event callback you can filter out data that you don't want to send to your server."]}),"\n",(0,s.jsxs)(n.p,{children:["More info about ",(0,s.jsx)(n.code,{children:"filterData"})," can be found in the ",(0,s.jsx)(n.a,{href:"/uilib/extensions/forms/getting-started/#filter-data",children:"Getting Started"})," section."]}),"\n",(0,s.jsx)(n.p,{children:"In this example we filter out all fields that are disabled."}),"\n",(0,s.jsx)(a.FilterData,{}),"\n",(0,s.jsx)(n.h3,{children:"Transform data"}),"\n",(0,s.jsxs)(n.p,{children:["You can use the ",(0,s.jsx)(n.code,{children:"transformData"})," method from the ",(0,s.jsx)(n.code,{children:"onSubmit"})," event callback to transform the data before sending it to your server."]}),"\n",(0,s.jsxs)(n.p,{children:["It's possible to use the ",(0,s.jsx)(n.code,{children:"transformOut"})," on the Form.Handler method to achieve the same. But performance wise, it's better to use the ",(0,s.jsx)(n.code,{children:"transformData"})," method. This is because ",(0,s.jsx)(n.code,{children:"transformOut"})," on the Form.Handler method will execute for every change, while ",(0,s.jsx)(n.code,{children:"transformData"})," method from the ",(0,s.jsx)(n.code,{children:"onSubmit"})," event callback only executes when submitting the form."]}),"\n",(0,s.jsx)(a.TransformData,{})]})}function l(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(o,e)})):o(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-handler-demos-mdx-10a76b2476745f63c0e4.js.map