"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[1251,10726,73176,96124],{35574:function(e,n,t){t.r(n);var r=t(52322),s=t(45392),a=t(19452),o=t(43316);function i(e){return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.default,{}),"\n",(0,r.jsx)(o.default,{})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(i,e)})):i()}},19452:function(e,n,t){t.r(n);var r=t(52322),s=t(45392),a=t(99201),o=t(72945);function i(e){const n=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",a:"a",h3:"h3",strong:"strong",ol:"ol",li:"li",ul:"ul"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Form.Handler"})," component provides a HTML form element."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nrender(\n  <Form.Handler\n    data={existingData}\n    onChange={...}\n    onSubmit={...}\n  >\n    Your Form\n  </Form.Handler>,\n)\n"})}),"\n",(0,r.jsx)(n.p,{children:"The form data can be handled outside of the form. This is useful if you want to use the form data in other components:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nfunction MyForm() {\n  const {\n    getValue, // Method to get a single value\n    update, // Method to update a single value\n    set, // Method to set the whole dataset\n    data, // The whole dataset (unvalidated)\n    filterData, // Method to filter data with your own logic\n  } = Form.useData('unique')\n\n  return <Form.Handler id=\"unique\">...</Form.Handler>\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["More examples can be found in the ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/Form/useData/",children:"useData"})," hook docs."]}),"\n",(0,r.jsx)(n.h3,{children:"TypeScript support"}),"\n",(0,r.jsx)(n.p,{children:"You can define the TypeScript type structure for your data like so:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\ntype MyDataSet = {\n  firstName?: string\n}\n\nconst data: MyDataSet = {\n  firstName: 'Nora',\n}\n\n// Method #1\nfunction MyForm() {\n  return (\n    <Form.Handler\n      data={data}\n      onSubmit={(data) => {\n        console.log(data.firstName)\n      }}\n    />\n  )\n}\n\n// Method #2\nconst submitHandler = (data: MyDataSet) => {\n  console.log(data.firstName)\n}\nfunction MyForm() {\n  return <Form.Handler data={data} onSubmit={submitHandler} />\n}\n\n// Method #3\nimport type { OnSubmit } from '@dnb/eufemia/extensions/forms'\nconst submitHandler: OnSubmit<MyDataSet> = (data) => {\n  console.log(data.firstName)\n}\nfunction MyForm() {\n  return <Form.Handler data={data} onSubmit={submitHandler} />\n}\n"})}),"\n",(0,r.jsxs)(n.h2,{children:["Async ",(0,r.jsx)(n.code,{children:"onChange"})," and ",(0,r.jsx)(n.code,{children:"onSubmit"})," event handlers"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"NB:"})," When using an async ",(0,r.jsx)(n.code,{children:"onChange"})," event handler, the ",(0,r.jsx)(n.code,{children:"data"})," parameter will only include validated data. This lets you utilize the ",(0,r.jsx)(n.code,{children:"data"})," parameter directly in your request, without having to further process or transform it."]}),"\n",(0,r.jsxs)(n.p,{children:["If you need to use the original data (sync), you can access it via the ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/Form/useData/",children:"useData"})," hook."]}),"\n",(0,r.jsxs)(n.p,{children:["Depending on your needs, you may want to use e.g. ",(0,r.jsx)(n.code,{children:"debounceAsync"})," (",(0,r.jsx)(n.a,{href:"/uilib/helpers/functions/#debounce",children:"debounce"}),") to prevent multiple requests from being sent."]}),"\n",(0,r.jsxs)(n.p,{children:["You can return parameters from inside the async ",(0,r.jsx)(n.code,{children:"onChange"})," or ",(0,r.jsx)(n.code,{children:"onSubmit"})," event handler. This way you can display more related information, such as an error or an object with these keys:"]}),"\n",(0,r.jsx)(o.default,{}),"\n",(0,r.jsx)(a.default,{}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"info"}),", ",(0,r.jsx)(n.code,{children:"warning"})," and ",(0,r.jsx)(n.code,{children:"error"})," messages will be displayed at the bottom of a form or field (",(0,r.jsx)(n.a,{href:"/uilib/components/form-status",children:"FormStatus"}),"), depending where it is used. While the ",(0,r.jsx)(n.code,{children:"success"})," will be displayed on the label of the field that initiated the ",(0,r.jsx)(n.code,{children:"onChange"})," event."]}),"\n",(0,r.jsx)(n.h2,{children:"Browser autofill"}),"\n",(0,r.jsxs)(n.p,{children:["You can set ",(0,r.jsx)(n.code,{children:"autoComplete"})," on the ",(0,r.jsx)(n.code,{children:"Form.Handler"})," â€“ each ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/base-fields/String/",children:"Field.String"}),"-field will then get ",(0,r.jsx)(n.code,{children:'autoComplete="on"'}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'<Form.Handler autoComplete={true}>\n  <Field.String path="/firstName" />\n  <Field.String path="/firstName" />\n</Form.Handler>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"path"})," property will be used to set the ",(0,r.jsx)(n.code,{children:"name"})," attribute, which lets browser know which autocomplete value should be proposed to the user."]}),"\n",(0,r.jsx)(n.h2,{children:"Temporary storage"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"sessionStorageId"})," feature uses the browsers session-storage (temporary storage mechanism) to store data entered by the user."]}),"\n",(0,r.jsx)(n.p,{children:"This lets the user navigate away and come back to the form, without loosing already entered data."}),"\n",(0,r.jsx)(n.p,{children:"Ensure you only use this feature for non-sensitive data."}),"\n",(0,r.jsx)(n.p,{children:"It will flush the storage once the form gets submitted."}),"\n",(0,r.jsx)(n.h2,{children:"Filter data"}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.code,{children:"filterData"})," method to filter your ",(0,r.jsx)(n.code,{children:"onSubmit"})," data. It might be useful, for example, to ",(0,r.jsx)(n.strong,{children:"exclude disabled fields"})," or filter out empty fields. The callback function receives the following arguments:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"path"})," as the first argument."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"value"})," as the second argument."]}),"\n",(0,r.jsxs)(n.li,{children:["The field ",(0,r.jsx)(n.code,{children:"properties"})," (props) as the third argument."]}),"\n",(0,r.jsx)(n.li,{children:"The fourth argument is an object with the internal state of the field, like the error state."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The callback function should return a ",(0,r.jsx)(n.code,{children:"boolean"})," or ",(0,r.jsx)(n.code,{children:"undefined"}),". Return ",(0,r.jsx)(n.code,{children:"false"})," to exclude an entry."]}),"\n",(0,r.jsx)(n.p,{children:"It returns the filtered form data."}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/Form/useData/#filter-data",children:"useData"})," hook and the ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/Form/getData/#filter-data",children:"getData"})," method also returns a ",(0,r.jsx)(n.code,{children:"filterData"})," function you can use to filter data the same way."]}),"\n",(0,r.jsxs)(n.p,{children:["In the demo section is an example of how to use the ",(0,r.jsx)(n.code,{children:"filterData"})," method."]}),"\n",(0,r.jsx)(n.h3,{children:"Filter arrays"}),"\n",(0,r.jsxs)(n.p,{children:["You can filter arrays by using the ",(0,r.jsx)(n.code,{children:"filterData"})," method. You can find more information about this in the ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/Iterate/Array/#filter-data",children:"Iterate.Array"})," docs."]}),"\n",(0,r.jsx)(n.h3,{children:"onSubmit parameters"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"onSubmit"})," event returns additional methods you can call:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filterData"})," Filters the given/internal data set."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"resetForm"})," Deletes ",(0,r.jsx)(n.code,{children:"sessionStorage"})," and browser stored autocomplete data."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"clearData"})," Empties the given/internal data set."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nconst myFilter = {\n  '/myPath': (value) => {\n    return value.length > 0\n  },\n}\n\nconst MyForm = () => {\n  return (\n    <Form.Handler\n      onSubmit={(data, { filterData, resetForm, clearData }) => {\n        resetForm()\n        clearData()\n\n        const myData = filterData(myFilter)\n      }}\n      sessionStorageId=\"session-key\"\n    >\n      <Form.SubmitButton />\n    </Form.Handler>\n  )\n}\n"})})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(i,e)})):i(e)}},72945:function(e,n,t){t.r(n);var r=t(52322),s=t(45392);function a(e){const n=Object.assign({pre:"pre",code:"code"},(0,s.ah)(),e.components);return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Async event handler\nconst onChange = debounceAsync(async function (data) {\n  try {\n    await makeRequest(data)\n  } catch (error) {\n    return error\n  }\n\n  // Optionally, you can return an object with these keys, depending your needs\n  return {\n    info: 'Info message',\n    warning: 'Warning message',\n\n    // and either an error\n    error: new Error('Error message'),\n\n    // or success (when used for autosave)\n    success: 'saved',\n  } as const\n})\n"})})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(a,e)})):a(e)}},99201:function(e,n,t){t.r(n);var r=t(52322),s=t(45392);function a(e){const n=Object.assign({p:"p",pre:"pre",code:"code"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"In all async operations, you can simply return an error object to display it in the form or influence the form behavior."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\n// Async function\nconst onSubmit = async (data) => {\n  try {\n    const response = await fetch('https://api.example.com', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    })\n    const data = await response.json()\n\n    Form.setData('unique-id', data) // Whatever you want to do with the data\n  } catch (error) {\n    return error // Will display the error message in the form\n  }\n\n  // Optionally, you can return an object with these keys, depending your needs\n  return {\n    info: 'Info message',\n    warning: 'Warning message',\n\n    // Force the form to stay in pending state\n    status: 'pending',\n\n    // and either an error\n    error: new Error('Error message'),\n  } as const\n}\n\nfunction Component() {\n  return (\n    <Form.Handler id=\"unique-id\" onSubmit={onSubmit}>\n      ...\n    </Form.Handler>\n  )\n}\n"})})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(a,e)})):a(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-handler-mdx-2cba544a4a377d6ee4c6.js.map