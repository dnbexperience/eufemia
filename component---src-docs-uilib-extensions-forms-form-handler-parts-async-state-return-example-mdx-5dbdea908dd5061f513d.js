"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[96124],{99201:function(n,e,r){r.r(e);var t=r(52322),o=r(45392);function s(n){const e=Object.assign({p:"p",pre:"pre",code:"code"},(0,o.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:"In all async operations, you can simply return an error object to display it in the form or influence the form behavior."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\n// Async function\nconst onSubmit = async (data) => {\n  try {\n    const response = await fetch('https://api.example.com', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    })\n    const data = await response.json()\n\n    Form.setData('unique-id', data) // Whatever you want to do with the data\n  } catch (error) {\n    return error // Will display the error message in the form\n  }\n\n  // Optionally, you can return an object with these keys, depending your needs\n  return {\n    info: 'Info message',\n    warning: 'Warning message',\n\n    // Force the form to stay in pending state\n    status: 'pending',\n\n    // and either an error\n    error: new Error('Error message'),\n  } as const\n}\n\nfunction Component() {\n  return (\n    <Form.Handler id=\"unique-id\" onSubmit={onSubmit}>\n      ...\n    </Form.Handler>\n  )\n}\n"})})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(s,n)})):s(n)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-handler-parts-async-state-return-example-mdx-5dbdea908dd5061f513d.js.map