"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[36134],{67944:function(n,e,r){r.r(e),r.d(e,{default:function(){return F}});var t={};r.r(t),r.d(t,{ErrorMessage:function(){return l},SuccessMessage:function(){return u},WithAWizard:function(){return d}});var o=r(52322),a=r(45392),i=r(46832),s=r(34674);const m=(0,s.createRequest)(),l=()=>(0,o.jsx)(i.Z,{scope:{request:m},noInline:!0,children:"// myFormId can be anything, as long as it's a unique instance\nconst myFormId = () => null\nrender(\n  <Form.Handler\n    id={myFormId}\n    onSubmit={async () => {\n      await request(1000) // Simulate a request\n\n      Form.InfoOverlay.setContent(myFormId, 'error')\n    }}\n  >\n    <Form.InfoOverlay>\n      <Form.Card>\n        <Field.Email />\n        <Form.ButtonRow>\n          <Form.SubmitButton variant=\"send\" />\n          <Button\n            variant=\"secondary\"\n            onClick={() => {\n              Form.InfoOverlay.setContent(myFormId, 'error')\n            }}\n          >\n            Show error\n          </Button>\n        </Form.ButtonRow>\n      </Form.Card>\n    </Form.InfoOverlay>\n  </Form.Handler>,\n)\n"}),u=()=>(0,o.jsx)(i.Z,{scope:{request:m},noInline:!0,children:"// myFormId can be anything, as long as it's a unique instance\nconst myFormId = () => null\nrender(\n  <Form.Handler\n    id={myFormId}\n    onSubmit={async () => {\n      await request(1000) // Simulate a request\n\n      Form.InfoOverlay.setContent(myFormId, 'success')\n    }}\n  >\n    <Form.InfoOverlay>\n      <Form.Card>\n        <Field.Email />\n        <Form.SubmitButton variant=\"send\" />\n      </Form.Card>\n    </Form.InfoOverlay>\n  </Form.Handler>,\n)\n"}),d=()=>{const n=(0,s.createRequest)();return(0,o.jsx)(i.Z,{scope:{request:n},noInline:!0,children:'// myFormId can be anything, as long as it\'s a unique instance\nconst myFormId = () => null\nrender(\n  <Form.Handler\n    id={myFormId}\n    onSubmit={async () => {\n      await request(1000)\n      Form.InfoOverlay.setContent(myFormId, \'success\')\n    }}\n  >\n    <Form.InfoOverlay>\n      <Wizard.Container\n        onStepChange={async () => {\n          await request(1000)\n        }}\n      >\n        <Wizard.Step title="Step 1">\n          <Form.Card>\n            <Field.String path="/someInfo" label="Some information" />\n          </Form.Card>\n          <Wizard.NextButton />\n        </Wizard.Step>\n        <Wizard.Step title="Step 2">\n          <Form.Card>\n            <Field.String path="/more" label="More information" />\n          </Form.Card>\n          <Form.SubmitButton variant="send" />\n        </Wizard.Step>\n      </Wizard.Container>\n    </Form.InfoOverlay>\n  </Form.Handler>,\n)\n'})};function c(n){const e=Object.assign({h2:"h2",h3:"h3"},(0,a.ah)(),n.components);return t||h("Examples",!1),l||h("Examples.ErrorMessage",!0),u||h("Examples.SuccessMessage",!0),d||h("Examples.WithAWizard",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:"Demos"}),"\n",(0,o.jsx)(e.h3,{children:"Error message"}),"\n",(0,o.jsx)(l,{}),"\n",(0,o.jsx)(e.h3,{children:"Success message"}),"\n",(0,o.jsx)(u,{}),"\n",(0,o.jsx)(e.h3,{children:"With a Wizard"}),"\n",(0,o.jsx)(d,{})]})}var F=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(c,n)})):c(n)};function h(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},34674:function(n,e,r){r.r(e),r.d(e,{AsyncChangeBehavior:function(){return m},AsyncSubmitBehavior:function(){return s},Default:function(){return i},WithinOtherComponents:function(){return u},createRequest:function(){return l}});var t=r(46832),o=r(52750),a=r(52322);const i=()=>(0,a.jsx)(t.Z,{children:'<Form.SubmitIndicator state="pending" />\n'}),s=()=>(0,a.jsx)(t.Z,{scope:{createRequest:l,debounceAsync:o.k},noInline:!0,children:'const delay = debounceAsync(async function () {\n  try {\n    const request = createRequest()\n    await request(1000) // Simulate a request\n  } catch (error) {\n    return error\n  }\n})\nrender(\n  <Form.Handler onSubmit={delay}>\n    <Form.Card>\n      <Field.String path="/myField" label="Short label" />\n      <Form.ButtonRow>\n        <Form.SubmitButton />\n        <Button variant="tertiary">Cancel</Button>\n      </Form.ButtonRow>\n    </Form.Card>\n  </Form.Handler>,\n)\n'}),m=()=>(0,a.jsx)(t.Z,{scope:{createRequest:l,debounceAsync:o.k},noInline:!0,children:'const delay = debounceAsync(async function () {\n  try {\n    const request = createRequest()\n    await request(1000) // Simulate a request\n  } catch (error) {\n    return error\n  }\n})\nrender(\n  <Form.Handler onSubmit={delay} onChange={delay}>\n    <Form.Card>\n      <Field.String\n        path="/myField1"\n        label="Label (with async validation)"\n        placeholder="Write something ..."\n        onChangeValidator={delay}\n      />\n      <FieldBlock width="medium">\n        <Field.String\n          path="/myField2"\n          width="stretch"\n          label="This is a long label"\n        />\n      </FieldBlock>\n      <Form.ButtonRow>\n        <Form.SubmitButton />\n        <Button variant="tertiary">Cancel</Button>\n      </Form.ButtonRow>\n    </Form.Card>\n  </Form.Handler>,\n)\n'}),l=()=>{let n,e;const r=r=>new Promise((t=>{e=t,n=setTimeout((()=>{t({hasError:!1})}),r)}));return r.cancel=()=>{var r;null===(r=e)||void 0===r||r({hasError:!0}),clearTimeout(n),n=null},r},u=()=>(0,a.jsx)(t.Z,{children:'<Form.Handler>\n  <Flex.Horizontal align="center">\n    <Form.SubmitButton showIndicator />\n    <Button variant="secondary" icon="chevron_right">\n      Secondary\n      <Form.SubmitIndicator state="pending" />\n    </Button>\n    <Button variant="tertiary">\n      Tertiary\n      <Form.SubmitIndicator state="pending" />\n    </Button>\n    <FormLabel>\n      Label\n      <Form.SubmitIndicator state="pending" />\n    </FormLabel>\n  </Flex.Horizontal>\n</Form.Handler>\n'})}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-info-overlay-demos-mdx-3842c79e778b377ac8f4.js.map