{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-info-overlay-demos-mdx-ab4f7825d1187b04f5db.js","mappings":"yWAKA,MAAMA,GAAUC,EAAAA,EAAAA,iBAEHC,EAAeA,KAC1BC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,MAAA,CACFL,WACAM,UAAA,EAAAC,SAAA,6uBAoCaC,EAAiBA,KAC5BL,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,MAAA,CACFL,WACAM,UAAA,EAAAC,SAAA,4dA0BaE,EAAcA,KACzB,MAAMT,GAAUC,EAAAA,EAAAA,iBAChB,OAAAE,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,MAAA,CACFL,WACAM,UAAA,EAAAC,SAAA,05BAFE,ECzEF,SAASG,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,KAAsBN,EAAMO,YAK/B,OAJKC,GAAUC,EAAqB,YAAY,GAC3CD,GAAuBC,EAAqB,yBAAyB,GACrED,GAAyBC,EAAqB,2BAA2B,GACzED,GAAsBC,EAAqB,wBAAwB,IACjEC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBf,SAAU,EAACJ,EAAAA,EAAAA,KAAKS,EAAYG,GAAI,CAC9BR,SAAU,UACR,MAAMJ,EAAAA,EAAAA,KAAKS,EAAYI,GAAI,CAC7BT,SAAU,kBACR,MAAMJ,EAAAA,EAAAA,KAAKgB,EAAuB,CAAC,GAAI,MAAMhB,EAAAA,EAAAA,KAAKS,EAAYI,GAAI,CACpET,SAAU,oBACR,MAAMJ,EAAAA,EAAAA,KAAKgB,EAAyB,CAAC,GAAI,MAAMhB,EAAAA,EAAAA,KAAKS,EAAYI,GAAI,CACtET,SAAU,kBACR,MAAMJ,EAAAA,EAAAA,KAAKgB,EAAsB,CAAC,KAE1C,CAOA,MANA,SAAoBR,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,KAAsBN,EAAMO,YAC3E,OAAOM,GAAYrB,EAAAA,EAAAA,KAAKqB,EAAWX,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DJ,UAAUJ,EAAAA,EAAAA,KAAKO,EAAmBC,MAC9BD,EAAkBC,EAC1B,EAEA,SAASS,EAAqBK,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,C,4SC7BO,MAAMG,EAAUA,KACrBzB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAG,SAAA,+CAOWsB,EAAsBA,KACjC1B,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,MAAA,CACFJ,gBACA6B,cACA,KAAAxB,UAAA,EAAAC,SAAA,yeAyBawB,EAAsBA,KACjC5B,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,MAAA,CACFJ,gBACA6B,cACA,KAAAxB,UAAA,EAAAC,SAAA,8yBAuCaN,EAAgBA,KAC3B,IAAI+B,EACAC,EAEJ,MAAMC,EAAMC,GACH,IAAIC,SAASC,IAClBJ,EAAiBI,EACjBL,EAAUM,YAAW,KACnBD,EAAQ,CAAEE,UAAU,GAAQ,GAC3BJ,EAAE,IAUT,OANAD,EAAGM,OAAS,KAAO,IAADC,EACF,QAAdA,EAAAR,SAAc,IAAAQ,GAAdA,EAAiB,CAAEF,UAAU,IAC7BG,aAAaV,GACbA,EAAU,IAAI,EAGTE,CAAE,EAGES,EAAwBA,KACnCxC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAG,SAAA,geAuBWqC,EAAeA,KAC1BzC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,kDAAAG,SAAA,2F","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/InfoOverlay/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/InfoOverlay/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/SubmitIndicator/Examples.tsx"],"sourcesContent":["import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { createRequest } from '../SubmitIndicator/Examples'\nimport { Field, Form, Wizard } from '@dnb/eufemia/src/extensions/forms'\nimport { Button } from '@dnb/eufemia/src'\n\nconst request = createRequest()\n\nexport const ErrorMessage = () => {\n  return (\n    <ComponentBox scope={{ request }}>\n      {() => {\n        // myFormId can be anything, as long as it's a unique instance\n        const myFormId = () => null\n\n        return (\n          <Form.Handler\n            id={myFormId}\n            onSubmit={async () => {\n              await request(1000) // Simulate a request\n\n              Form.InfoOverlay.setContent(myFormId, 'error')\n            }}\n          >\n            <Form.InfoOverlay>\n              <Form.Card>\n                <Field.Email />\n                <Form.ButtonRow>\n                  <Form.SubmitButton variant=\"send\" />\n                  <Button\n                    variant=\"secondary\"\n                    onClick={() => {\n                      Form.InfoOverlay.setContent(myFormId, 'error')\n                    }}\n                  >\n                    Show error\n                  </Button>\n                </Form.ButtonRow>\n              </Form.Card>\n            </Form.InfoOverlay>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const SuccessMessage = () => {\n  return (\n    <ComponentBox scope={{ request }}>\n      {() => {\n        // myFormId can be anything, as long as it's a unique instance\n        const myFormId = () => null\n\n        return (\n          <Form.Handler\n            id={myFormId}\n            onSubmit={async () => {\n              await request(1000) // Simulate a request\n\n              Form.InfoOverlay.setContent(myFormId, 'success')\n            }}\n          >\n            <Form.InfoOverlay>\n              <Form.Card>\n                <Field.Email />\n                <Form.SubmitButton variant=\"send\" />\n              </Form.Card>\n            </Form.InfoOverlay>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const WithAWizard = () => {\n  const request = createRequest()\n  return (\n    <ComponentBox scope={{ request }}>\n      {() => {\n        // myFormId can be anything, as long as it's a unique instance\n        const myFormId = () => null\n\n        return (\n          <Form.Handler\n            id={myFormId}\n            onSubmit={async () => {\n              await request(1000)\n              Form.InfoOverlay.setContent(myFormId, 'success')\n            }}\n          >\n            <Form.InfoOverlay>\n              <Wizard.Container\n                onStepChange={async () => {\n                  await request(1000)\n                }}\n              >\n                <Wizard.Step title=\"Step 1\">\n                  <Form.Card>\n                    <Field.String\n                      path=\"/someInfo\"\n                      label=\"Some information\"\n                    />\n                  </Form.Card>\n                  <Wizard.NextButton />\n                </Wizard.Step>\n                <Wizard.Step title=\"Step 2\">\n                  <Form.Card>\n                    <Field.String path=\"/more\" label=\"More information\" />\n                  </Form.Card>\n                  <Form.SubmitButton variant=\"send\" />\n                </Wizard.Step>\n              </Wizard.Container>\n            </Form.InfoOverlay>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.ErrorMessage) _missingMdxReference(\"Examples.ErrorMessage\", true);\n  if (!Examples.SuccessMessage) _missingMdxReference(\"Examples.SuccessMessage\", true);\n  if (!Examples.WithAWizard) _missingMdxReference(\"Examples.WithAWizard\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Error message\"\n    }), \"\\n\", _jsx(Examples.ErrorMessage, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Success message\"\n    }), \"\\n\", _jsx(Examples.SuccessMessage, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With a Wizard\"\n    }), \"\\n\", _jsx(Examples.WithAWizard, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import { Button, Flex, FormLabel } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, FieldBlock, Form } from '@dnb/eufemia/src/extensions/forms'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      <Form.SubmitIndicator state=\"pending\" />\n    </ComponentBox>\n  )\n}\n\nexport const AsyncSubmitBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay}>\n            <Form.Card>\n              <Field.String path=\"/myField\" label=\"Short label\" />\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Form.Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AsyncChangeBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay} onChange={delay}>\n            <Form.Card>\n              <Field.String\n                path=\"/myField1\"\n                label=\"Label (with async validation)\"\n                placeholder=\"Write something ...\"\n                onChangeValidator={delay}\n              />\n              <FieldBlock width=\"medium\">\n                <Field.String\n                  path=\"/myField2\"\n                  width=\"stretch\"\n                  label=\"This is a long label\"\n                />\n              </FieldBlock>\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Form.Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\ntype CreateRequestReturn = Promise<{ hasError: boolean; cancel?: boolean }>\n\nexport const createRequest = () => {\n  let timeout: NodeJS.Timeout | null\n  let resolvePromise: ((value?: unknown) => void) | undefined\n\n  const fn = (t: number): CreateRequestReturn => {\n    return new Promise((resolve) => {\n      resolvePromise = resolve\n      timeout = setTimeout(() => {\n        resolve({ hasError: false })\n      }, t)\n    })\n  }\n\n  fn.cancel = () => {\n    resolvePromise?.({ hasError: true })\n    clearTimeout(timeout)\n    timeout = null\n  }\n\n  return fn\n}\n\nexport const WithinOtherComponents = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Flex.Horizontal align=\"center\">\n          <Form.SubmitButton showIndicator />\n          <Button variant=\"secondary\" icon=\"chevron_right\">\n            Secondary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <Button variant=\"tertiary\">\n            Tertiary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <FormLabel>\n            Label\n            <Form.SubmitIndicator state=\"pending\" />\n          </FormLabel>\n        </Flex.Horizontal>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithinALabel = () => {\n  return (\n    <ComponentBox data-visual-test=\"submit-indicator-with-label\">\n      <Form.Handler>\n        <Form.SubmitIndicator state=\"pending\" showLabel />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n"],"names":["request","createRequest","ErrorMessage","_jsx","ComponentBox","scope","noInline","children","SuccessMessage","WithAWizard","_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error","Default","AsyncSubmitBehavior","debounceAsync","AsyncChangeBehavior","timeout","resolvePromise","fn","t","Promise","resolve","setTimeout","hasError","cancel","_resolvePromise","clearTimeout","WithinOtherComponents","WithinALabel"],"sourceRoot":""}