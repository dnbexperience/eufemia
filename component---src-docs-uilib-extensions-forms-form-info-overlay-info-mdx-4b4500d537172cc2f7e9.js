"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[16604],{97947:function(e,n,s){s.r(n);var o=s(31085),r=s(71184);function t(e){const n=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",ul:"ul",li:"li",h3:"h3",strong:"strong"},(0,r.R)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{children:"Description"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Form.InfoOverlay"})," is used to display an informational message that fully covers the available space. It can show a custom message or content, a ",(0,o.jsx)(n.code,{children:"success"})," message as a receipt, or an ",(0,o.jsx)(n.code,{children:"error"})," message to indicate an issue."]}),"\n",(0,o.jsx)(n.h2,{children:"Usage"}),"\n",(0,o.jsxs)(n.p,{children:["By default the given children will be shown.\nThis can also be achieved by setting ",(0,o.jsx)(n.code,{children:"content={undefined}"})," or by ",(0,o.jsx)(n.code,{children:"Form.InfoOverlay.setContent(myId, undefined)"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nrender(\n  <Form.Handler>\n    <Form.InfoOverlay>visible content</Form.InfoOverlay>\n  </Form.Handler>,\n)\n"})}),"\n",(0,o.jsx)(n.h2,{children:"Display a message"}),"\n",(0,o.jsx)(n.p,{children:"There are two ways to display a message:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Using the ",(0,o.jsx)(n.code,{children:"Form.InfoOverlay.setContent"})," method."]}),"\n",(0,o.jsxs)(n.li,{children:["Using the ",(0,o.jsx)(n.code,{children:"content"})," prop."]}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{children:["Using the ",(0,o.jsx)(n.code,{children:"Form.InfoOverlay.setContent"})," method"]}),"\n",(0,o.jsxs)(n.p,{children:["You can show the success or error message by using the ",(0,o.jsx)(n.code,{children:"Form.InfoOverlay.setContent"})," method:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"Form.InfoOverlay.setContent(myId, <>info content</>)\n// or\nForm.InfoOverlay.setContent(myId, 'success')\n// or\nForm.InfoOverlay.setContent(myId, 'error')\n// or to display the fallback content\nForm.InfoOverlay.setContent(myId, undefined)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["And render the component with an ",(0,o.jsx)(n.code,{children:"id"})," prop:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"<Form.InfoOverlay id={myId}>content</Form.InfoOverlay>\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can call it whenever you need to show the success message. Here is an example of how to use it."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note:"})," the ",(0,o.jsx)(n.code,{children:"id"})," prop is inherited from the ",(0,o.jsx)(n.code,{children:"Form.Handler"})," component in this example."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\n// myFormId can be anything, as long as it's a unique instance\nconst myFormId = () => null\n\nrender(\n  <Form.Handler\n    id={myFormId}\n    onSubmit={async () => {\n      // 1. Send the request\n\n      // 2. Show the success message\n      Form.InfoOverlay.setContent(myFormId, 'success')\n    }}\n  >\n    <Form.InfoOverlay>fallback content</Form.InfoOverlay>\n  </Form.Handler>,\n)\n"})}),"\n",(0,o.jsxs)(n.h3,{children:["Using the ",(0,o.jsx)(n.code,{children:"content"})," prop"]}),"\n",(0,o.jsxs)(n.p,{children:["You can show the success or error message by using the ",(0,o.jsx)(n.code,{children:"content"})," prop:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'<Form.InfoOverlay content={<>info content</>}>fallback content</Form.InfoOverlay>\n<Form.InfoOverlay content="success">fallback content</Form.InfoOverlay>\n<Form.InfoOverlay content="error">fallback content</Form.InfoOverlay>\n'})}),"\n",(0,o.jsxs)(n.h2,{children:["Customization of the ",(0,o.jsx)(n.code,{children:"success"})," and ",(0,o.jsx)(n.code,{children:"error"})," messages"]}),"\n",(0,o.jsxs)(n.p,{children:["You can customize the ",(0,o.jsx)(n.code,{children:"success"})," and ",(0,o.jsx)(n.code,{children:"error"})," messages by using the ",(0,o.jsx)(n.code,{children:"success"})," and ",(0,o.jsx)(n.code,{children:"error"})," props."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"<Form.InfoOverlay\n  success={{\n    title: 'Custom title',\n    description: 'Custom description',\n    buttonText: 'Custom button text',\n    buttonHref: 'http://custom',\n    buttonClickHandler: () => {},\n  }}\n  error={{\n    title: 'Custom title',\n    description: 'Custom description',\n    cancelButton: 'Custom cancel',\n    retryButton: 'Custom retry',\n    retryingText: 'Custom retrying text',\n  }}\n>\n  fallback content\n</Form.InfoOverlay>\n"})}),"\n",(0,o.jsx)(n.h2,{children:"Accessibility"}),"\n",(0,o.jsx)(n.p,{children:"The component will manage focus handling, which is important for screen readers and users using keyboard navigation."})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.R)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(t,e)})):t(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-info-overlay-info-mdx-4b4500d537172cc2f7e9.js.map