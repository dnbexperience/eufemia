"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[17286,36134,84786],{20042:function(n,e,r){r.r(e);var t=r(52322),o=r(45392),s=r(75778),a=r(67944);function i(n){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.default,{}),"\n",(0,t.jsx)(a.default,{})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(i,n)})):i()}},67944:function(n,e,r){r.r(e),r.d(e,{default:function(){return h}});var t={};r.r(t),r.d(t,{ErrorMessage:function(){return l},SuccessMessage:function(){return d},WithAWizard:function(){return m}});var o=r(52322),s=r(45392),a=r(73136),i=r(34674);const c=(0,i.createRequest)(),l=()=>(0,o.jsx)(a.Z,{scope:{request:c},noInline:!0,children:"// myFormId can be anything, as long as it's a unique instance\nconst myFormId = () => null\nrender(\n  <Form.Handler\n    id={myFormId}\n    onSubmit={async () => {\n      await request(1000) // Simulate a request\n\n      Form.InfoOverlay.setContent(myFormId, 'error')\n    }}\n  >\n    <Form.InfoOverlay>\n      <Form.Card>\n        <Field.Email />\n        <Form.ButtonRow>\n          <Form.SubmitButton variant=\"send\" />\n          <Button\n            variant=\"secondary\"\n            onClick={() => {\n              Form.InfoOverlay.setContent(myFormId, 'error')\n            }}\n          >\n            Show error\n          </Button>\n        </Form.ButtonRow>\n      </Form.Card>\n    </Form.InfoOverlay>\n  </Form.Handler>,\n)\n"}),d=()=>(0,o.jsx)(a.Z,{scope:{request:c},noInline:!0,children:"// myFormId can be anything, as long as it's a unique instance\nconst myFormId = () => null\nrender(\n  <Form.Handler\n    id={myFormId}\n    onSubmit={async () => {\n      await request(1000) // Simulate a request\n\n      Form.InfoOverlay.setContent(myFormId, 'success')\n    }}\n  >\n    <Form.InfoOverlay>\n      <Form.Card>\n        <Field.Email />\n        <Form.SubmitButton variant=\"send\" />\n      </Form.Card>\n    </Form.InfoOverlay>\n  </Form.Handler>,\n)\n"}),m=()=>{const n=(0,i.createRequest)();return(0,o.jsx)(a.Z,{scope:{request:n},noInline:!0,children:'// myFormId can be anything, as long as it\'s a unique instance\nconst myFormId = () => null\nrender(\n  <Form.Handler\n    id={myFormId}\n    onSubmit={async () => {\n      await request(1000)\n      Form.InfoOverlay.setContent(myFormId, \'success\')\n    }}\n  >\n    <Form.InfoOverlay>\n      <Wizard.Container\n        onStepChange={async () => {\n          await request(1000)\n        }}\n      >\n        <Wizard.Step title="Step 1">\n          <Form.Card>\n            <Field.String path="/someInfo" label="Some information" />\n          </Form.Card>\n          <Wizard.NextButton />\n        </Wizard.Step>\n        <Wizard.Step title="Step 2">\n          <Form.Card>\n            <Field.String path="/more" label="More information" />\n          </Form.Card>\n          <Form.SubmitButton variant="send" />\n        </Wizard.Step>\n      </Wizard.Container>\n    </Form.InfoOverlay>\n  </Form.Handler>,\n)\n'})};function u(n){const e=Object.assign({h2:"h2",h3:"h3"},(0,s.ah)(),n.components);return t||F("Examples",!1),l||F("Examples.ErrorMessage",!0),d||F("Examples.SuccessMessage",!0),m||F("Examples.WithAWizard",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:"Demos"}),"\n",(0,o.jsx)(e.h3,{children:"Error message"}),"\n",(0,o.jsx)(l,{}),"\n",(0,o.jsx)(e.h3,{children:"Success message"}),"\n",(0,o.jsx)(d,{}),"\n",(0,o.jsx)(e.h3,{children:"With a Wizard"}),"\n",(0,o.jsx)(m,{})]})}var h=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(u,n)})):u(n)};function F(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},75778:function(n,e,r){r.r(e);var t=r(52322),o=r(45392);function s(n){const e=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",ul:"ul",li:"li",h3:"h3",strong:"strong"},(0,o.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:"Description"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"Form.InfoOverlay"})," is used to display an informational message that fully covers the available space. It can show a custom message or content, a ",(0,t.jsx)(e.code,{children:"success"})," message as a receipt, or an ",(0,t.jsx)(e.code,{children:"error"})," message to indicate an issue."]}),"\n",(0,t.jsx)(e.h2,{children:"Usage"}),"\n",(0,t.jsxs)(e.p,{children:["By default the given children will be shown.\nThis can also be achieved by setting ",(0,t.jsx)(e.code,{children:"content={undefined}"})," or by ",(0,t.jsx)(e.code,{children:"Form.InfoOverlay.setContent(myId, undefined)"}),"."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nrender(\n  <Form.Handler>\n    <Form.InfoOverlay>visible content</Form.InfoOverlay>\n  </Form.Handler>,\n)\n"})}),"\n",(0,t.jsx)(e.h2,{children:"Display a message"}),"\n",(0,t.jsx)(e.p,{children:"There are two ways to display a message:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Using the ",(0,t.jsx)(e.code,{children:"Form.InfoOverlay.setContent"})," method."]}),"\n",(0,t.jsxs)(e.li,{children:["Using the ",(0,t.jsx)(e.code,{children:"content"})," prop."]}),"\n"]}),"\n",(0,t.jsxs)(e.h3,{children:["Using the ",(0,t.jsx)(e.code,{children:"Form.InfoOverlay.setContent"})," method"]}),"\n",(0,t.jsxs)(e.p,{children:["You can show the success or error message by using the ",(0,t.jsx)(e.code,{children:"Form.InfoOverlay.setContent"})," method:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"Form.InfoOverlay.setContent(myId, <>info content</>)\n// or\nForm.InfoOverlay.setContent(myId, 'success')\n// or\nForm.InfoOverlay.setContent(myId, 'error')\n// or to display the fallback content\nForm.InfoOverlay.setContent(myId, undefined)\n"})}),"\n",(0,t.jsxs)(e.p,{children:["And render the component with an ",(0,t.jsx)(e.code,{children:"id"})," prop:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"<Form.InfoOverlay id={myId}>content</Form.InfoOverlay>\n"})}),"\n",(0,t.jsx)(e.p,{children:"You can call it whenever you need to show the success message. Here is an example of how to use it."}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Note:"})," the ",(0,t.jsx)(e.code,{children:"id"})," prop is inherited from the ",(0,t.jsx)(e.code,{children:"Form.Handler"})," component in this example."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\n// myFormId can be anything, as long as it's a unique instance\nconst myFormId = () => null\n\nrender(\n  <Form.Handler\n    id={myFormId}\n    onSubmit={async () => {\n      // 1. Send the request\n\n      // 2. Show the success message\n      Form.InfoOverlay.setContent(myFormId, 'success')\n    }}\n  >\n    <Form.InfoOverlay>fallback content</Form.InfoOverlay>\n  </Form.Handler>,\n)\n"})}),"\n",(0,t.jsxs)(e.h3,{children:["Using the ",(0,t.jsx)(e.code,{children:"content"})," prop"]}),"\n",(0,t.jsxs)(e.p,{children:["You can show the success or error message by using the ",(0,t.jsx)(e.code,{children:"content"})," prop:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:'<Form.InfoOverlay content={<>info content</>}>fallback content</Form.InfoOverlay>\n<Form.InfoOverlay content="success">fallback content</Form.InfoOverlay>\n<Form.InfoOverlay content="error">fallback content</Form.InfoOverlay>\n'})}),"\n",(0,t.jsxs)(e.h2,{children:["Customization of the ",(0,t.jsx)(e.code,{children:"success"})," and ",(0,t.jsx)(e.code,{children:"error"})," messages"]}),"\n",(0,t.jsxs)(e.p,{children:["You can customize the ",(0,t.jsx)(e.code,{children:"success"})," and ",(0,t.jsx)(e.code,{children:"error"})," messages by using the ",(0,t.jsx)(e.code,{children:"success"})," and ",(0,t.jsx)(e.code,{children:"error"})," props."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"<Form.InfoOverlay\n  success={{\n    title: 'Custom title',\n    description: 'Custom description',\n    buttonText: 'Custom button text',\n    buttonHref: 'http://custom',\n    buttonClickHandler: () => {},\n  }}\n  error={{\n    title: 'Custom title',\n    description: 'Custom description',\n    cancelButton: 'Custom cancel',\n    retryButton: 'Custom retry',\n    retryingText: 'Custom retrying text',\n  }}\n>\n  fallback content\n</Form.InfoOverlay>\n"})}),"\n",(0,t.jsx)(e.h2,{children:"Accessibility"}),"\n",(0,t.jsx)(e.p,{children:"The component will manage focus handling, which is important for screen readers and users using keyboard navigation."})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(s,n)})):s(n)}},34674:function(n,e,r){r.r(e),r.d(e,{AsyncChangeBehavior:function(){return c},AsyncSubmitBehavior:function(){return i},Default:function(){return a},WithinALabel:function(){return m},WithinOtherComponents:function(){return d},createRequest:function(){return l}});var t=r(73136),o=r(52750),s=r(52322);const a=()=>(0,s.jsx)(t.Z,{children:'<Form.SubmitIndicator state="pending" />\n'}),i=()=>(0,s.jsx)(t.Z,{scope:{createRequest:l,debounceAsync:o.k},noInline:!0,children:'const delay = debounceAsync(async function () {\n  try {\n    const request = createRequest()\n    await request(1000) // Simulate a request\n  } catch (error) {\n    return error\n  }\n})\nrender(\n  <Form.Handler onSubmit={delay}>\n    <Form.Card>\n      <Field.String path="/myField" label="Short label" />\n      <Form.ButtonRow>\n        <Form.SubmitButton />\n        <Button variant="tertiary">Cancel</Button>\n      </Form.ButtonRow>\n    </Form.Card>\n  </Form.Handler>,\n)\n'}),c=()=>(0,s.jsx)(t.Z,{scope:{createRequest:l,debounceAsync:o.k},noInline:!0,children:'const delay = debounceAsync(async function () {\n  try {\n    const request = createRequest()\n    await request(1000) // Simulate a request\n  } catch (error) {\n    return error\n  }\n})\nrender(\n  <Form.Handler onSubmit={delay} onChange={delay}>\n    <Form.Card>\n      <Field.String\n        path="/myField1"\n        label="Label (with async validation)"\n        placeholder="Write something ..."\n        onChangeValidator={delay}\n      />\n      <FieldBlock width="medium">\n        <Field.String\n          path="/myField2"\n          width="stretch"\n          label="This is a long label"\n        />\n      </FieldBlock>\n      <Form.ButtonRow>\n        <Form.SubmitButton />\n        <Button variant="tertiary">Cancel</Button>\n      </Form.ButtonRow>\n    </Form.Card>\n  </Form.Handler>,\n)\n'}),l=()=>{let n,e;const r=r=>new Promise((t=>{e=t,n=setTimeout((()=>{t({hasError:!1})}),r)}));return r.cancel=()=>{var r;null===(r=e)||void 0===r||r({hasError:!0}),clearTimeout(n),n=null},r},d=()=>(0,s.jsx)(t.Z,{children:'<Form.Handler>\n  <Flex.Horizontal align="center">\n    <Form.SubmitButton showIndicator />\n    <Button variant="secondary" icon="chevron_right">\n      Secondary\n      <Form.SubmitIndicator state="pending" />\n    </Button>\n    <Button variant="tertiary">\n      Tertiary\n      <Form.SubmitIndicator state="pending" />\n    </Button>\n    <FormLabel>\n      Label\n      <Form.SubmitIndicator state="pending" />\n    </FormLabel>\n  </Flex.Horizontal>\n</Form.Handler>\n'}),m=()=>(0,s.jsx)(t.Z,{"data-visual-test":"submit-indicator-with-label",children:'<Form.Handler>\n  <Form.SubmitIndicator state="pending" showLabel />\n</Form.Handler>\n'})}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-info-overlay-mdx-49feb6931dacc54b7eb3.js.map