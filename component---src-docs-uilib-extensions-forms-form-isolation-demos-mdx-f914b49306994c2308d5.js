"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[94659],{1336:function(n,e,t){t.r(e),t.d(e,{default:function(){return F}});var o={};t.r(o),t.d(o,{CommitHandleRef:function(){return s},InsideSection:function(){return m},PreventUncommittedChanges:function(){return c},TransformCommitData:function(){return d},UpdateDataReference:function(){return u},UsingCommitButton:function(){return l}});var a=t(31085),r=t(71184),i=(t(14041),t(26357));const l=()=>(0,a.jsx)(i.A,{children:'<Form.Handler\n  onSubmit={(data) => console.log(\'onSubmit\', data)}\n  onChange={(data) => console.log(\'Regular onChange:\', data)}\n>\n  <Flex.Stack>\n    <Form.Isolation\n      resetDataAfterCommit\n      onChange={(data) => console.log(\'Isolated onChange:\', data)}\n    >\n      <Flex.Stack>\n        <Field.String required label="Isolated" path="/isolated" />\n        <Form.Isolation.CommitButton text="Commit" />\n      </Flex.Stack>\n    </Form.Isolation>\n\n    <Field.String\n      required\n      label="Committed from isolation"\n      path="/isolated"\n    />\n    <Field.String required label="Outside of isolation" path="/regular" />\n\n    <Form.SubmitButton />\n  </Flex.Stack>\n</Form.Handler>\n'}),s=()=>(0,a.jsx)(i.A,{noInline:!0,children:'const MyForm = () => {\n  const commitHandleRef = React.useRef(null)\n  return (\n    <>\n      <Form.Handler\n        bottom="large"\n        data={{\n          contactPersons: [\n            {\n              title: \'Hanne\',\n              value: \'hanne\',\n            },\n          ],\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Ny hovedkontaktperson</Form.SubHeading>\n\n          <HeightAnimation>\n            <Field.Selection variant="radio" dataPath="/contactPersons" />\n          </HeightAnimation>\n\n          <Form.Isolation\n            commitHandleRef={commitHandleRef}\n            transformOnCommit={(isolatedData, handlerData) => {\n              // Because of missing TypeScript support\n              const contactPersons = handlerData[\'contactPersons\']\n              const newPerson = isolatedData[\'newPerson\']\n              const value = newPerson.title.toLowerCase()\n              const transformedData = {\n                ...handlerData,\n                contactPersons: [\n                  ...contactPersons,\n                  {\n                    ...newPerson,\n                    value,\n                  },\n                ],\n              }\n              return transformedData\n            }}\n          >\n            <Flex.Stack>\n              <Form.Section path="/newPerson">\n                <Field.Name.First required path="/title" />\n              </Form.Section>\n            </Flex.Stack>\n          </Form.Isolation>\n          <Tools.Log />\n        </Form.Card>\n      </Form.Handler>\n\n      <button\n        onClick={() => {\n          commitHandleRef.current()\n        }}\n      >\n        Commit from outside of handler\n      </button>\n    </>\n  )\n}\nrender(<MyForm />)\n'}),d=()=>(0,a.jsx)(i.A,{noInline:!0,children:"const MyForm = () => {\n  return (\n    <Form.Handler\n      onChange={console.log}\n      defaultData={{\n        contactPersons: [\n          {\n            title: 'Hanne',\n            value: 'hanne',\n          },\n        ],\n        mySelection: 'hanne',\n      }}\n    >\n      <Form.Card>\n        <Form.SubHeading>Legg til ny hovedkontaktperson</Form.SubHeading>\n\n        <HeightAnimation>\n          <Field.Selection\n            variant=\"radio\"\n            path=\"/mySelection\"\n            dataPath=\"/contactPersons\"\n          >\n            <Field.Option title=\"Annen person\" value=\"other\" />\n          </Field.Selection>\n        </HeightAnimation>\n\n        <Form.Visibility\n          visibleWhen={{\n            path: '/mySelection',\n            hasValue: 'other',\n          }}\n          animate\n        >\n          <Flex.Stack>\n            <Form.SubHeading>Ny hovedkontaktperson</Form.SubHeading>\n\n            <Form.Isolation\n              transformOnCommit={(isolatedData, handlerData) => {\n                // Because of missing TypeScript support\n                const contactPersons = handlerData['contactPersons']\n                const newPerson = isolatedData['newPerson']\n                return {\n                  ...handlerData,\n                  contactPersons: [\n                    ...contactPersons,\n                    {\n                      ...newPerson,\n                      value: newPerson.title.toLowerCase(),\n                    },\n                  ],\n                }\n              }}\n              onCommit={(data, { clearData }) => {\n                clearData()\n              }}\n              resetDataAfterCommit\n            >\n              <Flex.Stack>\n                <Form.Section path=\"/newPerson\">\n                  <Field.Name.First required path=\"/title\" />\n                </Form.Section>\n\n                <Form.Isolation.CommitButton />\n              </Flex.Stack>\n            </Form.Isolation>\n          </Flex.Stack>\n        </Form.Visibility>\n      </Form.Card>\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n"}),m=()=>(0,a.jsx)(i.A,{children:'<Form.Handler\n  defaultData={{\n    mySection: {\n      isolated: \'Isolated value defined outside\',\n      regular: \'Outer regular value\',\n    },\n  }}\n  onChange={(data) => {\n    console.log(\'Outer onChange:\', data)\n  }}\n>\n  <Form.Section path="/mySection">\n    <Flex.Stack>\n      <Form.Isolation\n        defaultData={{\n          isolated: \'The real initial "isolated" value\',\n        }}\n        onPathChange={(path, value) => {\n          console.log(\'Isolated onChange:\', path, value)\n        }}\n        onCommit={(data) => console.log(\'onCommit:\', data)}\n        resetDataAfterCommit\n      >\n        <Flex.Stack>\n          <Field.String label="Isolated" path="/isolated" required />\n          <Form.Isolation.CommitButton />\n        </Flex.Stack>\n      </Form.Isolation>\n\n      <Field.String label="Synced" path="/isolated" />\n      <Field.String label="Regular" path="/regular" required />\n\n      <Form.SubmitButton />\n    </Flex.Stack>\n  </Form.Section>\n</Form.Handler>\n'}),c=()=>(0,a.jsx)(i.A,{children:'<Form.Handler onSubmit={async (data) => console.log(\'onSubmit\', data)}>\n  <Flex.Stack>\n    <Form.Isolation preventUncommittedChanges resetDataAfterCommit>\n      <Flex.Stack>\n        <Field.String required label="Isolated" path="/isolated" />\n\n        <Flex.Horizontal>\n          <Form.Isolation.CommitButton />\n          <Form.Isolation.ResetButton showWhen="uncommittedChangeDetected" />\n        </Flex.Horizontal>\n      </Flex.Stack>\n    </Form.Isolation>\n\n    <Form.SubmitButton />\n\n    <Tools.Log />\n  </Flex.Stack>\n</Form.Handler>\n'}),u=()=>(0,a.jsx)(i.A,{noInline:!0,children:"const dataReference = Form.Isolation.createDataReference()\nconst SetDelayedData = () => {\n  const { update } = Form.useData()\n  React.useEffect(() => {\n    setTimeout(() => {\n      update('/isolated', 'With a delayed default value')\n      dataReference.refresh() // <-- refresh the data reference\n    }, 1000)\n  }, [update])\n  return null\n}\nrender(\n  <Form.Handler onSubmit={async (data) => console.log('onSubmit', data)}>\n    <Flex.Stack>\n      <Form.Isolation\n        preventUncommittedChanges\n        resetDataAfterCommit\n        dataReference={dataReference}\n      >\n        <SetDelayedData />\n        <Flex.Stack>\n          <Field.String required label=\"Isolated\" path=\"/isolated\" />\n\n          <Flex.Horizontal>\n            <Form.Isolation.CommitButton />\n            <Form.Isolation.ResetButton showConfirmDialog={false} />\n          </Flex.Horizontal>\n        </Flex.Stack>\n      </Form.Isolation>\n\n      <Form.SubmitButton />\n\n      <Tools.Log />\n    </Flex.Stack>\n  </Form.Handler>,\n)\n"});function h(n){const e=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code"},(0,r.R)(),n.components);return o||p("Examples",!1),s||p("Examples.CommitHandleRef",!0),m||p("Examples.InsideSection",!0),c||p("Examples.PreventUncommittedChanges",!0),d||p("Examples.TransformCommitData",!0),u||p("Examples.UpdateDataReference",!0),l||p("Examples.UsingCommitButton",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{children:"Demos"}),"\n",(0,a.jsx)(e.h3,{children:"Transform data on commit"}),"\n",(0,a.jsx)(d,{}),"\n",(0,a.jsx)(e.h3,{children:"Using the CommitButton"}),"\n",(0,a.jsx)(l,{}),"\n",(0,a.jsx)(e.h3,{children:"Using commitHandleRef"}),"\n",(0,a.jsx)(s,{}),"\n",(0,a.jsx)(e.h3,{children:"Inside a section"}),"\n",(0,a.jsxs)(e.p,{children:["This example has a ",(0,a.jsx)(e.code,{children:"defaultValue"})," both on the Form.Handler and the Form.Isolation."]}),"\n",(0,a.jsxs)(e.p,{children:["When no ",(0,a.jsx)(e.code,{children:"defaultValue"})," is set on the Form.Isolation (inner context), the default value from Form.Handler (outer context) is used for the initial value."]}),"\n",(0,a.jsxs)(e.p,{children:['When pressing the "Legg til / Add"-button, the default value from Form.Isolation is inserted again, because ',(0,a.jsx)(e.code,{children:"resetDataAfterCommit"})," is set to ",(0,a.jsx)(e.code,{children:"true"}),"."]}),"\n",(0,a.jsx)(m,{}),"\n",(0,a.jsx)(e.h3,{children:"Prevent uncommitted changes"}),"\n",(0,a.jsxs)(e.p,{children:["This example uses the ",(0,a.jsx)(e.code,{children:"preventUncommittedChanges"})," property to display an error message if the user has made changes and attempts to submit the form."]}),"\n",(0,a.jsx)(e.p,{children:"Try entering something in the input field, then submit the form. An error message will appear to indicate that changes must be committed first."}),"\n",(0,a.jsx)(c,{}),"\n",(0,a.jsx)(e.h3,{children:"Update the data reference"}),"\n",(0,a.jsx)(e.p,{children:"This example shows how to update the data reference at a later point in time."}),"\n",(0,a.jsx)(u,{})]})}var F=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,r.R)(),n.components);return e?(0,a.jsx)(e,Object.assign({},n,{children:(0,a.jsx)(h,n)})):h(n)};function p(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-isolation-demos-mdx-f914b49306994c2308d5.js.map