{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-isolation-demos-mdx-f914b49306994c2308d5.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Isolation/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Isolation/demos.mdx"],"sourcesContent":["import React from 'react'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Flex, HeightAnimation } from '@dnb/eufemia/src'\nimport { Field, Form, Tools } from '@dnb/eufemia/src/extensions/forms'\n\nexport const UsingCommitButton = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        onSubmit={(data) => console.log('onSubmit', data)}\n        onChange={(data) => console.log('Regular onChange:', data)}\n      >\n        <Flex.Stack>\n          <Form.Isolation\n            resetDataAfterCommit\n            onChange={(data) => console.log('Isolated onChange:', data)}\n          >\n            <Flex.Stack>\n              <Field.String required label=\"Isolated\" path=\"/isolated\" />\n              <Form.Isolation.CommitButton text=\"Commit\" />\n            </Flex.Stack>\n          </Form.Isolation>\n\n          <Field.String\n            required\n            label=\"Committed from isolation\"\n            path=\"/isolated\"\n          />\n          <Field.String\n            required\n            label=\"Outside of isolation\"\n            path=\"/regular\"\n          />\n\n          <Form.SubmitButton />\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const CommitHandleRef = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyForm = () => {\n          const commitHandleRef = React.useRef(null)\n\n          return (\n            <>\n              <Form.Handler\n                bottom=\"large\"\n                data={{\n                  contactPersons: [{ title: 'Hanne', value: 'hanne' }],\n                }}\n              >\n                <Form.Card>\n                  <Form.SubHeading>Ny hovedkontaktperson</Form.SubHeading>\n\n                  <HeightAnimation>\n                    <Field.Selection\n                      variant=\"radio\"\n                      dataPath=\"/contactPersons\"\n                    />\n                  </HeightAnimation>\n\n                  <Form.Isolation\n                    commitHandleRef={commitHandleRef}\n                    transformOnCommit={(isolatedData, handlerData) => {\n                      // Because of missing TypeScript support\n                      const contactPersons = handlerData['contactPersons']\n                      const newPerson = isolatedData['newPerson']\n\n                      const value = newPerson.title.toLowerCase()\n                      const transformedData = {\n                        ...handlerData,\n                        contactPersons: [\n                          ...contactPersons,\n                          {\n                            ...newPerson,\n                            value,\n                          },\n                        ],\n                      }\n\n                      return transformedData\n                    }}\n                  >\n                    <Flex.Stack>\n                      <Form.Section path=\"/newPerson\">\n                        <Field.Name.First required path=\"/title\" />\n                      </Form.Section>\n                    </Flex.Stack>\n                  </Form.Isolation>\n                  <Tools.Log />\n                </Form.Card>\n              </Form.Handler>\n\n              <button\n                onClick={() => {\n                  commitHandleRef.current()\n                }}\n              >\n                Commit from outside of handler\n              </button>\n            </>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const TransformCommitData = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyForm = () => {\n          return (\n            <Form.Handler\n              onChange={console.log}\n              defaultData={{\n                contactPersons: [{ title: 'Hanne', value: 'hanne' }],\n                mySelection: 'hanne',\n              }}\n            >\n              <Form.Card>\n                <Form.SubHeading>\n                  Legg til ny hovedkontaktperson\n                </Form.SubHeading>\n\n                <HeightAnimation>\n                  <Field.Selection\n                    variant=\"radio\"\n                    path=\"/mySelection\"\n                    dataPath=\"/contactPersons\"\n                  >\n                    <Field.Option title=\"Annen person\" value=\"other\" />\n                  </Field.Selection>\n                </HeightAnimation>\n\n                <Form.Visibility\n                  visibleWhen={{\n                    path: '/mySelection',\n                    hasValue: 'other',\n                  }}\n                  animate\n                >\n                  <Flex.Stack>\n                    <Form.SubHeading>\n                      Ny hovedkontaktperson\n                    </Form.SubHeading>\n\n                    <Form.Isolation\n                      transformOnCommit={(isolatedData, handlerData) => {\n                        // Because of missing TypeScript support\n                        const contactPersons =\n                          handlerData['contactPersons']\n                        const newPerson = isolatedData['newPerson']\n\n                        return {\n                          ...handlerData,\n                          contactPersons: [\n                            ...contactPersons,\n                            {\n                              ...newPerson,\n                              value: newPerson.title.toLowerCase(),\n                            },\n                          ],\n                        }\n                      }}\n                      onCommit={(data, { clearData }) => {\n                        clearData()\n                      }}\n                      resetDataAfterCommit\n                    >\n                      <Flex.Stack>\n                        <Form.Section path=\"/newPerson\">\n                          <Field.Name.First required path=\"/title\" />\n                        </Form.Section>\n\n                        <Form.Isolation.CommitButton />\n                      </Flex.Stack>\n                    </Form.Isolation>\n                  </Flex.Stack>\n                </Form.Visibility>\n              </Form.Card>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const InsideSection = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        defaultData={{\n          mySection: {\n            isolated: 'Isolated value defined outside',\n            regular: 'Outer regular value',\n          },\n        }}\n        onChange={(data) => {\n          console.log('Outer onChange:', data)\n        }}\n      >\n        <Form.Section path=\"/mySection\">\n          <Flex.Stack>\n            <Form.Isolation\n              defaultData={{\n                isolated: 'The real initial \"isolated\" value',\n              }}\n              onPathChange={(path, value) => {\n                console.log('Isolated onChange:', path, value)\n              }}\n              onCommit={(data) => console.log('onCommit:', data)}\n              resetDataAfterCommit\n            >\n              <Flex.Stack>\n                <Field.String label=\"Isolated\" path=\"/isolated\" required />\n                <Form.Isolation.CommitButton />\n              </Flex.Stack>\n            </Form.Isolation>\n\n            <Field.String label=\"Synced\" path=\"/isolated\" />\n            <Field.String label=\"Regular\" path=\"/regular\" required />\n\n            <Form.SubmitButton />\n          </Flex.Stack>\n        </Form.Section>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const PreventUncommittedChanges = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        onSubmit={async (data) => console.log('onSubmit', data)}\n      >\n        <Flex.Stack>\n          <Form.Isolation preventUncommittedChanges resetDataAfterCommit>\n            <Flex.Stack>\n              <Field.String required label=\"Isolated\" path=\"/isolated\" />\n\n              <Flex.Horizontal>\n                <Form.Isolation.CommitButton />\n                <Form.Isolation.ResetButton showWhen=\"uncommittedChangeDetected\" />\n              </Flex.Horizontal>\n            </Flex.Stack>\n          </Form.Isolation>\n\n          <Form.SubmitButton />\n\n          <Tools.Log />\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const UpdateDataReference = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const dataReference = Form.Isolation.createDataReference()\n\n        const SetDelayedData = () => {\n          const { update } = Form.useData()\n\n          React.useEffect(() => {\n            setTimeout(() => {\n              update('/isolated', 'With a delayed default value')\n              dataReference.refresh() // <-- refresh the data reference\n            }, 1000)\n          }, [update])\n\n          return null\n        }\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n          >\n            <Flex.Stack>\n              <Form.Isolation\n                preventUncommittedChanges\n                resetDataAfterCommit\n                dataReference={dataReference}\n              >\n                <SetDelayedData />\n                <Flex.Stack>\n                  <Field.String\n                    required\n                    label=\"Isolated\"\n                    path=\"/isolated\"\n                  />\n\n                  <Flex.Horizontal>\n                    <Form.Isolation.CommitButton />\n                    <Form.Isolation.ResetButton\n                      showConfirmDialog={false}\n                    />\n                  </Flex.Horizontal>\n                </Flex.Stack>\n              </Form.Isolation>\n\n              <Form.SubmitButton />\n\n              <Tools.Log />\n            </Flex.Stack>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.CommitHandleRef) _missingMdxReference(\"Examples.CommitHandleRef\", true);\n  if (!Examples.InsideSection) _missingMdxReference(\"Examples.InsideSection\", true);\n  if (!Examples.PreventUncommittedChanges) _missingMdxReference(\"Examples.PreventUncommittedChanges\", true);\n  if (!Examples.TransformCommitData) _missingMdxReference(\"Examples.TransformCommitData\", true);\n  if (!Examples.UpdateDataReference) _missingMdxReference(\"Examples.UpdateDataReference\", true);\n  if (!Examples.UsingCommitButton) _missingMdxReference(\"Examples.UsingCommitButton\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Transform data on commit\"\n    }), \"\\n\", _jsx(Examples.TransformCommitData, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Using the CommitButton\"\n    }), \"\\n\", _jsx(Examples.UsingCommitButton, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Using commitHandleRef\"\n    }), \"\\n\", _jsx(Examples.CommitHandleRef, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inside a section\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This example has a \", _jsx(_components.code, {\n        children: \"defaultValue\"\n      }), \" both on the Form.Handler and the Form.Isolation.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When no \", _jsx(_components.code, {\n        children: \"defaultValue\"\n      }), \" is set on the Form.Isolation (inner context), the default value from Form.Handler (outer context) is used for the initial value.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When pressing the \\\"Legg til / Add\\\"-button, the default value from Form.Isolation is inserted again, because \", _jsx(_components.code, {\n        children: \"resetDataAfterCommit\"\n      }), \" is set to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Examples.InsideSection, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Prevent uncommitted changes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This example uses the \", _jsx(_components.code, {\n        children: \"preventUncommittedChanges\"\n      }), \" property to display an error message if the user has made changes and attempts to submit the form.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Try entering something in the input field, then submit the form. An error message will appear to indicate that changes must be committed first.\"\n    }), \"\\n\", _jsx(Examples.PreventUncommittedChanges, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Update the data reference\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This example shows how to update the data reference at a later point in time.\"\n    }), \"\\n\", _jsx(Examples.UpdateDataReference, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["UsingCommitButton","_jsx","ComponentBox","children","CommitHandleRef","noInline","TransformCommitData","InsideSection","PreventUncommittedChanges","UpdateDataReference","_createMdxContent","props","_components","Object","assign","h2","h3","p","code","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error"],"sourceRoot":""}