"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[23590,59587,68279],{80003:function(e,n,o){o.r(n);var t=o(52322),r=o(45392),a=o(75681),s=o(49259);function i(e){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.default,{}),"\n",(0,t.jsx)(s.default,{})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(i,e)})):i()}},49259:function(e,n,o){o.r(n),o.d(n,{default:function(){return d}});var t={};o.r(t),o.d(t,{UsingCommitButton:function(){return i}});var r=o(52322),a=o(45392),s=o(64368);const i=()=>(0,r.jsx)(s.Z,{children:'<Form.Handler\n  onSubmit={(data) => console.log(\'onSubmit\', data)}\n  onChange={(data) => console.log(\'Regular onChange:\', data)}\n>\n  <Flex.Stack>\n    <Form.Isolation\n      onChange={(data) => console.log(\'Isolated onChange:\', data)}\n    >\n      <Flex.Stack>\n        <Field.String required label="Isolated" path="/isolated" />\n\n        <Flex.Horizontal>\n          <Form.Isolation.CommitButton text="Commit" />\n        </Flex.Horizontal>\n      </Flex.Stack>\n    </Form.Isolation>\n\n    <Field.String\n      required\n      label="Commited from isolation"\n      path="/isolated"\n    />\n    <Field.String required label="Outside of isolation" path="/regular" />\n\n    <Form.SubmitButton />\n  </Flex.Stack>\n</Form.Handler>\n'});function l(e){const n=Object.assign({h2:"h2",h3:"h3"},(0,a.ah)(),e.components);return t||c("Examples",!1),i||c("Examples.UsingCommitButton",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{children:"Demos"}),"\n",(0,r.jsx)(n.h3,{children:"Using the CommitButton"}),"\n",(0,r.jsx)(i,{})]})}var d=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(l,e)})):l(e)};function c(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},75681:function(e,n,o){o.r(n);var t=o(52322),r=o(45392);function a(e){const n=Object.assign({h2:"h2",p:"p",code:"code",a:"a",h3:"h3",ul:"ul",li:"li",pre:"pre"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{children:"Description"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Form.Isolation"})," lets you isolate parts of your form so data and validations are not shared between the ",(0,t.jsx)(n.code,{children:"Form.Handler"})," until you want to."]}),"\n",(0,t.jsxs)(n.p,{children:["Its a provider that lets you provide a ",(0,t.jsx)(n.code,{children:"schema"})," or ",(0,t.jsx)(n.code,{children:"data"})," very similar to what the ",(0,t.jsx)(n.a,{href:"/uilib/extensions/forms/Form/Handler/",children:"Form.Handler"})," component does."]}),"\n",(0,t.jsx)(n.h3,{children:"Good to know"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["It needs to be used inside of a ",(0,t.jsx)(n.code,{children:"Form.Handler"})," component."]}),"\n",(0,t.jsxs)(n.li,{children:["All fields inside needs to validate successfully before the isolated data can be commited, like the ",(0,t.jsx)(n.code,{children:"Form.Handler"})," does before it submits."]}),"\n",(0,t.jsxs)(n.li,{children:["Input fields are prevented from submitting the form when pressing enter. Pressing enter on input fields will commit the isolated data to the ",(0,t.jsx)(n.code,{children:"Form.Handler"})," context instead."]}),"\n",(0,t.jsxs)(n.li,{children:["You can provide a ",(0,t.jsx)(n.code,{children:"schema"}),", ",(0,t.jsx)(n.code,{children:"data"})," or ",(0,t.jsx)(n.code,{children:"defaultData"})," like you would do with the ",(0,t.jsx)(n.code,{children:"Form.Handler"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["You can also provide ",(0,t.jsx)(n.code,{children:"data"})," or ",(0,t.jsx)(n.code,{children:"defaultData"})," to the ",(0,t.jsx)(n.code,{children:"Form.Handler"}),", defining the data that will be used for the isolated data."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onChange"})," on the ",(0,t.jsx)(n.code,{children:"Form.Handler"})," will be called when the isolated data gets commited."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onChange"})," on the ",(0,t.jsx)(n.code,{children:"Form.Isolation"})," will be called on every change of the isolated data. Use ",(0,t.jsx)(n.code,{children:"onCommit"})," to get the data that gets commited."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Form, Field } from \'@dnb/eufemia/extensions/forms\'\n\nexport function MyForm(props) {\n  return (\n    <Form.Handler\n      defaultData={{ isolated: \'Isolated\', regular: \'Regular\' }}\n    >\n      <Form.Isolation>\n        <Field.String label="Isolated" path="/isolated" />\n        <Form.Isolation.CommitButton />\n      </Form.Isolation>\n\n      <Field.String label="Regular" path="/regular" />\n      <Form.SubmitButton />\n    </Form.Handler>\n  )\n}\n'})}),"\n",(0,t.jsx)(n.h2,{children:"Commit the data to the form"}),"\n",(0,t.jsxs)(n.p,{children:["You can either use the ",(0,t.jsx)(n.code,{children:"Form.Isolation.CommitButton"})," or provide a custom ref handler you can use (call) when you want to commit the data to the ",(0,t.jsx)(n.code,{children:"Form.Handler"})," context:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Form, Field, JSONSchema } from \'@dnb/eufemia/extensions/forms\'\n\nfunction MyForm() {\n  const commitHandleRef = React.useRef<() => void>()\n\n  return (\n    <Form.Handler>\n      <Form.Isolation commitHandleRef={commitHandleRef}>\n        <Field.PhoneNumber path="/phoneNumber" />\n        <Button text="Submit" onClick={commitHandleRef.current} />\n      </Form.Isolation>\n    </Form.Handler>\n  )\n}\n\nrender(<MyForm />)\n'})}),"\n",(0,t.jsx)(n.h2,{children:"Schema support"}),"\n",(0,t.jsxs)(n.p,{children:["You can also use a ",(0,t.jsx)(n.code,{children:"schema"})," to define the properties of the nested fields:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Form, Field, JSONSchema } from '@dnb/eufemia/extensions/forms'\n\nconst isolatedSchema: JSONSchema = {\n  type: 'object',\n  properties: {\n    phoneNumber: {\n      type: 'string',\n      pattern: '^[0-9]{10}$',\n    },\n  },\n  required: ['phoneNumber'],\n}\n\nrender(\n  <Form.Handler>\n    <Form.Isolation schema={isolatedSchema}>\n      <Field.PhoneNumber path=\"/phoneNumber\" />\n    </Form.Isolation>\n  </Form.Handler>,\n)\n"})})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(a,e)})):a(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-isolation-mdx-1b83aa3c512e5511c2d3.js.map