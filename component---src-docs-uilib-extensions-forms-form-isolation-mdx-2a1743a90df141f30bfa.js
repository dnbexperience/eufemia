"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[10424,29125,94659],{1336:function(e,n,t){t.r(n),t.d(n,{default:function(){return p}});var o={};t.r(o),t.d(o,{CommitHandleRef:function(){return l},InsideSection:function(){return m},PreventUncommittedChanges:function(){return c},TransformCommitData:function(){return d},UpdateDataReference:function(){return h},UsingCommitButton:function(){return s}});var r=t(31085),a=t(71184),i=(t(14041),t(32065));const s=()=>(0,r.jsx)(i.A,{children:'<Form.Handler\n  onSubmit={(data) => console.log(\'onSubmit\', data)}\n  onChange={(data) => console.log(\'Regular onChange:\', data)}\n>\n  <Flex.Stack>\n    <Form.Isolation\n      resetDataAfterCommit\n      onChange={(data) => console.log(\'Isolated onChange:\', data)}\n    >\n      <Flex.Stack>\n        <Field.String required label="Isolated" path="/isolated" />\n        <Form.Isolation.CommitButton text="Commit" />\n      </Flex.Stack>\n    </Form.Isolation>\n\n    <Field.String\n      required\n      label="Committed from isolation"\n      path="/isolated"\n    />\n    <Field.String required label="Outside of isolation" path="/regular" />\n\n    <Form.SubmitButton />\n  </Flex.Stack>\n</Form.Handler>\n'}),l=()=>(0,r.jsx)(i.A,{noInline:!0,children:'const MyForm = () => {\n  const commitHandleRef = React.useRef(null)\n  return (\n    <>\n      <Form.Handler\n        bottom="large"\n        data={{\n          contactPersons: [\n            {\n              title: \'Hanne\',\n              value: \'hanne\',\n            },\n          ],\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Ny hovedkontaktperson</Form.SubHeading>\n\n          <HeightAnimation>\n            <Field.Selection variant="radio" dataPath="/contactPersons" />\n          </HeightAnimation>\n\n          <Form.Isolation\n            commitHandleRef={commitHandleRef}\n            transformOnCommit={(isolatedData, handlerData) => {\n              // Because of missing TypeScript support\n              const contactPersons = handlerData[\'contactPersons\']\n              const newPerson = isolatedData[\'newPerson\']\n              const value = newPerson.title.toLowerCase()\n              const transformedData = {\n                ...handlerData,\n                contactPersons: [\n                  ...contactPersons,\n                  {\n                    ...newPerson,\n                    value,\n                  },\n                ],\n              }\n              return transformedData\n            }}\n          >\n            <Flex.Stack>\n              <Form.Section path="/newPerson">\n                <Field.Name.First required path="/title" />\n              </Form.Section>\n            </Flex.Stack>\n          </Form.Isolation>\n          <Tools.Log />\n        </Form.Card>\n      </Form.Handler>\n\n      <button\n        onClick={() => {\n          commitHandleRef.current()\n        }}\n      >\n        Commit from outside of handler\n      </button>\n    </>\n  )\n}\nrender(<MyForm />)\n'}),d=()=>(0,r.jsx)(i.A,{noInline:!0,children:"const MyForm = () => {\n  return (\n    <Form.Handler\n      onChange={console.log}\n      defaultData={{\n        contactPersons: [\n          {\n            title: 'Hanne',\n            value: 'hanne',\n          },\n        ],\n        mySelection: 'hanne',\n      }}\n    >\n      <Form.Card>\n        <Form.SubHeading>Legg til ny hovedkontaktperson</Form.SubHeading>\n\n        <HeightAnimation>\n          <Field.Selection\n            variant=\"radio\"\n            path=\"/mySelection\"\n            dataPath=\"/contactPersons\"\n          >\n            <Field.Option title=\"Annen person\" value=\"other\" />\n          </Field.Selection>\n        </HeightAnimation>\n\n        <Form.Visibility\n          visibleWhen={{\n            path: '/mySelection',\n            hasValue: 'other',\n          }}\n          animate\n        >\n          <Flex.Stack>\n            <Form.SubHeading>Ny hovedkontaktperson</Form.SubHeading>\n\n            <Form.Isolation\n              transformOnCommit={(isolatedData, handlerData) => {\n                // Because of missing TypeScript support\n                const contactPersons = handlerData['contactPersons']\n                const newPerson = isolatedData['newPerson']\n                return {\n                  ...handlerData,\n                  contactPersons: [\n                    ...contactPersons,\n                    {\n                      ...newPerson,\n                      value: newPerson.title.toLowerCase(),\n                    },\n                  ],\n                }\n              }}\n              onCommit={(data, { clearData }) => {\n                clearData()\n              }}\n              resetDataAfterCommit\n            >\n              <Flex.Stack>\n                <Form.Section path=\"/newPerson\">\n                  <Field.Name.First required path=\"/title\" />\n                </Form.Section>\n\n                <Form.Isolation.CommitButton />\n              </Flex.Stack>\n            </Form.Isolation>\n          </Flex.Stack>\n        </Form.Visibility>\n      </Form.Card>\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n"}),m=()=>(0,r.jsx)(i.A,{children:'<Form.Handler\n  defaultData={{\n    mySection: {\n      isolated: \'Isolated value defined outside\',\n      regular: \'Outer regular value\',\n    },\n  }}\n  onChange={(data) => {\n    console.log(\'Outer onChange:\', data)\n  }}\n>\n  <Form.Section path="/mySection">\n    <Flex.Stack>\n      <Form.Isolation\n        defaultData={{\n          isolated: \'The real initial "isolated" value\',\n        }}\n        onPathChange={(path, value) => {\n          console.log(\'Isolated onChange:\', path, value)\n        }}\n        onCommit={(data) => console.log(\'onCommit:\', data)}\n        resetDataAfterCommit\n      >\n        <Flex.Stack>\n          <Field.String label="Isolated" path="/isolated" required />\n          <Form.Isolation.CommitButton />\n        </Flex.Stack>\n      </Form.Isolation>\n\n      <Field.String label="Synced" path="/isolated" />\n      <Field.String label="Regular" path="/regular" required />\n\n      <Form.SubmitButton />\n    </Flex.Stack>\n  </Form.Section>\n</Form.Handler>\n'}),c=()=>(0,r.jsx)(i.A,{children:'<Form.Handler onSubmit={async (data) => console.log(\'onSubmit\', data)}>\n  <Flex.Stack>\n    <Form.Isolation preventUncommittedChanges resetDataAfterCommit>\n      <Flex.Stack>\n        <Field.String required label="Isolated" path="/isolated" />\n\n        <Flex.Horizontal>\n          <Form.Isolation.CommitButton />\n          <Form.Isolation.ResetButton showWhen="uncommittedChangeDetected" />\n        </Flex.Horizontal>\n      </Flex.Stack>\n    </Form.Isolation>\n\n    <Form.SubmitButton />\n\n    <Tools.Log />\n  </Flex.Stack>\n</Form.Handler>\n'}),h=()=>(0,r.jsx)(i.A,{noInline:!0,children:"const dataReference = Form.Isolation.createDataReference()\nconst SetDelayedData = () => {\n  const { update } = Form.useData()\n  React.useEffect(() => {\n    setTimeout(() => {\n      update('/isolated', 'With a delayed default value')\n      dataReference.refresh() // <-- refresh the data reference\n    }, 1000)\n  }, [update])\n  return null\n}\nrender(\n  <Form.Handler onSubmit={async (data) => console.log('onSubmit', data)}>\n    <Flex.Stack>\n      <Form.Isolation\n        preventUncommittedChanges\n        resetDataAfterCommit\n        dataReference={dataReference}\n      >\n        <SetDelayedData />\n        <Flex.Stack>\n          <Field.String required label=\"Isolated\" path=\"/isolated\" />\n\n          <Flex.Horizontal>\n            <Form.Isolation.CommitButton />\n            <Form.Isolation.ResetButton showConfirmDialog={false} />\n          </Flex.Horizontal>\n        </Flex.Stack>\n      </Form.Isolation>\n\n      <Form.SubmitButton />\n\n      <Tools.Log />\n    </Flex.Stack>\n  </Form.Handler>,\n)\n"});function u(e){const n=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code"},(0,a.R)(),e.components);return o||F("Examples",!1),l||F("Examples.CommitHandleRef",!0),m||F("Examples.InsideSection",!0),c||F("Examples.PreventUncommittedChanges",!0),d||F("Examples.TransformCommitData",!0),h||F("Examples.UpdateDataReference",!0),s||F("Examples.UsingCommitButton",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{children:"Demos"}),"\n",(0,r.jsx)(n.h3,{children:"Transform data on commit"}),"\n",(0,r.jsx)(d,{}),"\n",(0,r.jsx)(n.h3,{children:"Using the CommitButton"}),"\n",(0,r.jsx)(s,{}),"\n",(0,r.jsx)(n.h3,{children:"Using commitHandleRef"}),"\n",(0,r.jsx)(l,{}),"\n",(0,r.jsx)(n.h3,{children:"Inside a section"}),"\n",(0,r.jsxs)(n.p,{children:["This example has a ",(0,r.jsx)(n.code,{children:"defaultValue"})," both on the Form.Handler and the Form.Isolation."]}),"\n",(0,r.jsxs)(n.p,{children:["When no ",(0,r.jsx)(n.code,{children:"defaultValue"})," is set on the Form.Isolation (inner context), the default value from Form.Handler (outer context) is used for the initial value."]}),"\n",(0,r.jsxs)(n.p,{children:['When pressing the "Legg til / Add"-button, the default value from Form.Isolation is inserted again, because ',(0,r.jsx)(n.code,{children:"resetDataAfterCommit"})," is set to ",(0,r.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,r.jsx)(m,{}),"\n",(0,r.jsx)(n.h3,{children:"Prevent uncommitted changes"}),"\n",(0,r.jsxs)(n.p,{children:["This example uses the ",(0,r.jsx)(n.code,{children:"preventUncommittedChanges"})," property to display an error message if the user has made changes and attempts to submit the form."]}),"\n",(0,r.jsx)(n.p,{children:"Try entering something in the input field, then submit the form. An error message will appear to indicate that changes must be committed first."}),"\n",(0,r.jsx)(c,{}),"\n",(0,r.jsx)(n.h3,{children:"Update the data reference"}),"\n",(0,r.jsx)(n.p,{children:"This example shows how to update the data reference at a later point in time."}),"\n",(0,r.jsx)(h,{})]})}var p=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.R)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(u,e)})):u(e)};function F(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},20951:function(e,n,t){t.r(n);var o=t(31085),r=t(71184);function a(e){const n=Object.assign({h2:"h2",p:"p",code:"code",a:"a",h3:"h3",ul:"ul",li:"li",pre:"pre"},(0,r.R)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{children:"Description"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Form.Isolation"})," lets you isolate parts of your form so data and validations are not shared between the ",(0,o.jsx)(n.code,{children:"Form.Handler"})," until you want to."]}),"\n",(0,o.jsxs)(n.p,{children:["It's a provider that lets you provide a ",(0,o.jsx)(n.code,{children:"schema"})," or ",(0,o.jsx)(n.code,{children:"data"})," very similar to what the ",(0,o.jsx)(n.a,{href:"/uilib/extensions/forms/Form/Handler/",children:"Form.Handler"})," component does."]}),"\n",(0,o.jsx)(n.h3,{children:"Good to know"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["It needs to be used inside of a ",(0,o.jsx)(n.code,{children:"Form.Handler"})," component."]}),"\n",(0,o.jsxs)(n.li,{children:["All fields inside need to validate successfully before the isolated data can be committed, just like the ",(0,o.jsx)(n.code,{children:"Form.Handler"})," does before submitting."]}),"\n",(0,o.jsxs)(n.li,{children:["Input fields are prevented from submitting the form when pressing enter. Pressing enter on input fields will commit the isolated data to the ",(0,o.jsx)(n.code,{children:"Form.Handler"})," context instead."]}),"\n",(0,o.jsxs)(n.li,{children:["You can provide a ",(0,o.jsx)(n.code,{children:"schema"}),", ",(0,o.jsx)(n.code,{children:"data"})," or ",(0,o.jsx)(n.code,{children:"defaultData"})," like you would do with the ",(0,o.jsx)(n.code,{children:"Form.Handler"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["You can also provide ",(0,o.jsx)(n.code,{children:"data"})," or ",(0,o.jsx)(n.code,{children:"defaultData"})," to the ",(0,o.jsx)(n.code,{children:"Form.Handler"})," component. If not given on the ",(0,o.jsx)(n.code,{children:"Form.Isolation"})," component, this will define the data that will be used for the isolated data."]}),"\n",(0,o.jsxs)(n.li,{children:["Using ",(0,o.jsx)(n.code,{children:"Form.Isolation"})," inside of a ",(0,o.jsx)(n.code,{children:"Form.Section"})," is supported."]}),"\n",(0,o.jsxs)(n.li,{children:["If the user enters data without committing it to the outer context, that data will be lost when navigating to another step in the Wizard. To prevent this, you can use the ",(0,o.jsx)(n.code,{children:"preventUncommittedChanges"})," property on Form.Isolation. When enabled, it will display an error message if the user tries to proceed without committing their changes."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"onChange"})," on the ",(0,o.jsx)(n.code,{children:"Form.Handler"})," will be called when the isolated data gets committed."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"onChange"})," on the ",(0,o.jsx)(n.code,{children:"Form.Isolation"})," will be called on every change of the isolated data. Use ",(0,o.jsx)(n.code,{children:"onCommit"})," to get the data that gets committed."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { Form, Field } from \'@dnb/eufemia/extensions/forms\'\n\nexport function MyForm(props) {\n  return (\n    <Form.Handler\n      defaultData={{ isolated: \'Isolated\', regular: \'Regular\' }}\n    >\n      <Form.Isolation resetDataAfterCommit>\n        <Field.String label="Isolated" path="/isolated" />\n        <Form.Isolation.CommitButton />\n      </Form.Isolation>\n\n      <Field.String label="Regular" path="/regular" />\n      <Form.SubmitButton />\n    </Form.Handler>\n  )\n}\n'})}),"\n",(0,o.jsx)(n.h2,{children:"TypeScript support"}),"\n",(0,o.jsx)(n.p,{children:"You can define the TypeScript type structure for your data like so:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Form, Field } from '@dnb/eufemia/extensions/forms'\n\ntype IsolationData = {\n  persons: Array<{ name: string }>\n  newPerson: Array<{ name: string }>\n}\n\nfunction MyForm() {\n  return (\n    <Form.Isolation<IsolationData>\n      onCommit={(data) => {\n        data // <-- is of type IsolationData\n      }}\n      transformOnCommit={(isolatedData, handlerData) => {\n        return {\n          ...handlerData,\n          persons: [...handlerData.persons, isolatedData.newPerson],\n        }\n      }}\n    >\n      ...\n    </Form.Isolation>\n  )\n}\n"})}),"\n",(0,o.jsx)(n.h2,{children:"Commit the data to the form"}),"\n",(0,o.jsxs)(n.p,{children:["You can either use the ",(0,o.jsx)(n.code,{children:"Form.Isolation.CommitButton"})," or provide a custom ref handler you can use (call) when you want to commit the data to the ",(0,o.jsx)(n.code,{children:"Form.Handler"})," context:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { Form, Field, JSONSchema } from \'@dnb/eufemia/extensions/forms\'\n\nfunction MyForm() {\n  const commitHandleRef = React.useRef<() => void>()\n\n  return (\n    <Form.Handler>\n      <Form.Isolation commitHandleRef={commitHandleRef}>\n        <Field.PhoneNumber path="/phoneNumber" />\n        <Button text="Submit" onClick={commitHandleRef.current} />\n      </Form.Isolation>\n    </Form.Handler>\n  )\n}\n\nrender(<MyForm />)\n'})}),"\n",(0,o.jsx)(n.h2,{children:"Prevent the form from being submitted"}),"\n",(0,o.jsxs)(n.p,{children:["To prevent the ",(0,o.jsx)(n.a,{href:"/uilib/extensions/forms/Form/Handler/",children:"Form.Handler"})," from being submitted when there are fields with errors inside the Isolation, you can use the ",(0,o.jsx)(n.code,{children:"bubbleValidation"})," property."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { Form, Field } from \'@dnb/eufemia/extensions/forms\'\n\nrender(\n  <Form.Handler>\n    <Form.Isolation bubbleValidation>\n      <Field.String label="Required field" path="/isolated" required />\n      <Form.Isolation.CommitButton />\n    </Form.Isolation>\n  </Form.Handler>,\n)\n'})}),"\n",(0,o.jsx)(n.h2,{children:"Schema support"}),"\n",(0,o.jsxs)(n.p,{children:["You can also use a ",(0,o.jsx)(n.code,{children:"schema"})," to define the properties of the nested fields:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Form, Field, JSONSchema } from '@dnb/eufemia/extensions/forms'\n\nconst isolatedSchema: JSONSchema = {\n  type: 'object',\n  properties: {\n    phoneNumber: {\n      type: 'string',\n      pattern: '^[0-9]{10}$',\n    },\n  },\n  required: ['phoneNumber'],\n}\n\nrender(\n  <Form.Handler>\n    <Form.Isolation schema={isolatedSchema}>\n      <Field.PhoneNumber path=\"/phoneNumber\" />\n    </Form.Isolation>\n  </Form.Handler>,\n)\n"})}),"\n",(0,o.jsx)(n.h2,{children:"Clear data from isolated fields"}),"\n",(0,o.jsxs)(n.p,{children:["You can clear the isolation by calling ",(0,o.jsx)(n.code,{children:"clearData"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import { Form, Field } from '@dnb/eufemia/extensions/forms'\n\nfunction MyForm() {\n  return (\n    <Form.Handler>\n      <Form.Isolation\n        onCommit={(data, { clearData }) => {\n          clearData()\n        }}\n      >\n        <Field.String path=\"/isolated\" />\n        <Form.Isolation.CommitButton />\n      </Form.Isolation>\n    </Form.Handler>\n  )\n}\n"})}),"\n",(0,o.jsxs)(n.h2,{children:["Reset data after commit (",(0,o.jsx)(n.code,{children:"resetDataAfterCommit"}),")"]}),"\n",(0,o.jsxs)(n.p,{children:["You can reset the isolation the user committed by using ",(0,o.jsx)(n.code,{children:"resetDataAfterCommit"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import { Form, Field } from '@dnb/eufemia/extensions/forms'\n\nfunction MyForm() {\n  return (\n    <Form.Handler>\n      <Form.Isolation resetDataAfterCommit>\n        <Field.String path=\"/isolated\" />\n        <Form.Isolation.CommitButton />\n      </Form.Isolation>\n    </Form.Handler>\n  )\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{children:["Define your own data reference (",(0,o.jsx)(n.code,{children:"dataReference"}),")"]}),"\n",(0,o.jsxs)(n.p,{children:["Technically, when you use ",(0,o.jsx)(n.code,{children:"preventUncommittedChanges"})," or ",(0,o.jsx)(n.code,{children:"resetDataAfterCommit"}),", the ",(0,o.jsx)(n.code,{children:"Form.Isolation"}),' will use its "initial" internal data set to create a reference. This reference is used to either compare if there is a change or to reset the data context after a commit.']}),"\n",(0,o.jsx)(n.p,{children:"But in some situations, you may need a different data set than the initial data set given at the initial render."}),"\n",(0,o.jsxs)(n.p,{children:["In order to do that you can create a ",(0,o.jsx)(n.code,{children:"dataReference"})," and pass it to the ",(0,o.jsx)(n.code,{children:"Form.Isolation"})," component and call ",(0,o.jsx)(n.code,{children:"refresh"})," on it whenever you need to update it."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'import { Form, Field } from \'@dnb/eufemia/extensions/forms\'\n\nconst dataReference = Form.Isolation.createDataReference()\n\nfunction MyForm() {\n  useEffect(() => {\n    // When ever you want to refresh the "reset data"\n    dataReference.refresh()\n  }, [])\n\n  return (\n    <Form.Handler>\n      <Form.Isolation resetDataAfterCommit dataReference={dataReference}>\n        <Field.String path="/isolated" />\n        <Form.Isolation.CommitButton />\n      </Form.Isolation>\n    </Form.Handler>\n  )\n}\n'})}),"\n",(0,o.jsxs)(n.h2,{children:["Require the user to commit before submitting (",(0,o.jsx)(n.code,{children:"preventUncommittedChanges"}),")"]}),"\n",(0,o.jsxs)(n.p,{children:["In scenarios where you want to ensure users commit their changes before submitting or navigating to the next Wizard step, you can use the ",(0,o.jsx)(n.code,{children:"preventUncommittedChanges"})," property. This will prevent form submission (or a step change) and prompt the user to commit any uncommitted changes first."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'import { Form, Field } from \'@dnb/eufemia/extensions/forms\'\n\nfunction MyForm() {\n  return (\n    <Form.Handler>\n      <Form.Isolation preventUncommittedChanges resetDataAfterCommit>\n        <Field.String path="/isolated" />\n        <Form.Isolation.CommitButton />\n        <Form.Isolation.ResetButton showWhen="uncommittedChangeDetected" />\n      </Form.Isolation>\n    </Form.Handler>\n  )\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:'showWhen="uncommittedChangeDetected"'}),' property ensures that the reset button is displayed only when the "prevent uncommitted changes" error is visible. This helps prevent users from resetting the form unnecessarily.']})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.R)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(a,e)})):a(e)}},58573:function(e,n,t){t.r(n);var o=t(31085),r=t(71184),a=t(20951),i=t(1336);function s(e){return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.default,{}),"\n",(0,o.jsx)(i.default,{})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.R)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(s,e)})):s()}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-isolation-mdx-2a1743a90df141f30bfa.js.map