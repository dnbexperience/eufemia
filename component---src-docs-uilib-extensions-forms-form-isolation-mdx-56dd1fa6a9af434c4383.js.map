{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-isolation-mdx-56dd1fa6a9af434c4383.js","mappings":"+MAKA,SAASA,EAAkBC,GACzB,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKC,EAAAA,QAAM,CAAC,GAAI,MAAMD,EAAAA,EAAAA,KAAKE,EAAAA,QAAO,CAAC,KAElD,CAOA,UANA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOO,QAASC,GAAaC,OAAOC,OAAO,CAAC,GAAGC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOJ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWC,OAAOC,OAAO,CAAC,EAAGV,EAAO,CAC1DG,UAAUC,EAAAA,EAAAA,KAAKL,EAAmBC,MAC9BD,GACR,C,8SCVO,MAAMc,EAAoBA,KAC/BT,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,qrBAkCWY,EAAkBA,KAC7BX,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAE,UAAA,EAAAb,SAAA,syDAoFWc,EAAsBA,KACjCb,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAI,MAAA,CACFC,QACA,GAAAH,UAAA,EAAAb,SAAA,i5DA4EaiB,EAAgBA,KAC3BhB,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,k+BCzMF,SAASJ,EAAkBC,GACzB,MAAMqB,EAAcZ,OAAOC,OAAO,CAChCY,GAAI,KACJC,GAAI,OACHZ,EAAAA,EAAAA,MAAsBX,EAAMY,YAM/B,OALKY,GAAUC,EAAqB,YAAY,GAC3CD,GAA0BC,EAAqB,4BAA4B,GAC3ED,GAAwBC,EAAqB,0BAA0B,GACvED,GAA8BC,EAAqB,gCAAgC,GACnFD,GAA4BC,EAAqB,8BAA8B,IAC7ExB,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKiB,EAAYC,GAAI,CAC9BnB,SAAU,UACR,MAAMC,EAAAA,EAAAA,KAAKiB,EAAYE,GAAI,CAC7BpB,SAAU,6BACR,MAAMC,EAAAA,EAAAA,KAAKoB,EAA8B,CAAC,GAAI,MAAMpB,EAAAA,EAAAA,KAAKiB,EAAYE,GAAI,CAC3EpB,SAAU,2BACR,MAAMC,EAAAA,EAAAA,KAAKoB,EAA4B,CAAC,GAAI,MAAMpB,EAAAA,EAAAA,KAAKiB,EAAYE,GAAI,CACzEpB,SAAU,0BACR,MAAMC,EAAAA,EAAAA,KAAKoB,EAA0B,CAAC,GAAI,MAAMpB,EAAAA,EAAAA,KAAKiB,EAAYE,GAAI,CACvEpB,SAAU,qBACR,MAAMC,EAAAA,EAAAA,KAAKoB,EAAwB,CAAC,KAE5C,CAOA,MANA,SAAoBxB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOO,QAASC,GAAaC,OAAOC,OAAO,CAAC,GAAGC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOJ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWC,OAAOC,OAAO,CAAC,EAAGV,EAAO,CAC1DG,UAAUC,EAAAA,EAAAA,KAAKL,EAAmBC,MAC9BD,EAAkBC,EAC1B,EAEA,SAASyB,EAAqBC,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,C,yDClCA,SAAS3B,EAAkBC,GACzB,MAAMqB,EAAcZ,OAAOC,OAAO,CAChCY,GAAI,KACJO,EAAG,IACHC,KAAM,OACNC,EAAG,IACHR,GAAI,KACJS,GAAI,KACJC,GAAI,KACJC,IAAK,QACJvB,EAAAA,EAAAA,MAAsBX,EAAMY,YAC/B,OAAOX,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKiB,EAAYC,GAAI,CAC9BnB,SAAU,gBACR,MAAMF,EAAAA,EAAAA,MAAMoB,EAAYQ,EAAG,CAC7B1B,SAAU,EAACC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CAChC3B,SAAU,mBACR,4FAA4FC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CACrH3B,SAAU,iBACR,yBACF,MAAMF,EAAAA,EAAAA,MAAMoB,EAAYQ,EAAG,CAC7B1B,SAAU,CAAC,4CAA4CC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CAC5E3B,SAAU,WACR,QAAQC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CACjC3B,SAAU,SACR,8BAA8BC,EAAAA,EAAAA,KAAKiB,EAAYU,EAAG,CACpDI,KAAM,wCACNhC,SAAU,iBACR,sBACF,MAAMC,EAAAA,EAAAA,KAAKiB,EAAYE,GAAI,CAC7BpB,SAAU,iBACR,MAAMF,EAAAA,EAAAA,MAAMoB,EAAYW,GAAI,CAC9B7B,SAAU,CAAC,MAAMF,EAAAA,EAAAA,MAAMoB,EAAYY,GAAI,CACrC9B,SAAU,CAAC,oCAAoCC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CACpE3B,SAAU,iBACR,iBACF,MAAMF,EAAAA,EAAAA,MAAMoB,EAAYY,GAAI,CAC9B9B,SAAU,CAAC,wGAAwGC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CACxI3B,SAAU,iBACR,8BACF,MAAMF,EAAAA,EAAAA,MAAMoB,EAAYY,GAAI,CAC9B9B,SAAU,CAAC,iJAAiJC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CACjL3B,SAAU,iBACR,uBACF,MAAMF,EAAAA,EAAAA,MAAMoB,EAAYY,GAAI,CAC9B9B,SAAU,CAAC,sBAAsBC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CACtD3B,SAAU,WACR,MAAMC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CAC/B3B,SAAU,SACR,QAAQC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CACjC3B,SAAU,gBACR,gCAAgCC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CACzD3B,SAAU,iBACR,OACF,MAAMF,EAAAA,EAAAA,MAAMoB,EAAYY,GAAI,CAC9B9B,SAAU,CAAC,yBAAyBC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CACzD3B,SAAU,SACR,QAAQC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CACjC3B,SAAU,gBACR,YAAYC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CACrC3B,SAAU,iBACR,kEACF,MAAMF,EAAAA,EAAAA,MAAMoB,EAAYY,GAAI,CAC9B9B,SAAU,CAAC,UAAUC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CAC1C3B,SAAU,mBACR,iBAAiBC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CAC1C3B,SAAU,iBACR,oBACF,MAAMF,EAAAA,EAAAA,MAAMoB,EAAYY,GAAI,CAC9B9B,SAAU,EAACC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CAChC3B,SAAU,aACR,YAAYC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CACrC3B,SAAU,iBACR,2DACF,MAAMF,EAAAA,EAAAA,MAAMoB,EAAYY,GAAI,CAC9B9B,SAAU,EAACC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CAChC3B,SAAU,aACR,YAAYC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CACrC3B,SAAU,mBACR,8DAA8DC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CACvF3B,SAAU,aACR,0CACF,QACF,MAAMC,EAAAA,EAAAA,KAAKiB,EAAYC,GAAI,CAC7BnB,SAAU,UACR,MAAMC,EAAAA,EAAAA,KAAKiB,EAAYa,IAAK,CAC9B/B,UAAUC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CAC/BM,UAAW,eACXjC,SAAU,+dAEV,MAAMC,EAAAA,EAAAA,KAAKiB,EAAYC,GAAI,CAC7BnB,SAAU,gCACR,MAAMF,EAAAA,EAAAA,MAAMoB,EAAYQ,EAAG,CAC7B1B,SAAU,CAAC,2BAA2BC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CAC3D3B,SAAU,gCACR,gGAAgGC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CACzH3B,SAAU,iBACR,eACF,MAAMC,EAAAA,EAAAA,KAAKiB,EAAYa,IAAK,CAC9B/B,UAAUC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CAC/BM,UAAW,eACXjC,SAAU,8bAEV,MAAMC,EAAAA,EAAAA,KAAKiB,EAAYC,GAAI,CAC7BnB,SAAU,mBACR,MAAMF,EAAAA,EAAAA,MAAMoB,EAAYQ,EAAG,CAC7B1B,SAAU,CAAC,uBAAuBC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CACvD3B,SAAU,WACR,qDACF,MAAMC,EAAAA,EAAAA,KAAKiB,EAAYa,IAAK,CAC9B/B,UAAUC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CAC/BM,UAAW,eACXjC,SAAU,icAEV,MAAMC,EAAAA,EAAAA,KAAKiB,EAAYC,GAAI,CAC7BnB,SAAU,oCACR,MAAMF,EAAAA,EAAAA,MAAMoB,EAAYQ,EAAG,CAC7B1B,SAAU,CAAC,2CAA2CC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CAC3E3B,SAAU,mBACR,cAAcC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CACvC3B,SAAU,OACR,mBACF,MAAMC,EAAAA,EAAAA,KAAKiB,EAAYa,IAAK,CAC9B/B,UAAUC,EAAAA,EAAAA,KAAKiB,EAAYS,KAAM,CAC/BM,UAAW,eACXjC,SAAU,+ZAIlB,CAOA,UANA,SAAoBH,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOO,QAASC,GAAaC,OAAOC,OAAO,CAAC,GAAGC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOJ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWC,OAAOC,OAAO,CAAC,EAAGV,EAAO,CAC1DG,UAAUC,EAAAA,EAAAA,KAAKL,EAAmBC,MAC9BD,EAAkBC,EAC1B,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Isolation.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Isolation/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Isolation/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Isolation/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from './Isolation/info.mdx';\nimport Demos from './Isolation/demos.mdx';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Card, Flex, HeightAnimation, Section } from '@dnb/eufemia/src'\nimport { Field, Form, Iterate } from '@dnb/eufemia/src/extensions/forms'\nimport React from 'react'\n\nexport const UsingCommitButton = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        onSubmit={(data) => console.log('onSubmit', data)}\n        onChange={(data) => console.log('Regular onChange:', data)}\n      >\n        <Flex.Stack>\n          <Form.Isolation\n            onChange={(data) => console.log('Isolated onChange:', data)}\n          >\n            <Flex.Stack>\n              <Field.String required label=\"Isolated\" path=\"/isolated\" />\n              <Form.Isolation.CommitButton text=\"Commit\" />\n            </Flex.Stack>\n          </Form.Isolation>\n\n          <Field.String\n            required\n            label=\"Commited from isolation\"\n            path=\"/isolated\"\n          />\n          <Field.String\n            required\n            label=\"Outside of isolation\"\n            path=\"/regular\"\n          />\n\n          <Form.SubmitButton />\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const CommitHandleRef = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyForm = () => {\n          const commitHandleRef = React.useRef(null)\n\n          return (\n            <>\n              <Form.Handler\n                bottom=\"large\"\n                data={{\n                  contactPersons: [{ title: 'Hanne', value: 'hanne' }],\n                }}\n              >\n                <Card stack>\n                  <Form.SubHeading>Ny hovedkontaktperson</Form.SubHeading>\n\n                  <HeightAnimation>\n                    <Field.Selection\n                      variant=\"radio\"\n                      dataPath=\"/contactPersons\"\n                    />\n                  </HeightAnimation>\n\n                  <Form.Isolation\n                    commitHandleRef={commitHandleRef}\n                    transformOnCommit={(isolatedData, handlerData) => {\n                      const value =\n                        isolatedData.newPerson.title.toLowerCase()\n                      const transformedData = {\n                        ...handlerData,\n                        contactPersons: [\n                          ...handlerData.contactPersons,\n                          {\n                            ...isolatedData.newPerson,\n                            value,\n                          },\n                        ],\n                      }\n\n                      return transformedData\n                    }}\n                  >\n                    <Flex.Stack>\n                      <Form.Section path=\"/newPerson\">\n                        <Field.Name.First required path=\"/title\" />\n                      </Form.Section>\n                    </Flex.Stack>\n                  </Form.Isolation>\n                  <Log />\n                </Card>\n              </Form.Handler>\n\n              <button\n                onClick={() => {\n                  commitHandleRef.current()\n                }}\n              >\n                Commit from outside of handler\n              </button>\n            </>\n          )\n        }\n\n        const Log = () => {\n          const { data } = Form.useData()\n          return (\n            <Section\n              element=\"output\"\n              innerSpace\n              backgroundColor=\"sand-yellow\"\n              top\n            >\n              {JSON.stringify(data || {}, null, 4)}\n            </Section>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const TransformCommitData = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      {() => {\n        const MyForm = () => {\n          return (\n            <Form.Handler\n              onChange={console.log}\n              defaultData={{\n                contactPersons: [{ title: 'Hanne', value: 'hanne' }],\n                mySelection: 'hanne',\n              }}\n            >\n              <Card stack>\n                <Form.SubHeading>\n                  Legg til ny hovedkontaktperson\n                </Form.SubHeading>\n\n                <HeightAnimation>\n                  <Field.Selection\n                    variant=\"radio\"\n                    path=\"/mySelection\"\n                    dataPath=\"/contactPersons\"\n                  >\n                    <Field.Option title=\"Annen person\" value=\"other\" />\n                  </Field.Selection>\n                </HeightAnimation>\n\n                <Form.Visibility\n                  visibleWhen={{\n                    path: '/mySelection',\n                    hasValue: 'other',\n                  }}\n                  animate\n                >\n                  <Flex.Stack>\n                    <Form.SubHeading>\n                      Ny hovedkontaktperson\n                    </Form.SubHeading>\n\n                    <Form.Isolation\n                      transformOnCommit={(isolatedData, handlerData) => {\n                        return {\n                          ...handlerData,\n                          contactPersons: [\n                            ...handlerData.contactPersons,\n                            {\n                              ...isolatedData.newPerson,\n                              value:\n                                isolatedData.newPerson.title.toLowerCase(),\n                            },\n                          ],\n                        }\n                      }}\n                      onCommit={(data, { clearData }) => {\n                        clearData()\n                      }}\n                    >\n                      <Flex.Stack>\n                        <Form.Section path=\"/newPerson\">\n                          <Field.Name.First required path=\"/title\" />\n                        </Form.Section>\n\n                        <Form.Isolation.CommitButton />\n                      </Flex.Stack>\n                    </Form.Isolation>\n                  </Flex.Stack>\n                </Form.Visibility>\n              </Card>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const InsideSection = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        defaultData={{\n          mySection: {\n            isolated: 'Isolated value defined outside',\n            regular: 'Outer regular value',\n          },\n        }}\n        onChange={(data) => {\n          console.log('Outer onChange:', data)\n        }}\n      >\n        <Form.Section path=\"/mySection\">\n          <Flex.Stack>\n            <Form.Isolation\n              defaultData={{\n                isolated: 'The real initial \"isolated\" value',\n              }}\n              onPathChange={(path, value) => {\n                console.log('Isolated onChange:', path, value)\n              }}\n              onCommit={(data) => console.log('onCommit:', data)}\n            >\n              <Flex.Stack>\n                <Field.String label=\"Isolated\" path=\"/isolated\" required />\n                <Form.Isolation.CommitButton />\n              </Flex.Stack>\n            </Form.Isolation>\n\n            <Field.String label=\"Synced\" path=\"/isolated\" />\n            <Field.String label=\"Regular\" path=\"/regular\" required />\n\n            <Form.SubmitButton />\n          </Flex.Stack>\n        </Form.Section>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.CommitHandleRef) _missingMdxReference(\"Examples.CommitHandleRef\", true);\n  if (!Examples.InsideSection) _missingMdxReference(\"Examples.InsideSection\", true);\n  if (!Examples.TransformCommitData) _missingMdxReference(\"Examples.TransformCommitData\", true);\n  if (!Examples.UsingCommitButton) _missingMdxReference(\"Examples.UsingCommitButton\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Transform data on commit\"\n    }), \"\\n\", _jsx(Examples.TransformCommitData, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Using the CommitButton\"\n    }), \"\\n\", _jsx(Examples.UsingCommitButton, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Using commitHandleRef\"\n    }), \"\\n\", _jsx(Examples.CommitHandleRef, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inside a section\"\n    }), \"\\n\", _jsx(Examples.InsideSection, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Form.Isolation\"\n      }), \" lets you isolate parts of your form so data and validations are not shared between the \", _jsx(_components.code, {\n        children: \"Form.Handler\"\n      }), \" until you want to.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It's a provider that lets you provide a \", _jsx(_components.code, {\n        children: \"schema\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"data\"\n      }), \" very similar to what the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Handler/\",\n        children: \"Form.Handler\"\n      }), \" component does.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Good to know\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"It needs to be used inside of a \", _jsx(_components.code, {\n          children: \"Form.Handler\"\n        }), \" component.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"All fields inside needs to validate successfully before the isolated data can be commited, like the \", _jsx(_components.code, {\n          children: \"Form.Handler\"\n        }), \" does before it submits.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Input fields are prevented from submitting the form when pressing enter. Pressing enter on input fields will commit the isolated data to the \", _jsx(_components.code, {\n          children: \"Form.Handler\"\n        }), \" context instead.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"You can provide a \", _jsx(_components.code, {\n          children: \"schema\"\n        }), \", \", _jsx(_components.code, {\n          children: \"data\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"defaultData\"\n        }), \" like you would do with the \", _jsx(_components.code, {\n          children: \"Form.Handler\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"You can also provide \", _jsx(_components.code, {\n          children: \"data\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"defaultData\"\n        }), \" to the \", _jsx(_components.code, {\n          children: \"Form.Handler\"\n        }), \", defining the data that will be used for the isolated data.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Using \", _jsx(_components.code, {\n          children: \"Form.Isolation\"\n        }), \" inside of a \", _jsx(_components.code, {\n          children: \"Form.Section\"\n        }), \" is supported.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"onChange\"\n        }), \" on the \", _jsx(_components.code, {\n          children: \"Form.Handler\"\n        }), \" will be called when the isolated data gets commited.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"onChange\"\n        }), \" on the \", _jsx(_components.code, {\n          children: \"Form.Isolation\"\n        }), \" will be called on every change of the isolated data. Use \", _jsx(_components.code, {\n          children: \"onCommit\"\n        }), \" to get the data that gets commited.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Usage\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field } from '@dnb/eufemia/extensions/forms'\\n\\nexport function MyForm(props) {\\n  return (\\n    <Form.Handler\\n      defaultData={{ isolated: 'Isolated', regular: 'Regular' }}\\n    >\\n      <Form.Isolation>\\n        <Field.String label=\\\"Isolated\\\" path=\\\"/isolated\\\" />\\n        <Form.Isolation.CommitButton />\\n      </Form.Isolation>\\n\\n      <Field.String label=\\\"Regular\\\" path=\\\"/regular\\\" />\\n      <Form.SubmitButton />\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Commit the data to the form\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can either use the \", _jsx(_components.code, {\n        children: \"Form.Isolation.CommitButton\"\n      }), \" or provide a custom ref handler you can use (call) when you want to commit the data to the \", _jsx(_components.code, {\n        children: \"Form.Handler\"\n      }), \" context:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field, JSONSchema } from '@dnb/eufemia/extensions/forms'\\n\\nfunction MyForm() {\\n  const commitHandleRef = React.useRef<() => void>()\\n\\n  return (\\n    <Form.Handler>\\n      <Form.Isolation commitHandleRef={commitHandleRef}>\\n        <Field.PhoneNumber path=\\\"/phoneNumber\\\" />\\n        <Button text=\\\"Submit\\\" onClick={commitHandleRef.current} />\\n      </Form.Isolation>\\n    </Form.Handler>\\n  )\\n}\\n\\nrender(<MyForm />)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Schema support\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also use a \", _jsx(_components.code, {\n        children: \"schema\"\n      }), \" to define the properties of the nested fields:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field, JSONSchema } from '@dnb/eufemia/extensions/forms'\\n\\nconst isolatedSchema: JSONSchema = {\\n  type: 'object',\\n  properties: {\\n    phoneNumber: {\\n      type: 'string',\\n      pattern: '^[0-9]{10}$',\\n    },\\n  },\\n  required: ['phoneNumber'],\\n}\\n\\nrender(\\n  <Form.Handler>\\n    <Form.Isolation schema={isolatedSchema}>\\n      <Field.PhoneNumber path=\\\"/phoneNumber\\\" />\\n    </Form.Isolation>\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Clear data from isolated fields\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can clear the isolation by calling \", _jsx(_components.code, {\n        children: \"Form.clearData\"\n      }), \" with the \", _jsx(_components.code, {\n        children: \"id\"\n      }), \" of the form.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Form, Field } from '@dnb/eufemia/extensions/forms'\\n\\nfunction MyForm() {\\n  return (\\n    <Form.Handler>\\n      <Form.Isolation\\n        id=\\\"my-isolated-data\\\"\\n        onCommit={() => {\\n          Form.clearData('my-isolated-data')\\n        }}\\n      >\\n        <Field.String path=\\\"/isolated\\\" />\\n        <Form.Isolation.CommitButton />\\n      </Form.Isolation>\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","UsingCommitButton","ComponentBox","CommitHandleRef","noInline","TransformCommitData","scope","Iterate","InsideSection","_components","h2","h3","Examples","_missingMdxReference","id","component","Error","p","code","a","ul","li","pre","href","className"],"sourceRoot":""}