"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[23590,59587,68279],{80003:function(n,e,o){o.r(e);var t=o(52322),a=o(45392),r=o(75681),i=o(49259);function s(n){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.default,{}),"\n",(0,t.jsx)(i.default,{})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(s,n)})):s()}},49259:function(n,e,o){o.r(e),o.d(e,{default:function(){return h}});var t={};o.r(t),o.d(t,{CommitHandleRef:function(){return l},InsideSection:function(){return c},TransformCommitData:function(){return d},UsingCommitButton:function(){return s}});var a=o(52322),r=o(45392),i=o(41404);o(2784);const s=()=>(0,a.jsx)(i.Z,{children:'<Form.Handler\n  onSubmit={(data) => console.log(\'onSubmit\', data)}\n  onChange={(data) => console.log(\'Regular onChange:\', data)}\n>\n  <Flex.Stack>\n    <Form.Isolation\n      onChange={(data) => console.log(\'Isolated onChange:\', data)}\n    >\n      <Flex.Stack>\n        <Field.String required label="Isolated" path="/isolated" />\n        <Form.Isolation.CommitButton text="Commit" />\n      </Flex.Stack>\n    </Form.Isolation>\n\n    <Field.String\n      required\n      label="Committed from isolation"\n      path="/isolated"\n    />\n    <Field.String required label="Outside of isolation" path="/regular" />\n\n    <Form.SubmitButton />\n  </Flex.Stack>\n</Form.Handler>\n'}),l=()=>(0,a.jsx)(i.Z,{noInline:!0,children:'const MyForm = () => {\n  const commitHandleRef = React.useRef(null)\n  return (\n    <>\n      <Form.Handler\n        bottom="large"\n        data={{\n          contactPersons: [\n            {\n              title: \'Hanne\',\n              value: \'hanne\',\n            },\n          ],\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Ny hovedkontaktperson</Form.SubHeading>\n\n          <HeightAnimation>\n            <Field.Selection variant="radio" dataPath="/contactPersons" />\n          </HeightAnimation>\n\n          <Form.Isolation\n            commitHandleRef={commitHandleRef}\n            transformOnCommit={(isolatedData, handlerData) => {\n              // Because of missing TypeScript support\n              const contactPersons = handlerData[\'contactPersons\']\n              const newPerson = isolatedData[\'newPerson\']\n              const value = newPerson.title.toLowerCase()\n              const transformedData = {\n                ...handlerData,\n                contactPersons: [\n                  ...contactPersons,\n                  {\n                    ...newPerson,\n                    value,\n                  },\n                ],\n              }\n              return transformedData\n            }}\n          >\n            <Flex.Stack>\n              <Form.Section path="/newPerson">\n                <Field.Name.First required path="/title" />\n              </Form.Section>\n            </Flex.Stack>\n          </Form.Isolation>\n          <Tools.Log />\n        </Form.Card>\n      </Form.Handler>\n\n      <button\n        onClick={() => {\n          commitHandleRef.current()\n        }}\n      >\n        Commit from outside of handler\n      </button>\n    </>\n  )\n}\nrender(<MyForm />)\n'}),d=()=>(0,a.jsx)(i.Z,{noInline:!0,children:"const MyForm = () => {\n  return (\n    <Form.Handler\n      onChange={console.log}\n      defaultData={{\n        contactPersons: [\n          {\n            title: 'Hanne',\n            value: 'hanne',\n          },\n        ],\n        mySelection: 'hanne',\n      }}\n    >\n      <Form.Card>\n        <Form.SubHeading>Legg til ny hovedkontaktperson</Form.SubHeading>\n\n        <HeightAnimation>\n          <Field.Selection\n            variant=\"radio\"\n            path=\"/mySelection\"\n            dataPath=\"/contactPersons\"\n          >\n            <Field.Option title=\"Annen person\" value=\"other\" />\n          </Field.Selection>\n        </HeightAnimation>\n\n        <Form.Visibility\n          visibleWhen={{\n            path: '/mySelection',\n            hasValue: 'other',\n          }}\n          animate\n        >\n          <Flex.Stack>\n            <Form.SubHeading>Ny hovedkontaktperson</Form.SubHeading>\n\n            <Form.Isolation\n              transformOnCommit={(isolatedData, handlerData) => {\n                // Because of missing TypeScript support\n                const contactPersons = handlerData['contactPersons']\n                const newPerson = isolatedData['newPerson']\n                return {\n                  ...handlerData,\n                  contactPersons: [\n                    ...contactPersons,\n                    {\n                      ...newPerson,\n                      value: newPerson.title.toLowerCase(),\n                    },\n                  ],\n                }\n              }}\n              onCommit={(data, { clearData }) => {\n                clearData()\n              }}\n            >\n              <Flex.Stack>\n                <Form.Section path=\"/newPerson\">\n                  <Field.Name.First required path=\"/title\" />\n                </Form.Section>\n\n                <Form.Isolation.CommitButton />\n              </Flex.Stack>\n            </Form.Isolation>\n          </Flex.Stack>\n        </Form.Visibility>\n      </Form.Card>\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n"}),c=()=>(0,a.jsx)(i.Z,{children:'<Form.Handler\n  defaultData={{\n    mySection: {\n      isolated: \'Isolated value defined outside\',\n      regular: \'Outer regular value\',\n    },\n  }}\n  onChange={(data) => {\n    console.log(\'Outer onChange:\', data)\n  }}\n>\n  <Form.Section path="/mySection">\n    <Flex.Stack>\n      <Form.Isolation\n        defaultData={{\n          isolated: \'The real initial "isolated" value\',\n        }}\n        onPathChange={(path, value) => {\n          console.log(\'Isolated onChange:\', path, value)\n        }}\n        onCommit={(data) => console.log(\'onCommit:\', data)}\n      >\n        <Flex.Stack>\n          <Field.String label="Isolated" path="/isolated" required />\n          <Form.Isolation.CommitButton />\n        </Flex.Stack>\n      </Form.Isolation>\n\n      <Field.String label="Synced" path="/isolated" />\n      <Field.String label="Regular" path="/regular" required />\n\n      <Form.SubmitButton />\n    </Flex.Stack>\n  </Form.Section>\n</Form.Handler>\n'});function m(n){const e=Object.assign({h2:"h2",h3:"h3"},(0,r.ah)(),n.components);return t||u("Examples",!1),l||u("Examples.CommitHandleRef",!0),c||u("Examples.InsideSection",!0),d||u("Examples.TransformCommitData",!0),s||u("Examples.UsingCommitButton",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{children:"Demos"}),"\n",(0,a.jsx)(e.h3,{children:"Transform data on commit"}),"\n",(0,a.jsx)(d,{}),"\n",(0,a.jsx)(e.h3,{children:"Using the CommitButton"}),"\n",(0,a.jsx)(s,{}),"\n",(0,a.jsx)(e.h3,{children:"Using commitHandleRef"}),"\n",(0,a.jsx)(l,{}),"\n",(0,a.jsx)(e.h3,{children:"Inside a section"}),"\n",(0,a.jsx)(c,{})]})}var h=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,a.jsx)(e,Object.assign({},n,{children:(0,a.jsx)(m,n)})):m(n)};function u(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},75681:function(n,e,o){o.r(e);var t=o(52322),a=o(45392);function r(n){const e=Object.assign({h2:"h2",p:"p",code:"code",a:"a",h3:"h3",ul:"ul",li:"li",pre:"pre"},(0,a.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:"Description"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"Form.Isolation"})," lets you isolate parts of your form so data and validations are not shared between the ",(0,t.jsx)(e.code,{children:"Form.Handler"})," until you want to."]}),"\n",(0,t.jsxs)(e.p,{children:["It's a provider that lets you provide a ",(0,t.jsx)(e.code,{children:"schema"})," or ",(0,t.jsx)(e.code,{children:"data"})," very similar to what the ",(0,t.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Handler/",children:"Form.Handler"})," component does."]}),"\n",(0,t.jsx)(e.h3,{children:"Good to know"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["It needs to be used inside of a ",(0,t.jsx)(e.code,{children:"Form.Handler"})," component."]}),"\n",(0,t.jsxs)(e.li,{children:["All fields inside need to validate successfully before the isolated data can be committed, just like the ",(0,t.jsx)(e.code,{children:"Form.Handler"})," does before submitting."]}),"\n",(0,t.jsxs)(e.li,{children:["Input fields are prevented from submitting the form when pressing enter. Pressing enter on input fields will commit the isolated data to the ",(0,t.jsx)(e.code,{children:"Form.Handler"})," context instead."]}),"\n",(0,t.jsxs)(e.li,{children:["You can provide a ",(0,t.jsx)(e.code,{children:"schema"}),", ",(0,t.jsx)(e.code,{children:"data"})," or ",(0,t.jsx)(e.code,{children:"defaultData"})," like you would do with the ",(0,t.jsx)(e.code,{children:"Form.Handler"}),"."]}),"\n",(0,t.jsxs)(e.li,{children:["You can also provide ",(0,t.jsx)(e.code,{children:"data"})," or ",(0,t.jsx)(e.code,{children:"defaultData"})," to the ",(0,t.jsx)(e.code,{children:"Form.Handler"})," component. If not given on the ",(0,t.jsx)(e.code,{children:"Form.Isolation"})," component, this will define the data that will be used for the isolated data."]}),"\n",(0,t.jsxs)(e.li,{children:["Using ",(0,t.jsx)(e.code,{children:"Form.Isolation"})," inside of a ",(0,t.jsx)(e.code,{children:"Form.Section"})," is supported."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"onChange"})," on the ",(0,t.jsx)(e.code,{children:"Form.Handler"})," will be called when the isolated data gets committed."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"onChange"})," on the ",(0,t.jsx)(e.code,{children:"Form.Isolation"})," will be called on every change of the isolated data. Use ",(0,t.jsx)(e.code,{children:"onCommit"})," to get the data that gets committed."]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{children:"Usage"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:'import { Form, Field } from \'@dnb/eufemia/extensions/forms\'\n\nexport function MyForm(props) {\n  return (\n    <Form.Handler\n      defaultData={{ isolated: \'Isolated\', regular: \'Regular\' }}\n    >\n      <Form.Isolation>\n        <Field.String label="Isolated" path="/isolated" />\n        <Form.Isolation.CommitButton />\n      </Form.Isolation>\n\n      <Field.String label="Regular" path="/regular" />\n      <Form.SubmitButton />\n    </Form.Handler>\n  )\n}\n'})}),"\n",(0,t.jsx)(e.h2,{children:"TypeScript support"}),"\n",(0,t.jsx)(e.p,{children:"You can define the TypeScript type structure for your data like so:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"import { Form, Field } from '@dnb/eufemia/extensions/forms'\n\ntype IsolationData = {\n  persons: Array<{ name: string }>\n  newPerson: Array<{ name: string }>\n}\n\nfunction MyForm() {\n  return (\n    <Form.Isolation<IsolationData>\n      onCommit={(data) => {\n        data // <-- is of type IsolationData\n      }}\n      transformOnCommit={(isolatedData, handlerData) => {\n        return {\n          ...handlerData,\n          persons: [...handlerData.persons, isolatedData.newPerson],\n        }\n      }}\n    >\n      ...\n    </Form.Isolation>\n  )\n}\n"})}),"\n",(0,t.jsx)(e.h2,{children:"Commit the data to the form"}),"\n",(0,t.jsxs)(e.p,{children:["You can either use the ",(0,t.jsx)(e.code,{children:"Form.Isolation.CommitButton"})," or provide a custom ref handler you can use (call) when you want to commit the data to the ",(0,t.jsx)(e.code,{children:"Form.Handler"})," context:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:'import { Form, Field, JSONSchema } from \'@dnb/eufemia/extensions/forms\'\n\nfunction MyForm() {\n  const commitHandleRef = React.useRef<() => void>()\n\n  return (\n    <Form.Handler>\n      <Form.Isolation commitHandleRef={commitHandleRef}>\n        <Field.PhoneNumber path="/phoneNumber" />\n        <Button text="Submit" onClick={commitHandleRef.current} />\n      </Form.Isolation>\n    </Form.Handler>\n  )\n}\n\nrender(<MyForm />)\n'})}),"\n",(0,t.jsx)(e.h2,{children:"Prevent the form from being submitted"}),"\n",(0,t.jsxs)(e.p,{children:["To prevent the ",(0,t.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Handler/",children:"Form.Handler"})," from being submitted when there are fields with errors inside the Isolation, you can use the ",(0,t.jsx)(e.code,{children:"bubbleValidation"})," property."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:'import { Form, Field } from \'@dnb/eufemia/extensions/forms\'\n\nrender(\n  <Form.Handler>\n    <Form.Isolation bubbleValidation>\n      <Field.String label="Required field" path="/isolated" required />\n      <Form.Isolation.CommitButton />\n    </Form.Isolation>\n  </Form.Handler>,\n)\n'})}),"\n",(0,t.jsx)(e.h2,{children:"Schema support"}),"\n",(0,t.jsxs)(e.p,{children:["You can also use a ",(0,t.jsx)(e.code,{children:"schema"})," to define the properties of the nested fields:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"import { Form, Field, JSONSchema } from '@dnb/eufemia/extensions/forms'\n\nconst isolatedSchema: JSONSchema = {\n  type: 'object',\n  properties: {\n    phoneNumber: {\n      type: 'string',\n      pattern: '^[0-9]{10}$',\n    },\n  },\n  required: ['phoneNumber'],\n}\n\nrender(\n  <Form.Handler>\n    <Form.Isolation schema={isolatedSchema}>\n      <Field.PhoneNumber path=\"/phoneNumber\" />\n    </Form.Isolation>\n  </Form.Handler>,\n)\n"})}),"\n",(0,t.jsx)(e.h2,{children:"Clear data from isolated fields"}),"\n",(0,t.jsxs)(e.p,{children:["You can clear the isolation by calling ",(0,t.jsx)(e.code,{children:"clearData"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:"import { Form, Field } from '@dnb/eufemia/extensions/forms'\n\nfunction MyForm() {\n  return (\n    <Form.Handler>\n      <Form.Isolation\n        onCommit={(data, { clearData }) => {\n          clearData()\n        }}\n      >\n        <Field.String path=\"/isolated\" />\n        <Form.Isolation.CommitButton />\n      </Form.Isolation>\n    </Form.Handler>\n  )\n}\n"})})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(r,n)})):r(n)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-isolation-mdx-99843dd76da4bb81894b.js.map