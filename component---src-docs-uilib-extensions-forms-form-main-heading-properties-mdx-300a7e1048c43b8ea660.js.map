{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-main-heading-properties-mdx-300a7e1048c43b8ea660.js","mappings":"6NAGO,MAAMA,EAA8C,CACzDC,MAAO,CACLC,IAAK,oFACLC,KAAM,SACNC,OAAQ,YAEVC,K,QAAMC,GAAgBD,KACtBE,SAAU,CACRL,IAAK,2BACLC,KAAM,aACNC,OAAQ,YAEV,0CAA2C,CACzCF,IAAK,2DACLC,KAAM,CAAC,SAAU,UACjBC,OAAQ,aCbZ,SAASI,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,OACHC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBV,SAAU,EAACW,EAAAA,EAAAA,KAAKR,EAAYG,GAAI,CAC9BN,SAAU,eACR,MAAMW,EAAAA,EAAAA,KAAKC,EAAAA,GAAiB,CAC9BV,MAAOT,MAGb,CAOA,MANA,SAAoBS,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOM,GAAYH,EAAAA,EAAAA,KAAKG,EAAWV,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DF,UAAUW,EAAAA,EAAAA,KAAKV,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,qLCfA,MAAMM,EAAa,IACdO,EAAAA,EACHC,EAAId,IAAUS,EAAAA,EAAAA,KAAA,WAAUT,KAGpBe,GAAcC,EAAAA,EAAAA,GAAOC,EAAAA,GAAK,CAAAC,OAAA,aAAZF,CAAa,CAAAG,KAAA,UAAAC,OAAA,4BAO3BC,EAAc,wBAIPC,EAAgBC,IAWtB,IAXuB,QAC5BC,EAAO,cACPC,EAAa,SACb3B,EAAQ,MACR4B,EAAQ,CAAC,KACNC,GAMJJ,EAIC,GAHIE,IACFC,EAAME,eAAiB,gBAED,iBAAb9B,EACT,OAAQ0B,GACN,IAAK,OACH,MAEF,IAAK,OACHE,EAAMG,MAAQ/B,EAASgC,WAAY,KAAMT,EAxB/B,sBA2BZ,IAAK,QACHK,EAAMG,MAAQ/B,EAASgC,WAAY,KAC/BT,EACa,cAAbvB,GAAyC,SAAbA,EA7BjB,wBAHJ,6BAqCb,QACE4B,EAAMK,WAAa,OACnBL,EAAMM,UAAY,OAIxB,OAAO1B,EAAW2B,KAAK,CAAEnC,WAAU4B,WAAUC,GAAO,EAGvC,SAASjB,EAAewB,GAYnC,IAZoC,MACtClC,EAAK,UACLmC,EAAY,SAAQ,UACpBC,EAAS,KACTC,EAAI,iBACJC,GAAmB,GAOpBJ,EACC,MAAMK,EAAOrC,OAAOqC,KAAKvC,GAAS,CAAC,GAC7BwC,EAAYtC,OAAOuC,QAAQzC,GAAS,CAAC,GAAG0C,KAAIC,IAAmB,IAAjBC,EAAK5C,GAAM2C,EAC7D,IAAK3C,EACH,OAAO,KAET,MAAM,KAAEN,EAAI,aAAEmD,EAAY,IAAEpD,EAAG,OAAEE,GAAWK,EAC5C,OAAIqC,GAAQA,EAAKS,SAASF,GACjB,MAIPrC,EAAAA,EAAAA,MAACwC,EAAAA,EAAE,CAAAjD,SAAA,EACDW,EAAAA,EAAAA,KAACuC,EAAAA,EAAE,CAAAlD,UACDW,EAAAA,EAAAA,KAACa,EAAa,CACZE,QAAQ,OACRC,cAA0B,eAAX9B,EAAwBG,SAEtCmD,EAAWb,GAAYc,EAAAA,EAAAA,IAAYN,GAAOA,QAG/CnC,EAAAA,EAAAA,KAACuC,EAAAA,EAAE,CAAAlD,UACCqD,MAAMC,QAAQ1D,GAAQA,EAAO,CAACA,IAC7BgD,KAAKW,IACJ,GAAiB,iBAANA,EAAgB,CACzB,GAAIC,OAAOD,GAAGP,SAAS,eAAgB,CACrC,GAAIK,MAAMC,QAAQjB,GAChB,OAAOA,EACJO,KAAI,CAACW,EAAGE,KAEL9C,EAAAA,EAAAA,KAACa,EAAa,CAAaE,QAAQ,OAAM1B,SACtCuD,GADiBA,EAAIE,KAK3BC,QAAO,CAACC,EAAMC,KACbnD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAV,SAAA,CACG2D,EAAK,KAAChD,EAAAA,EAAAA,KAAA,SAAM,IAAEiD,OAKvBL,EAAIlB,CACN,CAEA,OACE1B,EAAAA,EAAAA,KAACa,EAAa,CAASE,QAAQ,OAAM1B,SAClCuD,GADiBA,EAIxB,KAEDG,QAAO,CAACC,EAAMC,KACbnD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAV,SAAA,CACG2D,EAAK,KAAChD,EAAAA,EAAAA,KAAA,SAAM,IAAEiD,SAItBpB,IACC7B,EAAAA,EAAAA,KAACuC,EAAAA,EAAE,CAAAlD,SACA+C,GACCpC,EAAAA,EAAAA,KAACa,EAAa,CAACE,QAAQ,QAAO1B,SAAE+C,IAErB,aAAXlD,GAAyB,cAI/BY,EAAAA,EAAAA,MAACyC,EAAAA,EAAE,CAAAlD,SAAA,GACEwC,GAA+B,eAAX3C,KACrBY,EAAAA,EAAAA,MAAA,MAAAT,SAAA,CAAI,IAAEH,EAAO,SAEfc,EAAAA,EAAAA,KAACkD,EAAAA,EAAa,CAACrD,WAAYA,EAAWR,SACnCsC,EAAYwB,EAAmBnE,EAAK8C,GAAQ9C,SA5D1CmD,EA+DJ,IAIT,OACEnC,EAAAA,EAAAA,KAACQ,EAAAA,GAAAA,WAAgB,CAAAnB,UACfS,EAAAA,EAAAA,MAACQ,EAAW,CAAAjB,SAAA,EACVW,EAAAA,EAAAA,KAAA,SAAAX,UACES,EAAAA,EAAAA,MAACwC,EAAAA,EAAE,CAAAjD,SAAA,EACDW,EAAAA,EAAAA,KAACoD,EAAAA,EAAE,CAAA/D,SAAC,cACJW,EAAAA,EAAAA,KAACoD,EAAAA,EAAE,CAAA/D,SAAC,SACHwC,IAAoB7B,EAAAA,EAAAA,KAACoD,EAAAA,EAAE,CAAA/D,SAAC,mBACzBW,EAAAA,EAAAA,KAACoD,EAAAA,EAAE,CAAA/D,SAAC,sBAGRW,EAAAA,EAAAA,KAAA,SAAAX,SAAQ0C,QAIhB,CAGA,SAASoB,EAAmBnE,EAAa8C,GAIvC,OAHAA,EAAKuB,SAASlB,IACZnD,EAAMA,EAAIsE,QAAQ,IAAIC,OAAOpB,EAAK,MAAMM,EAAAA,EAAAA,IAAYN,GAAK,IAEpDnD,CACT,CAEO,SAASwD,EAAW9B,GACzB,OAAIA,EAAK2B,SAAS,MACTrC,EAAAA,EAAAA,KAACkD,EAAAA,EAAa,CAACrD,WAAYA,EAAWR,SAAEqB,IAG1CA,CACT,C,sCCnLA,IAAe6B,EAAE,C,uCCAjB,IAAea,EAAE,C,uCCAjB,IAAed,EAAE,C,kICAV,MAAMlD,EAAwC,IAChDoE,EAAAA,KACAC,EAAAA,GAGQC,EAAoC,IAC5CC,EAAAA,GAGQC,EAA0B,SACrClC,EACAmC,QAD+C,IAA/CnC,IAAAA,OAAkDoC,QACM,IAAxDD,IAAAA,OAA2DC,GAE3D,MAUMC,EAAc,IAVNrC,EACT,QAAOA,EAAUsC,SAAW,IAAM,OAAOtC,EAAUzC,OACpD,UAEQ4E,EACP,mBAAkBA,EAAmBG,SAAW,IAAM,OACrDH,EAAmB5E,OAErB,cAIJ,MAAO,IACFyE,EACHO,SAAU,IACLP,EAAYO,SACfhF,KAAM8E,GAERG,QAAS,IACJR,EAAYQ,QACfjF,KAAM8E,GAERI,OAAQ,IACHT,EAAYS,OACflF,KAAM8E,GAGZ,C,+EC7CO,MAAMN,EAAmD,CAC9DW,MAAO,CACLpF,IAAK,wDACLC,KAAM,SACNC,OAAQ,YAEVmF,iBAAkB,CAChBrF,IAAK,0EACLC,KAAM,SACNC,OAAQ,YAEVoF,YAAa,CACXtF,IAAK,gEACLC,KAAM,UACNC,OAAQ,YAEVC,KAAM,CACJH,IAAK,4YACLC,KAAM,SACNC,OAAQ,YAEVqF,OAAQ,CACNvF,IAAK,qEACLC,KAAM,SACNC,OAAQ,YAEVsF,cAAe,CACbxF,IAAK,8OACLC,KAAM,SACNC,OAAQ,YAEVuF,MAAO,CACLzF,IAAK,oLACLC,KAAM,CAAC,SAAU,SACjBC,OAAQ,YAEVwF,aAAc,CACZ1F,IAAK,iLACLC,KAAM,CAAC,SAAU,SACjBC,OAAQ,YAEV,0CAA2C,CACzCF,IAAK,2DACLC,KAAM,CAAC,SAAU,UACjBC,OAAQ,aAKCyF,EAA6C,IACrDlB,EACHmB,UAAW,CACT5F,IAAK,8FACLC,KAAM,CAAC,SAAU,SACjBC,OAAQ,YAEV2F,YAAa,CACX7F,IAAK,uIACLC,KAAM,SACNC,OAAQ,YAEV4F,WAAY,CACV9F,IAAK,iGACLC,KAAM,UACNC,OAAQ,YAEV6F,MAAO,CACL/F,IAAK,mFACLC,KAAM,CAAC,SAAU,SACjBC,OAAQ,YAEV8F,qBAAsB,CACpBhG,IAAK,2CACLC,KAAM,UACNC,OAAQ,YAEV+F,YAAa,CACXjG,IAAK,4DACLC,KAAM,SACNC,OAAQ,YAEVgG,SAAU,CACRlG,IAAK,8FACLC,KAAM,UACNC,OAAQ,Y,+ECpFL,MAAMsE,EAAsD,CACjE2B,MAAO,CACLnG,IAAK,uGACLC,KAAM,cACNC,OAAQ,YAEVkD,aAAc,CACZpD,IAAK,mHACLC,KAAM,cACNC,OAAQ,YAEVkG,KAAM,CACJpG,IAAK,oPACLC,KAAM,SACNC,OAAQ,YAEVmG,KAAM,CACJrG,IAAK,icACLC,KAAM,CAAC,aAAc,oBAAqB,YAC1CC,OAAQ,YAEVoG,QAAS,CACPtG,IAAK,ocACLC,KAAM,CAAC,aAAc,oBAAqB,YAC1CC,OAAQ,YAEVqG,MAAO,CACLvG,IAAK,kcACLC,KAAM,CAAC,QAAS,YAAa,2BAA4B,YACzDC,OAAQ,YAEVgG,SAAU,CACRlG,IAAK,kFACLC,KAAM,UACNC,OAAQ,YAEVsG,WAAY,CACVxG,IAAK,mMACLC,KAAM,CAAC,cAAe,aACtBC,OAAQ,YAEVuG,SAAU,CACRzG,IAAK,qMACLC,KAAM,UACNC,OAAQ,YAEVwG,YAAa,CACX1G,IAAK,wMACLC,KAAM,aACNC,OAAQ,YAEVyG,OAAQ,CACN3G,IAAK,+CACLC,KAAM,SACNC,OAAQ,YAEV0G,kBAAmB,CACjB5G,IAAK,2IACLC,KAAM,UACNC,OAAQ,YAEV2G,kBAAmB,CACjB7G,IAAK,yQACLC,KAAM,UACNC,OAAQ,YAEV4G,qBAAsB,CACpB9G,IAAK,8GACLC,KAAM,UACNC,OAAQ,YAEV6G,cAAe,CACb/G,IAAK,6EACLC,KAAM,SACNC,OAAQ,YAEV8G,kBAAmB,CACjBhH,IAAK,yZACLC,KAAM,WACNC,OAAQ,YAEV+G,gBAAiB,CACfjH,IAAK,ycACLC,KAAM,WACNC,OAAQ,YAEVgH,YAAa,CACXlH,IAAK,yEACLC,KAAM,WACNC,OAAQ,YAEViH,aAAc,CACZnH,IAAK,kRACLC,KAAM,WACNC,OAAQ,aAICyE,EAAkD,CAC7DM,SAAU,CACRjF,IAAK,mcACLC,KAAM,kBACNC,OAAQ,YAEVgF,QAAS,CACPlF,IAAK,oJACLC,KAAM,kBACNC,OAAQ,YAEViF,OAAQ,CACNnF,IAAK,qJACLC,KAAM,kBACNC,OAAQ,Y","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Form/MainHeading/MainHeadingDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/MainHeading/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueWritePropsDocs.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../../../shared/types'\nimport { FieldProperties } from '../../Field/FieldDocs'\n\nexport const MainHeadingProperties: PropertiesTableProps = {\n  level: {\n    doc: 'Define a specific level value to ensure correct level hierarchy. Defaults to `2`.',\n    type: 'number',\n    status: 'optional',\n  },\n  help: FieldProperties.help,\n  children: {\n    doc: 'Heading text / contents.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {MainHeadingProperties} from '@dnb/eufemia/src/extensions/forms/Form/MainHeading/MainHeadingDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: MainHeadingProperties\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colorValue = 'var(--color-success-green)'\nconst colorString = 'var(--color-fire-red)'\nconst colorType = 'var(--color-violet)'\nconst colorUndefined = 'var(--color-black-55)'\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = children.startsWith(`'`) ? colorString : colorType\n        // falls through\n      }\n      case 'value': {\n        style.color = children.startsWith(`'`)\n          ? colorString\n          : children === 'undefined' || children === 'null'\n          ? colorUndefined\n          : colorValue\n        // falls through\n      }\n      default: {\n        style.background = 'none'\n        style.boxShadow = 'none'\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('[')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { FieldBlockSharedProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  DataValueWritePropsEvents,\n  DataValueWritePropsProperties,\n} from '../hooks/DataValueWritePropsDocs'\n\nexport const FieldProperties: PropertiesTableProps = {\n  ...DataValueWritePropsProperties,\n  ...FieldBlockSharedProperties,\n}\n\nexport const FieldEvents: PropertiesTableProps = {\n  ...DataValueWritePropsEvents,\n}\n\nexport const getFieldEventsWithTypes = (\n  valueType: { type: string; optional?: boolean } = undefined,\n  additionalArgsType: { type: string; optional?: boolean } = undefined\n): PropertiesTableProps => {\n  const value = valueType\n    ? `value${valueType.optional ? '?' : ''}: ${valueType.type}`\n    : 'value'\n\n  const add = additionalArgsType\n    ? `, additionalArgs${additionalArgsType.optional ? '?' : ''}: ${\n        additionalArgsType.type\n      }`\n    : ''\n\n  const typeString = `(${value}${add}) => void`\n\n  return {\n    ...FieldEvents,\n    onChange: {\n      ...FieldEvents.onChange,\n      type: typeString,\n    },\n    onFocus: {\n      ...FieldEvents.onFocus,\n      type: typeString,\n    },\n    onBlur: {\n      ...FieldEvents.onBlur,\n      type: typeString,\n    },\n  }\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const FieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  help: {\n    doc: 'Provide help content for the field using `title` and `content` as a string or React.Node. Additionally, you can set `open` to `true` to display the inline help, set the `breakout` property to `false` to disable the breakout of the inline help content, or use `renderAs` set to `dialog` to render the content in a [Dialog](/uilib/components/dialog/) (recommended for larger amounts of content).',\n    type: 'object',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  layoutOptions: {\n    doc: 'Use this to set additional options for the `horizontal` layout. E.g. `{ width: \"medium\" }`. You can also use a custom width `{number}rem`. Instead of a width, you can use a min/max width. E.g. `{ minWidth: \"6rem\", maxWidth: \"12rem\" }`.',\n    type: 'object',\n    status: 'optional',\n  },\n  width: {\n    doc: 'Will set the width for the whole block. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: 'Will set the width for its contents. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\n/** For internal use only */\nexport const FieldBlockProperties: PropertiesTableProps = {\n  ...FieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading sizes](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  labelHeight: {\n    doc: 'Defines the height of an component (size prop), so the label can be aligned correctly. Can be `default`, `small`, `medium`, `large`.',\n    type: 'string',\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  disableStatusSummary: {\n    doc: 'Use `true` to disable the error summary.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'string',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const DataValueWritePropsProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: \"Info message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  warning: {\n    doc: \"Warning message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  error: {\n    doc: \"Error message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['Error', 'FormError', 'Array<Error | FormError>', 'function'],\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set to `true`, the field will give an error if the value fails the required validation. When set to `false`, the field will not be required, but will add a \"(optional)\" suffix to the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSuffix: {\n    doc: 'Will append an additional text to the label, like \"(optional)\". When using `inheritLabel`, the suffix will not be inherited. NB: The visual appearance of the `labelSuffix` may change in the future.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set to `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set to `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateContinuously: {\n    doc: 'Set to `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages.',\n    type: 'object',\n    status: 'optional',\n  },\n  onChangeValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered on every change done by the user. The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered when the user leaves a field (e.g., blurring a text input or closing a dropdown). The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'Transforms the value before it gets forwarded to the form data object (context) or returned as the `onChange` value parameter. The first parameter is the internal value. Some fields to support a second parameter, like the SelectCountry, where the country object is given.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const DataValueWritePropsEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`.\",\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument.',\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument.',\n    type: '(value) => void',\n    status: 'optional',\n  },\n}\n"],"names":["MainHeadingProperties","level","doc","type","status","help","FieldProperties","children","_createMdxContent","props","_components","Object","assign","h2","_provideComponents","components","_jsxs","_Fragment","_jsx","PropertiesTable","wrapper","MDXLayout","basicComponents","p","StyledTable","_styled","Table","target","name","styles","colorString","FormattedCode","_ref","variant","strikethrough","style","rest","textDecoration","color","startsWith","background","boxShadow","code","_ref2","valueType","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","defaultValue","includes","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp","DataValueWritePropsProperties","FieldBlockSharedProperties","FieldEvents","DataValueWritePropsEvents","getFieldEventsWithTypes","additionalArgsType","undefined","typeString","optional","onChange","onFocus","onBlur","label","labelDescription","labelSrOnly","layout","layoutOptions","width","contentWidth","FieldBlockProperties","labelSize","labelHeight","asFieldset","align","disableStatusSummary","composition","disabled","value","path","info","warning","error","emptyValue","required","labelSuffix","schema","validateInitially","validateUnchanged","validateContinuously","errorMessages","onChangeValidator","onBlurValidator","transformIn","transformOut"],"sourceRoot":""}