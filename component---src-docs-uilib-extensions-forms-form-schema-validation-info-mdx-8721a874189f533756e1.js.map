{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-schema-validation-info-mdx-8721a874189f533756e1.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/schema-validation/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    h4: \"h4\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"JSON Schema is a vocabulary for annotating and validating data in js. More about JSON Schema on \", _jsx(_components.a, {\n        href: \"https://json-schema.org/\",\n        children: \"json-schema.org\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A schema can be used from the simplest description of the data type of a value:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"{\\n  type: 'string'\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Results in:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"\\\"Foo\\\"\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To an object with both rules for required fields and validation rules for single values:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"{\\n  type: \\\"object\\\",\\n  properties: {\\n    textField: { type: 'string', minLength: 5 },\\n    numberField: { type: 'number', maximum: 100 },\\n  },\\n  required: ['textField']\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Results in:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"{\\n  \\\"textField\\\": \\\"abcde\\\",\\n  \\\"numberField\\\": 123\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Using schema with DataContext\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"These two examples will result in the same validation for the user:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Form.Handler data={user}>\\n  <Field.String path=\\\"/name\\\" label=\\\"Name\\\" minLength={3} required />\\n  <Field.Email path=\\\"/email\\\" label=\\\"E-mail\\\" required />\\n  <Field.Number\\n    path=\\\"/birthyear\\\"\\n    label=\\\"Birth year\\\"\\n    minimum={1900}\\n    maximum={2023}\\n    required\\n  />\\n</Form.Handler>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"vs.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { JSONSchema } from '@dnb/eufemia/extensions/forms'\\n\\nconst schema: JSONSchema = {\\n  properties: {\\n    name: { minLength: 3 },\\n    email: { type: 'string' },\\n    birthyear: { minimum: 1900, maximum: 2023 },\\n  },\\n  required: ['name', 'email', 'birthyear'],\\n}\\n\\n<Form.Handler data={user} schema={schema}>\\n  <Field.String path=\\\"/name\\\" label=\\\"Name\\\" />\\n  <Field.Email path=\\\"/email\\\" label=\\\"E-mail\\\" />\\n  <Field.Number path=\\\"/birthyear\\\" label=\\\"Birth year\\\" />\\n</Form.Handler>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This makes it possible to create a uniform, testable description and requirements specification for the data, which can be tested independently of frontend code, and used across systems, e.g. frontend and backend.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Also, note you can describe the schema without using the \", _jsx(_components.code, {\n        children: \"type\"\n      }), \" property, as the type is inferred from schema type. More on that topic in the \", _jsx(_components.a, {\n        href: \"https://ajv.js.org/guide/typescript.html#utility-types-for-schemas\",\n        children: \"Ajv docs\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Fields which are disabled or read-only\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Fields which have the \", _jsx(_components.code, {\n        children: \"disabled\"\n      }), \" prop or the \", _jsx(_components.code, {\n        children: \"readOnly\"\n      }), \" prop, will skip validation.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"JSONSchema and TypeScript\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can import the \", _jsx(_components.code, {\n        children: \"JSONSchema\"\n      }), \" type from the \", _jsx(_components.code, {\n        children: \"@dnb/eufemia/extensions/forms\"\n      }), \" package.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { JSONSchema } from '@dnb/eufemia/extensions/forms'\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Its a shorthand for \", _jsx(_components.code, {\n        children: \"JSONSchema7\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also use the utility \", _jsx(_components.code, {\n        children: \"JSONSchemaType\"\n      }), \" type, so you can validate your data types.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"NB:\"\n      }), \" This requires \", _jsx(_components.code, {\n        children: \"strictNullChecks\"\n      }), \" in the \", _jsx(_components.code, {\n        children: \"tsconfig\"\n      }), \" settings to be true.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { JSONSchemaType } from '@dnb/eufemia/extensions/forms'\\n\\ntype MyData = {\\n  foo: number\\n  bar?: string\\n}\\n\\nconst schema: JSONSchemaType<MyData> = {\\n  type: 'object',\\n  properties: {\\n    foo: { type: 'integer' },\\n    bar: { type: 'string', nullable: true },\\n  },\\n  required: ['foo'],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Complex schemas\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In addition to basic validation as in the example above, JSON Schema can be used for more complex. Examples of definitions supported by the standard are:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Requirement that the object must not have other properties than those defined in \", _jsx(_components.code, {\n          children: \"properties\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Nested data structures and combinations of objects and arrays with rules for array elements (fixed or repetitive elements).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Regular expressions for the syntax of individual values.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Enum (a set of valid values).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Rules for the number of elements in arrays.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Rules for the number of properties in objects.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Predefined format rules (eg 'uri', 'email' and 'hostname').\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Logical operators such as 'not', 'oneOf', 'allOf' and 'anyOf' which can be filled with rules for all or part of the data set.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Rule set based on the content of values (if-then-else).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Rules (sub-schemas) that become applicable if a given value is present.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Reuse within the definition, such as one and the same object structure being used as a definition for several locations in a structure.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To learn more about what is possible with the JSON Schema standard, see \", _jsx(_components.a, {\n        href: \"https://json-schema.org/\",\n        children: \"json-schema.org\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Custom Ajv instance and keywords\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can provide your custom \", _jsx(_components.code, {\n        children: \"validate\"\n      }), \" function with your own keywords to your schema. Below are two examples of how to do that.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First, you need to create your won instance of Ajv:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { Ajv } from '@dnb/eufemia/extensions/forms'\\n\\nconst ajv = new Ajv({\\n  strict: true,\\n  allErrors: true,\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then you add your custom keyword to the Ajv instance:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// Add a custom keyword 'isEven'\\najv.addKeyword({\\n  keyword: 'isEven',\\n  validate: (schema, value) => {\\n    // Check if the number is even.\\n    return value % 2 === 0\\n  },\\n})\\n\\n// Now we can use the 'isEven' keyword in our schema.\\nconst schema = {\\n  type: 'object',\\n  properties: {\\n    myKey: {\\n      type: 'string',\\n      isEven: true, // The number must be even.\\n    },\\n  },\\n} as const\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use \", _jsx(_components.code, {\n        children: \"as const\"\n      }), \" to make sure the schema is not inferred as \", _jsx(_components.code, {\n        children: \"JSONSchema7\"\n      }), \" but as a literal type.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"And finally add the Ajv instance to your form:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Handler schema={schema} ajvInstance={ajv}>\\n    <Field.String path=\\\"/myKey\\\" value=\\\"1\\\" validateInitially />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Custom Ajv keyword in a field\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is another example of a custom keyword, used in one field only:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Ajv } from '@dnb/'\\nimport { Form, Field } from '@dnb/eufemia/extensions/forms'\\n\\nconst ajv = new Ajv({\\n  strict: true,\\n  allErrors: true,\\n})\\n\\najv.addKeyword({\\n  keyword: 'notEmpty',\\n  validate: (schema, value) => {\\n    return value.length > 0\\n  },\\n})\\n\\nconst schema = {\\n  type: 'string',\\n  notEmpty: true, // The value must be more than one character.\\n} as const\\n\\nrender(\\n  <Form.Handler ajvInstance={ajv}>\\n    <Field.String\\n      schema={schema}\\n      path=\\\"/myKey\\\"\\n      value=\\\"\\\"\\n      validateInitially\\n    />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can find more info about error messages in the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/error-messages/\",\n        children: \"Error messages\"\n      }), \" docs.\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Custom error messages\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When having a custom keyword, you can provide custom error message on four levels with the \", _jsx(_components.code, {\n        children: \"errorMessage\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"errorMessages\"\n      }), \" prop:\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"On the schema level.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"On the Form.Handler (Provider) level.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"On the Form.Handler (Provider) level with a JSON Pointer path.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"On the field level.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The levels are prioritized in the order above, so the field level error message will overwrite all other levels.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is an example of how to do that:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const schema = {\\n  type: 'string',\\n  notEmpty: true, // The value must be more than one character.\\n  // Level 1\\n  errorMessage: 'You can provide a custom message in the schema itself',\\n} as const\\n\\nrender(\\n  <Form.Handler\\n    ajvInstance={ajv}\\n    errorMessages={{\\n      // Level 2\\n      notEmpty: 'Or on the provider',\\n      '/myKey': {\\n        // Level 3\\n        notEmpty: 'Or on the provider for just one field',\\n      },\\n    }}\\n  >\\n    <Field.String\\n      schema={schema}\\n      path=\\\"/myKey\\\"\\n      value=\\\"\\\"\\n      validateInitially\\n      errorMessages={{\\n        // Level 4\\n        notEmpty: 'Or on a single Field itself',\\n      }}\\n    />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can find more info about error messages in the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/error-messages/\",\n        children: \"Error messages\"\n      }), \" docs.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","a","pre","code","h3","strong","ul","li","h4","ol","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","className","wrapper","MDXLayout"],"sourceRoot":""}