{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-schema-validation-mdx-67aa323ea8f602bb8da8.js","mappings":"8MAKA,SAASA,EAAkBC,GACzB,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKC,EAAAA,QAAM,CAAC,GAAI,MAAMD,EAAAA,EAAAA,KAAKE,EAAAA,QAAO,CAAC,KAElD,CAOA,UANA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOO,QAASC,GAAaC,OAAOC,OAAO,CAAC,GAAGC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOJ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWC,OAAOC,OAAO,CAAC,EAAGV,EAAO,CAC1DG,UAAUC,EAAAA,EAAAA,KAAKL,EAAmBC,MAC9BD,GACR,C,mSCVO,MAAMc,EAAoBA,KAC/BT,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,mFAOWY,EAAgBA,KAC3BX,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,khBA2BWa,EAAeA,KAC1BZ,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAX,SAAA,qgCA0CWc,EAAsBA,KACjCb,EAAAA,EAAAA,KAAAU,EAAAA,EAAA,CAAAI,MAAA,CACFC,UACA,KAAAhB,SAAA,woFCnFA,SAASJ,EAAkBC,GACzB,MAAMoB,EAAcX,OAAOC,OAAO,CAChCW,GAAI,KACJC,GAAI,KACJC,EAAG,MACFZ,EAAAA,EAAAA,MAAsBX,EAAMY,YAM/B,OALKY,GAAUC,EAAqB,YAAY,GAC3CD,GAAwBC,EAAqB,0BAA0B,GACvED,GAA8BC,EAAqB,gCAAgC,GACnFD,GAAuBC,EAAqB,yBAAyB,GACrED,GAA4BC,EAAqB,8BAA8B,IAC7ExB,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKgB,EAAYC,GAAI,CAC9BlB,SAAU,UACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYE,GAAI,CAC7BnB,SAAU,4BACR,MAAMC,EAAAA,EAAAA,KAAKoB,EAA4B,CAAC,GAAI,MAAMpB,EAAAA,EAAAA,KAAKgB,EAAYE,GAAI,CACzEnB,SAAU,gCACR,MAAMC,EAAAA,EAAAA,KAAKoB,EAAwB,CAAC,GAAI,MAAMpB,EAAAA,EAAAA,KAAKgB,EAAYE,GAAI,CACrEnB,SAAU,wBACR,MAAMC,EAAAA,EAAAA,KAAKoB,EAAuB,CAAC,GAAI,MAAMpB,EAAAA,EAAAA,KAAKgB,EAAYE,GAAI,CACpEnB,SAAU,0BACR,MAAMC,EAAAA,EAAAA,KAAK,KAAM,CACnBD,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYG,EAAG,CAC5BpB,SAAU,gMAEV,MAAMC,EAAAA,EAAAA,KAAKoB,EAA8B,CAAC,KAElD,CAOA,MANA,SAAoBxB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOO,QAASC,GAAaC,OAAOC,OAAO,CAAC,GAAGC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOJ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWC,OAAOC,OAAO,CAAC,EAAGV,EAAO,CAC1DG,UAAUC,EAAAA,EAAAA,KAAKL,EAAmBC,MAC9BD,EAAkBC,EAC1B,EAEA,SAASyB,EAAqBC,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,C,yDCvCA,SAAS3B,EAAkBC,GACzB,MAAMoB,EAAcX,OAAOC,OAAO,CAChCW,GAAI,KACJQ,GAAI,KACJC,GAAI,KACJC,EAAG,IACHR,EAAG,IACHS,IAAK,MACLC,KAAM,OACNC,OAAQ,SACRZ,GAAI,KACJa,GAAI,OACHxB,EAAAA,EAAAA,MAAsBX,EAAMY,YAC/B,OAAOX,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKgB,EAAYC,GAAI,CAC9BlB,SAAU,sBACR,MAAMF,EAAAA,EAAAA,MAAMmB,EAAYS,GAAI,CAC9B1B,SAAU,CAAC,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CACpC3B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYW,EAAG,CAC5BK,KAAM,iBACNjC,SAAU,oBAEV,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CAC7B3B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYW,EAAG,CAC5BK,KAAM,iCACNjC,SAAU,oCAEV,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CAC7B3B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYW,EAAG,CAC5BK,KAAM,0CACNjC,SAAU,6CAEV,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CAC7B3B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYW,EAAG,CAC5BK,KAAM,6BACNjC,SAAU,gCAEV,MAAMF,EAAAA,EAAAA,MAAMmB,EAAYU,GAAI,CAC9B3B,SAAU,EAACC,EAAAA,EAAAA,KAAKgB,EAAYW,EAAG,CAC7BK,KAAM,mBACNjC,SAAU,oBACR,MAAMF,EAAAA,EAAAA,MAAMmB,EAAYS,GAAI,CAC9B1B,SAAU,CAAC,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CACpC3B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYW,EAAG,CAC5BK,KAAM,oCACNjC,SAAU,uCAEV,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CAC7B3B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYW,EAAG,CAC5BK,KAAM,iCACNjC,SAAU,oCAEV,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CAC7B3B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYW,EAAG,CAC5BK,KAAM,yBACNjC,SAAU,4BAEV,QACF,QACF,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CAC7B3B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYW,EAAG,CAC5BK,KAAM,+BACNjC,SAAU,kCAEV,QACF,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYC,GAAI,CAC7BlB,SAAU,kBACR,MAAMF,EAAAA,EAAAA,MAAMmB,EAAYG,EAAG,CAC7BpB,SAAU,CAAC,oGAAoGC,EAAAA,EAAAA,KAAKgB,EAAYW,EAAG,CACjIK,KAAM,2BACNjC,SAAU,uBAEV,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYG,EAAG,CAC5BpB,SAAU,oFACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYY,IAAK,CAC9B7B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC/BI,UAAW,cACXlC,SAAU,+BAEV,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYG,EAAG,CAC5BpB,SAAU,gBACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYY,IAAK,CAC9B7B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC/BI,UAAW,gBACXlC,SAAU,cAEV,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYG,EAAG,CAC5BpB,SAAU,6FACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYY,IAAK,CAC9B7B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC/BI,UAAW,cACXlC,SAAU,0LAEV,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYG,EAAG,CAC5BpB,SAAU,gBACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYY,IAAK,CAC9B7B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC/BI,UAAW,gBACXlC,SAAU,4DAEV,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYC,GAAI,CAC7BlB,SAAU,kCACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYG,EAAG,CAC5BpB,SAAU,wEACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYY,IAAK,CAC9B7B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC/BI,UAAW,eACXlC,SAAU,8SAEV,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYG,EAAG,CAC5BpB,SAAU,QACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYY,IAAK,CAC9B7B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC/BI,UAAW,eACXlC,SAAU,yfAEV,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYG,EAAG,CAC5BpB,SAAU,0NACR,MAAMF,EAAAA,EAAAA,MAAMmB,EAAYG,EAAG,CAC7BpB,SAAU,CAAC,6DAA6DC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC7F9B,SAAU,SACR,mFAAmFC,EAAAA,EAAAA,KAAKgB,EAAYW,EAAG,CACzGK,KAAM,qEACNjC,SAAU,aACR,OACF,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYC,GAAI,CAC7BlB,SAAU,2CACR,MAAMF,EAAAA,EAAAA,MAAMmB,EAAYG,EAAG,CAC7BpB,SAAU,CAAC,0BAA0BC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC1D9B,SAAU,aACR,qBAAqBC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC9C9B,SAAU,aACR,sCACF,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYC,GAAI,CAC7BlB,SAAU,8BACR,MAAMF,EAAAA,EAAAA,MAAMmB,EAAYG,EAAG,CAC7BpB,SAAU,CAAC,uBAAuBC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CACvD9B,SAAU,eACR,mBAAmBC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC5C9B,SAAU,kCACR,eACF,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYY,IAAK,CAC9B7B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC/BI,UAAW,cACXlC,SAAU,mEAEV,MAAMF,EAAAA,EAAAA,MAAMmB,EAAYG,EAAG,CAC7BpB,SAAU,CAAC,yBAAyBC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CACzD9B,SAAU,gBACR,OACF,MAAMF,EAAAA,EAAAA,MAAMmB,EAAYG,EAAG,CAC7BpB,SAAU,CAAC,iCAAiCC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CACjE9B,SAAU,mBACR,iDACF,MAAMF,EAAAA,EAAAA,MAAMmB,EAAYG,EAAG,CAC7BpB,SAAU,EAACC,EAAAA,EAAAA,KAAKgB,EAAYc,OAAQ,CAClC/B,SAAU,QACR,mBAAmBC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC5C9B,SAAU,qBACR,YAAYC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CACrC9B,SAAU,aACR,2BACF,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYY,IAAK,CAC9B7B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC/BI,UAAW,cACXlC,SAAU,wTAEV,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYC,GAAI,CAC7BlB,SAAU,oBACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYG,EAAG,CAC5BpB,SAAU,8JACR,MAAMF,EAAAA,EAAAA,MAAMmB,EAAYS,GAAI,CAC9B1B,SAAU,CAAC,MAAMF,EAAAA,EAAAA,MAAMmB,EAAYU,GAAI,CACrC3B,SAAU,CAAC,qFAAqFC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CACrH9B,SAAU,eACR,OACF,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CAC7B3B,SAAU,gIACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CAC7B3B,SAAU,6DACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CAC7B3B,SAAU,kCACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CAC7B3B,SAAU,gDACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CAC7B3B,SAAU,mDACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CAC7B3B,SAAU,gEACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CAC7B3B,SAAU,kIACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CAC7B3B,SAAU,4DACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CAC7B3B,SAAU,4EACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CAC7B3B,SAAU,4IACR,QACF,MAAMF,EAAAA,EAAAA,MAAMmB,EAAYG,EAAG,CAC7BpB,SAAU,CAAC,4EAA4EC,EAAAA,EAAAA,KAAKgB,EAAYW,EAAG,CACzGK,KAAM,2BACNjC,SAAU,oBACR,OACF,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYE,GAAI,CAC7BnB,SAAU,qCACR,MAAMF,EAAAA,EAAAA,MAAMmB,EAAYG,EAAG,CAC7BpB,SAAU,CAAC,gCAAgCC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAChE9B,SAAU,aACR,gGACF,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYG,EAAG,CAC5BpB,SAAU,wDACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYY,IAAK,CAC9B7B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC/BI,UAAW,cACXlC,SAAU,8HAEV,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYG,EAAG,CAC5BpB,SAAU,0DACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYY,IAAK,CAC9B7B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC/BI,UAAW,cACXlC,SAAU,6ZAEV,MAAMF,EAAAA,EAAAA,MAAMmB,EAAYG,EAAG,CAC7BpB,SAAU,CAAC,QAAQC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CACxC9B,SAAU,aACR,gDAAgDC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CACzE9B,SAAU,gBACR,6BACF,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYG,EAAG,CAC5BpB,SAAU,mDACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYY,IAAK,CAC9B7B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC/BI,UAAW,eACXlC,SAAU,4NAEV,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYE,GAAI,CAC7BnB,SAAU,kCACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYG,EAAG,CAC5BpB,SAAU,yEACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYY,IAAK,CAC9B7B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC/BI,UAAW,eACXlC,SAAU,skBAEV,MAAMF,EAAAA,EAAAA,MAAMmB,EAAYG,EAAG,CAC7BpB,SAAU,CAAC,uDAAuDC,EAAAA,EAAAA,KAAKgB,EAAYW,EAAG,CACpFK,KAAM,+CACNjC,SAAU,mBACR,YACF,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYE,GAAI,CAC7BnB,SAAU,0BACR,MAAMF,EAAAA,EAAAA,MAAMmB,EAAYG,EAAG,CAC7BpB,SAAU,CAAC,+FAA+FC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC/H9B,SAAU,iBACR,QAAQC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CACjC9B,SAAU,kBACR,gBACF,MAAMF,EAAAA,EAAAA,MAAMmB,EAAYe,GAAI,CAC9BhC,SAAU,CAAC,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CACpC3B,SAAU,yBACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CAC7B3B,SAAU,0CACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CAC7B3B,SAAU,mEACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYU,GAAI,CAC7B3B,SAAU,wBACR,QACF,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYG,EAAG,CAC5BpB,SAAU,qHACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYG,EAAG,CAC5BpB,SAAU,0CACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYY,IAAK,CAC9B7B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC/BI,UAAW,eACXlC,SAAU,gsBAEV,MAAMF,EAAAA,EAAAA,MAAMmB,EAAYG,EAAG,CAC7BpB,SAAU,CAAC,uDAAuDC,EAAAA,EAAAA,KAAKgB,EAAYW,EAAG,CACpFK,KAAM,+CACNjC,SAAU,mBACR,YACF,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYC,GAAI,CAC7BlB,SAAU,gCACR,MAAMF,EAAAA,EAAAA,MAAMmB,EAAYG,EAAG,CAC7BpB,SAAU,CAAC,0EAA0EC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC1G9B,SAAU,QACR,qBAAqBC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC9C9B,SAAU,yBACR,0DACF,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYY,IAAK,CAC9B7B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC/BI,UAAW,eACXlC,SAAU,2QAEV,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYY,IAAK,CAC9B7B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC/BI,UAAW,gBACXlC,SAAU,oLAEV,MAAMF,EAAAA,EAAAA,MAAMmB,EAAYG,EAAG,CAC7BpB,SAAU,CAAC,oBAAoBC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CACpD9B,SAAU,gBACR,qBAAqBC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC9C9B,SAAU,yBACR,qEACF,MAAMC,EAAAA,EAAAA,KAAKgB,EAAYY,IAAK,CAC9B7B,UAAUC,EAAAA,EAAAA,KAAKgB,EAAYa,KAAM,CAC/BI,UAAW,eACXlC,SAAU,g6BAIlB,CAOA,UANA,SAAoBH,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOO,QAASC,GAAaC,OAAOC,OAAO,CAAC,GAAGC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOJ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWC,OAAOC,OAAO,CAAC,EAAGV,EAAO,CAC1DG,UAAUC,EAAAA,EAAAA,KAAKL,EAAmBC,MAC9BD,EAAkBC,EAC1B,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/schema-validation.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/schema-validation/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/schema-validation/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/schema-validation/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/Form/schema-validation/info';\nimport Demos from 'Docs/uilib/extensions/forms/Form/schema-validation/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Flex } from '@dnb/eufemia/src'\nimport { Form, Field, Iterate } from '@dnb/eufemia/src/extensions/forms'\nimport { trash as TrashIcon } from '@dnb/eufemia/src/icons'\n\nexport const SingleFieldSchema = () => {\n  return (\n    <ComponentBox>\n      <Field.String schema={{ type: 'string', minLength: 5 }} />\n    </ComponentBox>\n  )\n}\n\nexport const DataSetSchema = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        data={{\n          address: 'Prefilled address',\n        }}\n        schema={{\n          properties: {\n            name: { minLength: 2 },\n            address: { minLength: 3 },\n          },\n          required: ['name', 'address'],\n        }}\n      >\n        <Form.Card gap=\"small\" bottom=\"small\">\n          <Form.MainHeading>Company information</Form.MainHeading>\n\n          <Field.String path=\"/name\" label=\"Name\" />\n          <Field.String path=\"/address\" label=\"Address\" />\n        </Form.Card>\n\n        <Form.SubmitButton />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const IfRuleSchema = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        data={{}}\n        schema={{\n          type: 'object',\n          properties: {\n            name: { type: 'string' },\n            customerType: {\n              type: 'string',\n              enum: ['corporate', 'private'],\n            },\n            companyName: { type: 'string' },\n          },\n          if: {\n            properties: { customerType: { enum: ['corporate'] } },\n            required: ['customerType'],\n          },\n          then: { required: ['name', 'companyName'] },\n          else: { required: ['name'] },\n        }}\n      >\n        <Form.Card gap=\"small\">\n          <Form.MainHeading>Customer information</Form.MainHeading>\n\n          <Field.String path=\"/name\" label=\"Name\" />\n          <Field.String\n            path=\"/customerType\"\n            label=\"Customer type (corporate or private)\"\n          />\n          <Field.Name.Company\n            path=\"/companyName\"\n            labelDescription=\"Company name (required for corporate customers)\"\n          />\n        </Form.Card>\n\n        <Form.SubmitButton />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const DependantListSchema = () => {\n  return (\n    <ComponentBox scope={{ TrashIcon }}>\n      <Form.Handler\n        data={{\n          accounts: [{}],\n        }}\n        schema={{\n          type: 'object',\n          definitions: {\n            account: {\n              type: 'object',\n              properties: {\n                accountNumber: {\n                  type: 'string',\n                  pattern: '^[0-9]{11}$',\n                },\n                alias: {\n                  type: 'string',\n                  minLength: 2,\n                  maxLength: 32,\n                },\n              },\n              required: ['accountNumber'],\n            },\n          },\n          properties: {\n            name: { type: 'string' },\n            email: { type: 'string' },\n            phone: { type: 'string' },\n            accounts: {\n              type: 'array',\n              items: {\n                $ref: '#/definitions/account',\n              },\n            },\n            bsuAccount: {\n              $ref: '#/definitions/account',\n            },\n          },\n          oneOf: [\n            {\n              properties: {\n                accounts: {\n                  type: 'array',\n                  minItems: 1,\n                },\n              },\n            },\n            {\n              properties: {\n                accounts: {\n                  type: 'array',\n                  minItems: 0,\n                },\n                bsuAccount: {\n                  type: 'object',\n                  required: ['accountNumber'],\n                },\n              },\n              required: ['bsuAccount'],\n            },\n          ],\n        }}\n      >\n        <Flex.Vertical gap=\"small\">\n          <Form.MainHeading>Customer information</Form.MainHeading>\n          <Form.Card gap=\"small\">\n            <Field.String path=\"/name\" label=\"Name\" />\n            <Field.Email path=\"/email\" label=\"E-mail\" />\n            <Field.PhoneNumber path=\"/phone\" label=\"Phone number\" />\n          </Form.Card>\n\n          <Form.MainHeading>Accounts</Form.MainHeading>\n          <Form.Card gap=\"small\">\n            <Form.SubHeading>Standard accounts</Form.SubHeading>\n\n            <Iterate.Array path=\"/accounts\">\n              <Flex.Horizontal align=\"flex-end\">\n                <Field.BankAccountNumber\n                  itemPath=\"/accountNumber\"\n                  label=\"Account number\"\n                />\n                <Field.String\n                  itemPath=\"/alias\"\n                  label=\"Alias\"\n                  width=\"medium\"\n                />\n                <Iterate.RemoveButton icon={TrashIcon} />\n              </Flex.Horizontal>\n            </Iterate.Array>\n\n            <Iterate.PushButton\n              icon=\"add\"\n              icon_position=\"left\"\n              text=\"Add account\"\n              path=\"/accounts\"\n              pushValue={{}}\n              size=\"medium\"\n            />\n\n            <Form.SubHeading>BSU Account</Form.SubHeading>\n            <Field.BankAccountNumber\n              path=\"/bsuAccount/accountNumber\"\n              label=\"Account number\"\n            />\n            <Field.String path=\"/bsuAccount/alias\" label=\"Alias\" />\n          </Form.Card>\n\n          <Form.SubmitButton />\n        </Flex.Vertical>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.DataSetSchema) _missingMdxReference(\"Examples.DataSetSchema\", true);\n  if (!Examples.DependantListSchema) _missingMdxReference(\"Examples.DependantListSchema\", true);\n  if (!Examples.IfRuleSchema) _missingMdxReference(\"Examples.IfRuleSchema\", true);\n  if (!Examples.SingleFieldSchema) _missingMdxReference(\"Examples.SingleFieldSchema\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Schema for single field\"\n    }), \"\\n\", _jsx(Examples.SingleFieldSchema, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Schema for a whole data set\"\n    }), \"\\n\", _jsx(Examples.DataSetSchema, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Schema with if-rule\"\n    }), \"\\n\", _jsx(Examples.IfRuleSchema, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Dependant list schema\"\n    }), \"\\n\", _jsx(\"em\", {\n      children: _jsx(_components.p, {\n        children: \"Becoming a new customer, this form requires at least one normal account\\nto be added, unless the customer opens a BSU account, then normal\\naccounts can still be added, but is optional.\"\n      })\n    }), \"\\n\", _jsx(Examples.DependantListSchema, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    strong: \"strong\",\n    h3: \"h3\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Table of Contents\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#about-schemas\",\n          children: \"About schemas\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#using-schema-with-datacontext\",\n          children: \"Using schema with DataContext\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#fields-which-are-disabled-or-read-only\",\n          children: \"Fields which are disabled or read-only\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#jsonschema-and-typescript\",\n          children: \"JSONSchema and TypeScript\"\n        })\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"#complex-schemas\",\n          children: \"Complex schemas\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: _jsx(_components.a, {\n              href: \"#custom-ajv-instance-and-keywords\",\n              children: \"Custom Ajv instance and keywords\"\n            })\n          }), \"\\n\", _jsx(_components.li, {\n            children: _jsx(_components.a, {\n              href: \"#custom-ajv-keyword-in-a-field\",\n              children: \"Custom Ajv keyword in a field\"\n            })\n          }), \"\\n\", _jsx(_components.li, {\n            children: _jsx(_components.a, {\n              href: \"#custom-error-messages\",\n              children: \"Custom error messages\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#generate-schema-from-fields\",\n          children: \"Generate schema from fields\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"About schemas\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"JSON Schema is a vocabulary for annotating and validating data in js. More about JSON Schema on \", _jsx(_components.a, {\n        href: \"https://json-schema.org/\",\n        children: \"json-schema.org\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A schema can be used from the simplest description of the data type of a value:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"{\\n  type: 'string'\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Results in:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"\\\"Foo\\\"\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To an object with both rules for required fields and validation rules for single values:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"{\\n  type: \\\"object\\\",\\n  properties: {\\n    textField: { type: 'string', minLength: 5 },\\n    numberField: { type: 'number', maximum: 100 },\\n  },\\n  required: ['textField']\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Results in:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"{\\n  \\\"textField\\\": \\\"abcde\\\",\\n  \\\"numberField\\\": 123\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Using schema with DataContext\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"These two examples will result in the same validation for the user:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Form.Handler data={user}>\\n  <Field.String path=\\\"/name\\\" label=\\\"Name\\\" minLength={3} required />\\n  <Field.Email path=\\\"/email\\\" label=\\\"E-mail\\\" required />\\n  <Field.Number\\n    path=\\\"/birthyear\\\"\\n    label=\\\"Birth year\\\"\\n    minimum={1900}\\n    maximum={2023}\\n    required\\n  />\\n</Form.Handler>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"vs.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { JSONSchema } from '@dnb/eufemia/extensions/forms'\\n\\nconst schema: JSONSchema = {\\n  properties: {\\n    name: { minLength: 3 },\\n    email: { type: 'string' },\\n    birthyear: { minimum: 1900, maximum: 2023 },\\n  },\\n  required: ['name', 'email', 'birthyear'],\\n}\\n\\n<Form.Handler data={user} schema={schema}>\\n  <Field.String path=\\\"/name\\\" label=\\\"Name\\\" />\\n  <Field.Email path=\\\"/email\\\" label=\\\"E-mail\\\" />\\n  <Field.Number path=\\\"/birthyear\\\" label=\\\"Birth year\\\" />\\n</Form.Handler>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This makes it possible to create a uniform, testable description and requirements specification for the data, which can be tested independently of frontend code, and used across systems, e.g. frontend and backend.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Also, note you can describe the schema without using the \", _jsx(_components.code, {\n        children: \"type\"\n      }), \" property, as the type is inferred from schema type. More on that topic in the \", _jsx(_components.a, {\n        href: \"https://ajv.js.org/guide/typescript.html#utility-types-for-schemas\",\n        children: \"Ajv docs\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Fields which are disabled or read-only\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Fields which have the \", _jsx(_components.code, {\n        children: \"disabled\"\n      }), \" property or the \", _jsx(_components.code, {\n        children: \"readOnly\"\n      }), \" property, will skip validation.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"JSONSchema and TypeScript\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can import the \", _jsx(_components.code, {\n        children: \"JSONSchema\"\n      }), \" type from the \", _jsx(_components.code, {\n        children: \"@dnb/eufemia/extensions/forms\"\n      }), \" package.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { JSONSchema } from '@dnb/eufemia/extensions/forms'\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It's a shorthand for \", _jsx(_components.code, {\n        children: \"JSONSchema7\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also use the utility \", _jsx(_components.code, {\n        children: \"JSONSchemaType\"\n      }), \" type, so you can validate your data types.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"NB:\"\n      }), \" This requires \", _jsx(_components.code, {\n        children: \"strictNullChecks\"\n      }), \" in the \", _jsx(_components.code, {\n        children: \"tsconfig\"\n      }), \" settings to be true.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { JSONSchemaType } from '@dnb/eufemia/extensions/forms'\\n\\ntype MyData = {\\n  foo: number\\n  bar?: string\\n}\\n\\nconst schema: JSONSchemaType<MyData> = {\\n  type: 'object',\\n  properties: {\\n    foo: { type: 'integer' },\\n    bar: { type: 'string', nullable: true },\\n  },\\n  required: ['foo'],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Complex schemas\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In addition to basic validation as in the example above, JSON Schema can be used for more complex. Examples of definitions supported by the standard are:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Requirement that the object must not have other properties than those defined in \", _jsx(_components.code, {\n          children: \"properties\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Nested data structures and combinations of objects and arrays with rules for array elements (fixed or repetitive elements).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Regular expressions for the syntax of individual values.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Enum (a set of valid values).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Rules for the number of elements in arrays.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Rules for the number of properties in objects.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Predefined format rules (eg 'uri', 'email' and 'hostname').\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Logical operators such as 'not', 'oneOf', 'allOf' and 'anyOf' which can be filled with rules for all or part of the data set.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Rule set based on the content of values (if-then-else).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Rules (sub-schemas) that become applicable if a given value is present.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Reuse within the definition, such as one and the same object structure being used as a definition for several locations in a structure.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To learn more about what is possible with the JSON Schema standard, see \", _jsx(_components.a, {\n        href: \"https://json-schema.org/\",\n        children: \"json-schema.org\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Custom Ajv instance and keywords\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can provide your custom \", _jsx(_components.code, {\n        children: \"validate\"\n      }), \" function with your own keywords to your schema. Below are two examples of how to do that.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First, you need to create your won instance of Ajv:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { Ajv } from '@dnb/eufemia/extensions/forms'\\n\\nconst ajv = new Ajv({\\n  strict: true,\\n  allErrors: true,\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then you add your custom keyword to the Ajv instance:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// Add a custom keyword 'isEven'\\najv.addKeyword({\\n  keyword: 'isEven',\\n  validate: (schema, value) => {\\n    // Check if the number is even.\\n    return value % 2 === 0\\n  },\\n})\\n\\n// Now we can use the 'isEven' keyword in our schema.\\nconst schema = {\\n  type: 'object',\\n  properties: {\\n    myKey: {\\n      type: 'string',\\n      isEven: true, // The number must be even.\\n    },\\n  },\\n} as const\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use \", _jsx(_components.code, {\n        children: \"as const\"\n      }), \" to make sure the schema is not inferred as \", _jsx(_components.code, {\n        children: \"JSONSchema7\"\n      }), \" but as a literal type.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"And finally add the Ajv instance to your form:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Handler schema={schema} ajvInstance={ajv}>\\n    <Field.String path=\\\"/myKey\\\" value=\\\"1\\\" validateInitially />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Custom Ajv keyword in a field\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is another example of a custom keyword, used in one field only:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Ajv } from '@dnb/'\\nimport { Form, Field } from '@dnb/eufemia/extensions/forms'\\n\\nconst ajv = new Ajv({\\n  strict: true,\\n  allErrors: true,\\n})\\n\\najv.addKeyword({\\n  keyword: 'notEmpty',\\n  validate: (schema, value) => {\\n    return value.length > 0\\n  },\\n})\\n\\nconst schema = {\\n  type: 'string',\\n  notEmpty: true, // The value must be more than one character.\\n} as const\\n\\nrender(\\n  <Form.Handler ajvInstance={ajv}>\\n    <Field.String\\n      schema={schema}\\n      path=\\\"/myKey\\\"\\n      value=\\\"\\\"\\n      validateInitially\\n    />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can find more info about error messages in the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/error-messages/\",\n        children: \"Error messages\"\n      }), \" docs.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Custom error messages\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When having a custom keyword, you can provide custom error message on four levels with the \", _jsx(_components.code, {\n        children: \"errorMessage\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"errorMessages\"\n      }), \" property:\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"On the schema level.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"On the Form.Handler (Provider) level.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"On the Form.Handler (Provider) level with a JSON Pointer path.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"On the field level.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The levels are prioritized in the order above, so the field level error message will overwrite all other levels.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is an example of how to do that:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const schema = {\\n  type: 'string',\\n  notEmpty: true, // The value must be more than one character.\\n  // Level 1\\n  errorMessage: 'You can provide a custom message in the schema itself',\\n} as const\\n\\nrender(\\n  <Form.Handler\\n    ajvInstance={ajv}\\n    errorMessages={{\\n      // Level 2\\n      notEmpty: 'Or on the provider',\\n      '/myKey': {\\n        // Level 3\\n        notEmpty: 'Or on the provider for just one field',\\n      },\\n    }}\\n  >\\n    <Field.String\\n      schema={schema}\\n      path=\\\"/myKey\\\"\\n      value=\\\"\\\"\\n      validateInitially\\n      errorMessages={{\\n        // Level 4\\n        notEmpty: 'Or on a single Field itself',\\n      }}\\n    />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can find more info about error messages in the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/error-messages/\",\n        children: \"Error messages\"\n      }), \" docs.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Generate schema from fields\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also generate a Ajv schema from a set of fields, by using the \", _jsx(_components.code, {\n        children: \"log\"\n      }), \" property on the \", _jsx(_components.code, {\n        children: \"Tools.GenerateSchema\"\n      }), \" component. I will console log the generated schema.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field, Tools } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Handler>\\n    <Tools.GenerateSchema log>\\n      <Field.String path=\\\"/myString\\\" pattern=\\\"^[a-z]{2}[0-9]+$\\\" required />\\n    </Tools.GenerateSchema>\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"// console.log output:\\n{\\n  \\\"properties\\\": {\\n    \\\"myString\\\": { \\\"type\\\": \\\"string\\\", \\\"pattern\\\": \\\"^[a-z]{2}[0-9]+$\\\" }\\n  },\\n  \\\"required\\\": [\\\"myString\\\"],\\n  \\\"type\\\": \\\"object\\\"\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Or by using the \", _jsx(_components.code, {\n        children: \"generateRef\"\n      }), \" property on the \", _jsx(_components.code, {\n        children: \"Tools.GenerateSchema\"\n      }), \" component. Here is an example of how to do that within a test:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field, Tools } from '@dnb/eufemia/extensions/forms'\\n\\nit('should match generated schema snapshot', () => {\\n  const generateRef = React.createRef<>()\\n\\n  render(\\n    <Form.Handler>\\n      <Tools.GenerateSchema generateRef={generateRef}>\\n        <Field.Name.First path=\\\"/firstName\\\" />\\n        <Field.Name.Last path=\\\"/lastName\\\" minLength={2} required />\\n      </Tools.GenerateSchema>\\n    </Form.Handler>,\\n  )\\n\\n  const { schema } = generateRef.current()\\n  expect(schema).toMatchInlineSnapshot(`\\n    {\\n      \\\"type\\\": \\\"object\\\",\\n      \\\"properties\\\": {\\n        \\\"firstName\\\": {\\n          \\\"type\\\": \\\"string\\\",\\n          \\\"pattern\\\": \\\"^[\\\\\\\\p{L}\\\\\\\\p{M} \\\\\\\\-]+$\\\",\\n        },\\n        \\\"lastName\\\": {\\n          \\\"type\\\": \\\"string\\\",\\n          \\\"minLength\\\": 2,\\n          \\\"pattern\\\": \\\"^[\\\\\\\\p{L}\\\\\\\\p{M} \\\\\\\\-]+$\\\",\\n        },\\n      },\\n      \\\"required\\\": [\\n        \\\"lastName\\\",\\n      ],\\n    }\\n  `)\\n})\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","SingleFieldSchema","ComponentBox","DataSetSchema","IfRuleSchema","DependantListSchema","scope","TrashIcon","_components","h2","h3","p","Examples","_missingMdxReference","id","component","Error","ul","li","a","pre","code","strong","ol","href","className"],"sourceRoot":""}