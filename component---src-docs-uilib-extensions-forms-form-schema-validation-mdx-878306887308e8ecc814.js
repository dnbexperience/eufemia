"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[44635,67556],{21097:function(n,e,a){a.r(e),a.d(e,{default:function(){return h}});var t={};a.r(t),a.d(t,{DataSetSchema:function(){return l},DependantListSchema:function(){return d},IfRuleSchema:function(){return u},SingleFieldSchema:function(){return m}});var r=a(31085),o=a(71184),i=a(32065),s=a(46370),c=a(24480);const m=()=>{const n=(0,s.F0)();return(0,r.jsx)(i.A,{scope:{ajv:n},children:"<Form.Handler ajvInstance={ajv}>\n  <Field.String\n    schema={{\n      type: 'string',\n      minLength: 5,\n    }}\n  />\n</Form.Handler>\n"})},l=()=>{const n=(0,s.F0)();return(0,r.jsx)(i.A,{scope:{ajv:n},children:'<Form.Handler\n  data={{\n    address: \'Prefilled address\',\n  }}\n  schema={{\n    properties: {\n      name: {\n        minLength: 2,\n      },\n      address: {\n        minLength: 3,\n      },\n    },\n    required: [\'name\', \'address\'],\n  }}\n  ajvInstance={ajv}\n>\n  <Form.Card gap="small" bottom="small">\n    <Form.MainHeading>Company information</Form.MainHeading>\n\n    <Field.String path="/name" label="Name" />\n    <Field.String path="/address" label="Address" />\n  </Form.Card>\n\n  <Form.SubmitButton />\n</Form.Handler>\n'})},u=()=>{const n=(0,s.F0)();return(0,r.jsx)(i.A,{scope:{ajv:n},children:"<Form.Handler\n  data={{}}\n  schema={{\n    type: 'object',\n    properties: {\n      name: {\n        type: 'string',\n      },\n      customerType: {\n        type: 'string',\n        enum: ['corporate', 'private'],\n      },\n      companyName: {\n        type: 'string',\n      },\n    },\n    if: {\n      properties: {\n        customerType: {\n          enum: ['corporate'],\n        },\n      },\n      required: ['customerType'],\n    },\n    then: {\n      required: ['name', 'companyName'],\n    },\n    else: {\n      required: ['name'],\n    },\n  }}\n  ajvInstance={ajv}\n>\n  <Form.Card gap=\"small\">\n    <Form.MainHeading>Customer information</Form.MainHeading>\n\n    <Field.String path=\"/name\" label=\"Name\" />\n    <Field.String\n      path=\"/customerType\"\n      label=\"Customer type (corporate or private)\"\n    />\n    <Field.Name.Company\n      path=\"/companyName\"\n      labelDescription=\"Company name (required for corporate customers)\"\n    />\n  </Form.Card>\n\n  <Form.SubmitButton />\n</Form.Handler>\n"})},d=()=>{const n=(0,s.F0)();return(0,r.jsx)(i.A,{scope:{TrashIcon:c.A,ajv:n},children:'<Form.Handler\n  data={{\n    accounts: [{}],\n  }}\n  schema={{\n    type: \'object\',\n    definitions: {\n      account: {\n        type: \'object\',\n        properties: {\n          accountNumber: {\n            type: \'string\',\n            pattern: \'^[0-9]{11}$\',\n          },\n          alias: {\n            type: \'string\',\n            minLength: 2,\n            maxLength: 32,\n          },\n        },\n        required: [\'accountNumber\'],\n      },\n    },\n    properties: {\n      name: {\n        type: \'string\',\n      },\n      email: {\n        type: \'string\',\n      },\n      phone: {\n        type: \'string\',\n      },\n      accounts: {\n        type: \'array\',\n        items: {\n          $ref: \'#/definitions/account\',\n        },\n      },\n      bsuAccount: {\n        $ref: \'#/definitions/account\',\n      },\n    },\n    oneOf: [\n      {\n        properties: {\n          accounts: {\n            type: \'array\',\n            minItems: 1,\n          },\n        },\n      },\n      {\n        properties: {\n          accounts: {\n            type: \'array\',\n            minItems: 0,\n          },\n          bsuAccount: {\n            type: \'object\',\n            required: [\'accountNumber\'],\n          },\n        },\n        required: [\'bsuAccount\'],\n      },\n    ],\n  }}\n  ajvInstance={ajv}\n>\n  <Flex.Vertical gap="small">\n    <Form.MainHeading>Customer information</Form.MainHeading>\n    <Form.Card gap="small">\n      <Field.String path="/name" label="Name" />\n      <Field.Email path="/email" label="E-mail" />\n      <Field.PhoneNumber path="/phone" label="Phone number" />\n    </Form.Card>\n\n    <Form.MainHeading>Accounts</Form.MainHeading>\n    <Form.Card gap="small">\n      <Form.SubHeading>Standard accounts</Form.SubHeading>\n\n      <Iterate.Array path="/accounts">\n        <Flex.Horizontal align="flex-end">\n          <Field.BankAccountNumber\n            itemPath="/accountNumber"\n            label="Account number"\n          />\n          <Field.String itemPath="/alias" label="Alias" width="medium" />\n          <Iterate.RemoveButton icon={TrashIcon} />\n        </Flex.Horizontal>\n      </Iterate.Array>\n\n      <Iterate.PushButton\n        icon="add"\n        icon_position="left"\n        text="Add account"\n        path="/accounts"\n        pushValue={{}}\n        size="medium"\n      />\n\n      <Form.SubHeading>BSU Account</Form.SubHeading>\n      <Field.BankAccountNumber\n        path="/bsuAccount/accountNumber"\n        label="Account number"\n      />\n      <Field.String path="/bsuAccount/alias" label="Alias" />\n    </Form.Card>\n\n    <Form.SubmitButton />\n  </Flex.Vertical>\n</Form.Handler>\n'})};function p(n){const e=Object.assign({h2:"h2",h3:"h3",p:"p"},(0,o.R)(),n.components);return t||F("Examples",!1),l||F("Examples.DataSetSchema",!0),d||F("Examples.DependantListSchema",!0),u||F("Examples.IfRuleSchema",!0),m||F("Examples.SingleFieldSchema",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:"Demos"}),"\n",(0,r.jsx)(e.h3,{children:"Schema for single field"}),"\n",(0,r.jsx)(m,{}),"\n",(0,r.jsx)(e.h3,{children:"Schema for a whole data set"}),"\n",(0,r.jsx)(l,{}),"\n",(0,r.jsx)(e.h3,{children:"Schema with if-rule"}),"\n",(0,r.jsx)(u,{}),"\n",(0,r.jsx)(e.h3,{children:"Dependant list schema"}),"\n",(0,r.jsx)("em",{children:(0,r.jsx)(e.p,{children:"Becoming a new customer, this form requires at least one normal account\nto be added, unless the customer opens a BSU account, then normal\naccounts can still be added, but is optional."})}),"\n",(0,r.jsx)(d,{})]})}var h=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.R)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(p,n)})):p(n)};function F(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},93633:function(n,e,a){a.r(e);var t=a(31085),r=a(71184),o=a(51989),i=a(21097);function s(n){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.default,{}),"\n",(0,t.jsx)(i.default,{})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,r.R)(),n.components);return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(s,n)})):s()}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-schema-validation-mdx-878306887308e8ecc814.js.map