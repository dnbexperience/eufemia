{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-schema-validation-mdx-878306887308e8ecc814.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/schema-validation/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/schema-validation/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/schema-validation.mdx"],"sourcesContent":["import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Flex } from '@dnb/eufemia/src'\nimport {\n  Form,\n  Field,\n  Iterate,\n  makeAjvInstance,\n} from '@dnb/eufemia/src/extensions/forms'\nimport { trash as TrashIcon } from '@dnb/eufemia/src/icons'\n\nexport const SingleFieldSchema = () => {\n  const ajv = makeAjvInstance()\n  return (\n    <ComponentBox scope={{ ajv }}>\n      <Form.Handler ajvInstance={ajv}>\n        <Field.String schema={{ type: 'string', minLength: 5 }} />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const DataSetSchema = () => {\n  const ajv = makeAjvInstance()\n  return (\n    <ComponentBox scope={{ ajv }}>\n      <Form.Handler\n        data={{\n          address: 'Prefilled address',\n        }}\n        schema={{\n          properties: {\n            name: { minLength: 2 },\n            address: { minLength: 3 },\n          },\n          required: ['name', 'address'],\n        }}\n        ajvInstance={ajv}\n      >\n        <Form.Card gap=\"small\" bottom=\"small\">\n          <Form.MainHeading>Company information</Form.MainHeading>\n\n          <Field.String path=\"/name\" label=\"Name\" />\n          <Field.String path=\"/address\" label=\"Address\" />\n        </Form.Card>\n\n        <Form.SubmitButton />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const IfRuleSchema = () => {\n  const ajv = makeAjvInstance()\n  return (\n    <ComponentBox scope={{ ajv }}>\n      <Form.Handler\n        data={{}}\n        schema={{\n          type: 'object',\n          properties: {\n            name: { type: 'string' },\n            customerType: {\n              type: 'string',\n              enum: ['corporate', 'private'],\n            },\n            companyName: { type: 'string' },\n          },\n          if: {\n            properties: { customerType: { enum: ['corporate'] } },\n            required: ['customerType'],\n          },\n          then: { required: ['name', 'companyName'] },\n          else: { required: ['name'] },\n        }}\n        ajvInstance={ajv}\n      >\n        <Form.Card gap=\"small\">\n          <Form.MainHeading>Customer information</Form.MainHeading>\n\n          <Field.String path=\"/name\" label=\"Name\" />\n          <Field.String\n            path=\"/customerType\"\n            label=\"Customer type (corporate or private)\"\n          />\n          <Field.Name.Company\n            path=\"/companyName\"\n            labelDescription=\"Company name (required for corporate customers)\"\n          />\n        </Form.Card>\n\n        <Form.SubmitButton />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const DependantListSchema = () => {\n  const ajv = makeAjvInstance()\n  return (\n    <ComponentBox scope={{ TrashIcon, ajv }}>\n      <Form.Handler\n        data={{\n          accounts: [{}],\n        }}\n        schema={{\n          type: 'object',\n          definitions: {\n            account: {\n              type: 'object',\n              properties: {\n                accountNumber: {\n                  type: 'string',\n                  pattern: '^[0-9]{11}$',\n                },\n                alias: {\n                  type: 'string',\n                  minLength: 2,\n                  maxLength: 32,\n                },\n              },\n              required: ['accountNumber'],\n            },\n          },\n          properties: {\n            name: { type: 'string' },\n            email: { type: 'string' },\n            phone: { type: 'string' },\n            accounts: {\n              type: 'array',\n              items: {\n                $ref: '#/definitions/account',\n              },\n            },\n            bsuAccount: {\n              $ref: '#/definitions/account',\n            },\n          },\n          oneOf: [\n            {\n              properties: {\n                accounts: {\n                  type: 'array',\n                  minItems: 1,\n                },\n              },\n            },\n            {\n              properties: {\n                accounts: {\n                  type: 'array',\n                  minItems: 0,\n                },\n                bsuAccount: {\n                  type: 'object',\n                  required: ['accountNumber'],\n                },\n              },\n              required: ['bsuAccount'],\n            },\n          ],\n        }}\n        ajvInstance={ajv}\n      >\n        <Flex.Vertical gap=\"small\">\n          <Form.MainHeading>Customer information</Form.MainHeading>\n          <Form.Card gap=\"small\">\n            <Field.String path=\"/name\" label=\"Name\" />\n            <Field.Email path=\"/email\" label=\"E-mail\" />\n            <Field.PhoneNumber path=\"/phone\" label=\"Phone number\" />\n          </Form.Card>\n\n          <Form.MainHeading>Accounts</Form.MainHeading>\n          <Form.Card gap=\"small\">\n            <Form.SubHeading>Standard accounts</Form.SubHeading>\n\n            <Iterate.Array path=\"/accounts\">\n              <Flex.Horizontal align=\"flex-end\">\n                <Field.BankAccountNumber\n                  itemPath=\"/accountNumber\"\n                  label=\"Account number\"\n                />\n                <Field.String\n                  itemPath=\"/alias\"\n                  label=\"Alias\"\n                  width=\"medium\"\n                />\n                <Iterate.RemoveButton icon={TrashIcon} />\n              </Flex.Horizontal>\n            </Iterate.Array>\n\n            <Iterate.PushButton\n              icon=\"add\"\n              icon_position=\"left\"\n              text=\"Add account\"\n              path=\"/accounts\"\n              pushValue={{}}\n              size=\"medium\"\n            />\n\n            <Form.SubHeading>BSU Account</Form.SubHeading>\n            <Field.BankAccountNumber\n              path=\"/bsuAccount/accountNumber\"\n              label=\"Account number\"\n            />\n            <Field.String path=\"/bsuAccount/alias\" label=\"Alias\" />\n          </Form.Card>\n\n          <Form.SubmitButton />\n        </Flex.Vertical>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.DataSetSchema) _missingMdxReference(\"Examples.DataSetSchema\", true);\n  if (!Examples.DependantListSchema) _missingMdxReference(\"Examples.DependantListSchema\", true);\n  if (!Examples.IfRuleSchema) _missingMdxReference(\"Examples.IfRuleSchema\", true);\n  if (!Examples.SingleFieldSchema) _missingMdxReference(\"Examples.SingleFieldSchema\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Schema for single field\"\n    }), \"\\n\", _jsx(Examples.SingleFieldSchema, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Schema for a whole data set\"\n    }), \"\\n\", _jsx(Examples.DataSetSchema, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Schema with if-rule\"\n    }), \"\\n\", _jsx(Examples.IfRuleSchema, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Dependant list schema\"\n    }), \"\\n\", _jsx(\"em\", {\n      children: _jsx(_components.p, {\n        children: \"Becoming a new customer, this form requires at least one normal account\\nto be added, unless the customer opens a BSU account, then normal\\naccounts can still be added, but is optional.\"\n      })\n    }), \"\\n\", _jsx(Examples.DependantListSchema, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/Form/schema-validation/info';\nimport Demos from 'Docs/uilib/extensions/forms/Form/schema-validation/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["SingleFieldSchema","ajv","makeAjvInstance","_jsx","ComponentBox","scope","children","DataSetSchema","IfRuleSchema","DependantListSchema","TrashIcon","_createMdxContent","props","_components","Object","assign","h2","h3","p","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error","Info","Demos"],"sourceRoot":""}