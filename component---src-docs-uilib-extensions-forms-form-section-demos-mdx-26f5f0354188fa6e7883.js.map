{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-section-demos-mdx-26f5f0354188fa6e7883.js","mappings":"wLAIA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,MAAsBT,EAAMU,YAW/B,OAVKC,GAAUC,EAAqB,YAAY,GAC3CD,EAAAA,mBAA4BC,EAAqB,8BAA8B,GAC/ED,EAAAA,2BAAoCC,EAAqB,sCAAsC,GAC/FD,EAAAA,mBAA4BC,EAAqB,8BAA8B,GAC/ED,EAAAA,gBAAyBC,EAAqB,2BAA2B,GACzED,EAAAA,gBAAyBC,EAAqB,2BAA2B,GACzED,EAAAA,eAAwBC,EAAqB,0BAA0B,GACvED,EAAAA,sBAA+BC,EAAqB,iCAAiC,GACrFD,EAAAA,gBAAyBC,EAAqB,2BAA2B,GACzED,EAAAA,oBAA6BC,EAAqB,+BAA+B,IAC/EC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKf,EAAYG,GAAI,CAC9BW,SAAU,UACR,MAAMC,EAAAA,EAAAA,KAAKf,EAAYI,GAAI,CAC7BU,SAAU,yBACR,MAAMC,EAAAA,EAAAA,KAAKL,EAAAA,mBAA6B,CAAC,GAAI,MAAMK,EAAAA,EAAAA,KAAKf,EAAYI,GAAI,CAC1EU,SAAU,uBACR,MAAMC,EAAAA,EAAAA,KAAKf,EAAYK,EAAG,CAC5BS,SAAU,qFACR,MAAMC,EAAAA,EAAAA,KAAKL,EAAAA,kBAA4B,CAAC,GAAI,MAAMK,EAAAA,EAAAA,KAAKf,EAAYI,GAAI,CACzEU,SAAU,mCACR,MAAMF,EAAAA,EAAAA,MAAMZ,EAAYK,EAAG,CAC7BS,SAAU,CAAC,0BAA0BC,EAAAA,EAAAA,KAAKf,EAAYM,EAAG,CACvDU,KAAM,sDACNF,SAAU,kBACR,SAASC,EAAAA,EAAAA,KAAKf,EAAYM,EAAG,CAC/BU,KAAM,sDACNF,SAAU,kBACR,iCAAiCC,EAAAA,EAAAA,KAAKf,EAAYO,KAAM,CAC1DO,SAAU,sBACR,OACF,MAAMC,EAAAA,EAAAA,KAAKL,EAAAA,qBAA+B,CAAC,GAAI,MAAME,EAAAA,EAAAA,MAAMZ,EAAYK,EAAG,CAC5ES,SAAU,CAAC,UAAUC,EAAAA,EAAAA,KAAKf,EAAYO,KAAM,CAC1CO,SAAU,oBACR,yEAAyEC,EAAAA,EAAAA,KAAKf,EAAYO,KAAM,CAClGO,SAAU,YACR,OACF,MAAMC,EAAAA,EAAAA,KAAKL,EAAAA,0BAAoC,CAAC,GAAI,MAAMK,EAAAA,EAAAA,KAAKf,EAAYI,GAAI,CACjFU,SAAU,oBACR,MAAMC,EAAAA,EAAAA,KAAKf,EAAYK,EAAG,CAC5BS,SAAU,mHACR,MAAMC,EAAAA,EAAAA,KAAKL,EAAAA,eAAyB,CAAC,GAAI,MAAMK,EAAAA,EAAAA,KAAKf,EAAYI,GAAI,CACtEU,SAAU,mBACR,MAAMF,EAAAA,EAAAA,MAAMZ,EAAYK,EAAG,CAC7BS,SAAU,CAAC,sFAAsFC,EAAAA,EAAAA,KAAKf,EAAYM,EAAG,CACnHU,KAAM,0DACNF,SAAU,gBACR,OACF,MAAMC,EAAAA,EAAAA,KAAKL,EAAAA,cAAwB,CAAC,GAAI,MAAMK,EAAAA,EAAAA,KAAKf,EAAYI,GAAI,CACrEU,SAAU,qBACR,MAAMF,EAAAA,EAAAA,MAAMZ,EAAYK,EAAG,CAC7BS,SAAU,CAAC,oEAAoEC,EAAAA,EAAAA,KAAKf,EAAYO,KAAM,CACpGO,SAAU,aACR,kCACF,MAAMC,EAAAA,EAAAA,KAAKL,EAAAA,kBAA4B,CAAC,GAAI,MAAMK,EAAAA,EAAAA,KAAKf,EAAYI,GAAI,CACzEU,SAAU,oBACR,MAAMC,EAAAA,EAAAA,KAAKf,EAAYK,EAAG,CAC5BS,SAAU,6CACR,MAAMC,EAAAA,EAAAA,KAAKL,EAAAA,eAAyB,CAAC,GAAI,MAAMK,EAAAA,EAAAA,KAAKf,EAAYI,GAAI,CACtEU,SAAU,0BACR,MAAMF,EAAAA,EAAAA,MAAMZ,EAAYK,EAAG,CAC7BS,SAAU,CAAC,QAAQC,EAAAA,EAAAA,KAAKf,EAAYM,EAAG,CACrCU,KAAM,2CACNF,SAAU,eACR,wGACF,MAAMC,EAAAA,EAAAA,KAAKL,EAAAA,eAAyB,CAAC,KAE7C,CAQA,SAASC,EAAqBM,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,CAHA,UANA,SAAoBlB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOqB,QAASC,GAAapB,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,MAAsBT,EAAMU,YAC3E,OAAOY,GAAYN,EAAAA,EAAAA,KAAKM,EAAWpB,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1De,UAAUC,EAAAA,EAAAA,KAAKjB,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,icC3EO,MAAMuB,EAAqBA,KAChCC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAV,SAAA,gJASWW,EAAoBA,KAC/BF,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAE,UAAA,EAAAZ,SAAA,gkBAiCWa,EAAuBA,KAClCJ,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,8CAAAI,UAAA,EAAAF,UAAA,EAAAZ,SAAA,26BA+CWe,EAA4BA,KACvCN,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,oDAAAI,UAAA,EAAAF,UAAA,EAAAZ,SAAA,28BAkDWgB,EAAiBA,KAC5BP,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAE,UAAA,EAAAZ,SAAA,g3BAmDWiB,EAAoBA,KAC/BR,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAE,UAAA,EAAAZ,SAAA,k3BA4CWkB,EAAgBA,KAC3BT,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAE,UAAA,EAAAZ,SAAA,8iCA4DWmB,EAAiBA,KAC5BV,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAU,MAAA,CACFC,UACAT,UAAA,EAAAZ,SAAA,uhDAuEasB,EAAiBA,KAC5Bb,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAE,UAAA,EAAAZ,SAAA,u8DAwFIqB,EAASA,KACb,MAAM,KAAEE,GAASC,EAAAA,IAEjB,OACEvB,EAAAA,EAAAA,KAACwB,EAAAA,EAAO,CACNC,QAAQ,SACRC,YAAU,EACVC,gBAAgB,cAChBC,KAAG,EACHC,OAAO,QAAO9B,UAEdC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAI,CAAA/B,UACHC,EAAAA,EAAAA,KAAA,OAAAD,SAAMgC,KAAKC,UAAUV,EAAM,KAAM,QAE3B,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Section/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Section/Examples.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    a: \"a\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.AllFieldsRequired) _missingMdxReference(\"Examples.AllFieldsRequired\", true);\n  if (!Examples.BasicViewAndEditContainer) _missingMdxReference(\"Examples.BasicViewAndEditContainer\", true);\n  if (!Examples.NestedPathSection) _missingMdxReference(\"Examples.NestedPathSection\", true);\n  if (!Examples.NestedSections) _missingMdxReference(\"Examples.NestedSections\", true);\n  if (!Examples.OverwriteProps) _missingMdxReference(\"Examples.OverwriteProps\", true);\n  if (!Examples.SchemaSupport) _missingMdxReference(\"Examples.SchemaSupport\", true);\n  if (!Examples.ViewAndEditContainer) _missingMdxReference(\"Examples.ViewAndEditContainer\", true);\n  if (!Examples.WithVisibility) _missingMdxReference(\"Examples.WithVisibility\", true);\n  if (!Examples.WithoutDataContext) _missingMdxReference(\"Examples.WithoutDataContext\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Without Form.Handler\"\n    }), \"\\n\", _jsx(Examples.WithoutDataContext, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With a nested path\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This lets you reuse the same section of fields in multiple places in your forms.\"\n    }), \"\\n\", _jsx(Examples.NestedPathSection, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With a Edit and View container\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This example uses the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Section/EditContainer/\",\n        children: \"EditContainer\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Section/ViewContainer/\",\n        children: \"ViewContainer\"\n      }), \" containers with the default \", _jsx(_components.code, {\n        children: \"variant=\\\"outline\\\"\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Examples.ViewAndEditContainer, {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using \", _jsx(_components.code, {\n        children: \"variant=\\\"basic\\\"\"\n      }), \" will render the view and edit container without the additional Card \", _jsx(_components.code, {\n        children: \"outline\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Examples.BasicViewAndEditContainer, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Overwrite props\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Overwriting props makes it very flexible to reuse the same section of fields in multiple places in your forms.\"\n    }), \"\\n\", _jsx(Examples.OverwriteProps, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Schema support\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This feature lets you extend the requirements of the fields in the section with a \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/all-features/#schema-validation\",\n        children: \"JSON Schema\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Examples.SchemaSupport, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Required support\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can easily make a section of fields required by setting the \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop on the section itself.\"]\n    }), \"\\n\", _jsx(Examples.AllFieldsRequired, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Nested sections\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can nest sections inside each other.\"\n    }), \"\\n\", _jsx(Examples.NestedSections, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With Visibility logic\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Visibility/\",\n        children: \"Visibility\"\n      }), \" component lets you show or hide parts of your form based on the data given in the section itself.\"]\n    }), \"\\n\", _jsx(Examples.WithVisibility, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Card, Code, Flex, P, Section } from '@dnb/eufemia/src'\nimport {\n  Field,\n  Form,\n  JSONSchema,\n  SectionProps,\n  Value,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport const WithoutDataContext = () => {\n  return (\n    <ComponentBox>\n      <Form.Section data={{ myField: 'Value' }} onChange={console.log}>\n        <Field.String path=\"/myField\" />\n      </Form.Section>\n    </ComponentBox>\n  )\n}\n\nexport const NestedPathSection = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyNameSection = (props: SectionProps) => {\n          return (\n            <Form.Section {...props}>\n              <Card stack>\n                <Field.Name.First path=\"/firstName\" />\n                <Field.Name.Last path=\"/lastName\" />\n              </Card>\n            </Form.Section>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            defaultData={{\n              nestedPath: {\n                firstName: 'Nora',\n                lastName: 'Mørk',\n              },\n            }}\n          >\n            <MyNameSection path=\"/nestedPath\" />\n            <Form.SubmitButton variant=\"send\" />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const ViewAndEditContainer = () => {\n  return (\n    <ComponentBox data-visual-test=\"view-and-edit-container\" hideCode>\n      {() => {\n        const MyEditContainer = () => {\n          return (\n            <Form.Section.EditContainer>\n              <Field.Name.First path=\"/firstName\" />\n              <Field.Name.Last path=\"/lastName\" />\n            </Form.Section.EditContainer>\n          )\n        }\n\n        const MyViewContainer = () => {\n          return (\n            <Form.Section.ViewContainer>\n              <Value.SummaryList>\n                <Value.Name.First path=\"/firstName\" />\n                <Value.Name.Last path=\"/lastName\" />\n              </Value.SummaryList>\n            </Form.Section.ViewContainer>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            defaultData={{\n              nestedPath: {\n                firstName: 'Nora',\n              },\n            }}\n          >\n            <Card stack>\n              <Form.SubHeading>Your account</Form.SubHeading>\n              <Form.Section path=\"/nestedPath\" required>\n                <MyEditContainer />\n                <MyViewContainer />\n              </Form.Section>\n            </Card>\n            <Form.SubmitButton />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const BasicViewAndEditContainer = () => {\n  return (\n    <ComponentBox\n      data-visual-test=\"basic-view-and-edit-container\"\n      hideCode\n    >\n      {() => {\n        const MyEditContainer = () => {\n          return (\n            <Form.Section.EditContainer variant=\"basic\">\n              <Field.Name.First path=\"/firstName\" />\n              <Field.Name.Last path=\"/lastName\" />\n            </Form.Section.EditContainer>\n          )\n        }\n\n        const MyViewContainer = () => {\n          return (\n            <Form.Section.ViewContainer variant=\"basic\">\n              <Value.SummaryList>\n                <Value.Name.First path=\"/firstName\" />\n                <Value.Name.Last path=\"/lastName\" />\n              </Value.SummaryList>\n            </Form.Section.ViewContainer>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            defaultData={{\n              nestedPath: {\n                firstName: 'Nora',\n              },\n            }}\n          >\n            <Card stack>\n              <Form.SubHeading>Your account</Form.SubHeading>\n              <Form.Section path=\"/nestedPath\" required>\n                <MyEditContainer />\n                <MyViewContainer />\n              </Form.Section>\n            </Card>\n            <Form.SubmitButton />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const OverwriteProps = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyNameSection = (props) => {\n          return (\n            <Form.Section {...props}>\n              <Card stack>\n                <Field.Composition width=\"large\">\n                  <Field.Name.First path=\"/firstName\" />\n                  <Field.Name.Last\n                    path=\"/lastName\"\n                    required\n                    minLength={10}\n                  />\n                </Field.Composition>\n              </Card>\n            </Form.Section>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            defaultData={{\n              nestedPath: {\n                firstName: '',\n                lastName: 'M',\n              },\n            }}\n          >\n            <MyNameSection\n              path=\"/nestedPath\"\n              overwriteProps={{\n                firstName: {\n                  required: true,\n                  label: 'Custom',\n                },\n                lastName: {\n                  required: false,\n                  minLength: 2,\n                },\n              }}\n            />\n            <Form.SubmitButton variant=\"send\" />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AllFieldsRequired = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyNameSection = (props: SectionProps) => {\n          return (\n            <Form.Section {...props}>\n              <Card stack>\n                <Field.Composition width=\"large\">\n                  <Field.Name.First path=\"/firstName\" />\n                  <Field.Name.Last path=\"/lastName\" />\n                </Field.Composition>\n              </Card>\n            </Form.Section>\n          )\n        }\n\n        const schema: JSONSchema = {\n          type: 'object',\n          required: ['myRequiredSection'],\n        }\n\n        return (\n          <Flex.Stack>\n            <Form.Handler\n              onSubmit={async (data) => console.log('onSubmit', data)}\n            >\n              <MyNameSection required />\n              <Form.SubmitButton variant=\"send\" />\n            </Form.Handler>\n\n            <Form.Handler\n              onSubmit={async (data) => console.log('onSubmit', data)}\n              schema={schema}\n            >\n              <MyNameSection path=\"/myRequiredSection\" />\n              <Form.SubmitButton variant=\"send\" />\n            </Form.Handler>\n          </Flex.Stack>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const SchemaSupport = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyNameSection = (props: SectionProps) => {\n          return (\n            <Form.Section {...props}>\n              <Card stack>\n                <Field.Composition width=\"large\">\n                  <Field.Name.First path=\"/firstName\" />\n                  <Field.Name.Last\n                    path=\"/lastName\"\n                    required\n                    minLength={10}\n                  />\n                </Field.Composition>\n              </Card>\n            </Form.Section>\n          )\n        }\n\n        const mySchema: JSONSchema = {\n          type: 'object',\n          properties: {\n            nestedPath: {\n              type: 'object',\n              properties: {\n                firstName: {\n                  type: 'string',\n                  minLength: 3,\n                },\n                lastName: {\n                  type: 'string',\n                  minLength: 2,\n                },\n              },\n              required: ['firstName', 'lastName'],\n            },\n          },\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            schema={mySchema}\n            defaultData={{\n              nestedPath: {\n                firstName: '',\n                lastName: 'M',\n              },\n            }}\n          >\n            <MyNameSection path=\"/nestedPath\" />\n            <Form.SubmitButton variant=\"send\" />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const WithVisibility = () => {\n  return (\n    <ComponentBox scope={{ Output }}>\n      {() => {\n        const MySection = ({ children, ...props }) => {\n          return (\n            <Form.Section {...props}>\n              <Card stack>\n                <Field.Boolean\n                  label=\"Are you sure?\"\n                  variant=\"buttons\"\n                  path=\"/iAmSure\"\n                />\n                <Form.Visibility visible pathTrue=\"/iAmSure\" animate>\n                  <Field.Selection\n                    label=\"Choose\"\n                    variant=\"radio\"\n                    path=\"/mySelection\"\n                  >\n                    <Field.Option value=\"less\" title=\"Less\" />\n                    <Field.Option value=\"more\" title=\"More\" />\n                  </Field.Selection>\n\n                  <Form.Visibility\n                    visibleWhen={{\n                      path: '/mySelection',\n                      hasValue: 'more',\n                    }}\n                    animate\n                  >\n                    <Field.String label=\"My String\" path=\"/myString\" />\n                  </Form.Visibility>\n                </Form.Visibility>\n\n                {children}\n              </Card>\n\n              <Output />\n            </Form.Section>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onChange={console.log}\n            defaultData={{\n              nestedPath: {\n                iAmSure: false,\n                mySelection: 'less',\n                myString: 'has a value',\n              },\n            }}\n          >\n            <MySection path=\"/nestedPath\">\n              <Form.Visibility\n                visibleWhen={{\n                  path: '/myString',\n                  withValue: (value) => value !== 'has a value',\n                }}\n                animate\n              >\n                <P>\n                  Result:{' '}\n                  <Value.String path=\"/nestedPath/myString\" inline />\n                </P>\n              </Form.Visibility>\n            </MySection>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const NestedSections = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            defaultData={{\n              nestedPath: {\n                name: {\n                  first: 'Nora',\n                  last: 'Mørk',\n                },\n                address: {\n                  street: 'Strøget',\n                  nr: '',\n                },\n              },\n            }}\n          >\n            <MySection path=\"/nestedPath\" required />\n            <Form.SubmitButton variant=\"send\" />\n          </Form.Handler>\n        )\n\n        function MySection(props: SectionProps) {\n          return (\n            <Form.Section {...props}>\n              <Card stack>\n                <MyNameSection path=\"/name\" />\n                <MyAddressSection path=\"/address\" />\n                <MyValueSection />\n              </Card>\n            </Form.Section>\n          )\n        }\n\n        function MyNameSection(props: SectionProps) {\n          return (\n            <Form.Section {...props}>\n              <Field.Composition width=\"large\">\n                <Field.Name.First path=\"/first\" />\n                <Field.Name.Last path=\"/last\" />\n              </Field.Composition>\n            </Form.Section>\n          )\n        }\n\n        function MyAddressSection(props: SectionProps) {\n          return (\n            <Form.Section {...props}>\n              <Field.Composition width=\"large\">\n                <Field.String\n                  label=\"Gateadresse\"\n                  path=\"/street\"\n                  width=\"stretch\"\n                />\n                <Field.String label=\"Nr.\" path=\"/nr\" width=\"small\" />\n              </Field.Composition>\n            </Form.Section>\n          )\n        }\n\n        function MyValueSection(props: SectionProps) {\n          return (\n            <Form.Section {...props}>\n              <Value.SummaryList>\n                <Form.Section path=\"/name\">\n                  <Value.Composition gap=\"small\">\n                    <Value.Name.First path=\"/first\" />\n                    <Value.Name.Last path=\"/last\" />\n                  </Value.Composition>\n                </Form.Section>\n\n                <Form.Section path=\"/address\">\n                  <Value.Composition gap=\"small\">\n                    <Value.String label=\"Gateadresse\" path=\"/street\" />\n                    <Value.String label=\"Nr.\" path=\"/nr\" placeholder=\"–\" />\n                  </Value.Composition>\n                </Form.Section>\n              </Value.SummaryList>\n            </Form.Section>\n          )\n        }\n      }}\n    </ComponentBox>\n  )\n}\n\nconst Output = () => {\n  const { data } = Form.useData()\n\n  return (\n    <Section\n      element=\"output\"\n      innerSpace\n      backgroundColor=\"sand-yellow\"\n      top\n      bottom=\"large\"\n    >\n      <Code>\n        <pre>{JSON.stringify(data, null, 2)}</pre>\n      </Code>\n    </Section>\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","h3","p","a","code","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","children","_jsx","href","id","component","Error","wrapper","MDXLayout","WithoutDataContext","_jsx2","ComponentBox","NestedPathSection","noInline","ViewAndEditContainer","hideCode","BasicViewAndEditContainer","OverwriteProps","AllFieldsRequired","SchemaSupport","WithVisibility","scope","Output","NestedSections","data","Form","Section","element","innerSpace","backgroundColor","top","bottom","Code","JSON","stringify"],"sourceRoot":""}