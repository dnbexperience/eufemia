"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[36720,57554,48635],{92181:function(e,n,t){t.r(n);var i=t(52322),o=t(45392),a=t(13812),r=t(68486);function s(e){return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.default,{}),"\n",(0,i.jsx)(r.default,{})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(s,e)})):s()}},68486:function(e,n,t){t.r(n),t.d(n,{default:function(){return d}});var i={};t.r(i),t.d(i,{ViewAndEditContainer:function(){return s}});var o=t(52322),a=t(45392),r=t(64368);const s=()=>(0,o.jsx)(r.Z,{noInline:!0,children:'const MyEditContainer = () => {\n  return (\n    <Form.Section.EditContainer>\n      <Field.Name.First path="/firstName" />\n      <Field.Name.Last path="/lastName" />\n    </Form.Section.EditContainer>\n  )\n}\nconst MyViewContainer = () => {\n  return (\n    <Form.Section.ViewContainer>\n      <Value.SummaryList>\n        <Value.Name.First path="/firstName" />\n        <Value.Name.Last path="/lastName" />\n      </Value.SummaryList>\n    </Form.Section.ViewContainer>\n  )\n}\nrender(\n  <Form.Handler\n    onSubmit={async (data) => console.log(\'onSubmit\', data)}\n    defaultData={{\n      nestedPath: {\n        firstName: \'Nora\',\n      },\n    }}\n  >\n    <Card stack>\n      <Form.SubHeading>Your account</Form.SubHeading>\n      <Form.Section path="/nestedPath" required containerMode="edit">\n        <MyEditContainer />\n        <MyViewContainer />\n      </Form.Section>\n    </Card>\n    <Form.SubmitButton />\n  </Form.Handler>,\n)\n'});function c(e){const n=Object.assign({h2:"h2",p:"p",code:"code"},(0,a.ah)(),e.components);return i||l("Examples",!1),s||l("Examples.ViewAndEditContainer",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{children:"Demos"}),"\n",(0,o.jsxs)(n.p,{children:["This demo shows the edit container opened by default by using the ",(0,o.jsx)(n.code,{children:'containerMode="edit"'})," prop."]}),"\n",(0,o.jsx)(s,{})]})}var d=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(c,e)})):c(e)};function l(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},13812:function(e,n,t){t.r(n);var i=t(52322),o=t(45392);function a(e){const n=Object.assign({h2:"h2",p:"p",code:"code",a:"a",pre:"pre"},(0,o.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"EditContainer"})," enables users to toggle (with animation) the content of each item between the ",(0,i.jsx)(n.a,{href:"/uilib/extensions/forms/Form/Section/ViewContainer/",children:"ViewContainer"})," and this edit container."]}),"\n",(0,i.jsx)(n.p,{children:'By default, it features a toolbar containing a "Done" button and a "Cancel" button. The "Cancel" button resets any changes made to the item content, restoring it to its original state.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { Form, Field, Value } from \'@dnb/eufemia/extensions/forms\'\n\nrender(\n  <Form.Section>\n    <Form.Section.EditContainer title="Edit account holder">\n      <Field.Name.First path="/firstName" />\n      <Field.Name.Last path="/lastName" />\n    </Form.Section.EditContainer>\n\n    <Form.Section.ViewContainer title="Account holder">\n      <Value.SummaryList>\n        <Value.Name.First path="/firstName" />\n        <Value.Name.Last path="/lastName" />\n      </Value.SummaryList>\n    </Form.Section.ViewContainer>\n  </Form.Section>,\n)\n'})}),"\n",(0,i.jsx)(n.h2,{children:"Accessibility"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"EditContainer"})," component has an ",(0,i.jsx)(n.code,{children:"aria-label"})," attribute, which is set to the ",(0,i.jsx)(n.code,{children:"title"})," prop value. It uses a section element to wrap the content, which helps users with screen readers to get the needed announcement."]}),"\n",(0,i.jsx)(n.p,{children:"When the edit container becomes active, it will automatically receive the active element focus. And when the edit container switches to the view container, the focus will be set to the view container."})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(a,e)})):a(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-section-edit-container-mdx-d91a40a65099739f6179.js.map