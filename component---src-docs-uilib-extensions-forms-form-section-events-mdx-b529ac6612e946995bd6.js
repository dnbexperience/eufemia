"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[72803],{39568:function(t,e,n){n.r(e);var a=n(52322),i=n(45392),o=n(85179),s=n(67492);function l(t){const e=Object.assign({h2:"h2",h3:"h3"},(0,i.ah)(),t.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{children:"Properties"}),"\n",(0,a.jsx)(e.h3,{children:"Section-specific properties"}),"\n",(0,a.jsx)(o.ZP,{props:s.e})]})}e.default=function(t){void 0===t&&(t={});const{wrapper:e}=Object.assign({},(0,i.ah)(),t.components);return e?(0,a.jsx)(e,Object.assign({},t,{children:(0,a.jsx)(l,t)})):l(t)}},6210:function(t,e,n){var a=n(30600);e.Z=a.Z},64223:function(t,e,n){var a=n(91859);e.Z=a.Z},41676:function(t,e,n){var a=n(76711);e.Z=a.Z},67492:function(t,e,n){n.d(e,{I:function(){return a},e:function(){return i}});const a={path:{doc:"A path to the section (JSON Pointer). When defined, fields inside the section will get this path as a prefix of their own path.",type:"string",status:"optional"},overwriteProps:{doc:"Overwrite field props for the section.",type:"object",status:"optional"},translation:{doc:"Provide a translation for the section (e.g. `{'nb-NO': { MySection: { MyField: { label: 'Custom' }}}}`).",type:"object",status:"optional"},required:{doc:"Makes all fields inside it required.",type:"boolean",status:"optional"},validateInitially:{doc:'If set to `true`, the whole section will be validated initially. All fields will then automatically get `validateInitially` and show their error messages. Can be useful in combination with `containerMode="auto"`.',type:"boolean",status:"optional"},defaultData:{doc:"Provide default data to the section fields and values, in case the data context (Form.Handler) is not available.",type:"object",status:"optional"},data:{doc:"Provide data to the section fields and values, in case the data context (Form.Handler) is not available.",type:"object",status:"optional"},containerMode:{doc:'Defines the container mode. Can be `view`, `edit` or `auto`. When set to `auto`, the mode will initially be "edit" if fields contain errors. Defaults to `auto`.',type:"string",status:"optional"},children:{doc:"All the fields and values inside the section.",type:"React.Node",status:"optional"}},i={onChange:{doc:"Will be called when a value of a field was changed by the user, with the data set (including the changed value) as argument.",type:"function",status:"optional"}}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-section-events-mdx-b529ac6612e946995bd6.js.map