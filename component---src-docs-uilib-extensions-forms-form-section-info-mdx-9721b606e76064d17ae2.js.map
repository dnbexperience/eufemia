{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-section-info-mdx-9721b606e76064d17ae2.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Section/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Form.Section\"\n      }), \" lets you compose together sections of fields and values to be reused in different contexts.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It lets you overwrite all of the given props if needed and even move the nested \", _jsx(_components.code, {\n        children: \"Form.Section\"\n      }), \"s to a different location in the data context. This makes it super easy to reuse the same collection of fields and values in different contexts.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is a list of \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/sections/all-sections/\",\n        children: \"reusable sections\"\n      }), \" (alpha).\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Usage\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Export the section component:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field } from '@dnb/eufemia/extensions/forms'\\n\\nexport const MySection = (props) => {\\n  return (\\n    <Form.Section {...props}>\\n      {/* Fields*/}\\n      <Field.PhoneNumber path=\\\"/phoneNumber\\\" required />\\n\\n      {/* Views*/}\\n      <View.PhoneNumber path=\\\"/phoneNumber\\\" />\\n    </Form.Section>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Import the section component and use it in a form:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form } from '@dnb/eufemia/extensions/forms'\\nimport { MySection } from './form-sections'\\n\\nconst MyForm = () => {\\n  return (\\n    <Form.Handler>\\n      <MySection />\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Overwrite props\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It lets you overwrite all of the given props if needed by using \", _jsx(_components.code, {\n        children: \"overwriteProps\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field } from '@dnb/eufemia/extensions/forms'\\n\\nconst MySection = (props) => {\\n  return (\\n    <Form.Section {...props}>\\n      <Field.Name.First path=\\\"/firstName\\\" />\\n      <Field.Name.Last path=\\\"/lastName\\\" required minLength={2} />\\n    </Form.Section>\\n  )\\n}\\n\\nrender(\\n  <Form.Handler>\\n    <MySection\\n      overwriteProps={{\\n        firstName: { label: '/Custom label' },\\n        lastName: { required: false, minLength: 0 },\\n      }}\\n    />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"Optional \", _jsx(_components.code, {\n        children: \"path\"\n      }), \" support\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Optionally you can define a \", _jsx(_components.code, {\n        children: \"path\"\n      }), \" to the section component. Fields inside the section will get this path as a prefix of their own path. This makes it possible to reuse the same section component in different contexts.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field } from '@dnb/eufemia/extensions/forms'\\n\\nconst MySection = (props) => {\\n  return (\\n    <Form.Section {...props}>\\n      <Field.Name.First path=\\\"/firstName\\\" />\\n      <Field.Name.Last path=\\\"/lastName\\\" />\\n    </Form.Section>\\n  )\\n}\\n\\nrender(\\n  <Form.Handler\\n    defaultData={{\\n      // MySection has a path=\\\"/nestedPath\\\" and therefore it is nested in the data context\\n      nestedPath: {\\n        firstName: 'Nora',\\n      },\\n    }}\\n  >\\n    <MySection path=\\\"/nestedPath\\\" />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Required prop\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Optionally you can define a \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop to the section component. Fields inside the section then be required.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"render(\\n  <Form.Section required={true}>\\n    <Field.Name.First path=\\\"/firstName\\\" />\\n    <Field.Name.Last path=\\\"/lastName\\\" />\\n  </Form.Section>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"TypeScript support\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Optionally you can define what the props of the nested fields should accept:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field, SectionProps } from '@dnb/eufemia/extensions/forms'\\nimport type { Props as PhoneNumberProps } from '@dnb/eufemia/extensions/forms/Field/PhoneNumber'\\n\\nconst MySection = (\\n  props: SectionProps<{ phoneNumber?: PhoneNumberProps }>,\\n) => {\\n  return (\\n    <Form.Section {...props}>\\n      <Field.Name.Last path=\\\"/phoneNumber\\\" required />\\n    </Form.Section>\\n  )\\n}\\n\\nrender(\\n  <Form.Handler>\\n    <MySection />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Schema support\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also use a \", _jsx(_components.code, {\n        children: \"schema\"\n      }), \" to define the properties of the nested fields:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field, JSONSchema } from '@dnb/eufemia/extensions/forms'\\n\\nconst MySection = (props) => {\\n  return (\\n    <Form.Section {...props}>\\n      <Field.PhoneNumber path=\\\"/phoneNumber\\\" />\\n    </Form.Section>\\n  )\\n}\\n\\nconst schema: JSONSchema = {\\n  type: 'object',\\n  properties: {\\n    mySection: {\\n      type: 'object',\\n      properties: {\\n        phoneNumber: {\\n          type: 'string',\\n          pattern: '^[0-9]{10}$',\\n        },\\n      },\\n      required: ['phoneNumber'],\\n    },\\n  },\\n}\\n\\nrender(\\n  <Form.Handler schema={schema}>\\n    <MySection path=\\\"/mySection\\\" />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Translations\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the \", _jsx(_components.code, {\n        children: \"translations\"\n      }), \" prop to provide translations for the section:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Field, Form } from '@dnb/eufemia/extensions/forms'\\n\\nconst translations = {\\n  // Its optional to wrap the translations in an additional \\\"MySection\\\" object\\n  'nb-NO': { MySection: { MyField: { label: 'Felt label' } } },\\n  'en-GB': { MySection: { MyField: { label: 'Field label' } } },\\n}\\ntype Translation = (typeof translations)[keyof typeof translations]\\n\\nexport function MySection() {\\n  return (\\n    <Form.Section translations={translations}>\\n      <ContentOfMySection />\\n    </Form.Section>\\n  )\\n}\\n\\nfunction ContentOfMySection() {\\n  const { MyField } = Form.useTranslation<Translation>().MySection\\n  return <Field.String label={MyField.label} path=\\\"/custom\\\" />\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This way it is possible to \\\"extend\\\" or change the translations for a specific section from a \", _jsx(_components.code, {\n        children: \"Form.handler\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form } from '@dnb/eufemia/extensions/forms'\\nimport { MySection } from './form-sections'\\n\\nconst myTranslations = {\\n  'nb-NO': { MySection: { MyField: { label: 'Egendefinert' } } },\\n  'en-GB': { MySection: { MyField: { label: 'Custom' } } },\\n}\\n\\nexport function MyForm() {\\n  return (\\n    <Form.Handler translations={myTranslations}>\\n      <MySection />\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Snapshot testing of a section/block\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One way to ensure a \\\"contract\\\" of what you expect a section to be outlined as, is to create a snapshot test:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Tools } from '@dnb/eufemia/extensions/forms'\\nimport { GenerateRef } from '@dnb/eufemia/extensions/forms/Tools/ListAllProps'\\n\\nit('MySection should match snapshot', () => {\\n  const generateRef = React.createRef<GenerateRef>()\\n\\n  render(\\n    <Form.Handler>\\n      <Tools.ListAllProps generateRef={generateRef}>\\n        <MySection />\\n      </Tools.ListAllProps>\\n    </Form.Handler>,\\n  )\\n\\n  const { propsOfFields, propsOfValues } = generateRef.current()\\n  expect(propsOfFields).toMatchInlineSnapshot(`...`)\\n  expect(propsOfValues).toMatchInlineSnapshot(`...`)\\n})\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","a","ol","li","pre","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","className","start","wrapper","MDXLayout"],"sourceRoot":""}