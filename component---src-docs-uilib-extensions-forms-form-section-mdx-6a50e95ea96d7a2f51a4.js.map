{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-section-mdx-6a50e95ea96d7a2f51a4.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Section.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Section/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from './Section/info.mdx';\nimport Demos from './Section/demos.mdx';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    ol: \"ol\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Form.Section\"\n      }), \" lets you compose together sections of fields and values to be reused in different contexts.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Good to know\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"It allows you to easily customize and reposition nested \", _jsx(_components.code, {\n          children: \"Form.Section\"\n        }), \" components within the data context, making it effortless to reuse the same set of fields and values in various contexts. Check out e.g. the \", _jsx(_components.code, {\n          children: \"overwriteProps\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"path\"\n        }), \" properties for more information.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"When defining a default value for a field or value, you can use the \", _jsx(_components.code, {\n          children: \"defaultValue\"\n        }), \" property instead of value. It will not take precedence over the data context like value does.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use \", _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/Form/Visibility/\",\n          children: \"Visibility\"\n        }), \" to handle logic and hide parts of your form based on the data context.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To provide localization for all used texts defined in the \", _jsx(_components.code, {\n          children: \"translations\"\n        }), \" property of the section, you can create a localization easily.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Only imported sections with their localizations are included in the production bundle.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"It is possible to overwrite the translations later by using the \", _jsx(_components.code, {\n          children: \"Form.Handler\"\n        }), \" component.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"A single section can be used without \", _jsx(_components.code, {\n          children: \"Form.Handler\"\n        }), \", just like any other field and value.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"An \", _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/Form/Section/EditContainer/\",\n          children: \"EditContainer\"\n        }), \" and \", _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/Form/Section/ViewContainer/\",\n          children: \"ViewContainer\"\n        }), \" container is available to be used.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Here is a \", _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/blocks/\",\n          children: \"list of blocks\"\n        }), \" ready to use.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Usage\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Create the section component and export it:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field } from '@dnb/eufemia/extensions/forms'\\n\\nexport function MySection(props) {\\n  return (\\n    <Form.Section {...props}>\\n      {/* Fields*/}\\n      <Field.PhoneNumber path=\\\"/phoneNumber\\\" required />\\n\\n      {/* Views*/}\\n      <View.PhoneNumber path=\\\"/phoneNumber\\\" />\\n    </Form.Section>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Import the section component and use it in a form:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form } from '@dnb/eufemia/extensions/forms'\\nimport { MySection } from './form-sections'\\n\\nfunction MyForm() {\\n  return (\\n    <Form.Handler>\\n      <MySection />\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Overwrite properties\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It lets you overwrite all of the given properties if needed by using \", _jsx(_components.code, {\n        children: \"overwriteProps\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field } from '@dnb/eufemia/extensions/forms'\\n\\nconst MySection = (props) => {\\n  return (\\n    <Form.Section {...props}>\\n      <Field.Name.First path=\\\"/firstName\\\" />\\n      <Field.Name.Last path=\\\"/lastName\\\" required minLength={2} />\\n    </Form.Section>\\n  )\\n}\\n\\nrender(\\n  <Form.Handler>\\n    <MySection\\n      overwriteProps={{\\n        firstName: { label: '/Custom label' },\\n        lastName: { required: false, minLength: 0 },\\n      }}\\n    />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"Optional \", _jsx(_components.code, {\n        children: \"path\"\n      }), \" support\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Optionally you can define a \", _jsx(_components.code, {\n        children: \"path\"\n      }), \" to the section component. Fields inside the section will get this path as a prefix of their own path. This makes it possible to reuse the same section component in different contexts.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field } from '@dnb/eufemia/extensions/forms'\\n\\nconst MySection = (props) => {\\n  return (\\n    <Form.Section {...props}>\\n      <Field.Name.First path=\\\"/firstName\\\" />\\n      <Field.Name.Last path=\\\"/lastName\\\" />\\n    </Form.Section>\\n  )\\n}\\n\\nrender(\\n  <Form.Handler\\n    defaultData={{\\n      // MySection has a path=\\\"/nestedPath\\\" and therefore it is nested in the data context\\n      nestedPath: {\\n        firstName: 'Nora',\\n      },\\n    }}\\n  >\\n    <MySection path=\\\"/nestedPath\\\" />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Required property\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Optionally you can define a \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" property to the section component. Fields inside the section then be required.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"render(\\n  <Form.Section required={true}>\\n    <Field.Name.First path=\\\"/firstName\\\" />\\n    <Field.Name.Last path=\\\"/lastName\\\" />\\n  </Form.Section>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"TypeScript support\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Optionally you can define what the properties of the nested fields should accept:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field, SectionProps } from '@dnb/eufemia/extensions/forms'\\nimport type { Props as PhoneNumberProps } from '@dnb/eufemia/extensions/forms/Field/PhoneNumber'\\n\\nconst MySection = (\\n  props: SectionProps<{ phoneNumber?: PhoneNumberProps }>,\\n) => {\\n  return (\\n    <Form.Section {...props}>\\n      <Field.Name.Last path=\\\"/phoneNumber\\\" required />\\n    </Form.Section>\\n  )\\n}\\n\\nrender(\\n  <Form.Handler>\\n    <MySection />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Schema support\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also use a \", _jsx(_components.code, {\n        children: \"schema\"\n      }), \" to define the properties of the nested fields:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field, JSONSchema } from '@dnb/eufemia/extensions/forms'\\n\\nconst MySection = (props) => {\\n  return (\\n    <Form.Section {...props}>\\n      <Field.PhoneNumber path=\\\"/phoneNumber\\\" />\\n    </Form.Section>\\n  )\\n}\\n\\nconst schema: JSONSchema = {\\n  type: 'object',\\n  properties: {\\n    mySection: {\\n      type: 'object',\\n      properties: {\\n        phoneNumber: {\\n          type: 'string',\\n          pattern: '^[0-9]{10}$',\\n        },\\n      },\\n      required: ['phoneNumber'],\\n    },\\n  },\\n}\\n\\nrender(\\n  <Form.Handler schema={schema}>\\n    <MySection path=\\\"/mySection\\\" />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Translations\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the \", _jsx(_components.code, {\n        children: \"translations\"\n      }), \" property to provide translations for the section:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Field, Form } from '@dnb/eufemia/extensions/forms'\\n\\nconst translations = {\\n  // It's optional to wrap the translations in an additional \\\"MySection\\\" object\\n  'nb-NO': { MySection: { MyField: { label: 'Felt label' } } },\\n  'en-GB': { MySection: { MyField: { label: 'Field label' } } },\\n}\\ntype Translation = (typeof translations)[keyof typeof translations]\\n\\nexport function MySection() {\\n  return (\\n    <Form.Section translations={translations}>\\n      <ContentOfMySection />\\n    </Form.Section>\\n  )\\n}\\n\\nfunction ContentOfMySection() {\\n  const { MyField } = Form.useTranslation<Translation>().MySection\\n  return <Field.String label={MyField.label} path=\\\"/custom\\\" />\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This way it is possible to \\\"extend\\\" or change the translations for a specific section from a \", _jsx(_components.code, {\n        children: \"Form.handler\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form } from '@dnb/eufemia/extensions/forms'\\nimport { MySection } from './form-sections'\\n\\nconst myTranslations = {\\n  'nb-NO': { MySection: { MyField: { label: 'Egendefinert' } } },\\n  'en-GB': { MySection: { MyField: { label: 'Custom' } } },\\n}\\n\\nexport function MyForm() {\\n  return (\\n    <Form.Handler translations={myTranslations}>\\n      <MySection />\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Edit and View container\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Form.Section\"\n      }), \" supports an \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Section/EditContainer/\",\n        children: \"EditContainer\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Section/ViewContainer/\",\n        children: \"ViewContainer\"\n      }), \" container. The edit container should be used for data input with fields. While the view container is used to display the data in a read-only way.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field } from '@dnb/eufemia/extensions/forms'\\n\\nfunction MyEditContainer() {\\n  return (\\n    <Form.Section.EditContainer>\\n      <Field.Name.First path=\\\"/firstName\\\" />\\n      <Field.Name.Last path=\\\"/lastName\\\" />\\n    </Form.Section.EditContainer>\\n  )\\n}\\n\\nfunction MyViewContainer() {\\n  return (\\n    <Form.Section.EditContainer>\\n      <Value.Name.First path=\\\"/firstName\\\" />\\n      <Value.Name.Last path=\\\"/lastName\\\" />\\n    </Form.Section.EditContainer>\\n  )\\n}\\n\\nfunction MySection() {\\n  return (\\n    <Form.Section>\\n      <MyEditContainer />\\n      <MyViewContainer />\\n    </Form.Section>\\n  )\\n}\\n\\nrender(\\n  <Form.Handler>\\n    <MySection />\\n    <Form.SubmitButton />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Note: The reason \", _jsx(_components.code, {\n        children: \"Done\"\n      }), \" and not \", _jsx(_components.code, {\n        children: \"Save\"\n      }), \" is used in the toolbar button is because validation is done in fields. If we decouple the data entered in a section, the \", _jsx(_components.code, {\n        children: \"Form.Handler\"\n      }), \" will not be able to validate the data on submit. This can also lead to missing data because the user can press the submit button before \", _jsx(_components.code, {\n        children: \"Save\"\n      }), \" is pressed.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Snapshot testing of a section (block)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One way to ensure a \\\"contract\\\" of what you expect a section to be outlined as, is to create a snapshot test:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Tools } from '@dnb/eufemia/extensions/forms'\\nimport { GenerateRef } from '@dnb/eufemia/extensions/forms/Tools/ListAllProps'\\n\\nit('MySection should match snapshot', () => {\\n  const generateRef = React.createRef<GenerateRef>()\\n\\n  render(\\n    <Form.Handler>\\n      <Tools.ListAllProps generateRef={generateRef}>\\n        <MySection />\\n      </Tools.ListAllProps>\\n    </Form.Handler>,\\n  )\\n\\n  const { propsOfFields, propsOfValues } = generateRef.current()\\n  expect(propsOfFields).toMatchInlineSnapshot(`...`)\\n  expect(propsOfValues).toMatchInlineSnapshot(`...`)\\n})\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","_components","h2","p","code","h3","ul","li","a","ol","pre","href","className","start"],"sourceRoot":""}