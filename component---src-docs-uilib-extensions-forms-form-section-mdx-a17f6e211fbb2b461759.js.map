{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-section-mdx-a17f6e211fbb2b461759.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Section.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Section/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Section/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Section/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from './Section/info.mdx';\nimport Demos from './Section/demos.mdx';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Card, Code, Flex, P, Section } from '@dnb/eufemia/src'\nimport {\n  Field,\n  Form,\n  JSONSchema,\n  SectionProps,\n  Value,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport const WithoutDataContext = () => {\n  return (\n    <ComponentBox>\n      <Form.Section data={{ myField: 'Value' }} onChange={console.log}>\n        <Field.String path=\"/myField\" />\n      </Form.Section>\n    </ComponentBox>\n  )\n}\n\nexport const NestedPathSection = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyNameSection = (props: SectionProps) => {\n          return (\n            <Form.Section {...props}>\n              <Card stack>\n                <Field.Name.First path=\"/firstName\" />\n                <Field.Name.Last path=\"/lastName\" />\n              </Card>\n            </Form.Section>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={console.log}\n            defaultData={{\n              nestedPath: {\n                firstName: 'Nora',\n                lastName: 'MÃ¸rk',\n              },\n            }}\n          >\n            <MyNameSection path=\"/nestedPath\" />\n            <Form.SubmitButton variant=\"send\" />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const OverwriteProps = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyNameSection = (props) => {\n          return (\n            <Form.Section {...props}>\n              <Card stack>\n                <Field.Composition width=\"large\">\n                  <Field.Name.First path=\"/firstName\" />\n                  <Field.Name.Last\n                    path=\"/lastName\"\n                    required\n                    minLength={10}\n                  />\n                </Field.Composition>\n              </Card>\n            </Form.Section>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={console.log}\n            defaultData={{\n              nestedPath: {\n                firstName: '',\n                lastName: 'M',\n              },\n            }}\n          >\n            <MyNameSection\n              path=\"/nestedPath\"\n              overwriteProps={{\n                firstName: {\n                  required: true,\n                  label: 'Custom',\n                },\n                lastName: {\n                  required: false,\n                  minLength: 2,\n                },\n              }}\n            />\n            <Form.SubmitButton variant=\"send\" />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AllFieldsRequired = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyNameSection = (props: SectionProps) => {\n          return (\n            <Form.Section {...props}>\n              <Card stack>\n                <Field.Composition width=\"large\">\n                  <Field.Name.First path=\"/firstName\" />\n                  <Field.Name.Last path=\"/lastName\" />\n                </Field.Composition>\n              </Card>\n            </Form.Section>\n          )\n        }\n\n        const schema: JSONSchema = {\n          type: 'object',\n          required: ['myRequiredSection'],\n        }\n\n        return (\n          <Flex.Stack>\n            <Form.Handler onSubmit={console.log}>\n              <MyNameSection required />\n              <Form.SubmitButton variant=\"send\" />\n            </Form.Handler>\n\n            <Form.Handler onSubmit={console.log} schema={schema}>\n              <MyNameSection path=\"/myRequiredSection\" />\n              <Form.SubmitButton variant=\"send\" />\n            </Form.Handler>\n          </Flex.Stack>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const SchemaSupport = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyNameSection = (props: SectionProps) => {\n          return (\n            <Form.Section {...props}>\n              <Card stack>\n                <Field.Composition width=\"large\">\n                  <Field.Name.First path=\"/firstName\" />\n                  <Field.Name.Last\n                    path=\"/lastName\"\n                    required\n                    minLength={10}\n                  />\n                </Field.Composition>\n              </Card>\n            </Form.Section>\n          )\n        }\n\n        const mySchema: JSONSchema = {\n          type: 'object',\n          properties: {\n            nestedPath: {\n              type: 'object',\n              properties: {\n                firstName: {\n                  type: 'string',\n                  minLength: 3,\n                },\n                lastName: {\n                  type: 'string',\n                  minLength: 2,\n                },\n              },\n              required: ['firstName', 'lastName'],\n            },\n          },\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={console.log}\n            schema={mySchema}\n            defaultData={{\n              nestedPath: {\n                firstName: '',\n                lastName: 'M',\n              },\n            }}\n          >\n            <MyNameSection path=\"/nestedPath\" />\n            <Form.SubmitButton variant=\"send\" />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const WithVisibility = () => {\n  return (\n    <ComponentBox scope={{ Output }}>\n      {() => {\n        const MySection = ({ children, ...props }) => {\n          return (\n            <Form.Section {...props}>\n              <Card stack>\n                <Field.Boolean\n                  label=\"Are you sure?\"\n                  variant=\"buttons\"\n                  path=\"/iAmSure\"\n                />\n                <Form.Visibility visible pathTrue=\"/iAmSure\" animate>\n                  <Field.Selection\n                    label=\"Choose\"\n                    variant=\"radio\"\n                    path=\"/mySelection\"\n                  >\n                    <Field.Option value=\"less\" title=\"Less\" />\n                    <Field.Option value=\"more\" title=\"More\" />\n                  </Field.Selection>\n\n                  <Form.Visibility\n                    visibleWhen={{\n                      path: '/mySelection',\n                      hasValue: 'more',\n                    }}\n                    animate\n                  >\n                    <Field.String label=\"My String\" path=\"/myString\" />\n                  </Form.Visibility>\n                </Form.Visibility>\n\n                {children}\n              </Card>\n\n              <Output />\n            </Form.Section>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onChange={console.log}\n            defaultData={{\n              nestedPath: {\n                iAmSure: false,\n                mySelection: 'less',\n                myString: 'has a value',\n              },\n            }}\n          >\n            <MySection path=\"/nestedPath\">\n              <Form.Visibility\n                visibleWhen={{\n                  path: '/myString',\n                  withValue: (value) => value !== 'has a value',\n                }}\n                animate\n              >\n                <P>\n                  Result:{' '}\n                  <Value.String path=\"/nestedPath/myString\" inline />\n                </P>\n              </Form.Visibility>\n            </MySection>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const NestedSections = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        return (\n          <Form.Handler\n            onSubmit={console.log}\n            defaultData={{\n              nestedPath: {\n                name: {\n                  first: 'Nora',\n                  last: 'MÃ¸rk',\n                },\n                address: {\n                  street: 'StrÃ¸get',\n                  nr: '',\n                },\n              },\n            }}\n          >\n            <MySection path=\"/nestedPath\" required />\n            <Form.SubmitButton variant=\"send\" />\n          </Form.Handler>\n        )\n\n        function MySection(props: SectionProps) {\n          return (\n            <Form.Section {...props}>\n              <Card stack>\n                <MyNameSection path=\"/name\" />\n                <MyAddressSection path=\"/address\" />\n                <MyValueSection />\n              </Card>\n            </Form.Section>\n          )\n        }\n\n        function MyNameSection(props: SectionProps) {\n          return (\n            <Form.Section {...props}>\n              <Field.Composition width=\"large\">\n                <Field.Name.First path=\"/first\" />\n                <Field.Name.Last path=\"/last\" />\n              </Field.Composition>\n            </Form.Section>\n          )\n        }\n\n        function MyAddressSection(props: SectionProps) {\n          return (\n            <Form.Section {...props}>\n              <Field.Composition width=\"large\">\n                <Field.String\n                  label=\"Gateadresse\"\n                  path=\"/street\"\n                  width=\"stretch\"\n                />\n                <Field.String label=\"Nr.\" path=\"/nr\" width=\"small\" />\n              </Field.Composition>\n            </Form.Section>\n          )\n        }\n\n        function MyValueSection(props: SectionProps) {\n          return (\n            <Form.Section {...props}>\n              <Value.SummaryList>\n                <Form.Section path=\"/name\">\n                  <Value.Composition gap=\"small\">\n                    <Value.Name.First path=\"/first\" />\n                    <Value.Name.Last path=\"/last\" />\n                  </Value.Composition>\n                </Form.Section>\n\n                <Form.Section path=\"/address\">\n                  <Value.Composition gap=\"small\">\n                    <Value.String label=\"Gateadresse\" path=\"/street\" />\n                    <Value.String label=\"Nr.\" path=\"/nr\" placeholder=\"â\" />\n                  </Value.Composition>\n                </Form.Section>\n              </Value.SummaryList>\n            </Form.Section>\n          )\n        }\n      }}\n    </ComponentBox>\n  )\n}\n\nconst Output = () => {\n  const { data } = Form.useData()\n\n  return (\n    <Section\n      element=\"output\"\n      innerSpace\n      backgroundColor=\"sand-yellow\"\n      top\n      bottom=\"large\"\n    >\n      <Code>\n        <pre>{JSON.stringify(data, null, 2)}</pre>\n      </Code>\n    </Section>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    a: \"a\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.AllFieldsRequired) _missingMdxReference(\"Examples.AllFieldsRequired\", true);\n  if (!Examples.NestedPathSection) _missingMdxReference(\"Examples.NestedPathSection\", true);\n  if (!Examples.NestedSections) _missingMdxReference(\"Examples.NestedSections\", true);\n  if (!Examples.OverwriteProps) _missingMdxReference(\"Examples.OverwriteProps\", true);\n  if (!Examples.SchemaSupport) _missingMdxReference(\"Examples.SchemaSupport\", true);\n  if (!Examples.WithVisibility) _missingMdxReference(\"Examples.WithVisibility\", true);\n  if (!Examples.WithoutDataContext) _missingMdxReference(\"Examples.WithoutDataContext\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Without Form.Handler\"\n    }), \"\\n\", _jsx(Examples.WithoutDataContext, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With a nested path\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This lets you reuse the same section of fields in multiple places in your forms.\"\n    }), \"\\n\", _jsx(Examples.NestedPathSection, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Overwrite props\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Overwriting props makes it very flexible to reuse the same section of fields in multiple places in your forms.\"\n    }), \"\\n\", _jsx(Examples.OverwriteProps, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Schema support\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This feature lets you extend the requirements of the fields in the section with a \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/all-features/#schema-validation\",\n        children: \"JSON Schema\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Examples.SchemaSupport, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Required support\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can easily make a section of fields required by setting the \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop on the section itself.\"]\n    }), \"\\n\", _jsx(Examples.AllFieldsRequired, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Nested sections\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can nest sections inside each other.\"\n    }), \"\\n\", _jsx(Examples.NestedSections, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With Visibility logic\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Visibility/\",\n        children: \"Visibility\"\n      }), \" component lets you show or hide parts of your form based on the data given in the section itself.\"]\n    }), \"\\n\", _jsx(Examples.WithVisibility, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    ol: \"ol\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Form.Section\"\n      }), \" lets you compose together sections of fields and values to be reused in different contexts.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Good to know\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"It allows you to easily customize and reposition nested \", _jsx(_components.code, {\n          children: \"Form.Section\"\n        }), \" components within the data context, making it effortless to reuse the same set of fields and values in various contexts. Check out e.g. the \", _jsx(_components.code, {\n          children: \"overwriteProps\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"path\"\n        }), \" props for more information.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"When defining a default value for a field or value, you can use the \", _jsx(_components.code, {\n          children: \"defaultValue\"\n        }), \" prop instead of value. It will not take precedence over the data context like value does.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use \", _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/Form/Visibility/\",\n          children: \"Visibility\"\n        }), \" to handle logic and hide parts of your form based on the data context.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To provide localization for all used texts defined in the \", _jsx(_components.code, {\n          children: \"translations\"\n        }), \" prop of the section, you can create a localization easily.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Only imported sections with their localizations are included in the production bundle.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"It is possible to overwrite the translations later by using the \", _jsx(_components.code, {\n          children: \"Form.Handler\"\n        }), \" component.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"A single section can be used without \", _jsx(_components.code, {\n          children: \"Form.Handler\"\n        }), \", just like any other field and value.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Here is a \", _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/blocks/\",\n          children: \"list of blocks\"\n        }), \" ready to use.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Usage\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Create the section component and export it:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field } from '@dnb/eufemia/extensions/forms'\\n\\nexport function MySection(props) {\\n  return (\\n    <Form.Section {...props}>\\n      {/* Fields*/}\\n      <Field.PhoneNumber path=\\\"/phoneNumber\\\" required />\\n\\n      {/* Views*/}\\n      <View.PhoneNumber path=\\\"/phoneNumber\\\" />\\n    </Form.Section>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Import the section component and use it in a form:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form } from '@dnb/eufemia/extensions/forms'\\nimport { MySection } from './form-sections'\\n\\nfunction MyForm() {\\n  return (\\n    <Form.Handler>\\n      <MySection />\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Overwrite props\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It lets you overwrite all of the given props if needed by using \", _jsx(_components.code, {\n        children: \"overwriteProps\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field } from '@dnb/eufemia/extensions/forms'\\n\\nconst MySection = (props) => {\\n  return (\\n    <Form.Section {...props}>\\n      <Field.Name.First path=\\\"/firstName\\\" />\\n      <Field.Name.Last path=\\\"/lastName\\\" required minLength={2} />\\n    </Form.Section>\\n  )\\n}\\n\\nrender(\\n  <Form.Handler>\\n    <MySection\\n      overwriteProps={{\\n        firstName: { label: '/Custom label' },\\n        lastName: { required: false, minLength: 0 },\\n      }}\\n    />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"Optional \", _jsx(_components.code, {\n        children: \"path\"\n      }), \" support\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Optionally you can define a \", _jsx(_components.code, {\n        children: \"path\"\n      }), \" to the section component. Fields inside the section will get this path as a prefix of their own path. This makes it possible to reuse the same section component in different contexts.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field } from '@dnb/eufemia/extensions/forms'\\n\\nconst MySection = (props) => {\\n  return (\\n    <Form.Section {...props}>\\n      <Field.Name.First path=\\\"/firstName\\\" />\\n      <Field.Name.Last path=\\\"/lastName\\\" />\\n    </Form.Section>\\n  )\\n}\\n\\nrender(\\n  <Form.Handler\\n    defaultData={{\\n      // MySection has a path=\\\"/nestedPath\\\" and therefore it is nested in the data context\\n      nestedPath: {\\n        firstName: 'Nora',\\n      },\\n    }}\\n  >\\n    <MySection path=\\\"/nestedPath\\\" />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Required prop\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Optionally you can define a \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" prop to the section component. Fields inside the section then be required.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"render(\\n  <Form.Section required={true}>\\n    <Field.Name.First path=\\\"/firstName\\\" />\\n    <Field.Name.Last path=\\\"/lastName\\\" />\\n  </Form.Section>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"TypeScript support\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Optionally you can define what the props of the nested fields should accept:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field, SectionProps } from '@dnb/eufemia/extensions/forms'\\nimport type { Props as PhoneNumberProps } from '@dnb/eufemia/extensions/forms/Field/PhoneNumber'\\n\\nconst MySection = (\\n  props: SectionProps<{ phoneNumber?: PhoneNumberProps }>,\\n) => {\\n  return (\\n    <Form.Section {...props}>\\n      <Field.Name.Last path=\\\"/phoneNumber\\\" required />\\n    </Form.Section>\\n  )\\n}\\n\\nrender(\\n  <Form.Handler>\\n    <MySection />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Schema support\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also use a \", _jsx(_components.code, {\n        children: \"schema\"\n      }), \" to define the properties of the nested fields:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field, JSONSchema } from '@dnb/eufemia/extensions/forms'\\n\\nconst MySection = (props) => {\\n  return (\\n    <Form.Section {...props}>\\n      <Field.PhoneNumber path=\\\"/phoneNumber\\\" />\\n    </Form.Section>\\n  )\\n}\\n\\nconst schema: JSONSchema = {\\n  type: 'object',\\n  properties: {\\n    mySection: {\\n      type: 'object',\\n      properties: {\\n        phoneNumber: {\\n          type: 'string',\\n          pattern: '^[0-9]{10}$',\\n        },\\n      },\\n      required: ['phoneNumber'],\\n    },\\n  },\\n}\\n\\nrender(\\n  <Form.Handler schema={schema}>\\n    <MySection path=\\\"/mySection\\\" />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Translations\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the \", _jsx(_components.code, {\n        children: \"translations\"\n      }), \" prop to provide translations for the section:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Field, Form } from '@dnb/eufemia/extensions/forms'\\n\\nconst translations = {\\n  // Its optional to wrap the translations in an additional \\\"MySection\\\" object\\n  'nb-NO': { MySection: { MyField: { label: 'Felt label' } } },\\n  'en-GB': { MySection: { MyField: { label: 'Field label' } } },\\n}\\ntype Translation = (typeof translations)[keyof typeof translations]\\n\\nexport function MySection() {\\n  return (\\n    <Form.Section translations={translations}>\\n      <ContentOfMySection />\\n    </Form.Section>\\n  )\\n}\\n\\nfunction ContentOfMySection() {\\n  const { MyField } = Form.useTranslation<Translation>().MySection\\n  return <Field.String label={MyField.label} path=\\\"/custom\\\" />\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This way it is possible to \\\"extend\\\" or change the translations for a specific section from a \", _jsx(_components.code, {\n        children: \"Form.handler\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form } from '@dnb/eufemia/extensions/forms'\\nimport { MySection } from './form-sections'\\n\\nconst myTranslations = {\\n  'nb-NO': { MySection: { MyField: { label: 'Egendefinert' } } },\\n  'en-GB': { MySection: { MyField: { label: 'Custom' } } },\\n}\\n\\nexport function MyForm() {\\n  return (\\n    <Form.Handler translations={myTranslations}>\\n      <MySection />\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Snapshot testing of a section (block)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One way to ensure a \\\"contract\\\" of what you expect a section to be outlined as, is to create a snapshot test:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Tools } from '@dnb/eufemia/extensions/forms'\\nimport { GenerateRef } from '@dnb/eufemia/extensions/forms/Tools/ListAllProps'\\n\\nit('MySection should match snapshot', () => {\\n  const generateRef = React.createRef<GenerateRef>()\\n\\n  render(\\n    <Form.Handler>\\n      <Tools.ListAllProps generateRef={generateRef}>\\n        <MySection />\\n      </Tools.ListAllProps>\\n    </Form.Handler>,\\n  )\\n\\n  const { propsOfFields, propsOfValues } = generateRef.current()\\n  expect(propsOfFields).toMatchInlineSnapshot(`...`)\\n  expect(propsOfValues).toMatchInlineSnapshot(`...`)\\n})\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","WithoutDataContext","_jsx2","ComponentBox","NestedPathSection","noInline","OverwriteProps","AllFieldsRequired","SchemaSupport","WithVisibility","scope","Output","NestedSections","data","Form","Section","element","innerSpace","backgroundColor","top","bottom","Code","JSON","stringify","_components","h2","h3","p","a","code","Examples","_missingMdxReference","href","id","component","Error","ul","li","ol","pre","className","start"],"sourceRoot":""}