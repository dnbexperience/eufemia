"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[80741,45344,59737],{61075:function(n,e,t){t.r(e);var i=t(52322),o=t(45392),r=t(37259),a=t(49871);function s(n){return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.default,{}),"\n",(0,i.jsx)(a.default,{})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(s,n)})):s()}},49871:function(n,e,t){t.r(e);var i=t(52322),o=t(45392),r=t(38254);function a(n){const e=Object.assign({h2:"h2",h3:"h3",p:"p",a:"a",code:"code"},(0,o.ah)(),n.components);return r||s("Examples",!1),r.AllFieldsRequired||s("Examples.AllFieldsRequired",!0),r.BasicViewAndEditContainer||s("Examples.BasicViewAndEditContainer",!0),r.NestedPathSection||s("Examples.NestedPathSection",!0),r.NestedSections||s("Examples.NestedSections",!0),r.OverwriteProps||s("Examples.OverwriteProps",!0),r.SchemaSupport||s("Examples.SchemaSupport",!0),r.ViewAndEditContainer||s("Examples.ViewAndEditContainer",!0),r.WithVisibility||s("Examples.WithVisibility",!0),r.WithoutDataContext||s("Examples.WithoutDataContext",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:"Demos"}),"\n",(0,i.jsx)(e.h3,{children:"Without Form.Handler"}),"\n",(0,i.jsx)(r.WithoutDataContext,{}),"\n",(0,i.jsx)(e.h3,{children:"With a nested path"}),"\n",(0,i.jsx)(e.p,{children:"This lets you reuse the same section of fields in multiple places in your forms."}),"\n",(0,i.jsx)(r.NestedPathSection,{}),"\n",(0,i.jsx)(e.h3,{children:"With a Edit and View container"}),"\n",(0,i.jsxs)(e.p,{children:["This example uses the ",(0,i.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Section/EditContainer/",children:"EditContainer"})," and ",(0,i.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Section/ViewContainer/",children:"ViewContainer"})," containers with the default ",(0,i.jsx)(e.code,{children:'variant="outline"'}),"."]}),"\n",(0,i.jsx)(r.ViewAndEditContainer,{}),"\n",(0,i.jsxs)(e.p,{children:["Using ",(0,i.jsx)(e.code,{children:'variant="basic"'})," will render the view and edit container without the additional Card ",(0,i.jsx)(e.code,{children:"outline"}),"."]}),"\n",(0,i.jsx)(r.BasicViewAndEditContainer,{}),"\n",(0,i.jsx)(e.h3,{children:"Overwrite props"}),"\n",(0,i.jsx)(e.p,{children:"Overwriting props makes it very flexible to reuse the same section of fields in multiple places in your forms."}),"\n",(0,i.jsx)(r.OverwriteProps,{}),"\n",(0,i.jsx)(e.h3,{children:"Schema support"}),"\n",(0,i.jsxs)(e.p,{children:["This feature lets you extend the requirements of the fields in the section with a ",(0,i.jsx)(e.a,{href:"/uilib/extensions/forms/all-features/#schema-validation",children:"JSON Schema"}),"."]}),"\n",(0,i.jsx)(r.SchemaSupport,{}),"\n",(0,i.jsx)(e.h3,{children:"Required support"}),"\n",(0,i.jsxs)(e.p,{children:["You can easily make a section of fields required by setting the ",(0,i.jsx)(e.code,{children:"required"})," prop on the section itself."]}),"\n",(0,i.jsx)(r.AllFieldsRequired,{}),"\n",(0,i.jsx)(e.h3,{children:"Nested sections"}),"\n",(0,i.jsx)(e.p,{children:"You can nest sections inside each other."}),"\n",(0,i.jsx)(r.NestedSections,{}),"\n",(0,i.jsx)(e.h3,{children:"With Visibility logic"}),"\n",(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Visibility/",children:"Visibility"})," component lets you show or hide parts of your form based on the data given in the section itself."]}),"\n",(0,i.jsx)(r.WithVisibility,{})]})}function s(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(a,n)})):a(n)}},37259:function(n,e,t){t.r(e);var i=t(52322),o=t(45392);function r(n){const e=Object.assign({h2:"h2",p:"p",code:"code",h3:"h3",ul:"ul",li:"li",a:"a",ol:"ol",pre:"pre"},(0,o.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:"Description"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"Form.Section"})," lets you compose together sections of fields and values to be reused in different contexts."]}),"\n",(0,i.jsx)(e.h3,{children:"Good to know"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["It allows you to easily customize and reposition nested ",(0,i.jsx)(e.code,{children:"Form.Section"})," components within the data context, making it effortless to reuse the same set of fields and values in various contexts. Check out e.g. the ",(0,i.jsx)(e.code,{children:"overwriteProps"})," and ",(0,i.jsx)(e.code,{children:"path"})," props for more information."]}),"\n",(0,i.jsxs)(e.li,{children:["When defining a default value for a field or value, you can use the ",(0,i.jsx)(e.code,{children:"defaultValue"})," prop instead of value. It will not take precedence over the data context like value does."]}),"\n",(0,i.jsxs)(e.li,{children:["Use ",(0,i.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Visibility/",children:"Visibility"})," to handle logic and hide parts of your form based on the data context."]}),"\n",(0,i.jsxs)(e.li,{children:["To provide localization for all used texts defined in the ",(0,i.jsx)(e.code,{children:"translations"})," prop of the section, you can create a localization easily."]}),"\n",(0,i.jsx)(e.li,{children:"Only imported sections with their localizations are included in the production bundle."}),"\n",(0,i.jsxs)(e.li,{children:["It is possible to overwrite the translations later by using the ",(0,i.jsx)(e.code,{children:"Form.Handler"})," component."]}),"\n",(0,i.jsxs)(e.li,{children:["A single section can be used without ",(0,i.jsx)(e.code,{children:"Form.Handler"}),", just like any other field and value."]}),"\n",(0,i.jsxs)(e.li,{children:["An ",(0,i.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Section/EditContainer/",children:"EditContainer"})," and ",(0,i.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Section/ViewContainer/",children:"ViewContainer"})," container is available to be used."]}),"\n",(0,i.jsxs)(e.li,{children:["Here is a ",(0,i.jsx)(e.a,{href:"/uilib/extensions/forms/blocks/",children:"list of blocks"})," ready to use."]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{children:"Usage"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Create the section component and export it:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:'import { Form, Field } from \'@dnb/eufemia/extensions/forms\'\n\nexport function MySection(props) {\n  return (\n    <Form.Section {...props}>\n      {/* Fields*/}\n      <Field.PhoneNumber path="/phoneNumber" required />\n\n      {/* Views*/}\n      <View.PhoneNumber path="/phoneNumber" />\n    </Form.Section>\n  )\n}\n'})}),"\n",(0,i.jsxs)(e.ol,{start:"2",children:["\n",(0,i.jsx)(e.li,{children:"Import the section component and use it in a form:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\nimport { MySection } from './form-sections'\n\nfunction MyForm() {\n  return (\n    <Form.Handler>\n      <MySection />\n    </Form.Handler>\n  )\n}\n"})}),"\n",(0,i.jsx)(e.h2,{children:"Overwrite props"}),"\n",(0,i.jsxs)(e.p,{children:["It lets you overwrite all of the given props if needed by using ",(0,i.jsx)(e.code,{children:"overwriteProps"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { Form, Field } from '@dnb/eufemia/extensions/forms'\n\nconst MySection = (props) => {\n  return (\n    <Form.Section {...props}>\n      <Field.Name.First path=\"/firstName\" />\n      <Field.Name.Last path=\"/lastName\" required minLength={2} />\n    </Form.Section>\n  )\n}\n\nrender(\n  <Form.Handler>\n    <MySection\n      overwriteProps={{\n        firstName: { label: '/Custom label' },\n        lastName: { required: false, minLength: 0 },\n      }}\n    />\n  </Form.Handler>,\n)\n"})}),"\n",(0,i.jsxs)(e.h2,{children:["Optional ",(0,i.jsx)(e.code,{children:"path"})," support"]}),"\n",(0,i.jsxs)(e.p,{children:["Optionally you can define a ",(0,i.jsx)(e.code,{children:"path"})," to the section component. Fields inside the section will get this path as a prefix of their own path. This makes it possible to reuse the same section component in different contexts."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:'import { Form, Field } from \'@dnb/eufemia/extensions/forms\'\n\nconst MySection = (props) => {\n  return (\n    <Form.Section {...props}>\n      <Field.Name.First path="/firstName" />\n      <Field.Name.Last path="/lastName" />\n    </Form.Section>\n  )\n}\n\nrender(\n  <Form.Handler\n    defaultData={{\n      // MySection has a path="/nestedPath" and therefore it is nested in the data context\n      nestedPath: {\n        firstName: \'Nora\',\n      },\n    }}\n  >\n    <MySection path="/nestedPath" />\n  </Form.Handler>,\n)\n'})}),"\n",(0,i.jsx)(e.h2,{children:"Required prop"}),"\n",(0,i.jsxs)(e.p,{children:["Optionally you can define a ",(0,i.jsx)(e.code,{children:"required"})," prop to the section component. Fields inside the section then be required."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:'render(\n  <Form.Section required={true}>\n    <Field.Name.First path="/firstName" />\n    <Field.Name.Last path="/lastName" />\n  </Form.Section>,\n)\n'})}),"\n",(0,i.jsx)(e.h2,{children:"TypeScript support"}),"\n",(0,i.jsx)(e.p,{children:"Optionally you can define what the props of the nested fields should accept:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { Form, Field, SectionProps } from '@dnb/eufemia/extensions/forms'\nimport type { Props as PhoneNumberProps } from '@dnb/eufemia/extensions/forms/Field/PhoneNumber'\n\nconst MySection = (\n  props: SectionProps<{ phoneNumber?: PhoneNumberProps }>,\n) => {\n  return (\n    <Form.Section {...props}>\n      <Field.Name.Last path=\"/phoneNumber\" required />\n    </Form.Section>\n  )\n}\n\nrender(\n  <Form.Handler>\n    <MySection />\n  </Form.Handler>,\n)\n"})}),"\n",(0,i.jsx)(e.h2,{children:"Schema support"}),"\n",(0,i.jsxs)(e.p,{children:["You can also use a ",(0,i.jsx)(e.code,{children:"schema"})," to define the properties of the nested fields:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { Form, Field, JSONSchema } from '@dnb/eufemia/extensions/forms'\n\nconst MySection = (props) => {\n  return (\n    <Form.Section {...props}>\n      <Field.PhoneNumber path=\"/phoneNumber\" />\n    </Form.Section>\n  )\n}\n\nconst schema: JSONSchema = {\n  type: 'object',\n  properties: {\n    mySection: {\n      type: 'object',\n      properties: {\n        phoneNumber: {\n          type: 'string',\n          pattern: '^[0-9]{10}$',\n        },\n      },\n      required: ['phoneNumber'],\n    },\n  },\n}\n\nrender(\n  <Form.Handler schema={schema}>\n    <MySection path=\"/mySection\" />\n  </Form.Handler>,\n)\n"})}),"\n",(0,i.jsx)(e.h2,{children:"Translations"}),"\n",(0,i.jsxs)(e.p,{children:["You can use the ",(0,i.jsx)(e.code,{children:"translations"})," prop to provide translations for the section:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { Field, Form } from '@dnb/eufemia/extensions/forms'\n\nconst translations = {\n  // Its optional to wrap the translations in an additional \"MySection\" object\n  'nb-NO': { MySection: { MyField: { label: 'Felt label' } } },\n  'en-GB': { MySection: { MyField: { label: 'Field label' } } },\n}\ntype Translation = (typeof translations)[keyof typeof translations]\n\nexport function MySection() {\n  return (\n    <Form.Section translations={translations}>\n      <ContentOfMySection />\n    </Form.Section>\n  )\n}\n\nfunction ContentOfMySection() {\n  const { MyField } = Form.useTranslation<Translation>().MySection\n  return <Field.String label={MyField.label} path=\"/custom\" />\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:['This way it is possible to "extend" or change the translations for a specific section from a ',(0,i.jsx)(e.code,{children:"Form.handler"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\nimport { MySection } from './form-sections'\n\nconst myTranslations = {\n  'nb-NO': { MySection: { MyField: { label: 'Egendefinert' } } },\n  'en-GB': { MySection: { MyField: { label: 'Custom' } } },\n}\n\nexport function MyForm() {\n  return (\n    <Form.Handler translations={myTranslations}>\n      <MySection />\n    </Form.Handler>\n  )\n}\n"})}),"\n",(0,i.jsx)(e.h2,{children:"Edit and View container"}),"\n",(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.code,{children:"Form.Section"})," supports an ",(0,i.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Section/EditContainer/",children:"EditContainer"})," and ",(0,i.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Section/ViewContainer/",children:"ViewContainer"})," container. The edit container should be used for data input with fields. While the view container is used to display the data in a read-only way."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:'import { Form, Field } from \'@dnb/eufemia/extensions/forms\'\n\nfunction MyEditContainer() {\n  return (\n    <Form.Section.EditContainer>\n      <Field.Name.First path="/firstName" />\n      <Field.Name.Last path="/lastName" />\n    </Form.Section.EditContainer>\n  )\n}\n\nfunction MyViewContainer() {\n  return (\n    <Form.Section.EditContainer>\n      <Value.Name.First path="/firstName" />\n      <Value.Name.Last path="/lastName" />\n    </Form.Section.EditContainer>\n  )\n}\n\nfunction MySection() {\n  return (\n    <Form.Section>\n      <MyEditContainer />\n      <MyViewContainer />\n    </Form.Section>\n  )\n}\n\nrender(\n  <Form.Handler>\n    <MySection />\n    <Form.SubmitButton />\n  </Form.Handler>,\n)\n'})}),"\n",(0,i.jsxs)(e.p,{children:["Note: The reason ",(0,i.jsx)(e.code,{children:"Done"})," and not ",(0,i.jsx)(e.code,{children:"Save"})," is used in the toolbar button is because validation is done in fields. If we decouple the data entered in a section, the ",(0,i.jsx)(e.code,{children:"Form.Handler"})," will not be able to validate the data on submit. This can also lead to missing data because the user can press the submit button before ",(0,i.jsx)(e.code,{children:"Save"})," is pressed."]}),"\n",(0,i.jsx)(e.h2,{children:"Snapshot testing of a section (block)"}),"\n",(0,i.jsx)(e.p,{children:'One way to ensure a "contract" of what you expect a section to be outlined as, is to create a snapshot test:'}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { Form, Tools } from '@dnb/eufemia/extensions/forms'\nimport { GenerateRef } from '@dnb/eufemia/extensions/forms/Tools/ListAllProps'\n\nit('MySection should match snapshot', () => {\n  const generateRef = React.createRef<GenerateRef>()\n\n  render(\n    <Form.Handler>\n      <Tools.ListAllProps generateRef={generateRef}>\n        <MySection />\n      </Tools.ListAllProps>\n    </Form.Handler>,\n  )\n\n  const { propsOfFields, propsOfValues } = generateRef.current()\n  expect(propsOfFields).toMatchInlineSnapshot(`...`)\n  expect(propsOfValues).toMatchInlineSnapshot(`...`)\n})\n"})})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(r,n)})):r(n)}},38254:function(n,e,t){t.r(e),t.d(e,{AllFieldsRequired:function(){return p},BasicViewAndEditContainer:function(){return m},NestedPathSection:function(){return d},NestedSections:function(){return f},OverwriteProps:function(){return h},SchemaSupport:function(){return u},ViewAndEditContainer:function(){return c},WithVisibility:function(){return F},WithoutDataContext:function(){return l}});var i=t(58469),o=t(54109),r=t(30730),a=t(49118),s=t(52322);const l=()=>(0,s.jsx)(i.Z,{children:"<Form.Section\n  data={{\n    myField: 'Value',\n  }}\n  onChange={console.log}\n>\n  <Field.String path=\"/myField\" />\n</Form.Section>\n"}),d=()=>(0,s.jsx)(i.Z,{noInline:!0,children:'const MyNameSection = (props: SectionProps) => {\n  return (\n    <Form.Section {...props}>\n      <Card stack>\n        <Field.Name.First path="/firstName" />\n        <Field.Name.Last path="/lastName" />\n      </Card>\n    </Form.Section>\n  )\n}\nrender(\n  <Form.Handler\n    onSubmit={async (data) => console.log(\'onSubmit\', data)}\n    defaultData={{\n      nestedPath: {\n        firstName: \'Nora\',\n        lastName: \'Mørk\',\n      },\n    }}\n  >\n    <MyNameSection path="/nestedPath" />\n    <Form.SubmitButton variant="send" />\n  </Form.Handler>,\n)\n'}),c=()=>(0,s.jsx)(i.Z,{"data-visual-test":"view-and-edit-container",hideCode:!0,noInline:!0,children:'const MyEditContainer = () => {\n  return (\n    <Form.Section.EditContainer>\n      <Field.Name.First path="/firstName" />\n      <Field.Name.Last path="/lastName" />\n    </Form.Section.EditContainer>\n  )\n}\nconst MyViewContainer = () => {\n  return (\n    <Form.Section.ViewContainer>\n      <Value.SummaryList>\n        <Value.Name.First path="/firstName" />\n        <Value.Name.Last path="/lastName" />\n      </Value.SummaryList>\n    </Form.Section.ViewContainer>\n  )\n}\nrender(\n  <Form.Handler\n    onSubmit={async (data) => console.log(\'onSubmit\', data)}\n    defaultData={{\n      nestedPath: {\n        firstName: \'Nora\',\n      },\n    }}\n  >\n    <Card stack>\n      <Form.SubHeading>Your account</Form.SubHeading>\n      <Form.Section path="/nestedPath" required>\n        <MyEditContainer />\n        <MyViewContainer />\n      </Form.Section>\n    </Card>\n    <Form.SubmitButton />\n  </Form.Handler>,\n)\n'}),m=()=>(0,s.jsx)(i.Z,{"data-visual-test":"basic-view-and-edit-container",hideCode:!0,noInline:!0,children:'const MyEditContainer = () => {\n  return (\n    <Form.Section.EditContainer variant="basic">\n      <Field.Name.First path="/firstName" />\n      <Field.Name.Last path="/lastName" />\n    </Form.Section.EditContainer>\n  )\n}\nconst MyViewContainer = () => {\n  return (\n    <Form.Section.ViewContainer variant="basic">\n      <Value.SummaryList>\n        <Value.Name.First path="/firstName" />\n        <Value.Name.Last path="/lastName" />\n      </Value.SummaryList>\n    </Form.Section.ViewContainer>\n  )\n}\nrender(\n  <Form.Handler\n    onSubmit={async (data) => console.log(\'onSubmit\', data)}\n    defaultData={{\n      nestedPath: {\n        firstName: \'Nora\',\n      },\n    }}\n  >\n    <Card stack>\n      <Form.SubHeading>Your account</Form.SubHeading>\n      <Form.Section path="/nestedPath" required>\n        <MyEditContainer />\n        <MyViewContainer />\n      </Form.Section>\n    </Card>\n    <Form.SubmitButton />\n  </Form.Handler>,\n)\n'}),h=()=>(0,s.jsx)(i.Z,{noInline:!0,children:'const MyNameSection = (props) => {\n  return (\n    <Form.Section {...props}>\n      <Card stack>\n        <Field.Composition width="large">\n          <Field.Name.First path="/firstName" />\n          <Field.Name.Last path="/lastName" required minLength={10} />\n        </Field.Composition>\n      </Card>\n    </Form.Section>\n  )\n}\nrender(\n  <Form.Handler\n    onSubmit={async (data) => console.log(\'onSubmit\', data)}\n    defaultData={{\n      nestedPath: {\n        firstName: \'\',\n        lastName: \'M\',\n      },\n    }}\n  >\n    <MyNameSection\n      path="/nestedPath"\n      overwriteProps={{\n        firstName: {\n          required: true,\n          label: \'Custom\',\n        },\n        lastName: {\n          required: false,\n          minLength: 2,\n        },\n      }}\n    />\n    <Form.SubmitButton variant="send" />\n  </Form.Handler>,\n)\n'}),p=()=>(0,s.jsx)(i.Z,{noInline:!0,children:'const MyNameSection = (props: SectionProps) => {\n  return (\n    <Form.Section {...props}>\n      <Card stack>\n        <Field.Composition width="large">\n          <Field.Name.First path="/firstName" />\n          <Field.Name.Last path="/lastName" />\n        </Field.Composition>\n      </Card>\n    </Form.Section>\n  )\n}\nconst schema: JSONSchema = {\n  type: \'object\',\n  required: [\'myRequiredSection\'],\n}\nrender(\n  <Flex.Stack>\n    <Form.Handler onSubmit={async (data) => console.log(\'onSubmit\', data)}>\n      <MyNameSection required />\n      <Form.SubmitButton variant="send" />\n    </Form.Handler>\n\n    <Form.Handler\n      onSubmit={async (data) => console.log(\'onSubmit\', data)}\n      schema={schema}\n    >\n      <MyNameSection path="/myRequiredSection" />\n      <Form.SubmitButton variant="send" />\n    </Form.Handler>\n  </Flex.Stack>,\n)\n'}),u=()=>(0,s.jsx)(i.Z,{noInline:!0,children:"const MyNameSection = (props: SectionProps) => {\n  return (\n    <Form.Section {...props}>\n      <Card stack>\n        <Field.Composition width=\"large\">\n          <Field.Name.First path=\"/firstName\" />\n          <Field.Name.Last path=\"/lastName\" required minLength={10} />\n        </Field.Composition>\n      </Card>\n    </Form.Section>\n  )\n}\nconst mySchema: JSONSchema = {\n  type: 'object',\n  properties: {\n    nestedPath: {\n      type: 'object',\n      properties: {\n        firstName: {\n          type: 'string',\n          minLength: 3,\n        },\n        lastName: {\n          type: 'string',\n          minLength: 2,\n        },\n      },\n      required: ['firstName', 'lastName'],\n    },\n  },\n}\nrender(\n  <Form.Handler\n    onSubmit={async (data) => console.log('onSubmit', data)}\n    schema={mySchema}\n    defaultData={{\n      nestedPath: {\n        firstName: '',\n        lastName: 'M',\n      },\n    }}\n  >\n    <MyNameSection path=\"/nestedPath\" />\n    <Form.SubmitButton variant=\"send\" />\n  </Form.Handler>,\n)\n"}),F=()=>(0,s.jsx)(i.Z,{scope:{Output:S},noInline:!0,children:'const MySection = ({ children, ...props }) => {\n  return (\n    <Form.Section {...props}>\n      <Card stack>\n        <Field.Boolean\n          label="Are you sure?"\n          variant="buttons"\n          path="/iAmSure"\n        />\n        <Form.Visibility visible pathTrue="/iAmSure" animate>\n          <Field.Selection\n            label="Choose"\n            variant="radio"\n            path="/mySelection"\n          >\n            <Field.Option value="less" title="Less" />\n            <Field.Option value="more" title="More" />\n          </Field.Selection>\n\n          <Form.Visibility\n            visibleWhen={{\n              path: \'/mySelection\',\n              hasValue: \'more\',\n            }}\n            animate\n          >\n            <Field.String label="My String" path="/myString" />\n          </Form.Visibility>\n        </Form.Visibility>\n\n        {children}\n      </Card>\n\n      <Output />\n    </Form.Section>\n  )\n}\nrender(\n  <Form.Handler\n    onChange={console.log}\n    defaultData={{\n      nestedPath: {\n        iAmSure: false,\n        mySelection: \'less\',\n        myString: \'has a value\',\n      },\n    }}\n  >\n    <MySection path="/nestedPath">\n      <Form.Visibility\n        visibleWhen={{\n          path: \'/myString\',\n          withValue: (value) => value !== \'has a value\',\n        }}\n        animate\n      >\n        <P>\n          Result: <Value.String path="/nestedPath/myString" inline />\n        </P>\n      </Form.Visibility>\n    </MySection>\n  </Form.Handler>,\n)\n'}),f=()=>(0,s.jsx)(i.Z,{noInline:!0,children:'render(\n  <Form.Handler\n    onSubmit={async (data) => console.log(\'onSubmit\', data)}\n    defaultData={{\n      nestedPath: {\n        name: {\n          first: \'Nora\',\n          last: \'Mørk\',\n        },\n        address: {\n          street: \'Strøget\',\n          nr: \'\',\n        },\n      },\n    }}\n  >\n    <MySection path="/nestedPath" required />\n    <Form.SubmitButton variant="send" />\n  </Form.Handler>,\n)\nfunction MySection(props: SectionProps) {\n  return (\n    <Form.Section {...props}>\n      <Card stack>\n        <MyNameSection path="/name" />\n        <MyAddressSection path="/address" />\n        <MyValueSection />\n      </Card>\n    </Form.Section>\n  )\n}\nfunction MyNameSection(props: SectionProps) {\n  return (\n    <Form.Section {...props}>\n      <Field.Composition width="large">\n        <Field.Name.First path="/first" />\n        <Field.Name.Last path="/last" />\n      </Field.Composition>\n    </Form.Section>\n  )\n}\nfunction MyAddressSection(props: SectionProps) {\n  return (\n    <Form.Section {...props}>\n      <Field.Composition width="large">\n        <Field.String label="Gateadresse" path="/street" width="stretch" />\n        <Field.String label="Nr." path="/nr" width="small" />\n      </Field.Composition>\n    </Form.Section>\n  )\n}\nfunction MyValueSection(props: SectionProps) {\n  return (\n    <Form.Section {...props}>\n      <Value.SummaryList>\n        <Form.Section path="/name">\n          <Value.Composition gap="small">\n            <Value.Name.First path="/first" />\n            <Value.Name.Last path="/last" />\n          </Value.Composition>\n        </Form.Section>\n\n        <Form.Section path="/address">\n          <Value.Composition gap="small">\n            <Value.String label="Gateadresse" path="/street" />\n            <Value.String label="Nr." path="/nr" placeholder="–" />\n          </Value.Composition>\n        </Form.Section>\n      </Value.SummaryList>\n    </Form.Section>\n  )\n}\n'}),S=()=>{const{data:n}=a.Z();return(0,s.jsx)(o.Z,{element:"output",innerSpace:!0,backgroundColor:"sand-yellow",top:!0,bottom:"large",children:(0,s.jsx)(r.Z,{children:(0,s.jsx)("pre",{children:JSON.stringify(n,null,2)})})})}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-section-mdx-ccedfd3636483f97ba62.js.map