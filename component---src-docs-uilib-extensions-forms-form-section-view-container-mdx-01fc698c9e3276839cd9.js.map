{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-section-view-container-mdx-01fc698c9e3276839cd9.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Section/ViewContainer.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Section/ViewContainer/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Section/ViewContainer/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Section/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/GenerateSchema.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/ListAllProps.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/Log.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from './ViewContainer/info';\nimport Demos from './ViewContainer/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.ViewAndEditContainer) _missingMdxReference(\"Examples.ViewAndEditContainer\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(Examples.ViewAndEditContainer, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"ViewContainer\"\n      }), \" enables users to toggle (with animation) the content of each item between this view and the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Section/EditContainer/\",\n        children: \"EditContainer\"\n      }), \" container.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"By default, it features the toolbar containing a \\\"Edit\\\" button.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field, Value } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Section>\\n    <Form.Section.EditContainer title=\\\"Edit account holder\\\">\\n      <Field.Name.Last path=\\\"/name\\\" />\\n    </Form.Section.EditContainer>\\n\\n    <Form.Section.ViewContainer title=\\\"Account holder\\\">\\n      <Value.Name.Last path=\\\"/name\\\" />\\n    </Form.Section.ViewContainer>\\n  </Form.Section>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Customize the Toolbar\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Value } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Section>\\n    <Form.Section.ViewContainer>\\n      <Value.Name.Last itemPath=\\\"/name\\\" />\\n\\n      <Form.Section.Toolbar>\\n        <Form.Section.ViewContainer.EditButton />\\n      </Form.Section.Toolbar>\\n    </Form.Section.ViewContainer>\\n  </Form.Section>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"ViewContainer\"\n      }), \" component has an \", _jsx(_components.code, {\n        children: \"aria-label\"\n      }), \" attribute, which is set to the \", _jsx(_components.code, {\n        children: \"title\"\n      }), \" property value. It uses a section element to wrap the content, which helps users with screen readers to get the needed announcement.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When the item (view and edit) container gets removed, the active element focus will be set on the previous item.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Flex, P } from '@dnb/eufemia/src'\nimport {\n  Field,\n  Form,\n  JSONSchema,\n  SectionProps,\n  Tools,\n  Value,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport const WithoutDataContext = () => {\n  return (\n    <ComponentBox>\n      <Form.Section data={{ myField: 'Value' }} onChange={console.log}>\n        <Field.String path=\"/myField\" />\n      </Form.Section>\n    </ComponentBox>\n  )\n}\n\nexport const NestedPathSection = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyNameSection = (props: SectionProps) => {\n          return (\n            <Form.Section {...props}>\n              <Form.Card>\n                <Field.Name.First path=\"/firstName\" />\n                <Field.Name.Last path=\"/lastName\" />\n              </Form.Card>\n            </Form.Section>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            defaultData={{\n              nestedPath: {\n                firstName: 'Nora',\n                lastName: 'Mørk',\n              },\n            }}\n          >\n            <MyNameSection path=\"/nestedPath\" />\n            <Form.SubmitButton variant=\"send\" />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const ViewAndEditContainer = () => {\n  return (\n    <ComponentBox data-visual-test=\"view-and-edit-container\" hideCode>\n      {() => {\n        const MyEditContainer = () => {\n          return (\n            <Form.Section.EditContainer>\n              <Field.Name.First path=\"/firstName\" />\n              <Field.Name.Last path=\"/lastName\" />\n            </Form.Section.EditContainer>\n          )\n        }\n\n        const MyViewContainer = () => {\n          return (\n            <Form.Section.ViewContainer>\n              <Value.SummaryList>\n                <Value.Name.First path=\"/firstName\" />\n                <Value.Name.Last path=\"/lastName\" />\n              </Value.SummaryList>\n            </Form.Section.ViewContainer>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            defaultData={{\n              nestedPath: {\n                firstName: 'Nora',\n                lastName: 'Mørk',\n              },\n            }}\n          >\n            <Form.Card>\n              <Form.SubHeading>Your account</Form.SubHeading>\n              <Form.Section path=\"/nestedPath\" required>\n                <MyEditContainer />\n                <MyViewContainer />\n              </Form.Section>\n            </Form.Card>\n            <Form.SubmitButton />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const ViewAndEditContainerValidation = () => {\n  return (\n    <ComponentBox hideCode>\n      {() => {\n        const MyEditContainer = () => {\n          return (\n            <Form.Section.EditContainer>\n              <Field.Name.First path=\"/firstName\" />\n              <Field.Name.Last path=\"/lastName\" />\n            </Form.Section.EditContainer>\n          )\n        }\n\n        const MyViewContainer = () => {\n          return (\n            <Form.Section.ViewContainer>\n              <Value.SummaryList>\n                <Value.Name.First path=\"/firstName\" />\n                <Value.Name.Last path=\"/lastName\" />\n              </Value.SummaryList>\n            </Form.Section.ViewContainer>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            defaultData={{\n              nestedPath: {\n                firstName: 'Nora',\n                lastName: undefined, // initiate error\n              },\n            }}\n          >\n            <Form.Card>\n              <Form.SubHeading>Your account</Form.SubHeading>\n              <Form.Section path=\"/nestedPath\" required validateInitially>\n                <MyEditContainer />\n                <MyViewContainer />\n              </Form.Section>\n            </Form.Card>\n            <Form.SubmitButton />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const BasicViewAndEditContainer = () => {\n  return (\n    <ComponentBox\n      data-visual-test=\"basic-view-and-edit-container\"\n      hideCode\n    >\n      {() => {\n        const MyEditContainer = () => {\n          return (\n            <Form.Section.EditContainer variant=\"basic\">\n              <Field.Name.First path=\"/firstName\" />\n              <Field.Name.Last path=\"/lastName\" />\n            </Form.Section.EditContainer>\n          )\n        }\n\n        const MyViewContainer = () => {\n          return (\n            <Form.Section.ViewContainer variant=\"basic\">\n              <Value.SummaryList>\n                <Value.Name.First path=\"/firstName\" />\n                <Value.Name.Last path=\"/lastName\" />\n              </Value.SummaryList>\n            </Form.Section.ViewContainer>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            defaultData={{\n              nestedPath: {\n                firstName: 'Nora',\n                lastName: 'Mørk',\n              },\n            }}\n          >\n            <Form.Card>\n              <Form.SubHeading>Your account</Form.SubHeading>\n              <Form.Section path=\"/nestedPath\" required>\n                <MyEditContainer />\n                <MyViewContainer />\n              </Form.Section>\n            </Form.Card>\n            <Form.SubmitButton />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const OverwriteProps = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyNameSection = (props) => {\n          return (\n            <Form.Section {...props}>\n              <Form.Card>\n                <Field.Composition width=\"large\">\n                  <Field.Name.First path=\"/firstName\" />\n                  <Field.Name.Last\n                    path=\"/lastName\"\n                    required\n                    minLength={10}\n                  />\n                </Field.Composition>\n              </Form.Card>\n            </Form.Section>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            defaultData={{\n              nestedPath: {\n                firstName: '',\n                lastName: 'M',\n              },\n            }}\n          >\n            <MyNameSection\n              path=\"/nestedPath\"\n              overwriteProps={{\n                firstName: {\n                  required: true,\n                  label: 'Custom',\n                },\n                lastName: {\n                  required: false,\n                  minLength: 2,\n                },\n              }}\n            />\n            <Form.SubmitButton variant=\"send\" />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AllFieldsRequired = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyNameSection = (props: SectionProps) => {\n          return (\n            <Form.Section {...props}>\n              <Form.Card>\n                <Field.Composition width=\"large\">\n                  <Field.Name.First path=\"/firstName\" />\n                  <Field.Name.Last path=\"/lastName\" />\n                </Field.Composition>\n              </Form.Card>\n            </Form.Section>\n          )\n        }\n\n        const schema: JSONSchema = {\n          type: 'object',\n          required: ['myRequiredSection'],\n        }\n\n        return (\n          <Flex.Stack>\n            <Form.Handler\n              onSubmit={async (data) => console.log('onSubmit', data)}\n            >\n              <MyNameSection required />\n              <Form.SubmitButton variant=\"send\" />\n            </Form.Handler>\n\n            <Form.Handler\n              onSubmit={async (data) => console.log('onSubmit', data)}\n              schema={schema}\n            >\n              <MyNameSection path=\"/myRequiredSection\" />\n              <Form.SubmitButton variant=\"send\" />\n            </Form.Handler>\n          </Flex.Stack>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const SchemaSupport = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyNameSection = (props: SectionProps) => {\n          return (\n            <Form.Section {...props}>\n              <Form.Card>\n                <Field.Composition width=\"large\">\n                  <Field.Name.First path=\"/firstName\" />\n                  <Field.Name.Last\n                    path=\"/lastName\"\n                    required\n                    minLength={10}\n                  />\n                </Field.Composition>\n              </Form.Card>\n            </Form.Section>\n          )\n        }\n\n        const mySchema: JSONSchema = {\n          type: 'object',\n          properties: {\n            nestedPath: {\n              type: 'object',\n              properties: {\n                firstName: {\n                  type: 'string',\n                  minLength: 3,\n                },\n                lastName: {\n                  type: 'string',\n                  minLength: 2,\n                },\n              },\n              required: ['firstName', 'lastName'],\n            },\n          },\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            schema={mySchema}\n            defaultData={{\n              nestedPath: {\n                firstName: '',\n                lastName: 'M',\n              },\n            }}\n          >\n            <MyNameSection path=\"/nestedPath\" />\n            <Form.SubmitButton variant=\"send\" />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const WithVisibility = () => {\n  return (\n    <ComponentBox scope={{ Tools }}>\n      {() => {\n        const MySection = ({ children, ...props }) => {\n          return (\n            <Form.Section {...props}>\n              <Form.Card>\n                <Field.Boolean\n                  label=\"Are you sure?\"\n                  variant=\"buttons\"\n                  path=\"/iAmSure\"\n                />\n                <Form.Visibility pathTrue=\"/iAmSure\" animate>\n                  <Field.Selection\n                    label=\"Choose\"\n                    variant=\"radio\"\n                    path=\"/mySelection\"\n                  >\n                    <Field.Option value=\"less\" title=\"Less\" />\n                    <Field.Option value=\"more\" title=\"More\" />\n                  </Field.Selection>\n\n                  <Form.Visibility\n                    visibleWhen={{\n                      path: '/mySelection',\n                      hasValue: 'more',\n                    }}\n                    animate\n                  >\n                    <Field.String label=\"My String\" path=\"/myString\" />\n                  </Form.Visibility>\n                </Form.Visibility>\n\n                {children}\n              </Form.Card>\n\n              <Tools.Log />\n            </Form.Section>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onChange={console.log}\n            defaultData={{\n              nestedPath: {\n                iAmSure: false,\n                mySelection: 'less',\n                myString: 'has a value',\n              },\n            }}\n          >\n            <MySection path=\"/nestedPath\">\n              <Form.Visibility\n                visibleWhen={{\n                  path: '/myString',\n                  hasValue: (value) => value !== 'has a value',\n                }}\n                animate\n              >\n                <P>\n                  Result:{' '}\n                  <Value.String path=\"/nestedPath/myString\" inline />\n                </P>\n              </Form.Visibility>\n            </MySection>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const NestedSections = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            defaultData={{\n              nestedPath: {\n                name: {\n                  first: 'Nora',\n                  last: 'Mørk',\n                },\n                address: {\n                  street: 'Strøget',\n                  nr: '',\n                },\n              },\n            }}\n          >\n            <MySection path=\"/nestedPath\" required />\n            <Form.SubmitButton variant=\"send\" />\n          </Form.Handler>\n        )\n\n        function MySection(props: SectionProps) {\n          return (\n            <Form.Section {...props}>\n              <Form.Card>\n                <MyNameSection path=\"/name\" />\n                <MyAddressSection path=\"/address\" />\n                <MyValueSection />\n              </Form.Card>\n            </Form.Section>\n          )\n        }\n\n        function MyNameSection(props: SectionProps) {\n          return (\n            <Form.Section {...props}>\n              <Field.Composition width=\"large\">\n                <Field.Name.First path=\"/first\" />\n                <Field.Name.Last path=\"/last\" />\n              </Field.Composition>\n            </Form.Section>\n          )\n        }\n\n        function MyAddressSection(props: SectionProps) {\n          return (\n            <Form.Section {...props}>\n              <Field.Composition width=\"large\">\n                <Field.String\n                  label=\"Gateadresse\"\n                  path=\"/street\"\n                  width=\"stretch\"\n                />\n                <Field.String label=\"Nr.\" path=\"/nr\" width=\"small\" />\n              </Field.Composition>\n            </Form.Section>\n          )\n        }\n\n        function MyValueSection(props: SectionProps) {\n          return (\n            <Form.Section {...props}>\n              <Value.SummaryList>\n                <Form.Section path=\"/name\">\n                  <Value.Composition gap=\"small\">\n                    <Value.Name.First path=\"/first\" />\n                    <Value.Name.Last path=\"/last\" />\n                  </Value.Composition>\n                </Form.Section>\n\n                <Form.Section path=\"/address\">\n                  <Value.Composition gap=\"small\">\n                    <Value.String label=\"Gateadresse\" path=\"/street\" />\n                    <Value.String label=\"Nr.\" path=\"/nr\" placeholder=\"–\" />\n                  </Value.Composition>\n                </Form.Section>\n              </Value.SummaryList>\n            </Form.Section>\n          )\n        }\n      }}\n    </ComponentBox>\n  )\n}\n","import { useCallback, useContext, useRef } from 'react'\nimport pointer, { JsonObject } from '../utils/json-pointer'\nimport DataContext, { FilterData } from '../DataContext/Context'\nimport { JSONSchema } from '../types'\n\nexport type GenerateSchemaReturn = {\n  schema: JSONSchema\n  data: JsonObject\n  propsOfFields: JsonObject\n  propsOfValues: JsonObject\n}\nexport type GenerateSchemaProps = {\n  log?: boolean\n  generateRef?: React.MutableRefObject<() => GenerateSchemaReturn>\n  filterData?: FilterData\n  children: React.ReactNode\n}\nexport type GenerateRef = GenerateSchemaProps['generateRef']['current']\n\nexport const schemaParams = [\n  'minLength',\n  'maxLength',\n  'pattern',\n  'description',\n  'min',\n  'max',\n  'multipleOf',\n  'exclusiveMinimum',\n  'exclusiveMaximum',\n]\n\nexport default function GenerateSchema(props: GenerateSchemaProps) {\n  const { generateRef, filterData, log, children } = props || {}\n  const { fieldPropsRef, valuePropsRef, data, hasContext } =\n    useContext(DataContext)\n\n  const dataRef = useRef<JsonObject>({})\n  dataRef.current = data\n\n  const generate = useCallback(() => {\n    const schema = Object.entries(fieldPropsRef?.current || {}).reduce(\n      (acc, [path, props]) => {\n        if (path.startsWith('/')) {\n          const objectKey = path.substring(1)\n\n          const pathList = objectKey.split('/')\n          const slashCount = pathList.length\n\n          const type = props.valueType || 'string'\n          const propertyValue = {\n            type,\n          }\n\n          for (const prop of schemaParams) {\n            if (props[prop]) {\n              propertyValue[prop] = props[prop]\n            }\n          }\n\n          if (slashCount > 1) {\n            const nestedPath = ['']\n            for (const path of pathList) {\n              nestedPath.push(path)\n              const pathToSet = nestedPath.join('/properties/')\n              const isLast = nestedPath.length - 1 === pathList.length\n\n              const existingValue = pointer.has(acc, pathToSet)\n                ? pointer.get(acc, pathToSet)\n                : null\n\n              const pathValue = isLast ? propertyValue : existingValue\n\n              if (isLast) {\n                if (filterData?.[pathToSet] !== false) {\n                  pointer.set(acc, pathToSet, pathValue)\n                }\n              } else {\n                const pathValue = {\n                  type: 'object',\n                  ...existingValue,\n                }\n\n                // - Add required\n                const required = []\n                if (props.required) {\n                  required.push(pathList.at(-1))\n                }\n                if (existingValue?.required) {\n                  required.push(...existingValue.required)\n                }\n                if (required.length > 0) {\n                  pathValue.required = required\n                }\n\n                if (filterData?.[pathToSet] !== false) {\n                  pointer.set(acc, pathToSet, pathValue)\n                }\n              }\n            }\n          } else {\n            if (filterData?.[path] !== false) {\n              pointer.set(acc.properties, path, propertyValue)\n            }\n            if (props.required) {\n              acc.required.push(objectKey)\n            }\n          }\n        }\n\n        return acc\n      },\n      { type: 'object', properties: {}, required: [] }\n    )\n\n    const propsOfFields = Object.entries(\n      fieldPropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function'\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        pointer.set(acc, path, propertyValue)\n      }\n\n      return acc\n    }, {})\n\n    const propsOfValues = Object.entries(\n      valuePropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function'\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        pointer.set(acc, path, propertyValue)\n      }\n\n      return acc\n    }, {})\n\n    if (schema.required.length === 0) {\n      delete schema.required\n    }\n\n    return {\n      schema,\n      data: dataRef.current,\n      propsOfFields,\n      propsOfValues,\n    } as GenerateSchemaReturn\n  }, [fieldPropsRef, filterData, valuePropsRef])\n\n  if (hasContext) {\n    if (log) {\n      console.log(generate().schema)\n    }\n\n    if (generateRef) {\n      generateRef.current = generate\n    }\n  }\n\n  return children\n}\n","import { isValidElement, useCallback, useContext, useRef } from 'react'\nimport pointer, { JsonObject } from '../utils/json-pointer'\nimport DataContext, { FilterData } from '../DataContext/Context'\n\nexport type ListAllPropsReturn<Data> = {\n  propsOfFields: Data\n  propsOfValues: Data\n}\nexport type ListAllPropsProps<Data> = {\n  log?: boolean\n  generateRef?: React.MutableRefObject<() => ListAllPropsReturn<Data>>\n  filterData?: FilterData\n  children: React.ReactNode\n}\nexport type GenerateRef<Data extends JsonObject = JsonObject> =\n  ListAllPropsProps<Data>['generateRef']['current']\n\nexport default function ListAllProps<Data extends JsonObject = JsonObject>(\n  props: ListAllPropsProps<Data>\n) {\n  const { log, generateRef, filterData, children } = props || {}\n  const { fieldPropsRef, valuePropsRef, data, hasContext } =\n    useContext(DataContext)\n\n  const dataRef = useRef<JsonObject>({})\n  dataRef.current = data\n\n  const generate = useCallback(() => {\n    const propsOfFields = Object.entries(\n      fieldPropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function' &&\n            !isValidElement(props[prop])\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        if (filterData?.[path] !== false) {\n          pointer.set(acc, path, propertyValue)\n        }\n      }\n\n      return acc\n    }, {})\n\n    const propsOfValues = Object.entries(\n      valuePropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function' &&\n            !isValidElement(props[prop])\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        if (filterData?.[path] !== false) {\n          pointer.set(acc, path, propertyValue)\n        }\n      }\n\n      return acc\n    }, {})\n\n    return { propsOfFields, propsOfValues } as ListAllPropsReturn<Data>\n  }, [fieldPropsRef, filterData, valuePropsRef])\n\n  if (hasContext) {\n    if (log) {\n      console.log(generate())\n    }\n\n    if (generateRef) {\n      generateRef.current = generate\n    }\n  }\n\n  return children\n}\n","import React, { useContext } from 'react'\nimport DataContext from '../DataContext/Context'\nimport Section, { SectionAllProps } from '../../../components/Section'\nimport { FormLabel } from '../../../components'\n\nfunction Log({\n  placeholder,\n  label,\n  data: logData,\n  ...props\n}: Omit<SectionAllProps, 'data' | 'label'> & {\n  data?: unknown\n  label?: React.ReactNode\n  placeholder?: React.ReactNode\n}) {\n  const { data } = useContext(DataContext)\n\n  return (\n    <Section\n      element=\"output\"\n      backgroundColor=\"sand-yellow\"\n      style={{ maxWidth: '80vw' }}\n      innerSpace\n      {...props}\n    >\n      {label && (\n        <FormLabel bottom>\n          <b>{label}</b>\n        </FormLabel>\n      )}\n      <pre>\n        {placeholder && Object.keys((logData ?? data) || {}).length === 0\n          ? placeholder\n          : JSON.stringify(\n              replaceUndefinedValues(logData ?? data),\n              null,\n              2\n            )}\n        {' ' /* Ensure one line of spacing */}\n      </pre>\n    </Section>\n  )\n}\n\n/**\n * Replaces undefined values in an object with a specified replacement value.\n * @param value - The value to check for undefined values.\n * @param replaceWith - The value to replace undefined values with. Default is null.\n * @returns The object with undefined values replaced.\n */\nfunction replaceUndefinedValues(\n  value: unknown,\n  replaceWith = 'undefined' as unknown\n): unknown {\n  if (typeof value === 'undefined') {\n    return replaceWith\n  } else if (Array.isArray(value)) {\n    return value.map((item) => replaceUndefinedValues(item, replaceWith))\n  } else if (value && typeof value === 'object' && value !== replaceWith) {\n    return {\n      ...value,\n      ...Object.fromEntries(\n        Object.entries(value).map(([k, v]) => [\n          k,\n          replaceUndefinedValues(v, replaceWith),\n        ])\n      ),\n    }\n  } else {\n    return value\n  }\n}\n\nLog._supportsSpacingProps = true\nexport default Log\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","_components","h2","Examples","_missingMdxReference","ViewAndEditContainer","id","component","Error","p","code","a","pre","href","className","WithoutDataContext","ComponentBox","NestedPathSection","noInline","hideCode","ViewAndEditContainerValidation","BasicViewAndEditContainer","OverwriteProps","AllFieldsRequired","SchemaSupport","WithVisibility","scope","Tools","NestedSections","schemaParams","GenerateSchema","generateRef","filterData","log","fieldPropsRef","valuePropsRef","data","hasContext","useContext","DataContext","dataRef","useRef","current","generate","useCallback","schema","entries","reduce","acc","_ref","path","startsWith","objectKey","substring","pathList","split","slashCount","length","propertyValue","type","valueType","prop","nestedPath","push","pathToSet","join","isLast","existingValue","pointer","pathValue","required","at","apply","_toConsumableArray","properties","propsOfFields","_ref2","undefined","propsOfValues","_ref3","console","ListAllProps","isValidElement","Log","placeholder","label","logData","Section","element","backgroundColor","style","maxWidth","innerSpace","FormLabel","bottom","keys","JSON","stringify","replaceUndefinedValues","value","replaceWith","Array","isArray","map","item","fromEntries","k","v","_supportsSpacingProps"],"sourceRoot":""}