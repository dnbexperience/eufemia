{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-section-view-container-mdx-3fb0a6813f523979befe.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Section/ViewContainer.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Section/ViewContainer/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Section/ViewContainer/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Section/Examples.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from './ViewContainer/info';\nimport Demos from './ViewContainer/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.ViewAndEditContainer) _missingMdxReference(\"Examples.ViewAndEditContainer\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(Examples.ViewAndEditContainer, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"ViewContainer\"\n      }), \" enables users to toggle (with animation) the content of each item between this view and the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Section/EditContainer/\",\n        children: \"EditContainer\"\n      }), \" container.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"By default, it features the toolbar containing a \\\"Edit\\\" button.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field, Value } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Section>\\n    <Form.Section.EditContainer title=\\\"Edit account holder\\\">\\n      <Field.Name.Last path=\\\"/name\\\" />\\n    </Form.Section.EditContainer>\\n\\n    <Form.Section.ViewContainer title=\\\"Account holder\\\">\\n      <Value.Name.Last path=\\\"/name\\\" />\\n    </Form.Section.ViewContainer>\\n  </Form.Section>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"ViewContainer\"\n      }), \" component has an \", _jsx(_components.code, {\n        children: \"aria-label\"\n      }), \" attribute, which is set to the \", _jsx(_components.code, {\n        children: \"title\"\n      }), \" prop value. It uses a section element to wrap the content, which helps users with screen readers to get the needed announcement.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When the item (view and edit) container gets removed, the active element focus will be set on the previous item.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Card, Code, Flex, P, Section } from '@dnb/eufemia/src'\nimport {\n  Field,\n  Form,\n  JSONSchema,\n  SectionProps,\n  Value,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport const WithoutDataContext = () => {\n  return (\n    <ComponentBox>\n      <Form.Section data={{ myField: 'Value' }} onChange={console.log}>\n        <Field.String path=\"/myField\" />\n      </Form.Section>\n    </ComponentBox>\n  )\n}\n\nexport const NestedPathSection = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyNameSection = (props: SectionProps) => {\n          return (\n            <Form.Section {...props}>\n              <Card stack>\n                <Field.Name.First path=\"/firstName\" />\n                <Field.Name.Last path=\"/lastName\" />\n              </Card>\n            </Form.Section>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            defaultData={{\n              nestedPath: {\n                firstName: 'Nora',\n                lastName: 'MÃ¸rk',\n              },\n            }}\n          >\n            <MyNameSection path=\"/nestedPath\" />\n            <Form.SubmitButton variant=\"send\" />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const ViewAndEditContainer = () => {\n  return (\n    <ComponentBox data-visual-test=\"view-and-edit-container\" hideCode>\n      {() => {\n        const MyEditContainer = () => {\n          return (\n            <Form.Section.EditContainer>\n              <Field.Name.First path=\"/firstName\" />\n              <Field.Name.Last path=\"/lastName\" />\n            </Form.Section.EditContainer>\n          )\n        }\n\n        const MyViewContainer = () => {\n          return (\n            <Form.Section.ViewContainer>\n              <Value.SummaryList>\n                <Value.Name.First path=\"/firstName\" />\n                <Value.Name.Last path=\"/lastName\" />\n              </Value.SummaryList>\n            </Form.Section.ViewContainer>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            defaultData={{\n              nestedPath: {\n                firstName: 'Nora',\n              },\n            }}\n          >\n            <Card stack>\n              <Form.SubHeading>Your account</Form.SubHeading>\n              <Form.Section path=\"/nestedPath\" required>\n                <MyEditContainer />\n                <MyViewContainer />\n              </Form.Section>\n            </Card>\n            <Form.SubmitButton />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const BasicViewAndEditContainer = () => {\n  return (\n    <ComponentBox\n      data-visual-test=\"basic-view-and-edit-container\"\n      hideCode\n    >\n      {() => {\n        const MyEditContainer = () => {\n          return (\n            <Form.Section.EditContainer variant=\"basic\">\n              <Field.Name.First path=\"/firstName\" />\n              <Field.Name.Last path=\"/lastName\" />\n            </Form.Section.EditContainer>\n          )\n        }\n\n        const MyViewContainer = () => {\n          return (\n            <Form.Section.ViewContainer variant=\"basic\">\n              <Value.SummaryList>\n                <Value.Name.First path=\"/firstName\" />\n                <Value.Name.Last path=\"/lastName\" />\n              </Value.SummaryList>\n            </Form.Section.ViewContainer>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            defaultData={{\n              nestedPath: {\n                firstName: 'Nora',\n              },\n            }}\n          >\n            <Card stack>\n              <Form.SubHeading>Your account</Form.SubHeading>\n              <Form.Section path=\"/nestedPath\" required>\n                <MyEditContainer />\n                <MyViewContainer />\n              </Form.Section>\n            </Card>\n            <Form.SubmitButton />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const OverwriteProps = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyNameSection = (props) => {\n          return (\n            <Form.Section {...props}>\n              <Card stack>\n                <Field.Composition width=\"large\">\n                  <Field.Name.First path=\"/firstName\" />\n                  <Field.Name.Last\n                    path=\"/lastName\"\n                    required\n                    minLength={10}\n                  />\n                </Field.Composition>\n              </Card>\n            </Form.Section>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            defaultData={{\n              nestedPath: {\n                firstName: '',\n                lastName: 'M',\n              },\n            }}\n          >\n            <MyNameSection\n              path=\"/nestedPath\"\n              overwriteProps={{\n                firstName: {\n                  required: true,\n                  label: 'Custom',\n                },\n                lastName: {\n                  required: false,\n                  minLength: 2,\n                },\n              }}\n            />\n            <Form.SubmitButton variant=\"send\" />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AllFieldsRequired = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyNameSection = (props: SectionProps) => {\n          return (\n            <Form.Section {...props}>\n              <Card stack>\n                <Field.Composition width=\"large\">\n                  <Field.Name.First path=\"/firstName\" />\n                  <Field.Name.Last path=\"/lastName\" />\n                </Field.Composition>\n              </Card>\n            </Form.Section>\n          )\n        }\n\n        const schema: JSONSchema = {\n          type: 'object',\n          required: ['myRequiredSection'],\n        }\n\n        return (\n          <Flex.Stack>\n            <Form.Handler\n              onSubmit={async (data) => console.log('onSubmit', data)}\n            >\n              <MyNameSection required />\n              <Form.SubmitButton variant=\"send\" />\n            </Form.Handler>\n\n            <Form.Handler\n              onSubmit={async (data) => console.log('onSubmit', data)}\n              schema={schema}\n            >\n              <MyNameSection path=\"/myRequiredSection\" />\n              <Form.SubmitButton variant=\"send\" />\n            </Form.Handler>\n          </Flex.Stack>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const SchemaSupport = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyNameSection = (props: SectionProps) => {\n          return (\n            <Form.Section {...props}>\n              <Card stack>\n                <Field.Composition width=\"large\">\n                  <Field.Name.First path=\"/firstName\" />\n                  <Field.Name.Last\n                    path=\"/lastName\"\n                    required\n                    minLength={10}\n                  />\n                </Field.Composition>\n              </Card>\n            </Form.Section>\n          )\n        }\n\n        const mySchema: JSONSchema = {\n          type: 'object',\n          properties: {\n            nestedPath: {\n              type: 'object',\n              properties: {\n                firstName: {\n                  type: 'string',\n                  minLength: 3,\n                },\n                lastName: {\n                  type: 'string',\n                  minLength: 2,\n                },\n              },\n              required: ['firstName', 'lastName'],\n            },\n          },\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            schema={mySchema}\n            defaultData={{\n              nestedPath: {\n                firstName: '',\n                lastName: 'M',\n              },\n            }}\n          >\n            <MyNameSection path=\"/nestedPath\" />\n            <Form.SubmitButton variant=\"send\" />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const WithVisibility = () => {\n  return (\n    <ComponentBox scope={{ Output }}>\n      {() => {\n        const MySection = ({ children, ...props }) => {\n          return (\n            <Form.Section {...props}>\n              <Card stack>\n                <Field.Boolean\n                  label=\"Are you sure?\"\n                  variant=\"buttons\"\n                  path=\"/iAmSure\"\n                />\n                <Form.Visibility visible pathTrue=\"/iAmSure\" animate>\n                  <Field.Selection\n                    label=\"Choose\"\n                    variant=\"radio\"\n                    path=\"/mySelection\"\n                  >\n                    <Field.Option value=\"less\" title=\"Less\" />\n                    <Field.Option value=\"more\" title=\"More\" />\n                  </Field.Selection>\n\n                  <Form.Visibility\n                    visibleWhen={{\n                      path: '/mySelection',\n                      hasValue: 'more',\n                    }}\n                    animate\n                  >\n                    <Field.String label=\"My String\" path=\"/myString\" />\n                  </Form.Visibility>\n                </Form.Visibility>\n\n                {children}\n              </Card>\n\n              <Output />\n            </Form.Section>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onChange={console.log}\n            defaultData={{\n              nestedPath: {\n                iAmSure: false,\n                mySelection: 'less',\n                myString: 'has a value',\n              },\n            }}\n          >\n            <MySection path=\"/nestedPath\">\n              <Form.Visibility\n                visibleWhen={{\n                  path: '/myString',\n                  hasValue: (value) => value !== 'has a value',\n                }}\n                animate\n              >\n                <P>\n                  Result:{' '}\n                  <Value.String path=\"/nestedPath/myString\" inline />\n                </P>\n              </Form.Visibility>\n            </MySection>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const NestedSections = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            defaultData={{\n              nestedPath: {\n                name: {\n                  first: 'Nora',\n                  last: 'MÃ¸rk',\n                },\n                address: {\n                  street: 'StrÃ¸get',\n                  nr: '',\n                },\n              },\n            }}\n          >\n            <MySection path=\"/nestedPath\" required />\n            <Form.SubmitButton variant=\"send\" />\n          </Form.Handler>\n        )\n\n        function MySection(props: SectionProps) {\n          return (\n            <Form.Section {...props}>\n              <Card stack>\n                <MyNameSection path=\"/name\" />\n                <MyAddressSection path=\"/address\" />\n                <MyValueSection />\n              </Card>\n            </Form.Section>\n          )\n        }\n\n        function MyNameSection(props: SectionProps) {\n          return (\n            <Form.Section {...props}>\n              <Field.Composition width=\"large\">\n                <Field.Name.First path=\"/first\" />\n                <Field.Name.Last path=\"/last\" />\n              </Field.Composition>\n            </Form.Section>\n          )\n        }\n\n        function MyAddressSection(props: SectionProps) {\n          return (\n            <Form.Section {...props}>\n              <Field.Composition width=\"large\">\n                <Field.String\n                  label=\"Gateadresse\"\n                  path=\"/street\"\n                  width=\"stretch\"\n                />\n                <Field.String label=\"Nr.\" path=\"/nr\" width=\"small\" />\n              </Field.Composition>\n            </Form.Section>\n          )\n        }\n\n        function MyValueSection(props: SectionProps) {\n          return (\n            <Form.Section {...props}>\n              <Value.SummaryList>\n                <Form.Section path=\"/name\">\n                  <Value.Composition gap=\"small\">\n                    <Value.Name.First path=\"/first\" />\n                    <Value.Name.Last path=\"/last\" />\n                  </Value.Composition>\n                </Form.Section>\n\n                <Form.Section path=\"/address\">\n                  <Value.Composition gap=\"small\">\n                    <Value.String label=\"Gateadresse\" path=\"/street\" />\n                    <Value.String label=\"Nr.\" path=\"/nr\" placeholder=\"â\" />\n                  </Value.Composition>\n                </Form.Section>\n              </Value.SummaryList>\n            </Form.Section>\n          )\n        }\n      }}\n    </ComponentBox>\n  )\n}\n\nconst Output = () => {\n  const { data } = Form.useData()\n\n  return (\n    <Section\n      element=\"output\"\n      innerSpace\n      backgroundColor=\"sand-yellow\"\n      top\n      bottom=\"large\"\n    >\n      <Code>\n        <pre>{JSON.stringify(data, null, 2)}</pre>\n      </Code>\n    </Section>\n  )\n}\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","_components","h2","Examples","_missingMdxReference","ViewAndEditContainer","id","component","Error","p","code","a","pre","href","className","WithoutDataContext","_jsx2","ComponentBox","NestedPathSection","noInline","hideCode","BasicViewAndEditContainer","OverwriteProps","AllFieldsRequired","SchemaSupport","WithVisibility","scope","Output","NestedSections","data","Form","Section","element","innerSpace","backgroundColor","top","bottom","Code","JSON","stringify"],"sourceRoot":""}