{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-submit-confirmation-demos-mdx-72453beb355e4a320bc7.js","mappings":"yWAIO,MAAMA,EAAaA,KACxBC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,moBA+BWC,EAAmBA,KAC9BH,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,8wCA0DWE,EAAyBA,KACpCJ,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,2gDC5FF,SAASG,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,EAAG,MACFC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAK/B,OAJKC,GAAUC,EAAqB,YAAY,GAC3CD,GAAiCC,EAAqB,mCAAmC,GACzFD,GAAqBC,EAAqB,uBAAuB,GACjED,GAA2BC,EAAqB,6BAA6B,IAC3EC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBhB,SAAU,EAACF,EAAAA,EAAAA,KAAKO,EAAYG,GAAI,CAC9BR,SAAU,UACR,MAAMF,EAAAA,EAAAA,KAAKO,EAAYI,GAAI,CAC7BT,SAAU,6BACR,MAAMF,EAAAA,EAAAA,KAAKe,EAAqB,CAAC,GAAI,MAAMf,EAAAA,EAAAA,KAAKO,EAAYI,GAAI,CAClET,SAAU,kDACR,MAAMF,EAAAA,EAAAA,KAAKO,EAAYK,EAAG,CAC5BV,SAAU,qIACR,MAAMF,EAAAA,EAAAA,KAAKe,EAAiC,CAAC,GAAI,MAAMf,EAAAA,EAAAA,KAAKO,EAAYI,GAAI,CAC9ET,SAAU,uDACR,MAAMF,EAAAA,EAAAA,KAAKe,EAA2B,CAAC,KAE/C,CAOA,MANA,SAAoBT,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOM,GAAYpB,EAAAA,EAAAA,KAAKoB,EAAWZ,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DJ,UAAUF,EAAAA,EAAAA,KAAKK,EAAmBC,MAC9BD,EAAkBC,EAC1B,EAEA,SAASU,EAAqBK,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/SubmitConfirmation/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/SubmitConfirmation/demos.mdx"],"sourcesContent":["import { Dialog, Flex, Section } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, Form } from '@dnb/eufemia/src/extensions/forms'\n\nexport const WithDialog = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        locale=\"en-GB\"\n        onSubmit={async () => {\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n        }}\n      >\n        <Flex.Stack>\n          <Field.String label=\"Label\" path=\"/foo\" defaultValue=\"foo\" />\n          <Form.SubmitButton />\n        </Flex.Stack>\n\n        <Form.SubmitConfirmation\n          preventSubmitWhen={() => true}\n          renderWithState={({ connectWithDialog }) => {\n            return (\n              <Dialog\n                variant=\"confirmation\"\n                title=\"Dialog confirmation title\"\n                description=\"Some content describing the situation.\"\n                {...connectWithDialog}\n              />\n            )\n          }}\n        />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithStateContent = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        locale=\"en-GB\"\n        onSubmit={async () => {\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n        }}\n      >\n        <Form.SubmitConfirmation\n          preventSubmitWhen={() => true}\n          onStateChange={({ confirmationState }) => {\n            console.log('onStateChange', confirmationState)\n          }}\n          renderWithState={({ confirmationState, connectWithDialog }) => {\n            let content = null\n\n            switch (confirmationState) {\n              case 'readyToBeSubmitted':\n                content = <>Is waiting ...</>\n                break\n              case 'submitInProgress':\n                content = <>Submitting...</>\n                break\n              case 'submissionComplete':\n                content = <>Complete!</>\n                break\n              default:\n                content = (\n                  <Flex.Stack>\n                    <Field.String\n                      label=\"Label\"\n                      path=\"/foo\"\n                      defaultValue=\"foo\"\n                    />\n                    <Form.SubmitButton />\n                  </Flex.Stack>\n                )\n                break\n            }\n\n            return (\n              <>\n                {content}\n                <Dialog\n                  variant=\"confirmation\"\n                  title=\"Dialog confirmation title\"\n                  description=\"Some content describing the situation.\"\n                  {...connectWithDialog}\n                />\n              </>\n            )\n          }}\n        />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithCustomReturnStatus = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        locale=\"en-GB\"\n        onSubmit={async () => {\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n          return {\n            customStatus: 'My custom status',\n          }\n        }}\n      >\n        <Flex.Stack>\n          <Field.String label=\"Label\" path=\"/foo\" defaultValue=\"foo\" />\n          <Form.SubmitButton />\n        </Flex.Stack>\n\n        <Form.SubmitConfirmation\n          onSubmitResult={({ submitState, setConfirmationState }) => {\n            if (submitState && submitState.customStatus) {\n              setConfirmationState('readyToBeSubmitted')\n            }\n          }}\n          renderWithState={({ connectWithDialog, submitState }) => {\n            return (\n              <Dialog\n                variant=\"confirmation\"\n                title=\"Dialog confirmation title\"\n                description=\"Some content describing the situation.\"\n                confirmText=\"Send\"\n                {...connectWithDialog}\n              >\n                <Section\n                  variant=\"info\"\n                  innerSpace={{ top: true, bottom: true }}\n                  top\n                >\n                  <Flex.Stack>\n                    <Field.String label=\"Inside the dialog\" path=\"/foo\" />\n                    <Form.Isolation\n                      onChange={console.log}\n                      data={{\n                        bar: submitState\n                          ? submitState.customStatus\n                          : 'bar',\n                      }}\n                    >\n                      <Field.String label=\"Isolated\" path=\"/bar\" />\n                    </Form.Isolation>\n                  </Flex.Stack>\n                </Section>\n              </Dialog>\n            )\n          }}\n        />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.WithCustomReturnStatus) _missingMdxReference(\"Examples.WithCustomReturnStatus\", true);\n  if (!Examples.WithDialog) _missingMdxReference(\"Examples.WithDialog\", true);\n  if (!Examples.WithStateContent) _missingMdxReference(\"Examples.WithStateContent\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"With confirmation dialog\"\n    }), \"\\n\", _jsx(Examples.WithDialog, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Enable and disable the confirmation mechanism\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This example makes first an ordinary submit request. But when the custom status is returned, the dialog component will be shown.\"\n    }), \"\\n\", _jsx(Examples.WithCustomReturnStatus, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Render different content based on the submit state\"\n    }), \"\\n\", _jsx(Examples.WithStateContent, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["WithDialog","_jsx","ComponentBox","children","WithStateContent","WithCustomReturnStatus","_createMdxContent","props","_components","Object","assign","h2","h3","p","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error"],"sourceRoot":""}