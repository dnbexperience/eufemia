"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[13677],{10951:function(n,t,e){e.r(t),e.d(t,{default:function(){return u}});var o={};e.r(o),e.d(o,{WithCustomReturnStatus:function(){return c},WithDialog:function(){return s},WithStateContent:function(){return l}});var i=e(31085),a=e(71184),r=e(78913);const s=()=>(0,i.jsx)(r.A,{children:'<Form.Handler\n  locale="en-GB"\n  onSubmit={async () => {\n    await new Promise((resolve) => setTimeout(resolve, 2000))\n  }}\n>\n  <Flex.Stack>\n    <Field.String label="Label" path="/foo" defaultValue="foo" />\n    <Form.SubmitButton />\n  </Flex.Stack>\n\n  <Form.SubmitConfirmation\n    preventSubmitWhen={() => true}\n    renderWithState={({ connectWithDialog }) => {\n      return (\n        <Dialog\n          variant="confirmation"\n          title="Dialog confirmation title"\n          description="Some content describing the situation."\n          {...connectWithDialog}\n        />\n      )\n    }}\n  />\n</Form.Handler>\n'}),l=()=>(0,i.jsx)(r.A,{children:'<Form.Handler\n  locale="en-GB"\n  onSubmit={async () => {\n    await new Promise((resolve) => setTimeout(resolve, 2000))\n  }}\n>\n  <Form.SubmitConfirmation\n    preventSubmitWhen={() => true}\n    onStateChange={({ confirmationState }) => {\n      console.log(\'onStateChange\', confirmationState)\n    }}\n    renderWithState={({ confirmationState, connectWithDialog }) => {\n      let content = null\n      switch (confirmationState) {\n        case \'readyToBeSubmitted\':\n          content = <>Is waiting ...</>\n          break\n        case \'submitInProgress\':\n          content = <>Submitting...</>\n          break\n        case \'submissionComplete\':\n          content = <>Complete!</>\n          break\n        default:\n          content = (\n            <Flex.Stack>\n              <Field.String label="Label" path="/foo" defaultValue="foo" />\n              <Form.SubmitButton />\n            </Flex.Stack>\n          )\n          break\n      }\n      return (\n        <>\n          {content}\n          <Dialog\n            variant="confirmation"\n            title="Dialog confirmation title"\n            description="Some content describing the situation."\n            {...connectWithDialog}\n          />\n        </>\n      )\n    }}\n  />\n</Form.Handler>\n'}),c=()=>(0,i.jsx)(r.A,{children:'<Form.Handler\n  locale="en-GB"\n  onSubmit={async () => {\n    await new Promise((resolve) => setTimeout(resolve, 2000))\n    return {\n      customStatus: \'My custom status\',\n    }\n  }}\n>\n  <Flex.Stack>\n    <Field.String label="Label" path="/foo" defaultValue="foo" />\n    <Form.SubmitButton />\n  </Flex.Stack>\n\n  <Form.SubmitConfirmation\n    onSubmitResult={({ submitState, setConfirmationState }) => {\n      if (submitState && submitState.customStatus) {\n        setConfirmationState(\'readyToBeSubmitted\')\n      }\n    }}\n    renderWithState={({ connectWithDialog, submitState }) => {\n      return (\n        <Dialog\n          variant="confirmation"\n          title="Dialog confirmation title"\n          description="Some content describing the situation."\n          confirmText="Send"\n          {...connectWithDialog}\n        >\n          <Section\n            variant="info"\n            innerSpace={{\n              top: true,\n              bottom: true,\n            }}\n            top\n          >\n            <Flex.Stack>\n              <Field.String label="Inside the dialog" path="/foo" />\n              <Form.Isolation\n                onChange={console.log}\n                data={{\n                  bar: submitState ? submitState.customStatus : \'bar\',\n                }}\n              >\n                <Field.String label="Isolated" path="/bar" />\n              </Form.Isolation>\n            </Flex.Stack>\n          </Section>\n        </Dialog>\n      )\n    }}\n  />\n</Form.Handler>\n'});function m(n){const t=Object.assign({h2:"h2",h3:"h3",p:"p"},(0,a.R)(),n.components);return o||d("Examples",!1),c||d("Examples.WithCustomReturnStatus",!0),s||d("Examples.WithDialog",!0),l||d("Examples.WithStateContent",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{children:"Demos"}),"\n",(0,i.jsx)(t.h3,{children:"With confirmation dialog"}),"\n",(0,i.jsx)(s,{}),"\n",(0,i.jsx)(t.h3,{children:"Enable and disable the confirmation mechanism"}),"\n",(0,i.jsx)(t.p,{children:"This example makes first an ordinary submit request. But when the custom status is returned, the dialog component will be shown."}),"\n",(0,i.jsx)(c,{}),"\n",(0,i.jsx)(t.h3,{children:"Render different content based on the submit state"}),"\n",(0,i.jsx)(l,{})]})}var u=function(n){void 0===n&&(n={});const{wrapper:t}=Object.assign({},(0,a.R)(),n.components);return t?(0,i.jsx)(t,Object.assign({},n,{children:(0,i.jsx)(m,n)})):m(n)};function d(n,t){throw new Error("Expected "+(t?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-submit-confirmation-demos-mdx-a3d0e778df9f9648d174.js.map