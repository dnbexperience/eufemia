"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[55267,97293,79770],{96293:function(n,e,t){t.r(e);var i=t(52322),o=t(45392),r=t(40042),a=t(38473);function s(n){return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.default,{}),"\n",(0,i.jsx)(a.default,{})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(s,n)})):s()}},38473:function(n,e,t){t.r(e),t.d(e,{default:function(){return h}});var i={};t.r(i),t.d(i,{WithCustomReturnStatus:function(){return l},WithDialog:function(){return s},WithStateContent:function(){return c}});var o=t(52322),r=t(45392),a=t(41404);const s=()=>(0,o.jsx)(a.Z,{children:'<Form.Handler\n  locale="en-GB"\n  onSubmit={async () => {\n    await new Promise((resolve) => setTimeout(resolve, 2000))\n  }}\n>\n  <Flex.Stack>\n    <Field.String label="Label" path="/foo" defaultValue="foo" />\n    <Form.SubmitButton />\n  </Flex.Stack>\n\n  <Form.SubmitConfirmation\n    preventSubmitWhen={() => true}\n    renderWithState={({ connectWithDialog }) => {\n      return (\n        <Dialog\n          variant="confirmation"\n          title="Dialog confirmation title"\n          description="Some content describing the situation."\n          {...connectWithDialog}\n        />\n      )\n    }}\n  />\n</Form.Handler>\n'}),c=()=>(0,o.jsx)(a.Z,{children:'<Form.Handler\n  locale="en-GB"\n  onSubmit={async () => {\n    await new Promise((resolve) => setTimeout(resolve, 2000))\n  }}\n>\n  <Form.SubmitConfirmation\n    preventSubmitWhen={() => true}\n    onStateChange={({ confirmationState }) => {\n      console.log(\'onStateChange\', confirmationState)\n    }}\n    renderWithState={({ confirmationState, connectWithDialog }) => {\n      let content = null\n      switch (confirmationState) {\n        case \'readyToBeSubmitted\':\n          content = <>Is waiting ...</>\n          break\n        case \'submitInProgress\':\n          content = <>Submitting...</>\n          break\n        case \'submissionComplete\':\n          content = <>Complete!</>\n          break\n        default:\n          content = (\n            <Flex.Stack>\n              <Field.String label="Label" path="/foo" defaultValue="foo" />\n              <Form.SubmitButton />\n            </Flex.Stack>\n          )\n          break\n      }\n      return (\n        <>\n          {content}\n          <Dialog\n            variant="confirmation"\n            title="Dialog confirmation title"\n            description="Some content describing the situation."\n            {...connectWithDialog}\n          />\n        </>\n      )\n    }}\n  />\n</Form.Handler>\n'}),l=()=>(0,o.jsx)(a.Z,{children:'<Form.Handler\n  locale="en-GB"\n  onSubmit={async () => {\n    await new Promise((resolve) => setTimeout(resolve, 2000))\n    return {\n      customStatus: \'My custom status\',\n    }\n  }}\n>\n  <Flex.Stack>\n    <Field.String label="Label" path="/foo" defaultValue="foo" />\n    <Form.SubmitButton />\n  </Flex.Stack>\n\n  <Form.SubmitConfirmation\n    onSubmitResult={({ submitState, setConfirmationState }) => {\n      if (submitState && submitState.customStatus) {\n        setConfirmationState(\'readyToBeSubmitted\')\n      }\n    }}\n    renderWithState={({ connectWithDialog, submitState }) => {\n      return (\n        <Dialog\n          variant="confirmation"\n          title="Dialog confirmation title"\n          description="Some content describing the situation."\n          confirmText="Send"\n          {...connectWithDialog}\n        >\n          <Section\n            variant="info"\n            innerSpace={{\n              top: true,\n              bottom: true,\n            }}\n            top\n          >\n            <Flex.Stack>\n              <Field.String label="Inside the dialog" path="/foo" />\n              <Form.Isolation\n                onChange={console.log}\n                data={{\n                  bar: submitState ? submitState.customStatus : \'bar\',\n                }}\n              >\n                <Field.String label="Isolated" path="/bar" />\n              </Form.Isolation>\n            </Flex.Stack>\n          </Section>\n        </Dialog>\n      )\n    }}\n  />\n</Form.Handler>\n'});function d(n){const e=Object.assign({h2:"h2",h3:"h3",p:"p"},(0,r.ah)(),n.components);return i||m("Examples",!1),l||m("Examples.WithCustomReturnStatus",!0),s||m("Examples.WithDialog",!0),c||m("Examples.WithStateContent",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:"Demos"}),"\n",(0,o.jsx)(e.h3,{children:"With confirmation dialog"}),"\n",(0,o.jsx)(s,{}),"\n",(0,o.jsx)(e.h3,{children:"Enable and disable the confirmation mechanism"}),"\n",(0,o.jsx)(e.p,{children:"This example makes first an ordinary submit request. But when the custom status is returned, the dialog component will be shown."}),"\n",(0,o.jsx)(l,{}),"\n",(0,o.jsx)(e.h3,{children:"Render different content based on the submit state"}),"\n",(0,o.jsx)(c,{})]})}var h=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(d,n)})):d(n)};function m(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},40042:function(n,e,t){t.r(e);var i=t(52322),o=t(45392);function r(n){const e=Object.assign({h2:"h2",p:"p",code:"code",a:"a",pre:"pre",ul:"ul",li:"li"},(0,o.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:"Description"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"Form.SubmitConfirmation"})," can be used to prevent the ",(0,i.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Handler/",children:"Form.Handler"})," from submitting, and makes it possible to show a confirmation dialog in different scenarios."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:"import { Dialog } from '@dnb/eufemia'\nimport { Form } from '@dnb/eufemia/extensions/forms'\nrender(\n  <Form.Handler\n    onSubmit={async () => {\n      // Your submit request\n    }}\n  >\n    Content...\n    <Form.SubmitButton />\n    <Form.SubmitConfirmation\n      preventSubmitWhen={(submitState) => {\n        // Your preventSubmitWhen logic\n      }}\n      onStateChange={(parameters) => {\n        // Your onStateChange logic\n      }}\n      renderWithState={(parameters) => {\n        return 'Your content'\n      }}\n    />\n  </Form.Handler>,\n)\n"})}),"\n",(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.code,{children:"renderWithState"})," function is called whenever the submit confirmation state changes. It receives an object as the first parameter, which contains:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"connectWithDialog"})," lets you connect the submit confirmation with a ",(0,i.jsx)(e.a,{href:"/uilib/components/dialog",children:"Dialog"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"submitHandler"})," is a function that can be called to submit the form."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"cancelHandler"})," is a function that can be called to cancel the form."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"setConfirmationState"})," is a function that can be called to update the submit state."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"confirmationState"})," is a string that can be used to determine the current state of the submit confirmation:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"idle"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"readyToBeSubmitted"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"submitInProgress"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"submissionComplete"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"submitState"})," is the state of the ",(0,i.jsx)(e.code,{children:"onSubmit"})," form event:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"error"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"info"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"warning"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"success"})}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"customStatus"})," Your custom status."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"data"})," is the data that was submitted."]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{children:"Connect with a Dialog"}),"\n",(0,i.jsxs)(e.p,{children:["You can connect the submit confirmation with a ",(0,i.jsx)(e.a,{href:"/uilib/components/dialog",children:"Dialog"})," by using the ",(0,i.jsx)(e.code,{children:"connectWithDialog"})," property. This property is an object that contains the ",(0,i.jsx)(e.code,{children:"openState"}),", ",(0,i.jsx)(e.code,{children:"onConfirm"}),", ",(0,i.jsx)(e.code,{children:"onDecline"}),", and ",(0,i.jsx)(e.code,{children:"onClose"})," properties, which you can spread to the Dialog component."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:'import { Dialog } from \'@dnb/eufemia\'\nimport { Form } from \'@dnb/eufemia/extensions/forms\'\n\nrender(\n  <Form.Handler>\n    <Form.SubmitConfirmation\n      renderWithState={({ connectWithDialog }) => {\n        return (\n          <Dialog\n            variant="confirmation"\n            title="Dialog confirmation title"\n            description="Some content describing the situation."\n            {...connectWithDialog}\n          />\n        )\n      }}\n    />\n  </Form.Handler>,\n)\n'})}),"\n",(0,i.jsx)(e.h2,{children:"Using the submitHandler and cancelHandler"}),"\n",(0,i.jsxs)(e.p,{children:["In addition to ",(0,i.jsx)(e.code,{children:"connectWithDialog"}),", there are the ",(0,i.jsx)(e.code,{children:"submitHandler"})," and ",(0,i.jsx)(e.code,{children:"cancelHandler"})," functions, available to handle the submission and cancellation processes:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:'<Form.SubmitConfirmation\n  renderWithState={({ submitHandler, cancelHandler }) => {\n    return (\n      <>\n        <Button onClick={submitHandler} text="Submit" />\n        <Button onClick={cancelHandler} text="Cancel" />\n      </>\n    )\n  }}\n/>\n'})}),"\n",(0,i.jsx)(e.h2,{children:"Accessibility"}),"\n",(0,i.jsxs)(e.p,{children:["When the ",(0,i.jsx)(e.code,{children:"cancelHandler"})," is called or the ",(0,i.jsx)(e.code,{children:"onSubmit"})," event is completed, the ",(0,i.jsx)(e.a,{href:"/uilib/extensions/forms/Form/SubmitButton/",children:"Form.SubmitButton"})," will regain focus."]})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(r,n)})):r(n)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-submit-confirmation-mdx-1a2ec7e4addc74000ec9.js.map