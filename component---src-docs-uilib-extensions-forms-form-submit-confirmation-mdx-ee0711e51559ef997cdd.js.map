{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-submit-confirmation-mdx-ee0711e51559ef997cdd.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/SubmitConfirmation/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/SubmitConfirmation/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/SubmitConfirmation/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/SubmitConfirmation.mdx"],"sourcesContent":["import { Dialog, Flex, Section } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, Form } from '@dnb/eufemia/src/extensions/forms'\n\nexport const WithDialog = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        locale=\"en-GB\"\n        onSubmit={async () => {\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n        }}\n      >\n        <Flex.Stack>\n          <Field.String label=\"Label\" path=\"/foo\" defaultValue=\"foo\" />\n          <Form.SubmitButton />\n        </Flex.Stack>\n\n        <Form.SubmitConfirmation\n          preventSubmitWhen={() => true}\n          renderWithState={({ connectWithDialog }) => {\n            return (\n              <Dialog\n                variant=\"confirmation\"\n                title=\"Dialog confirmation title\"\n                description=\"Some content describing the situation.\"\n                {...connectWithDialog}\n              />\n            )\n          }}\n        />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithStateContent = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        locale=\"en-GB\"\n        onSubmit={async () => {\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n        }}\n      >\n        <Form.SubmitConfirmation\n          preventSubmitWhen={() => true}\n          onStateChange={({ confirmationState }) => {\n            console.log('onStateChange', confirmationState)\n          }}\n          renderWithState={({ confirmationState, connectWithDialog }) => {\n            let content = null\n\n            switch (confirmationState) {\n              case 'readyToBeSubmitted':\n                content = <>Is waiting ...</>\n                break\n              case 'submitInProgress':\n                content = <>Submitting...</>\n                break\n              case 'submissionComplete':\n                content = <>Complete!</>\n                break\n              default:\n                content = (\n                  <Flex.Stack>\n                    <Field.String\n                      label=\"Label\"\n                      path=\"/foo\"\n                      defaultValue=\"foo\"\n                    />\n                    <Form.SubmitButton />\n                  </Flex.Stack>\n                )\n                break\n            }\n\n            return (\n              <>\n                {content}\n                <Dialog\n                  variant=\"confirmation\"\n                  title=\"Dialog confirmation title\"\n                  description=\"Some content describing the situation.\"\n                  {...connectWithDialog}\n                />\n              </>\n            )\n          }}\n        />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithCustomReturnStatus = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        locale=\"en-GB\"\n        onSubmit={async () => {\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n          return {\n            customStatus: 'My custom status',\n          }\n        }}\n      >\n        <Flex.Stack>\n          <Field.String label=\"Label\" path=\"/foo\" defaultValue=\"foo\" />\n          <Form.SubmitButton />\n        </Flex.Stack>\n\n        <Form.SubmitConfirmation\n          onSubmitResult={({ submitState, setConfirmationState }) => {\n            if (submitState && submitState.customStatus) {\n              setConfirmationState('readyToBeSubmitted')\n            }\n          }}\n          renderWithState={({ connectWithDialog, submitState }) => {\n            return (\n              <Dialog\n                variant=\"confirmation\"\n                title=\"Dialog confirmation title\"\n                description=\"Some content describing the situation.\"\n                confirmText=\"Send\"\n                {...connectWithDialog}\n              >\n                <Section\n                  variant=\"info\"\n                  innerSpace={{ top: true, bottom: true }}\n                  top\n                >\n                  <Flex.Stack>\n                    <Field.String label=\"Inside the dialog\" path=\"/foo\" />\n                    <Form.Isolation\n                      onChange={console.log}\n                      data={{\n                        bar: submitState\n                          ? submitState.customStatus\n                          : 'bar',\n                      }}\n                    >\n                      <Field.String label=\"Isolated\" path=\"/bar\" />\n                    </Form.Isolation>\n                  </Flex.Stack>\n                </Section>\n              </Dialog>\n            )\n          }}\n        />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.WithCustomReturnStatus) _missingMdxReference(\"Examples.WithCustomReturnStatus\", true);\n  if (!Examples.WithDialog) _missingMdxReference(\"Examples.WithDialog\", true);\n  if (!Examples.WithStateContent) _missingMdxReference(\"Examples.WithStateContent\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"With confirmation dialog\"\n    }), \"\\n\", _jsx(Examples.WithDialog, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Enable and disable the confirmation mechanism\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This example makes first an ordinary submit request. But when the custom status is returned, the dialog component will be shown.\"\n    }), \"\\n\", _jsx(Examples.WithCustomReturnStatus, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Render different content based on the submit state\"\n    }), \"\\n\", _jsx(Examples.WithStateContent, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Form.SubmitConfirmation\"\n      }), \" can be used to prevent the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Handler/\",\n        children: \"Form.Handler\"\n      }), \" from submitting, and makes it possible to show a confirmation dialog in different scenarios.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Dialog } from '@dnb/eufemia'\\nimport { Form } from '@dnb/eufemia/extensions/forms'\\nrender(\\n  <Form.Handler\\n    onSubmit={async () => {\\n      // Your submit request\\n    }}\\n  >\\n    Content...\\n    <Form.SubmitButton />\\n    <Form.SubmitConfirmation\\n      preventSubmitWhen={(submitState) => {\\n        // Your preventSubmitWhen logic\\n      }}\\n      onStateChange={(parameters) => {\\n        // Your onStateChange logic\\n      }}\\n      renderWithState={(parameters) => {\\n        return 'Your content'\\n      }}\\n    />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"renderWithState\"\n      }), \" function is called whenever the submit confirmation state changes. It receives an object as the first parameter, which contains:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"connectWithDialog\"\n        }), \" lets you connect the submit confirmation with a \", _jsx(_components.a, {\n          href: \"/uilib/components/dialog\",\n          children: \"Dialog\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"submitHandler\"\n        }), \" is a function that can be called to submit the form.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"cancelHandler\"\n        }), \" is a function that can be called to cancel the form.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"setConfirmationState\"\n        }), \" is a function that can be called to update the submit state.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"confirmationState\"\n        }), \" is a string that can be used to determine the current state of the submit confirmation:\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: _jsx(_components.code, {\n              children: \"idle\"\n            })\n          }), \"\\n\", _jsx(_components.li, {\n            children: _jsx(_components.code, {\n              children: \"readyToBeSubmitted\"\n            })\n          }), \"\\n\", _jsx(_components.li, {\n            children: _jsx(_components.code, {\n              children: \"submitInProgress\"\n            })\n          }), \"\\n\", _jsx(_components.li, {\n            children: _jsx(_components.code, {\n              children: \"submissionComplete\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"submitState\"\n        }), \" is the state of the \", _jsx(_components.code, {\n          children: \"onSubmit\"\n        }), \" form event:\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: _jsx(_components.code, {\n              children: \"error\"\n            })\n          }), \"\\n\", _jsx(_components.li, {\n            children: _jsx(_components.code, {\n              children: \"info\"\n            })\n          }), \"\\n\", _jsx(_components.li, {\n            children: _jsx(_components.code, {\n              children: \"warning\"\n            })\n          }), \"\\n\", _jsx(_components.li, {\n            children: _jsx(_components.code, {\n              children: \"success\"\n            })\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.code, {\n              children: \"customStatus\"\n            }), \" Your custom status.\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"data\"\n        }), \" is the data that was submitted.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Connect with a Dialog\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can connect the submit confirmation with a \", _jsx(_components.a, {\n        href: \"/uilib/components/dialog\",\n        children: \"Dialog\"\n      }), \" by using the \", _jsx(_components.code, {\n        children: \"connectWithDialog\"\n      }), \" property. This property is an object that contains the \", _jsx(_components.code, {\n        children: \"openState\"\n      }), \", \", _jsx(_components.code, {\n        children: \"onConfirm\"\n      }), \", \", _jsx(_components.code, {\n        children: \"onDecline\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"onClose\"\n      }), \" properties, which you can spread to the Dialog component.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Dialog } from '@dnb/eufemia'\\nimport { Form } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Handler>\\n    <Form.SubmitConfirmation\\n      renderWithState={({ connectWithDialog }) => {\\n        return (\\n          <Dialog\\n            variant=\\\"confirmation\\\"\\n            title=\\\"Dialog confirmation title\\\"\\n            description=\\\"Some content describing the situation.\\\"\\n            {...connectWithDialog}\\n          />\\n        )\\n      }}\\n    />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Using the submitHandler and cancelHandler\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to \", _jsx(_components.code, {\n        children: \"connectWithDialog\"\n      }), \", there are the \", _jsx(_components.code, {\n        children: \"submitHandler\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"cancelHandler\"\n      }), \" functions, available to handle the submission and cancellation processes:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Form.SubmitConfirmation\\n  renderWithState={({ submitHandler, cancelHandler }) => {\\n    return (\\n      <>\\n        <Button onClick={submitHandler} text=\\\"Submit\\\" />\\n        <Button onClick={cancelHandler} text=\\\"Cancel\\\" />\\n      </>\\n    )\\n  }}\\n/>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When the \", _jsx(_components.code, {\n        children: \"cancelHandler\"\n      }), \" is called or the \", _jsx(_components.code, {\n        children: \"onSubmit\"\n      }), \" event is completed, the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/SubmitButton/\",\n        children: \"Form.SubmitButton\"\n      }), \" will regain focus.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/Form/SubmitConfirmation/info';\nimport Demos from 'Docs/uilib/extensions/forms/Form/SubmitConfirmation/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["WithDialog","_jsx","ComponentBox","children","WithStateContent","WithCustomReturnStatus","_createMdxContent","props","_components","Object","assign","h2","h3","p","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error","code","a","pre","ul","li","href","className","Info","Demos"],"sourceRoot":""}