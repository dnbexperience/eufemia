"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[60520],{35177:function(n,e,t){t.r(e),t.d(e,{default:function(){return h}});var i={};t.r(i),t.d(i,{Default:function(){return l},FilterData:function(){return c},Update:function(){return s},WithoutFormHandler:function(){return d}});var a=t(52322),r=t(45392),o=(t(2784),t(64368));function l(){return(0,a.jsx)(o.Z,{noInline:!0,children:"const existingData = {\n  foo: 'bar',\n}\nconst Component = () => {\n  const { data } = Form.useData('default-id', existingData)\n  return (\n    <Form.Handler id=\"default-id\">\n      <Field.String path=\"/foo\" label={data.foo} />\n    </Form.Handler>\n  )\n}\nrender(<Component />)\n"})}function s(){return(0,a.jsx)(o.Z,{noInline:!0,children:"const existingData = {\n  count: 1,\n}\nconst Component = () => {\n  const { data, update } = Form.useData('update-id', existingData)\n  const increment = React.useCallback(() => {\n    update('/count', (count) => {\n      return count + 1\n    })\n  }, [update])\n  return (\n    <Form.Handler id=\"update-id\">\n      <Flex.Horizontal>\n        <Field.Number path=\"/count\" showStepControls />\n        <Form.SubmitButton\n          onClick={increment}\n          text={'Increment ' + data.count}\n        />\n      </Flex.Horizontal>\n    </Form.Handler>\n  )\n}\nrender(<Component />)\n"})}function d(){return(0,a.jsx)(o.Z,{noInline:!0,children:"const existingData = {\n  count: 1,\n}\nconst Component = () => {\n  const { data, update } = Form.useData('independent-id', existingData)\n  const increment = React.useCallback(() => {\n    update('/count', (count) => {\n      return count + 1\n    })\n  }, [update])\n  return (\n    <Button\n      on_click={increment}\n      text={'Increment ' + data.count}\n      variant=\"secondary\"\n    />\n  )\n}\nrender(\n  <Flex.Vertical>\n    <Component />\n    <Component />\n  </Flex.Vertical>,\n)\n"})}function c(){return(0,a.jsx)(o.Z,{noInline:!0,children:'const filterDataPaths = {\n  \'/isVisible\': false,\n  \'/mySelection\': ({ data }) => data.isVisible,\n  \'/myString\': ({ data }) => {\n    return data.isVisible && data.mySelection === \'more\'\n  },\n}\nconst MyForm = () => {\n  return (\n    <Form.Handler\n      defaultData={{\n        isVisible: false,\n        mySelection: \'less\',\n        myString: \'foo\',\n      }}\n    >\n      <Flex.Stack>\n        <Field.Boolean\n          label="Toggle visible"\n          variant="button"\n          path="/isVisible"\n          data-exclude-field\n        />\n        <Form.Visibility pathTrue="/isVisible" animate>\n          <Field.Selection\n            label="Choose"\n            variant="radio"\n            path="/mySelection"\n            value="less"\n          >\n            <Field.Option value="less" title="Less" />\n            <Field.Option value="more" title="More" />\n          </Field.Selection>\n\n          <Form.Visibility\n            visibleWhen={{\n              path: \'/mySelection\',\n              hasValue: \'more\',\n            }}\n            animate\n          >\n            <Field.String label="My String" path="/myString" value="foo" />\n          </Form.Visibility>\n        </Form.Visibility>\n\n        <Output />\n      </Flex.Stack>\n    </Form.Handler>\n  )\n}\nconst Output = () => {\n  const { data, filterData } = Form.useData()\n  return (\n    <Section\n      element="output"\n      backgroundColor="sand-yellow"\n      style={{\n        maxWidth: \'80vw\',\n      }}\n      innerSpace\n    >\n      <ScrollView>\n        <pre>\n          Filtered: <br />\n          {JSON.stringify(filterData(filterDataPaths), null, 2)}\n        </pre>\n        <pre>\n          All data: <br />\n          {JSON.stringify(data, null, 2)}\n        </pre>\n      </ScrollView>\n    </Section>\n  )\n}\nrender(<MyForm />)\n'})}function u(n){const e=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code"},(0,r.ah)(),n.components);return i||p("Examples",!1),l||p("Examples.Default",!0),c||p("Examples.FilterData",!0),s||p("Examples.Update",!0),d||p("Examples.WithoutFormHandler",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{children:"Demos"}),"\n",(0,a.jsx)(e.h3,{children:"Set data outside of the form"}),"\n",(0,a.jsx)(l,{}),"\n",(0,a.jsx)(e.h3,{children:"Update the data outside of the form"}),"\n",(0,a.jsxs)(e.p,{children:["The update function ",(0,a.jsx)(e.code,{children:"update('/count', (count) => count + 1)"})," has TypeScript support and returns the correct type for ",(0,a.jsx)(e.code,{children:"count"})," (number)."]}),"\n",(0,a.jsx)(s,{}),"\n",(0,a.jsx)(e.h3,{children:"Shared state without a Form.Handler"}),"\n",(0,a.jsx)(d,{}),"\n",(0,a.jsx)(e.h3,{children:"Filter your data"}),"\n",(0,a.jsxs)(e.p,{children:["This example uses the ",(0,a.jsx)(e.code,{children:"keepInDOM"})," property to keep the field in the DOM."]}),"\n",(0,a.jsxs)(e.p,{children:["But with the ",(0,a.jsx)(e.code,{children:"filterData"})," method we can filter out all fields that have the ",(0,a.jsx)(e.code,{children:"data-exclude-field"})," attribute."]}),"\n",(0,a.jsxs)(e.p,{children:["In this demo, the ",(0,a.jsx)(e.code,{children:"data-exclude-field"})," attribute is added when the field are hidden."]}),"\n",(0,a.jsx)(c,{})]})}var h=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,a.jsx)(e,Object.assign({},n,{children:(0,a.jsx)(u,n)})):u(n)};function p(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-use-data-demos-mdx-dfa5aed28fe316fb9423.js.map