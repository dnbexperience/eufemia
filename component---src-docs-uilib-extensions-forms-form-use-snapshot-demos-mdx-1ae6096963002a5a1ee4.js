"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[45590],{70173:function(n,e,t){t.r(e),t.d(e,{default:function(){return d}});var r={};t.r(r),t.d(r,{InWizard:function(){return i},UndoRedo:function(){return p}});var o=t(52322),a=t(45392),s=(t(2784),t(41404));const i=()=>(0,o.jsx)(s.Z,{noInline:!0,children:'const MyForm = () => {\n  const { createSnapshot, revertSnapshot } = Form.useSnapshot(\'my-form\')\n  return (\n    <Form.Handler id="my-form">\n      <Wizard.Container\n        onStepChange={(index, mode, args) => {\n          if (mode === \'previous\') {\n            revertSnapshot(String(args.id), \'my-snapshot-slice\')\n          } else {\n            createSnapshot(args.previousStep.id, \'my-snapshot-slice\')\n          }\n        }}\n      >\n        <Wizard.Step title="Step A" id="step-a">\n          <Form.Snapshot name="my-snapshot-slice">\n            <Field.String path="/foo" label="Will be reverted" />\n          </Form.Snapshot>\n          <Field.String path="/bar" label="Will stay" />\n          <Wizard.Buttons />\n        </Wizard.Step>\n\n        <Wizard.Step title="Step B" id="step-b">\n          <Field.String path="/foo" label="Will be reverted" />\n          <Field.String path="/bar" label="Will stay" />\n          <Wizard.Buttons />\n        </Wizard.Step>\n      </Wizard.Container>\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n'}),p=()=>(0,o.jsx)(s.Z,{noInline:!0,children:'const MyComponent = () => {\n  const { createSnapshot, applySnapshot } = Form.useSnapshot()\n  const pointerRef = React.useRef(0)\n  React.useEffect(() => {\n    createSnapshot(pointerRef.current, \'my-snapshot-slice\')\n  }, [createSnapshot])\n  const changeHandler = React.useCallback(() => {\n    pointerRef.current += 1\n    createSnapshot(pointerRef.current, \'my-snapshot-slice\')\n  }, [createSnapshot])\n  const undoHandler = React.useCallback(() => {\n    pointerRef.current -= 1\n    applySnapshot(pointerRef.current, \'my-snapshot-slice\')\n  }, [applySnapshot])\n  const redoHandler = React.useCallback(() => {\n    pointerRef.current += 1\n    applySnapshot(pointerRef.current, \'my-snapshot-slice\')\n  }, [applySnapshot])\n  return (\n    <>\n      <Form.Card>\n        <Form.Snapshot name="my-snapshot-slice">\n          <Field.String\n            path="/foo"\n            label="Will be reverted"\n            onChange={changeHandler}\n          />\n        </Form.Snapshot>\n        <Field.String path="/bar" label="Will stay" />\n      </Form.Card>\n\n      <Form.ButtonRow>\n        <Button variant="secondary" onClick={undoHandler}>\n          Undo\n        </Button>\n        <Button variant="secondary" onClick={redoHandler}>\n          Redo\n        </Button>\n      </Form.ButtonRow>\n\n      <Tools.Log top />\n    </>\n  )\n}\nrender(\n  <Form.Handler>\n    <MyComponent />\n  </Form.Handler>,\n)\n'});function l(n){const e=Object.assign({h2:"h2",h3:"h3",p:"p"},(0,a.ah)(),n.components);return r||c("Examples",!1),i||c("Examples.InWizard",!0),p||c("Examples.UndoRedo",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:"Demos"}),"\n",(0,o.jsx)(e.h3,{children:"Undo / Redo"}),"\n",(0,o.jsx)(p,{}),"\n",(0,o.jsx)(e.h3,{children:"Used in a Wizard"}),"\n",(0,o.jsx)(e.p,{children:"This example reverts the form data to its previous state when the user navigates back to a previous step."}),"\n",(0,o.jsx)(i,{})]})}var d=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(l,n)})):l(n)};function c(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-use-snapshot-demos-mdx-1ae6096963002a5a1ee4.js.map