{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-use-snapshot-demos-mdx-69920d31389881753058.js","mappings":"6TAUO,MAAMA,EAAWA,KACtBC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,EAAAC,SAAA,gjCA6CWC,EAAWA,KACtBJ,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,EAAAC,SAAA,s5CCrDF,SAASE,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,EAAG,MACFC,EAAAA,EAAAA,KAAsBP,EAAMQ,YAI/B,OAHKC,GAAUC,EAAqB,YAAY,GAC3CD,GAAmBC,EAAqB,qBAAqB,GAC7DD,GAAmBC,EAAqB,qBAAqB,IAC3DC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBf,SAAU,EAACH,EAAAA,EAAAA,KAAKO,EAAYG,GAAI,CAC9BP,SAAU,UACR,MAAMH,EAAAA,EAAAA,KAAKO,EAAYI,GAAI,CAC7BR,SAAU,gBACR,MAAMH,EAAAA,EAAAA,KAAKe,EAAmB,CAAC,GAAI,MAAMf,EAAAA,EAAAA,KAAKO,EAAYI,GAAI,CAChER,SAAU,qBACR,MAAMH,EAAAA,EAAAA,KAAKO,EAAYK,EAAG,CAC5BT,SAAU,8GACR,MAAMH,EAAAA,EAAAA,KAAKe,EAAmB,CAAC,KAEvC,CAOA,MANA,SAAoBT,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,KAAsBP,EAAMQ,YAC3E,OAAOM,GAAYpB,EAAAA,EAAAA,KAAKoB,EAAWZ,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DH,UAAUH,EAAAA,EAAAA,KAAKK,EAAmBC,MAC9BD,EAAkBC,EAC1B,EAEA,SAASU,EAAqBK,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/useSnapshot/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/useSnapshot/demos.mdx"],"sourcesContent":["import React from 'react'\nimport { Button } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport {\n  Field,\n  Form,\n  Tools,\n  Wizard,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport const InWizard = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyForm = () => {\n          const { createSnapshot, revertSnapshot } =\n            Form.useSnapshot('my-form')\n\n          return (\n            <Form.Handler id=\"my-form\">\n              <Wizard.Container\n                onStepChange={(index, mode, args) => {\n                  if (mode === 'previous') {\n                    revertSnapshot(String(args.id), 'my-snapshot-slice')\n                  } else {\n                    createSnapshot(\n                      args.previousStep.id,\n                      'my-snapshot-slice',\n                    )\n                  }\n                }}\n              >\n                <Wizard.Step title=\"Step A\" id=\"step-a\">\n                  <Form.Snapshot name=\"my-snapshot-slice\">\n                    <Field.String path=\"/foo\" label=\"Will be reverted\" />\n                  </Form.Snapshot>\n                  <Field.String path=\"/bar\" label=\"Will stay\" />\n                  <Wizard.Buttons />\n                </Wizard.Step>\n\n                <Wizard.Step title=\"Step B\" id=\"step-b\">\n                  <Field.String path=\"/foo\" label=\"Will be reverted\" />\n                  <Field.String path=\"/bar\" label=\"Will stay\" />\n                  <Wizard.Buttons />\n                </Wizard.Step>\n              </Wizard.Container>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const UndoRedo = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyComponent = () => {\n          const { createSnapshot, applySnapshot } = Form.useSnapshot()\n          const pointerRef = React.useRef(0)\n\n          React.useEffect(() => {\n            createSnapshot(pointerRef.current, 'my-snapshot-slice')\n          }, [createSnapshot])\n\n          const changeHandler = React.useCallback(() => {\n            pointerRef.current += 1\n            createSnapshot(pointerRef.current, 'my-snapshot-slice')\n          }, [createSnapshot])\n          const undoHandler = React.useCallback(() => {\n            pointerRef.current -= 1\n            applySnapshot(pointerRef.current, 'my-snapshot-slice')\n          }, [applySnapshot])\n          const redoHandler = React.useCallback(() => {\n            pointerRef.current += 1\n            applySnapshot(pointerRef.current, 'my-snapshot-slice')\n          }, [applySnapshot])\n\n          return (\n            <>\n              <Form.Card>\n                <Form.Snapshot name=\"my-snapshot-slice\">\n                  <Field.String\n                    path=\"/foo\"\n                    label=\"Will be reverted\"\n                    onChange={changeHandler}\n                  />\n                </Form.Snapshot>\n                <Field.String path=\"/bar\" label=\"Will stay\" />\n              </Form.Card>\n\n              <Form.ButtonRow>\n                <Button variant=\"secondary\" onClick={undoHandler}>\n                  Undo\n                </Button>\n                <Button variant=\"secondary\" onClick={redoHandler}>\n                  Redo\n                </Button>\n              </Form.ButtonRow>\n\n              <Tools.Log top />\n            </>\n          )\n        }\n\n        return (\n          <Form.Handler>\n            <MyComponent />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.InWizard) _missingMdxReference(\"Examples.InWizard\", true);\n  if (!Examples.UndoRedo) _missingMdxReference(\"Examples.UndoRedo\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Undo / Redo\"\n    }), \"\\n\", _jsx(Examples.UndoRedo, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Used in a Wizard\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This example reverts the form data to its previous state when the user navigates back to a previous step.\"\n    }), \"\\n\", _jsx(Examples.InWizard, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["InWizard","_jsx","ComponentBox","noInline","children","UndoRedo","_createMdxContent","props","_components","Object","assign","h2","h3","p","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error"],"sourceRoot":""}