"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[30540],{53182:function(n,e,r){r.r(e);var s=r(52322),t=r(45392);function o(n){const e=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",ul:"ul",li:"li"},(0,t.a)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{children:"Description"}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"Form.useTranslation"})," is a hook that returns the translations for the current locale."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nfunction MyComponent() {\n  const { Field } = Form.useTranslation()\n  const { errorRequired } = Field\n\n  return <>MyComponent</>\n}\n\nrender(\n  <Form.Handler locale=\"en-GB\">\n    <MyComponent />\n  </Form.Handler>,\n)\n"})}),"\n",(0,s.jsx)(e.h2,{children:"Additional utilities"}),"\n",(0,s.jsx)(e.p,{children:"In addition to all internal translations, you also get;"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"formatMessage"})," - a function you can use to get a specific translation based on a key (flattened object with dot-notation)."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"renderMessage"})," - a function you can use to render a string with line-breaks. It converts ",(0,s.jsx)(e.code,{children:"{br}"})," to a JSX line-break."]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nfunction MyComponent() {\n  const { formatMessage, renderMessage } = Form.useTranslation()\n  const errorRequired = formatMessage('Field.errorRequired')\n\n  return <>MyComponent</>\n}\n\nrender(\n  <Form.Handler locale=\"en-GB\">\n    <MyComponent />\n  </Form.Handler>,\n)\n"})}),"\n",(0,s.jsx)(e.h2,{children:"Custom translations"}),"\n",(0,s.jsx)(e.p,{children:"You can also extend the translations with your own custom translations."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nconst myTranslations = {\n  'nb-NO': { myString: 'Min egendefinerte streng' },\n  'en-GB': {\n    // Cascaded translations\n    Nested: {\n      stringWithArgs: 'My custom string with an argument: {myKey}',\n    },\n\n    // Flat translations\n    'Nested.stringWithLinebreaks':\n      'My custom string with a {br}line-break',\n  },\n}\n\nconst MyComponent = () => {\n  const t = Form.useTranslation<typeof myTranslations>()\n\n  // Internal translations\n  const existingString = t.Field.errorRequired\n\n  // Your translations\n  const myString = t.myString\n\n  // Use the \"formatMessage\" function to handle strings with arguments\n  const myStringWithArgsA = t.formatMessage(t.Nested.stringWithArgs, {\n    myKey: 'myValue',\n  })\n  // You can also get the string with a key (dot-notation)\n  const myStringWithArgsB = t.formatMessage('Nested.stringWithArgs', {\n    myKey: 'myValue',\n  })\n\n  // Render line-breaks\n  const jsxOutput = t.renderMessage(t.Nested.stringWithLinebreaks)\n\n  return <>MyComponent</>\n}\n\nrender(\n  <Form.Handler translations={myTranslations}>\n    <MyComponent />\n  </Form.Handler>,\n)\n"})}),"\n",(0,s.jsxs)(e.h2,{children:["Using the ",(0,s.jsx)(e.code,{children:"<Translation />"})]}),"\n",(0,s.jsxs)(e.p,{children:["Instead of using the hook, you can also, use the ",(0,s.jsx)(e.code,{children:"<Translation />"})," component to consume your translations:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\nimport { Translation, TranslationProps } from '@dnb/eufemia/shared'\n\nconst myTranslations = {\n  'nb-NO': { 'custom.string': 'Min egendefinerte streng' },\n  'en-GB': { 'custom.string': 'My custom string' },\n}\n\n// For TypeScript support\ntype Tr<T> = TranslationProps<T[keyof T]>\nconst Tr = (props: Tr<typeof myTranslations>) => <Translation {...props} />\n\nrender(\n  <Form.Handler translations={myTranslations}>\n    <Form.MainHeading>\n      <Translation id=\"custom.string\" />\n    </Form.MainHeading>\n\n    <Form.SubHeading>\n      <Tr id={(t) => t.custom.string} />\n    </Form.SubHeading>\n  </Form.Handler>,\n)\n"})}),"\n",(0,s.jsx)(e.h2,{children:"Use the shared Provider to customize translations"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import { Form, Field } from '@dnb/eufemia/extensions/forms'\nimport { Provider, Translation } from '@dnb/eufemia/shared'\n\nconst myTranslations = {\n  'nb-NO': {\n    'PhoneNumber.label': 'Egendefinert',\n    'custom.string': 'Min egendefinerte streng',\n  },\n  'en-GB': {\n    'PhoneNumber.label': 'Custom',\n    'custom.string': 'My custom string',\n  },\n}\n\nrender(\n  <Provider translations={myTranslations}>\n    <Heading>\n      <Translation id=\"custom.string\" />\n    </Heading>\n\n    <Form.Handler>\n      <Field.PhoneNumber />\n    </Form.Handler>\n  </Provider>,\n)\n"})})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,t.a)(),n.components);return e?(0,s.jsx)(e,Object.assign({},n,{children:(0,s.jsx)(o,n)})):o(n)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-use-translation-info-mdx-b51a4b6f2afa0ccf97da.js.map