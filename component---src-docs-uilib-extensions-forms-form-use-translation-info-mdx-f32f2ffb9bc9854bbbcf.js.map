{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-use-translation-info-mdx-f32f2ffb9bc9854bbbcf.js","mappings":"6KAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,KAAM,OACNC,IAAK,MACLC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,KAAsBV,EAAMW,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKd,EAAYG,GAAI,CAC9BU,SAAU,gBACR,MAAMF,EAAAA,EAAAA,MAAMX,EAAYI,EAAG,CAC7BS,SAAU,CAAC,QAAQC,EAAAA,EAAAA,KAAKd,EAAYK,KAAM,CACxCQ,SAAU,wBACR,sEACF,MAAMC,EAAAA,EAAAA,KAAKd,EAAYM,IAAK,CAC9BO,UAAUC,EAAAA,EAAAA,KAAKd,EAAYK,KAAM,CAC/BU,UAAW,eACXF,SAAU,iSAEV,MAAMC,EAAAA,EAAAA,KAAKd,EAAYG,GAAI,CAC7BU,SAAU,yBACR,MAAMC,EAAAA,EAAAA,KAAKd,EAAYI,EAAG,CAC5BS,SAAU,4DACR,MAAMF,EAAAA,EAAAA,MAAMX,EAAYO,GAAI,CAC9BM,SAAU,CAAC,MAAMF,EAAAA,EAAAA,MAAMX,EAAYQ,GAAI,CACrCK,SAAU,EAACC,EAAAA,EAAAA,KAAKd,EAAYK,KAAM,CAChCQ,SAAU,kBACR,kHACF,MAAMF,EAAAA,EAAAA,MAAMX,EAAYQ,GAAI,CAC9BK,SAAU,EAACC,EAAAA,EAAAA,KAAKd,EAAYK,KAAM,CAChCQ,SAAU,kBACR,+EAA+EC,EAAAA,EAAAA,KAAKd,EAAYK,KAAM,CACxGQ,SAAU,SACR,2BACF,QACF,MAAMC,EAAAA,EAAAA,KAAKd,EAAYM,IAAK,CAC9BO,UAAUC,EAAAA,EAAAA,KAAKd,EAAYK,KAAM,CAC/BU,UAAW,eACXF,SAAU,mVAEV,MAAMC,EAAAA,EAAAA,KAAKd,EAAYG,GAAI,CAC7BU,SAAU,wBACR,MAAMC,EAAAA,EAAAA,KAAKd,EAAYI,EAAG,CAC5BS,SAAU,4EACR,MAAMC,EAAAA,EAAAA,KAAKd,EAAYM,IAAK,CAC9BO,UAAUC,EAAAA,EAAAA,KAAKd,EAAYK,KAAM,CAC/BU,UAAW,eACXF,SAAU,yqCAEV,MAAMF,EAAAA,EAAAA,MAAMX,EAAYG,GAAI,CAC9BU,SAAU,CAAC,cAAcC,EAAAA,EAAAA,KAAKd,EAAYK,KAAM,CAC9CQ,SAAU,uBAEV,MAAMF,EAAAA,EAAAA,MAAMX,EAAYI,EAAG,CAC7BS,SAAU,CAAC,qDAAqDC,EAAAA,EAAAA,KAAKd,EAAYK,KAAM,CACrFQ,SAAU,oBACR,8CACF,MAAMC,EAAAA,EAAAA,KAAKd,EAAYM,IAAK,CAC9BO,UAAUC,EAAAA,EAAAA,KAAKd,EAAYK,KAAM,CAC/BU,UAAW,eACXF,SAAU,krBAEV,MAAMC,EAAAA,EAAAA,KAAKd,EAAYG,GAAI,CAC7BU,SAAU,sDACR,MAAMC,EAAAA,EAAAA,KAAKd,EAAYM,IAAK,CAC9BO,UAAUC,EAAAA,EAAAA,KAAKd,EAAYK,KAAM,CAC/BU,UAAW,eACXF,SAAU,ilBAIlB,CAOA,UANA,SAAoBd,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOiB,QAASC,GAAahB,OAAOC,OAAO,CAAC,GAAGO,EAAAA,EAAAA,KAAsBV,EAAMW,YAC3E,OAAOO,GAAYH,EAAAA,EAAAA,KAAKG,EAAWhB,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1Dc,UAAUC,EAAAA,EAAAA,KAAKhB,EAAmBC,MAC9BD,EAAkBC,EAC1B,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/useTranslation/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Form.useTranslation\"\n      }), \" is a hook that returns the translations for the current locale.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form } from '@dnb/eufemia/extensions/forms'\\n\\nfunction MyComponent() {\\n  const { Field } = Form.useTranslation()\\n  const { errorRequired } = Field\\n\\n  return <>MyComponent</>\\n}\\n\\nrender(\\n  <Form.Handler locale=\\\"en-GB\\\">\\n    <MyComponent />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Additional utilities\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In addition to all internal translations, you also get;\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"formatMessage\"\n        }), \" - a function you can use to get a specific translation based on a key (flattened object with dot-notation).\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"renderMessage\"\n        }), \" - a function you can use to render a string with line-breaks. It converts \", _jsx(_components.code, {\n          children: \"{br}\"\n        }), \" to a JSX line-break.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form } from '@dnb/eufemia/extensions/forms'\\n\\nfunction MyComponent() {\\n  const { formatMessage, renderMessage } = Form.useTranslation()\\n  const errorRequired = formatMessage('Field.errorRequired')\\n\\n  return <>MyComponent</>\\n}\\n\\nrender(\\n  <Form.Handler locale=\\\"en-GB\\\">\\n    <MyComponent />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Custom translations\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can also extend the translations with your own custom translations.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form } from '@dnb/eufemia/extensions/forms'\\n\\nconst myTranslations = {\\n  'nb-NO': { myString: 'Min egendefinerte streng' },\\n  'en-GB': {\\n    // Cascaded translations\\n    Nested: {\\n      stringWithArgs: 'My custom string with an argument: {myKey}',\\n    },\\n\\n    // Flat translations\\n    'Nested.stringWithLinebreaks':\\n      'My custom string with a {br}line-break',\\n  },\\n}\\n\\nconst MyComponent = () => {\\n  const t = Form.useTranslation<typeof myTranslations>()\\n\\n  // Internal translations\\n  const existingString = t.Field.errorRequired\\n\\n  // Your translations\\n  const myString = t.myString\\n\\n  // Use the \\\"formatMessage\\\" function to handle strings with arguments\\n  const myStringWithArgsA = t.formatMessage(t.Nested.stringWithArgs, {\\n    myKey: 'myValue',\\n  })\\n  // You can also get the string with a key (dot-notation)\\n  const myStringWithArgsB = t.formatMessage('Nested.stringWithArgs', {\\n    myKey: 'myValue',\\n  })\\n\\n  // Render line-breaks\\n  const jsxOutput = t.renderMessage(t.Nested.stringWithLinebreaks)\\n\\n  return <>MyComponent</>\\n}\\n\\nrender(\\n  <Form.Handler translations={myTranslations}>\\n    <MyComponent />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"Using the \", _jsx(_components.code, {\n        children: \"<Translation />\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Instead of using the hook, you can also, use the \", _jsx(_components.code, {\n        children: \"<Translation />\"\n      }), \" component to consume your translations:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form } from '@dnb/eufemia/extensions/forms'\\nimport { Translation, TranslationProps } from '@dnb/eufemia/shared'\\n\\nconst myTranslations = {\\n  'nb-NO': { 'custom.string': 'Min egendefinerte streng' },\\n  'en-GB': { 'custom.string': 'My custom string' },\\n}\\n\\n// For TypeScript support\\ntype Tr<T> = TranslationProps<T[keyof T]>\\nconst Tr = (props: Tr<typeof myTranslations>) => <Translation {...props} />\\n\\nrender(\\n  <Form.Handler translations={myTranslations}>\\n    <Form.MainHeading>\\n      <Translation id=\\\"custom.string\\\" />\\n    </Form.MainHeading>\\n\\n    <Form.SubHeading>\\n      <Tr id={(t) => t.custom.string} />\\n    </Form.SubHeading>\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Use the shared Provider to customize translations\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field } from '@dnb/eufemia/extensions/forms'\\nimport { Provider, Translation } from '@dnb/eufemia/shared'\\n\\nconst myTranslations = {\\n  'nb-NO': {\\n    'PhoneNumber.label': 'Egendefinert',\\n    'custom.string': 'Min egendefinerte streng',\\n  },\\n  'en-GB': {\\n    'PhoneNumber.label': 'Custom',\\n    'custom.string': 'My custom string',\\n  },\\n}\\n\\nrender(\\n  <Provider translations={myTranslations}>\\n    <Heading>\\n      <Translation id=\\\"custom.string\\\" />\\n    </Heading>\\n\\n    <Form.Handler>\\n      <Field.PhoneNumber />\\n    </Form.Handler>\\n  </Provider>,\\n)\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","pre","ul","li","_provideComponents","components","_jsxs","_Fragment","children","_jsx","className","wrapper","MDXLayout"],"sourceRoot":""}