"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[45692,57795,77972],{39632:function(n,e,r){r.r(e),r.d(e,{default:function(){return c}});var s={};r.r(s),r.d(s,{CustomTranslations:function(){return i},GetTranslation:function(){return l}});var t=r(31085),o=r(71184),a=r(32065);const i=()=>(0,t.jsx)(a.A,{noInline:!0,children:"const MyField = () => {\n  const { Custom, formatMessage } = Form.useTranslation()\n  const myTranslation = formatMessage(Custom.translation, {\n    myKey: 'value!',\n  })\n  console.log('Custom', myTranslation)\n  return <>{myTranslation}</>\n}\nconst MyForm = () => {\n  return (\n    <Form.Handler\n      locale=\"en-GB\"\n      translations={{\n        'en-GB': {\n          Custom: {\n            translation: 'My translation with a {myKey}',\n          },\n        },\n      }}\n    >\n      <MyField />\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n"}),l=()=>(0,t.jsx)(a.A,{noInline:!0,children:"const MyField = () => {\n  const { formatMessage } = Form.useTranslation()\n  const myTranslation = formatMessage('Custom.translation', {\n    myKey: 'value!',\n  })\n  const errorRequired = formatMessage('Field.errorRequired')\n  console.log(errorRequired)\n  return <>{myTranslation}</>\n}\nconst MyForm = () => {\n  return (\n    <Form.Handler\n      locale=\"en-GB\"\n      translations={{\n        'en-GB': {\n          Custom: {\n            translation: 'My translation with a {myKey}',\n          },\n        },\n      }}\n    >\n      <MyField />\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n"});function m(n){const e=Object.assign({h2:"h2",h3:"h3"},(0,o.R)(),n.components);return s||d("Examples",!1),i||d("Examples.CustomTranslations",!0),l||d("Examples.GetTranslation",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:"Demos"}),"\n",(0,t.jsx)(e.h3,{children:"Custom translations example"}),"\n",(0,t.jsx)(i,{}),"\n",(0,t.jsx)(e.h3,{children:"Get translations with a key"}),"\n",(0,t.jsx)(l,{})]})}var c=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.R)(),n.components);return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(m,n)})):m(n)};function d(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},53775:function(n,e,r){r.r(e);var s=r(31085),t=r(71184);function o(n){const e=Object.assign({h2:"h2",pre:"pre",code:"code",p:"p",ul:"ul",li:"li"},(0,t.R)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{children:"Import"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n// Use Form.useTranslation\n"})}),"\n",(0,s.jsx)(e.h2,{children:"Description"}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"Form.useTranslation"})," is a hook that returns the translations for the current locale."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nfunction MyComponent() {\n  const { Field } = Form.useTranslation()\n  const { errorRequired } = Field\n\n  return <>MyComponent</>\n}\n\nrender(\n  <Form.Handler locale=\"en-GB\">\n    <MyComponent />\n  </Form.Handler>,\n)\n"})}),"\n",(0,s.jsx)(e.h2,{children:"Additional utilities"}),"\n",(0,s.jsx)(e.p,{children:"In addition to all internal translations, you also get;"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"formatMessage"})," - a function you can use to get a specific translation based on a key (flattened object with dot-notation)."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"renderMessage"})," - a function you can use to render a string with line-breaks. It converts ",(0,s.jsx)(e.code,{children:"{br}"})," to a JSX line-break."]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nfunction MyComponent() {\n  const { formatMessage, renderMessage } = Form.useTranslation()\n  const errorRequired = formatMessage('Field.errorRequired')\n\n  return <>MyComponent</>\n}\n\nrender(\n  <Form.Handler locale=\"en-GB\">\n    <MyComponent />\n  </Form.Handler>,\n)\n"})}),"\n",(0,s.jsx)(e.h2,{children:"Custom translations"}),"\n",(0,s.jsx)(e.p,{children:"You can also extend the translations with your own custom translations."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nconst myTranslations = {\n  'nb-NO': { myString: 'Min egendefinerte streng' },\n  'en-GB': {\n    // Cascaded translations\n    Nested: {\n      stringWithArgs: 'My custom string with an argument: {myKey}',\n    },\n\n    // Flat translations\n    'Nested.stringWithLinebreaks':\n      'My custom string with a {br}line-break',\n  },\n}\n\nconst MyComponent = () => {\n  const t = Form.useTranslation<typeof myTranslations>()\n\n  // Internal translations\n  const existingString = t.Field.errorRequired\n\n  // Your translations\n  const myString = t.myString\n\n  // Use the \"formatMessage\" function to handle strings with arguments\n  const myStringWithArgsA = t.formatMessage(t.Nested.stringWithArgs, {\n    myKey: 'myValue',\n  })\n  // You can also get the string with a key (dot-notation)\n  const myStringWithArgsB = t.formatMessage('Nested.stringWithArgs', {\n    myKey: 'myValue',\n  })\n\n  // Render line-breaks\n  const jsxOutput = t.renderMessage(t.Nested.stringWithLinebreaks)\n\n  return <>MyComponent</>\n}\n\nrender(\n  <Form.Handler translations={myTranslations}>\n    <MyComponent />\n  </Form.Handler>,\n)\n"})}),"\n",(0,s.jsxs)(e.h2,{children:["Using the ",(0,s.jsx)(e.code,{children:"<Translation />"})]}),"\n",(0,s.jsxs)(e.p,{children:["Instead of using the hook, you can also, use the ",(0,s.jsx)(e.code,{children:"<Translation />"})," component to consume your translations:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\nimport { Translation, TranslationProps } from '@dnb/eufemia/shared'\n\nconst myTranslations = {\n  'nb-NO': { 'custom.string': 'Min egendefinerte streng' },\n  'en-GB': { 'custom.string': 'My custom string' },\n}\n\n// For TypeScript support\ntype Tr<T> = TranslationProps<T[keyof T]>\nconst Tr = (props: Tr<typeof myTranslations>) => <Translation {...props} />\n\nrender(\n  <Form.Handler translations={myTranslations}>\n    <Form.MainHeading>\n      <Translation id=\"custom.string\" />\n    </Form.MainHeading>\n\n    <Form.SubHeading>\n      <Tr id={(t) => t.custom.string} />\n    </Form.SubHeading>\n  </Form.Handler>,\n)\n"})}),"\n",(0,s.jsx)(e.h2,{children:"Use the shared Provider to customize translations"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import { Form, Field } from '@dnb/eufemia/extensions/forms'\nimport { Provider, Translation } from '@dnb/eufemia/shared'\n\nconst myTranslations = {\n  'nb-NO': {\n    'PhoneNumber.label': 'Egendefinert',\n    'custom.string': 'Min egendefinerte streng',\n  },\n  'en-GB': {\n    'PhoneNumber.label': 'Custom',\n    'custom.string': 'My custom string',\n  },\n}\n\nrender(\n  <Provider translations={myTranslations}>\n    <Heading>\n      <Translation id=\"custom.string\" />\n    </Heading>\n\n    <Form.Handler>\n      <Field.PhoneNumber />\n    </Form.Handler>\n  </Provider>,\n)\n"})})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,t.R)(),n.components);return e?(0,s.jsx)(e,Object.assign({},n,{children:(0,s.jsx)(o,n)})):o(n)}},66114:function(n,e,r){r.r(e);var s=r(31085),t=r(71184),o=r(53775),a=r(39632);function i(n){return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.default,{}),"\n",(0,s.jsx)(a.default,{})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,t.R)(),n.components);return e?(0,s.jsx)(e,Object.assign({},n,{children:(0,s.jsx)(i,n)})):i()}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-use-translation-mdx-eadb13e66f3321c61f60.js.map