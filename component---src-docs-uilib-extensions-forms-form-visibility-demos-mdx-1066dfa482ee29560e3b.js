"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[3123],{55838:function(n,e,i){i.r(e),i.d(e,{default:function(){return x}});var t={};i.r(t),i.d(t,{BasedOnBooleanTrue:function(){return h},BasedOnContext:function(){return c},BooleanExample:function(){return s},FilterData:function(){return p},InferData:function(){return u},InheritVisibility:function(){return F},NestedExample:function(){return m},PathValue:function(){return d},VisibilityOnValidation:function(){return b}});var a=i(52322),l=i(45392),r=(i(2784),i(73136)),o=i(99210);const s=()=>(0,a.jsx)(r.Z,{scope:{TestElement:o.Z},children:'<Form.Handler>\n  <Flex.Stack>\n    <Field.Boolean\n      label="Show content"\n      variant="buttons"\n      path="/toggleValue"\n      value={false}\n    />\n    <Form.Visibility pathTrue="/toggleValue" animate>\n      <TestElement>Item 1</TestElement>\n      <TestElement>Item 2</TestElement>\n    </Form.Visibility>\n  </Flex.Stack>\n</Form.Handler>\n'}),d=()=>(0,a.jsx)(r.Z,{children:'<Form.Handler>\n  <Field.Toggle\n    label="Show content"\n    valueOn="checked"\n    valueOff="unchecked"\n    variant="buttons"\n    path="/toggleValue"\n    value="unchecked"\n  />\n  <Form.Visibility\n    visibleWhen={{\n      path: \'/toggleValue\',\n      hasValue: \'checked\',\n    }}\n    animate\n  >\n    <P>This is visible</P>\n  </Form.Visibility>\n</Form.Handler>\n'}),u=()=>(0,a.jsx)(r.Z,{noInline:!0,children:'const MyComponent = () => {\n  const { data } = Form.useData(\'example-form\', {\n    toggleValue: false,\n  })\n  const inferDataFunc = React.useCallback(\n    () => data.toggleValue,\n    [data.toggleValue],\n  )\n  return (\n    <Form.Handler id="example-form">\n      <Flex.Stack>\n        <Field.Boolean path="/toggleValue" label="Check me" />\n        <Form.Visibility inferData={inferDataFunc} animate>\n          <P>This is visible</P>\n        </Form.Visibility>\n      </Flex.Stack>\n    </Form.Handler>\n  )\n}\nrender(<MyComponent />)\n'}),h=()=>(0,a.jsx)(r.Z,{children:"<Form.Visibility visible={true}>\n  <P>This is visible</P>\n</Form.Visibility>\n"}),c=()=>(0,a.jsx)(r.Z,{children:'<Form.Handler\n  data={{\n    toBe: true,\n    notToBe: false,\n  }}\n>\n  <Form.Visibility pathTrue="/toBe">\n    <P>This will show, as long as `toBe` is true.</P>\n  </Form.Visibility>\n  <Form.Visibility pathTrue="/notToBe">\n    <P>This will not show until `notToBe` is true.</P>\n  </Form.Visibility>\n</Form.Handler>\n'}),m=()=>(0,a.jsx)(r.Z,{noInline:!0,children:'const filterDataHandler = ({ props }) => !props[\'data-exclude-field\']\nconst MyForm = () => {\n  return (\n    <Form.Handler\n      defaultData={{\n        isVisible: false,\n      }}\n    >\n      <Flex.Stack>\n        <Field.Boolean\n          label="Visible"\n          variant="button"\n          path="/isVisible"\n          data-exclude-field\n        />\n        <Form.Visibility\n          pathTrue="/isVisible"\n          animate\n          keepInDOM\n          fieldPropsWhenHidden={{\n            \'data-exclude-field\': true,\n          }}\n        >\n          <Field.Selection\n            label="Choose"\n            variant="radio"\n            value="less"\n            path="/mySelection"\n          >\n            <Field.Option value="less" title="Less" />\n            <Field.Option value="more" title="More" />\n          </Field.Selection>\n\n          <Form.Visibility\n            visibleWhen={{\n              path: \'/mySelection\',\n              hasValue: \'more\',\n            }}\n            animate\n            keepInDOM\n            fieldPropsWhenHidden={{\n              \'data-exclude-field\': true,\n            }}\n          >\n            <Field.String label="My String" path="/myString" value="foo" />\n          </Form.Visibility>\n        </Form.Visibility>\n      </Flex.Stack>\n\n      <Output />\n    </Form.Handler>\n  )\n}\nconst Output = () => {\n  const { filterData } = Form.useData()\n  const filteredData = filterData(filterDataHandler)\n  return <Tools.Log data={filteredData} top />\n}\nrender(<MyForm />)\n'}),p=()=>(0,a.jsx)(r.Z,{noInline:!0,children:'const filterDataPaths = {\n  \'/isVisible\': false,\n  \'/mySelection\': ({ data }) => data.isVisible,\n  \'/myString\': ({ data }) => {\n    return data.isVisible && data.mySelection === \'more\'\n  },\n}\nconst MyForm = () => {\n  return (\n    <Form.Handler\n      defaultData={{\n        myString: \'foo\',\n      }}\n    >\n      <Flex.Stack>\n        <Field.Boolean\n          label="Visible"\n          variant="button"\n          path="/isVisible"\n          defaultValue={false}\n        />\n        <Form.Visibility pathTrue="/isVisible" animate>\n          <Field.Selection\n            label="Choose"\n            variant="radio"\n            value="less"\n            path="/mySelection"\n          >\n            <Field.Option value="less" title="Less" />\n            <Field.Option value="more" title="More" />\n          </Field.Selection>\n\n          <Form.Visibility\n            visibleWhen={{\n              path: \'/mySelection\',\n              hasValue: \'more\',\n            }}\n            animate\n          >\n            <Field.String label="My String" path="/myString" />\n          </Form.Visibility>\n        </Form.Visibility>\n\n        <Form.Visibility\n          pathDefined="/myString"\n          filterData={filterDataPaths}\n          animate\n        >\n          <Form.Card>\n            <P>\n              Result: <Value.String path="/myString" inline />\n            </P>\n          </Form.Card>\n        </Form.Visibility>\n      </Flex.Stack>\n\n      <Output />\n    </Form.Handler>\n  )\n}\nconst Output = () => {\n  const { filterData } = Form.useData()\n  const filteredData = filterData(filterDataPaths)\n  return <Tools.Log data={filteredData} top />\n}\nrender(<MyForm />)\n'});function F(){return(0,a.jsx)(r.Z,{children:'<Form.Handler>\n  <Form.Card>\n    <Field.Boolean\n      variant="button"\n      path="/isVisible"\n      defaultValue={true}\n    />\n\n    <Form.Visibility pathTrue="/isVisible" animate>\n      <Field.Name.First path="/foo" defaultValue="foo" />\n      <Field.Name.Last path="/bar" defaultValue="bar" />\n    </Form.Visibility>\n\n    <Value.Provider inheritVisibility>\n      <HeightAnimation>\n        <Value.SummaryList>\n          <Value.Name.First path="/foo" />\n          <Value.Name.First path="/bar" />\n        </Value.SummaryList>\n      </HeightAnimation>\n    </Value.Provider>\n  </Form.Card>\n</Form.Handler>\n'})}function b(){return(0,a.jsx)(r.Z,{children:'<Form.Handler>\n  <Form.Card>\n    <Field.Name.First path="/foo" required />\n\n    <Form.Visibility\n      visibleWhen={{\n        path: \'/foo\',\n        isValid: true,\n      }}\n      animate\n    >\n      <Value.Name.First path="/foo" />\n    </Form.Visibility>\n  </Form.Card>\n</Form.Handler>\n'})}function f(n){const e=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code",pre:"pre",strong:"strong"},(0,l.ah)(),n.components);return t||V("Examples",!1),h||V("Examples.BasedOnBooleanTrue",!0),c||V("Examples.BasedOnContext",!0),s||V("Examples.BooleanExample",!0),p||V("Examples.FilterData",!0),u||V("Examples.InferData",!0),F||V("Examples.InheritVisibility",!0),m||V("Examples.NestedExample",!0),d||V("Examples.PathValue",!0),b||V("Examples.VisibilityOnValidation",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{children:"Demos"}),"\n",(0,a.jsx)(e.h3,{children:"Boolean example"}),"\n",(0,a.jsx)(s,{}),"\n",(0,a.jsx)(e.h3,{children:"Matching value"}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.code,{children:"visibleWhen"})," is pretty powerful. You can use it to show/hide based on the value of a ",(0,a.jsx)(e.code,{children:"path"}),". You can also give it a ",(0,a.jsx)(e.code,{children:"hasValue"})," function that gives you the current value, so you can assert it and return a boolean based on that."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-jsx",children:"<Form.Visibility\n  visibleWhen={{\n    path: '/toggleValue',\n    hasValue: (value) => value === 'checked',\n  }}\n>\n  Content\n</Form.Visibility>\n"})}),"\n",(0,a.jsx)(d,{}),"\n",(0,a.jsx)(e.h3,{children:"Direct properties"}),"\n",(0,a.jsx)(h,{}),"\n",(0,a.jsx)(e.h3,{children:"Based on DataContext"}),"\n",(0,a.jsx)(c,{}),"\n",(0,a.jsx)(e.h3,{children:"InferData"}),"\n",(0,a.jsx)(u,{}),"\n",(0,a.jsx)(e.h3,{children:"Nested visibility example"}),"\n",(0,a.jsxs)(e.p,{children:["Use ",(0,a.jsx)(e.code,{children:"fieldPropsWhenHidden"})," and ",(0,a.jsx)(e.code,{children:"keepInDOM"})," to keep the content in the DOM, even if it's not visible."]}),"\n",(0,a.jsxs)(e.p,{children:["In this example we filter out all fields that have the ",(0,a.jsx)(e.code,{children:"data-exclude-field"})," attribute. See the console output for the result."]}),"\n",(0,a.jsx)(m,{}),"\n",(0,a.jsx)(e.h3,{children:"Filter data"}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Note:"})," This example uses ",(0,a.jsx)(e.code,{children:"filterData"})," with ",(0,a.jsx)(e.code,{children:"pathDefined"})," on a Visibility component along, which is a declarative way to describe the data to be shown."]}),"\n",(0,a.jsx)(p,{}),"\n",(0,a.jsx)(e.h3,{children:"Inherit visibility"}),"\n",(0,a.jsx)(F,{}),"\n",(0,a.jsx)(e.h3,{children:"Show children when field has no errors (validation)"}),"\n",(0,a.jsx)(b,{})]})}var x=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,l.ah)(),n.components);return e?(0,a.jsx)(e,Object.assign({},n,{children:(0,a.jsx)(f,n)})):f(n)};function V(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},99210:function(n,e,i){i.d(e,{Z:function(){return o}});var t=i(77843),a=i.n(t),l=i(80215),r=i(52322);function o(n){let{className:e=null,...i}=n;return(0,r.jsx)(l.Z,{className:a()("dnb-forms-test-element",e),...i})}o._supportsSpacingProps=!0}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-visibility-demos-mdx-1066dfa482ee29560e3b.js.map