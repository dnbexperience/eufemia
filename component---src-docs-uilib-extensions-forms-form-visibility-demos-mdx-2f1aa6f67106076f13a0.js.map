{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-visibility-demos-mdx-2f1aa6f67106076f13a0.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Visibility/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Visibility/demos.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/GenerateSchema.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/ListAllProps.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/Log.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/utils/TestElement/TestElement.tsx"],"sourcesContent":["import React from 'react'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Flex, HeightAnimation, P } from '@dnb/eufemia/src'\nimport {\n  Field,\n  Form,\n  TestElement,\n  Tools,\n  Value,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport const BooleanExample = () => {\n  return (\n    <ComponentBox scope={{ TestElement }}>\n      <Form.Handler>\n        <Flex.Stack>\n          <Field.Boolean\n            label=\"Show content\"\n            variant=\"buttons\"\n            path=\"/toggleValue\"\n            value={false}\n          />\n          <Form.Visibility pathTrue=\"/toggleValue\" animate>\n            <TestElement>Item 1</TestElement>\n            <TestElement>Item 2</TestElement>\n          </Form.Visibility>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const PathValue = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Field.Toggle\n          label=\"Show content\"\n          valueOn=\"checked\"\n          valueOff=\"unchecked\"\n          variant=\"buttons\"\n          path=\"/toggleValue\"\n          value=\"unchecked\"\n        />\n        <Form.Visibility\n          visibleWhen={{\n            path: '/toggleValue',\n            hasValue: 'checked',\n          }}\n          animate\n        >\n          <P>This is visible</P>\n        </Form.Visibility>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const InferData = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyComponent = () => {\n          const { data } = Form.useData('example-form', {\n            toggleValue: false,\n          })\n          const inferDataFunc = React.useCallback(\n            () => data.toggleValue,\n            [data.toggleValue],\n          )\n\n          return (\n            <Form.Handler id=\"example-form\">\n              <Flex.Stack>\n                <Field.Boolean path=\"/toggleValue\" label=\"Check me\" />\n                <Form.Visibility inferData={inferDataFunc} animate>\n                  <P>This is visible</P>\n                </Form.Visibility>\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <MyComponent />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const BasedOnBooleanTrue = () => {\n  return (\n    <ComponentBox>\n      <Form.Visibility visible={true}>\n        <P>This is visible</P>\n      </Form.Visibility>\n    </ComponentBox>\n  )\n}\n\nexport const BasedOnContext = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        data={{\n          toBe: true,\n          notToBe: false,\n        }}\n      >\n        <Form.Visibility pathTrue=\"/toBe\">\n          <P>This will show, as long as `toBe` is true.</P>\n        </Form.Visibility>\n        <Form.Visibility pathTrue=\"/notToBe\">\n          <P>This will not show until `notToBe` is true.</P>\n        </Form.Visibility>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const NestedExample = () => {\n  return (\n    <ComponentBox scope={{ Tools }}>\n      {() => {\n        const filterDataHandler = ({ props }) =>\n          !props['data-exclude-field']\n\n        const MyForm = () => {\n          return (\n            <Form.Handler defaultData={{ isVisible: false }}>\n              <Flex.Stack>\n                <Field.Boolean\n                  label=\"Visible\"\n                  variant=\"button\"\n                  path=\"/isVisible\"\n                  data-exclude-field\n                />\n                <Form.Visibility\n                  pathTrue=\"/isVisible\"\n                  animate\n                  keepInDOM\n                  fieldPropsWhenHidden={{ 'data-exclude-field': true }}\n                >\n                  <Field.Selection\n                    label=\"Choose\"\n                    variant=\"radio\"\n                    value=\"less\"\n                    path=\"/mySelection\"\n                  >\n                    <Field.Option value=\"less\" title=\"Less\" />\n                    <Field.Option value=\"more\" title=\"More\" />\n                  </Field.Selection>\n\n                  <Form.Visibility\n                    visibleWhen={{\n                      path: '/mySelection',\n                      hasValue: 'more',\n                    }}\n                    animate\n                    keepInDOM\n                    fieldPropsWhenHidden={{ 'data-exclude-field': true }}\n                  >\n                    <Field.String\n                      label=\"My String\"\n                      path=\"/myString\"\n                      value=\"foo\"\n                    />\n                  </Form.Visibility>\n                </Form.Visibility>\n              </Flex.Stack>\n\n              <Output />\n            </Form.Handler>\n          )\n        }\n\n        const Output = () => {\n          const { filterData } = Form.useData()\n          const filteredData = filterData(filterDataHandler)\n\n          return <Tools.Log data={filteredData} top />\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const FilterData = () => {\n  return (\n    <ComponentBox scope={{ Tools }}>\n      {() => {\n        const filterDataPaths = {\n          '/isVisible': false,\n          '/mySelection': ({ data }) => data.isVisible,\n          '/myString': ({ data }) => {\n            return data.isVisible && data.mySelection === 'more'\n          },\n        }\n\n        const MyForm = () => {\n          return (\n            <Form.Handler\n              defaultData={{\n                myString: 'foo',\n              }}\n            >\n              <Flex.Stack>\n                <Field.Boolean\n                  label=\"Visible\"\n                  variant=\"button\"\n                  path=\"/isVisible\"\n                  defaultValue={false}\n                />\n                <Form.Visibility pathTrue=\"/isVisible\" animate>\n                  <Field.Selection\n                    label=\"Choose\"\n                    variant=\"radio\"\n                    value=\"less\"\n                    path=\"/mySelection\"\n                  >\n                    <Field.Option value=\"less\" title=\"Less\" />\n                    <Field.Option value=\"more\" title=\"More\" />\n                  </Field.Selection>\n\n                  <Form.Visibility\n                    visibleWhen={{\n                      path: '/mySelection',\n                      hasValue: 'more',\n                    }}\n                    animate\n                  >\n                    <Field.String label=\"My String\" path=\"/myString\" />\n                  </Form.Visibility>\n                </Form.Visibility>\n\n                <Form.Visibility\n                  pathDefined=\"/myString\"\n                  filterData={filterDataPaths}\n                  animate\n                >\n                  <Form.Card>\n                    <P>\n                      Result: <Value.String path=\"/myString\" inline />\n                    </P>\n                  </Form.Card>\n                </Form.Visibility>\n              </Flex.Stack>\n\n              <Output />\n            </Form.Handler>\n          )\n        }\n\n        const Output = () => {\n          const { filterData } = Form.useData()\n          const filteredData = filterData(filterDataPaths)\n          return <Tools.Log data={filteredData} top />\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport function InheritVisibility() {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Form.Card>\n          <Field.Boolean\n            variant=\"button\"\n            path=\"/isVisible\"\n            defaultValue={true}\n          />\n\n          <Form.Visibility pathTrue=\"/isVisible\" animate>\n            <Field.Name.First path=\"/foo\" defaultValue=\"foo\" />\n            <Field.Name.Last path=\"/bar\" defaultValue=\"bar\" />\n          </Form.Visibility>\n\n          <Value.Provider inheritVisibility>\n            <HeightAnimation>\n              <Value.SummaryList>\n                <Value.Name.First path=\"/foo\" />\n                <Value.Name.First path=\"/bar\" />\n              </Value.SummaryList>\n            </HeightAnimation>\n          </Value.Provider>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport function VisibilityOnValidation() {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Form.Card>\n          <Field.Name.First path=\"/foo\" required />\n\n          <Form.Visibility\n            visibleWhen={{\n              path: '/foo',\n              isValid: true,\n            }}\n            animate\n          >\n            <Value.Name.First path=\"/foo\" />\n          </Form.Visibility>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.BasedOnBooleanTrue) _missingMdxReference(\"Examples.BasedOnBooleanTrue\", true);\n  if (!Examples.BasedOnContext) _missingMdxReference(\"Examples.BasedOnContext\", true);\n  if (!Examples.BooleanExample) _missingMdxReference(\"Examples.BooleanExample\", true);\n  if (!Examples.FilterData) _missingMdxReference(\"Examples.FilterData\", true);\n  if (!Examples.InferData) _missingMdxReference(\"Examples.InferData\", true);\n  if (!Examples.InheritVisibility) _missingMdxReference(\"Examples.InheritVisibility\", true);\n  if (!Examples.NestedExample) _missingMdxReference(\"Examples.NestedExample\", true);\n  if (!Examples.PathValue) _missingMdxReference(\"Examples.PathValue\", true);\n  if (!Examples.VisibilityOnValidation) _missingMdxReference(\"Examples.VisibilityOnValidation\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Boolean example\"\n    }), \"\\n\", _jsx(Examples.BooleanExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Matching value\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"visibleWhen\"\n      }), \" is pretty powerful. You can use it to show/hide based on the value of a \", _jsx(_components.code, {\n        children: \"path\"\n      }), \". You can also give it a \", _jsx(_components.code, {\n        children: \"hasValue\"\n      }), \" function that gives you the current value, so you can assert it and return a boolean based on that.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Form.Visibility\\n  visibleWhen={{\\n    path: '/toggleValue',\\n    hasValue: (value) => value === 'checked',\\n  }}\\n>\\n  Content\\n</Form.Visibility>\\n\"\n      })\n    }), \"\\n\", _jsx(Examples.PathValue, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Direct properties\"\n    }), \"\\n\", _jsx(Examples.BasedOnBooleanTrue, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Based on DataContext\"\n    }), \"\\n\", _jsx(Examples.BasedOnContext, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"InferData\"\n    }), \"\\n\", _jsx(Examples.InferData, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Nested visibility example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use \", _jsx(_components.code, {\n        children: \"fieldPropsWhenHidden\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"keepInDOM\"\n      }), \" to keep the content in the DOM, even if it's not visible.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example we filter out all fields that have the \", _jsx(_components.code, {\n        children: \"data-exclude-field\"\n      }), \" attribute. See the console output for the result.\"]\n    }), \"\\n\", _jsx(Examples.NestedExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Filter data\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Note:\"\n      }), \" This example uses \", _jsx(_components.code, {\n        children: \"filterData\"\n      }), \" with \", _jsx(_components.code, {\n        children: \"pathDefined\"\n      }), \" on a Visibility component along, which is a declarative way to describe the data to be shown.\"]\n    }), \"\\n\", _jsx(Examples.FilterData, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inherit visibility\"\n    }), \"\\n\", _jsx(Examples.InheritVisibility, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Show children when field has no errors (validation)\"\n    }), \"\\n\", _jsx(Examples.VisibilityOnValidation, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import { useCallback, useContext, useRef } from 'react'\nimport pointer, { JsonObject } from '../utils/json-pointer'\nimport DataContext, { FilterData } from '../DataContext/Context'\nimport { JSONSchema } from '../types'\n\nexport type GenerateSchemaReturn = {\n  schema: JSONSchema\n  data: JsonObject\n  propsOfFields: JsonObject\n  propsOfValues: JsonObject\n}\nexport type GenerateSchemaProps = {\n  log?: boolean\n  generateRef?: React.MutableRefObject<() => GenerateSchemaReturn>\n  filterData?: FilterData\n  children: React.ReactNode\n}\nexport type GenerateRef = GenerateSchemaProps['generateRef']['current']\n\nexport const schemaParams = [\n  'minLength',\n  'maxLength',\n  'pattern',\n  'description',\n  'min',\n  'max',\n  'multipleOf',\n  'exclusiveMinimum',\n  'exclusiveMaximum',\n]\n\nexport default function GenerateSchema(props: GenerateSchemaProps) {\n  const { generateRef, filterData, log, children } = props || {}\n  const { fieldPropsRef, valuePropsRef, data, hasContext } =\n    useContext(DataContext)\n\n  const dataRef = useRef<JsonObject>({})\n  dataRef.current = data\n\n  const generate = useCallback(() => {\n    const schema = Object.entries(fieldPropsRef?.current || {}).reduce(\n      (acc, [path, props]) => {\n        if (path.startsWith('/')) {\n          const objectKey = path.substring(1)\n\n          const pathList = objectKey.split('/')\n          const slashCount = pathList.length\n\n          const type = props.valueType || 'string'\n          const propertyValue = {\n            type,\n          }\n\n          for (const prop of schemaParams) {\n            if (props[prop]) {\n              propertyValue[prop] = props[prop]\n            }\n          }\n\n          if (slashCount > 1) {\n            const nestedPath = ['']\n            for (const path of pathList) {\n              nestedPath.push(path)\n              const pathToSet = nestedPath.join('/properties/')\n              const isLast = nestedPath.length - 1 === pathList.length\n\n              const existingValue = pointer.has(acc, pathToSet)\n                ? pointer.get(acc, pathToSet)\n                : null\n\n              const pathValue = isLast ? propertyValue : existingValue\n\n              if (isLast) {\n                if (filterData?.[pathToSet] !== false) {\n                  pointer.set(acc, pathToSet, pathValue)\n                }\n              } else {\n                const pathValue = {\n                  type: 'object',\n                  ...existingValue,\n                }\n\n                // - Add required\n                const required = []\n                if (props.required) {\n                  required.push(pathList.at(-1))\n                }\n                if (existingValue?.required) {\n                  required.push(...existingValue.required)\n                }\n                if (required.length > 0) {\n                  pathValue.required = required\n                }\n\n                if (filterData?.[pathToSet] !== false) {\n                  pointer.set(acc, pathToSet, pathValue)\n                }\n              }\n            }\n          } else {\n            if (filterData?.[path] !== false) {\n              pointer.set(acc.properties, path, propertyValue)\n            }\n            if (props.required) {\n              acc.required.push(objectKey)\n            }\n          }\n        }\n\n        return acc\n      },\n      { type: 'object', properties: {}, required: [] }\n    )\n\n    const propsOfFields = Object.entries(\n      fieldPropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function'\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        pointer.set(acc, path, propertyValue)\n      }\n\n      return acc\n    }, {})\n\n    const propsOfValues = Object.entries(\n      valuePropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function'\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        pointer.set(acc, path, propertyValue)\n      }\n\n      return acc\n    }, {})\n\n    if (schema.required.length === 0) {\n      delete schema.required\n    }\n\n    return {\n      schema,\n      data: dataRef.current,\n      propsOfFields,\n      propsOfValues,\n    } as GenerateSchemaReturn\n  }, [fieldPropsRef, filterData, valuePropsRef])\n\n  if (hasContext) {\n    if (log) {\n      console.log(generate().schema)\n    }\n\n    if (generateRef) {\n      generateRef.current = generate\n    }\n  }\n\n  return children\n}\n","import { isValidElement, useCallback, useContext, useRef } from 'react'\nimport pointer, { JsonObject } from '../utils/json-pointer'\nimport DataContext, { FilterData } from '../DataContext/Context'\n\nexport type ListAllPropsReturn<Data> = {\n  propsOfFields: Data\n  propsOfValues: Data\n}\nexport type ListAllPropsProps<Data> = {\n  log?: boolean\n  generateRef?: React.MutableRefObject<() => ListAllPropsReturn<Data>>\n  filterData?: FilterData\n  children: React.ReactNode\n}\nexport type GenerateRef<Data extends JsonObject = JsonObject> =\n  ListAllPropsProps<Data>['generateRef']['current']\n\nexport default function ListAllProps<Data extends JsonObject = JsonObject>(\n  props: ListAllPropsProps<Data>\n) {\n  const { log, generateRef, filterData, children } = props || {}\n  const { fieldPropsRef, valuePropsRef, data, hasContext } =\n    useContext(DataContext)\n\n  const dataRef = useRef<JsonObject>({})\n  dataRef.current = data\n\n  const generate = useCallback(() => {\n    const propsOfFields = Object.entries(\n      fieldPropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function' &&\n            !isValidElement(props[prop])\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        if (filterData?.[path] !== false) {\n          pointer.set(acc, path, propertyValue)\n        }\n      }\n\n      return acc\n    }, {})\n\n    const propsOfValues = Object.entries(\n      valuePropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function' &&\n            !isValidElement(props[prop])\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        if (filterData?.[path] !== false) {\n          pointer.set(acc, path, propertyValue)\n        }\n      }\n\n      return acc\n    }, {})\n\n    return { propsOfFields, propsOfValues } as ListAllPropsReturn<Data>\n  }, [fieldPropsRef, filterData, valuePropsRef])\n\n  if (hasContext) {\n    if (log) {\n      console.log(generate())\n    }\n\n    if (generateRef) {\n      generateRef.current = generate\n    }\n  }\n\n  return children\n}\n","import React, { useContext } from 'react'\nimport DataContext from '../DataContext/Context'\nimport Section, { SectionAllProps } from '../../../components/Section'\nimport { FormLabel } from '../../../components'\n\nfunction Log({\n  placeholder,\n  label,\n  data: logData,\n  ...props\n}: Omit<SectionAllProps, 'data' | 'label'> & {\n  data?: unknown\n  label?: React.ReactNode\n  placeholder?: React.ReactNode\n}) {\n  const { data } = useContext(DataContext)\n\n  return (\n    <Section\n      element=\"output\"\n      backgroundColor=\"sand-yellow\"\n      style={{ maxWidth: '80vw' }}\n      innerSpace\n      {...props}\n    >\n      {label && (\n        <FormLabel bottom>\n          <b>{label}</b>\n        </FormLabel>\n      )}\n      <pre>\n        {placeholder && Object.keys((logData ?? data) || {}).length === 0\n          ? placeholder\n          : JSON.stringify(\n              replaceUndefinedValues(logData ?? data),\n              null,\n              2\n            )}\n        {' ' /* Ensure one line of spacing */}\n      </pre>\n    </Section>\n  )\n}\n\n/**\n * Replaces undefined values in an object with a specified replacement value.\n * @param value - The value to check for undefined values.\n * @param replaceWith - The value to replace undefined values with. Default is null.\n * @returns The object with undefined values replaced.\n */\nfunction replaceUndefinedValues(\n  value: unknown,\n  replaceWith = 'undefined' as unknown\n): unknown {\n  if (typeof value === 'undefined') {\n    return replaceWith\n  } else if (value && typeof value === 'object' && value !== replaceWith) {\n    return {\n      ...value,\n      ...Object.fromEntries(\n        Object.entries(value).map(([k, v]) => [\n          k,\n          replaceUndefinedValues(v),\n        ])\n      ),\n    }\n  } else {\n    return value\n  }\n}\n\nLog._supportsSpacingProps = true\nexport default Log\n","import React from 'react'\nimport classnames from 'classnames'\nimport { Space } from '../../../../components'\n\nexport default function TestElement({ className = null, ...props }) {\n  return (\n    <Space\n      className={classnames('dnb-forms-test-element', className)}\n      {...props}\n    />\n  )\n}\n\nTestElement._supportsSpacingProps = true\n"],"names":["BooleanExample","_jsx","ComponentBox","scope","TestElement","children","PathValue","InferData","noInline","BasedOnBooleanTrue","BasedOnContext","NestedExample","Tools","FilterData","InheritVisibility","VisibilityOnValidation","_createMdxContent","props","_components","Object","assign","h2","h3","p","code","pre","strong","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","className","wrapper","MDXLayout","id","component","Error","schemaParams","GenerateSchema","generateRef","filterData","log","fieldPropsRef","valuePropsRef","data","hasContext","useContext","DataContext","dataRef","useRef","current","generate","useCallback","schema","entries","reduce","acc","_ref","path","startsWith","objectKey","substring","pathList","split","slashCount","length","propertyValue","type","valueType","prop","nestedPath","push","pathToSet","join","isLast","existingValue","pointer","pathValue","required","at","apply","_toConsumableArray","properties","propsOfFields","_ref2","undefined","propsOfValues","_ref3","console","ListAllProps","isValidElement","Log","placeholder","label","logData","Section","element","backgroundColor","style","maxWidth","innerSpace","FormLabel","bottom","keys","JSON","stringify","replaceUndefinedValues","value","replaceWith","fromEntries","map","k","v","_supportsSpacingProps","Space","classnames"],"sourceRoot":""}