{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-visibility-demos-mdx-8dc216a8422fd1d29f10.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Visibility/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Visibility/demos.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/utils/TestElement/TestElement.tsx"],"sourcesContent":["import React from 'react'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Card, Flex, P } from '@dnb/eufemia/src'\nimport {\n  Field,\n  Form,\n  TestElement,\n  Value,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport const BooleanExample = () => {\n  return (\n    <ComponentBox scope={{ TestElement }}>\n      <Form.Handler>\n        <Flex.Stack>\n          <Field.Boolean\n            label=\"Show content\"\n            variant=\"buttons\"\n            path=\"/toggleValue\"\n            value={false}\n          />\n          <Form.Visibility pathTrue=\"/toggleValue\" animate>\n            <TestElement>Item 1</TestElement>\n            <TestElement>Item 2</TestElement>\n          </Form.Visibility>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const PathValue = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Field.Toggle\n          label=\"Show content\"\n          valueOn=\"checked\"\n          valueOff=\"unchecked\"\n          variant=\"buttons\"\n          path=\"/toggleValue\"\n          value=\"unchecked\"\n        />\n        <Form.Visibility\n          visibleWhen={{\n            path: '/toggleValue',\n            hasValue: 'checked',\n          }}\n          animate\n        >\n          <P>This is visible</P>\n        </Form.Visibility>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const InferData = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyComponent = () => {\n          const { data } = Form.useData('example-form', {\n            toggleValue: false,\n          })\n          const inferDataFunc = React.useCallback(\n            () => data.toggleValue,\n            [data.toggleValue],\n          )\n\n          return (\n            <Form.Handler id=\"example-form\">\n              <Flex.Stack>\n                <Field.Boolean path=\"/toggleValue\" label=\"Check me\" />\n                <Form.Visibility inferData={inferDataFunc} animate>\n                  <P>This is visible</P>\n                </Form.Visibility>\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <MyComponent />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const BasedOnBooleanTrue = () => {\n  return (\n    <ComponentBox>\n      <Form.Visibility visible={true}>\n        <P>This is visible</P>\n      </Form.Visibility>\n    </ComponentBox>\n  )\n}\n\nexport const BasedOnContext = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        data={{\n          toBe: true,\n          notToBe: false,\n        }}\n      >\n        <Form.Visibility pathTrue=\"/toBe\">\n          <P>This will show, as long as `toBe` is true.</P>\n        </Form.Visibility>\n        <Form.Visibility pathTrue=\"/notToBe\">\n          <P>This will not show until `notToBe` is true.</P>\n        </Form.Visibility>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const NestedExample = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const filterDataHandler = ({ props }) =>\n          !props['data-exclude-field']\n\n        const MyForm = () => {\n          return (\n            <Form.Handler defaultData={{ isVisible: false }}>\n              <Flex.Stack>\n                <Field.Boolean\n                  label=\"Visible\"\n                  variant=\"button\"\n                  path=\"/isVisible\"\n                  data-exclude-field\n                />\n                <Form.Visibility\n                  pathTrue=\"/isVisible\"\n                  animate\n                  keepInDOM\n                  fieldPropsWhenHidden={{ 'data-exclude-field': true }}\n                >\n                  <Field.Selection\n                    label=\"Choose\"\n                    variant=\"radio\"\n                    value=\"less\"\n                    path=\"/mySelection\"\n                  >\n                    <Field.Option value=\"less\" title=\"Less\" />\n                    <Field.Option value=\"more\" title=\"More\" />\n                  </Field.Selection>\n\n                  <Form.Visibility\n                    visibleWhen={{\n                      path: '/mySelection',\n                      hasValue: 'more',\n                    }}\n                    animate\n                    keepInDOM\n                    fieldPropsWhenHidden={{ 'data-exclude-field': true }}\n                  >\n                    <Field.String\n                      label=\"My String\"\n                      path=\"/myString\"\n                      value=\"foo\"\n                    />\n                  </Form.Visibility>\n                </Form.Visibility>\n              </Flex.Stack>\n              <Log />\n            </Form.Handler>\n          )\n        }\n\n        const Log = () => {\n          const { filterData } = Form.useData()\n          console.log(filterData(filterDataHandler))\n          return null\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const FilterData = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const filterDataPaths = {\n          '/isVisible': false,\n          '/mySelection': ({ data }) => data.isVisible,\n          '/myString': ({ data }) => {\n            return data.isVisible && data.mySelection === 'more'\n          },\n        }\n\n        const MyForm = () => {\n          return (\n            <Form.Handler\n              defaultData={{\n                myString: 'foo',\n              }}\n            >\n              <Flex.Stack>\n                <Field.Boolean\n                  label=\"Visible\"\n                  variant=\"button\"\n                  path=\"/isVisible\"\n                />\n                <Form.Visibility visible pathTrue=\"/isVisible\" animate>\n                  <Field.Selection\n                    label=\"Choose\"\n                    variant=\"radio\"\n                    value=\"less\"\n                    path=\"/mySelection\"\n                  >\n                    <Field.Option value=\"less\" title=\"Less\" />\n                    <Field.Option value=\"more\" title=\"More\" />\n                  </Field.Selection>\n\n                  <Form.Visibility\n                    visibleWhen={{\n                      path: '/mySelection',\n                      hasValue: 'more',\n                    }}\n                    animate\n                  >\n                    <Field.String label=\"My String\" path=\"/myString\" />\n                  </Form.Visibility>\n                </Form.Visibility>\n\n                <Form.Visibility\n                  pathDefined=\"/myString\"\n                  filterData={filterDataPaths}\n                  animate\n                >\n                  <Card>\n                    <P>\n                      Result: <Value.String path=\"/myString\" inline />\n                    </P>\n                  </Card>\n                </Form.Visibility>\n              </Flex.Stack>\n\n              <Log />\n            </Form.Handler>\n          )\n        }\n\n        const Log = () => {\n          const { filterData } = Form.useData()\n          console.log(filterData(filterDataPaths))\n          return null\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.BasedOnBooleanTrue) _missingMdxReference(\"Examples.BasedOnBooleanTrue\", true);\n  if (!Examples.BasedOnContext) _missingMdxReference(\"Examples.BasedOnContext\", true);\n  if (!Examples.BooleanExample) _missingMdxReference(\"Examples.BooleanExample\", true);\n  if (!Examples.FilterData) _missingMdxReference(\"Examples.FilterData\", true);\n  if (!Examples.InferData) _missingMdxReference(\"Examples.InferData\", true);\n  if (!Examples.NestedExample) _missingMdxReference(\"Examples.NestedExample\", true);\n  if (!Examples.PathValue) _missingMdxReference(\"Examples.PathValue\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Boolean example\"\n    }), \"\\n\", _jsx(Examples.BooleanExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Matching value\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"visibleWhen\"\n      }), \" is pretty powerful. You can use it to show/hide based on the value of a \", _jsx(_components.code, {\n        children: \"path\"\n      }), \". You can also give it a \", _jsx(_components.code, {\n        children: \"withValue\"\n      }), \" function that gives you the current value, so you can assert it and return a boolean based on that.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Form.Visibility\\n  visibleWhen={{\\n    path: '/toggleValue',\\n    withValue: (value) => value === 'checked',\\n  }}\\n>\\n  Content\\n</Form.Visibility>\\n\"\n      })\n    }), \"\\n\", _jsx(Examples.PathValue, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Direct properties\"\n    }), \"\\n\", _jsx(Examples.BasedOnBooleanTrue, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Based on DataContext\"\n    }), \"\\n\", _jsx(Examples.BasedOnContext, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"InferData\"\n    }), \"\\n\", _jsx(Examples.InferData, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Nested visibility example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use \", _jsx(_components.code, {\n        children: \"fieldPropsWhenHidden\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"keepInDOM\"\n      }), \" to keep the content in the DOM, even if it's not visible.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example we filter out all fields that have the \", _jsx(_components.code, {\n        children: \"data-exclude-field\"\n      }), \" attribute. See the console output for the result.\"]\n    }), \"\\n\", _jsx(Examples.NestedExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Filter data\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Note:\"\n      }), \" This example uses \", _jsx(_components.code, {\n        children: \"filterData\"\n      }), \" with \", _jsx(_components.code, {\n        children: \"pathDefined\"\n      }), \" on a Visibility component along, which is a declarative way to describe the data to be shown.\"]\n    }), \"\\n\", _jsx(Examples.FilterData, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import React from 'react'\nimport classnames from 'classnames'\nimport { Space } from '../../../../components'\n\nexport default function TestElement({ className = null, ...props }) {\n  return (\n    <Space\n      className={classnames('dnb-forms-test-element', className)}\n      {...props}\n    />\n  )\n}\n\nTestElement._supportsSpacingProps = true\n"],"names":["BooleanExample","_jsx","ComponentBox","scope","TestElement","children","PathValue","InferData","noInline","BasedOnBooleanTrue","BasedOnContext","NestedExample","FilterData","_createMdxContent","props","_components","Object","assign","h2","h3","p","code","pre","strong","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","className","wrapper","MDXLayout","id","component","Error","_ref","Space","classnames","_supportsSpacingProps"],"sourceRoot":""}