"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[3123],{55838:function(e,n,t){t.r(n),t.d(n,{default:function(){return x}});var i={};t.r(i),t.d(i,{BasedOnBooleanTrue:function(){return u},BasedOnContext:function(){return h},BooleanExample:function(){return s},InferData:function(){return c},NestedExample:function(){return m},PathValue:function(){return d}});var l=t(52322),a=t(45392),o=(t(2784),t(75333)),r=t(99210);const s=()=>(0,l.jsx)(o.Z,{scope:{TestElement:r.Z},children:'<Form.Handler>\n  <Flex.Stack>\n    <Field.Boolean\n      label="Show content"\n      variant="buttons"\n      path="/toggleValue"\n      value={false}\n    />\n    <Form.Visibility pathTrue="/toggleValue" animate>\n      <TestElement>Item 1</TestElement>\n      <TestElement>Item 2</TestElement>\n    </Form.Visibility>\n  </Flex.Stack>\n</Form.Handler>\n'}),d=()=>(0,l.jsx)(o.Z,{children:'<Form.Handler>\n  <Field.Toggle\n    label="Show content"\n    valueOn="checked"\n    valueOff="unchecked"\n    variant="buttons"\n    path="/toggleValue"\n    value="unchecked"\n  />\n  <Form.Visibility pathValue="/toggleValue" whenValue="checked" animate>\n    <P>This is visible</P>\n  </Form.Visibility>\n</Form.Handler>\n'}),c=()=>(0,l.jsx)(o.Z,{noInline:!0,children:'const MyComponent = () => {\n  const { data } = Form.useData(\'example-form\', {\n    toggleValue: false,\n  })\n  const inferDataFunc = React.useCallback(\n    () => data.toggleValue,\n    [data.toggleValue],\n  )\n  return (\n    <Form.Handler id="example-form">\n      <Flex.Stack>\n        <Field.Boolean path="/toggleValue" label="Check me" />\n        <Form.Visibility inferData={inferDataFunc} animate>\n          <P>This is visible</P>\n        </Form.Visibility>\n      </Flex.Stack>\n    </Form.Handler>\n  )\n}\nrender(<MyComponent />)\n'}),u=()=>(0,l.jsx)(o.Z,{children:"<Form.Visibility visible={true}>\n  <P>This is visible</P>\n</Form.Visibility>\n"}),h=()=>(0,l.jsx)(o.Z,{children:'<Form.Handler\n  data={{\n    toBe: true,\n    notToBe: false,\n  }}\n>\n  <Form.Visibility pathTrue="/toBe">\n    <P>This will show, as long as `toBe` is true.</P>\n  </Form.Visibility>\n  <Form.Visibility pathTrue="/notToBe">\n    <P>This will not show until `notToBe` is true.</P>\n  </Form.Visibility>\n</Form.Handler>\n'}),m=()=>(0,l.jsx)(o.Z,{noInline:!0,children:'const filterDataHandler = (path, value, props, internal) =>\n  !props[\'data-exclude-field\']\nconst MyForm = () => {\n  return (\n    <Form.Handler>\n      <Flex.Stack>\n        <Field.Boolean\n          label="Toggle"\n          variant="button"\n          path="/isVisible"\n          data-exclude-field\n        />\n        <Form.Visibility\n          visible\n          pathTrue="/isVisible"\n          animate\n          keepInDOM\n          fieldPropsWhenHidden={{\n            \'data-exclude-field\': true,\n          }}\n        >\n          <Field.Selection\n            label="Choose"\n            variant="radio"\n            path="/mySelection"\n            value="less"\n          >\n            <Field.Option value="less" title="Less" />\n            <Field.Option value="more" title="More" />\n          </Field.Selection>\n\n          <Form.Visibility\n            visible\n            pathValue="/mySelection"\n            whenValue="more"\n            animate\n            keepInDOM\n            fieldPropsWhenHidden={{\n              \'data-exclude-field\': true,\n            }}\n          >\n            <Field.String label="My String" path="/myString" value="foo" />\n          </Form.Visibility>\n        </Form.Visibility>\n      </Flex.Stack>\n      <Log />\n    </Form.Handler>\n  )\n}\nconst Log = () => {\n  const { filterData } = Form.useData()\n  console.log(filterData(filterDataHandler))\n  return null\n}\nrender(<MyForm />)\n'});function p(e){const n=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code"},(0,a.ah)(),e.components);return i||f("Examples",!1),u||f("Examples.BasedOnBooleanTrue",!0),h||f("Examples.BasedOnContext",!0),s||f("Examples.BooleanExample",!0),c||f("Examples.InferData",!0),m||f("Examples.NestedExample",!0),d||f("Examples.PathValue",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{children:"Demos"}),"\n",(0,l.jsx)(n.h3,{children:"Boolean example"}),"\n",(0,l.jsx)(s,{}),"\n",(0,l.jsx)(n.h3,{children:"Matching value"}),"\n",(0,l.jsx)(d,{}),"\n",(0,l.jsx)(n.h3,{children:"Direct properties"}),"\n",(0,l.jsx)(u,{}),"\n",(0,l.jsx)(n.h3,{children:"Based on DataContext"}),"\n",(0,l.jsx)(h,{}),"\n",(0,l.jsx)(n.h3,{children:"InferData"}),"\n",(0,l.jsx)(c,{}),"\n",(0,l.jsx)(n.h3,{children:"Nested visibility example"}),"\n",(0,l.jsxs)(n.p,{children:["Use ",(0,l.jsx)(n.code,{children:"fieldPropsWhenHidden"})," and ",(0,l.jsx)(n.code,{children:"keepInDOM"})," to keep the content in the DOM, even if it's not visible."]}),"\n",(0,l.jsxs)(n.p,{children:["In this example we filter out all fields that have the ",(0,l.jsx)(n.code,{children:"data-exclude-field"})," attribute. See the console output for the result."]}),"\n",(0,l.jsx)(m,{})]})}var x=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,l.jsx)(n,Object.assign({},e,{children:(0,l.jsx)(p,e)})):p(e)};function f(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},99210:function(e,n,t){t.d(n,{Z:function(){return r}});var i=t(72779),l=t.n(i),a=t(80215),o=t(52322);function r(e){let{className:n=null,...t}=e;return(0,o.jsx)(a.Z,{className:l()("dnb-forms-test-element",n),...t})}r._supportsSpacingProps=!0}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-visibility-demos-mdx-aa91eee1d492ffaad16f.js.map