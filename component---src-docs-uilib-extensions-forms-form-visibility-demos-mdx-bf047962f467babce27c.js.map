{"version":3,"file":"component---src-docs-uilib-extensions-forms-form-visibility-demos-mdx-bf047962f467babce27c.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/utils/TestElement/TestElement.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Visibility/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/Visibility/demos.mdx"],"sourcesContent":["import React from 'react'\nimport classnames from 'classnames'\nimport { Space } from '../../../../components'\n\nexport default function TestElement({ className = null, ...props }) {\n  return (\n    <Space\n      className={classnames('dnb-forms-test-element', className)}\n      {...props}\n    />\n  )\n}\n\nTestElement._supportsSpacingProps = true\n","import React from 'react'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Flex, HeightAnimation, P } from '@dnb/eufemia/src'\nimport {\n  Field,\n  Form,\n  TestElement,\n  Tools,\n  Value,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport const BooleanExample = () => {\n  return (\n    <ComponentBox scope={{ TestElement }}>\n      <Form.Handler>\n        <Flex.Stack>\n          <Field.Boolean\n            label=\"Show content\"\n            variant=\"buttons\"\n            path=\"/toggleValue\"\n            value={false}\n          />\n          <Form.Visibility pathTrue=\"/toggleValue\" animate>\n            <TestElement>Item 1</TestElement>\n            <TestElement>Item 2</TestElement>\n          </Form.Visibility>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const PathValue = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Field.Toggle\n          label=\"Show content\"\n          valueOn=\"checked\"\n          valueOff=\"unchecked\"\n          variant=\"buttons\"\n          path=\"/toggleValue\"\n          value=\"unchecked\"\n        />\n        <Form.Visibility\n          visibleWhen={{\n            path: '/toggleValue',\n            hasValue: 'checked',\n          }}\n          animate\n        >\n          <P>This is visible</P>\n        </Form.Visibility>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const InferData = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyComponent = () => {\n          const { data } = Form.useData('example-form', {\n            toggleValue: false,\n          })\n          const inferDataFunc = React.useCallback(\n            () => data.toggleValue,\n            [data.toggleValue],\n          )\n\n          return (\n            <Form.Handler id=\"example-form\">\n              <Flex.Stack>\n                <Field.Boolean path=\"/toggleValue\" label=\"Check me\" />\n                <Form.Visibility inferData={inferDataFunc} animate>\n                  <P>This is visible</P>\n                </Form.Visibility>\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <MyComponent />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const BasedOnBooleanTrue = () => {\n  return (\n    <ComponentBox>\n      <Form.Visibility visible={true}>\n        <P>This is visible</P>\n      </Form.Visibility>\n    </ComponentBox>\n  )\n}\n\nexport const BasedOnContext = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        data={{\n          toBe: true,\n          notToBe: false,\n        }}\n      >\n        <Form.Visibility pathTrue=\"/toBe\">\n          <P>This will show, as long as `toBe` is true.</P>\n        </Form.Visibility>\n        <Form.Visibility pathTrue=\"/notToBe\">\n          <P>This will not show until `notToBe` is true.</P>\n        </Form.Visibility>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const NestedExample = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const filterDataHandler = ({ props }) =>\n          !props['data-exclude-field']\n\n        const MyForm = () => {\n          return (\n            <Form.Handler defaultData={{ isVisible: false }}>\n              <Flex.Stack>\n                <Field.Boolean\n                  label=\"Visible\"\n                  variant=\"button\"\n                  path=\"/isVisible\"\n                  data-exclude-field\n                />\n                <Form.Visibility\n                  pathTrue=\"/isVisible\"\n                  animate\n                  keepInDOM\n                  fieldPropsWhenHidden={{ 'data-exclude-field': true }}\n                >\n                  <Field.Selection\n                    label=\"Choose\"\n                    variant=\"radio\"\n                    value=\"less\"\n                    path=\"/mySelection\"\n                  >\n                    <Field.Option value=\"less\" title=\"Less\" />\n                    <Field.Option value=\"more\" title=\"More\" />\n                  </Field.Selection>\n\n                  <Form.Visibility\n                    visibleWhen={{\n                      path: '/mySelection',\n                      hasValue: 'more',\n                    }}\n                    animate\n                    keepInDOM\n                    fieldPropsWhenHidden={{ 'data-exclude-field': true }}\n                  >\n                    <Field.String\n                      label=\"My String\"\n                      path=\"/myString\"\n                      value=\"foo\"\n                    />\n                  </Form.Visibility>\n                </Form.Visibility>\n              </Flex.Stack>\n\n              <Output />\n            </Form.Handler>\n          )\n        }\n\n        const Output = () => {\n          const { filterData } = Form.useData()\n          const filteredData = filterData(filterDataHandler)\n\n          return <Tools.Log data={filteredData} top />\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const FilterData = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const filterDataPaths = {\n          '/isVisible': false,\n          '/mySelection': ({ data }) => data.isVisible,\n          '/myString': ({ data }) => {\n            return data.isVisible && data.mySelection === 'more'\n          },\n        }\n\n        const MyForm = () => {\n          return (\n            <Form.Handler\n              defaultData={{\n                myString: 'foo',\n              }}\n            >\n              <Flex.Stack>\n                <Field.Boolean\n                  label=\"Visible\"\n                  variant=\"button\"\n                  path=\"/isVisible\"\n                  defaultValue={false}\n                />\n                <Form.Visibility pathTrue=\"/isVisible\" animate>\n                  <Field.Selection\n                    label=\"Choose\"\n                    variant=\"radio\"\n                    value=\"less\"\n                    path=\"/mySelection\"\n                  >\n                    <Field.Option value=\"less\" title=\"Less\" />\n                    <Field.Option value=\"more\" title=\"More\" />\n                  </Field.Selection>\n\n                  <Form.Visibility\n                    visibleWhen={{\n                      path: '/mySelection',\n                      hasValue: 'more',\n                    }}\n                    animate\n                  >\n                    <Field.String label=\"My String\" path=\"/myString\" />\n                  </Form.Visibility>\n                </Form.Visibility>\n\n                <Form.Visibility\n                  pathDefined=\"/myString\"\n                  filterData={filterDataPaths}\n                  animate\n                >\n                  <Form.Card>\n                    <P>\n                      Result: <Value.String path=\"/myString\" inline />\n                    </P>\n                  </Form.Card>\n                </Form.Visibility>\n              </Flex.Stack>\n\n              <Output />\n            </Form.Handler>\n          )\n        }\n\n        const Output = () => {\n          const { filterData } = Form.useData()\n          const filteredData = filterData(filterDataPaths)\n          return <Tools.Log data={filteredData} top />\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport function InheritVisibility() {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Form.Card>\n          <Field.Boolean\n            variant=\"button\"\n            path=\"/isVisible\"\n            defaultValue={true}\n          />\n\n          <Form.Visibility pathTrue=\"/isVisible\" animate>\n            <Field.Name.First path=\"/foo\" defaultValue=\"foo\" />\n            <Field.Name.Last path=\"/bar\" defaultValue=\"bar\" />\n          </Form.Visibility>\n\n          <Value.Provider inheritVisibility>\n            <HeightAnimation>\n              <Value.SummaryList>\n                <Value.Name.First path=\"/foo\" />\n                <Value.Name.First path=\"/bar\" />\n              </Value.SummaryList>\n            </HeightAnimation>\n          </Value.Provider>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport function VisibilityOnValidation() {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Form.Card>\n          <Field.Name.First path=\"/foo\" required />\n\n          <Form.Visibility\n            visibleWhen={{\n              path: '/foo',\n              isValid: true,\n            }}\n            animate\n          >\n            <Value.Name.First path=\"/foo\" />\n          </Form.Visibility>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.BasedOnBooleanTrue) _missingMdxReference(\"Examples.BasedOnBooleanTrue\", true);\n  if (!Examples.BasedOnContext) _missingMdxReference(\"Examples.BasedOnContext\", true);\n  if (!Examples.BooleanExample) _missingMdxReference(\"Examples.BooleanExample\", true);\n  if (!Examples.FilterData) _missingMdxReference(\"Examples.FilterData\", true);\n  if (!Examples.InferData) _missingMdxReference(\"Examples.InferData\", true);\n  if (!Examples.InheritVisibility) _missingMdxReference(\"Examples.InheritVisibility\", true);\n  if (!Examples.NestedExample) _missingMdxReference(\"Examples.NestedExample\", true);\n  if (!Examples.PathValue) _missingMdxReference(\"Examples.PathValue\", true);\n  if (!Examples.VisibilityOnValidation) _missingMdxReference(\"Examples.VisibilityOnValidation\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Boolean example\"\n    }), \"\\n\", _jsx(Examples.BooleanExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Matching value\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"visibleWhen\"\n      }), \" is pretty powerful. You can use it to show/hide based on the value of a \", _jsx(_components.code, {\n        children: \"path\"\n      }), \". You can also give it a \", _jsx(_components.code, {\n        children: \"hasValue\"\n      }), \" function that gives you the current value, so you can assert it and return a boolean based on that.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Form.Visibility\\n  visibleWhen={{\\n    path: '/toggleValue',\\n    hasValue: (value) => value === 'checked',\\n  }}\\n>\\n  Content\\n</Form.Visibility>\\n\"\n      })\n    }), \"\\n\", _jsx(Examples.PathValue, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Direct properties\"\n    }), \"\\n\", _jsx(Examples.BasedOnBooleanTrue, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Based on DataContext\"\n    }), \"\\n\", _jsx(Examples.BasedOnContext, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"InferData\"\n    }), \"\\n\", _jsx(Examples.InferData, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Nested visibility example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use \", _jsx(_components.code, {\n        children: \"fieldPropsWhenHidden\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"keepInDOM\"\n      }), \" to keep the content in the DOM, even if it's not visible.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example we filter out all fields that have the \", _jsx(_components.code, {\n        children: \"data-exclude-field\"\n      }), \" attribute. See the console output for the result.\"]\n    }), \"\\n\", _jsx(Examples.NestedExample, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Filter data\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Note:\"\n      }), \" This example uses \", _jsx(_components.code, {\n        children: \"filterData\"\n      }), \" with \", _jsx(_components.code, {\n        children: \"pathDefined\"\n      }), \" on a Visibility component along, which is a declarative way to describe the data to be shown.\"]\n    }), \"\\n\", _jsx(Examples.FilterData, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inherit visibility\"\n    }), \"\\n\", _jsx(Examples.InheritVisibility, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Show children when field has no errors (validation)\"\n    }), \"\\n\", _jsx(Examples.VisibilityOnValidation, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["TestElement","_ref","className","props","_jsx","Space","classnames","_supportsSpacingProps","BooleanExample","ComponentBox","scope","children","PathValue","InferData","noInline","BasedOnBooleanTrue","BasedOnContext","NestedExample","FilterData","InheritVisibility","VisibilityOnValidation","_createMdxContent","_components","Object","assign","h2","h3","p","code","pre","strong","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error"],"sourceRoot":""}