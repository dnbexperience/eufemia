"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[12082],{23874:function(t,e,n){n.d(e,{R:function(){return o},h:function(){return a}});const o={open:{doc:"Set to `true` on second re-render when the view should animate from 0px to auto. Defaults to `true`.",type:"boolean",status:"optional"},animate:{doc:"Set to `false` to omit the animation. Defaults to `true`.",type:"boolean",status:"optional"},keepInDOM:{doc:"Set to `true` ensure the nested children content will be kept in the DOM. Defaults to `false`.",type:"boolean",status:"optional"},compensateForGap:{doc:"To compensate for CSS gap between the rows, so animation does not jump during the animation. Provide a CSS unit or `auto`. Defaults to `null`.",type:"string",status:"optional"},showOverflow:{doc:'Set to `true` to omit the usage of "overflow: hidden;". Defaults to `false`.',type:"boolean",status:"optional"},duration:{doc:"Custom duration of the animation in milliseconds. Defaults to `400ms`.",type:"number",status:"optional"},delay:{doc:"Custom delay of the animation in milliseconds. Defaults to `0ms`.",type:"number",status:"optional"},element:{doc:"Custom HTML element for the component. Defaults to `div` HTML Element.",type:"string",status:"optional"},innerRef:{doc:"Send along a custom React Ref.",type:"React.RefObject",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},a={onOpen:{doc:"Is called when fully opened or closed. Returns `true` or `false` depending on the state.",type:"function",status:"optional"},onAnimationStart:{doc:"Is called when animation has started. The first parameter is a string. Depending on the state, the value can be `opening`, `closing` or `adjusting`.",type:"function",status:"optional"},onAnimationEnd:{doc:"Is called when animation is done and the full height is reached. The first parameter is a string. Depending on the state, the value can be `opened`, `closed` or `adjusted`.",type:"function",status:"optional"},onInit:{doc:"Is called once before mounting the component (useLayoutEffect). Returns the instance of the internal animation class.",type:"function",status:"optional"}}},69094:function(t,e,n){var o=n(23722);e.A=o.A},81908:function(t,e,n){var o=n(94515);e.A=o.A},92034:function(t,e,n){var o=n(31666);e.A=o.A},93422:function(t,e,n){n.r(e);var o=n(31085),a=n(71184),i=n(15616),s=n(96936);function l(t){const e=Object.assign({h2:"h2"},(0,a.R)(),t.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:"Events"}),"\n",(0,o.jsx)(i.Ay,{props:s.O})]})}e.default=function(t){void 0===t&&(t={});const{wrapper:e}=Object.assign({},(0,a.R)(),t.components);return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(l,t)})):l(t)}},96936:function(t,e,n){n.d(e,{M:function(){return a},O:function(){return i}});var o=n(23874);const a={visibleWhen:{doc:"Provide a `path` or `itemPath`, and a `hasValue` function that returns either a boolean or the expected value to determine whether the children should be shown. The first parameter passed to `hasValue` is the value at the given `path`. If the `path` does not exist, the value will be `undefined`. \nAlternatively, you can use `isValid` instead of `hasValue` to show the children only when the field has no validation errors and has been blurred (lost focus). You can change this behavior by setting the `validateContinuously` property.",type:"object",status:"optional"},visibleWhenNot:{doc:"Same as `visibleWhen`, but with inverted logic.",type:"object",status:"optional"},pathDefined:{doc:"Given data context path must be defined to show children.",type:"string",status:"optional"},pathUndefined:{doc:"Given data context path must be undefined to show children.",type:"string",status:"optional"},pathTruthy:{doc:"Given data context path must be truthy to show children.",type:"string",status:"optional"},pathFalsy:{doc:"Given data context path must be falsy to show children.",type:"string",status:"optional"},pathTrue:{doc:"Given data context path must be true to show children.",type:"string",status:"optional"},pathFalse:{doc:"Given data context path must be false to show children.",type:"string",status:"optional"},inferData:{doc:"Will be called to decide by external logic, and show/hide contents based on the return value.",type:"function",status:"optional"},visible:{doc:"Control visibility directly using the `visible` prop. When used alongside other conditions, the `visible` prop takes precedence.",type:"boolean",status:"optional"},animate:{doc:"Define if the content should animate during show/hide.",type:"boolean",status:"optional"},keepInDOM:{doc:"Keep the content in the DOM, even if it's not visible. Can be used to let fields run validation.",type:"boolean",status:"optional"},compensateForGap:{doc:"To compensate for CSS gap between the rows, so animation does not jump during the animation. Provide a CSS unit or `auto`. Defaults to `null`.",type:"string",status:"optional"},filterData:{doc:"Filter data based on provided criteria. More info about `filterData` can be found in the [Getting Started](/uilib/extensions/forms/getting-started/#filter-data) documentation.",type:["object","function"],status:"optional"},fieldPropsWhenHidden:{doc:"When visibility is hidden, and `keepInDOM` is true, pass these props to the children.",type:"various",status:"optional"},element:{doc:"Define the type of element. Defaults to `div`. Only for when `animate` is true.",type:"string or React.Element",status:"optional"},children:{doc:"Contents.",type:"React.Node",status:"required"}},i={onVisible:{doc:"Callback for when the content gets visible. Returns a boolean as the first parameter.",type:o.h.onOpen.type,status:"optional"},onAnimationEnd:o.h.onAnimationEnd}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-visibility-events-mdx-2883f0073e669e103435.js.map