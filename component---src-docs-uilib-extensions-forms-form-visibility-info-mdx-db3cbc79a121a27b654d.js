"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[98937],{85833:function(e,n,i){i.r(n);var s=i(31085),t=i(71184);function r(e){const n=Object.assign({h2:"h2",p:"p",code:"code",a:"a",h3:"h3",pre:"pre",h4:"h4"},(0,t.R)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{children:"Description"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Form.Visibility"})," component allows you to conditionally show or hide components based on the state of data or field validation. You can either provide the values directly via properties or let it read data from a surrounding ",(0,s.jsx)(n.a,{href:"/uilib/extensions/forms/Form/Handler",children:"Form.Handler"}),". This enables dynamic visibility control based on the paths it points to."]}),"\n",(0,s.jsx)(n.h3,{children:"Iterate.Visibility"}),"\n",(0,s.jsxs)(n.p,{children:["You can also use the ",(0,s.jsx)(n.a,{href:"/uilib/extensions/forms/Iterate/Visibility/",children:"Iterate.Visibility"})," component to target relative paths (",(0,s.jsx)(n.code,{children:"itemPath"}),") within an ",(0,s.jsx)(n.a,{href:"/uilib/extensions/forms/Iterate/Array/",children:"Iterate.Array"})," component."]}),"\n",(0,s.jsx)(n.h3,{children:"Data driven visibility"}),"\n",(0,s.jsxs)(n.p,{children:["There are several ",(0,s.jsx)(n.a,{href:"/uilib/extensions/forms/Form/Visibility/properties/",children:"properties"})," you can use to control visibility, such as ",(0,s.jsx)(n.code,{children:"pathDefined"}),", ",(0,s.jsx)(n.code,{children:"pathTruthy"}),", ",(0,s.jsx)(n.code,{children:"pathTrue"})," etc."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { Form, Field } from \'@dnb/eufemia/extensions/forms\'\n\nrender(\n  <>\n    <Field.Boolean path="/myState" />\n    <Form.Visibility pathTrue="/myState">\n      show me when the data value is true\n    </Form.Visibility>\n  </>,\n)\n'})}),"\n",(0,s.jsx)(n.h4,{children:"Dynamic value driven visibility"}),"\n",(0,s.jsxs)(n.p,{children:["You can also use the ",(0,s.jsx)(n.code,{children:"visibleWhen"})," property to conditionally show the children based on the data value of the path."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { Form, Field } from '@dnb/eufemia/extensions/forms'\n\nrender(\n  <>\n    <Field.Boolean path=\"/myState\" />\n    <Form.Visibility\n      visibleWhen={{\n        path: '/myState',\n        hasValue: (value) => value === true,\n      }}\n    >\n      show me when the data value is true\n    </Form.Visibility>\n  </>,\n)\n"})}),"\n",(0,s.jsx)(n.h3,{children:"Validation driven visibility"}),"\n",(0,s.jsxs)(n.p,{children:["You can conditionally display children based on field validation by using the ",(0,s.jsx)(n.code,{children:"visibleWhen"})," property with ",(0,s.jsx)(n.code,{children:"isValid: true"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { Form, Field } from '@dnb/eufemia/extensions/forms'\n\nrender(\n  <>\n    <Field.Boolean path=\"/myField\" />\n    <Form.Visibility\n      visibleWhen={{\n        path: '/myField',\n        isValid: true,\n      }}\n    >\n      show me when the validation succeeds\n    </Form.Visibility>\n  </>,\n)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To prevent visibility changes during user interactions like typing, it shows the children first when the field both has no errors and has lost focus (blurred). You can use the ",(0,s.jsx)(n.code,{children:"validateContinuously: true"})," property to immediately show the children when the field has no errors."]}),"\n",(0,s.jsx)(n.h2,{children:"Accessibility"}),"\n",(0,s.jsxs)(n.p,{children:["Children of the ",(0,s.jsx)(n.code,{children:"Form.Visibility"})," component will be hidden from screen readers when visually hidden, even if ",(0,s.jsx)(n.code,{children:"keepInDOM"})," is enabled. You don't need to do anything to make the content additionally inaccessible."]}),"\n",(0,s.jsx)(n.h2,{children:"Animate"}),"\n",(0,s.jsxs)(n.p,{children:["You can use the ",(0,s.jsx)(n.code,{children:"animate"})," property to animate the visibility change. It can be used in combination with ",(0,s.jsx)(n.code,{children:"keepInDOM"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { Form } from \'@dnb/eufemia/extensions/forms\'\nrender(\n  <>\n    <Field.Boolean path="/myState" />\n    <Form.Visibility pathTrue="/myState" animate>\n      show me when the data value is true\n    </Form.Visibility>\n  </>,\n)\n'})}),"\n",(0,s.jsx)(n.h2,{children:"Keep in DOM"}),"\n",(0,s.jsxs)(n.p,{children:["You can use the ",(0,s.jsx)(n.code,{children:"keepInDOM"})," property to keep the content in the DOM, even if it's not visible or accessible. This can be useful for fields that still needs to run validation."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { Form } from \'@dnb/eufemia/extensions/forms\'\nrender(\n  <>\n    <Field.Boolean path="/myState" />\n    <Form.Visibility pathTrue="/myState" keepInDOM>\n      show me when the data value is true\n    </Form.Visibility>\n  </>,\n)\n'})}),"\n",(0,s.jsx)(n.h2,{children:"Disable children fields when hidden"}),"\n",(0,s.jsxs)(n.p,{children:["You can disable children fields when they are hidden by using the ",(0,s.jsx)(n.code,{children:"fieldPropsWhenHidden"})," property. It will pass the given properties to the children when the visibility is hidden. It needs to be used in combination with the ",(0,s.jsx)(n.code,{children:"keepInDOM"})," property."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { Form } from \'@dnb/eufemia/extensions/forms\'\nrender(\n  <>\n    <Field.Boolean path="/myState" />\n    <Form.Visibility\n      pathTrue="/myState"\n      keepInDOM\n      fieldPropsWhenHidden={{ disabled: true }}\n    >\n      <Field.String />\n    </Form.Visibility>\n  </>,\n)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Check out the ",(0,s.jsx)(n.a,{href:"#nested-visibility-example",children:"Nested visibility example"})," to see how you can use ",(0,s.jsx)(n.code,{children:"fieldPropsWhenHidden"})," and ",(0,s.jsx)(n.code,{children:"keepInDOM"}),"."]}),"\n",(0,s.jsx)(n.h3,{children:"Why is this useful?"}),"\n",(0,s.jsx)(n.p,{children:"In some cases, you want to keep the content in the DOM, even if it's not visible. This can be useful for fields that still needs to run validation."}),"\n",(0,s.jsx)(n.h2,{children:"Inherit visibility"}),"\n",(0,s.jsxs)(n.p,{children:["By using the provider component ",(0,s.jsx)(n.code,{children:"Value.Provider"}),", you can propagate the visibility (with the ",(0,s.jsx)(n.code,{children:"inheritVisibility"})," property) of the parent to all nested values."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { Form, Value } from \'@dnb/eufemia/extensions/forms\'\n\nrender(\n  <Form.Handler>\n    <Value.Provider inheritVisibility>\n      <Value.String path="/foo" />\n      <Value.String path="/bar" />\n    </Value.Provider>\n  </Form.Handler>,\n)\n'})})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.R)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(r,e)})):r(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-form-visibility-info-mdx-db3cbc79a121a27b654d.js.map