{"version":3,"file":"component---src-docs-uilib-extensions-forms-general-demos-mdx-1f6aca6f5d6a840dca0f.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/general-demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/DataContext/At/At.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/StepsContext.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/Step/Step.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/NextButton/NextButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/PreviousButton/PreviousButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/Buttons/Buttons.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/StepsLayout.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/StepsLayout/index.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h3: \"h3\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.BaseFieldComponents) _missingMdxReference(\"Examples.BaseFieldComponents\", true);\n  if (!Examples.FeatureFields) _missingMdxReference(\"Examples.FeatureFields\", true);\n  if (!Examples.LayoutComponents) _missingMdxReference(\"Examples.LayoutComponents\", true);\n  if (!Examples.UsingFormHandler) _missingMdxReference(\"Examples.UsingFormHandler\", true);\n  if (!Examples.Validation) _missingMdxReference(\"Examples.Validation\", true);\n  if (!Examples.VisibilityBasedOnData) _missingMdxReference(\"Examples.VisibilityBasedOnData\", true);\n  if (!Examples.WithSteps) _missingMdxReference(\"Examples.WithSteps\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"General Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Base field components\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Base field components are targeting the data type they produce. They can\\nreceive values and change handlers directly by props.\"\n    }), \"\\n\", _jsx(Examples.BaseFieldComponents, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Feature fields\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Feature fields build on top of base field components and provide standard\\nprops for simplified form implementations.\"\n    }), \"\\n\", _jsx(Examples.FeatureFields, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Layout components\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Wrapping inputs in layout components provide the standard design without\\nthe need for local styles.\"\n    }), \"\\n\", _jsx(Examples.LayoutComponents, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Using Form.Handler\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Wrapping fields with a Form.Handler component lets them read and\\nwrite data to one common data set, and have input and output of data in\\none place instead of connecting to every single field component.\"\n    }), \"\\n\", _jsx(Examples.UsingFormHandler, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Visibility based on data\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Some fields are displayed when data fill specific requirements.\"\n    }), \"\\n\", _jsx(Examples.VisibilityBasedOnData, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Validation\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here are some examples of validation properties of field components.\"\n    }), \"\\n\", _jsx(Examples.Validation, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With steps\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Some fields are displayed when data fill specific requirements.\"\n    }), \"\\n\", _jsx(Examples.WithSteps, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { Input, Slider, Card, Flex } from '@dnb/eufemia/src'\nimport {\n  Form,\n  StepsLayout,\n  Field,\n  Value,\n  FieldBlock,\n  useDataValue,\n  DataContext,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport const CreateBasicFieldComponent = () => {\n  return (\n    <ComponentBox\n      scope={{\n        useDataValue,\n      }}\n      hideCode\n    >\n      {() => {\n        const MyCustomField = (props) => {\n          const fromInput = React.useCallback(({ value }) => value, [])\n\n          const preparedProps = {\n            ...props,\n            fromInput,\n            validator: (value) => {\n              return value === 'secret'\n                ? new Error('Do not reveal the secret!')\n                : undefined\n            },\n          }\n\n          const {\n            id,\n            info,\n            warning,\n            error,\n            value,\n            handleChange,\n            handleFocus,\n            handleBlur,\n          } = useDataValue(preparedProps)\n\n          return (\n            <FieldBlock\n              forId={id}\n              label=\"What is the secret of the custom field?\"\n              info={info}\n              warning={warning}\n              error={error}\n            >\n              <Input\n                id={id}\n                value={value}\n                on_change={handleChange}\n                on_focus={handleFocus}\n                on_blur={handleBlur}\n              />\n            </FieldBlock>\n          )\n        }\n\n        return (\n          <MyCustomField\n            value=\"Nothing to see here\"\n            onChange={(value) => console.log('onChange', value)}\n          />\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const GettingStarted = () => {\n  return (\n    <ComponentBox hideCode>\n      {() => {\n        const existingData = {\n          companyName: 'DNB',\n          companyOrganizationNumber: '123456789',\n          postalAddressSelect: 'companyAddress',\n        }\n\n        function Component() {\n          const { data } = Form.useData('company-form')\n          console.log('State:', data)\n\n          return (\n            <Form.Handler\n              id=\"company-form\"\n              data={existingData}\n              onChange={console.log}\n              onSubmit={console.log}\n            >\n              <Flex.Stack>\n                <Form.MainHeading>Bedrift</Form.MainHeading>\n                <Card spacing=\"medium\">\n                  <Field.String\n                    path=\"/companyName\"\n                    label=\"Bedriftens navn\"\n                    required\n                  />\n                  <Field.OrganizationNumber\n                    path=\"/companyOrganizationNumber\"\n                    required\n                  />\n                  <Field.Selection\n                    path=\"/postalAddressSelect\"\n                    label=\"Ønsket sted for tilsendt post\"\n                    variant=\"radio\"\n                  >\n                    <Field.Option\n                      value=\"companyAddress\"\n                      title=\"Samme som forretningsadresse\"\n                    />\n                    <Field.Option value=\"other\" title=\"Annet\" />\n                  </Field.Selection>\n                </Card>\n                <Form.ButtonRow>\n                  <Form.SubmitButton />\n                </Form.ButtonRow>\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <Component />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const CreateComposedFieldComponent = () => {\n  return (\n    <ComponentBox\n      scope={{\n        DataContext,\n        useDataValue,\n      }}\n      hideCode\n    >\n      {() => {\n        const MyComposedField = (props) => {\n          const birthYear = useDataValue({\n            path: '/birthYear',\n          })\n\n          const handleBirthYearChange = React.useCallback(\n            (sliderData) => {\n              birthYear.handleChange(sliderData.value)\n            },\n            [birthYear],\n          )\n\n          return (\n            <FieldBlock label={props.label ?? 'Name and age'}>\n              <Flex.Horizontal>\n                <Field.String\n                  path=\"/firstName\"\n                  label=\"First name\"\n                  width=\"medium\"\n                  minLength={2}\n                />\n                <Field.String\n                  path=\"/lastName\"\n                  label=\"Last name\"\n                  width=\"medium\"\n                  required\n                />\n                <FieldBlock width=\"large\">\n                  <Slider\n                    min={1900}\n                    max={new Date().getFullYear()}\n                    step={1}\n                    label=\"Birth year\"\n                    label_direction=\"vertical\"\n                    value={parseFloat(String(birthYear.value))}\n                    on_change={handleBirthYearChange}\n                    on_drag_start={birthYear.handleFocus}\n                    on_drag_end={birthYear.handleBlur}\n                    status={birthYear.error?.message}\n                    tooltip\n                  />\n                </FieldBlock>\n              </Flex.Horizontal>\n            </FieldBlock>\n          )\n        }\n\n        const data = {\n          firstName: 'John',\n          birthYear: 2000,\n        }\n\n        return (\n          <DataContext.Provider\n            data={data}\n            onChange={(data) => console.log('onChange', data)}\n          >\n            <MyComposedField label=\"My custom label\" />\n          </DataContext.Provider>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const BaseFieldComponents = () => {\n  return (\n    <ComponentBox\n      scope={{\n        StepsLayout,\n        Value,\n      }}\n    >\n      <Card stack>\n        <Field.String\n          label=\"Text field\"\n          value=\"Lorem Ipsum\"\n          onChange={(value) => console.log('onChange', value)}\n        />\n        <Field.Number\n          label=\"Number Field\"\n          value={789}\n          onChange={(value) => console.log('onChange', value)}\n        />\n        <Field.Boolean\n          label=\"Boolean Field\"\n          value={true}\n          onChange={(value) => console.log('onChange', value)}\n        />\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const FeatureFields = () => {\n  return (\n    <ComponentBox\n      scope={{\n        StepsLayout,\n        Value,\n      }}\n    >\n      <Card stack>\n        <Field.String label=\"Fornavn\" value=\"John\" />\n        <Field.String label=\"Etternavn\" value=\"Smith\" />\n        <Field.NationalIdentityNumber value=\"20058512345\" />\n        <Field.Email value=\"john@smith.email\" />\n        <Field.PhoneNumber value=\"+47 98765432\" />\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const LayoutComponents = () => {\n  return (\n    <ComponentBox\n      scope={{\n        StepsLayout,\n        Value,\n      }}\n    >\n      <Flex.Stack>\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Card stack>\n          <Form.SubHeading>Name</Form.SubHeading>\n\n          <Field.String label=\"Fornavn\" value=\"John\" />\n          <Field.String label=\"Etternavn\" value=\"Smith\" />\n        </Card>\n\n        <Card stack>\n          <Form.SubHeading>More information</Form.SubHeading>\n\n          <Field.NationalIdentityNumber value=\"20058512345\" />\n          <Field.Email value=\"john@smith.email\" />\n          <Field.PhoneNumber value=\"+47 98765432\" />\n        </Card>\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n\nexport const VisibilityBasedOnData = () => {\n  return (\n    <ComponentBox\n      scope={{\n        StepsLayout,\n        Value,\n      }}\n    >\n      <Form.Handler\n        data={{\n          firstName: undefined,\n          lastName: 'Smith',\n          advanced: false,\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Flex.Stack>\n          <Form.MainHeading>Profile</Form.MainHeading>\n\n          <Card stack>\n            <Form.SubHeading>Name</Form.SubHeading>\n\n            <Field.String path=\"/firstName\" label=\"Fornavn\" />\n            <Field.String path=\"/lastName\" label=\"Etternavn\" />\n          </Card>\n        </Flex.Stack>\n        <Field.Boolean\n          path=\"/advanced\"\n          variant=\"checkbox-button\"\n          label=\"More fields\"\n        />\n        <Form.Visibility pathTrue=\"/advanced\">\n          <Flex.Stack>\n            <Card stack>\n              <Form.SubHeading>More information</Form.SubHeading>\n\n              <Field.NationalIdentityNumber value=\"20058512345\" />\n              <Field.Email value=\"john@smith.email\" />\n              <Field.PhoneNumber value=\"+47 98765432\" />\n            </Card>\n          </Flex.Stack>\n        </Form.Visibility>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const UsingFormHandler = () => {\n  return (\n    <ComponentBox\n      scope={{\n        StepsLayout,\n        Value,\n      }}\n    >\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Smith',\n          ssn: '20058512345',\n          email: 'john@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Card stack>\n          <Field.String path=\"/firstName\" label=\"Fornavn\" />\n          <Field.String path=\"/lastName\" label=\"Etternavn\" />\n          <Field.NationalIdentityNumber path=\"/ssn\" />\n          <Field.Email path=\"/email\" />\n          <Field.PhoneNumber path=\"/phone\" />\n\n          <Form.ButtonRow>\n            <Form.SubmitButton />\n          </Form.ButtonRow>\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Validation = () => {\n  return (\n    <ComponentBox\n      scope={{\n        StepsLayout,\n        Value,\n      }}\n    >\n      <Form.Handler\n        data={{\n          firstName: undefined,\n          lastName: 'Smith',\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Card stack>\n          <Field.String path=\"/firstName\" label=\"Fornavn\" required />\n          <Field.String path=\"/lastName\" label=\"Etternavn\" required />\n          <Field.NationalIdentityNumber path=\"/ssn\" validateInitially />\n          <Field.Email path=\"/email\" validateInitially />\n          <Field.PhoneNumber path=\"/phone\" validateInitially />\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithSteps = () => {\n  return (\n    <ComponentBox\n      scope={{\n        StepsLayout,\n        Value,\n      }}\n    >\n      <Form.Handler\n        data={{\n          firstName: undefined,\n          lastName: 'Smith',\n          advanced: false,\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <StepsLayout mode=\"loose\">\n          <StepsLayout.Step title=\"Name\">\n            <Form.MainHeading>Profile</Form.MainHeading>\n\n            <Card stack>\n              <Form.SubHeading>Name</Form.SubHeading>\n\n              <Field.String path=\"/firstName\" label=\"Fornavn\" required />\n              <Field.String path=\"/lastName\" label=\"Etternavn\" required />\n            </Card>\n\n            <Form.ButtonRow>\n              <StepsLayout.NextButton />\n            </Form.ButtonRow>\n          </StepsLayout.Step>\n\n          <StepsLayout.Step title=\"More information\">\n            <Form.MainHeading>Profile</Form.MainHeading>\n\n            <Card stack>\n              <Form.SubHeading>More information</Form.SubHeading>\n\n              <Field.NationalIdentityNumber path=\"/ssn\" />\n              <Field.Email path=\"/email\" />\n              <Field.PhoneNumber path=\"/phone\" />\n            </Card>\n\n            <Form.ButtonRow>\n              <StepsLayout.PreviousButton />\n              <StepsLayout.NextButton />\n            </Form.ButtonRow>\n          </StepsLayout.Step>\n\n          <StepsLayout.Step title=\"Summary\">\n            <Form.MainHeading>Profile</Form.MainHeading>\n\n            <Card stack>\n              <Flex.Container>\n                <Value.String path=\"/firstName\" label=\"Fornavn\" />\n                <Value.String path=\"/lastName\" label=\"Etternavn\" />\n              </Flex.Container>\n\n              <Value.NationalIdentityNumber path=\"/ssn\" />\n              <Value.Email path=\"/email\" />\n              <Value.PhoneNumber path=\"/phone\" />\n            </Card>\n\n            <Form.ButtonRow>\n              <StepsLayout.PreviousButton />\n              <Form.SubmitButton />\n            </Form.ButtonRow>\n          </StepsLayout.Step>\n        </StepsLayout>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","import React, { useContext, useMemo } from 'react'\nimport pointer from 'json-pointer'\nimport type { ComponentProps } from '../../types'\nimport Context from '../Context'\n\nexport type Props = ComponentProps & {\n  /** JSON Pointer for where in the source dataset to point at in sub components */\n  path?: string\n  iterate?: boolean\n  children?: React.ReactNode\n}\n\nfunction At(props: Props) {\n  const { path = '/', iterate, children } = props\n  const dataContext = useContext(Context)\n  const { data: contextData, handlePathChange: contextHandlePathChange } =\n    dataContext\n\n  const data =\n    contextData && pointer.has(contextData, path)\n      ? pointer.get(contextData, path)\n      : undefined\n\n  const handlePathChange = useMemo(\n    () =>\n      contextHandlePathChange\n        ? (changePath, value) => {\n            contextHandlePathChange(`${path}${changePath}`, value)\n          }\n        : undefined,\n    [contextHandlePathChange, path]\n  )\n\n  if (iterate) {\n    if (!Array.isArray(data)) {\n      return null\n    }\n    return (\n      <>\n        {data.map((element, i) => {\n          const handlePathChange = contextHandlePathChange\n            ? (changePath, value) => {\n                contextHandlePathChange(`${path}/${i}${changePath}`, value)\n              }\n            : undefined\n\n          return (\n            <Context.Provider\n              key={`element${i}`}\n              value={{\n                ...dataContext,\n                data: element,\n                handlePathChange,\n              }}\n            >\n              {children}\n            </Context.Provider>\n          )\n        })}\n      </>\n    )\n  }\n\n  return (\n    <Context.Provider\n      value={{\n        ...dataContext,\n        data,\n        handlePathChange,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  )\n}\n\nAt._supportsSpacingProps = true\nexport default At\n","import React from 'react'\n\ninterface StepsContextState {\n  activeIndex: number\n  handlePrevious: () => void\n  handleNext: () => void\n}\n\nconst StepsContext = React.createContext<StepsContextState | undefined>(\n  undefined\n)\n\nexport default StepsContext\n","import React, { useContext } from 'react'\nimport classnames from 'classnames'\nimport { ComponentProps } from '../../types'\nimport {\n  Props as FlexContainerProps,\n  pickFlexContainerProps,\n} from '../../../../components/flex/Container'\nimport StepsContext from '../StepsContext'\nimport Flex from '../../../../components/flex/Flex'\n\nexport type Props = ComponentProps &\n  FlexContainerProps & {\n    index?: number\n    title?: string\n  }\n\nfunction Step(props: Props) {\n  const { className, index, children } = props\n  const stepsContext = useContext(StepsContext)\n\n  if (stepsContext?.activeIndex !== index) {\n    // Another step is active\n    return null\n  }\n\n  return (\n    <Flex.Container\n      className={classnames('dnb-forms-step', className)}\n      direction=\"vertical\"\n      {...pickFlexContainerProps(props)}\n    >\n      {children}\n    </Flex.Container>\n  )\n}\n\nStep._supportsSpacingProps = true\nexport default Step\n","import React, { useContext } from 'react'\nimport classnames from 'classnames'\nimport type { ComponentProps } from '../../types'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/button/Button'\nimport SharedContext from '../../../../shared/Context'\nimport StepsContext from '../StepsContext'\nimport ButtonRow from '../../Form/ButtonRow'\n\nexport type Props = ComponentProps &\n  ButtonProps & {\n    children?: string\n  }\n\nfunction NextButton(props: Props) {\n  const sharedContext = useContext(SharedContext)\n  const {\n    className,\n    variant = 'primary',\n    icon_position = 'right',\n    icon = 'chevron_right',\n    children = sharedContext?.translation.Forms.stepNext,\n  } = props\n  const stepsContext = useContext(StepsContext)\n\n  return (\n    <ButtonRow>\n      <Button\n        {...props}\n        className={classnames('dnb-forms-next-button', className)}\n        onClick={stepsContext?.handleNext}\n        variant={variant}\n        icon_position={icon_position}\n        icon={icon}\n      >\n        {children}\n      </Button>\n    </ButtonRow>\n  )\n}\n\nNextButton._supportsSpacingProps = true\nexport default NextButton\n","import React, { useContext } from 'react'\nimport classnames from 'classnames'\nimport type { ComponentProps } from '../../types'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/button/Button'\nimport SharedContext from '../../../../shared/Context'\nimport StepsContext from '../StepsContext'\nimport ButtonRow from '../../Form/ButtonRow'\n\nexport type Props = ComponentProps &\n  ButtonProps & {\n    children?: string\n  }\n\nfunction PreviousButton(props: Props) {\n  const sharedContext = useContext(SharedContext)\n  const {\n    className,\n    variant = 'tertiary',\n    icon_position = 'left',\n    icon = 'chevron_left',\n    children = sharedContext?.translation.Forms.stepPrevious,\n  } = props\n  const stepsContext = useContext(StepsContext)\n\n  return (\n    <ButtonRow>\n      <Button\n        {...props}\n        className={classnames('dnb-forms-previous-button', className)}\n        onClick={stepsContext?.handlePrevious}\n        variant={variant}\n        icon_position={icon_position}\n        icon={icon}\n      >\n        {children}\n      </Button>\n    </ButtonRow>\n  )\n}\n\nPreviousButton._supportsSpacingProps = true\nexport default PreviousButton\n","import React from 'react'\nimport classnames from 'classnames'\nimport { ComponentProps } from '../../types'\nimport ButtonRow from '../../Form/ButtonRow'\nimport NextButton from '../NextButton'\nimport PreviousButton from '../PreviousButton'\n\nexport type Props = ComponentProps & {\n  children?: string\n}\n\nfunction Buttons(props: Props) {\n  const { className } = props\n  return (\n    <ButtonRow\n      className={classnames('dnb-forms-buttons', className)}\n      {...props}\n    >\n      <PreviousButton />\n      <NextButton />\n    </ButtonRow>\n  )\n}\n\nButtons._supportsSpacingProps = true\nexport default Buttons\n","import React, { useContext, useState, useCallback } from 'react'\nimport classnames from 'classnames'\nimport { Space, StepIndicator } from '../../../components'\nimport { warn } from '../../../shared/component-helper'\nimport { ComponentProps } from '../types'\nimport DataContext from '../DataContext/Context'\nimport Step, { Props as StepProps } from './Step'\nimport StepsContext from './StepsContext'\nimport NextButton from './NextButton'\nimport PreviousButton from './PreviousButton'\nimport Buttons from './Buttons'\nimport Provider from '../DataContext/Provider'\nimport useId from '../hooks/useId'\n\nexport type Props = ComponentProps & {\n  id?: string\n  mode?: 'static' | 'strict' | 'loose'\n  scrollTopOnStepChange?: boolean\n  initialActiveIndex?: number\n  onStepChange?: (index: number) => void\n  children: React.ReactNode\n  variant?: 'sidebar' | 'drawer'\n  noAnimation?: boolean\n  sidebarId?: string\n}\n\nfunction StepsLayout(props: Props) {\n  const {\n    className,\n    id: _id,\n    mode = 'strict',\n    scrollTopOnStepChange,\n    initialActiveIndex = 0,\n    onStepChange,\n    children,\n    noAnimation = true,\n    variant = 'sidebar',\n    sidebarId,\n    ...rest\n  } = props\n  const dataContext = useContext(DataContext)\n  const { hasContext, hasErrors, setShowAllErrors, scrollToTop } =\n    dataContext\n\n  const [activeIndex, setActiveIndex] =\n    useState<number>(initialActiveIndex)\n\n  const id = useId(_id)\n\n  const handlePrevious = useCallback(() => {\n    setActiveIndex((activeIndex) => {\n      onStepChange?.(activeIndex - 1)\n      return activeIndex - 1\n    })\n    if (scrollTopOnStepChange) {\n      scrollToTop()\n    }\n  }, [scrollTopOnStepChange, onStepChange, scrollToTop])\n\n  const handleNext = useCallback(() => {\n    if (!hasErrors()) {\n      setActiveIndex((activeIndex) => {\n        onStepChange?.(activeIndex + 1)\n        return activeIndex + 1\n      })\n      if (scrollTopOnStepChange) {\n        scrollToTop()\n      }\n    } else {\n      setShowAllErrors(true)\n    }\n  }, [\n    hasErrors,\n    scrollTopOnStepChange,\n    onStepChange,\n    scrollToTop,\n    setShowAllErrors,\n  ])\n\n  const stepIndicatorData = React.Children.map(children, (child) => {\n    if (!React.isValidElement(child) || child.type !== Step) {\n      throw new Error('Only Step can be children of StepsLayout')\n    }\n    return child.props.title ?? 'Title missing'\n  }) as string[]\n\n  const handleChange = useCallback(({ current_step }) => {\n    setActiveIndex(current_step)\n  }, [])\n\n  if (!hasContext) {\n    warn('You may wrap StepsLayout in Form.Handler')\n    return (\n      <Provider>\n        <StepsLayout {...props} id={id} />\n      </Provider>\n    )\n  }\n\n  return (\n    <StepsContext.Provider\n      value={{\n        activeIndex,\n        handlePrevious,\n        handleNext,\n      }}\n    >\n      <Space\n        className={classnames(\n          'dnb-forms-steps-layout',\n          variant === 'drawer' && 'dnb-forms-steps-layout--drawer',\n          className\n        )}\n        {...rest}\n      >\n        <aside className=\"dnb-forms-steps-layout__sidebar\">\n          <StepIndicator.Sidebar sidebar_id={id} />\n          <StepIndicator\n            bottom\n            current_step={activeIndex}\n            data={stepIndicatorData}\n            mode={mode}\n            no_animation={noAnimation}\n            on_change={handleChange}\n            sidebar_id={\n              variant === 'drawer' && !sidebarId\n                ? ''\n                : sidebarId\n                ? sidebarId\n                : id\n            }\n          />\n        </aside>\n        <div className=\"dnb-forms-steps-layout__contents\">\n          {React.Children.map(children, (child, i) => {\n            if (React.isValidElement(child) && child.type === Step) {\n              return React.cloneElement(\n                child as React.ReactElement<StepProps>,\n                {\n                  index: i,\n                }\n              )\n            }\n            return child\n          })}\n        </div>\n      </Space>\n    </StepsContext.Provider>\n  )\n}\n\nStepsLayout._supportsSpacingProps = true\n\nStepsLayout.Step = Step\nStepsLayout.NextButton = NextButton\nStepsLayout.PreviousButton = PreviousButton\nStepsLayout.Buttons = Buttons\n\nexport default StepsLayout\n","import StepsLayout from './StepsLayout'\nexport { default as StepsContext } from './StepsContext'\n\nexport default StepsLayout\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","h3","p","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","children","_jsx","id","component","Error","wrapper","MDXLayout","CreateBasicFieldComponent","ComponentBox","scope","useDataValue","hideCode","noInline","GettingStarted","CreateComposedFieldComponent","DataContext","BaseFieldComponents","StepsLayout","Value","FeatureFields","LayoutComponents","VisibilityBasedOnData","UsingFormHandler","Validation","WithSteps","At","path","iterate","dataContext","useContext","Context","data","contextData","handlePathChange","contextHandlePathChange","pointer","undefined","useMemo","changePath","value","Array","isArray","map","element","i","Provider","_supportsSpacingProps","StepsContext","React","Step","className","index","stepsContext","activeIndex","Flex","classnames","direction","pickFlexContainerProps","NextButton","sharedContext","SharedContext","variant","icon_position","icon","translation","Forms","stepNext","ButtonRow","Button","onClick","handleNext","PreviousButton","stepPrevious","handlePrevious","Buttons","_id","mode","scrollTopOnStepChange","initialActiveIndex","onStepChange","noAnimation","sidebarId","rest","hasContext","hasErrors","setShowAllErrors","scrollToTop","setActiveIndex","useState","useId","useCallback","stepIndicatorData","child","_child$props$title","type","title","handleChange","_ref","current_step","Space","StepIndicator","Sidebar","sidebar_id","bottom","no_animation","on_change","warn"],"sourceRoot":""}