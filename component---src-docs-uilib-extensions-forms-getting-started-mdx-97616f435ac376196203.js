"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[65783,73176,96124,55310],{72945:function(n,e,a){a.r(e);var r=a(52322),t=a(45392);function i(n){const e=Object.assign({pre:"pre",code:"code"},(0,t.ah)(),n.components);return(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"// Async event handler\nconst onChange = debounceAsync(async function (data) {\n  try {\n    await makeRequest(data)\n  } catch (error) {\n    return error\n  }\n\n  // Optionally, you can return an object with these keys, depending your needs\n  return {\n    info: 'Info message',\n    warning: 'Warning message',\n\n    // and either an error\n    error: new Error('Error message'),\n\n    // or success (when used for autosave)\n    success: 'saved',\n  } as const\n})\n"})})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(i,n)})):i(n)}},99201:function(n,e,a){a.r(e);var r=a(52322),t=a(45392);function i(n){const e=Object.assign({p:"p",pre:"pre",code:"code"},(0,t.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:"In all async operations, you can simply return an error object to display it in the form or influence the form behavior."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\n// Async function\nconst onSubmit = async (data) => {\n  try {\n    const response = await fetch('https://api.example.com', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    })\n    const data = await response.json()\n\n    Form.setData('unique-id', data) // Whatever you want to do with the data\n  } catch (error) {\n    return error // Will display the error message in the form\n  }\n\n  // Optionally, you can return an object with these keys, depending your needs\n  return {\n    info: 'Info message',\n    warning: 'Warning message',\n\n    // Force the form to stay in pending state\n    status: 'pending',\n\n    // and either an error\n    error: new Error('Error message'),\n  } as const\n}\n\nfunction Component() {\n  return (\n    <Form.Handler id=\"unique-id\" onSubmit={onSubmit}>\n      ...\n    </Form.Handler>\n  )\n}\n"})})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(i,n)})):i(n)}},9947:function(n,e,a){a.r(e);var r=a(52322),t=a(45392),i=a(94929),o=a(57295),s=(a(99201),a(72945));function l(n){const e=Object.assign({h1:"h1",p:"p",strong:"strong",ul:"ul",li:"li",a:"a",h3:"h3",code:"code",pre:"pre",h4:"h4",h5:"h5",h2:"h2"},(0,t.ah)(),n.components);return i||d("Examples",!1),i.GettingStarted||d("Examples.GettingStarted",!0),i.Transformers||d("Examples.Transformers",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{children:"Getting started"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Table of Contents"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#getting-started",children:"Getting started"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#creating-forms",children:"Creating forms"})}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#state-management",children:"State management"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#what-is-a-json-pointer",children:"What is a JSON Pointer?"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#data-handling",children:"Data handling"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#visible-data",children:"Visible data"})}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#filter-data",children:"Filter data"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#filter-data-during-submit",children:"Filter data during submit"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#transforming-data",children:"Transforming data"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#complex-objects-in-the-data-context",children:"Complex objects in the data context"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#async-form-handling",children:"Async form handling"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#field-components",children:"Field components"})}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#value-components",children:"Value components"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#inherit-visibility-from-fields",children:"Inherit visibility from fields"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#conditionally-display-content",children:"Conditionally display content"})}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#async-form-behavior",children:"Async form behavior"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#onchange-and-autosave",children:"onChange and autosave"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#async-field-validation",children:"Async field validation"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#validation-and-error-handling",children:"Validation and error handling"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#summary-for-errors",children:"Summary for errors"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#required",children:"required"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#pattern",children:"pattern"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#schema",children:"schema"})}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#onblurvalidator-and-validator",children:"onBlurValidator and validator"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#connect-with-another-field",children:"Connect with another field"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#async-validation",children:"Async validation"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#async-validator-with-debounce",children:"Async validator with debounce"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"#localization-and-translation",children:"Localization and translation"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#customize-translations",children:"Customize translations"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#how-to-customize-translations-in-a-form",children:"How to customize translations in a form"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#use-the-shared-provider-to-customize-translations",children:"Use the shared Provider to customize translations"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#layout",children:"Layout"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#best-practices",children:"Best practices"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#create-your-own-component",children:"Create your own component"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(o.default,{}),"\n",(0,r.jsx)(e.h3,{children:"Creating forms"}),"\n",(0,r.jsxs)(e.p,{children:["To build an entire form, there are surrounding components such as form ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Handler",children:"Handler"})," and ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Wizard/Container",children:"Wizard.Container"})," that make data flow and layout easier and save you a lot of extra code, without compromising flexibility."]}),"\n",(0,r.jsxs)(e.p,{children:["The needed styles are included in the Eufemia core package via ",(0,r.jsx)(e.code,{children:"dnb-ui-components"}),"."]}),"\n",(0,r.jsx)(e.h3,{children:"State management"}),"\n",(0,r.jsxs)(e.p,{children:["While you can use a controlled method of handling the sate of fields or your form, it is recommended to use a declarative approach, where you keep the state of your form inside the data context, instead of pulling it out via your own ",(0,r.jsx)(e.code,{children:"useState"})," hooks (imperative)."]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["You don't need React ",(0,r.jsx)(e.strong,{children:"useState"})," to handle your form data."]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"So how does that work?"}),"\n",(0,r.jsxs)(e.p,{children:["Lets say you have a form with a ",(0,r.jsx)(e.code,{children:"name"})," field. In order to tell e.g. the ",(0,r.jsx)(e.code,{children:"onSubmit"})," event what the data structure is, you define a declaration (",(0,r.jsx)(e.code,{children:"path"}),") about it right on the field itself:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'<Field.String path="/name" />\n'})}),"\n",(0,r.jsxs)(e.p,{children:["Why call it ",(0,r.jsx)(e.code,{children:"path"}),"?"]}),"\n",(0,r.jsx)(e.p,{children:"Because it can describe the structure of the data in several layers deep:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'<Field.String path="/user/name" />\n'})}),"\n",(0,r.jsx)(e.p,{children:"Which results in the following data structure:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"{\n  user: {\n    name: 'Hanna'\n  }\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["This is called a ",(0,r.jsx)(e.a,{href:"#what-is-a-json-pointer",children:"JSON Pointer"}),", which is a standardized way of pointing to a specific part of a JavaScript/JSON object."]}),"\n",(0,r.jsx)(e.p,{children:"These JSON pointers are used to both read and write data, and is also used to validate the form data."}),"\n",(0,r.jsx)(e.h4,{children:"What is a JSON Pointer?"}),"\n",(0,r.jsxs)(e.p,{children:["A ",(0,r.jsx)(e.a,{href:"https://datatracker.ietf.org/doc/html/draft-ietf-appsawg-json-pointer-03",children:"JSON Pointer"})," is a string of tokens separated by ",(0,r.jsx)(e.code,{children:"/"})," characters, these tokens either specify keys in objects or indexes in arrays."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const data = {\n  foo: {\n    bar: [\n      {\n        baz: 'value',\n      },\n    ],\n  },\n}\nconst pointer = '/foo/bar/0/baz' // points to 'value'\n"})}),"\n",(0,r.jsx)(e.h4,{children:"Data handling"}),"\n",(0,r.jsx)(e.p,{children:"How do I handle complex data logic?"}),"\n",(0,r.jsxs)(e.p,{children:["You can show or hide parts of your form based on your own logic. This is done by using the ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Visibility/",children:"Visibility"})," component (yes, it even can animate the visibility)."]}),"\n",(0,r.jsxs)(e.p,{children:["And you can access and modify your form data with ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/useData/",children:"useData"})," or ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/getData/",children:"getData"})," or even ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/setData/",children:"setData"}),"."]}),"\n",(0,r.jsx)(e.p,{children:"Here is an example of how to use these methods:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nfunction MyForm() {\n  return (\n    <Form.Handler id=\"unique-id\">\n      <MyComponent />\n    </Form.Handler>\n  )\n}\n\nfunction MyComponent() {\n  const {\n    getValue,\n    update,\n    remove,\n    set,\n    data,\n    filterData,\n    reduceToVisibleFields,\n  } = Form.useData() // optionally provide an id (unique-id)\n}\n\n// You can also use the setData:\nForm.setData('unique-id', { companyName: 'DNB' })\n\n// ... and the getData – method when ever you need to:\nconst { getValue, data, filterData, reduceToVisibleFields } =\n  Form.getData('unique-id')\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"getValue"})," will return the value of the given path."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"update"})," will update the value of the given path."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"remove"})," will remove the given path from the data context (fields will reapply their values afterwards)."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"set"})," will set the whole dataset."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"data"})," will return the whole dataset (unvalidated)."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"filterData"})," will filter the data based on your own logic."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"reduceToVisibleFields"})," will reduce the given data set to only contain the visible fields (mounted fields)."]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["As you can see in the code above, you can even handle the state outside the ",(0,r.jsx)(e.code,{children:"Form.Handler"})," context. You find more details on this topic in the ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/useData/",children:"useData"})," documentation."]}),"\n",(0,r.jsx)(i.GettingStarted,{}),"\n",(0,r.jsx)(e.h4,{children:"Visible data"}),"\n",(0,r.jsxs)(e.p,{children:["User entered data will always be stored internally in the data context, even if a ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/all-fields/",children:"Field"})," is temporarily shown (mounted/unmounted)."]}),"\n",(0,r.jsx)(e.p,{children:"When submitting data to the server, you might want to exclude data that has been hidden (unmounted) by the user. You have two built-in options to achieve this:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["You can use the ",(0,r.jsx)(e.code,{children:"reduceToVisibleFields"})," function to get only the data of visible (mounted) fields. Check out the ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Handler/demos/#visible-data",children:"example"})," in the demo section."]}),"\n",(0,r.jsxs)(e.li,{children:["Or you may use the ",(0,r.jsx)(e.code,{children:"filterData"})," function to filter your data. More details in the next section."]}),"\n"]}),"\n",(0,r.jsx)(e.h4,{children:"Filter data"}),"\n",(0,r.jsxs)(e.p,{children:["In this section we will show how to filter out some data based on your own logic. You can filter data by any given criteria. This is done by utilizing the ",(0,r.jsx)(e.code,{children:"filterData"})," method from e.g.:"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/useData/#filter-data",children:"useData"})," hook."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/getData/#filter-data",children:"getData"})," method."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Visibility/#filter-data",children:"Visibility"})," component."]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"You can provide either a function handler or an object with the paths (JSON Pointer) you want to filter out."}),"\n",(0,r.jsxs)(e.p,{children:["Return ",(0,r.jsx)(e.code,{children:"false"})," to exclude an entry."]}),"\n",(0,r.jsx)(e.p,{children:"Here is an example of how to filter data outlining the different ways to filter data:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"// 1. Method – by using paths (JSON Pointer)\nconst filterDataPaths = {\n  '/foo': ({ value, data, props, internal }) => value !== 'bar',\n  '/foo': false, // Will exclude the field with the path \"/foo\"\n  '/array/0': false, // Will exclude the first item of the array\n  '/array/*/objectKey': false, // Will exclude all objects inside the array with a key of \"objectKey\"\n}\n\n// 2. Method – by using a handler.\n// It will iterate over all fields regardless what path they have.\nconst filterDataHandler = ({ path, value, data, props, internal }) =>\n  value !== 'bar'\n\nconst MyComponent = () => {\n  const { filterData } = Form.useData()\n  const filteredDataA = filterData(filterDataPaths)\n  const filteredDataB = filterData(filterDataHandler)\n  console.log(filteredDataA)\n  console.log(filteredDataB)\n\n  return <Field.String path=\"/foo\" />\n}\n\nrender(\n  <Form.Handler>\n    <MyComponent />\n  </Form.Handler>,\n)\n"})}),"\n",(0,r.jsxs)(e.p,{children:["You may check out an ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/useData/#filter-your-data",children:"interactive example"})," of how to filter data."]}),"\n",(0,r.jsx)(e.h5,{children:"Filter data during submit"}),"\n",(0,r.jsxs)(e.p,{children:["For filtering data during form submit (",(0,r.jsx)(e.code,{children:"onSubmit"}),"), you can use the ",(0,r.jsx)(e.code,{children:"filterData"})," method given as a parameter to the ",(0,r.jsx)(e.code,{children:"onSubmit"})," event callback:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'const onSubmit = (data, { filterData }) => {\n  // Same method as in the previous example\n  const filteredDataA = filterData(filterDataPaths)\n  const filteredDataB = filterData(filterDataHandler)\n  console.log(filteredDataA)\n  console.log(filteredDataB)\n}\n\nrender(\n  <Form.Handler onSubmit={onSubmit}>\n    <Field.String path="/foo" />\n  </Form.Handler>,\n)\n'})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Handler/",children:"Form.Handler"})}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["You may check out an ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Handler/demos/#filter-your-data",children:"interactive example"})," of how to filter data during the submit event."]}),"\n",(0,r.jsx)(e.h4,{children:"Transforming data"}),"\n",(0,r.jsxs)(e.p,{children:["Each ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/all-fields/",children:"field"})," and ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Value/",children:"value"})," component supports transformer functions. These functions allow you to transform a value before it is processed into the form data object and vice versa:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'<Field.String\n  path="/myField"\n  transformIn={transformIn}\n  transformOut={transformOut}\n/>\n'})}),"\n",(0,r.jsx)(e.p,{children:"This allows you to show a value in a different format than it is stored in the form data object."}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"transformIn"})," (in to the field or value) transforms the internal value before it is displayed."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"transformOut"})," (out of the field) transforms the internal value before it gets forwarded to the data context or returned as e.g. the ",(0,r.jsx)(e.code,{children:"onChange"})," value parameter."]}),"\n"]}),"\n",(0,r.jsx)(i.Transformers,{}),"\n",(0,r.jsx)(e.h5,{children:"Complex objects in the data context"}),"\n",(0,r.jsx)(e.p,{children:"If you need to store complex objects in the data context instead of simple values like strings, numbers, or booleans, you can use transformer functions."}),"\n",(0,r.jsxs)(e.p,{children:["Suppose you want to store a country object instead of just a country code like ",(0,r.jsx)(e.code,{children:"NO"})," or ",(0,r.jsx)(e.code,{children:"SV"})," when using ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/feature-fields/SelectCountry/",children:"Field.SelectCountry"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:["You can achieve this by using the ",(0,r.jsx)(e.code,{children:"transformIn"})," and ",(0,r.jsx)(e.code,{children:"transformOut"})," functions:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'import { Field } from \'@dnb/eufemia/extensions/forms\'\n\nconst transformOut = (value, country) => {\n  if (value) {\n    return country\n  }\n}\nconst transformIn = (country) => {\n  return country?.iso\n}\n\nconst MyForm = () => {\n  return (\n    <Form.Handler>\n      <Field.SelectCountry\n        path="/country"\n        transformIn={transformIn}\n        transformOut={transformOut}\n        defaultValue="NO"\n      />\n\n      <Value.SelectCountry path="/country" transformIn={transformIn} />\n    </Form.Handler>\n  )\n}\n'})}),"\n",(0,r.jsx)(e.h3,{children:"Async form handling"}),"\n",(0,r.jsx)(e.p,{children:"It depends on your use case if this feature is needed. But when it is, its ofter a time consuming task to implement. Eufemia Forms has therefor a built-in feature that enables async form behavior."}),"\n",(0,r.jsxs)(e.p,{children:["More details about the async form behavior can be found in the ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/getting-started/#async-form-behavior",children:"async form behavior"})," section."]}),"\n",(0,r.jsx)(e.h3,{children:"Field components"}),"\n",(0,r.jsxs)(e.p,{children:["In short, field components are interactive components that the user can interact with. Read more about fields in the ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/about-fields/",children:"What are fields?"})," section."]}),"\n",(0,r.jsx)(e.h3,{children:"Value components"}),"\n",(0,r.jsxs)(e.p,{children:["Beside the interactive ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/all-fields/",children:"Field"})," components, there is also the static ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Value/",children:"Value"})," components. Use these to show summaries or read-only parts of your application with benefits such as linking to source data and standardized formatting based on the type of data to be displayed."]}),"\n",(0,r.jsx)(e.h4,{children:"Inherit visibility from fields"}),"\n",(0,r.jsxs)(e.p,{children:["User entered data will always be stored internally in the data context, even if a ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/all-fields/",children:"Field"})," is temporarily shown (mounted/unmounted)."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"Value.*"})," components will render the value regardless of the visibility of the field."]}),"\n",(0,r.jsxs)(e.p,{children:["You can use the ",(0,r.jsx)(e.code,{children:"inheritVisibility"})," property on the ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Value/",children:"Value.*"})," components to inherit the visibility from the field with the same path."]}),"\n",(0,r.jsx)(e.h3,{children:"Conditionally display content"}),"\n",(0,r.jsxs)(e.p,{children:["You can conditionally display content using the ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Visibility/",children:"Form.Visibility"})," component. This allows you to show or hide its children based on the validation (A.) or the value (B.) of another path (data entry)."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"<Form.Visibility\n  animate\n  visibleWhen={{\n    path: '/myField',\n    hasValue: (value) => value === 'foo', // A. Value based\n    isValid: true, // B. Validation based\n  }}\n>\n  <Field.String path=\"/myField\" />\n</Form.Visibility>\n"})}),"\n",(0,r.jsx)(e.h3,{children:"Async form behavior"}),"\n",(0,r.jsx)(e.p,{children:"This feature allows you to perform asynchronous operations such as fetching data from an API – without additional state management."}),"\n",(0,r.jsxs)(e.p,{children:["You can enable async form submit behavior on the form ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Handler",children:"Handler"})," by using:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"<Form.Handler onSubmit={async () => {}}>...</Form.Handler>\n"})}),"\n",(0,r.jsxs)(e.p,{children:["It will disable all fields and show an indicator on the ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/SubmitButton/",children:"SubmitButton"})," while the ",(0,r.jsx)(e.strong,{children:"form"})," is pending (",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Handler/demos/",children:"examples"}),")."]}),"\n",(0,r.jsxs)(e.p,{children:["When using ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Wizard/Container/",children:"Wizard.Container"})," you can use in addition:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"<Wizard.Container onStepChange={async () => {}}>...</Wizard.Container>\n"})}),"\n",(0,r.jsxs)(e.p,{children:["It will disable all fields and show an indicator on the ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Wizard/Buttons/",children:"NextButton"})," while the ",(0,r.jsx)(e.strong,{children:"step"})," is pending (",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Wizard/Container/demos/",children:"examples"}),")."]}),"\n",(0,r.jsx)(e.h4,{children:"onChange and autosave"}),"\n",(0,r.jsxs)(e.p,{children:["You can use an async function for the ",(0,r.jsx)(e.code,{children:"onChange"})," event handler, either on the form ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Handler",children:"Handler"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"<Form.Handler onChange={async () => {}}>...</Form.Handler>\n"})}),"\n",(0,r.jsxs)(e.p,{children:["or on every ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/all-fields/",children:"field"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'<Field.PhoneNumber path="/myField" onChange={async () => {}} />\n'})}),"\n",(0,r.jsxs)(e.p,{children:["They can be used in combination as well – including ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/getting-started/#async-validation",children:"async validator"})," functions."]}),"\n",(0,r.jsx)(e.p,{children:"When the user makes a value change, it will show an indicator on the corresponding field label."}),"\n",(0,r.jsx)(e.p,{children:"This feature can not only be used for autosave, but for any other real-time async operations."}),"\n",(0,r.jsx)(e.p,{children:"Here is an example of an async change behavior:"}),"\n",(0,r.jsx)(s.default,{}),"\n",(0,r.jsxs)(e.p,{children:["More info about the async change behavior in the form ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Handler/info/#async-onchange-and-onsubmit-event-handlers",children:"Handler"})," section."]}),"\n",(0,r.jsx)(e.h4,{children:"Async field validation"}),"\n",(0,r.jsxs)(e.p,{children:["A similar indicator behavior will occur when using async functions for field validation, such as ",(0,r.jsx)(e.code,{children:"validator"})," or ",(0,r.jsx)(e.code,{children:"onBlurValidation"}),", your form will exhibit async behavior. This means that the validation needs to be successfully completed before the form can be submitted."]}),"\n",(0,r.jsx)(e.h3,{children:"Validation and error handling"}),"\n",(0,r.jsx)(e.p,{children:"Every field component has a built-in validation that is based on the type of data it handles. This validation is automatically applied to the field when the user interacts with it. The validation is also applied when the user submits the form."}),"\n",(0,r.jsxs)(e.p,{children:["In addition, you can add your own validation to a field component. This is done by adding a ",(0,r.jsx)(e.code,{children:"required"}),", ",(0,r.jsx)(e.code,{children:"pattern"}),", ",(0,r.jsx)(e.code,{children:"schema"})," or ",(0,r.jsx)(e.code,{children:"validator"})," property."]}),"\n",(0,r.jsxs)(e.p,{children:["Fields which have the ",(0,r.jsx)(e.code,{children:"disabled"})," property or the ",(0,r.jsx)(e.code,{children:"readOnly"})," property, will skip validation."]}),"\n",(0,r.jsxs)(e.p,{children:["For monitoring and setting your form errors, you can use the ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/useValidation",children:"useValidation"})," hook."]}),"\n",(0,r.jsx)(e.h4,{children:"Summary for errors"}),"\n",(0,r.jsx)(e.p,{children:"To improve user experience communication regarding errors and their locations, WCAG/UU suggests summarizing error messages when errors have occurred."}),"\n",(0,r.jsxs)(e.p,{children:["Eufemia Forms will easily link up with the ",(0,r.jsx)(e.a,{href:"/uilib/components/global-status",children:"GlobalStatus"})," component and will only display it if there are errors or when the form is being submitted."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"<GlobalStatus />\n\n<Form.Handler >\n  My Form\n</Form.Handler>\n"})}),"\n",(0,r.jsxs)(e.p,{children:["If you need a custom unique ID, you can just assign ",(0,r.jsx)(e.code,{children:"globalStatusId"})," to the ",(0,r.jsx)(e.code,{children:"Form.Handler"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'<GlobalStatus id="my-form-status" />\n\n<Form.Handler globalStatusId="my-form-status">\n  My Form\n</Form.Handler>\n'})}),"\n",(0,r.jsx)(e.h4,{children:"required"}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.code,{children:"required"})," property is a boolean that indicates whether the field is required or not:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"<Field.PhoneNumber required />\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Note:"})," You can use the ",(0,r.jsx)(e.code,{children:"required"})," property on the ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Handler/",children:"Form.Handler"})," or ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Wizard/Step/",children:"Wizard.Step"})," components (",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Handler/demos/#required-and-optional-fields",children:"example"}),"). Additionally, the ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Section/",children:"Form.Section"})," component as well as the ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/feature-fields/Provider/",children:"Field.Provider"})," provider has a ",(0,r.jsx)(e.code,{children:"required"})," property, which will make all nested fields within that section required."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"<Form.Handler required>\n  <Field.PhoneNumber />\n  <Field.String />\n</Form.Handler>\n"})}),"\n",(0,r.jsxs)(e.p,{children:["When you need to opt-out of the required field validation, you can use the ",(0,r.jsx)(e.code,{children:"required={false}"}),' property. This will also add a "(optional)" suffix to the field label(',(0,r.jsx)(e.code,{children:"labelSuffix"}),")."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'<Form.Handler required>\n  <Field.String label="I\'m required" />\n  <Field.String label="I\'m not" required={false} />\n  <Field.Email required={false} labelSuffix="(recommended)" />\n</Form.Handler>\n'})}),"\n",(0,r.jsx)(e.h4,{children:"pattern"}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.code,{children:"pattern"})," property is a regular expression (RegExp) that the value of the field must match:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'<Field.PhoneNumber pattern="Your RegExp" />\n'})}),"\n",(0,r.jsx)(e.h4,{children:"schema"}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.code,{children:"schema"})," property is a JSON schema that the value of the field must match:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"const schema = {\n  /* AJV Schema */\n}\n<Field.PhoneNumber schema={schema} />\n"})}),"\n",(0,r.jsx)(e.h4,{children:"onBlurValidator and validator"}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.code,{children:"onBlurValidator"})," and ",(0,r.jsx)(e.code,{children:"validator"})," properties accepts a function that takes the current value of the field as an argument and returns an error message if the value is invalid:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"const onChangeValidator = (value) => {\n  const isInvalid = new RegExp('Your RegExp').test(value)\n  if (isInvalid) {\n    return new Error('Invalid value message')\n  }\n}\nrender(<Field.PhoneNumber validator={onChangeValidator} />)\n"})}),"\n",(0,r.jsxs)(e.p,{children:["You can find more info about error messages in the ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/error-messages/",children:"Error messages"})," docs."]}),"\n",(0,r.jsx)(e.h5,{children:"Connect with another field"}),"\n",(0,r.jsxs)(e.p,{children:["You can also use the ",(0,r.jsx)(e.code,{children:"connectWithPath"})," function to connect the validator to another field. This allows you to rerun the validator function once the value of the connected field changes:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'import { Form, Field } from \'@dnb/eufemia/extensions/forms\'\n\nconst onChangeValidator = (value, { connectWithPath }) => {\n  const { getValue } = connectWithPath(\'/myReference\')\n  const amount = getValue()\n  if (amount >= value) {\n    return new Error(`The amount should be greater than ${amount}`)\n  }\n}\n\nrender(\n  <Form.Handler>\n    <Field.Number path="/myReference" defaultValue={2} />\n\n    <Field.Number\n      path="/withValidator"\n      defaultValue={2}\n      validator={onChangeValidator} // NB: You may use "onBlurValidator" depending on use case.\n    />\n  </Form.Handler>,\n)\n'})}),"\n",(0,r.jsx)(e.p,{children:'By default, the validator function will only run when the "/withValidator" field is changed. When the error message is shown, it will update the message with the new value of the "/myReference" field.'}),"\n",(0,r.jsx)(e.p,{children:"You can also change this behavior by using the following properties:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"validateInitially"})," will run the validation initially."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"continuousValidation"})," will run the validation on every change, including when the connected field changes."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"validateUnchanged"})," will validate without any changes made by the user, including when the connected field changes."]}),"\n"]}),"\n",(0,r.jsx)(e.h5,{children:"Async validation"}),"\n",(0,r.jsx)(e.p,{children:"Async validation is also supported. The validator function can return a promise (async/await) that resolves to an error message."}),"\n",(0,r.jsxs)(e.p,{children:["In this example we use ",(0,r.jsx)(e.code,{children:"onBlurValidator"})," to only validate the field when the user leaves the field:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"const onChangeValidator = async (value) => {\n  try {\n    const isInvalid = await makeRequest(value)\n    if (isInvalid) {\n      return new Error('Invalid value') // Show this message below the field\n    }\n  } catch (error) {\n    return error\n  }\n}\nrender(<Field.PhoneNumber onBlurValidator={onChangeValidator} />)\n"})}),"\n",(0,r.jsx)(e.h5,{children:"Async validator with debounce"}),"\n",(0,r.jsxs)(e.p,{children:["While when using async validation on every keystroke, it's a good idea to debounce the validation function to avoid unnecessary requests. This can be done by using the ",(0,r.jsx)(e.a,{href:"/uilib/helpers/functions/#debounce",children:"debounceAsync"})," helper function:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import { debounceAsync } from '@dnb/eufemia/shared/helpers'\n\nconst onChangeValidator = debounceAsync(async function myValidator(value) {\n  try {\n    const isInvalid = await makeRequest(value)\n    if (isInvalid) {\n      return new Error('Invalid value') // Show this message below the field\n    }\n  } catch (error) {\n    return error\n  }\n})\nrender(<Field.PhoneNumber validator={onChangeValidator} />)\n"})}),"\n",(0,r.jsx)(e.h3,{children:"Localization and translation"}),"\n",(0,r.jsxs)(e.p,{children:["You can set the locale for your form by using the ",(0,r.jsx)(e.code,{children:"locale"})," property on the ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Handler/",children:"Form.Handler"})," component. This will ensure that the correct language is used for all the fields in your form."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nfunction MyForm() {\n  return (\n    <Form.Handler locale=\"en-GB\">\n      <Field.PhoneNumber />\n    </Form.Handler>\n  )\n}\n"})}),"\n",(0,r.jsx)(e.h4,{children:"Customize translations"}),"\n",(0,r.jsx)(e.p,{children:"You can customize the internal translations in a flat structure:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"{\n  'nb-NO': { 'PhoneNumber.label': 'Egendefinert' },\n  'en-GB': { 'PhoneNumber.label': 'Custom' },\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"or an object based structure:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"{\n  'nb-NO': { PhoneNumber: { label: 'Egendefinert' } },\n  'en-GB': { PhoneNumber: { label: 'Custom' } },\n}\n"})}),"\n",(0,r.jsx)(e.h4,{children:"How to customize translations in a form"}),"\n",(0,r.jsxs)(e.p,{children:["You can customize the translations in a form by using the ",(0,r.jsx)(e.code,{children:"translations"})," property on the ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Handler/",children:"Form.Handler"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:["Alternatively, you can use the global Eufemia ",(0,r.jsx)(e.a,{href:"/uilib/usage/customisation/localization/",children:"Provider"})," (example further down)."]}),"\n",(0,r.jsxs)(e.p,{children:["You can find all available strings/keys in the properties tab of each field component. You can have a look at the ",(0,r.jsx)(e.a,{href:"!/uilib/extensions/forms/feature-fields/PhoneNumber/properties/#translations",children:"PhoneNumber field"}),"."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import { Form, Field } from '@dnb/eufemia/extensions/forms'\n\nconst myTranslations = {\n  'nb-NO': { 'PhoneNumber.label': 'Egendefinert' },\n  'en-GB': { 'PhoneNumber.label': 'Custom' },\n}\n\nrender(\n  <Form.Handler translations={myTranslations}>\n    <Field.PhoneNumber />\n  </Form.Handler>,\n)\n"})}),"\n",(0,r.jsxs)(e.p,{children:["You can consume them with the ",(0,r.jsx)(e.code,{children:"useTranslation"})," hook:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import { Form, Field } from '@dnb/eufemia/extensions/forms'\nimport { useTranslation } from '@dnb/eufemia/shared'\n\nconst myTranslations = {\n  'nb-NO': { 'custom.string': 'Min egendefinerte streng' },\n  'en-GB': { 'custom.string': 'My custom string' },\n}\n\nconst MyComponent = () => {\n  const t = useTranslation<typeof myTranslations>()\n  return t.custom.string\n}\n\nrender(\n  <Form.Handler translations={myTranslations}>\n    <MyComponent />\n  </Form.Handler>,\n)\n"})}),"\n",(0,r.jsxs)(e.p,{children:["Or customize them with the ",(0,r.jsx)(e.code,{children:"<Translation />"})," component:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import { Form, Field } from '@dnb/eufemia/extensions/forms'\nimport { Translation, TranslationProps } from '@dnb/eufemia/shared'\n\nconst myTranslations = {\n  'nb-NO': { 'custom.string': 'Min egendefinerte streng' },\n  'en-GB': { 'custom.string': 'My custom string' },\n}\n\n// For TypeScript support\ntype Tr<T> = TranslationProps<T[keyof T]>\nconst Tr = (props: Tr<typeof myTranslations>) => <Translation {...props} />\n\nrender(\n  <Form.Handler translations={myTranslations}>\n    <Form.MainHeading>\n      <Translation id=\"custom.string\" />\n    </Form.MainHeading>\n\n    <Form.SubHeading>\n      <Tr id={(t) => t.custom.string} />\n    </Form.SubHeading>\n  </Form.Handler>,\n)\n"})}),"\n",(0,r.jsxs)(e.p,{children:["Here is a ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Handler/demos/#locale-and-translations",children:"demo"})," of how to use the translations in a form."]}),"\n",(0,r.jsxs)(e.p,{children:["When creating ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/create-component/#localization-and-translations",children:"your own field"}),", you can use the ",(0,r.jsx)(e.code,{children:"Form.useTranslation"})," hook to localize your field."]}),"\n",(0,r.jsx)(e.h4,{children:"Use the shared Provider to customize translations"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import { Form, Field } from '@dnb/eufemia/extensions/forms'\nimport { Provider, Translation } from '@dnb/eufemia/shared'\n\nconst myTranslations = {\n  'nb-NO': {\n    'PhoneNumber.label': 'Egendefinert',\n    'custom.string': 'Min egendefinerte streng',\n  },\n  'en-GB': {\n    'PhoneNumber.label': 'Custom',\n    'custom.string': 'My custom string',\n  },\n}\n\nrender(\n  <Provider translations={myTranslations}>\n    <Heading>\n      <Translation id=\"custom.string\" />\n    </Heading>\n\n    <Form.Handler>\n      <Field.PhoneNumber />\n    </Form.Handler>\n  </Provider>,\n)\n"})}),"\n",(0,r.jsx)(e.h3,{children:"Layout"}),"\n",(0,r.jsx)(e.p,{children:"When building your application forms, preferably use the following layout components. They seamlessly places all the fields and components of Eufemia Forms correctly into place."}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/uilib/layout/flex/stack/",children:"Flex.Stack"})," layout component for easy and consistent application forms."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/uilib/components/card/",children:"Card"})," with the stack property ",(0,r.jsx)(e.code,{children:"<Card stack>...</Card>"})," for the default card outline of forms."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Appearance/",children:"Form.Appearance"})," for changing sizes (height) of e.g. input fields."]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{children:"Best practices"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/best-practices-on-forms/",children:"Best practices on Forms"}),"."]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{children:"Create your own component"}),"\n",(0,r.jsx)(e.p,{children:"Eufemia Forms consists of helper components and tools so you can declaratively create interactive form components that flawlessly integrates between existing data and your custom form components. This ensures a common look and feel, even when ready-made components are combined with your local custom components."}),"\n",(0,r.jsxs)(e.p,{children:["Read more about ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/create-component",children:"creating your own component"})]})]})}function d(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(l,n)})):l(n)}},57295:function(n,e,a){a.r(e);var r=a(52322),t=a(45392),i=a(94929);function o(n){const e=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",strong:"strong"},(0,t.ah)(),n.components);return i||s("Examples",!1),i.QuickStart||s("Examples.QuickStart",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:"Quick start"}),"\n",(0,r.jsxs)(e.p,{children:["Here's how you import the components from within scopes, such as ",(0,r.jsx)(e.code,{children:"Form"})," and ",(0,r.jsx)(e.code,{children:"Field"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"import { Form, Field } from '@dnb/eufemia/extensions/forms'\n"})}),"\n",(0,r.jsxs)(e.p,{children:["Field components can be used directly as they are, for example ",(0,r.jsx)(e.code,{children:"Field.Email"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"import { Field } from '@dnb/eufemia/extensions/forms'\nrender(<Field.Email />)\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"NB:"})," In the above example, only the email field will be a part of your application bundle. Unused code will be tree-shaken away."]}),"\n",(0,r.jsxs)(e.p,{children:["And here is how you can use the ",(0,r.jsx)(e.code,{children:"Form"})," component:"]}),"\n",(0,r.jsx)(i.QuickStart,{})]})}function s(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(o,n)})):o(n)}},94929:function(n,e,a){a.r(e),a.d(e,{BaseFieldComponents:function(){return m},CreateBasicFieldComponent:function(){return c},CreateBasicValueComponent:function(){return d},CreateComposedFieldComponent:function(){return u},FeatureFields:function(){return f},GettingStarted:function(){return h},LayoutComponents:function(){return x},QuickStart:function(){return w},Transformers:function(){return v},UsingFormHandler:function(){return j},UsingFormSection:function(){return y},UsingIterate:function(){return F},UsingWizard:function(){return b},Validation:function(){return g},VisibilityBasedOnData:function(){return p}});a(2784);var r=a(64368),t=a(49406),i=a(26409),o=a(16620),s=a(55649),l=a(52322);const d=()=>(0,l.jsx)(r.Z,{scope:{ValueBlock:t.Z},hideCode:!0,noInline:!0,children:'const MyValue = ({ value, ...props }) => {\n  return (\n    <ValueBlock {...props}>\n      <NumberFormat currency>{value}</NumberFormat>\n    </ValueBlock>\n  )\n}\nrender(<MyValue label="Label" value={1234} />)\n'}),c=()=>(0,l.jsx)(r.Z,{scope:{useFieldProps:i.Z},hideCode:!0,noInline:!0,children:"const MyField = (props) => {\n  const fromInput = React.useCallback(({ value }) => value, [])\n  const preparedProps = {\n    label: 'What is the secret of this field?',\n    fromInput,\n    validator: (value) => {\n      if (value === 'secret') {\n        return new Error('Do not reveal the secret!')\n      }\n    },\n    ...props,\n  }\n  const { id, value, label, handleChange, handleFocus, handleBlur } =\n    useFieldProps(preparedProps)\n  return (\n    <FieldBlock forId={id} label={label}>\n      <Input\n        id={id}\n        value={value}\n        on_change={handleChange}\n        on_focus={handleFocus}\n        on_blur={handleBlur}\n      />\n    </FieldBlock>\n  )\n}\nrender(\n  <MyField\n    onChange={(value) => console.log('onChange', value)}\n    required\n  />,\n)\n"}),h=()=>(0,l.jsx)(r.Z,{hideCode:!0,noInline:!0,children:'const existingData = {\n  companyName: \'DNB\',\n  companyOrganizationNumber: \'123456789\',\n  postalAddressSelect: \'companyAddress\',\n}\nfunction Component() {\n  const { data } = Form.useData(\'company-form\')\n  console.log(\'State:\', data)\n  return (\n    <Form.Handler\n      id="company-form"\n      defaultData={existingData}\n      onChange={console.log}\n      onSubmit={console.log}\n    >\n      <Flex.Stack>\n        <Form.MainHeading>Bedrift</Form.MainHeading>\n        <Card stack>\n          <Field.Name.Company path="/companyName" required />\n          <Field.OrganizationNumber\n            path="/companyOrganizationNumber"\n            required\n          />\n          <Field.Selection\n            path="/postalAddressSelect"\n            label="Ønsket sted for tilsendt post"\n            variant="radio"\n          >\n            <Field.Option\n              value="companyAddress"\n              title="Samme som forretningsadresse"\n            />\n            <Field.Option value="other" title="Annet" />\n          </Field.Selection>\n        </Card>\n        <Form.ButtonRow>\n          <Form.SubmitButton />\n        </Form.ButtonRow>\n      </Flex.Stack>\n    </Form.Handler>\n  )\n}\nrender(<Component />)\n'}),u=()=>(0,l.jsx)(r.Z,{scope:{DataContext:o,useFieldProps:i.Z},hideCode:!0,noInline:!0,children:'const MyComposedField = (props) => {\n  const birthYear = useFieldProps({\n    path: \'/birthYear\',\n  })\n  const handleBirthYearChange = React.useCallback(\n    (sliderData) => {\n      birthYear.handleChange(sliderData.value)\n    },\n    [birthYear],\n  )\n  return (\n    <FieldBlock label={props.label ?? \'Name and age\'}>\n      <Flex.Horizontal>\n        <Field.Name.First path="/firstName" width="medium" minLength={2} />\n        <Field.Name.Last path="/lastName" width="medium" required />\n        <FieldBlock width="large">\n          <Slider\n            min={1900}\n            max={new Date().getFullYear()}\n            step={1}\n            label="Birth year"\n            label_direction="vertical"\n            value={parseFloat(String(birthYear.value))}\n            on_change={handleBirthYearChange}\n            on_drag_start={birthYear.handleFocus}\n            on_drag_end={birthYear.handleBlur}\n            status={birthYear.error?.message}\n            tooltip\n          />\n        </FieldBlock>\n      </Flex.Horizontal>\n    </FieldBlock>\n  )\n}\nconst data = {\n  firstName: \'John\',\n  birthYear: 2000,\n}\nrender(\n  <DataContext.Provider\n    defaultData={data}\n    onChange={(data) => console.log(\'onChange\', data)}\n  >\n    <MyComposedField label="My custom label" />\n  </DataContext.Provider>,\n)\n'}),m=()=>(0,l.jsx)(r.Z,{scope:{Value:s},children:'<Card stack>\n  <Field.String\n    label="Text field"\n    value="Lorem Ipsum"\n    onChange={(value) => console.log(\'onChange\', value)}\n  />\n  <Field.Number\n    label="Number Field"\n    value={789}\n    onChange={(value) => console.log(\'onChange\', value)}\n  />\n  <Field.Boolean\n    label="Boolean Field"\n    value={true}\n    onChange={(value) => console.log(\'onChange\', value)}\n  />\n</Card>\n'}),f=()=>(0,l.jsx)(r.Z,{scope:{Value:s},children:'<Card stack>\n  <Field.String label="Fornavn" value="John" />\n  <Field.String label="Etternavn" value="Smith" />\n  <Field.NationalIdentityNumber value="20058512345" />\n  <Field.Email value="john@smith.email" />\n  <Field.PhoneNumber value="+47 98765432" />\n</Card>\n'}),x=()=>(0,l.jsx)(r.Z,{scope:{Value:s},children:'<Flex.Stack>\n  <Form.MainHeading>Profile</Form.MainHeading>\n\n  <Card stack>\n    <Form.SubHeading>Name</Form.SubHeading>\n\n    <Field.String label="Fornavn" value="John" />\n    <Field.String label="Etternavn" value="Smith" />\n  </Card>\n\n  <Card stack>\n    <Form.SubHeading>More information</Form.SubHeading>\n\n    <Field.NationalIdentityNumber value="20058512345" />\n    <Field.Email value="john@smith.email" />\n    <Field.PhoneNumber value="+47 98765432" />\n  </Card>\n</Flex.Stack>\n'}),p=()=>(0,l.jsx)(r.Z,{scope:{Value:s},children:'<Form.Handler\n  defaultData={{\n    firstName: undefined,\n    lastName: \'Smith\',\n    advanced: false,\n    ssn: \'123\',\n    email: \'@smith.email\',\n    phone: \'+47 98765432\',\n  }}\n  onChange={(data) => console.log(\'onChange\', data)}\n  onPathChange={(path, value) => console.log(\'onPathChange\', path, value)}\n  onSubmit={(data) => console.log(\'onSubmit\', data)}\n>\n  <Flex.Stack>\n    <Form.MainHeading>Profile</Form.MainHeading>\n\n    <Card stack>\n      <Form.SubHeading>Name</Form.SubHeading>\n\n      <Field.String path="/firstName" label="Fornavn" />\n      <Field.String path="/lastName" label="Etternavn" />\n    </Card>\n\n    <Field.Boolean\n      path="/advanced"\n      variant="checkbox-button"\n      label="More fields"\n    />\n    <Form.Visibility pathTrue="/advanced">\n      <Flex.Stack>\n        <Card stack>\n          <Form.SubHeading>More information</Form.SubHeading>\n\n          <Field.NationalIdentityNumber value="20058512345" />\n          <Field.Email value="john@smith.email" />\n          <Field.PhoneNumber value="+47 98765432" />\n        </Card>\n      </Flex.Stack>\n    </Form.Visibility>\n  </Flex.Stack>\n</Form.Handler>\n'}),j=()=>(0,l.jsx)(r.Z,{scope:{Value:s},children:"<Form.Handler\n  defaultData={{\n    firstName: 'John',\n    lastName: 'Smith',\n    ssn: '20058512345',\n    email: 'john@smith.email',\n    phone: '+47 98765432',\n  }}\n  onChange={(data) => console.log('onChange', data)}\n  onPathChange={(path, value) => console.log('onPathChange', path, value)}\n  onSubmit={(data) => console.log('onSubmit', data)}\n>\n  <Form.MainHeading>Profile</Form.MainHeading>\n\n  <Card stack>\n    <Field.String path=\"/firstName\" label=\"Fornavn\" />\n    <Field.String path=\"/lastName\" label=\"Etternavn\" />\n    <Field.NationalIdentityNumber path=\"/ssn\" />\n    <Field.Email path=\"/email\" />\n    <Field.PhoneNumber path=\"/phone\" />\n\n    <Form.ButtonRow>\n      <Form.SubmitButton />\n    </Form.ButtonRow>\n  </Card>\n</Form.Handler>\n"}),g=()=>(0,l.jsx)(r.Z,{scope:{Value:s},children:"<Form.Handler\n  defaultData={{\n    firstName: undefined,\n    lastName: 'Smith',\n    ssn: '123',\n    email: '@smith.email',\n    phone: '+47 98765432',\n  }}\n  onChange={(data) => console.log('onChange', data)}\n  onPathChange={(path, value) => console.log('onPathChange', path, value)}\n  onSubmit={(data) => console.log('onSubmit', data)}\n>\n  <Form.MainHeading>Profile</Form.MainHeading>\n\n  <Card stack>\n    <Field.String path=\"/firstName\" label=\"Fornavn\" required />\n    <Field.String path=\"/lastName\" label=\"Etternavn\" required />\n    <Field.NationalIdentityNumber path=\"/ssn\" validateInitially />\n    <Field.Email path=\"/email\" validateInitially />\n    <Field.PhoneNumber path=\"/phone\" validateInitially />\n  </Card>\n</Form.Handler>\n"}),b=()=>(0,l.jsx)(r.Z,{noInline:!0,children:'const MyForm = () => {\n  // Routers like "react-router" are supported as well\n  Wizard.useQueryLocator(\'my-wizard\')\n  const { summaryTitle } = Form.useLocale().Step\n  return (\n    <Form.Handler\n      defaultData={{\n        firstName: undefined,\n        lastName: \'Smith\',\n        advanced: false,\n        ssn: \'123\',\n        email: \'@smith.email\',\n        phone: \'+47 98765432\',\n      }}\n      onChange={(data) => console.log(\'onChange\', data)}\n      onPathChange={(path, value) =>\n        console.log(\'onPathChange\', path, value)\n      }\n      onSubmit={(data) => console.log(\'onSubmit\', data)}\n    >\n      <Wizard.Container id="my-wizard" mode="loose">\n        <Wizard.Step title="Name">\n          <Form.MainHeading>Profile</Form.MainHeading>\n\n          <Card stack>\n            <Form.SubHeading>Name</Form.SubHeading>\n\n            <Field.String path="/firstName" label="Fornavn" required />\n            <Field.String path="/lastName" label="Etternavn" required />\n          </Card>\n\n          <Wizard.Buttons />\n        </Wizard.Step>\n\n        <Wizard.Step title="More information">\n          <Form.MainHeading>Profile</Form.MainHeading>\n\n          <Card stack>\n            <Form.SubHeading>More information</Form.SubHeading>\n\n            <Field.NationalIdentityNumber path="/ssn" />\n            <Field.Email path="/email" />\n            <Field.PhoneNumber path="/phone" />\n          </Card>\n\n          <Wizard.Buttons />\n        </Wizard.Step>\n\n        <Wizard.Step title={summaryTitle}>\n          <Form.MainHeading>Profile</Form.MainHeading>\n\n          <Card stack>\n            <Value.SummaryList layout="grid">\n              <Value.String path="/firstName" label="Fornavn" />\n              <Value.String path="/lastName" label="Etternavn" />\n\n              <Value.NationalIdentityNumber path="/ssn" />\n              <Value.Email path="/email" />\n              <Value.PhoneNumber path="/phone" />\n            </Value.SummaryList>\n          </Card>\n\n          <Form.ButtonRow>\n            <Wizard.Buttons />\n            <Form.SubmitButton />\n          </Form.ButtonRow>\n        </Wizard.Step>\n      </Wizard.Container>\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n'}),y=()=>(0,l.jsx)(r.Z,{noInline:!0,children:'const MyEditContainer = () => {\n  return (\n    <Form.Section.EditContainer variant="basic">\n      <Field.Name.First path="/firstName" />\n      <Field.Name.Last path="/lastName" />\n    </Form.Section.EditContainer>\n  )\n}\nconst MyViewContainer = () => {\n  return (\n    <Form.Section.ViewContainer variant="basic">\n      <Value.SummaryList>\n        <Value.Name.First path="/firstName" />\n        <Value.Name.Last path="/lastName" />\n      </Value.SummaryList>\n    </Form.Section.ViewContainer>\n  )\n}\nrender(\n  <Form.Handler\n    onSubmit={async (data) => console.log(\'onSubmit\', data)}\n    defaultData={{\n      nestedPath: {\n        firstName: \'Nora\',\n        lastName: undefined, // initiate error\n      },\n    }}\n  >\n    <Card stack>\n      <Form.SubHeading>Your account</Form.SubHeading>\n      <Form.Section path="/nestedPath" required>\n        <MyEditContainer />\n        <MyViewContainer />\n      </Form.Section>\n    </Card>\n    <Form.SubmitButton />\n  </Form.Handler>,\n)\n'}),F=()=>(0,l.jsx)(r.Z,{noInline:!0,children:'const MyEditItemForm = () => {\n  return (\n    <Field.Composition>\n      <Field.Name.First itemPath="/firstName" width="medium" />\n      <Field.Name.Last itemPath="/lastName" width="medium" required />\n    </Field.Composition>\n  )\n}\nconst MyEditItem = () => {\n  return (\n    <Iterate.EditContainer\n      title="Edit account holder {itemNo}"\n      titleWhenNew="New account holder {itemNo}"\n    >\n      <MyEditItemForm />\n    </Iterate.EditContainer>\n  )\n}\nconst MyViewItem = () => {\n  const item = Iterate.useItem()\n  console.log(\'index:\', item.index)\n  return (\n    <Iterate.ViewContainer title="Account holder {itemNo}">\n      <Value.SummaryList>\n        <Value.Name.First itemPath="/firstName" showEmpty />\n        <Value.Name.Last itemPath="/lastName" placeholder="-" />\n      </Value.SummaryList>\n    </Iterate.ViewContainer>\n  )\n}\nconst CreateNewEntry = () => {\n  return (\n    <Iterate.PushContainer\n      path="/accounts"\n      title="New account holder"\n      openButton={\n        <Iterate.PushContainer.OpenButton text="Add another account" />\n      }\n      showOpenButtonWhen={(list) => list.length > 0}\n    >\n      <MyEditItemForm />\n    </Iterate.PushContainer>\n  )\n}\nconst MyForm = () => {\n  return (\n    <Form.Handler\n      data={{\n        accounts: [\n          {\n            firstName: \'Tony\',\n            lastName: undefined, // initiate error\n          },\n        ],\n      }}\n      onChange={(data) => console.log(\'DataContext/onChange\', data)}\n      onSubmit={async (data) => console.log(\'onSubmit\', data)}\n    >\n      <Flex.Vertical>\n        <Form.MainHeading>Accounts</Form.MainHeading>\n\n        <Card stack>\n          <Iterate.Array path="/accounts">\n            <MyViewItem />\n            <MyEditItem />\n          </Iterate.Array>\n\n          <CreateNewEntry />\n        </Card>\n\n        <Form.SubmitButton variant="send" />\n      </Flex.Vertical>\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n'}),v=()=>(0,l.jsx)(r.Z,{hideCode:!0,noInline:!0,children:'const MyForm = () => {\n  const transformToUpper = (value) => {\n    return value?.toUpperCase()\n  }\n  const transformToLower = (value) => {\n    return value?.toLowerCase()\n  }\n  return (\n    <Form.Handler onChange={console.log}>\n      <Card stack>\n        <Field.String\n          width="medium"\n          label="Input value"\n          placeholder="Type letters"\n          path="/myField"\n          transformIn={transformToUpper}\n          transformOut={transformToLower}\n        />\n\n        <Value.String label="Output value" path="/myField" />\n      </Card>\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n'}),w=()=>(0,l.jsx)(r.Z,{noInline:!0,children:'const MyForm = () => {\n  const existingData = {\n    companyName: \'DNB\',\n  }\n  return (\n    <Form.Handler\n      defaultData={existingData}\n      onChange={console.log}\n      onSubmit={console.log}\n    >\n      <Card stack>\n        <Field.Name.Company path="/companyName" required />\n        <Field.OrganizationNumber\n          path="/companyOrganizationNumber"\n          required\n        />\n        <Field.Selection\n          path="/postalAddressSelect"\n          label="Ønsket sted for tilsendt post"\n          variant="radio"\n        >\n          <Field.Option\n            value="companyAddress"\n            title="Samme som forretningsadresse"\n          />\n          <Field.Option value="other" title="Annet" />\n        </Field.Selection>\n        <Form.Visibility\n          visibleWhen={{\n            path: \'/postalAddressSelect\',\n            hasValue: \'other\',\n          }}\n          animate\n        >\n          <Field.String\n            path="/postalAddress"\n            label="Sted for tilsendt post"\n            required\n          />\n        </Form.Visibility>\n      </Card>\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n'})},16620:function(n,e,a){a.r(e),a.d(e,{At:function(){return d},Context:function(){return r.Z},Provider:function(){return t.Z},defaultContextState:function(){return r.E}});var r=a(21068),t=a(6436),i=a(2784),o=a(2394),s=a(52322);function l(n){const{path:e="/",iterate:a,children:t}=n,l=(0,i.useContext)(r.Z),{data:d,handlePathChange:c}=l,h=d&&o.e$(d,e)?o.U2(d,e):void 0,u=(0,i.useCallback)(((n,a)=>{c(`${e}${n}`,a)}),[c,e]);return a?Array.isArray(h)?(0,s.jsx)(s.Fragment,{children:h.map(((n,a)=>{const i=c?(n,r)=>{c(`${e}/${a}${n}`,r)}:void 0;return(0,s.jsx)(r.Z.Provider,{value:{...l,data:n,handlePathChange:i},children:t},`element${a}`)}))}):null:(0,s.jsx)(r.Z.Provider,{value:{...l,data:h,handlePathChange:u},children:t})}l._supportsSpacingProps=!0;var d=l}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-getting-started-mdx-97616f435ac376196203.js.map