"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[65783,72330,2695,55310],{87036:function(e,n,r){r.r(n);var a=r(52322),s=r(45392);function t(e){const n=Object.assign({pre:"pre",code:"code"},(0,s.ah)(),e.components);return(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"// Async event handler\nconst onChange = debounceAsync(async function (data) {\n  try {\n    await makeRequest(data)\n  } catch (error) {\n    return error\n  }\n\n  // Optionally, you can return an object with these keys, depending your needs\n  return {\n    info: 'Info message',\n    warning: 'Warning message',\n\n    // and either an error\n    error: new Error('Error message'),\n\n    // or success (when used for autosave)\n    success: 'saved',\n  } as const\n})\n"})})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(t,e)})):t(e)}},63054:function(e,n,r){r.r(n);var a=r(52322),s=r(45392);function t(e){const n=Object.assign({p:"p",pre:"pre",code:"code"},(0,s.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"In all async operations, you can simply return an error object to display it in the form or influence the form behavior."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\n// Async function\nconst onSubmit = async (data) => {\n  try {\n    const response = await fetch('https://api.example.com', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    })\n    const data = await response.json()\n\n    Form.setData('unique-id', data) // Whatever you want to do with the data\n  } catch (error) {\n    return error // Will display the error message in the form\n  }\n\n  // Optionally, you can return an object with these keys, depending your needs\n  return {\n    info: 'Info message',\n    warning: 'Warning message',\n\n    // Force the form to stay in pending state\n    status: 'pending',\n\n    // and either an error\n    error: new Error('Error message'),\n  } as const\n}\n\nfunction Component() {\n  return (\n    <Form.Handler id=\"unique-id\" onSubmit={onSubmit}>\n      ...\n    </Form.Handler>\n  )\n}\n"})})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(t,e)})):t(e)}},9947:function(e,n,r){r.r(n);var a=r(52322),s=r(45392),t=r(94929),i=r(57295),o=(r(63054),r(87036));function d(e){const n=Object.assign({h1:"h1",p:"p",strong:"strong",ul:"ul",li:"li",a:"a",h3:"h3",code:"code",h4:"h4",pre:"pre",h5:"h5",h2:"h2"},(0,s.ah)(),e.components);return t||l("Examples",!1),t.GettingStarted||l("Examples.GettingStarted",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{children:"Getting started"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Table of Contents"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#quick-start",children:"Quick start"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#creating-forms",children:"Creating forms"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#state-management",children:"State management"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#field-components",children:"Field components"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#value-components",children:"Value components"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#async-form-behavior",children:"Async form behavior"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#validation-and-error-handling",children:"Validation and error handling"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#localization",children:"Localization"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#layout",children:"Layout"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#best-practices",children:"Best practices"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#create-your-own-components",children:"Create your own components"})}),"\n"]}),"\n",(0,a.jsx)(i.default,{}),"\n",(0,a.jsx)(n.h3,{children:"Creating forms"}),"\n",(0,a.jsxs)(n.p,{children:["To build an entire form, there are surrounding components such as form ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Form/Handler",children:"Handler"})," and ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/StepsLayout",children:"StepsLayout"})," that make data flow and layout easier and save you a lot of extra code, without compromising flexibility."]}),"\n",(0,a.jsxs)(n.p,{children:["The needed styles are included in the Eufemia core package via ",(0,a.jsx)(n.code,{children:"dnb-ui-components"}),"."]}),"\n",(0,a.jsx)(n.h3,{children:"State management"}),"\n",(0,a.jsxs)(n.p,{children:["The state management is done via the ",(0,a.jsx)(n.a,{href:"#what-is-a-json-pointer",children:"JSON Pointer"})," directive (i.e ",(0,a.jsx)(n.code,{children:'path="/firstName"'}),"). This is a standardized way of pointing to a specific part of a JavaScript/JSON object. The JSON Pointer is used to both read and write data, and is also used to validate the data."]}),"\n",(0,a.jsx)(t.GettingStarted,{}),"\n",(0,a.jsx)(n.h4,{children:"Filter data"}),"\n",(0,a.jsxs)(n.p,{children:["You can filter data by any given criteria. This is done by adding a ",(0,a.jsx)(n.code,{children:"filterData"})," property with a handler to the ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Form/Handler/",children:"Form.Handler"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"The callback function receives the path as the first argument, the value as the second argument, and the related field properties as the third argument. The callback function must return a boolean value or undefined. Return false to exclude an entry."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"const filterDataHandler = (path, value, props, internal) => {\n  if (props.disabled === true) {\n    return false\n  }\n}\nrender(<Form.Handler filterData={filterDataHandler} />)\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Here is a working example of how to ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Form/Handler/demos/#filter-your-data",children:"filter data"}),"."]}),"\n",(0,a.jsx)(n.h3,{children:"What is a JSON Pointer?"}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.a,{href:"https://datatracker.ietf.org/doc/html/draft-ietf-appsawg-json-pointer-03",children:"JSON Pointer"})," is a string of tokens separated by ",(0,a.jsx)(n.code,{children:"/"})," characters, these tokens either specify keys in objects or indexes into arrays."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const data = {\n  foo: {\n    bar: [\n      {\n        baz: 'value',\n      },\n    ],\n  },\n}\nconst pointer = '/foo/bar/0/baz' // points to 'value'\n"})}),"\n",(0,a.jsx)(n.h3,{children:"Field components"}),"\n",(0,a.jsxs)(n.p,{children:["In short, field components are interactive components that the user can interact with. Read more about fields in the ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/fields/",children:"What are fields?"})," section."]}),"\n",(0,a.jsx)(n.h3,{children:"Value components"}),"\n",(0,a.jsxs)(n.p,{children:["Beside the interactive ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/fields/",children:"Field"})," components, there are also the static ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Value/",children:"Value"})," components. Use these to show summaries or read-only parts of your application with benefits such as linking to source data and standardized formatting based on the type of data to be displayed."]}),"\n",(0,a.jsx)(n.h3,{children:"Async form behavior"}),"\n",(0,a.jsx)(n.p,{children:"This feature allows you to perform asynchronous operations such as fetching data from an API â€“ without additional state management."}),"\n",(0,a.jsxs)(n.p,{children:["You can enable async form submit behavior on the form ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Form/Handler",children:"Handler"})," by using:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"<Form.Handler onSubmit={async () => {}}>...</Form.Handler>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["It will disable all fields and show an indicator on the ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Form/SubmitButton/",children:"SubmitButton"})," while the ",(0,a.jsx)(n.strong,{children:"form"})," is pending (",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Form/Handler/demos/",children:"examples"}),")."]}),"\n",(0,a.jsxs)(n.p,{children:["When using ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/StepsLayout/",children:"StepsLayout"})," you can use in addition:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"<StepsLayout onStepChange={async () => {}}>...</StepsLayout>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["It will disable all fields and show an indicator on the ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/StepsLayout/NextButton/",children:"NextButton"})," while the ",(0,a.jsx)(n.strong,{children:"step"})," is pending (",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/StepsLayout/StepsLayout/demos/",children:"examples"}),")."]}),"\n",(0,a.jsx)(n.h4,{children:"onChange and autosave"}),"\n",(0,a.jsxs)(n.p,{children:["You can use an async function for the ",(0,a.jsx)(n.code,{children:"onChange"})," event handler, either on the form ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Form/Handler",children:"Handler"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"<Form.Handler onChange={async () => {}}>...</Form.Handler>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["or on every ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/fields/",children:"field"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'<Field.PhoneNumber path="/myField" onChange={async () => {}} />\n'})}),"\n",(0,a.jsxs)(n.p,{children:["They can be used in combination as well â€“ including ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/getting-started/#async-validation",children:"async validator"})," functions."]}),"\n",(0,a.jsx)(n.p,{children:"When the user makes a value change, it will show an indicator on the corresponding field label."}),"\n",(0,a.jsx)(n.p,{children:"This feature can not only be used for autosave, but for any other real-time async operations."}),"\n",(0,a.jsx)(n.p,{children:"Here is an example of an async change behavior:"}),"\n",(0,a.jsx)(o.default,{}),"\n",(0,a.jsxs)(n.p,{children:["More info about the async change behavior in the form ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Form/Handler/info/#async-onchange-and-onsubmit-event-handlers",children:"Handler"})," section."]}),"\n",(0,a.jsx)(n.h4,{children:"Async field validation"}),"\n",(0,a.jsxs)(n.p,{children:["A similar indicator behavior will occur when using async functions for field validation, such as ",(0,a.jsx)(n.code,{children:"validator"})," or ",(0,a.jsx)(n.code,{children:"onBlurValidation"}),", your form will exhibit async behavior. This means that the validation needs to be successfully completed before the form can be submitted."]}),"\n",(0,a.jsx)(n.h3,{children:"Validation and error handling"}),"\n",(0,a.jsx)(n.p,{children:"Every field component has a built-in validation that is based on the type of data it handles. This validation is automatically applied to the field when the user interacts with it. The validation is also applied when the user submits the form."}),"\n",(0,a.jsxs)(n.p,{children:["In addition, you can add your own validation to a field component. This is done by adding a ",(0,a.jsx)(n.code,{children:"required"}),", ",(0,a.jsx)(n.code,{children:"pattern"}),", ",(0,a.jsx)(n.code,{children:"schema"})," or ",(0,a.jsx)(n.code,{children:"validator"})," property."]}),"\n",(0,a.jsxs)(n.p,{children:["Fields which have the ",(0,a.jsx)(n.code,{children:"disabled"})," prop or the ",(0,a.jsx)(n.code,{children:"readOnly"})," prop, will skip validation."]}),"\n",(0,a.jsxs)(n.p,{children:["For monitoring your form for errors, you can use the ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Form/useError",children:"useError"})," hook."]}),"\n",(0,a.jsx)(n.h4,{children:"required"}),"\n",(0,a.jsx)(n.p,{children:"The required property is a boolean that indicates whether the field is required or not:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"<Field.PhoneNumber required />\n"})}),"\n",(0,a.jsx)(n.h4,{children:"pattern"}),"\n",(0,a.jsx)(n.p,{children:"The pattern property is a regular expression that the value of the field must match:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'<Field.PhoneNumber pattern="..." />\n'})}),"\n",(0,a.jsx)(n.h4,{children:"schema"}),"\n",(0,a.jsx)(n.p,{children:"The schema property is a JSON schema that the value of the field must match:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"const schema = {\n  pattern: '...',\n}\n<Field.PhoneNumber schema={schema} />\n"})}),"\n",(0,a.jsx)(n.h4,{children:"validator"}),"\n",(0,a.jsx)(n.p,{children:"The validator property is a function that takes the current value of the field as an argument and returns an error message if the value is invalid:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"const validator = (value) => {\n  const isInvalid = new RegExp('...').test(value)\n  if (isInvalid) {\n    return new Error('Invalid value message')\n  }\n}\n;<Field.PhoneNumber validator={validator} />\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You can find more info about error messages in the ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Form/error-messages/",children:"Error messages"})," docs."]}),"\n",(0,a.jsx)(n.h5,{children:"Async validation"}),"\n",(0,a.jsx)(n.p,{children:"Async validation is also supported. The validator function can return a promise (async/await) that resolves to an error message."}),"\n",(0,a.jsxs)(n.p,{children:["In this example we use ",(0,a.jsx)(n.code,{children:"onBlurValidator"})," to only validate the field when the user leaves the field:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"const validator = async (value) => {\n  try {\n    const isInvalid = await makeRequest(value)\n    if (isInvalid) {\n      return new Error('Invalid value') // Show this message below the field\n    }\n  } catch (error) {\n    return error\n  }\n}\nrender(<Field.PhoneNumber onBlurValidator={validator} />)\n"})}),"\n",(0,a.jsx)(n.h5,{children:"Async validator with debounce"}),"\n",(0,a.jsxs)(n.p,{children:["While when using async validation on every keystroke, it's a good idea to debounce the validation function to avoid unnecessary requests. This can be done by using the ",(0,a.jsx)(n.a,{href:"/uilib/helpers/functions/#debounce",children:"debounceAsync"})," helper function:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { debounceAsync } from '@dnb/eufemia/shared/helpers'\n\nconst validator = debounceAsync(async function myValidator(value) {\n  try {\n    const isInvalid = await makeRequest(value)\n    if (isInvalid) {\n      return new Error('Invalid value') // Show this message below the field\n    }\n  } catch (error) {\n    return error\n  }\n})\nrender(<Field.PhoneNumber validator={validator} />)\n"})}),"\n",(0,a.jsx)(n.h3,{children:"Localization"}),"\n",(0,a.jsxs)(n.p,{children:["In short, use the Eufemia ",(0,a.jsx)(n.a,{href:"/uilib/usage/customisation/localization/",children:"Provider"})," to set the locale for your application (forms). This will ensure that the correct language is used for all the fields in your form."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { Provider } from '@dnb/eufemia/shared'\n\nrender(\n  <Provider locale=\"en-GB\">\n    <Field.PhoneNumber />\n  </Provider>,\n)\n"})}),"\n",(0,a.jsx)(n.p,{children:"In addition, you can customize the translations globally:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { Provider } from '@dnb/eufemia/shared'\n\nrender(\n  <Provider\n    locales={{\n      'nb-NO': {\n        Forms: { phoneNumberLabel: 'Custom' },\n      },\n    }}\n  >\n    <Field.PhoneNumber />\n  </Provider>,\n)\n"})}),"\n",(0,a.jsx)(n.h3,{children:"Layout"}),"\n",(0,a.jsx)(n.p,{children:"When building your application forms, preferably use the following layout components. They seamlessly places all the fields and components of Eufemia Forms correctly into place."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/uilib/layout/flex",children:"Flex"})," layout component for easy and consistent application forms."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/uilib/components/card",children:"Card"})," for the default card outline of forms."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["For changing sizes of e.g. input fields, you may have a look at ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Form/Appearance/",children:"Form.Appearance"}),"."]}),"\n",(0,a.jsx)(n.h3,{children:"Best practices"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/best-practices-on-forms/",children:"Best practices on Forms"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{children:"Create your own components"}),"\n",(0,a.jsx)(n.p,{children:"Eufemia Forms consists of helper components and tools so you can declaratively create interactive form components that flawlessly integrates between existing data and your custom form components. This ensures a common look and feel, even when ready-made components are combined with your local custom components."}),"\n",(0,a.jsxs)(n.p,{children:["Read more about on how to ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/create-component",children:"create your own component"}),"."]})]})}function l(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(d,e)})):d(e)}},57295:function(e,n,r){r.r(n);var a=r(52322),s=r(45392);function t(e){const n=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",h3:"h3",a:"a"},(0,s.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{children:"Quick start"}),"\n",(0,a.jsxs)(n.p,{children:["Field components can be used directly as they are, for example ",(0,a.jsx)(n.code,{children:"Field.Email"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import { Field } from '@dnb/eufemia/extensions/forms'\n\nrender(<Field.Email />)\n"})}),"\n",(0,a.jsx)(n.p,{children:"By building an entire form with components from Eufemia and Eufemia Forms, you save time and code:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'import { Card } from \'@dnb/eufemia\'\nimport { Form, Field } from \'@dnb/eufemia/extensions/forms\'\n\nrender(\n  <Form.Handler\n    data={existingData}\n    onChange={...}\n    onSubmit={...}\n  >\n    <Card spacing="medium">\n      <Field.String\n        path="/companyName"\n        label="Bedriftens navn"\n        required\n      />\n      <Field.OrganizationNumber\n        path="/companyOrganizationNumber"\n        required\n      />\n      <Field.Selection\n        path="/postalAddressSelect"\n        label="Ã˜nsket sted for tilsendt post"\n        variant="radio"\n      >\n        <Field.Option value="companyAddress" title="Samme som forretningsadresse" />\n        <Field.Option value="other" title="Annet" />\n      </Field.Selection>\n    </Card>\n  </Form.Handler>\n)\n'})}),"\n",(0,a.jsx)(n.h3,{children:"Data handling"}),"\n",(0,a.jsxs)(n.p,{children:["You don't need React ",(0,a.jsx)(n.code,{children:"useState"})," to handle your form data."]}),"\n",(0,a.jsxs)(n.p,{children:["With ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Form/useData/",children:"useData"}),", ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Form/getData/",children:"getData"})," and ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/extended-features/Form/setData/",children:"setData"})," you area able to access and modify your form data from not only from nested components, but also outside the form context itself (",(0,a.jsx)(n.code,{children:"Form.Handler"}),")."]}),"\n",(0,a.jsxs)(n.p,{children:['Here "ComponentB" is rendered inside the ',(0,a.jsx)(n.code,{children:"Form.Handler"})," component:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nfunction ComponentA() {\n  return (\n    <Form.Handler>\n      ...\n      <ComponentB />\n      ...\n    </Form.Handler>\n  )\n}\n\nfunction ComponentB() {\n  const { data, update, set, filterData } = Form.useData()\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:['While in this example, "ComponentB" is outside the ',(0,a.jsx)(n.code,{children:"Form.Handler"})," and linked together via the ",(0,a.jsx)(n.code,{children:"id"})," (string) property:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nfunction ComponentA() {\n  return (\n    <>\n      <Form.Handler id=\"unique\">...</Form.Handler>\n      <ComponentB />\n    </>\n  )\n}\n\nfunction ComponentB() {\n  const { data, update, set, filterData } = Form.useData('unique')\n}\n\n// You canalso use the setData:\nForm.setData('unique', { companyName: 'DNB' })\n\n// ... and the getData method when ever you need to:\nconst { data, filterData } = Form.getData('unique')\n"})}),"\n",(0,a.jsx)(n.h3,{children:"Async form handling"}),"\n",(0,a.jsx)(n.p,{children:"It depends on your use case if this feature is needed. But when it is, its ofter a time consuming task to implement. Eufemia Forms has therefor a built-in feature that enables async form behavior."}),"\n",(0,a.jsxs)(n.p,{children:["More details about the async form behavior can be found in the ",(0,a.jsx)(n.a,{href:"/uilib/extensions/forms/getting-started/#async-form-behavior",children:"async form behavior"})," section."]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(t,e)})):t(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-getting-started-mdx-9cbffe1975cf6547fd88.js.map