"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[48672],{41225:function(n,e,t){t.r(e);var a=t(52322),r=t(45392),i=t(22939);function o(n){const e=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code",a:"a"},(0,r.ah)(),n.components);return i||l("Examples",!1),i.AnimatedContainer||l("Examples.AnimatedContainer",!0),i.ArrayFromFormHandler||l("Examples.ArrayFromFormHandler",!0),i.ObjectElements||l("Examples.ObjectElements",!0),i.PrimitiveElementsFields||l("Examples.PrimitiveElementsFields",!0),i.PrimitiveElementsValues||l("Examples.PrimitiveElementsValues",!0),i.RenderPropsObjectElements||l("Examples.RenderPropsObjectElements",!0),i.RenderPropsPrimitiveElements||l("Examples.RenderPropsPrimitiveElements",!0),i.ValueComposition||l("Examples.ValueComposition",!0),i.ViewAndEditContainer||l("Examples.ViewAndEditContainer",!0),i.WithTable||l("Examples.WithTable",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{children:"Demos"}),"\n",(0,a.jsx)(e.h3,{children:"Primitive elements as fields"}),"\n",(0,a.jsx)(i.PrimitiveElementsFields,{}),"\n",(0,a.jsx)(e.h3,{children:"Primitive elements as values"}),"\n",(0,a.jsx)(i.PrimitiveElementsValues,{}),"\n",(0,a.jsx)(e.h3,{children:"Object elements"}),"\n",(0,a.jsx)(i.ObjectElements,{}),"\n",(0,a.jsx)(e.h3,{children:"Render props with primitive elements"}),"\n",(0,a.jsx)(i.RenderPropsPrimitiveElements,{}),"\n",(0,a.jsx)(e.h3,{children:"Render props with object elements"}),"\n",(0,a.jsx)(i.RenderPropsObjectElements,{}),"\n",(0,a.jsx)(e.h3,{children:"Animated container"}),"\n",(0,a.jsxs)(e.p,{children:["With an optional ",(0,a.jsx)(e.code,{children:"title"})," and ",(0,a.jsx)(e.a,{href:"/uilib/extensions/forms/Iterate/Toolbar/",children:"Iterate.Toolbar"}),"."]}),"\n",(0,a.jsx)(i.AnimatedContainer,{}),"\n",(0,a.jsx)(e.h3,{children:"Toggle between a view and edit container"}),"\n",(0,a.jsx)(i.ViewAndEditContainer,{}),"\n",(0,a.jsx)(e.h3,{children:"With DataContext and add/remove buttons"}),"\n",(0,a.jsx)(i.ArrayFromFormHandler,{}),"\n",(0,a.jsx)(e.h3,{children:"Static generated in a Table"}),"\n",(0,a.jsx)(i.WithTable,{}),"\n",(0,a.jsx)(e.h3,{children:"Value composition"}),"\n",(0,a.jsx)(i.ValueComposition,{})]})}function l(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,a.jsx)(e,Object.assign({},n,{children:(0,a.jsx)(o,n)})):o(n)}},40730:function(n,e,t){t.r(e),t.d(e,{Default:function(){return o}});var a=t(28204),r=t(6350),i=t(52322);const o=()=>(0,i.jsx)(a.Z,{scope:{Iterate:r},noInline:!0,children:'const MyForm = () => {\n  const { count } = Iterate.useCount(\'myForm\')\n  return (\n    <Form.Handler\n      defaultData={{\n        myList: [\'Item 1\'],\n      }}\n      id="myForm"\n    >\n      <Card stack>\n        <Iterate.Array path="/myList" placeholder={<>Empty list</>}>\n          <Iterate.AnimatedContainer title="Title">\n            <Field.String label="Label" itemPath="/" />\n\n            <Iterate.Toolbar>\n              <Iterate.RemoveButton />\n            </Iterate.Toolbar>\n          </Iterate.AnimatedContainer>\n        </Iterate.Array>\n\n        <Iterate.PushButton\n          path="/myList"\n          pushValue={\'Item \' + String(count(\'/myList\') + 1)}\n          text="Add new item"\n        />\n      </Card>\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n'})},22939:function(n,e,t){t.r(e),t.d(e,{AnimatedContainer:function(){return l.Default},ArrayFromFormHandler:function(){return x},ObjectElements:function(){return c},PrimitiveElementsFields:function(){return s},PrimitiveElementsValues:function(){return m},RenderPropsObjectElements:function(){return p},RenderPropsPrimitiveElements:function(){return h},ValueComposition:function(){return d},ViewAndEditContainer:function(){return g},WithTable:function(){return u}});var a=t(28204),r=t(6350),i=t(54937),o=t(52322),l=t(40730);const s=()=>(0,o.jsx)(a.Z,{scope:{Iterate:r},children:"<Iterate.Array\n  value={['Iron Man', 'Captain America', 'The Hulk']}\n  onChange={console.log}\n>\n  <Field.String itemPath=\"/\" />\n</Iterate.Array>\n"}),m=()=>(0,o.jsx)(a.Z,{scope:{Iterate:r},"data-visual-test":"primitive-element-values",children:"<Value.SummaryList>\n  <Iterate.Array value={['Iron Man', 'Captain America', 'The Hulk']}>\n    <Value.String itemPath=\"/\" />\n  </Iterate.Array>\n</Value.SummaryList>\n"}),d=()=>(0,o.jsx)(a.Z,{scope:{Iterate:r},children:"<Value.Composition label=\"Label\">\n  <Iterate.Array value={['Iron Man', 'Captain America', 'The Hulk']}>\n    <Value.String itemPath=\"/\" />\n  </Iterate.Array>\n</Value.Composition>\n"}),u=()=>(0,o.jsx)(a.Z,{scope:{Iterate:r},children:"<Table>\n  <thead>\n    <Tr>\n      <Th>Name</Th>\n      <Th>Age</Th>\n    </Tr>\n  </thead>\n  <tbody>\n    <Iterate.Array\n      withoutFlex\n      value={[\n        {\n          name: 'Iron Man',\n          age: 45,\n        },\n        {\n          name: 'Captain America',\n          age: 123,\n        },\n        {\n          name: 'The Hulk',\n          age: 3337,\n        },\n      ]}\n    >\n      <Tr>\n        <Td>\n          <Value.String itemPath=\"/name\" />\n        </Td>\n        <Td>\n          <Value.Number itemPath=\"/age\" />\n        </Td>\n      </Tr>\n    </Iterate.Array>\n  </tbody>\n</Table>\n"}),c=()=>(0,o.jsx)(a.Z,{scope:{Iterate:r,Value:i},children:"<Iterate.Array\n  value={[\n    {\n      accountName: 'Brukskonto',\n      accountNumber: '90901134567',\n    },\n    {\n      accountName: 'Sparekonto',\n      accountNumber: '90901156789',\n    },\n  ]}\n  onChange={(value) => console.log('onChange', value)}\n>\n  <Field.Composition>\n    <Field.BankAccountNumber itemPath=\"/accountNumber\" />\n    <Field.String label=\"Account name\" itemPath=\"/accountName\" />\n  </Field.Composition>\n</Iterate.Array>\n"}),h=()=>(0,o.jsx)(a.Z,{scope:{Iterate:r},children:"<Iterate.Array\n  value={['foo', 'bar']}\n  onChange={(value) => console.log('onChange', value)}\n>\n  {(elementValue) => <Field.String value={elementValue} />}\n</Iterate.Array>\n"}),p=()=>(0,o.jsx)(a.Z,{scope:{Iterate:r},children:"<Iterate.Array\n  value={[\n    {\n      num: 1,\n      txt: 'One',\n    },\n    {\n      num: 2,\n      txt: 'Two',\n    },\n  ]}\n  onChange={(value) => console.log('onChange', value)}\n>\n  {({ num, txt }) => (\n    <Field.Composition width=\"large\">\n      <Field.Number value={num} width=\"small\" />\n      <Field.String value={txt} width={false} />\n    </Field.Composition>\n  )}\n</Iterate.Array>\n"}),x=()=>(0,o.jsx)(a.Z,{scope:{Iterate:r},"data-visual-test":"animated-container",children:'<Form.Handler\n  data={{\n    avengers: [\n      {\n        nickname: \'Iron Man\',\n        firstName: \'Tony\',\n        lastName: \'Stark\',\n      },\n      {\n        nickname: \'Captain America\',\n        firstName: \'Steve\',\n        lastName: \'Rogers\',\n      },\n    ],\n  }}\n  onChange={(data) => console.log(\'DataContext/onChange\', data)}\n>\n  <Flex.Vertical>\n    <Form.MainHeading>Avengers</Form.MainHeading>\n\n    <Card stack>\n      <Iterate.Array\n        path="/avengers"\n        onChange={(value) => console.log(\'Iterate/onChange\', value)}\n      >\n        <Iterate.AnimatedContainer\n          title={\n            <Value.String itemPath="/nickname" placeholder="A Nick name" />\n          }\n        >\n          <Field.String\n            itemPath="/nickname"\n            width="medium"\n            label="Nick name"\n          />\n\n          <Field.Composition>\n            <Field.String\n              itemPath="/firstName"\n              width="medium"\n              label="First name"\n            />\n            <Field.String\n              itemPath="/lastName"\n              width="medium"\n              label="Last name"\n            />\n          </Field.Composition>\n\n          <Iterate.Toolbar>\n            <Iterate.RemoveButton />\n          </Iterate.Toolbar>\n        </Iterate.AnimatedContainer>\n      </Iterate.Array>\n\n      <Iterate.PushButton\n        text="Add another avenger"\n        path="/avengers"\n        pushValue={{}}\n      />\n    </Card>\n  </Flex.Vertical>\n</Form.Handler>\n'}),g=()=>(0,o.jsx)(a.Z,{scope:{Iterate:r},"data-visual-test":"view-and-edit-container",noInline:!0,children:'const MyEditItem = () => {\n  return (\n    <Iterate.EditContainer\n      title="Edit account holder"\n      titleWhenNew="New account holder"\n    >\n      <Field.Composition>\n        <Field.String\n          itemPath="/firstName"\n          width="medium"\n          label="First name"\n        />\n        <Field.String\n          itemPath="/lastName"\n          width="medium"\n          label="Last name"\n          required\n        />\n      </Field.Composition>\n    </Iterate.EditContainer>\n  )\n}\nconst MyViewItem = () => {\n  return (\n    <Iterate.ViewContainer title="Account holder">\n      <Value.SummaryList>\n        <Value.String label="First name" itemPath="/firstName" showEmpty />\n        <Value.String\n          label="Last name"\n          itemPath="/lastName"\n          placeholder="-"\n        />\n      </Value.SummaryList>\n    </Iterate.ViewContainer>\n  )\n}\nconst MyForm = () => {\n  return (\n    <Form.Handler\n      data={{\n        accounts: [\n          {\n            firstName: \'Tony\',\n            lastName: undefined, // initiate error\n          },\n        ],\n      }}\n      onChange={(data) => console.log(\'DataContext/onChange\', data)}\n      onSubmit={async (data) => console.log(\'onSubmit\', data)}\n    >\n      <Flex.Vertical>\n        <Form.MainHeading>Accounts</Form.MainHeading>\n\n        <Card stack>\n          <Iterate.Array path="/accounts">\n            <MyViewItem />\n            <MyEditItem />\n          </Iterate.Array>\n\n          <Iterate.PushButton\n            text="Add another account"\n            path="/accounts"\n            pushValue={{}}\n          />\n        </Card>\n\n        <Form.SubmitButton variant="send" />\n      </Flex.Vertical>\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n'})}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-iterate-array-demos-mdx-ca1dc74055f9e3aaba4c.js.map