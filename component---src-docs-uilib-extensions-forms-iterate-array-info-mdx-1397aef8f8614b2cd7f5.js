"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[6931],{10806:function(e,n,r){r.r(n);var t=r(52322),a=r(45392);function i(e){const n=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",h3:"h3",a:"a"},(0,a.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{children:"Description"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Iterate.Array"})," works in many ways similar to field-components. It has a ",(0,t.jsx)(n.code,{children:"value"}),"-prop that can receive an array or you can give it a ",(0,t.jsx)(n.code,{children:"path"})," if you want it to retrieve an array from a surrounding ",(0,t.jsx)(n.code,{children:"DataContext"}),". All children components of ",(0,t.jsx)(n.code,{children:"Iterate.Array"})," are rendered once per element the array-value consists of."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Iterate, Field } from '@dnb/eufemia/extensions/forms'\n\nrender(\n  <Iterate.Array\n    label=\"Array label\"\n    value={['Iron Man', 'Captain America', 'The Hulk']}\n  >\n    <Field.String itemPath=\"/\" />\n  </Iterate.Array>,\n)\n"})}),"\n",(0,t.jsxs)(n.h2,{children:["About ",(0,t.jsx)(n.code,{children:"itemPath"})," and ",(0,t.jsx)(n.code,{children:"path"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"itemPath"})," points to the root of each iterated element, while ",(0,t.jsx)(n.code,{children:"path"}),"\npoints to the root of the data source:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Iterate, Field, Form } from '@dnb/eufemia/extensions/forms'\n\nrender(\n  <Form.Handler\n    defaultData={{\n      listOfHeroes: [\n        { name: 'Iron Man' },\n        { name: 'Captain America' },\n        { name: 'The Hulk' },\n      ],\n    }}\n    onChange={console.log}\n  >\n    <Iterate.Array path=\"/listOfHeroes\">\n      <Field.String itemPath=\"/name\" />\n    </Iterate.Array>\n  </Form.Handler>,\n)\n"})}),"\n",(0,t.jsx)(n.h2,{children:"Individual values and dynamic paths"}),"\n",(0,t.jsxs)(n.p,{children:["Since ",(0,t.jsx)(n.code,{children:"Iterate.Array"})," renders its children once per element, the field components inside must receive values based on the different elements in the array. This can be done in two ways:"]}),"\n",(0,t.jsx)(n.h3,{children:"1. itemPath"}),"\n",(0,t.jsxs)(n.p,{children:["If field components inside ",(0,t.jsx)(n.code,{children:"Iterate.Array"})," are given an ",(0,t.jsx)(n.code,{children:"itemPath"})," prop, this will look for values based on the array element being the root of the structure, even if the array often comes from a surrounding data set. This means that you do not need to think about which index the field should point to, because it is handled by ",(0,t.jsx)(n.code,{children:"Iterate.Array"})," internally. You can look at the individual element as its own structure."]}),"\n",(0,t.jsx)(n.h3,{children:"2. Render props"}),"\n",(0,t.jsxs)(n.p,{children:["If you want to be able to provide values to the individual field component directly instead of pointing to them with paths, you can give ",(0,t.jsx)(n.code,{children:"Iterate.Array"})," a render prop. It works a bit like an array-map call. The render function receives the value of the element as the first argument, and the index of which element you are on as the second."]}),"\n",(0,t.jsxs)(n.p,{children:["Examples of both the use of ",(0,t.jsx)(n.code,{children:"itemPath"})," and Render Props in ",(0,t.jsx)(n.code,{children:"Iterate.Array"})," can be found on ",(0,t.jsx)(n.a,{href:"/uilib/extensions/forms/Iterate/Array/demos",children:"demos"}),"."]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(i,e)})):i(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-iterate-array-info-mdx-1397aef8f8614b2cd7f5.js.map