"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[6931],{10806:function(e,n,t){t.r(n);var r=t(52322),i=t(45392);function a(e){const n=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",h3:"h3",a:"a",ul:"ul",li:"li"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Iterate.Array"})," works in many ways similar to field-components. It has a ",(0,r.jsx)(n.code,{children:"value"}),"-prop that can receive an array or you can give it a ",(0,r.jsx)(n.code,{children:"path"})," if you want it to retrieve an array from a surrounding ",(0,r.jsx)(n.code,{children:"DataContext"}),". All children components of ",(0,r.jsx)(n.code,{children:"Iterate.Array"})," are rendered once per item the array-value consists of."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Iterate, Field } from '@dnb/eufemia/extensions/forms'\n\nrender(\n  <Iterate.Array\n    label=\"Array label\"\n    value={['Iron Man', 'Captain America', 'The Hulk']}\n  >\n    <Field.String itemPath=\"/\" />\n  </Iterate.Array>,\n)\n"})}),"\n",(0,r.jsxs)(n.h2,{children:["About ",(0,r.jsx)(n.code,{children:"itemPath"})," and ",(0,r.jsx)(n.code,{children:"path"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"itemPath"})," points to the root of each iterated item, while ",(0,r.jsx)(n.code,{children:"path"}),"\npoints to the root of the data source:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Iterate, Field, Form } from '@dnb/eufemia/extensions/forms'\n\nrender(\n  <Form.Handler\n    defaultData={{\n      listOfHeroes: [\n        { name: 'Iron Man' },\n        { name: 'Captain America' },\n        { name: 'The Hulk' },\n      ],\n    }}\n    onChange={console.log}\n  >\n    <Iterate.Array path=\"/listOfHeroes\">\n      <Field.Name.Last itemPath=\"/name\" />\n    </Iterate.Array>\n  </Form.Handler>,\n)\n"})}),"\n",(0,r.jsx)(n.h2,{children:"Individual values and dynamic paths"}),"\n",(0,r.jsxs)(n.p,{children:["Since ",(0,r.jsx)(n.code,{children:"Iterate.Array"})," renders its children once per item, the field components inside must receive values based on the different items in the array. This can be done in two ways:"]}),"\n",(0,r.jsx)(n.h3,{children:"1. itemPath"}),"\n",(0,r.jsxs)(n.p,{children:["If field components inside ",(0,r.jsx)(n.code,{children:"Iterate.Array"})," are given an ",(0,r.jsx)(n.code,{children:"itemPath"})," prop, this will look for values based on the array item being the root of the structure, even if the array often comes from a surrounding data set. This means that you do not need to think about which index the field should point to, because it is handled by ",(0,r.jsx)(n.code,{children:"Iterate.Array"})," internally. You can look at the individual item as its own structure."]}),"\n",(0,r.jsx)(n.h3,{children:"2. Render props"}),"\n",(0,r.jsxs)(n.p,{children:["If you want to be able to provide values to the individual field component directly instead of pointing to them with paths, you can give ",(0,r.jsx)(n.code,{children:"Iterate.Array"})," a render prop. It works a bit like an array-map call. The render function receives the value of the item as the first argument, and the index of which item you are on as the second."]}),"\n",(0,r.jsxs)(n.p,{children:["Examples of both the use of ",(0,r.jsx)(n.code,{children:"itemPath"})," and Render Props in ",(0,r.jsx)(n.code,{children:"Iterate.Array"})," can be found on ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/Iterate/Array/demos",children:"demos"}),"."]}),"\n",(0,r.jsx)(n.h2,{children:"The item number in labels"}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.code,{children:"{itemNr}"})," variable in the label to display the current item number. This is useful when you have a list of items and you want to display the item number in the label."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Iterate, Field } from '@dnb/eufemia/extensions/forms'\n\nrender(\n  <Iterate.Array value={['foo', 'bar']}>\n    <Field.String itemPath=\"/\" label=\"Item no. {itemNr}\" />\n  </Iterate.Array>,\n)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/Iterate/ViewContainer",children:"ViewContainer"})," and the ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/Iterate/EditContainer",children:"EditContainer"})," also supports ",(0,r.jsx)(n.code,{children:"{itemNr}"})," in the ",(0,r.jsx)(n.code,{children:"title"})," property to display the current item number."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Iterate, Field } from '@dnb/eufemia/extensions/forms'\n\nrender(\n  <Iterate.Array value={['foo', 'bar']}>\n    <Iterate.ViewContainer title=\"Item no. {itemNr}\">\n      ...\n    </Iterate.ViewContainer>\n  </Iterate.Array>,\n)\n"})}),"\n",(0,r.jsx)(n.h3,{children:"Initial container mode"}),"\n",(0,r.jsxs)(n.p,{children:["This section describes the behavior of the ",(0,r.jsx)(n.code,{children:"EditContainer"})," and the ",(0,r.jsx)(n.code,{children:"ViewContainer"})," components."]}),"\n",(0,r.jsxs)(n.p,{children:["By default, the container mode is set to ",(0,r.jsx)(n.code,{children:"auto"}),". This means that the container will open (switch to ",(0,r.jsx)(n.code,{children:"edit"})," mode) when there is an error in the container or the value is falsy (empty string, null, undefined, etc.)."]}),"\n",(0,r.jsxs)(n.p,{children:["When a new item is added via the ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/Iterate/PushButton/",children:"Iterate.PushButton"})," component, the item before it will change to ",(0,r.jsx)(n.code,{children:"view"})," mode, if it had no validation errors."]}),"\n",(0,r.jsx)(n.h2,{children:"Filter data"}),"\n",(0,r.jsx)(n.p,{children:"You can filter data by paths specific or all paths."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/myList/0"})," will filter out the first item of the list, including ",(0,r.jsx)(n.code,{children:"foo"})," and ",(0,r.jsx)(n.code,{children:"bar"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/myList/1/foo"})," will filter out ",(0,r.jsx)(n.code,{children:"foo"})," inside the second item of the list."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/myList/*/foo"})," will filter out all ",(0,r.jsx)(n.code,{children:"foo"})," object keys from all items of the list."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/myList/*/subList/*/foo"})," does support multi wildcard paths."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["In the example below, the data given in ",(0,r.jsx)(n.code,{children:"onSubmit"}),' will still have "foo2" and "bar2" of the list.']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Iterate, Form, Field } from '@dnb/eufemia/extensions/forms'\n\nconst myFilter = {\n  '/myList/0': false,\n}\n\nrender(\n  <Form.Handler\n    data={{\n      myList: [\n        { foo: 'foo1', bar: 'bar1' },\n        { foo: 'foo2', bar: 'bar2' },\n      ],\n    }}\n    onSubmit={(data, { filterData }) => {\n      console.log('onSubmit', filterData(myFilter))\n    }}\n  >\n    <Iterate.Array path=\"/myList\">\n      <Field.String itemPath=\"/foo\" label=\"Foo no. {itemNr}\" />\n      <Field.String itemPath=\"/bar\" label=\"Bar no. {itemNr}\" />\n    </Iterate.Array>\n  </Form.Handler>,\n)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Instead of ",(0,r.jsx)(n.code,{children:"false"})," you can provide a function that returns ",(0,r.jsx)(n.code,{children:"false"})," based on your logic."]})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(a,e)})):a(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-iterate-array-info-mdx-1d06699a5df8fd00e80d.js.map