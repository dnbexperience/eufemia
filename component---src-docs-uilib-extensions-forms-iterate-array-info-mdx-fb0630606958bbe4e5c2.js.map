{"version":3,"file":"component---src-docs-uilib-extensions-forms-iterate-array-info-mdx-fb0630606958bbe4e5c2.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/Array/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    h3: \"h3\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" works in many ways similar to field-components. It has a \", _jsx(_components.code, {\n        children: \"value\"\n      }), \"-prop that can receive an array or you can give it a \", _jsx(_components.code, {\n        children: \"path\"\n      }), \" if you want it to retrieve an array from a surrounding \", _jsx(_components.code, {\n        children: \"DataContext\"\n      }), \". All children components of \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" are rendered once per element the array-value consists of.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Field } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Iterate.Array\\n    label=\\\"Array label\\\"\\n    value={['Iron Man', 'Captain America', 'The Hulk']}\\n  >\\n    <Field.String itemPath=\\\"/\\\" />\\n  </Iterate.Array>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"About \", _jsx(_components.code, {\n        children: \"itemPath\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"path\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"itemPath\"\n      }), \" points to the root of each iterated element, while \", _jsx(_components.code, {\n        children: \"path\"\n      }), \"\\npoints to the root of the data source:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Field, Form } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Handler\\n    defaultData={{\\n      listOfHeroes: [\\n        { name: 'Iron Man' },\\n        { name: 'Captain America' },\\n        { name: 'The Hulk' },\\n      ],\\n    }}\\n    onChange={console.log}\\n  >\\n    <Iterate.Array path=\\\"/listOfHeroes\\\">\\n      <Field.String itemPath=\\\"/name\\\" />\\n    </Iterate.Array>\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Individual values and dynamic paths\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" renders its children once per element, the field components inside must receive values based on the different elements in the array. This can be done in two ways:\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"1. itemPath\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If field components inside \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" are given an \", _jsx(_components.code, {\n        children: \"itemPath\"\n      }), \" prop, this will look for values based on the array element being the root of the structure, even if the array often comes from a surrounding data set. This means that you do not need to think about which index the field should point to, because it is handled by \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" internally. You can look at the individual element as its own structure.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"2. Render props\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you want to be able to provide values to the individual field component directly instead of pointing to them with paths, you can give \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" a render prop. It works a bit like an array-map call. The render function receives the value of the element as the first argument, and the index of which element you are on as the second.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Examples of both the use of \", _jsx(_components.code, {\n        children: \"itemPath\"\n      }), \" and Render Props in \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" can be found on \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/Array/demos\",\n        children: \"demos\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Number in labels\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the \", _jsx(_components.code, {\n        children: \"{itemNr}\"\n      }), \" variable in the label to display the current item number. This is useful when you have a list of items and you want to display the item number in the label.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Field } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Iterate.Array value={['foo', 'bar']}>\\n    <Field.String itemPath=\\\"/\\\" label=\\\"Item no. {itemNr}\\\" />\\n  </Iterate.Array>,\\n)\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","pre","h3","a","_provideComponents","components","_jsxs","_Fragment","children","_jsx","className","href","wrapper","MDXLayout"],"sourceRoot":""}