{"version":3,"file":"component---src-docs-uilib-extensions-forms-iterate-array-mdx-51c07e9163561af29d67.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/Array.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/Array/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/Array/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/AnimatedContainer/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/Array/Examples.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/Iterate/Array/info';\nimport Demos from 'Docs/uilib/extensions/forms/Iterate/Array/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.AnimatedContainer) _missingMdxReference(\"Examples.AnimatedContainer\", true);\n  if (!Examples.ArrayFromFormHandler) _missingMdxReference(\"Examples.ArrayFromFormHandler\", true);\n  if (!Examples.DynamicPathValue) _missingMdxReference(\"Examples.DynamicPathValue\", true);\n  if (!Examples.ObjectElements) _missingMdxReference(\"Examples.ObjectElements\", true);\n  if (!Examples.PrimitiveElementsFields) _missingMdxReference(\"Examples.PrimitiveElementsFields\", true);\n  if (!Examples.PrimitiveElementsValues) _missingMdxReference(\"Examples.PrimitiveElementsValues\", true);\n  if (!Examples.RenderPropsObjectElements) _missingMdxReference(\"Examples.RenderPropsObjectElements\", true);\n  if (!Examples.RenderPropsPrimitiveElements) _missingMdxReference(\"Examples.RenderPropsPrimitiveElements\", true);\n  if (!Examples.ValueComposition) _missingMdxReference(\"Examples.ValueComposition\", true);\n  if (!Examples.ViewAndEditContainer) _missingMdxReference(\"Examples.ViewAndEditContainer\", true);\n  if (!Examples.WithTable) _missingMdxReference(\"Examples.WithTable\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Primitive elements as fields\"\n    }), \"\\n\", _jsx(Examples.PrimitiveElementsFields, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Primitive elements as values\"\n    }), \"\\n\", _jsx(Examples.PrimitiveElementsValues, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Object elements\"\n    }), \"\\n\", _jsx(Examples.ObjectElements, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Render props with primitive elements\"\n    }), \"\\n\", _jsx(Examples.RenderPropsPrimitiveElements, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Render props with object elements\"\n    }), \"\\n\", _jsx(Examples.RenderPropsObjectElements, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Dynamic path value\"\n    }), \"\\n\", _jsx(Examples.DynamicPathValue, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Animated container\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"With an optional \", _jsx(_components.code, {\n        children: \"title\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/Toolbar/\",\n        children: \"Iterate.Toolbar\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Examples.AnimatedContainer, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Toggle between a view and edit container\"\n    }), \"\\n\", _jsx(Examples.ViewAndEditContainer, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With DataContext and add/remove buttons\"\n    }), \"\\n\", _jsx(Examples.ArrayFromFormHandler, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Static generated in a Table\"\n    }), \"\\n\", _jsx(Examples.WithTable, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Value composition\"\n    }), \"\\n\", _jsx(Examples.ValueComposition, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    h3: \"h3\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" works in many ways similar to field-components. It has a \", _jsx(_components.code, {\n        children: \"value\"\n      }), \"-prop that can receive an array or you can give it a \", _jsx(_components.code, {\n        children: \"path\"\n      }), \" if you want it to retrieve an array from a surrounding \", _jsx(_components.code, {\n        children: \"DataContext\"\n      }), \". All children components of \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" are rendered once per element the array-value consists of.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Field } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Iterate.Array\\n    label=\\\"Array label\\\"\\n    value={['Iron Man', 'Captain America', 'The Hulk']}\\n  >\\n    <Field.String itemPath=\\\"/\\\" />\\n  </Iterate.Array>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"About \", _jsx(_components.code, {\n        children: \"itemPath\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"path\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"itemPath\"\n      }), \" points to the root of each iterated element, while \", _jsx(_components.code, {\n        children: \"path\"\n      }), \"\\npoints to the root of the data source:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Field, Form } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Handler\\n    defaultData={{\\n      listOfHeroes: [\\n        { name: 'Iron Man' },\\n        { name: 'Captain America' },\\n        { name: 'The Hulk' },\\n      ],\\n    }}\\n    onChange={console.log}\\n  >\\n    <Iterate.Array path=\\\"/listOfHeroes\\\">\\n      <Field.String itemPath=\\\"/name\\\" />\\n    </Iterate.Array>\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Individual values and dynamic paths\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" renders its children once per element, the field components inside must receive values based on the different elements in the array. This can be done in two ways:\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"1. itemPath\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If field components inside \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" are given an \", _jsx(_components.code, {\n        children: \"itemPath\"\n      }), \" prop, this will look for values based on the array element being the root of the structure, even if the array often comes from a surrounding data set. This means that you do not need to think about which index the field should point to, because it is handled by \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" internally. You can look at the individual element as its own structure.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"2. Render props\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you want to be able to provide values to the individual field component directly instead of pointing to them with paths, you can give \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" a render prop. It works a bit like an array-map call. The render function receives the value of the element as the first argument, and the index of which element you are on as the second.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Examples of both the use of \", _jsx(_components.code, {\n        children: \"itemPath\"\n      }), \" and Render Props in \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" can be found on \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/Array/demos\",\n        children: \"demos\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Number in labels\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the \", _jsx(_components.code, {\n        children: \"{itemNr}\"\n      }), \" variable in the label to display the current item number. This is useful when you have a list of items and you want to display the item number in the label.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Field } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Iterate.Array value={['foo', 'bar']}>\\n    <Field.String itemPath=\\\"/\\\" label=\\\"Item no. {itemNr}\\\" />\\n  </Iterate.Array>,\\n)\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Card } from '@dnb/eufemia/src'\nimport { Field, Form, Iterate } from '@dnb/eufemia/src/extensions/forms'\n\nexport const Default = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      {() => {\n        const MyForm = () => {\n          const { count } = Iterate.useCount('myForm')\n          return (\n            <Form.Handler\n              defaultData={{\n                myList: ['Item 1'],\n              }}\n              id=\"myForm\"\n            >\n              <Card stack>\n                <Iterate.Array\n                  path=\"/myList\"\n                  placeholder={<>Empty list</>}\n                >\n                  <Iterate.AnimatedContainer title=\"Title\">\n                    <Field.String label=\"Label\" itemPath=\"/\" />\n\n                    <Iterate.Toolbar>\n                      <Iterate.RemoveButton />\n                    </Iterate.Toolbar>\n                  </Iterate.AnimatedContainer>\n                </Iterate.Array>\n\n                <Iterate.PushButton\n                  path=\"/myList\"\n                  pushValue={'Item ' + String(count('/myList') + 1)}\n                  text=\"Add new item\"\n                />\n              </Card>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Card, Flex, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport {\n  Iterate,\n  Field,\n  Value,\n  Form,\n} from '@dnb/eufemia/src/extensions/forms'\nexport { Default as AnimatedContainer } from '../AnimatedContainer/Examples'\n\nexport const PrimitiveElementsFields = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Iterate.Array\n        value={['Iron Man', 'Captain America', 'The Hulk']}\n        onChange={console.log}\n      >\n        <Field.String itemPath=\"/\" />\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const PrimitiveElementsValues = () => {\n  return (\n    <ComponentBox\n      scope={{ Iterate }}\n      data-visual-test=\"primitive-element-values\"\n    >\n      <Value.SummaryList>\n        <Iterate.Array value={['Iron Man', 'Captain America', 'The Hulk']}>\n          <Value.String itemPath=\"/\" />\n        </Iterate.Array>\n      </Value.SummaryList>\n    </ComponentBox>\n  )\n}\n\nexport const ValueComposition = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Value.Composition>\n        <Iterate.Array\n          value={[\n            {\n              label: 'Label A',\n              value: 'value 1',\n            },\n            {\n              label: 'Label B',\n              value: 'value 2',\n            },\n          ]}\n        >\n          <Value.String\n            label={<Value.String itemPath=\"/label\" />}\n            itemPath=\"/value\"\n          />\n        </Iterate.Array>\n      </Value.Composition>\n    </ComponentBox>\n  )\n}\n\nexport const WithTable = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Table>\n        <thead>\n          <Tr>\n            <Th>Name</Th>\n            <Th>Age</Th>\n          </Tr>\n        </thead>\n        <tbody>\n          <Iterate.Array\n            withoutFlex\n            value={[\n              { name: 'Iron Man', age: 45 },\n              { name: 'Captain America', age: 123 },\n              { name: 'The Hulk', age: 3337 },\n            ]}\n          >\n            <Tr>\n              <Td>\n                <Value.String itemPath=\"/name\" />\n              </Td>\n              <Td>\n                <Value.Number itemPath=\"/age\" />\n              </Td>\n            </Tr>\n          </Iterate.Array>\n        </tbody>\n      </Table>\n    </ComponentBox>\n  )\n}\n\nexport const ObjectElements = () => {\n  return (\n    <ComponentBox scope={{ Iterate, Value }}>\n      <Iterate.Array\n        value={[\n          {\n            accountName: 'Brukskonto',\n            accountNumber: '90901134567',\n          },\n          {\n            accountName: 'Sparekonto',\n            accountNumber: '90901156789',\n          },\n        ]}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        <Field.Composition>\n          <Field.BankAccountNumber itemPath=\"/accountNumber\" />\n          <Field.String label=\"Account name\" itemPath=\"/accountName\" />\n        </Field.Composition>\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const RenderPropsPrimitiveElements = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Iterate.Array\n        value={['foo', 'bar']}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        {(elementValue) => <Field.String value={elementValue} />}\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const RenderPropsObjectElements = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Iterate.Array\n        value={[\n          { num: 1, txt: 'One' },\n          { num: 2, txt: 'Two' },\n        ]}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        {({ num, txt }) => (\n          <Field.Composition width=\"large\">\n            <Field.Number value={num} width=\"small\" />\n            <Field.String value={txt} width={false} />\n          </Field.Composition>\n        )}\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const ArrayFromFormHandler = () => {\n  return (\n    <ComponentBox\n      scope={{ Iterate }}\n      data-visual-test=\"animated-container\"\n    >\n      <Form.Handler\n        data={{\n          avengers: [\n            {\n              nickname: 'Iron Man',\n              firstName: 'Tony',\n              lastName: 'Stark',\n            },\n            {\n              nickname: 'Captain America',\n              firstName: 'Steve',\n              lastName: 'Rogers',\n            },\n          ],\n        }}\n        onChange={(data) => console.log('DataContext/onChange', data)}\n      >\n        <Flex.Vertical>\n          <Form.MainHeading>Avengers</Form.MainHeading>\n\n          <Card stack>\n            <Iterate.Array\n              path=\"/avengers\"\n              onChange={(value) => console.log('Iterate/onChange', value)}\n            >\n              <Iterate.AnimatedContainer\n                title={\n                  <Value.String\n                    itemPath=\"/nickname\"\n                    placeholder=\"A Nick name\"\n                  />\n                }\n              >\n                <Field.Name\n                  itemPath=\"/nickname\"\n                  width=\"medium\"\n                  label=\"Nick name\"\n                />\n\n                <Field.Composition>\n                  <Field.Name.First itemPath=\"/firstName\" width=\"medium\" />\n                  <Field.Name.Last itemPath=\"/lastName\" width=\"medium\" />\n                </Field.Composition>\n\n                <Iterate.Toolbar>\n                  <Iterate.RemoveButton />\n                </Iterate.Toolbar>\n              </Iterate.AnimatedContainer>\n            </Iterate.Array>\n\n            <Iterate.PushButton\n              text=\"Add another avenger\"\n              path=\"/avengers\"\n              pushValue={{}}\n            />\n          </Card>\n        </Flex.Vertical>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const ViewAndEditContainer = () => {\n  return (\n    <ComponentBox\n      scope={{ Iterate }}\n      data-visual-test=\"view-and-edit-container\"\n    >\n      {() => {\n        const MyEditItem = () => {\n          return (\n            <Iterate.EditContainer\n              title=\"Edit account holder\"\n              titleWhenNew=\"New account holder\"\n            >\n              <Field.Composition>\n                <Field.Name.First itemPath=\"/firstName\" width=\"medium\" />\n                <Field.Name.Last\n                  itemPath=\"/lastName\"\n                  width=\"medium\"\n                  required\n                />\n              </Field.Composition>\n            </Iterate.EditContainer>\n          )\n        }\n\n        const MyViewItem = () => {\n          return (\n            <Iterate.ViewContainer title=\"Account holder\">\n              <Value.SummaryList>\n                <Value.Name.First itemPath=\"/firstName\" showEmpty />\n                <Value.Name.Last itemPath=\"/lastName\" placeholder=\"-\" />\n              </Value.SummaryList>\n            </Iterate.ViewContainer>\n          )\n        }\n\n        const MyForm = () => {\n          return (\n            <Form.Handler\n              data={{\n                accounts: [\n                  {\n                    firstName: 'Tony',\n                    lastName: undefined, // initiate error\n                  },\n                ],\n              }}\n              onChange={(data) =>\n                console.log('DataContext/onChange', data)\n              }\n              onSubmit={async (data) => console.log('onSubmit', data)}\n            >\n              <Flex.Vertical>\n                <Form.MainHeading>Accounts</Form.MainHeading>\n\n                <Card stack>\n                  <Iterate.Array path=\"/accounts\">\n                    <MyViewItem />\n                    <MyEditItem />\n                  </Iterate.Array>\n\n                  <Iterate.PushButton\n                    text=\"Add another account\"\n                    path=\"/accounts\"\n                    pushValue={{}}\n                  />\n                </Card>\n\n                <Form.SubmitButton variant=\"send\" />\n              </Flex.Vertical>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const DynamicPathValue = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Form.Handler defaultData={{ count: 0 }}>\n        <Flex.Stack>\n          <Field.Number path=\"/count\" width=\"small\" showStepControls />\n          <Iterate.Array\n            path=\"/items\"\n            countPath=\"/count\"\n            countPathTransform={({ value, index }) =>\n              Object.prototype.hasOwnProperty.call(value || {}, 'myObject')\n                ? value\n                : { myObject: index }\n            }\n          >\n            <Field.Number itemPath=\"/myObject\" label=\"Item no. {itemNr}\" />\n          </Iterate.Array>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","_components","h2","h3","p","code","a","Examples","_missingMdxReference","href","id","component","Error","pre","className","Default","ComponentBox","scope","Iterate","noInline","PrimitiveElementsFields","PrimitiveElementsValues","ValueComposition","WithTable","ObjectElements","Value","RenderPropsPrimitiveElements","RenderPropsObjectElements","ArrayFromFormHandler","ViewAndEditContainer","DynamicPathValue"],"sourceRoot":""}