{"version":3,"file":"component---src-docs-uilib-extensions-forms-iterate-array-mdx-fa3d3024553d2ec2b66e.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/Array.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/Array/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/Iterate/Array/info';\nimport Demos from 'Docs/uilib/extensions/forms/Iterate/Array/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    h3: \"h3\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" works in many ways similar to field-components. It has a \", _jsx(_components.code, {\n        children: \"value\"\n      }), \"-property that can receive an array or you can give it a \", _jsx(_components.code, {\n        children: \"path\"\n      }), \" if you want it to retrieve an array from a surrounding \", _jsx(_components.code, {\n        children: \"DataContext\"\n      }), \". All children components of \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" are rendered once per item the array-value consists of.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Field } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Iterate.Array\\n    label=\\\"Array label\\\"\\n    value={['Iron Man', 'Captain America', 'The Hulk']}\\n  >\\n    <Field.String itemPath=\\\"/\\\" />\\n  </Iterate.Array>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"About \", _jsx(_components.code, {\n        children: \"itemPath\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"path\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"itemPath\"\n      }), \" points to the root of each iterated item, while \", _jsx(_components.code, {\n        children: \"path\"\n      }), \"\\npoints to the root of the data source:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Field, Form } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Handler\\n    defaultData={{\\n      listOfHeroes: [\\n        { name: 'Iron Man' },\\n        { name: 'Captain America' },\\n        { name: 'The Hulk' },\\n      ],\\n    }}\\n    onChange={console.log}\\n  >\\n    <Iterate.Array path=\\\"/listOfHeroes\\\">\\n      <Field.Name.Last itemPath=\\\"/name\\\" />\\n    </Iterate.Array>\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Individual values and dynamic paths\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" renders its children once per item, the field components inside must receive values based on the different items in the array. This can be done in two ways:\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"1. itemPath\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If field components inside \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" are given an \", _jsx(_components.code, {\n        children: \"itemPath\"\n      }), \" property, this will look for values based on the array item being the root of the structure, even if the array often comes from a surrounding data set. This means that you do not need to think about which index the field should point to, because it is handled by \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" internally. You can look at the individual item as its own structure.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"2. Render properties\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you want to be able to provide values to the individual field component directly instead of pointing to them with paths, you can give \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" a render property. It works a bit like an array-map call. The render function receives the value of the item as the first argument, and the index of which item you are on as the second.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Examples of both the use of \", _jsx(_components.code, {\n        children: \"itemPath\"\n      }), \" and Render Props in \", _jsx(_components.code, {\n        children: \"Iterate.Array\"\n      }), \" can be found on \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/Array/demos\",\n        children: \"demos\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"The item number in labels\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the \", _jsx(_components.code, {\n        children: \"{itemNo}\"\n      }), \" variable in the label to display the current item number. This is useful when you have a list of items and you want to display the item number in the label.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Field } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Iterate.Array value={['foo', 'bar']}>\\n    <Field.String itemPath=\\\"/\\\" label=\\\"Item no. {itemNo}\\\" />\\n  </Iterate.Array>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/ViewContainer\",\n        children: \"ViewContainer\"\n      }), \" and the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/EditContainer\",\n        children: \"EditContainer\"\n      }), \" also supports \", _jsx(_components.code, {\n        children: \"{itemNo}\"\n      }), \" in the \", _jsx(_components.code, {\n        children: \"title\"\n      }), \" property to display the current item number.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Field } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Iterate.Array value={['foo', 'bar']}>\\n    <Iterate.ViewContainer title=\\\"Item no. {itemNo}\\\">\\n      ...\\n    </Iterate.ViewContainer>\\n  </Iterate.Array>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Initial container mode\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This section describes the behavior of the \", _jsx(_components.code, {\n        children: \"EditContainer\"\n      }), \" and the \", _jsx(_components.code, {\n        children: \"ViewContainer\"\n      }), \" components.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, the container mode is set to \", _jsx(_components.code, {\n        children: \"auto\"\n      }), \". This means that the container will open (switch to \", _jsx(_components.code, {\n        children: \"edit\"\n      }), \" mode) when there is an error in the container or the value is falsy (empty string, null, undefined, etc.).\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When a new item is added via the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/PushButton/\",\n        children: \"Iterate.PushButton\"\n      }), \" component, the item before it will change to \", _jsx(_components.code, {\n        children: \"view\"\n      }), \" mode, if it had no validation errors.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Filter data\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can filter data by paths specific or all paths.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"/myList/0\"\n        }), \" will filter out the first item of the list, including \", _jsx(_components.code, {\n          children: \"foo\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"bar\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"/myList/1/foo\"\n        }), \" will filter out \", _jsx(_components.code, {\n          children: \"foo\"\n        }), \" inside the second item of the list.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"/myList/*/foo\"\n        }), \" will filter out all \", _jsx(_components.code, {\n          children: \"foo\"\n        }), \" object keys from all items of the list.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"/myList/*/subList/*/foo\"\n        }), \" does support multi wildcard paths.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the example below, the data given in \", _jsx(_components.code, {\n        children: \"onSubmit\"\n      }), \" will still have \\\"foo2\\\" and \\\"bar2\\\" of the list.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Form, Field } from '@dnb/eufemia/extensions/forms'\\n\\nconst myFilter = {\\n  '/myList/0': false,\\n}\\n\\nrender(\\n  <Form.Handler\\n    data={{\\n      myList: [\\n        { foo: 'foo1', bar: 'bar1' },\\n        { foo: 'foo2', bar: 'bar2' },\\n      ],\\n    }}\\n    onSubmit={(data, { filterData }) => {\\n      console.log('onSubmit', filterData(myFilter))\\n    }}\\n  >\\n    <Iterate.Array path=\\\"/myList\\\">\\n      <Field.String itemPath=\\\"/foo\\\" label=\\\"Foo no. {itemNo}\\\" />\\n      <Field.String itemPath=\\\"/bar\\\" label=\\\"Bar no. {itemNo}\\\" />\\n    </Iterate.Array>\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Instead of \", _jsx(_components.code, {\n        children: \"false\"\n      }), \" you can provide a function that returns \", _jsx(_components.code, {\n        children: \"false\"\n      }), \" based on your logic.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","_components","h2","p","code","pre","h3","a","ul","li","className","href"],"sourceRoot":""}