{"version":3,"file":"component---src-docs-uilib-extensions-forms-iterate-array-properties-mdx-bc9e2f947a25bed7ed42.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/Array/properties.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/Array/ArrayDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueWritePropsDocs.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {ArrayProperties} from '@dnb/eufemia/src/extensions/forms/Iterate/Array/ArrayDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Iterate-specific properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: ArrayProperties\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../../shared/types'\nimport { DataValueWritePropsProperties } from '../../hooks/DataValueWritePropsDocs'\n\nexport const ArrayProperties: PropertiesTableProps = {\n  value: {\n    doc: 'The data to iterate over. Alternative you can use the `path` prop.',\n    type: 'array',\n    status: 'optional',\n  },\n  path: {\n    doc: 'A path (JSON Pointer) to the array to iterate over.',\n    type: 'string',\n    status: 'optional',\n  },\n  itemPath: {\n    doc: 'A path (JSON Pointer) to nested array items.',\n    type: 'string',\n    status: 'optional',\n  },\n  required: {\n    doc: \"If the array is required. It does not automatically inherit the `required` property in the same way that `Field.*` components do. You may provide a custom error message to give the user a more useful message than the default one: `errorMessages={{ 'Field.errorRequired': 'Custom message' }}`\",\n    type: 'boolean',\n    status: 'optional',\n  },\n  limit: {\n    doc: 'Limit the number of rendered items to iterate over. Defaults to `undefined`.',\n    type: 'number',\n    status: 'optional',\n  },\n  reverse: {\n    doc: 'When `true` it will reverse the order of the items.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  countPath: {\n    doc: 'A path (JSON Pointer) to the array length.',\n    type: 'string',\n    status: 'optional',\n  },\n  countPathTransform: {\n    doc: 'Will transform the current value before it is displayed.',\n    type: 'function',\n    status: 'optional',\n  },\n  countPathLimit: {\n    doc: 'Will limit the iterate amount by given \"countPathLimit\" value.',\n    type: 'number',\n    status: 'optional',\n  },\n  withoutFlex: {\n    doc: 'When `true` it will omit the Flex.Stack wrapper so it can be used for tables and lists.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  animate: {\n    doc: 'When `true` it will animate the height of the items.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  placeholder: {\n    doc: 'Will be shown if the value or data context value is empty.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'Will be used to compare the value in order to show the placeholder.',\n    type: 'unknown',\n    status: 'optional',\n  },\n  containerMode: {\n    doc: 'Defines the container mode for all nested containers. Can be `view`, `edit` or `auto`. When using `auto`, it will automatically open if there is an error in the container. When a new item is added, the item before it will change to `view` mode, if it had no validation errors. Defaults to `auto`.',\n    type: 'string',\n    status: 'optional',\n  },\n  onChangeValidator: DataValueWritePropsProperties.onChangeValidator,\n  validateInitially: DataValueWritePropsProperties.validateInitially,\n  validateContinuously: DataValueWritePropsProperties.validateContinuously,\n  children: {\n    doc: 'React.Node or a function so you can get the current value as the first function parameter, and the index as the second parameter as well as the array of internal items as the third parameter.',\n    type: ['React.ReactNode', 'function'],\n    status: 'optional',\n  },\n  '[Flex.Stack](/uilib/layout/flex/stack/properties)': {\n    doc: 'All Flex.Stack properties.',\n    type: 'Various',\n    status: 'optional',\n  },\n}\n\nexport const ArrayEvents: PropertiesTableProps = {\n  onChange: {\n    doc: 'Will be called when a value of a field was changed by the user, with the data set (including the changed value) as argument.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const DataValueWritePropsProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: \"Info message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  warning: {\n    doc: \"Warning message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  error: {\n    doc: \"Error message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['Error', 'FormError', 'Array<Error | FormError>', 'function'],\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set to `true`, the field will give an error if the value fails the required validation. When set to `false`, the field will not be required, but will add a \"(optional)\" suffix to the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSuffix: {\n    doc: 'Will append an additional text to the label, like \"(optional)\". When using `inheritLabel`, the suffix will not be inherited. NB: The visual appearance of the `labelSuffix` may change in the future.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set to `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set to `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateContinuously: {\n    doc: 'Set to `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages. The messages can be a React.ReactNode or a string.',\n    type: 'object',\n    status: 'optional',\n  },\n  onChangeValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered on every change done by the user. The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered when the user leaves a field (e.g., blurring a text input or closing a dropdown). The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'Transforms the value before it gets forwarded to the form data object (context) or returned as the `onChange` value parameter. The first parameter is the internal value. Some fields to support a second parameter, like the SelectCountry, where the country object is given.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const DataValueWritePropsEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).\",\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","ArrayProperties","wrapper","MDXLayout","Td","Th","Tr","value","doc","type","status","path","itemPath","required","limit","reverse","countPath","countPathTransform","countPathLimit","withoutFlex","animate","placeholder","emptyValue","containerMode","onChangeValidator","DataValueWritePropsProperties","validateInitially","validateContinuously","ArrayEvents","onChange","defaultValue","info","warning","error","disabled","labelSuffix","schema","validateUnchanged","errorMessages","onBlurValidator","transformIn","transformOut","DataValueWritePropsEvents","onFocus","onBlur"],"sourceRoot":""}