"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[99324],{46724:function(n,e,t){t.r(e);var r=t(31085),o=t(71184);function s(n){const e=Object.assign({h2:"h2",pre:"pre",code:"code",p:"p"},(0,o.R)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:"Import"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import { Iterate } from '@dnb/eufemia/extensions/forms'\nrender(<Iterate.Count />)\n"})}),"\n",(0,r.jsx)(e.h2,{children:"Description"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"Iterate.Count"})," is a helper component that returns the count of a data array or object."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import { Iterate } from '@dnb/eufemia/extensions/forms'\n\nconst MyComponent = () => {\n  return <Iterate.Count path=\"/myList\" />\n}\n\nrender(\n  <Form.Handler data={{ myList: ['foo', 'bar'] }}>\n    <MyComponent />\n  </Form.Handler>,\n)\n"})}),"\n",(0,r.jsx)(e.p,{children:"You can use the hook as well:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"const MyComponent = () => {\n  const { count } = Iterate.useCount() // id of the form is not needed when called inside a Form.Handler\n\n  return count('/myList')\n}\n\nrender(\n  <Form.Handler data={{ myList: ['foo', 'bar'] }}>\n    <MyComponent />\n  </Form.Handler>,\n)\n"})}),"\n",(0,r.jsxs)(e.p,{children:["You can also give a custom ",(0,r.jsx)(e.code,{children:"filter"})," function to count only specific items:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"<Iterate.Count path=\"/myList\" filter={(item) => item !== 'bar'} />\n"})}),"\n",(0,r.jsx)(e.p,{children:"Or give the hook a filter:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"const MyComponent = () => {\n  const { count } = Iterate.useCount()\n\n  return count('/myList', (item) => item !== 'bar')\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"You can also count over objects:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"<Form.Handler data={{ myList: { foo: 1, bar: 2 } }}>\n  <Iterate.Count path=\"/myList\" filter={([key, value]) => key !== 'bar'} />\n</Form.Handler>\n"})}),"\n",(0,r.jsx)(e.p,{children:"And you can call it outside of the context as well:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'render(\n  <>\n    <Form.Handler id="myForm" data={{ myList: [\'foo\', \'bar\'] }}>\n      Form Content\n    </Form.Handler>\n\n    <Iterate.Count path="/myList" id="myForm" />\n  </>,\n)\n'})}),"\n",(0,r.jsx)(e.p,{children:"And call it as a function as well (id is required):"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"const myFormId = 'unique-id' // or a function, object or React Context reference\n\nfunction MyForm() {\n  const count = Iterate.count({ id: myFormId, path: '/myList' })\n\n  return (\n    <Form.Handler id={myFormId} data={{ myList: ['foo', 'bar'] }}>\n      <MyComponent />\n    </Form.Handler>\n  )\n}\n"})})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.R)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(s,n)})):s(n)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-iterate-count-info-mdx-7a642e15d3dc4f9f486d.js.map