{"version":3,"file":"component---src-docs-uilib-extensions-forms-iterate-count-mdx-4efb0449e5dda9a5d154.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/Count.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/Count/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/Count/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/Count/demos.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/Iterate/Count/info';\nimport Demos from 'Docs/uilib/extensions/forms/Iterate/Count/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Iterate.Count\"\n      }), \" is a helper component that returns the count of a data array or object.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate } from '@dnb/eufemia/extensions/forms'\\n\\nconst MyComponent = () => {\\n  return <Iterate.Count path=\\\"/myList\\\" />\\n}\\n\\nrender(\\n  <Form.Handler data={{ myList: ['foo', 'bar'] }}>\\n    <MyComponent />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can use the hook as well:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const MyComponent = () => {\\n  const { count } = Iterate.useCount() // id of the form is not needed when called inside a Form.Handler\\n\\n  return count('/myList')\\n}\\n\\nrender(\\n  <Form.Handler data={{ myList: ['foo', 'bar'] }}>\\n    <MyComponent />\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also give a custom \", _jsx(_components.code, {\n        children: \"filter\"\n      }), \" function to count only specific items:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<Iterate.Count path=\\\"/myList\\\" filter={(item) => item !== 'bar'} />\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Or give the hook a filter:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const MyComponent = () => {\\n  const { count } = Iterate.useCount()\\n\\n  return count('/myList', (item) => item !== 'bar')\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can also count over objects:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<Form.Handler data={{ myList: { foo: 1, bar: 2 } }}>\\n  <Iterate.Count path=\\\"/myList\\\" filter={([key, value]) => key !== 'bar'} />\\n</Form.Handler>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"And you can call it outside of the context as well:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"render(\\n  <>\\n    <Form.Handler id=\\\"myForm\\\" data={{ myList: ['foo', 'bar'] }}>\\n      Form Content\\n    </Form.Handler>\\n\\n    <Iterate.Count path=\\\"/myList\\\" id=\\\"myForm\\\" />\\n  </>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"And call it as a function as well (id is required):\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const myFormId = 'unique-id' // or a function, object or React Context reference\\n\\nfunction MyForm() {\\n  const count = Iterate.count({ id: myFormId, path: '/myList' })\\n\\n  return (\\n    <Form.Handler id={myFormId} data={{ myList: ['foo', 'bar'] }}>\\n      <MyComponent />\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { Flex } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Form, Iterate, Value } from '@dnb/eufemia/src/extensions/forms'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler data={{ myList: ['foo', 'bar'] }}>\n        <Iterate.Count path=\"/myList\" />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Interactive = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyForm = () => {\n          const { count } = Iterate.useCount('myForm')\n          return (\n            <Form.Handler id=\"myForm\" data={{ myList: [1, 2] }}>\n              <output>\n                Total: <Iterate.Count path=\"/myList\" />\n              </output>\n\n              <Iterate.Array path=\"/myList\">\n                <Iterate.AnimatedContainer gap={false}>\n                  <Flex.Horizontal align=\"center\">\n                    <strong>\n                      <Value.Number itemPath=\"/\" />\n                    </strong>\n                    <Iterate.RemoveButton />\n                  </Flex.Horizontal>\n                </Iterate.AnimatedContainer>\n              </Iterate.Array>\n              <Iterate.PushButton\n                path=\"/myList\"\n                pushValue={() => {\n                  return (\n                    Iterate.count({ id: 'myForm', path: '/myList' }) + 1\n                  )\n                }}\n                top\n              >\n                Add item nr. {count('/myList') + 1}\n              </Iterate.PushButton>\n            </Form.Handler>\n          )\n        }\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.Default) _missingMdxReference(\"Examples.Default\", true);\n  if (!Examples.Interactive) _missingMdxReference(\"Examples.Interactive\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Default\"\n    }), \"\\n\", _jsx(Examples.Default, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Interactive\"\n    }), \"\\n\", _jsx(Examples.Interactive, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","_components","h2","p","code","pre","className","Default","ComponentBox","Interactive","noInline","h3","Examples","_missingMdxReference","id","component","Error"],"sourceRoot":""}