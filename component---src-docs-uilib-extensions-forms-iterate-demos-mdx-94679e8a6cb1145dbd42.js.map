{"version":3,"file":"component---src-docs-uilib-extensions-forms-iterate-demos-mdx-94679e8a6cb1145dbd42.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/AnimatedContainer/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/Section.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/Log.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/Array/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/GenerateSchema.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/ListAllProps.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {ViewAndEditContainer, PrimitiveItemsFields, PrimitiveItemsValues, WithTable} from './Array/Examples';\nimport {Default as AnimatedContainer} from './AnimatedContainer/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    h3: \"h3\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"NB:\"\n      }), \" There are many more demos in the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/Array/\",\n        children: \"Iterate.Array\"\n      }), \" component documentation and in each of the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/components/\",\n        children: \"iterate components\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Static generated fields\"\n    }), \"\\n\", _jsx(PrimitiveItemsFields, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Static generated values\"\n    }), \"\\n\", _jsx(PrimitiveItemsValues, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Static generated in a Table\"\n    }), \"\\n\", _jsx(WithTable, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Animated container\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/AnimatedContainer/\",\n        children: \"AnimatedContainer\"\n      }), \" with an optional \", _jsx(_components.code, {\n        children: \"title\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/Toolbar/\",\n        children: \"Toolbar\"\n      }), \".\"]\n    }), \"\\n\", _jsx(AnimatedContainer, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Toggle between a view and edit container\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/ViewContainer/\",\n        children: \"ViewContainer\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/EditContainer/\",\n        children: \"EditContainer\"\n      }), \".\"]\n    }), \"\\n\", _jsx(ViewAndEditContainer, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Card } from '@dnb/eufemia/src'\nimport { Field, Form, Iterate } from '@dnb/eufemia/src/extensions/forms'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyForm = () => {\n          const { count } = Iterate.useCount('myForm')\n          return (\n            <Form.Handler\n              defaultData={{\n                myList: ['Item 1'],\n              }}\n              id=\"myForm\"\n            >\n              <Card stack>\n                <Iterate.Array\n                  path=\"/myList\"\n                  placeholder={<>Empty list</>}\n                >\n                  <Iterate.AnimatedContainer title=\"Title {itemNr}\">\n                    <Field.String label=\"Label\" itemPath=\"/\" />\n\n                    <Iterate.Toolbar>\n                      <Iterate.RemoveButton />\n                    </Iterate.Toolbar>\n                  </Iterate.AnimatedContainer>\n                </Iterate.Array>\n\n                <Iterate.PushButton\n                  path=\"/myList\"\n                  pushValue={'Item ' + String(count('/myList') + 1)}\n                  text=\"Add new item\"\n                />\n              </Card>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n","/**\n * ATTENTION: This file is auto generated by using \"prepareTemplates\".\n * Do not change the content!\n *\n */\n\n/**\n * Library Index section to autogenerate all the components and extensions\n * Used by \"prepareSections\"\n */\n\nimport Section from './section/Section'\nexport * from './section/Section'\nexport default Section\n","import { useContext } from 'react'\nimport DataContext from '../DataContext/Context'\nimport Section, { SectionProps } from '../../../components/Section'\n\nfunction Log(props: SectionProps) {\n  const { data } = useContext(DataContext)\n\n  return (\n    <Section\n      element=\"output\"\n      backgroundColor=\"sand-yellow\"\n      style={{ maxWidth: '80vw' }}\n      innerSpace\n      {...props}\n    >\n      <pre>\n        {JSON.stringify(data)}\n        {' ' /* Ensure one line of spacing */}\n      </pre>\n    </Section>\n  )\n}\n\nLog._supportsSpacingProps = true\nexport default Log\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Card, Flex, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport {\n  Iterate,\n  Field,\n  Value,\n  Form,\n  Tools,\n} from '@dnb/eufemia/src/extensions/forms'\nexport { Default as AnimatedContainer } from '../AnimatedContainer/Examples'\n\nexport const PrimitiveItemsFields = () => {\n  return (\n    <ComponentBox>\n      <Iterate.Array\n        value={['Iron Man', 'Captain America', 'The Hulk']}\n        onChange={console.log}\n      >\n        <Field.String itemPath=\"/\" />\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const PrimitiveItemsValues = () => {\n  return (\n    <ComponentBox data-visual-test=\"primitive-element-values\">\n      <Value.SummaryList>\n        <Iterate.Array value={['Iron Man', 'Captain America', 'The Hulk']}>\n          <Value.String itemPath=\"/\" />\n        </Iterate.Array>\n      </Value.SummaryList>\n    </ComponentBox>\n  )\n}\n\nexport const ValueComposition = () => {\n  return (\n    <ComponentBox>\n      <Value.Composition>\n        <Iterate.Array\n          value={[\n            {\n              label: 'Label A',\n              value: 'value 1',\n            },\n            {\n              label: 'Label B',\n              value: 'value 2',\n            },\n          ]}\n        >\n          <Value.String\n            label={<Value.String itemPath=\"/label\" />}\n            itemPath=\"/value\"\n          />\n        </Iterate.Array>\n      </Value.Composition>\n    </ComponentBox>\n  )\n}\n\nexport const WithTable = () => {\n  return (\n    <ComponentBox>\n      <Table>\n        <thead>\n          <Tr>\n            <Th>Name</Th>\n            <Th>Age</Th>\n          </Tr>\n        </thead>\n        <tbody>\n          <Iterate.Array\n            withoutFlex\n            value={[\n              { name: 'Iron Man', age: 45 },\n              { name: 'Captain America', age: 123 },\n              { name: 'The Hulk', age: 3337 },\n            ]}\n          >\n            <Tr>\n              <Td>\n                <Value.Name.Last itemPath=\"/name\" />\n              </Td>\n              <Td>\n                <Value.Number itemPath=\"/age\" />\n              </Td>\n            </Tr>\n          </Iterate.Array>\n        </tbody>\n      </Table>\n    </ComponentBox>\n  )\n}\n\nexport const ObjectItems = () => {\n  return (\n    <ComponentBox>\n      <Iterate.Array\n        value={[\n          {\n            accountName: 'Brukskonto',\n            accountNumber: '90901134567',\n          },\n          {\n            accountName: 'Sparekonto',\n            accountNumber: '90901156789',\n          },\n        ]}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        <Field.Composition>\n          <Field.BankAccountNumber itemPath=\"/accountNumber\" />\n          <Field.String label=\"Account name\" itemPath=\"/accountName\" />\n        </Field.Composition>\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const RenderPropsPrimitiveItems = () => {\n  return (\n    <ComponentBox>\n      <Iterate.Array\n        value={['foo', 'bar']}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        {(elementValue) => <Field.String value={elementValue} />}\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const RenderPropsObjectItems = () => {\n  return (\n    <ComponentBox>\n      <Iterate.Array\n        value={[\n          { num: 1, txt: 'One' },\n          { num: 2, txt: 'Two' },\n        ]}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        {({ num, txt }) => (\n          <Field.Composition width=\"large\">\n            <Field.Number value={num} width=\"small\" />\n            <Field.String value={txt} width={false} />\n          </Field.Composition>\n        )}\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const ArrayFromFormHandler = () => {\n  return (\n    <ComponentBox data-visual-test=\"animated-container\">\n      <Form.Handler\n        data={{\n          avengers: [\n            {\n              nickname: 'Iron Man',\n              firstName: 'Tony',\n              lastName: 'Stark',\n            },\n            {\n              nickname: 'Captain America',\n              firstName: 'Steve',\n              lastName: 'Rogers',\n            },\n          ],\n        }}\n        onChange={(data) => console.log('DataContext/onChange', data)}\n      >\n        <Flex.Stack>\n          <Form.MainHeading>Avengers</Form.MainHeading>\n\n          <Card stack>\n            <Iterate.Array\n              path=\"/avengers\"\n              onChange={(value) => console.log('Iterate/onChange', value)}\n            >\n              <Iterate.AnimatedContainer\n                title={\n                  <Value.String\n                    label={false}\n                    itemPath=\"/nickname\"\n                    placeholder=\"A Nick name\"\n                  />\n                }\n              >\n                <Field.Name\n                  itemPath=\"/nickname\"\n                  width=\"medium\"\n                  label=\"Nick name\"\n                />\n\n                <Field.Composition>\n                  <Field.Name.First itemPath=\"/firstName\" width=\"medium\" />\n                  <Field.Name.Last itemPath=\"/lastName\" width=\"medium\" />\n                </Field.Composition>\n\n                <Iterate.Toolbar>\n                  <Iterate.RemoveButton />\n                </Iterate.Toolbar>\n              </Iterate.AnimatedContainer>\n            </Iterate.Array>\n\n            <Iterate.PushButton\n              text=\"Add another avenger\"\n              path=\"/avengers\"\n              pushValue={{}}\n            />\n          </Card>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const ViewAndEditContainer = () => {\n  return (\n    <ComponentBox data-visual-test=\"view-and-edit-container\">\n      {() => {\n        const MyEditItemForm = () => {\n          return (\n            <Field.Composition>\n              <Field.Name.First itemPath=\"/firstName\" width=\"medium\" />\n              <Field.Name.Last\n                itemPath=\"/lastName\"\n                width=\"medium\"\n                required\n              />\n            </Field.Composition>\n          )\n        }\n\n        const MyEditItem = () => {\n          return (\n            <Iterate.EditContainer\n              title=\"Edit account holder {itemNr}\"\n              titleWhenNew=\"New account holder {itemNr}\"\n            >\n              <MyEditItemForm />\n            </Iterate.EditContainer>\n          )\n        }\n\n        const MyViewItem = () => {\n          const item = Iterate.useItem()\n          console.log('index:', item.index)\n\n          return (\n            <Iterate.ViewContainer title=\"Account holder {itemNr}\">\n              <Value.SummaryList>\n                <Value.Name.First itemPath=\"/firstName\" showEmpty />\n                <Value.Name.Last itemPath=\"/lastName\" placeholder=\"-\" />\n              </Value.SummaryList>\n            </Iterate.ViewContainer>\n          )\n        }\n\n        const CreateNewEntry = () => {\n          return (\n            <Iterate.PushContainer\n              path=\"/accounts\"\n              title=\"New account holder\"\n              openButton={\n                <Iterate.PushContainer.OpenButton text=\"Add another account\" />\n              }\n              showOpenButtonWhen={(list) => list.length > 0}\n            >\n              <MyEditItemForm />\n            </Iterate.PushContainer>\n          )\n        }\n\n        const MyForm = () => {\n          return (\n            <Form.Handler\n              data={{\n                accounts: [\n                  {\n                    firstName: 'Tony',\n                    lastName: 'Rogers',\n                  },\n                ],\n              }}\n              onChange={(data) =>\n                console.log('DataContext/onChange', data)\n              }\n              onSubmit={async (data) => console.log('onSubmit', data)}\n            >\n              <Flex.Stack>\n                <Form.MainHeading>Accounts</Form.MainHeading>\n\n                <Card stack>\n                  <Iterate.Array path=\"/accounts\">\n                    <MyViewItem />\n                    <MyEditItem />\n                  </Iterate.Array>\n\n                  <CreateNewEntry />\n                </Card>\n\n                <Form.SubmitButton variant=\"send\" />\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const DynamicPathValue = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler defaultData={{ count: 0 }}>\n        <Flex.Stack>\n          <Field.Number path=\"/count\" width=\"small\" showStepControls />\n          <Iterate.Array\n            path=\"/items\"\n            countPath=\"/count\"\n            countPathTransform={({ value, index }) =>\n              Object.prototype.hasOwnProperty.call(value || {}, 'myObject')\n                ? value\n                : { myObject: index }\n            }\n          >\n            <Field.Number itemPath=\"/myObject\" label=\"Item no. {itemNr}\" />\n          </Iterate.Array>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithVisibility = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Iterate.Array path=\"/myList\" value={[{}]}>\n          <Flex.Stack>\n            <Field.Name.First\n              className=\"firstName\"\n              itemPath=\"/firstName\"\n            />\n\n            <Form.Visibility\n              animate\n              visibleWhen={{\n                itemPath: '/firstName',\n                hasValue: (value) => Boolean(value),\n              }}\n            >\n              <Field.Name.Last className=\"lastName\" itemPath=\"/lastName\" />\n            </Form.Visibility>\n          </Flex.Stack>\n        </Iterate.Array>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const InitialOpen = () => {\n  return (\n    <ComponentBox scope={{ Iterate, Tools }}>\n      <Form.Handler\n        onSubmit={async (data) => console.log('onSubmit', data)}\n        onSubmitRequest={() => console.log('onSubmitRequest')}\n      >\n        <Flex.Stack>\n          <Form.MainHeading>Statsborgerskap</Form.MainHeading>\n\n          <Card stack>\n            <Iterate.Array path=\"/countries\" defaultValue={[null]}>\n              <Iterate.ViewContainer toolbarVariant=\"minimumOneItem\">\n                <Value.SelectCountry\n                  label=\"Land du er statsborger i\"\n                  itemPath=\"/\"\n                />\n              </Iterate.ViewContainer>\n\n              <Iterate.EditContainer toolbarVariant=\"minimumOneItem\">\n                <Field.SelectCountry\n                  label=\"Land du er statsborger i\"\n                  itemPath=\"/\"\n                  required\n                />\n              </Iterate.EditContainer>\n            </Iterate.Array>\n\n            <Iterate.PushButton\n              path=\"/countries\"\n              pushValue={null}\n              text=\"Legg til flere statsborgerskap\"\n            />\n          </Card>\n\n          <Form.SubmitButton variant=\"send\" />\n\n          <Tools.Log />\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const ToolbarVariantMiniumOneItemOneItem = () => {\n  return (\n    <ComponentBox hideCode>\n      <Iterate.Array value={['foo']}>\n        <Iterate.ViewContainer toolbarVariant=\"minimumOneItem\">\n          View Content\n        </Iterate.ViewContainer>\n        <Iterate.EditContainer toolbarVariant=\"minimumOneItem\">\n          Edit Content\n        </Iterate.EditContainer>\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const ToolbarVariantMiniumOneItemTwoItems = () => {\n  return (\n    <ComponentBox hideCode>\n      <Iterate.Array value={['foo', 'bar']}>\n        <Iterate.ViewContainer toolbarVariant=\"minimumOneItem\">\n          View Content\n        </Iterate.ViewContainer>\n        <Iterate.EditContainer toolbarVariant=\"minimumOneItem\">\n          Edit Content\n        </Iterate.EditContainer>\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const WithArrayValidator = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        defaultData={{ items: ['foo'] }}\n        onSubmit={async () => console.log('onSubmit')}\n      >\n        <Card stack>\n          <Iterate.Array\n            path=\"/items\"\n            validator={(arrayValue) => {\n              if (!(arrayValue && arrayValue.length > 1)) {\n                return new Error('You need at least two items')\n              }\n            }}\n            animate\n          >\n            <Flex.Horizontal align=\"flex-end\">\n              <Field.String\n                label=\"Item no. {itemNr}\"\n                itemPath=\"/\"\n                width=\"medium\"\n                size=\"medium\"\n              />\n              <Iterate.RemoveButton />\n            </Flex.Horizontal>\n          </Iterate.Array>\n\n          <Iterate.PushButton\n            top\n            path=\"/items\"\n            pushValue={null}\n            text=\"Add\"\n          />\n          <Form.SubmitButton />\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","import { useCallback, useContext, useRef } from 'react'\nimport pointer, { JsonObject } from 'json-pointer'\nimport DataContext, { FilterData } from '../DataContext/Context'\nimport { JSONSchema } from '../types'\n\nexport type GenerateSchemaReturn = {\n  schema: JSONSchema\n  data: JsonObject\n  propsOfFields: JsonObject\n  propsOfValues: JsonObject\n}\nexport type GenerateSchemaProps = {\n  log?: boolean\n  generateRef?: React.MutableRefObject<() => GenerateSchemaReturn>\n  filterData?: FilterData\n  children: React.ReactNode\n}\nexport type GenerateRef = GenerateSchemaProps['generateRef']['current']\n\nexport const schemaParams = [\n  'minLength',\n  'maxLength',\n  'pattern',\n  'description',\n  'min',\n  'max',\n  'multipleOf',\n  'exclusiveMinimum',\n  'exclusiveMaximum',\n]\n\nexport default function GenerateSchema(props: GenerateSchemaProps) {\n  const { generateRef, filterData, log, children } = props || {}\n  const { fieldPropsRef, valuePropsRef, data, hasContext } =\n    useContext(DataContext)\n\n  const dataRef = useRef<JsonObject>({})\n  dataRef.current = data\n\n  const generate = useCallback(() => {\n    const schema = Object.entries(fieldPropsRef?.current || {}).reduce(\n      (acc, [path, props]) => {\n        if (path.startsWith('/')) {\n          const objectKey = path.substring(1)\n\n          const pathList = objectKey.split('/')\n          const slashCount = pathList.length\n\n          const type = props.valueType || 'string'\n          const propertyValue = {\n            type,\n          }\n\n          for (const prop of schemaParams) {\n            if (props[prop]) {\n              propertyValue[prop] = props[prop]\n            }\n          }\n\n          if (slashCount > 1) {\n            const nestedPath = ['']\n            for (const path of pathList) {\n              nestedPath.push(path)\n              const pathToSet = nestedPath.join('/properties/')\n              const isLast = nestedPath.length - 1 === pathList.length\n\n              const existingValue = pointer.has(acc, pathToSet)\n                ? pointer.get(acc, pathToSet)\n                : null\n\n              const pathValue = isLast ? propertyValue : existingValue\n\n              if (isLast) {\n                if (filterData?.[pathToSet] !== false) {\n                  pointer.set(acc, pathToSet, pathValue)\n                }\n              } else {\n                const pathValue = {\n                  type: 'object',\n                  ...existingValue,\n                }\n\n                // - Add required\n                const required = []\n                if (props.required) {\n                  required.push(pathList.at(-1))\n                }\n                if (existingValue?.required) {\n                  required.push(...existingValue.required)\n                }\n                if (required.length > 0) {\n                  pathValue.required = required\n                }\n\n                if (filterData?.[pathToSet] !== false) {\n                  pointer.set(acc, pathToSet, pathValue)\n                }\n              }\n            }\n          } else {\n            if (filterData?.[path] !== false) {\n              pointer.set(acc.properties, path, propertyValue)\n            }\n            if (props.required) {\n              acc.required.push(objectKey)\n            }\n          }\n        }\n\n        return acc\n      },\n      { type: 'object', properties: {}, required: [] }\n    )\n\n    const propsOfFields = Object.entries(\n      fieldPropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function'\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        pointer.set(acc, path, propertyValue)\n      }\n\n      return acc\n    }, {})\n\n    const propsOfValues = Object.entries(\n      valuePropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function'\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        pointer.set(acc, path, propertyValue)\n      }\n\n      return acc\n    }, {})\n\n    if (schema.required.length === 0) {\n      delete schema.required\n    }\n\n    return {\n      schema,\n      data: dataRef.current,\n      propsOfFields,\n      propsOfValues,\n    } as GenerateSchemaReturn\n  }, [fieldPropsRef, filterData, valuePropsRef])\n\n  if (hasContext) {\n    if (log) {\n      console.log(generate().schema)\n    }\n\n    if (generateRef) {\n      generateRef.current = generate\n    }\n  }\n\n  return children\n}\n","import { isValidElement, useCallback, useContext, useRef } from 'react'\nimport pointer, { JsonObject } from 'json-pointer'\nimport DataContext, { FilterData } from '../DataContext/Context'\n\nexport type ListAllPropsReturn = {\n  propsOfFields: JsonObject\n  propsOfValues: JsonObject\n}\nexport type ListAllPropsProps = {\n  log?: boolean\n  generateRef?: React.MutableRefObject<() => ListAllPropsReturn>\n  filterData?: FilterData\n  children: React.ReactNode\n}\nexport type GenerateRef = ListAllPropsProps['generateRef']['current']\n\nexport default function ListAllProps(props: ListAllPropsProps) {\n  const { log, generateRef, filterData, children } = props || {}\n  const { fieldPropsRef, valuePropsRef, data, hasContext } =\n    useContext(DataContext)\n\n  const dataRef = useRef<JsonObject>({})\n  dataRef.current = data\n\n  const generate = useCallback(() => {\n    const propsOfFields = Object.entries(\n      fieldPropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function' &&\n            !isValidElement(props[prop])\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        if (filterData?.[path] !== false) {\n          pointer.set(acc, path, propertyValue)\n        }\n      }\n\n      return acc\n    }, {})\n\n    const propsOfValues = Object.entries(\n      valuePropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function' &&\n            !isValidElement(props[prop])\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        if (filterData?.[path] !== false) {\n          pointer.set(acc, path, propertyValue)\n        }\n      }\n\n      return acc\n    }, {})\n\n    return { propsOfFields, propsOfValues } as ListAllPropsReturn\n  }, [fieldPropsRef, filterData, valuePropsRef])\n\n  if (hasContext) {\n    if (log) {\n      console.log(generate())\n    }\n\n    if (generateRef) {\n      generateRef.current = generate\n    }\n  }\n\n  return children\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","strong","a","h3","code","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","PrimitiveItemsFields","PrimitiveItemsValues","WithTable","AnimatedContainer","ViewAndEditContainer","wrapper","MDXLayout","Default","ComponentBox","noInline","Log","data","useContext","DataContext","Section","element","backgroundColor","style","maxWidth","innerSpace","JSON","stringify","_supportsSpacingProps","ValueComposition","ObjectItems","RenderPropsPrimitiveItems","RenderPropsObjectItems","ArrayFromFormHandler","DynamicPathValue","WithVisibility","InitialOpen","scope","Iterate","Tools","ToolbarVariantMiniumOneItemOneItem","hideCode","ToolbarVariantMiniumOneItemTwoItems","WithArrayValidator","schemaParams","GenerateSchema","generateRef","filterData","log","fieldPropsRef","valuePropsRef","hasContext","dataRef","useRef","current","generate","useCallback","schema","entries","reduce","acc","_ref","path","startsWith","objectKey","substring","pathList","split","slashCount","length","propertyValue","type","valueType","prop","nestedPath","push","pathToSet","join","isLast","existingValue","pointer","pathValue","required","at","apply","_toConsumableArray","properties","propsOfFields","_ref2","undefined","propsOfValues","_ref3","console","ListAllProps","isValidElement"],"sourceRoot":""}