{"version":3,"file":"component---src-docs-uilib-extensions-forms-iterate-demos-mdx-a3760b8ebbcec16a33f1.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/AnimatedContainer/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/Array/Examples.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {ViewAndEditContainer, PrimitiveItemsFields, PrimitiveItemsValues, WithTable} from './Array/Examples';\nimport {Default as AnimatedContainer} from './AnimatedContainer/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    h3: \"h3\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"NB:\"\n      }), \" There are many more demos in the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/Array/\",\n        children: \"Iterate.Array\"\n      }), \" component documentation and in each of the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/components/\",\n        children: \"iterate components\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Static generated fields\"\n    }), \"\\n\", _jsx(PrimitiveItemsFields, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Static generated values\"\n    }), \"\\n\", _jsx(PrimitiveItemsValues, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Static generated in a Table\"\n    }), \"\\n\", _jsx(WithTable, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Animated container\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/AnimatedContainer/\",\n        children: \"AnimatedContainer\"\n      }), \" with an optional \", _jsx(_components.code, {\n        children: \"title\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/Toolbar/\",\n        children: \"Toolbar\"\n      }), \".\"]\n    }), \"\\n\", _jsx(AnimatedContainer, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Toggle between a view and edit container\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/ViewContainer/\",\n        children: \"ViewContainer\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/EditContainer/\",\n        children: \"EditContainer\"\n      }), \".\"]\n    }), \"\\n\", _jsx(ViewAndEditContainer, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Card } from '@dnb/eufemia/src'\nimport { Field, Form, Iterate } from '@dnb/eufemia/src/extensions/forms'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyForm = () => {\n          const { count } = Iterate.useCount('myForm')\n          return (\n            <Form.Handler\n              defaultData={{\n                myList: ['Item 1'],\n              }}\n              id=\"myForm\"\n            >\n              <Card stack>\n                <Iterate.Array\n                  path=\"/myList\"\n                  placeholder={<>Empty list</>}\n                >\n                  <Iterate.AnimatedContainer title=\"Title {itemNr}\">\n                    <Field.String label=\"Label\" itemPath=\"/\" />\n\n                    <Iterate.Toolbar>\n                      <Iterate.RemoveButton />\n                    </Iterate.Toolbar>\n                  </Iterate.AnimatedContainer>\n                </Iterate.Array>\n\n                <Iterate.PushButton\n                  path=\"/myList\"\n                  pushValue={'Item ' + String(count('/myList') + 1)}\n                  text=\"Add new item\"\n                />\n              </Card>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Card, Flex, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport {\n  Iterate,\n  Field,\n  Value,\n  Form,\n} from '@dnb/eufemia/src/extensions/forms'\nexport { Default as AnimatedContainer } from '../AnimatedContainer/Examples'\n\nexport const PrimitiveItemsFields = () => {\n  return (\n    <ComponentBox>\n      <Iterate.Array\n        value={['Iron Man', 'Captain America', 'The Hulk']}\n        onChange={console.log}\n      >\n        <Field.String itemPath=\"/\" />\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const PrimitiveItemsValues = () => {\n  return (\n    <ComponentBox data-visual-test=\"primitive-element-values\">\n      <Value.SummaryList>\n        <Iterate.Array value={['Iron Man', 'Captain America', 'The Hulk']}>\n          <Value.String itemPath=\"/\" />\n        </Iterate.Array>\n      </Value.SummaryList>\n    </ComponentBox>\n  )\n}\n\nexport const ValueComposition = () => {\n  return (\n    <ComponentBox>\n      <Value.Composition>\n        <Iterate.Array\n          value={[\n            {\n              label: 'Label A',\n              value: 'value 1',\n            },\n            {\n              label: 'Label B',\n              value: 'value 2',\n            },\n          ]}\n        >\n          <Value.String\n            label={<Value.String itemPath=\"/label\" />}\n            itemPath=\"/value\"\n          />\n        </Iterate.Array>\n      </Value.Composition>\n    </ComponentBox>\n  )\n}\n\nexport const WithTable = () => {\n  return (\n    <ComponentBox>\n      <Table>\n        <thead>\n          <Tr>\n            <Th>Name</Th>\n            <Th>Age</Th>\n          </Tr>\n        </thead>\n        <tbody>\n          <Iterate.Array\n            withoutFlex\n            value={[\n              { name: 'Iron Man', age: 45 },\n              { name: 'Captain America', age: 123 },\n              { name: 'The Hulk', age: 3337 },\n            ]}\n          >\n            <Tr>\n              <Td>\n                <Value.Name.Last itemPath=\"/name\" />\n              </Td>\n              <Td>\n                <Value.Number itemPath=\"/age\" />\n              </Td>\n            </Tr>\n          </Iterate.Array>\n        </tbody>\n      </Table>\n    </ComponentBox>\n  )\n}\n\nexport const ObjectItems = () => {\n  return (\n    <ComponentBox scope={{ Value }}>\n      <Iterate.Array\n        value={[\n          {\n            accountName: 'Brukskonto',\n            accountNumber: '90901134567',\n          },\n          {\n            accountName: 'Sparekonto',\n            accountNumber: '90901156789',\n          },\n        ]}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        <Field.Composition>\n          <Field.BankAccountNumber itemPath=\"/accountNumber\" />\n          <Field.String label=\"Account name\" itemPath=\"/accountName\" />\n        </Field.Composition>\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const RenderPropsPrimitiveItems = () => {\n  return (\n    <ComponentBox>\n      <Iterate.Array\n        value={['foo', 'bar']}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        {(elementValue) => <Field.String value={elementValue} />}\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const RenderPropsObjectItems = () => {\n  return (\n    <ComponentBox>\n      <Iterate.Array\n        value={[\n          { num: 1, txt: 'One' },\n          { num: 2, txt: 'Two' },\n        ]}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        {({ num, txt }) => (\n          <Field.Composition width=\"large\">\n            <Field.Number value={num} width=\"small\" />\n            <Field.String value={txt} width={false} />\n          </Field.Composition>\n        )}\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const ArrayFromFormHandler = () => {\n  return (\n    <ComponentBox data-visual-test=\"animated-container\">\n      <Form.Handler\n        data={{\n          avengers: [\n            {\n              nickname: 'Iron Man',\n              firstName: 'Tony',\n              lastName: 'Stark',\n            },\n            {\n              nickname: 'Captain America',\n              firstName: 'Steve',\n              lastName: 'Rogers',\n            },\n          ],\n        }}\n        onChange={(data) => console.log('DataContext/onChange', data)}\n      >\n        <Flex.Vertical>\n          <Form.MainHeading>Avengers</Form.MainHeading>\n\n          <Card stack>\n            <Iterate.Array\n              path=\"/avengers\"\n              onChange={(value) => console.log('Iterate/onChange', value)}\n            >\n              <Iterate.AnimatedContainer\n                title={\n                  <Value.String\n                    label={false}\n                    itemPath=\"/nickname\"\n                    placeholder=\"A Nick name\"\n                  />\n                }\n              >\n                <Field.Name\n                  itemPath=\"/nickname\"\n                  width=\"medium\"\n                  label=\"Nick name\"\n                />\n\n                <Field.Composition>\n                  <Field.Name.First itemPath=\"/firstName\" width=\"medium\" />\n                  <Field.Name.Last itemPath=\"/lastName\" width=\"medium\" />\n                </Field.Composition>\n\n                <Iterate.Toolbar>\n                  <Iterate.RemoveButton />\n                </Iterate.Toolbar>\n              </Iterate.AnimatedContainer>\n            </Iterate.Array>\n\n            <Iterate.PushButton\n              text=\"Add another avenger\"\n              path=\"/avengers\"\n              pushValue={{}}\n            />\n          </Card>\n        </Flex.Vertical>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const ViewAndEditContainer = () => {\n  return (\n    <ComponentBox data-visual-test=\"view-and-edit-container\">\n      {() => {\n        const MyEditItemForm = () => {\n          return (\n            <Field.Composition>\n              <Field.Name.First itemPath=\"/firstName\" width=\"medium\" />\n              <Field.Name.Last\n                itemPath=\"/lastName\"\n                width=\"medium\"\n                required\n              />\n            </Field.Composition>\n          )\n        }\n\n        const MyEditItem = () => {\n          return (\n            <Iterate.EditContainer\n              title=\"Edit account holder {itemNr}\"\n              titleWhenNew=\"New account holder {itemNr}\"\n            >\n              <MyEditItemForm />\n            </Iterate.EditContainer>\n          )\n        }\n\n        const MyViewItem = () => {\n          const item = Iterate.useItem()\n          console.log('index:', item.index)\n\n          return (\n            <Iterate.ViewContainer title=\"Account holder {itemNr}\">\n              <Value.SummaryList>\n                <Value.Name.First itemPath=\"/firstName\" showEmpty />\n                <Value.Name.Last itemPath=\"/lastName\" placeholder=\"-\" />\n              </Value.SummaryList>\n            </Iterate.ViewContainer>\n          )\n        }\n\n        const CreateNewEntry = () => {\n          return (\n            <Iterate.PushContainer\n              path=\"/accounts\"\n              title=\"New account holder\"\n              openButton={\n                <Iterate.PushContainer.OpenButton text=\"Add another account\" />\n              }\n              showOpenButtonWhen={(list) => list.length > 0}\n            >\n              <MyEditItemForm />\n            </Iterate.PushContainer>\n          )\n        }\n\n        const MyForm = () => {\n          return (\n            <Form.Handler\n              data={{\n                accounts: [\n                  {\n                    firstName: 'Tony',\n                    lastName: undefined, // initiate error\n                  },\n                ],\n              }}\n              onChange={(data) =>\n                console.log('DataContext/onChange', data)\n              }\n              onSubmit={async (data) => console.log('onSubmit', data)}\n            >\n              <Flex.Vertical>\n                <Form.MainHeading>Accounts</Form.MainHeading>\n\n                <Card stack>\n                  <Iterate.Array path=\"/accounts\">\n                    <MyViewItem />\n                    <MyEditItem />\n                  </Iterate.Array>\n\n                  <CreateNewEntry />\n                </Card>\n\n                <Form.SubmitButton variant=\"send\" />\n              </Flex.Vertical>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const DynamicPathValue = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler defaultData={{ count: 0 }}>\n        <Flex.Stack>\n          <Field.Number path=\"/count\" width=\"small\" showStepControls />\n          <Iterate.Array\n            path=\"/items\"\n            countPath=\"/count\"\n            countPathTransform={({ value, index }) =>\n              Object.prototype.hasOwnProperty.call(value || {}, 'myObject')\n                ? value\n                : { myObject: index }\n            }\n          >\n            <Field.Number itemPath=\"/myObject\" label=\"Item no. {itemNr}\" />\n          </Iterate.Array>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithVisibility = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Iterate.Array path=\"/myList\" value={[{}]}>\n          <Flex.Stack>\n            <Field.Name.First\n              className=\"firstName\"\n              itemPath=\"/firstName\"\n            />\n\n            <Form.Visibility\n              animate\n              visibleWhen={{\n                itemPath: '/firstName',\n                hasValue: (value) => Boolean(value),\n              }}\n            >\n              <Field.Name.Last className=\"lastName\" itemPath=\"/lastName\" />\n            </Form.Visibility>\n          </Flex.Stack>\n        </Iterate.Array>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","strong","a","h3","code","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","PrimitiveItemsFields","PrimitiveItemsValues","WithTable","AnimatedContainer","ViewAndEditContainer","wrapper","MDXLayout","Default","ComponentBox","noInline","ValueComposition","ObjectItems","scope","Value","RenderPropsPrimitiveItems","RenderPropsObjectItems","ArrayFromFormHandler","DynamicPathValue","WithVisibility"],"sourceRoot":""}