{"version":3,"file":"component---src-docs-uilib-extensions-forms-iterate-edit-container-demos-mdx-ca5a70f54a068f5eb988.js","mappings":"qTAIA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,OACHC,EAAAA,EAAAA,MAAsBL,EAAMM,YAG/B,OAFKC,GAAUC,EAAqB,YAAY,GAC3CD,EAASE,sBAAsBD,EAAqB,iCAAiC,IACnFE,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKZ,EAAYG,GAAI,CAC9BQ,SAAU,UACR,MAAMC,EAAAA,EAAAA,KAAKN,EAASE,qBAAsB,CAAC,KAEnD,CAOA,MANA,SAAoBT,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOc,QAASC,GAAab,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOS,GAAYF,EAAAA,EAAAA,KAAKE,EAAWb,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DY,UAAUC,EAAAA,EAAAA,KAAKd,EAAmBC,MAC9BD,EAAkBC,EAC1B,EAEA,SAASQ,EAAqBQ,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,C,yGCrBO,MAAMG,EAAUA,KACrBN,EAAAA,EAAAA,KAAAO,EAAAA,EAAA,CAAAC,MAAA,CACFC,QACA,GAAAC,UAAA,EAAAX,SAAA,+xB,ygBCGO,MAAMY,EAA0BA,KACrCX,EAAAA,EAAAA,KAAAO,EAAAA,EAAA,CAAAC,MAAA,CACFC,QACA,GAAAV,SAAA,8JAUaa,EAA0BA,KACrCZ,EAAAA,EAAAA,KAAAO,EAAAA,EAAA,CAAAC,MAAA,CACFC,QACA,iDAAAV,SAAA,gLAYac,EAAmBA,KAC9Bb,EAAAA,EAAAA,KAAAO,EAAAA,EAAA,CAAAC,MAAA,CACFC,QACA,GAAAV,SAAA,gMASae,EAAYA,KACvBd,EAAAA,EAAAA,KAAAO,EAAAA,EAAA,CAAAC,MAAA,CACFC,QACA,GAAAV,SAAA,onBA+BagB,EAAiBA,KAC5Bf,EAAAA,EAAAA,KAAAO,EAAAA,EAAA,CAAAC,MAAA,CACFC,QAAA,EACAO,MACA,GAAAjB,SAAA,mdAqBakB,EAA+BA,KAC1CjB,EAAAA,EAAAA,KAAAO,EAAAA,EAAA,CAAAC,MAAA,CACFC,QACA,GAAAV,SAAA,yLAUamB,EAA4BA,KACvClB,EAAAA,EAAAA,KAAAO,EAAAA,EAAA,CAAAC,MAAA,CACFC,QACA,GAAAV,SAAA,6ZAkBaoB,EAAuBA,KAClCnB,EAAAA,EAAAA,KAAAO,EAAAA,EAAA,CAAAC,MAAA,CACFC,QACA,2CAAAV,SAAA,whDAyEaH,EAAuBA,KAClCI,EAAAA,EAAAA,KAAAO,EAAAA,EAAA,CAAAC,MAAA,CACFC,QACA,gDAAAC,UAAA,EAAAX,SAAA,uvD","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/EditContainer/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/AnimatedContainer/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/Array/Examples.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.ViewAndEditContainer) _missingMdxReference(\"Examples.ViewAndEditContainer\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(Examples.ViewAndEditContainer, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Card } from '@dnb/eufemia/src'\nimport { Field, Form, Iterate } from '@dnb/eufemia/src/extensions/forms'\n\nexport const Default = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      {() => {\n        const MyForm = () => {\n          const { count } = Iterate.useCount('myForm')\n          return (\n            <Form.Handler\n              defaultData={{\n                myList: ['Item 1'],\n              }}\n              id=\"myForm\"\n            >\n              <Card stack>\n                <Iterate.Array\n                  path=\"/myList\"\n                  placeholder={<>Empty list</>}\n                >\n                  <Iterate.AnimatedContainer title=\"Title\">\n                    <Field.String label=\"Label\" itemPath=\"/\" />\n\n                    <Iterate.Toolbar>\n                      <Iterate.RemoveButton />\n                    </Iterate.Toolbar>\n                  </Iterate.AnimatedContainer>\n                </Iterate.Array>\n\n                <Iterate.PushButton\n                  path=\"/myList\"\n                  pushValue={'Item ' + String(count('/myList') + 1)}\n                  text=\"Add new item\"\n                />\n              </Card>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Card, Flex, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport {\n  Iterate,\n  Field,\n  Value,\n  Form,\n} from '@dnb/eufemia/src/extensions/forms'\nexport { Default as AnimatedContainer } from '../AnimatedContainer/Examples'\n\nexport const PrimitiveElementsFields = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Iterate.Array\n        value={['Iron Man', 'Captain America', 'The Hulk']}\n        onChange={console.log}\n      >\n        <Field.String itemPath=\"/\" />\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const PrimitiveElementsValues = () => {\n  return (\n    <ComponentBox\n      scope={{ Iterate }}\n      data-visual-test=\"primitive-element-values\"\n    >\n      <Value.SummaryList>\n        <Iterate.Array value={['Iron Man', 'Captain America', 'The Hulk']}>\n          <Value.String itemPath=\"/\" />\n        </Iterate.Array>\n      </Value.SummaryList>\n    </ComponentBox>\n  )\n}\n\nexport const ValueComposition = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Value.Composition label=\"Label\">\n        <Iterate.Array value={['Iron Man', 'Captain America', 'The Hulk']}>\n          <Value.String itemPath=\"/\" />\n        </Iterate.Array>\n      </Value.Composition>\n    </ComponentBox>\n  )\n}\n\nexport const WithTable = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Table>\n        <thead>\n          <Tr>\n            <Th>Name</Th>\n            <Th>Age</Th>\n          </Tr>\n        </thead>\n        <tbody>\n          <Iterate.Array\n            withoutFlex\n            value={[\n              { name: 'Iron Man', age: 45 },\n              { name: 'Captain America', age: 123 },\n              { name: 'The Hulk', age: 3337 },\n            ]}\n          >\n            <Tr>\n              <Td>\n                <Value.String itemPath=\"/name\" />\n              </Td>\n              <Td>\n                <Value.Number itemPath=\"/age\" />\n              </Td>\n            </Tr>\n          </Iterate.Array>\n        </tbody>\n      </Table>\n    </ComponentBox>\n  )\n}\n\nexport const ObjectElements = () => {\n  return (\n    <ComponentBox scope={{ Iterate, Value }}>\n      <Iterate.Array\n        value={[\n          {\n            accountName: 'Brukskonto',\n            accountNumber: '90901134567',\n          },\n          {\n            accountName: 'Sparekonto',\n            accountNumber: '90901156789',\n          },\n        ]}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        <Field.Composition>\n          <Field.BankAccountNumber itemPath=\"/accountNumber\" />\n          <Field.String label=\"Account name\" itemPath=\"/accountName\" />\n        </Field.Composition>\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const RenderPropsPrimitiveElements = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Iterate.Array\n        value={['foo', 'bar']}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        {(elementValue) => <Field.String value={elementValue} />}\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const RenderPropsObjectElements = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Iterate.Array\n        value={[\n          { num: 1, txt: 'One' },\n          { num: 2, txt: 'Two' },\n        ]}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        {({ num, txt }) => (\n          <Field.Composition width=\"large\">\n            <Field.Number value={num} width=\"small\" />\n            <Field.String value={txt} width={false} />\n          </Field.Composition>\n        )}\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const ArrayFromFormHandler = () => {\n  return (\n    <ComponentBox\n      scope={{ Iterate }}\n      data-visual-test=\"animated-container\"\n    >\n      <Form.Handler\n        data={{\n          avengers: [\n            {\n              nickname: 'Iron Man',\n              firstName: 'Tony',\n              lastName: 'Stark',\n            },\n            {\n              nickname: 'Captain America',\n              firstName: 'Steve',\n              lastName: 'Rogers',\n            },\n          ],\n        }}\n        onChange={(data) => console.log('DataContext/onChange', data)}\n      >\n        <Flex.Vertical>\n          <Form.MainHeading>Avengers</Form.MainHeading>\n\n          <Card stack>\n            <Iterate.Array\n              path=\"/avengers\"\n              onChange={(value) => console.log('Iterate/onChange', value)}\n            >\n              <Iterate.AnimatedContainer\n                title={\n                  <Value.String\n                    itemPath=\"/nickname\"\n                    placeholder=\"A Nick name\"\n                  />\n                }\n              >\n                <Field.String\n                  itemPath=\"/nickname\"\n                  width=\"medium\"\n                  label=\"Nick name\"\n                />\n\n                <Field.Composition>\n                  <Field.String\n                    itemPath=\"/firstName\"\n                    width=\"medium\"\n                    label=\"First name\"\n                  />\n                  <Field.String\n                    itemPath=\"/lastName\"\n                    width=\"medium\"\n                    label=\"Last name\"\n                  />\n                </Field.Composition>\n\n                <Iterate.Toolbar>\n                  <Iterate.RemoveButton />\n                </Iterate.Toolbar>\n              </Iterate.AnimatedContainer>\n            </Iterate.Array>\n\n            <Iterate.PushButton\n              text=\"Add another avenger\"\n              path=\"/avengers\"\n              pushValue={{}}\n            />\n          </Card>\n        </Flex.Vertical>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const ViewAndEditContainer = () => {\n  return (\n    <ComponentBox\n      scope={{ Iterate }}\n      data-visual-test=\"view-and-edit-container\"\n    >\n      {() => {\n        const MyEditItem = () => {\n          return (\n            <Iterate.EditContainer\n              title=\"Edit account holder\"\n              titleWhenNew=\"New account holder\"\n            >\n              <Field.Composition>\n                <Field.String\n                  itemPath=\"/firstName\"\n                  width=\"medium\"\n                  label=\"First name\"\n                />\n                <Field.String\n                  itemPath=\"/lastName\"\n                  width=\"medium\"\n                  label=\"Last name\"\n                  required\n                />\n              </Field.Composition>\n            </Iterate.EditContainer>\n          )\n        }\n\n        const MyViewItem = () => {\n          return (\n            <Iterate.ViewContainer title=\"Account holder\">\n              <Value.SummaryList>\n                <Value.String\n                  label=\"First name\"\n                  itemPath=\"/firstName\"\n                  showEmpty\n                />\n                <Value.String\n                  label=\"Last name\"\n                  itemPath=\"/lastName\"\n                  placeholder=\"-\"\n                />\n              </Value.SummaryList>\n            </Iterate.ViewContainer>\n          )\n        }\n\n        const MyForm = () => {\n          return (\n            <Form.Handler\n              data={{\n                accounts: [\n                  {\n                    firstName: 'Tony',\n                    lastName: undefined, // initiate error\n                  },\n                ],\n              }}\n              onChange={(data) =>\n                console.log('DataContext/onChange', data)\n              }\n              onSubmit={async (data) => console.log('onSubmit', data)}\n            >\n              <Flex.Vertical>\n                <Form.MainHeading>Accounts</Form.MainHeading>\n\n                <Card stack>\n                  <Iterate.Array path=\"/accounts\">\n                    <MyViewItem />\n                    <MyEditItem />\n                  </Iterate.Array>\n\n                  <Iterate.PushButton\n                    text=\"Add another account\"\n                    path=\"/accounts\"\n                    pushValue={{}}\n                  />\n                </Card>\n\n                <Form.SubmitButton variant=\"send\" />\n              </Flex.Vertical>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","_provideComponents","components","Examples","_missingMdxReference","ViewAndEditContainer","_jsxs","_Fragment","children","_jsx","wrapper","MDXLayout","id","component","Error","Default","ComponentBox","scope","Iterate","noInline","PrimitiveElementsFields","PrimitiveElementsValues","ValueComposition","WithTable","ObjectElements","Value","RenderPropsPrimitiveElements","RenderPropsObjectElements","ArrayFromFormHandler"],"sourceRoot":""}