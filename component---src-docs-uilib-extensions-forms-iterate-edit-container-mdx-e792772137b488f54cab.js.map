{"version":3,"file":"component---src-docs-uilib-extensions-forms-iterate-edit-container-mdx-e792772137b488f54cab.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/EditContainer.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/EditContainer/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/EditContainer/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/AnimatedContainer/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/Array/Examples.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/Iterate/EditContainer/info';\nimport Demos from 'Docs/uilib/extensions/forms/Iterate/EditContainer/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.ViewAndEditContainer) _missingMdxReference(\"Examples.ViewAndEditContainer\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(Examples.ViewAndEditContainer, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Iterate.EditContainer\"\n      }), \" enables users to toggle (with animation) the content of each item between the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/ViewContainer/\",\n        children: \"ViewContainer\"\n      }), \" and this edit container. It can be used instead of the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/AnimatedContainer/\",\n        children: \"AnimatedContainer\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, it features the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/Toolbar/\",\n        children: \"Toolbar\"\n      }), \" containing a \\\"Done\\\" button and a \\\"Cancel\\\" button. The \\\"Cancel\\\" button resets any changes made to the item content, restoring it to its original state.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Field, Value } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Iterate.Array>\\n    <Iterate.EditContainer\\n      title=\\\"Edit account holder\\\"\\n      titleWhenNew=\\\"New account holder\\\"\\n    >\\n      <Field.String itemPath=\\\"/name\\\" />\\n    </Iterate.EditContainer>\\n\\n    <Iterate.ViewContainer title=\\\"Account holder\\\">\\n      <Value.String itemPath=\\\"/name\\\" />\\n    </Iterate.ViewContainer>\\n  </Iterate.Array>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Iterate.EditContainer\"\n      }), \" component has an \", _jsx(_components.code, {\n        children: \"aria-label\"\n      }), \" attribute, which is set to the \", _jsx(_components.code, {\n        children: \"title\"\n      }), \" prop value. It uses a section element to wrap the content, which helps users with screen readers to get the needed announcement.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When the edit container becomes active, it will automatically receive the active element focus. And when the edit container switches to the view container, the focus will be set to the view container.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Card } from '@dnb/eufemia/src'\nimport { Field, Form, Iterate } from '@dnb/eufemia/src/extensions/forms'\n\nexport const Default = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      {() => {\n        const MyForm = () => {\n          const { count } = Iterate.useCount('myForm')\n          return (\n            <Form.Handler\n              defaultData={{\n                myList: ['Item 1'],\n              }}\n              id=\"myForm\"\n            >\n              <Card stack>\n                <Iterate.Array\n                  path=\"/myList\"\n                  placeholder={<>Empty list</>}\n                >\n                  <Iterate.AnimatedContainer title=\"Title\">\n                    <Field.String label=\"Label\" itemPath=\"/\" />\n\n                    <Iterate.Toolbar>\n                      <Iterate.RemoveButton />\n                    </Iterate.Toolbar>\n                  </Iterate.AnimatedContainer>\n                </Iterate.Array>\n\n                <Iterate.PushButton\n                  path=\"/myList\"\n                  pushValue={'Item ' + String(count('/myList') + 1)}\n                  text=\"Add new item\"\n                />\n              </Card>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Card, Flex, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport {\n  Iterate,\n  Field,\n  Value,\n  Form,\n} from '@dnb/eufemia/src/extensions/forms'\nexport { Default as AnimatedContainer } from '../AnimatedContainer/Examples'\n\nexport const PrimitiveElementsFields = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Iterate.Array\n        value={['Iron Man', 'Captain America', 'The Hulk']}\n        onChange={console.log}\n      >\n        <Field.String itemPath=\"/\" />\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const PrimitiveElementsValues = () => {\n  return (\n    <ComponentBox\n      scope={{ Iterate }}\n      data-visual-test=\"primitive-element-values\"\n    >\n      <Value.SummaryList>\n        <Iterate.Array value={['Iron Man', 'Captain America', 'The Hulk']}>\n          <Value.String itemPath=\"/\" />\n        </Iterate.Array>\n      </Value.SummaryList>\n    </ComponentBox>\n  )\n}\n\nexport const ValueComposition = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Value.Composition>\n        <Iterate.Array\n          value={[\n            {\n              label: 'Label A',\n              value: 'value 1',\n            },\n            {\n              label: 'Label B',\n              value: 'value 2',\n            },\n          ]}\n        >\n          <Value.String\n            label={<Value.String itemPath=\"/label\" />}\n            itemPath=\"/value\"\n          />\n        </Iterate.Array>\n      </Value.Composition>\n    </ComponentBox>\n  )\n}\n\nexport const WithTable = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Table>\n        <thead>\n          <Tr>\n            <Th>Name</Th>\n            <Th>Age</Th>\n          </Tr>\n        </thead>\n        <tbody>\n          <Iterate.Array\n            withoutFlex\n            value={[\n              { name: 'Iron Man', age: 45 },\n              { name: 'Captain America', age: 123 },\n              { name: 'The Hulk', age: 3337 },\n            ]}\n          >\n            <Tr>\n              <Td>\n                <Value.String itemPath=\"/name\" />\n              </Td>\n              <Td>\n                <Value.Number itemPath=\"/age\" />\n              </Td>\n            </Tr>\n          </Iterate.Array>\n        </tbody>\n      </Table>\n    </ComponentBox>\n  )\n}\n\nexport const ObjectElements = () => {\n  return (\n    <ComponentBox scope={{ Iterate, Value }}>\n      <Iterate.Array\n        value={[\n          {\n            accountName: 'Brukskonto',\n            accountNumber: '90901134567',\n          },\n          {\n            accountName: 'Sparekonto',\n            accountNumber: '90901156789',\n          },\n        ]}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        <Field.Composition>\n          <Field.BankAccountNumber itemPath=\"/accountNumber\" />\n          <Field.String label=\"Account name\" itemPath=\"/accountName\" />\n        </Field.Composition>\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const RenderPropsPrimitiveElements = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Iterate.Array\n        value={['foo', 'bar']}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        {(elementValue) => <Field.String value={elementValue} />}\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const RenderPropsObjectElements = () => {\n  return (\n    <ComponentBox scope={{ Iterate }}>\n      <Iterate.Array\n        value={[\n          { num: 1, txt: 'One' },\n          { num: 2, txt: 'Two' },\n        ]}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        {({ num, txt }) => (\n          <Field.Composition width=\"large\">\n            <Field.Number value={num} width=\"small\" />\n            <Field.String value={txt} width={false} />\n          </Field.Composition>\n        )}\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const ArrayFromFormHandler = () => {\n  return (\n    <ComponentBox\n      scope={{ Iterate }}\n      data-visual-test=\"animated-container\"\n    >\n      <Form.Handler\n        data={{\n          avengers: [\n            {\n              nickname: 'Iron Man',\n              firstName: 'Tony',\n              lastName: 'Stark',\n            },\n            {\n              nickname: 'Captain America',\n              firstName: 'Steve',\n              lastName: 'Rogers',\n            },\n          ],\n        }}\n        onChange={(data) => console.log('DataContext/onChange', data)}\n      >\n        <Flex.Vertical>\n          <Form.MainHeading>Avengers</Form.MainHeading>\n\n          <Card stack>\n            <Iterate.Array\n              path=\"/avengers\"\n              onChange={(value) => console.log('Iterate/onChange', value)}\n            >\n              <Iterate.AnimatedContainer\n                title={\n                  <Value.String\n                    itemPath=\"/nickname\"\n                    placeholder=\"A Nick name\"\n                  />\n                }\n              >\n                <Field.String\n                  itemPath=\"/nickname\"\n                  width=\"medium\"\n                  label=\"Nick name\"\n                />\n\n                <Field.Composition>\n                  <Field.String\n                    itemPath=\"/firstName\"\n                    width=\"medium\"\n                    label=\"First name\"\n                  />\n                  <Field.String\n                    itemPath=\"/lastName\"\n                    width=\"medium\"\n                    label=\"Last name\"\n                  />\n                </Field.Composition>\n\n                <Iterate.Toolbar>\n                  <Iterate.RemoveButton />\n                </Iterate.Toolbar>\n              </Iterate.AnimatedContainer>\n            </Iterate.Array>\n\n            <Iterate.PushButton\n              text=\"Add another avenger\"\n              path=\"/avengers\"\n              pushValue={{}}\n            />\n          </Card>\n        </Flex.Vertical>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const ViewAndEditContainer = () => {\n  return (\n    <ComponentBox\n      scope={{ Iterate }}\n      data-visual-test=\"view-and-edit-container\"\n    >\n      {() => {\n        const MyEditItem = () => {\n          return (\n            <Iterate.EditContainer\n              title=\"Edit account holder\"\n              titleWhenNew=\"New account holder\"\n            >\n              <Field.Composition>\n                <Field.String\n                  itemPath=\"/firstName\"\n                  width=\"medium\"\n                  label=\"First name\"\n                />\n                <Field.String\n                  itemPath=\"/lastName\"\n                  width=\"medium\"\n                  label=\"Last name\"\n                  required\n                />\n              </Field.Composition>\n            </Iterate.EditContainer>\n          )\n        }\n\n        const MyViewItem = () => {\n          return (\n            <Iterate.ViewContainer title=\"Account holder\">\n              <Value.SummaryList>\n                <Value.String\n                  label=\"First name\"\n                  itemPath=\"/firstName\"\n                  showEmpty\n                />\n                <Value.String\n                  label=\"Last name\"\n                  itemPath=\"/lastName\"\n                  placeholder=\"-\"\n                />\n              </Value.SummaryList>\n            </Iterate.ViewContainer>\n          )\n        }\n\n        const MyForm = () => {\n          return (\n            <Form.Handler\n              data={{\n                accounts: [\n                  {\n                    firstName: 'Tony',\n                    lastName: undefined, // initiate error\n                  },\n                ],\n              }}\n              onChange={(data) =>\n                console.log('DataContext/onChange', data)\n              }\n              onSubmit={async (data) => console.log('onSubmit', data)}\n            >\n              <Flex.Vertical>\n                <Form.MainHeading>Accounts</Form.MainHeading>\n\n                <Card stack>\n                  <Iterate.Array path=\"/accounts\">\n                    <MyViewItem />\n                    <MyEditItem />\n                  </Iterate.Array>\n\n                  <Iterate.PushButton\n                    text=\"Add another account\"\n                    path=\"/accounts\"\n                    pushValue={{}}\n                  />\n                </Card>\n\n                <Form.SubmitButton variant=\"send\" />\n              </Flex.Vertical>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","_components","h2","Examples","_missingMdxReference","ViewAndEditContainer","id","component","Error","p","code","a","pre","href","className","Default","ComponentBox","scope","Iterate","noInline","PrimitiveElementsFields","PrimitiveElementsValues","ValueComposition","WithTable","ObjectElements","Value","RenderPropsPrimitiveElements","RenderPropsObjectElements","ArrayFromFormHandler"],"sourceRoot":""}