"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[63239],{21347:function(n,e,t){t.r(e),t.d(e,{default:function(){return p}});var a={};t.r(a),t.d(a,{InitiallyOpen:function(){return d},IsolatedData:function(){return l},PreventUncommittedChanges:function(){return m},Variants:function(){return u},ViewAndEditContainer:function(){return s.ViewAndEditContainer}});var r=t(31085),i=t(71184),o=(t(14041),t(15924)),s=t(2897);const d=()=>(0,r.jsx)(o.A,{noInline:!0,children:'const MyEditItemForm = () => {\n  return (\n    <Field.Composition>\n      <Field.Name.First itemPath="/firstName" width="medium" />\n      <Field.Name.Last itemPath="/lastName" width="medium" required />\n    </Field.Composition>\n  )\n}\nconst MyEditItem = () => {\n  return (\n    <Iterate.EditContainer\n      title="Edit account holder {itemNo}"\n      titleWhenNew="New account holder {itemNo}"\n    >\n      <MyEditItemForm />\n    </Iterate.EditContainer>\n  )\n}\nconst MyViewItem = () => {\n  const item = Iterate.useItem()\n  console.log(\'index:\', item.index)\n  return (\n    <Iterate.ViewContainer title="Account holder {itemNo}">\n      <Value.SummaryList>\n        <Value.Name.First itemPath="/firstName" showEmpty />\n        <Value.Name.Last itemPath="/lastName" placeholder="-" />\n      </Value.SummaryList>\n    </Iterate.ViewContainer>\n  )\n}\nconst CreateNewEntry = () => {\n  return (\n    <Iterate.PushContainer\n      path="/accounts"\n      title="New account holder"\n      openButton={\n        <Iterate.PushContainer.OpenButton text="Add another account" />\n      }\n      showOpenButtonWhen={(list) => list.length > 0}\n    >\n      <MyEditItemForm />\n    </Iterate.PushContainer>\n  )\n}\nconst MyForm = () => {\n  return (\n    <Form.Handler\n      onChange={(data) => console.log(\'DataContext/onChange\', data)}\n      onSubmit={async (data) => console.log(\'onSubmit\', data)}\n    >\n      <Flex.Stack>\n        <Form.MainHeading>Accounts</Form.MainHeading>\n\n        <Form.Card gap={false}>\n          <Iterate.Array path="/accounts">\n            <MyViewItem />\n            <MyEditItem />\n          </Iterate.Array>\n\n          <CreateNewEntry />\n        </Form.Card>\n\n        <Form.SubmitButton variant="send" />\n      </Flex.Stack>\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n'}),l=()=>(0,r.jsx)(o.A,{noInline:!0,children:'const formData = {\n  persons: [\n    {\n      firstName: \'Ola\',\n      lastName: \'Nordmann\',\n    },\n    {\n      firstName: \'Kari\',\n      lastName: \'Nordmann\',\n    },\n    {\n      firstName: \'Per\',\n      lastName: \'Hansen\',\n    },\n  ],\n}\nfunction RepresentativesView() {\n  return (\n    <Iterate.ViewContainer>\n      <Value.Composition>\n        <Value.String itemPath="/firstName" />\n        <Value.String itemPath="/lastName" />\n      </Value.Composition>\n    </Iterate.ViewContainer>\n  )\n}\nfunction RepresentativesEdit() {\n  return (\n    <Iterate.EditContainer>\n      <Field.Name.First itemPath="/firstName" />\n      <Field.Name.Last itemPath="/lastName" />\n    </Iterate.EditContainer>\n  )\n}\nfunction ExistingPersonDetails() {\n  const { data, getValue } = Form.useData()\n  const person = getValue(data[\'selectedPerson\'])?.data || {}\n  return (\n    <Flex.Stack>\n      <Field.Name.First\n        readOnly\n        itemPath="/firstName"\n        value={person.firstName}\n      />\n      <Field.Name.Last\n        readOnly\n        itemPath="/lastName"\n        value={person.lastName}\n      />\n    </Flex.Stack>\n  )\n}\nfunction NewPersonDetails() {\n  return (\n    <Flex.Stack>\n      <Field.Name.First required itemPath="/firstName" />\n      <Field.Name.Last required itemPath="/lastName" />\n    </Flex.Stack>\n  )\n}\nfunction PushContainerContent() {\n  const { data, update } = Form.useData()\n  const selectedPerson = data[\'selectedPerson\'] // Because of missing TypeScript support\n\n  // Clear the PushContainer data when the selected person is "other",\n  // so the fields do not inherit existing data.\n  React.useLayoutEffect(() => {\n    if (selectedPerson === \'other\') {\n      update(\'/pushContainerItems/0\', {})\n    }\n  }, [selectedPerson, update])\n  return (\n    <>\n      <Field.Selection\n        variant="radio"\n        required\n        path="/selectedPerson"\n        dataPath="/persons"\n      >\n        <Field.Option value="other" label="Other person" />\n      </Field.Selection>\n\n      <HeightAnimation top>\n        <Form.Visibility\n          visibleWhen={{\n            path: \'/selectedPerson\',\n            hasValue: (value) =>\n              typeof value === \'string\' && value !== \'other\',\n          }}\n        >\n          <ExistingPersonDetails />\n        </Form.Visibility>\n\n        <Form.Visibility\n          visibleWhen={{\n            path: \'/selectedPerson\',\n            hasValue: (value) => value === \'other\',\n          }}\n        >\n          <NewPersonDetails />\n        </Form.Visibility>\n      </HeightAnimation>\n    </>\n  )\n}\nfunction RepresentativesCreateNew() {\n  return (\n    <Iterate.PushContainer\n      path="/representatives"\n      title="Add new representative"\n      isolatedData={{\n        persons: formData.persons.map((data, i) => {\n          return {\n            title: [data.firstName, data.lastName].join(\' \'),\n            value: `/persons/${i}`,\n            data,\n          }\n        }),\n      }}\n      openButton={\n        <Iterate.PushContainer.OpenButton\n          variant="tertiary"\n          text="Add new representative"\n        />\n      }\n      showOpenButtonWhen={(list) => list.length > 0}\n    >\n      <PushContainerContent />\n    </Iterate.PushContainer>\n  )\n}\nrender(\n  <Form.Handler>\n    <Form.MainHeading>Representatives</Form.MainHeading>\n    <Flex.Stack>\n      <Form.Card>\n        <Iterate.Array path="/representatives">\n          <RepresentativesView />\n          <RepresentativesEdit />\n        </Iterate.Array>\n        <RepresentativesCreateNew />\n      </Form.Card>\n\n      <Form.Card>\n        <Form.SubHeading>Data Context</Form.SubHeading>\n        <Tools.Log placeholder="-" />\n      </Form.Card>\n    </Flex.Stack>\n  </Form.Handler>,\n)\n'}),m=()=>(0,r.jsx)(o.A,{children:'<Form.Handler>\n  <Wizard.Container>\n    <Wizard.Step title="Step 1">\n      <Form.Card>\n        <Form.SubHeading>People</Form.SubHeading>\n        <Iterate.Array path="/people" animate placeholder="No people">\n          <Value.Name.First itemPath="/firstName" />\n        </Iterate.Array>\n\n        <Iterate.PushContainer\n          path="/people"\n          title="New person"\n          preventUncommittedChanges\n          bubbleValidation\n          openButton={\n            <Iterate.PushContainer.OpenButton\n              top\n              variant="tertiary"\n              text="Add new person"\n            />\n          }\n          showOpenButtonWhen={(list) => list.length > 0}\n        >\n          <Field.Name.First itemPath="/firstName" />\n        </Iterate.PushContainer>\n      </Form.Card>\n\n      <Wizard.Buttons />\n    </Wizard.Step>\n\n    <Wizard.Step title="Step 2">\n      <Iterate.Array path="/people">\n        <Value.Name.First itemPath="/firstName" />\n      </Iterate.Array>\n      <Wizard.Buttons />\n    </Wizard.Step>\n  </Wizard.Container>\n</Form.Handler>\n'}),u=()=>(0,r.jsx)(o.A,{"data-visual-test":"push-container-variants",children:'<Form.Handler>\n  <Wizard.Container>\n    <Wizard.Step title="Step 1">\n      <Iterate.Array path="/x" required>\n        <Value.Address itemPath="/y" />\n      </Iterate.Array>\n      <Iterate.PushContainer\n        path="/x"\n        variant="outline"\n        top\n        bottom\n        bubbleValidation\n      >\n        <Field.Address label="variant outline" itemPath="/y" required />\n      </Iterate.PushContainer>\n      <Iterate.PushContainer\n        path="/x"\n        variant="filled"\n        top\n        bottom\n        bubbleValidation\n      >\n        <Field.Address label="variant filled" itemPath="/y" required />\n      </Iterate.PushContainer>\n      <Iterate.PushContainer\n        path="/x"\n        variant="basic"\n        top\n        bottom\n        bubbleValidation\n      >\n        <Field.Address label="variant basic" itemPath="/y" required />\n      </Iterate.PushContainer>\n      <Wizard.Buttons />\n    </Wizard.Step>\n    <Wizard.Step title="Step 2">\n      <Wizard.Buttons />\n    </Wizard.Step>\n  </Wizard.Container>\n</Form.Handler>\n'});function h(n){const e=Object.assign({h2:"h2",h3:"h3",p:"p",code:"code"},(0,i.R)(),n.components),{VisibleWhenVisualTest:t}=e;return a||c("Examples",!1),d||c("Examples.InitiallyOpen",!0),l||c("Examples.IsolatedData",!0),m||c("Examples.PreventUncommittedChanges",!0),u||c("Examples.Variants",!0),s.ViewAndEditContainer||c("Examples.ViewAndEditContainer",!0),t||c("VisibleWhenVisualTest",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:"Demos"}),"\n",(0,r.jsx)(e.h3,{children:"Prevent uncommitted changes"}),"\n",(0,r.jsxs)(e.p,{children:["This example uses the ",(0,r.jsx)(e.code,{children:"preventUncommittedChanges"})," property to display an error message if the user has made changes and attempts to navigate to the next Wizard step."]}),"\n",(0,r.jsx)(e.p,{children:"Try entering something in the input field, then navigate to the next step. An error message will appear to indicate that changes must be committed first."}),"\n",(0,r.jsx)(m,{}),"\n",(0,r.jsx)(e.h3,{children:"Initially open"}),"\n",(0,r.jsx)(d,{}),"\n",(0,r.jsx)(e.h3,{children:"With existing data"}),"\n",(0,r.jsx)(s.ViewAndEditContainer,{}),"\n",(0,r.jsx)(e.h3,{children:"Isolated data"}),"\n",(0,r.jsxs)(e.p,{children:["This demo shows how to use the ",(0,r.jsx)(e.code,{children:"isolatedData"})," property to provide data to the PushContainer."]}),"\n",(0,r.jsx)(l,{}),"\n",(0,r.jsx)(t,{children:(0,r.jsx)(u,{})})]})}var p=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,i.R)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(h,n)})):h(n)};function c(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-iterate-push-container-demos-mdx-457938698840c5295216.js.map