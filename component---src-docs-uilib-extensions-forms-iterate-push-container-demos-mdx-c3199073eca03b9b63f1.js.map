{"version":3,"file":"component---src-docs-uilib-extensions-forms-iterate-push-container-demos-mdx-c3199073eca03b9b63f1.js","mappings":"6dAcO,MAAMA,EAAgBA,KAC3BC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,EAAAC,SAAA,gzDAwFWC,EAAeA,KAC1BJ,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,EAAAC,SAAA,mxHAuKWE,EAA4BA,KACvCL,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAE,SAAA,ilCAgDWG,EAAWA,KACtBN,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,8CAAAE,SAAA,0jCC7TF,SAASI,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,KAAM,SACLC,EAAAA,EAAAA,KAAsBR,EAAMS,aAAa,sBAACC,GAAyBT,EAQtE,OAPKU,GAAUC,EAAqB,YAAY,GAC3CD,GAAwBC,EAAqB,0BAA0B,GACvED,GAAuBC,EAAqB,yBAAyB,GACrED,GAAoCC,EAAqB,sCAAsC,GAC/FD,GAAmBC,EAAqB,qBAAqB,GAC7DD,EAASE,sBAAsBD,EAAqB,iCAAiC,GACrFF,GAAuBE,EAAqB,yBAAyB,IACnEE,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBpB,SAAU,EAACH,EAAAA,EAAAA,KAAKS,EAAYG,GAAI,CAC9BT,SAAU,UACR,MAAMH,EAAAA,EAAAA,KAAKS,EAAYI,GAAI,CAC7BV,SAAU,gCACR,MAAMmB,EAAAA,EAAAA,MAAMb,EAAYK,EAAG,CAC7BX,SAAU,CAAC,0BAA0BH,EAAAA,EAAAA,KAAKS,EAAYM,KAAM,CAC1DZ,SAAU,8BACR,0HACF,MAAMH,EAAAA,EAAAA,KAAKS,EAAYK,EAAG,CAC5BX,SAAU,8JACR,MAAMH,EAAAA,EAAAA,KAAKmB,EAAoC,CAAC,GAAI,MAAMnB,EAAAA,EAAAA,KAAKS,EAAYI,GAAI,CACjFV,SAAU,mBACR,MAAMH,EAAAA,EAAAA,KAAKmB,EAAwB,CAAC,GAAI,MAAMnB,EAAAA,EAAAA,KAAKS,EAAYI,GAAI,CACrEV,SAAU,uBACR,MAAMH,EAAAA,EAAAA,KAAKmB,EAASE,qBAAsB,CAAC,GAAI,MAAMrB,EAAAA,EAAAA,KAAKS,EAAYI,GAAI,CAC5EV,SAAU,kBACR,MAAMmB,EAAAA,EAAAA,MAAMb,EAAYK,EAAG,CAC7BX,SAAU,CAAC,mCAAmCH,EAAAA,EAAAA,KAAKS,EAAYM,KAAM,CACnEZ,SAAU,iBACR,qDACF,MAAMH,EAAAA,EAAAA,KAAKmB,EAAuB,CAAC,GAAI,MAAMnB,EAAAA,EAAAA,KAAKkB,EAAuB,CAC3Ef,UAAUH,EAAAA,EAAAA,KAAKmB,EAAmB,CAAC,OAGzC,CAOA,MANA,SAAoBX,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOgB,QAASC,GAAaf,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,KAAsBR,EAAMS,YAC3E,OAAOQ,GAAYzB,EAAAA,EAAAA,KAAKyB,EAAWf,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DL,UAAUH,EAAAA,EAAAA,KAAKO,EAAmBC,MAC9BD,EAAkBC,EAC1B,EAEA,SAASY,EAAqBM,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/PushContainer/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/PushContainer/demos.mdx"],"sourcesContent":["import React from 'react'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Flex, HeightAnimation } from '@dnb/eufemia/src'\nimport {\n  Field,\n  Form,\n  Iterate,\n  Tools,\n  Value,\n  Wizard,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport { ViewAndEditContainer } from '../Array/Examples'\n\nexport const InitiallyOpen = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyEditItemForm = () => {\n          return (\n            <Field.Composition>\n              <Field.Name.First itemPath=\"/firstName\" width=\"medium\" />\n              <Field.Name.Last\n                itemPath=\"/lastName\"\n                width=\"medium\"\n                required\n              />\n            </Field.Composition>\n          )\n        }\n\n        const MyEditItem = () => {\n          return (\n            <Iterate.EditContainer\n              title=\"Edit account holder {itemNo}\"\n              titleWhenNew=\"New account holder {itemNo}\"\n            >\n              <MyEditItemForm />\n            </Iterate.EditContainer>\n          )\n        }\n\n        const MyViewItem = () => {\n          const item = Iterate.useItem()\n          console.log('index:', item.index)\n\n          return (\n            <Iterate.ViewContainer title=\"Account holder {itemNo}\">\n              <Value.SummaryList>\n                <Value.Name.First itemPath=\"/firstName\" showEmpty />\n                <Value.Name.Last itemPath=\"/lastName\" placeholder=\"-\" />\n              </Value.SummaryList>\n            </Iterate.ViewContainer>\n          )\n        }\n\n        const CreateNewEntry = () => {\n          return (\n            <Iterate.PushContainer\n              path=\"/accounts\"\n              title=\"New account holder\"\n              openButton={\n                <Iterate.PushContainer.OpenButton text=\"Add another account\" />\n              }\n              showOpenButtonWhen={(list) => list.length > 0}\n            >\n              <MyEditItemForm />\n            </Iterate.PushContainer>\n          )\n        }\n\n        const MyForm = () => {\n          return (\n            <Form.Handler\n              onChange={(data) =>\n                console.log('DataContext/onChange', data)\n              }\n              onSubmit={async (data) => console.log('onSubmit', data)}\n            >\n              <Flex.Stack>\n                <Form.MainHeading>Accounts</Form.MainHeading>\n\n                <Form.Card gap={false}>\n                  <Iterate.Array path=\"/accounts\">\n                    <MyViewItem />\n                    <MyEditItem />\n                  </Iterate.Array>\n\n                  <CreateNewEntry />\n                </Form.Card>\n\n                <Form.SubmitButton variant=\"send\" />\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const IsolatedData = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const formData = {\n          persons: [\n            {\n              firstName: 'Ola',\n              lastName: 'Nordmann',\n            },\n            {\n              firstName: 'Kari',\n              lastName: 'Nordmann',\n            },\n            {\n              firstName: 'Per',\n              lastName: 'Hansen',\n            },\n          ],\n        }\n\n        function RepresentativesView() {\n          return (\n            <Iterate.ViewContainer>\n              <Value.Composition>\n                <Value.String itemPath=\"/firstName\" />\n                <Value.String itemPath=\"/lastName\" />\n              </Value.Composition>\n            </Iterate.ViewContainer>\n          )\n        }\n\n        function RepresentativesEdit() {\n          return (\n            <Iterate.EditContainer>\n              <Field.Name.First itemPath=\"/firstName\" />\n              <Field.Name.Last itemPath=\"/lastName\" />\n            </Iterate.EditContainer>\n          )\n        }\n\n        function ExistingPersonDetails() {\n          const { data, getValue } = Form.useData()\n          const person = getValue(data['selectedPerson'])?.data || {}\n\n          return (\n            <Flex.Stack>\n              <Field.Name.First\n                readOnly\n                itemPath=\"/firstName\"\n                value={person.firstName}\n              />\n              <Field.Name.Last\n                readOnly\n                itemPath=\"/lastName\"\n                value={person.lastName}\n              />\n            </Flex.Stack>\n          )\n        }\n\n        function NewPersonDetails() {\n          return (\n            <Flex.Stack>\n              <Field.Name.First required itemPath=\"/firstName\" />\n              <Field.Name.Last required itemPath=\"/lastName\" />\n            </Flex.Stack>\n          )\n        }\n\n        function PushContainerContent() {\n          const { data, update } = Form.useData()\n          const selectedPerson = data['selectedPerson'] // Because of missing TypeScript support\n\n          // Clear the PushContainer data when the selected person is \"other\",\n          // so the fields do not inherit existing data.\n          React.useLayoutEffect(() => {\n            if (selectedPerson === 'other') {\n              update('/pushContainerItems/0', {})\n            }\n          }, [selectedPerson, update])\n\n          return (\n            <>\n              <Field.Selection\n                variant=\"radio\"\n                required\n                path=\"/selectedPerson\"\n                dataPath=\"/persons\"\n              >\n                <Field.Option value=\"other\" label=\"Other person\" />\n              </Field.Selection>\n\n              <HeightAnimation top>\n                <Form.Visibility\n                  visibleWhen={{\n                    path: '/selectedPerson',\n                    hasValue: (value) =>\n                      typeof value === 'string' && value !== 'other',\n                  }}\n                >\n                  <ExistingPersonDetails />\n                </Form.Visibility>\n\n                <Form.Visibility\n                  visibleWhen={{\n                    path: '/selectedPerson',\n                    hasValue: (value) => value === 'other',\n                  }}\n                >\n                  <NewPersonDetails />\n                </Form.Visibility>\n              </HeightAnimation>\n            </>\n          )\n        }\n\n        function RepresentativesCreateNew() {\n          return (\n            <Iterate.PushContainer\n              path=\"/representatives\"\n              title=\"Add new representative\"\n              isolatedData={{\n                persons: formData.persons.map((data, i) => {\n                  return {\n                    title: [data.firstName, data.lastName].join(' '),\n                    value: `/persons/${i}`,\n                    data,\n                  }\n                }),\n              }}\n              openButton={\n                <Iterate.PushContainer.OpenButton\n                  variant=\"tertiary\"\n                  text=\"Add new representative\"\n                />\n              }\n              showOpenButtonWhen={(list) => list.length > 0}\n            >\n              <PushContainerContent />\n            </Iterate.PushContainer>\n          )\n        }\n\n        return (\n          <Form.Handler>\n            <Form.MainHeading>Representatives</Form.MainHeading>\n            <Flex.Stack>\n              <Form.Card>\n                <Iterate.Array path=\"/representatives\">\n                  <RepresentativesView />\n                  <RepresentativesEdit />\n                </Iterate.Array>\n                <RepresentativesCreateNew />\n              </Form.Card>\n\n              <Form.Card>\n                <Form.SubHeading>Data Context</Form.SubHeading>\n                <Tools.Log placeholder=\"-\" />\n              </Form.Card>\n            </Flex.Stack>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const PreventUncommittedChanges = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Wizard.Container>\n          <Wizard.Step title=\"Step 1\">\n            <Form.Card>\n              <Form.SubHeading>People</Form.SubHeading>\n              <Iterate.Array\n                path=\"/people\"\n                animate\n                placeholder=\"No people\"\n              >\n                <Value.Name.First itemPath=\"/firstName\" />\n              </Iterate.Array>\n\n              <Iterate.PushContainer\n                path=\"/people\"\n                title=\"New person\"\n                preventUncommittedChanges\n                bubbleValidation\n                openButton={\n                  <Iterate.PushContainer.OpenButton\n                    top\n                    variant=\"tertiary\"\n                    text=\"Add new person\"\n                  />\n                }\n                showOpenButtonWhen={(list) => list.length > 0}\n              >\n                <Field.Name.First itemPath=\"/firstName\" />\n              </Iterate.PushContainer>\n            </Form.Card>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step title=\"Step 2\">\n            <Iterate.Array path=\"/people\">\n              <Value.Name.First itemPath=\"/firstName\" />\n            </Iterate.Array>\n            <Wizard.Buttons />\n          </Wizard.Step>\n        </Wizard.Container>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Variants = () => {\n  return (\n    <ComponentBox data-visual-test=\"push-container-variants\">\n      <Form.Handler>\n        <Wizard.Container>\n          <Wizard.Step title=\"Step 1\">\n            <Iterate.Array path=\"/x\" required>\n              <Value.Address itemPath=\"/y\" />\n            </Iterate.Array>\n            <Iterate.PushContainer\n              path=\"/x\"\n              variant=\"outline\"\n              top\n              bottom\n              bubbleValidation\n            >\n              <Field.Address\n                label=\"variant outline\"\n                itemPath=\"/y\"\n                required\n              />\n            </Iterate.PushContainer>\n            <Iterate.PushContainer\n              path=\"/x\"\n              variant=\"filled\"\n              top\n              bottom\n              bubbleValidation\n            >\n              <Field.Address\n                label=\"variant filled\"\n                itemPath=\"/y\"\n                required\n              />\n            </Iterate.PushContainer>\n            <Iterate.PushContainer\n              path=\"/x\"\n              variant=\"basic\"\n              top\n              bottom\n              bubbleValidation\n            >\n              <Field.Address\n                label=\"variant basic\"\n                itemPath=\"/y\"\n                required\n              />\n            </Iterate.PushContainer>\n            <Wizard.Buttons />\n          </Wizard.Step>\n          <Wizard.Step title=\"Step 2\">\n            <Wizard.Buttons />\n          </Wizard.Step>\n        </Wizard.Container>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {VisibleWhenVisualTest} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.InitiallyOpen) _missingMdxReference(\"Examples.InitiallyOpen\", true);\n  if (!Examples.IsolatedData) _missingMdxReference(\"Examples.IsolatedData\", true);\n  if (!Examples.PreventUncommittedChanges) _missingMdxReference(\"Examples.PreventUncommittedChanges\", true);\n  if (!Examples.Variants) _missingMdxReference(\"Examples.Variants\", true);\n  if (!Examples.ViewAndEditContainer) _missingMdxReference(\"Examples.ViewAndEditContainer\", true);\n  if (!VisibleWhenVisualTest) _missingMdxReference(\"VisibleWhenVisualTest\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Prevent uncommitted changes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This example uses the \", _jsx(_components.code, {\n        children: \"preventUncommittedChanges\"\n      }), \" property to display an error message if the user has made changes and attempts to navigate to the next Wizard step.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Try entering something in the input field, then navigate to the next step. An error message will appear to indicate that changes must be committed first.\"\n    }), \"\\n\", _jsx(Examples.PreventUncommittedChanges, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Initially open\"\n    }), \"\\n\", _jsx(Examples.InitiallyOpen, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With existing data\"\n    }), \"\\n\", _jsx(Examples.ViewAndEditContainer, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Isolated data\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This demo shows how to use the \", _jsx(_components.code, {\n        children: \"isolatedData\"\n      }), \" property to provide data to the PushContainer.\"]\n    }), \"\\n\", _jsx(Examples.IsolatedData, {}), \"\\n\", _jsx(VisibleWhenVisualTest, {\n      children: _jsx(Examples.Variants, {})\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["InitiallyOpen","_jsx","ComponentBox","noInline","children","IsolatedData","PreventUncommittedChanges","Variants","_createMdxContent","props","_components","Object","assign","h2","h3","p","code","_provideComponents","components","VisibleWhenVisualTest","Examples","_missingMdxReference","ViewAndEditContainer","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error"],"sourceRoot":""}