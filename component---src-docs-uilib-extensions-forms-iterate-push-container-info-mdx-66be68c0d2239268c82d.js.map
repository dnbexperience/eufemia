{"version":3,"file":"component---src-docs-uilib-extensions-forms-iterate-push-container-info-mdx-66be68c0d2239268c82d.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/PushContainer/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Iterate.PushContainer\"\n      }), \" enables users to create a new item in the array. It can be used instead of the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/PushButton/\",\n        children: \"Iterate.PushButton\"\n      }), \", but with fields in the container.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It allows the user to fill in the fields without storing them in the data context.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Good to know:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Fields inside the container must have an \", _jsx(_components.code, {\n          children: \"itemPath\"\n        }), \" defined, instead of a \", _jsx(_components.code, {\n          children: \"path\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If the user enters data without committing it to the outer context, that data will be lost when navigating to another step in the Wizard. To prevent this, you can use the \", _jsx(_components.code, {\n          children: \"requireCommit\"\n        }), \" property on the PushContainer. When enabled, it will display an error message if the user tries to proceed without committing their changes.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"You can provide \", _jsx(_components.code, {\n          children: \"data\"\n        }), \", \", _jsx(_components.code, {\n          children: \"defaultData\"\n        }), \" in addition to \", _jsx(_components.code, {\n          children: \"isolatedData\"\n        }), \" to prefill the fields.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"path\"\n        }), \" you define needs to point to an existing \", _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/Iterate/Array/\",\n          children: \"Iterate.Array\"\n        }), \" path.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Usage\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You may place it below the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/Array/\",\n        children: \"Iterate.Array\"\n      }), \" component like this:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Field } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Handler>\\n    <Iterate.Array path=\\\"/myList\\\">...</Iterate.Array>\\n\\n    <Iterate.PushContainer path=\\\"/myList\\\" title=\\\"New item title\\\">\\n      <Field.Name.Last itemPath=\\\"/name\\\" />\\n    </Iterate.PushContainer>\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Prevent the form from being submitted\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To prevent the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Handler/\",\n        children: \"Form.Handler\"\n      }), \" from being submitted when there are fields with errors inside the PushContainer, you can use the \", _jsx(_components.code, {\n        children: \"bubbleValidation\"\n      }), \" property.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field, Iterate } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Handler>\\n    <Iterate.Array path=\\\"/myList\\\">...</Iterate.Array>\\n\\n    <Iterate.PushContainer path=\\\"/myList\\\" bubbleValidation>\\n      <Field.Name.Last itemPath=\\\"/name\\\" required />\\n    </Iterate.PushContainer>\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Show a button to create a new item\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, it keeps the form open after a new item has been created. You can change this behavior by using the \", _jsx(_components.code, {\n        children: \"openButton\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"showOpenButtonWhen\"\n      }), \" properties.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"These properties allow you to render a button (\", _jsx(_components.code, {\n        children: \"openButton\"\n      }), \") and determine when to show it based on the logic provided by the \", _jsx(_components.code, {\n        children: \"showOpenButtonWhen\"\n      }), \" function. The \", _jsx(_components.code, {\n        children: \"showOpenButtonWhen\"\n      }), \" function receives the current list of items as an argument.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The button will be shown instead of the content provided by the children when the \", _jsx(_components.code, {\n        children: \"showOpenButtonWhen\"\n      }), \" function returns \", _jsx(_components.code, {\n        children: \"true\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Field } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Handler>\\n    <Iterate.Array path=\\\"/myList\\\">...</Iterate.Array>\\n\\n    <Iterate.PushContainer\\n      path=\\\"/myList\\\"\\n      title=\\\"New item title\\\"\\n      openButton={\\n        <Iterate.PushContainer.OpenButton text=\\\"Add another item\\\" />\\n      }\\n      showOpenButtonWhen={(list) => list.length > 0}\\n    >\\n      Will be hidden based on the showOpenButtonWhen function\\n    </Iterate.PushContainer>\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Iterate.PushContainer.OpenButton\"\n      }), \" accepts the same properties as the \", _jsx(_components.a, {\n        href: \"/uilib/components/button/\",\n        children: \"Button\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Show the next item number in the open button\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the \", _jsx(_components.code, {\n        children: \"{nextItemNo}\"\n      }), \" variable in the \", _jsx(_components.code, {\n        children: \"text\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"children\"\n      }), \" property to display the next item number.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Field, Value } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Handler>\\n    <Iterate.Array path=\\\"/myList\\\">...</Iterate.Array>\\n\\n    <Iterate.PushContainer\\n      path=\\\"/myList\\\"\\n      title=\\\"New item title\\\"\\n      openButton={\\n        <Iterate.PushContainer.OpenButton text=\\\"Add no. {nextItemNo}\\\" />\\n      }\\n      showOpenButtonWhen={(list) => list.length > 0}\\n    >\\n      <Field.Name.Last itemPath=\\\"/name\\\" />\\n    </Iterate.PushContainer>\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Technical details\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Under the hood, it uses the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Isolation/\",\n        children: \"Form.Isolation\"\n      }), \" component to isolate the data from the rest of the form. It also uses the the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/EditContainer/\",\n        children: \"Iterate.EditContainer\"\n      }), \" inside the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/Array/\",\n        children: \"Iterate.Array\"\n      }), \" component to render the fields.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All fields inside the container will be stored in the data context at this path: \", _jsx(_components.code, {\n        children: \"/pushContainerItems/0\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","a","ul","li","pre","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","className","wrapper","MDXLayout"],"sourceRoot":""}