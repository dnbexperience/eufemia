"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[47548,79306],{54889:function(e,n,t){t.r(n);var r=t(52322),s=t(45392),i=t(35896),o=t(96658);function a(e){return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.default,{}),"\n",(0,r.jsx)(o.default,{})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(a,e)})):a()}},35896:function(e,n,t){t.r(n);var r=t(52322),s=t(45392);function i(e){const n=Object.assign({h2:"h2",p:"p",code:"code",a:"a",pre:"pre"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Iterate.PushContainer"})," enables users to create a new item in the array. It can be used instead of the ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/Iterate/PushButton/",children:"PushButton"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"It allows the user to fill in the fields without storing them in the data context."}),"\n",(0,r.jsxs)(n.p,{children:["Fields inside the container must have an ",(0,r.jsx)(n.code,{children:"itemPath"})," defined."]}),"\n",(0,r.jsxs)(n.p,{children:["You can place it below the ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/Iterate/Array/",children:"Array"})," component like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { Iterate, Field } from \'@dnb/eufemia/extensions/forms\'\n\nrender(\n  <Form.Handler>\n    <Iterate.Array path="/myList">...</Iterate.Array>\n\n    <Iterate.PushContainer path="/myList" title="New item title">\n      <Field.Name.Last itemPath="/name" />\n    </Iterate.PushContainer>\n  </Form.Handler>,\n)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Technically it uses the ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/Iterate/EditContainer/",children:"EditContainer"})," and the ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/Form/Isolation/",children:"Form.Isolation"})," under the hood."]}),"\n",(0,r.jsx)(n.h2,{children:"Show a button to create a new item"}),"\n",(0,r.jsxs)(n.p,{children:["By default, it keeps the form open after a new item has been created. You can change this behavior by using the ",(0,r.jsx)(n.code,{children:"openButton"})," and ",(0,r.jsx)(n.code,{children:"showOpenButtonWhen"})," properties."]}),"\n",(0,r.jsxs)(n.p,{children:["These properties allow you to render a button (",(0,r.jsx)(n.code,{children:"openButton"}),") and determine when to show it based on the logic provided by the ",(0,r.jsx)(n.code,{children:"showOpenButtonWhen"})," function. The ",(0,r.jsx)(n.code,{children:"showOpenButtonWhen"})," function receives the current list of items as an argument."]}),"\n",(0,r.jsxs)(n.p,{children:["The button will be shown instead of the content provided by the children when the ",(0,r.jsx)(n.code,{children:"showOpenButtonWhen"})," function returns ",(0,r.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { Iterate, Field } from \'@dnb/eufemia/extensions/forms\'\n\nrender(\n  <Form.Handler>\n    <Iterate.Array path="/myList">...</Iterate.Array>\n\n    <Iterate.PushContainer\n      path="/myList"\n      title="New item title"\n      openButton={\n        <Iterate.PushContainer.OpenButton text="Add another item" />\n      }\n      showOpenButtonWhen={(list) => list.length > 0}\n    >\n      Will be hidden based on the showOpenButtonWhen function\n    </Iterate.PushContainer>\n  </Form.Handler>,\n)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Iterate.PushContainer.OpenButton"})," accepts the same properties as the ",(0,r.jsx)(n.a,{href:"/uilib/components/button/",children:"Button"})," component."]}),"\n",(0,r.jsx)(n.h2,{children:"Show the next item number in the open button"}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.code,{children:"{nextItemNo}"})," variable in the ",(0,r.jsx)(n.code,{children:"text"})," or ",(0,r.jsx)(n.code,{children:"children"})," property to display the next item number."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { Iterate, Field, Value } from \'@dnb/eufemia/extensions/forms\'\n\nrender(\n  <Form.Handler>\n    <Iterate.Array path="/myList">...</Iterate.Array>\n\n    <Iterate.PushContainer\n      path="/myList"\n      title="New item title"\n      openButton={\n        <Iterate.PushContainer.OpenButton text="Add no. {nextItemNo}" />\n      }\n      showOpenButtonWhen={(list) => list.length > 0}\n    >\n      <Field.Name.Last itemPath="/name" />\n    </Iterate.PushContainer>\n  </Form.Handler>,\n)\n'})})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(i,e)})):i(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-iterate-push-container-mdx-65a2cd5aaa902a03e8f1.js.map