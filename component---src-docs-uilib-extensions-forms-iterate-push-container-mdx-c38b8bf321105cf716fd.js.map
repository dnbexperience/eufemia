{"version":3,"file":"component---src-docs-uilib-extensions-forms-iterate-push-container-mdx-c38b8bf321105cf716fd.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/PushContainer.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/PushContainer/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/PushContainer/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/PushContainer/info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/Iterate/PushContainer/info';\nimport Demos from 'Docs/uilib/extensions/forms/Iterate/PushContainer/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import {\n  Field,\n  Form,\n  Iterate,\n  Tools,\n  Value,\n} from '@dnb/eufemia/src/extensions/forms'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Flex } from '@dnb/eufemia/src'\nimport React from 'react'\n\nexport { ViewAndEditContainer } from '../Array/Examples'\n\nexport const InitiallyOpen = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyEditItemForm = () => {\n          return (\n            <Field.Composition>\n              <Field.Name.First itemPath=\"/firstName\" width=\"medium\" />\n              <Field.Name.Last\n                itemPath=\"/lastName\"\n                width=\"medium\"\n                required\n              />\n            </Field.Composition>\n          )\n        }\n\n        const MyEditItem = () => {\n          return (\n            <Iterate.EditContainer\n              title=\"Edit account holder {itemNo}\"\n              titleWhenNew=\"New account holder {itemNo}\"\n            >\n              <MyEditItemForm />\n            </Iterate.EditContainer>\n          )\n        }\n\n        const MyViewItem = () => {\n          const item = Iterate.useItem()\n          console.log('index:', item.index)\n\n          return (\n            <Iterate.ViewContainer title=\"Account holder {itemNo}\">\n              <Value.SummaryList>\n                <Value.Name.First itemPath=\"/firstName\" showEmpty />\n                <Value.Name.Last itemPath=\"/lastName\" placeholder=\"-\" />\n              </Value.SummaryList>\n            </Iterate.ViewContainer>\n          )\n        }\n\n        const CreateNewEntry = () => {\n          return (\n            <Iterate.PushContainer\n              path=\"/accounts\"\n              title=\"New account holder\"\n              openButton={\n                <Iterate.PushContainer.OpenButton text=\"Add another account\" />\n              }\n              showOpenButtonWhen={(list) => list.length > 0}\n            >\n              <MyEditItemForm />\n            </Iterate.PushContainer>\n          )\n        }\n\n        const MyForm = () => {\n          return (\n            <Form.Handler\n              onChange={(data) =>\n                console.log('DataContext/onChange', data)\n              }\n              onSubmit={async (data) => console.log('onSubmit', data)}\n            >\n              <Flex.Stack>\n                <Form.MainHeading>Accounts</Form.MainHeading>\n\n                <Form.Card>\n                  <Iterate.Array path=\"/accounts\">\n                    <MyViewItem />\n                    <MyEditItem />\n                  </Iterate.Array>\n\n                  <CreateNewEntry />\n                </Form.Card>\n\n                <Form.SubmitButton variant=\"send\" />\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const IsolatedData = () => {\n  return (\n    <ComponentBox scope={{ Tools }}>\n      {() => {\n        const formData = {\n          persons: [\n            {\n              firstName: 'Ola',\n              lastName: 'Nordmann',\n            },\n            {\n              firstName: 'Kari',\n              lastName: 'Nordmann',\n            },\n            {\n              firstName: 'Per',\n              lastName: 'Hansen',\n            },\n          ],\n        }\n\n        function RepresentativesView() {\n          return (\n            <Iterate.ViewContainer>\n              <Value.Composition>\n                <Value.String itemPath=\"/firstName\" />\n                <Value.String itemPath=\"/lastName\" />\n              </Value.Composition>\n            </Iterate.ViewContainer>\n          )\n        }\n\n        function RepresentativesEdit() {\n          return (\n            <Iterate.EditContainer>\n              <Field.Name.First itemPath=\"/firstName\" />\n              <Field.Name.Last itemPath=\"/lastName\" />\n            </Iterate.EditContainer>\n          )\n        }\n\n        function ExistingPersonDetails() {\n          const { data, getValue } = Form.useData()\n          const person = getValue(data['selectedPerson'])?.data || {}\n\n          return (\n            <Flex.Stack>\n              <Field.Name.First\n                readOnly\n                itemPath=\"/firstName\"\n                value={person.firstName}\n              />\n              <Field.Name.Last\n                readOnly\n                itemPath=\"/lastName\"\n                value={person.lastName}\n              />\n            </Flex.Stack>\n          )\n        }\n\n        function NewPersonDetails() {\n          return (\n            <Flex.Stack>\n              <Field.Name.First required itemPath=\"/firstName\" />\n              <Field.Name.Last required itemPath=\"/lastName\" />\n            </Flex.Stack>\n          )\n        }\n\n        function PushContainerContent() {\n          const { data, update } = Form.useData()\n          const selectedPerson = data['selectedPerson'] // Because of missing TypeScript support\n\n          // Clear the PushContainer data when the selected person is \"other\",\n          // so the fields do not inherit existing data.\n          React.useLayoutEffect(() => {\n            if (selectedPerson === 'other') {\n              update('/pushContainerItems/0', {})\n            }\n          }, [selectedPerson, update])\n\n          return (\n            <Flex.Stack>\n              <Field.Selection\n                variant=\"radio\"\n                required\n                path=\"/selectedPerson\"\n                dataPath=\"/persons\"\n              >\n                <Field.Option value=\"other\" label=\"Other person\" />\n              </Field.Selection>\n              <Form.Visibility\n                visibleWhen={{\n                  path: '/selectedPerson',\n                  hasValue: (value) =>\n                    typeof value === 'string' && value !== 'other',\n                }}\n              >\n                <ExistingPersonDetails />\n              </Form.Visibility>\n\n              <Form.Visibility\n                visibleWhen={{\n                  path: '/selectedPerson',\n                  hasValue: (value) => value === 'other',\n                }}\n              >\n                <NewPersonDetails />\n              </Form.Visibility>\n            </Flex.Stack>\n          )\n        }\n\n        function RepresentativesCreateNew() {\n          return (\n            <Iterate.PushContainer\n              path=\"/representatives\"\n              title=\"Add new representative\"\n              isolatedData={{\n                persons: formData.persons.map((data, i) => {\n                  return {\n                    title: [data.firstName, data.lastName].join(' '),\n                    value: '/persons/' + i,\n                    data,\n                  }\n                }),\n              }}\n              openButton={\n                <Iterate.PushContainer.OpenButton\n                  variant=\"tertiary\"\n                  text=\"Add new representative\"\n                />\n              }\n              showOpenButtonWhen={(list) => list.length > 0}\n            >\n              <PushContainerContent />\n            </Iterate.PushContainer>\n          )\n        }\n\n        return (\n          <Form.Handler>\n            <Form.MainHeading>Representatives</Form.MainHeading>\n            <Flex.Stack>\n              <Form.Card>\n                <Iterate.Array path=\"/representatives\">\n                  <RepresentativesView />\n                  <RepresentativesEdit />\n                </Iterate.Array>\n                <RepresentativesCreateNew />\n              </Form.Card>\n\n              <Form.Card>\n                <Form.SubHeading>Data Context</Form.SubHeading>\n                <Tools.Log placeholder=\"-\" />\n              </Form.Card>\n            </Flex.Stack>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.InitiallyOpen) _missingMdxReference(\"Examples.InitiallyOpen\", true);\n  if (!Examples.IsolatedData) _missingMdxReference(\"Examples.IsolatedData\", true);\n  if (!Examples.ViewAndEditContainer) _missingMdxReference(\"Examples.ViewAndEditContainer\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Initially open\"\n    }), \"\\n\", _jsx(Examples.InitiallyOpen, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With existing data\"\n    }), \"\\n\", _jsx(Examples.ViewAndEditContainer, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Isolated data\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This demo shows how to use the \", _jsx(_components.code, {\n        children: \"isolatedData\"\n      }), \" property to provide data to the PushContainer.\"]\n    }), \"\\n\", _jsx(Examples.IsolatedData, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Iterate.PushContainer\"\n      }), \" enables users to create a new item in the array. It can be used instead of the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/PushButton/\",\n        children: \"PushButton\"\n      }), \", but with fields in the container.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It allows the user to fill in the fields without storing them in the data context.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Good to know:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Fields inside the container must have an \", _jsx(_components.code, {\n          children: \"itemPath\"\n        }), \" defined, instead of a \", _jsx(_components.code, {\n          children: \"path\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"You can provide \", _jsx(_components.code, {\n          children: \"data\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"defaultData\"\n        }), \" to prefill the fields.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"path\"\n        }), \" you define needs to point to an existing \", _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/Iterate/Array/\",\n          children: \"Iterate.Array\"\n        }), \" path.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Usage\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You may place it below the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/Array/\",\n        children: \"Iterate.Array\"\n      }), \" component like this:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Field } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Handler>\\n    <Iterate.Array path=\\\"/myList\\\">...</Iterate.Array>\\n\\n    <Iterate.PushContainer path=\\\"/myList\\\" title=\\\"New item title\\\">\\n      <Field.Name.Last itemPath=\\\"/name\\\" />\\n    </Iterate.PushContainer>\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Prevent the form from being submitted\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To prevent the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Handler/\",\n        children: \"Form.Handler\"\n      }), \" from being submitted when there are fields with errors inside the PushContainer, you can use the \", _jsx(_components.code, {\n        children: \"bubbleValidation\"\n      }), \" property.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Field, Iterate } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Handler>\\n    <Iterate.Array path=\\\"/myList\\\">...</Iterate.Array>\\n\\n    <Iterate.PushContainer path=\\\"/myList\\\" bubbleValidation>\\n      <Field.Name.Last itemPath=\\\"/name\\\" required />\\n    </Iterate.PushContainer>\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Show a button to create a new item\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, it keeps the form open after a new item has been created. You can change this behavior by using the \", _jsx(_components.code, {\n        children: \"openButton\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"showOpenButtonWhen\"\n      }), \" properties.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"These properties allow you to render a button (\", _jsx(_components.code, {\n        children: \"openButton\"\n      }), \") and determine when to show it based on the logic provided by the \", _jsx(_components.code, {\n        children: \"showOpenButtonWhen\"\n      }), \" function. The \", _jsx(_components.code, {\n        children: \"showOpenButtonWhen\"\n      }), \" function receives the current list of items as an argument.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The button will be shown instead of the content provided by the children when the \", _jsx(_components.code, {\n        children: \"showOpenButtonWhen\"\n      }), \" function returns \", _jsx(_components.code, {\n        children: \"true\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Field } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Handler>\\n    <Iterate.Array path=\\\"/myList\\\">...</Iterate.Array>\\n\\n    <Iterate.PushContainer\\n      path=\\\"/myList\\\"\\n      title=\\\"New item title\\\"\\n      openButton={\\n        <Iterate.PushContainer.OpenButton text=\\\"Add another item\\\" />\\n      }\\n      showOpenButtonWhen={(list) => list.length > 0}\\n    >\\n      Will be hidden based on the showOpenButtonWhen function\\n    </Iterate.PushContainer>\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Iterate.PushContainer.OpenButton\"\n      }), \" accepts the same properties as the \", _jsx(_components.a, {\n        href: \"/uilib/components/button/\",\n        children: \"Button\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Show the next item number in the open button\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the \", _jsx(_components.code, {\n        children: \"{nextItemNo}\"\n      }), \" variable in the \", _jsx(_components.code, {\n        children: \"text\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"children\"\n      }), \" property to display the next item number.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Field, Value } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Handler>\\n    <Iterate.Array path=\\\"/myList\\\">...</Iterate.Array>\\n\\n    <Iterate.PushContainer\\n      path=\\\"/myList\\\"\\n      title=\\\"New item title\\\"\\n      openButton={\\n        <Iterate.PushContainer.OpenButton text=\\\"Add no. {nextItemNo}\\\" />\\n      }\\n      showOpenButtonWhen={(list) => list.length > 0}\\n    >\\n      <Field.Name.Last itemPath=\\\"/name\\\" />\\n    </Iterate.PushContainer>\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Technical details\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Under the hood, it uses the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Isolation/\",\n        children: \"Form.Isolation\"\n      }), \" component to isolate the data from the rest of the form. It also uses the the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/EditContainer/\",\n        children: \"EditContainer\"\n      }), \" inside the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/Array/\",\n        children: \"Iterate.Array\"\n      }), \" component to render the fields.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All fields inside the container will be stored in the data context at this path: \", _jsx(_components.code, {\n        children: \"/pushContainerItems/0\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","InitiallyOpen","ComponentBox","noInline","IsolatedData","scope","Tools","_components","h2","h3","p","code","Examples","_missingMdxReference","ViewAndEditContainer","id","component","Error","a","ul","li","pre","href","className"],"sourceRoot":""}