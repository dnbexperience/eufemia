"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[13618],{38071:function(n,e,t){t.r(e),t.d(e,{default:function(){return u}});var a={};t.r(a),t.d(a,{ToolbarVariantMiniumOneItemOneItem:function(){return o.ToolbarVariantMiniumOneItemOneItem},ToolbarVariantMiniumOneItemTwoItems:function(){return o.ToolbarVariantMiniumOneItemTwoItems},ViewAndEditContainer:function(){return o.ViewAndEditContainer}});var r=t(52322),i=t(45392),o=t(27498);function l(n){const e=Object.assign({h2:"h2",h3:"h3",h4:"h4",p:"p"},(0,i.ah)(),n.components);return a||s("Examples",!1),o.ToolbarVariantMiniumOneItemOneItem||s("Examples.ToolbarVariantMiniumOneItemOneItem",!0),o.ToolbarVariantMiniumOneItemTwoItems||s("Examples.ToolbarVariantMiniumOneItemTwoItems",!0),o.ViewAndEditContainer||s("Examples.ViewAndEditContainer",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:"Demos"}),"\n",(0,r.jsx)(o.ViewAndEditContainer,{}),"\n",(0,r.jsx)(e.h3,{children:"Toolbar variant"}),"\n",(0,r.jsx)(e.h4,{children:"Minimum one item"}),"\n",(0,r.jsx)(e.p,{children:"When having one item in the Iterate.Array:"}),"\n",(0,r.jsx)(o.ToolbarVariantMiniumOneItemOneItem,{}),"\n",(0,r.jsx)(e.p,{children:"When having two items in the Iterate.Array:"}),"\n",(0,r.jsx)(o.ToolbarVariantMiniumOneItemTwoItems,{})]})}var u=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(l,n)})):l(n)};function s(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},40730:function(n,e,t){t.r(e),t.d(e,{Default:function(){return i}});var a=t(64368),r=t(52322);const i=()=>(0,r.jsx)(a.Z,{noInline:!0,children:'const MyForm = () => {\n  const { count } = Iterate.useCount(\'myForm\')\n  return (\n    <Form.Handler\n      defaultData={{\n        myList: [\'Item 1\'],\n      }}\n      id="myForm"\n    >\n      <Card stack>\n        <Iterate.Array path="/myList" placeholder={<>Empty list</>}>\n          <Iterate.AnimatedContainer title="Title {itemNr}">\n            <Field.String label="Label" itemPath="/" />\n\n            <Iterate.Toolbar>\n              <Iterate.RemoveButton />\n            </Iterate.Toolbar>\n          </Iterate.AnimatedContainer>\n        </Iterate.Array>\n\n        <Iterate.PushButton\n          path="/myList"\n          pushValue={\'Item \' + String(count(\'/myList\') + 1)}\n          text="Add new item"\n        />\n      </Card>\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n'})},27498:function(n,e,t){t.r(e),t.d(e,{AnimatedContainer:function(){return I.Default},ArrayFromFormHandler:function(){return F},DynamicPathValue:function(){return V},InitialOpen:function(){return w},ObjectItems:function(){return g},PrimitiveItemsFields:function(){return p},PrimitiveItemsValues:function(){return f},RenderPropsObjectItems:function(){return v},RenderPropsPrimitiveItems:function(){return C},ToolbarVariantMiniumOneItemOneItem:function(){return N},ToolbarVariantMiniumOneItemTwoItems:function(){return O},ValueComposition:function(){return y},ViewAndEditContainer:function(){return x},WithArrayValidator:function(){return T},WithTable:function(){return b},WithVisibility:function(){return A}});var a={};t.r(a),t.d(a,{GenerateSchema:function(){return o.Z},ListAllProps:function(){return l.Z},Log:function(){return h}});var r=t(64368),i=t(48673),o=t(38734),l=t(10454),u=t(2784),s=t(21068),m=t(54109).Z,d=t(52322);function c(n){const{data:e}=(0,u.useContext)(s.Z);return(0,d.jsx)(m,{element:"output",backgroundColor:"sand-yellow",style:{maxWidth:"80vw"},innerSpace:!0,...n,children:(0,d.jsxs)("pre",{children:[JSON.stringify(e),"Â "]})})}c._supportsSpacingProps=!0;var h=c,I=t(40730);const p=()=>(0,d.jsx)(r.Z,{children:"<Iterate.Array\n  value={['Iron Man', 'Captain America', 'The Hulk']}\n  onChange={console.log}\n>\n  <Field.String itemPath=\"/\" />\n</Iterate.Array>\n"}),f=()=>(0,d.jsx)(r.Z,{"data-visual-test":"primitive-element-values",children:"<Value.SummaryList>\n  <Iterate.Array value={['Iron Man', 'Captain America', 'The Hulk']}>\n    <Value.String itemPath=\"/\" />\n  </Iterate.Array>\n</Value.SummaryList>\n"}),y=()=>(0,d.jsx)(r.Z,{children:"<Value.Composition>\n  <Iterate.Array\n    value={[\n      {\n        label: 'Label A',\n        value: 'value 1',\n      },\n      {\n        label: 'Label B',\n        value: 'value 2',\n      },\n    ]}\n  >\n    <Value.String\n      label={<Value.String itemPath=\"/label\" />}\n      itemPath=\"/value\"\n    />\n  </Iterate.Array>\n</Value.Composition>\n"}),b=()=>(0,d.jsx)(r.Z,{children:"<Table>\n  <thead>\n    <Tr>\n      <Th>Name</Th>\n      <Th>Age</Th>\n    </Tr>\n  </thead>\n  <tbody>\n    <Iterate.Array\n      withoutFlex\n      value={[\n        {\n          name: 'Iron Man',\n          age: 45,\n        },\n        {\n          name: 'Captain America',\n          age: 123,\n        },\n        {\n          name: 'The Hulk',\n          age: 3337,\n        },\n      ]}\n    >\n      <Tr>\n        <Td>\n          <Value.Name.Last itemPath=\"/name\" />\n        </Td>\n        <Td>\n          <Value.Number itemPath=\"/age\" />\n        </Td>\n      </Tr>\n    </Iterate.Array>\n  </tbody>\n</Table>\n"}),g=()=>(0,d.jsx)(r.Z,{children:"<Iterate.Array\n  value={[\n    {\n      accountName: 'Brukskonto',\n      accountNumber: '90901134567',\n    },\n    {\n      accountName: 'Sparekonto',\n      accountNumber: '90901156789',\n    },\n  ]}\n  onChange={(value) => console.log('onChange', value)}\n>\n  <Field.Composition>\n    <Field.BankAccountNumber itemPath=\"/accountNumber\" />\n    <Field.String label=\"Account name\" itemPath=\"/accountName\" />\n  </Field.Composition>\n</Iterate.Array>\n"}),C=()=>(0,d.jsx)(r.Z,{children:"<Iterate.Array\n  value={['foo', 'bar']}\n  onChange={(value) => console.log('onChange', value)}\n>\n  {(elementValue) => <Field.String value={elementValue} />}\n</Iterate.Array>\n"}),v=()=>(0,d.jsx)(r.Z,{children:"<Iterate.Array\n  value={[\n    {\n      num: 1,\n      txt: 'One',\n    },\n    {\n      num: 2,\n      txt: 'Two',\n    },\n  ]}\n  onChange={(value) => console.log('onChange', value)}\n>\n  {({ num, txt }) => (\n    <Field.Composition width=\"large\">\n      <Field.Number value={num} width=\"small\" />\n      <Field.String value={txt} width={false} />\n    </Field.Composition>\n  )}\n</Iterate.Array>\n"}),F=()=>(0,d.jsx)(r.Z,{"data-visual-test":"animated-container",children:'<Form.Handler\n  data={{\n    avengers: [\n      {\n        nickname: \'Iron Man\',\n        firstName: \'Tony\',\n        lastName: \'Stark\',\n      },\n      {\n        nickname: \'Captain America\',\n        firstName: \'Steve\',\n        lastName: \'Rogers\',\n      },\n    ],\n  }}\n  onChange={(data) => console.log(\'DataContext/onChange\', data)}\n>\n  <Flex.Stack>\n    <Form.MainHeading>Avengers</Form.MainHeading>\n\n    <Card stack>\n      <Iterate.Array\n        path="/avengers"\n        onChange={(value) => console.log(\'Iterate/onChange\', value)}\n      >\n        <Iterate.AnimatedContainer\n          title={\n            <Value.String\n              label={false}\n              itemPath="/nickname"\n              placeholder="A Nick name"\n            />\n          }\n        >\n          <Field.Name\n            itemPath="/nickname"\n            width="medium"\n            label="Nick name"\n          />\n\n          <Field.Composition>\n            <Field.Name.First itemPath="/firstName" width="medium" />\n            <Field.Name.Last itemPath="/lastName" width="medium" />\n          </Field.Composition>\n\n          <Iterate.Toolbar>\n            <Iterate.RemoveButton />\n          </Iterate.Toolbar>\n        </Iterate.AnimatedContainer>\n      </Iterate.Array>\n\n      <Iterate.PushButton\n        text="Add another avenger"\n        path="/avengers"\n        pushValue={{}}\n      />\n    </Card>\n  </Flex.Stack>\n</Form.Handler>\n'}),x=()=>(0,d.jsx)(r.Z,{"data-visual-test":"view-and-edit-container",noInline:!0,children:'const MyEditItemForm = () => {\n  return (\n    <Field.Composition>\n      <Field.Name.First itemPath="/firstName" width="medium" />\n      <Field.Name.Last itemPath="/lastName" width="medium" required />\n    </Field.Composition>\n  )\n}\nconst MyEditItem = () => {\n  return (\n    <Iterate.EditContainer\n      title="Edit account holder {itemNr}"\n      titleWhenNew="New account holder {itemNr}"\n    >\n      <MyEditItemForm />\n    </Iterate.EditContainer>\n  )\n}\nconst MyViewItem = () => {\n  const item = Iterate.useItem()\n  console.log(\'index:\', item.index)\n  return (\n    <Iterate.ViewContainer title="Account holder {itemNr}">\n      <Value.SummaryList>\n        <Value.Name.First itemPath="/firstName" showEmpty />\n        <Value.Name.Last itemPath="/lastName" placeholder="-" />\n      </Value.SummaryList>\n    </Iterate.ViewContainer>\n  )\n}\nconst CreateNewEntry = () => {\n  return (\n    <Iterate.PushContainer\n      path="/accounts"\n      title="New account holder"\n      openButton={\n        <Iterate.PushContainer.OpenButton text="Add another account" />\n      }\n      showOpenButtonWhen={(list) => list.length > 0}\n    >\n      <MyEditItemForm />\n    </Iterate.PushContainer>\n  )\n}\nconst MyForm = () => {\n  return (\n    <Form.Handler\n      data={{\n        accounts: [\n          {\n            firstName: \'Tony\',\n            lastName: \'Rogers\',\n          },\n        ],\n      }}\n      onChange={(data) => console.log(\'DataContext/onChange\', data)}\n      onSubmit={async (data) => console.log(\'onSubmit\', data)}\n    >\n      <Flex.Stack>\n        <Form.MainHeading>Accounts</Form.MainHeading>\n\n        <Card stack>\n          <Iterate.Array path="/accounts">\n            <MyViewItem />\n            <MyEditItem />\n          </Iterate.Array>\n\n          <CreateNewEntry />\n        </Card>\n\n        <Form.SubmitButton variant="send" />\n      </Flex.Stack>\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n'}),V=()=>(0,d.jsx)(r.Z,{children:'<Form.Handler\n  defaultData={{\n    count: 0,\n  }}\n>\n  <Flex.Stack>\n    <Field.Number path="/count" width="small" showStepControls />\n    <Iterate.Array\n      path="/items"\n      countPath="/count"\n      countPathTransform={({ value, index }) =>\n        Object.prototype.hasOwnProperty.call(value || {}, \'myObject\')\n          ? value\n          : {\n              myObject: index,\n            }\n      }\n    >\n      <Field.Number itemPath="/myObject" label="Item no. {itemNr}" />\n    </Iterate.Array>\n  </Flex.Stack>\n</Form.Handler>\n'}),A=()=>(0,d.jsx)(r.Z,{children:'<Form.Handler>\n  <Iterate.Array path="/myList" value={[{}]}>\n    <Flex.Stack>\n      <Field.Name.First className="firstName" itemPath="/firstName" />\n\n      <Form.Visibility\n        animate\n        visibleWhen={{\n          itemPath: \'/firstName\',\n          hasValue: (value) => Boolean(value),\n        }}\n      >\n        <Field.Name.Last className="lastName" itemPath="/lastName" />\n      </Form.Visibility>\n    </Flex.Stack>\n  </Iterate.Array>\n</Form.Handler>\n'}),w=()=>(0,d.jsx)(r.Z,{scope:{Iterate:i,Tools:a},children:'<Form.Handler\n  onSubmit={async (data) => console.log(\'onSubmit\', data)}\n  onSubmitRequest={() => console.log(\'onSubmitRequest\')}\n>\n  <Flex.Stack>\n    <Form.MainHeading>Statsborgerskap</Form.MainHeading>\n\n    <Card align="stretch">\n      <Iterate.Array path="/countries" defaultValue={[null]}>\n        <Iterate.ViewContainer toolbarVariant="minimumOneItem">\n          <Value.SelectCountry\n            label="Land du er statsborger i"\n            itemPath="/"\n          />\n        </Iterate.ViewContainer>\n\n        <Iterate.EditContainer toolbarVariant="minimumOneItem">\n          <Field.SelectCountry\n            label="Land du er statsborger i"\n            itemPath="/"\n            required\n          />\n        </Iterate.EditContainer>\n      </Iterate.Array>\n\n      <Iterate.PushButton\n        path="/countries"\n        pushValue={null}\n        text="Legg til flere statsborgerskap"\n      />\n    </Card>\n\n    <Form.SubmitButton variant="send" />\n\n    <Tools.Log />\n  </Flex.Stack>\n</Form.Handler>\n'}),N=()=>(0,d.jsx)(r.Z,{hideCode:!0,children:'<Iterate.Array value={[\'foo\']}>\n  <Iterate.ViewContainer toolbarVariant="minimumOneItem">\n    View Content\n  </Iterate.ViewContainer>\n  <Iterate.EditContainer toolbarVariant="minimumOneItem">\n    Edit Content\n  </Iterate.EditContainer>\n</Iterate.Array>\n'}),O=()=>(0,d.jsx)(r.Z,{hideCode:!0,children:"<Iterate.Array value={['foo', 'bar']}>\n  <Iterate.ViewContainer toolbarVariant=\"minimumOneItem\">\n    View Content\n  </Iterate.ViewContainer>\n  <Iterate.EditContainer toolbarVariant=\"minimumOneItem\">\n    Edit Content\n  </Iterate.EditContainer>\n</Iterate.Array>\n"}),T=()=>(0,d.jsx)(r.Z,{children:'<Form.Handler\n  defaultData={{\n    items: [\'foo\'],\n  }}\n  onSubmit={async () => console.log(\'onSubmit\')}\n>\n  <Card stack>\n    <Iterate.Array\n      path="/items"\n      validator={(arrayValue) => {\n        if (!(arrayValue && arrayValue.length > 1)) {\n          return new Error(\'You need at least two items\')\n        }\n      }}\n    >\n      <Flex.Horizontal align="flex-end">\n        <Field.String\n          label="Item no. {itemNr}"\n          itemPath="/"\n          width="medium"\n          size="medium"\n        />\n        <Iterate.RemoveButton />\n      </Flex.Horizontal>\n    </Iterate.Array>\n\n    <Iterate.PushButton top path="/items" pushValue={null} text="Add" />\n    <Form.SubmitButton />\n  </Card>\n</Form.Handler>\n'})},38734:function(n,e,t){t.d(e,{Z:function(){return s}});var a=t(84616),r=t(2784),i=t(95955),o=t.n(i),l=t(21068);const u=["minLength","maxLength","pattern","description","min","max","multipleOf","exclusiveMinimum","exclusiveMaximum"];function s(n){const{generateRef:e,filterData:t,log:i,children:s}=n||{},{fieldPropsRef:m,valuePropsRef:d,data:c,hasContext:h}=(0,r.useContext)(l.Z),I=(0,r.useRef)({});I.current=c;const p=(0,r.useCallback)((()=>{const n=Object.entries((null==m?void 0:m.current)||{}).reduce(((n,e)=>{let[r,i]=e;if(r.startsWith("/")){const e=r.substring(1),l=e.split("/"),s=l.length,m={type:i.valueType||"string"};for(const n of u)i[n]&&(m[n]=i[n]);if(s>1){const e=[""];for(const r of l){e.push(r);const u=e.join("/properties/"),s=e.length-1===l.length,d=o().has(n,u)?o().get(n,u):null,c=s?m:d;if(s)!1!==(null==t?void 0:t[u])&&o().set(n,u,c);else{const e={type:"object",...d},r=[];i.required&&r.push(l.at(-1)),null!=d&&d.required&&r.push.apply(r,(0,a.Z)(d.required)),r.length>0&&(e.required=r),!1!==(null==t?void 0:t[u])&&o().set(n,u,e)}}}else!1!==(null==t?void 0:t[r])&&o().set(n.properties,r,m),i.required&&n.required.push(e)}return n}),{type:"object",properties:{},required:[]}),e=Object.entries((null==m?void 0:m.current)||{}).reduce(((n,e)=>{let[t,a]=e;if(t.startsWith("/")){const e={};for(const n in a)void 0!==a[n]&&"function"!=typeof a[n]&&(e[n]=a[n]);o().set(n,t,e)}return n}),{}),r=Object.entries((null==d?void 0:d.current)||{}).reduce(((n,e)=>{let[t,a]=e;if(t.startsWith("/")){const e={};for(const n in a)void 0!==a[n]&&"function"!=typeof a[n]&&(e[n]=a[n]);o().set(n,t,e)}return n}),{});return 0===n.required.length&&delete n.required,{schema:n,data:I.current,propsOfFields:e,propsOfValues:r}}),[m,t,d]);return h&&(i&&console.log(p().schema),e&&(e.current=p)),s}},10454:function(n,e,t){t.d(e,{Z:function(){return l}});var a=t(2784),r=t(95955),i=t.n(r),o=t(21068);function l(n){const{log:e,generateRef:t,filterData:r,children:l}=n||{},{fieldPropsRef:u,valuePropsRef:s,data:m,hasContext:d}=(0,a.useContext)(o.Z);(0,a.useRef)({}).current=m;const c=(0,a.useCallback)((()=>{const n=Object.entries((null==u?void 0:u.current)||{}).reduce(((n,e)=>{let[t,o]=e;if(t.startsWith("/")){const e={};for(const n in o)void 0===o[n]||"function"==typeof o[n]||(0,a.isValidElement)(o[n])||(e[n]=o[n]);!1!==(null==r?void 0:r[t])&&i().set(n,t,e)}return n}),{}),e=Object.entries((null==s?void 0:s.current)||{}).reduce(((n,e)=>{let[t,o]=e;if(t.startsWith("/")){const e={};for(const n in o)void 0===o[n]||"function"==typeof o[n]||(0,a.isValidElement)(o[n])||(e[n]=o[n]);!1!==(null==r?void 0:r[t])&&i().set(n,t,e)}return n}),{});return{propsOfFields:n,propsOfValues:e}}),[u,r,s]);return d&&(e&&console.log(c()),t&&(t.current=c)),l}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-iterate-view-container-demos-mdx-3e5cdcca8e4344c29eaf.js.map