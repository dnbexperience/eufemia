{"version":3,"file":"component---src-docs-uilib-extensions-forms-iterate-view-container-mdx-ede5a886590cbc37921d.js","mappings":"+MAKA,SAASA,EAAkBC,GACzB,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKC,EAAAA,QAAM,CAAC,GAAI,MAAMD,EAAAA,EAAAA,KAAKE,EAAAA,QAAO,CAAC,KAElD,CAOA,UANA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOO,QAASC,GAAaC,OAAOC,OAAO,CAAC,GAAGC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOJ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWC,OAAOC,OAAO,CAAC,EAAGV,EAAO,CAC1DG,UAAUC,EAAAA,EAAAA,KAAKL,EAAmBC,MAC9BD,GACR,C,0XCXA,SAASA,EAAkBC,GACzB,MAAMa,EAAcJ,OAAOC,OAAO,CAChCI,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,EAAG,MACFN,EAAAA,EAAAA,MAAsBX,EAAMY,YAK/B,OAJKM,GAAUC,EAAqB,YAAY,GAC3CD,EAASE,oCAAoCD,EAAqB,+CAA+C,GACjHD,EAASG,qCAAqCF,EAAqB,gDAAgD,GACnHD,EAASI,sBAAsBH,EAAqB,iCAAiC,IACnFlB,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKS,EAAYC,GAAI,CAC9BX,SAAU,UACR,MAAMC,EAAAA,EAAAA,KAAKc,EAASI,qBAAsB,CAAC,GAAI,MAAMlB,EAAAA,EAAAA,KAAKS,EAAYE,GAAI,CAC5EZ,SAAU,oBACR,MAAMC,EAAAA,EAAAA,KAAKS,EAAYG,GAAI,CAC7Bb,SAAU,qBACR,MAAMC,EAAAA,EAAAA,KAAKS,EAAYI,EAAG,CAC5Bd,SAAU,+CACR,MAAMC,EAAAA,EAAAA,KAAKc,EAASE,mCAAoC,CAAC,GAAI,MAAMhB,EAAAA,EAAAA,KAAKS,EAAYI,EAAG,CACzFd,SAAU,gDACR,MAAMC,EAAAA,EAAAA,KAAKc,EAASG,oCAAqC,CAAC,KAElE,CAOA,MANA,SAAoBrB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOO,QAASC,GAAaC,OAAOC,OAAO,CAAC,GAAGC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOJ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWC,OAAOC,OAAO,CAAC,EAAGV,EAAO,CAC1DG,UAAUC,EAAAA,EAAAA,KAAKL,EAAmBC,MAC9BD,EAAkBC,EAC1B,EAEA,SAASmB,EAAqBI,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,C,yDCnCA,SAASxB,EAAkBC,GACzB,MAAMa,EAAcJ,OAAOC,OAAO,CAChCI,GAAI,KACJG,EAAG,IACHS,KAAM,OACNC,EAAG,IACHC,IAAK,MACLb,GAAI,KACJC,GAAI,KACJa,GAAI,KACJC,GAAI,OACHnB,EAAAA,EAAAA,MAAsBX,EAAMY,YAC/B,OAAOX,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKS,EAAYC,GAAI,CAC9BX,SAAU,gBACR,MAAMF,EAAAA,EAAAA,MAAMY,EAAYI,EAAG,CAC7Bd,SAAU,EAACC,EAAAA,EAAAA,KAAKS,EAAYa,KAAM,CAChCvB,SAAU,0BACR,iGAAiGC,EAAAA,EAAAA,KAAKS,EAAYc,EAAG,CACvHI,KAAM,iDACN5B,SAAU,kBACR,8CAA8CC,EAAAA,EAAAA,KAAKS,EAAYc,EAAG,CACpEI,KAAM,qDACN5B,SAAU,sBACR,OACF,MAAMF,EAAAA,EAAAA,MAAMY,EAAYI,EAAG,CAC7Bd,SAAU,CAAC,gCAAgCC,EAAAA,EAAAA,KAAKS,EAAYc,EAAG,CAC7DI,KAAM,2CACN5B,SAAU,YACR,sCAAwCC,EAAAA,EAAAA,KAAKS,EAAYc,EAAG,CAC9DI,KAAM,gDACN5B,SAAU,iBACR,wEACF,MAAMC,EAAAA,EAAAA,KAAKS,EAAYe,IAAK,CAC9BzB,UAAUC,EAAAA,EAAAA,KAAKS,EAAYa,KAAM,CAC/BM,UAAW,eACX7B,SAAU,+bAEV,MAAMC,EAAAA,EAAAA,KAAKS,EAAYC,GAAI,CAC7BX,SAAU,iCACR,MAAMF,EAAAA,EAAAA,MAAMY,EAAYI,EAAG,CAC7Bd,SAAU,CAAC,oBAAoBC,EAAAA,EAAAA,KAAKS,EAAYa,KAAM,CACpDvB,SAAU,aACR,qBAAqBC,EAAAA,EAAAA,KAAKS,EAAYa,KAAM,CAC9CvB,SAAU,UACR,mDACF,MAAMC,EAAAA,EAAAA,KAAKS,EAAYe,IAAK,CAC9BzB,UAAUC,EAAAA,EAAAA,KAAKS,EAAYa,KAAM,CAC/BM,UAAW,eACX7B,SAAU,sQAEV,MAAMC,EAAAA,EAAAA,KAAKS,EAAYC,GAAI,CAC7BX,SAAU,0BACR,MAAMC,EAAAA,EAAAA,KAAKS,EAAYe,IAAK,CAC9BzB,UAAUC,EAAAA,EAAAA,KAAKS,EAAYa,KAAM,CAC/BM,UAAW,eACX7B,SAAU,yXAEV,MAAMC,EAAAA,EAAAA,KAAKS,EAAYE,GAAI,CAC7BZ,SAAU,aACR,MAAMC,EAAAA,EAAAA,KAAKS,EAAYG,GAAI,CAC7Bb,UAAUC,EAAAA,EAAAA,KAAKS,EAAYa,KAAM,CAC/BvB,SAAU,qBAEV,MAAMC,EAAAA,EAAAA,KAAKS,EAAYI,EAAG,CAC5Bd,SAAU,6CACR,MAAMF,EAAAA,EAAAA,MAAMY,EAAYgB,GAAI,CAC9B1B,SAAU,CAAC,MAAMF,EAAAA,EAAAA,MAAMY,EAAYiB,GAAI,CACrC3B,SAAU,CAAC,SAASC,EAAAA,EAAAA,KAAKS,EAAYa,KAAM,CACzCvB,SAAU,kBACR,iGACF,QACF,MAAMC,EAAAA,EAAAA,KAAKS,EAAYe,IAAK,CAC9BzB,UAAUC,EAAAA,EAAAA,KAAKS,EAAYa,KAAM,CAC/BM,UAAW,eACX7B,SAAU,uOAEV,MAAMC,EAAAA,EAAAA,KAAKS,EAAYC,GAAI,CAC7BX,SAAU,kBACR,MAAMF,EAAAA,EAAAA,MAAMY,EAAYI,EAAG,CAC7Bd,SAAU,CAAC,QAAQC,EAAAA,EAAAA,KAAKS,EAAYa,KAAM,CACxCvB,SAAU,0BACR,sBAAsBC,EAAAA,EAAAA,KAAKS,EAAYa,KAAM,CAC/CvB,SAAU,eACR,oCAAoCC,EAAAA,EAAAA,KAAKS,EAAYa,KAAM,CAC7DvB,SAAU,UACR,uIACF,MAAMC,EAAAA,EAAAA,KAAKS,EAAYI,EAAG,CAC5Bd,SAAU,uHAGhB,CAOA,UANA,SAAoBH,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOO,QAASC,GAAaC,OAAOC,OAAO,CAAC,GAAGC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOJ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWC,OAAOC,OAAO,CAAC,EAAGV,EAAO,CAC1DG,UAAUC,EAAAA,EAAAA,KAAKL,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,+FChGO,MAAMiC,EAAUA,KACrB7B,EAAAA,EAAAA,KAAA8B,EAAAA,EAAA,CAAAC,UAAA,EAAAhC,SAAA,wyB,q4BCQF,E,SAAsB,E,WCTtB,SAASiC,EAAIpC,GACX,MAAM,KAAEqC,IAASC,EAAAA,EAAAA,YAAWC,EAAAA,GAE5B,OACEnC,EAAAA,EAAAA,KAACoC,EAAO,CACNC,QAAQ,SACRC,gBAAgB,cAChBC,MAAO,CAAEC,SAAU,QACnBC,YAAU,KACN7C,EAAKG,UAETF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CACG2C,KAAKC,UAAUV,GACf,QAIT,CAEAD,EAAIY,uBAAwB,EAC5B,Q,WCbO,MAAMC,EAAuBA,KAClC7C,EAAAA,EAAAA,KAAA8B,EAAAA,EAAA,CAAA/B,SAAA,8JAYW+C,EAAuBA,KAClC9C,EAAAA,EAAAA,KAAA8B,EAAAA,EAAA,+CAAA/B,SAAA,gLAWWgD,EAAmBA,KAC9B/C,EAAAA,EAAAA,KAAA8B,EAAAA,EAAA,CAAA/B,SAAA,6WAyBWiD,EAAYA,KACvBhD,EAAAA,EAAAA,KAAA8B,EAAAA,EAAA,CAAA/B,SAAA,unBAiCWkD,EAAcA,KACzBjD,EAAAA,EAAAA,KAAA8B,EAAAA,EAAA,CAAA/B,SAAA,mdAwBWmD,EAA4BA,KACvClD,EAAAA,EAAAA,KAAA8B,EAAAA,EAAA,CAAA/B,SAAA,yLAYWoD,EAAyBA,KACpCnD,EAAAA,EAAAA,KAAA8B,EAAAA,EAAA,CAAA/B,SAAA,6ZAoBWqD,EAAuBA,KAClCpD,EAAAA,EAAAA,KAAA8B,EAAAA,EAAA,yCAAA/B,SAAA,s8CAiEWmB,EAAuBA,KAClClB,EAAAA,EAAAA,KAAA8B,EAAAA,EAAA,8CAAAC,UAAA,EAAAhC,SAAA,07DAgGWsD,EAAmBA,KAC9BrD,EAAAA,EAAAA,KAAA8B,EAAAA,EAAA,CAAA/B,SAAA,8iBAsBWuD,EAAiBA,KAC5BtD,EAAAA,EAAAA,KAAA8B,EAAAA,EAAA,CAAA/B,SAAA,oeA0BWwD,EAAcA,KACzBvD,EAAAA,EAAAA,KAAA8B,EAAAA,EAAA,CAAA0B,MAAA,CACFC,QAAA,EACAC,MACA,GAAA3D,SAAA,qhCAwCaiB,EAAqCA,KAChDhB,EAAAA,EAAAA,KAAA8B,EAAAA,EAAA,CAAA6B,UAAA,EAAA5D,SAAA,4QAcWkB,EAAsCA,KACjDjB,EAAAA,EAAAA,KAAA8B,EAAAA,EAAA,CAAA6B,UAAA,EAAA5D,SAAA,qRAcW6D,EAAqBA,KAChC5D,EAAAA,EAAAA,KAAA8B,EAAAA,EAAA,CAAA/B,SAAA,wvB,gHCxaK,MAAM8D,EAAe,CAC1B,YACA,YACA,UACA,cACA,MACA,MACA,aACA,mBACA,oBAGa,SAASC,EAAelE,GACrC,MAAM,YAAEmE,EAAW,WAAEC,EAAU,IAAEC,EAAG,SAAElE,GAAaH,GAAS,CAAC,GACvD,cAAEsE,EAAa,cAAEC,EAAa,KAAElC,EAAI,WAAEmC,IAC1ClC,EAAAA,EAAAA,YAAWC,EAAAA,GAEPkC,GAAUC,EAAAA,EAAAA,QAAmB,CAAC,GACpCD,EAAQE,QAAUtC,EAElB,MAAMuC,GAAWC,EAAAA,EAAAA,cAAY,KAC3B,MAAMC,EAASrE,OAAOsE,SAAQT,aAAa,EAAbA,EAAeK,UAAW,CAAC,GAAGK,QAC1D,CAACC,EAAGC,KAAqB,IAAlBC,EAAMnF,GAAMkF,EACjB,GAAIC,EAAKC,WAAW,KAAM,CACxB,MAAMC,EAAYF,EAAKG,UAAU,GAE3BC,EAAWF,EAAUG,MAAM,KAC3BC,EAAaF,EAASG,OAGtBC,EAAgB,CACpBC,KAFW5F,EAAM6F,WAAa,UAKhC,IAAK,MAAMC,KAAQ7B,EACbjE,EAAM8F,KACRH,EAAcG,GAAQ9F,EAAM8F,IAIhC,GAAIL,EAAa,EAAG,CAClB,MAAMM,EAAa,CAAC,IACpB,IAAK,MAAMZ,KAAQI,EAAU,CAC3BQ,EAAWC,KAAKb,GAChB,MAAMc,EAAYF,EAAWG,KAAK,gBAC5BC,EAASJ,EAAWL,OAAS,IAAMH,EAASG,OAE5CU,EAAgBC,IAAAA,IAAYpB,EAAKgB,GACnCI,IAAAA,IAAYpB,EAAKgB,GACjB,KAEEK,EAAYH,EAASR,EAAgBS,EAE3C,GAAID,GAC8B,KAA5B/B,aAAU,EAAVA,EAAa6B,KACfI,IAAAA,IAAYpB,EAAKgB,EAAWK,OAEzB,CACL,MAAMA,EAAY,CAChBV,KAAM,YACHQ,GAICG,EAAW,GACbvG,EAAMuG,UACRA,EAASP,KAAKT,EAASiB,IAAI,IAEzBJ,SAAAA,EAAeG,UACjBA,EAASP,KAAIS,MAAbF,GAAQG,EAAAA,EAAAA,GAASN,EAAcG,WAE7BA,EAASb,OAAS,IACpBY,EAAUC,SAAWA,IAGS,KAA5BnC,aAAU,EAAVA,EAAa6B,KACfI,IAAAA,IAAYpB,EAAKgB,EAAWK,EAEhC,CACF,CACF,MAC6B,KAAvBlC,aAAU,EAAVA,EAAae,KACfkB,IAAAA,IAAYpB,EAAI0B,WAAYxB,EAAMQ,GAEhC3F,EAAMuG,UACRtB,EAAIsB,SAASP,KAAKX,EAGxB,CAEA,OAAOJ,CAAG,GAEZ,CAAEW,KAAM,SAAUe,WAAY,CAAC,EAAGJ,SAAU,KAGxCK,EAAgBnG,OAAOsE,SAC3BT,aAAa,EAAbA,EAAeK,UAAW,CAAC,GAC3BK,QAAO,CAACC,EAAG4B,KAAqB,IAAlB1B,EAAMnF,GAAM6G,EAC1B,GAAI1B,EAAKC,WAAW,KAAM,CACxB,MAAMO,EAAgB,CAAC,EAEvB,IAAK,MAAMG,KAAQ9F,OAEC8G,IAAhB9G,EAAM8F,IACiB,mBAAhB9F,EAAM8F,KAEbH,EAAcG,GAAQ9F,EAAM8F,IAIhCO,IAAAA,IAAYpB,EAAKE,EAAMQ,EACzB,CAEA,OAAOV,CAAG,GACT,CAAC,GAEE8B,EAAgBtG,OAAOsE,SAC3BR,aAAa,EAAbA,EAAeI,UAAW,CAAC,GAC3BK,QAAO,CAACC,EAAG+B,KAAqB,IAAlB7B,EAAMnF,GAAMgH,EAC1B,GAAI7B,EAAKC,WAAW,KAAM,CACxB,MAAMO,EAAgB,CAAC,EAEvB,IAAK,MAAMG,KAAQ9F,OAEC8G,IAAhB9G,EAAM8F,IACiB,mBAAhB9F,EAAM8F,KAEbH,EAAcG,GAAQ9F,EAAM8F,IAIhCO,IAAAA,IAAYpB,EAAKE,EAAMQ,EACzB,CAEA,OAAOV,CAAG,GACT,CAAC,GAMJ,OAJ+B,IAA3BH,EAAOyB,SAASb,eACXZ,EAAOyB,SAGT,CACLzB,SACAzC,KAAMoC,EAAQE,QACdiC,gBACAG,gBACD,GACA,CAACzC,EAAeF,EAAYG,IAY/B,OAVIC,IACEH,GACF4C,QAAQ5C,IAAIO,IAAWE,QAGrBX,IACFA,EAAYQ,QAAUC,IAInBzE,CACT,C,qGCnKe,SAAS+G,EAAalH,GACnC,MAAM,IAAEqE,EAAG,YAAEF,EAAW,WAAEC,EAAU,SAAEjE,GAAaH,GAAS,CAAC,GACvD,cAAEsE,EAAa,cAAEC,EAAa,KAAElC,EAAI,WAAEmC,IAC1ClC,EAAAA,EAAAA,YAAWC,EAAAA,IAEGmC,EAAAA,EAAAA,QAAmB,CAAC,GAC5BC,QAAUtC,EAElB,MAAMuC,GAAWC,EAAAA,EAAAA,cAAY,KAC3B,MAAM+B,EAAgBnG,OAAOsE,SAC3BT,aAAa,EAAbA,EAAeK,UAAW,CAAC,GAC3BK,QAAO,CAACC,EAAGC,KAAqB,IAAlBC,EAAMnF,GAAMkF,EAC1B,GAAIC,EAAKC,WAAW,KAAM,CACxB,MAAMO,EAAgB,CAAC,EAEvB,IAAK,MAAMG,KAAQ9F,OAEC8G,IAAhB9G,EAAM8F,IACiB,mBAAhB9F,EAAM8F,KACZqB,EAAAA,EAAAA,gBAAenH,EAAM8F,MAEtBH,EAAcG,GAAQ9F,EAAM8F,KAIL,KAAvB1B,aAAU,EAAVA,EAAae,KACfkB,IAAAA,IAAYpB,EAAKE,EAAMQ,EAE3B,CAEA,OAAOV,CAAG,GACT,CAAC,GAEE8B,EAAgBtG,OAAOsE,SAC3BR,aAAa,EAAbA,EAAeI,UAAW,CAAC,GAC3BK,QAAO,CAACC,EAAG4B,KAAqB,IAAlB1B,EAAMnF,GAAM6G,EAC1B,GAAI1B,EAAKC,WAAW,KAAM,CACxB,MAAMO,EAAgB,CAAC,EAEvB,IAAK,MAAMG,KAAQ9F,OAEC8G,IAAhB9G,EAAM8F,IACiB,mBAAhB9F,EAAM8F,KACZqB,EAAAA,EAAAA,gBAAenH,EAAM8F,MAEtBH,EAAcG,GAAQ9F,EAAM8F,KAIL,KAAvB1B,aAAU,EAAVA,EAAae,KACfkB,IAAAA,IAAYpB,EAAKE,EAAMQ,EAE3B,CAEA,OAAOV,CAAG,GACT,CAAC,GAEJ,MAAO,CAAE2B,gBAAeG,gBAAe,GACtC,CAACzC,EAAeF,EAAYG,IAY/B,OAVIC,IACEH,GACF4C,QAAQ5C,IAAIO,KAGVT,IACFA,EAAYQ,QAAUC,IAInBzE,CACT,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/ViewContainer.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/ViewContainer/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/ViewContainer/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/AnimatedContainer/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/Section.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/Log.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Iterate/Array/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/GenerateSchema.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Tools/ListAllProps.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/Iterate/ViewContainer/info';\nimport Demos from 'Docs/uilib/extensions/forms/Iterate/ViewContainer/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.ToolbarVariantMiniumOneItemOneItem) _missingMdxReference(\"Examples.ToolbarVariantMiniumOneItemOneItem\", true);\n  if (!Examples.ToolbarVariantMiniumOneItemTwoItems) _missingMdxReference(\"Examples.ToolbarVariantMiniumOneItemTwoItems\", true);\n  if (!Examples.ViewAndEditContainer) _missingMdxReference(\"Examples.ViewAndEditContainer\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(Examples.ViewAndEditContainer, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Toolbar variant\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Minimum one item\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When having one item in the Iterate.Array:\"\n    }), \"\\n\", _jsx(Examples.ToolbarVariantMiniumOneItemOneItem, {}), \"\\n\", _jsx(_components.p, {\n      children: \"When having two items in the Iterate.Array:\"\n    }), \"\\n\", _jsx(Examples.ToolbarVariantMiniumOneItemTwoItems, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\",\n    h3: \"h3\",\n    h4: \"h4\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Iterate.ViewContainer\"\n      }), \" enables users to toggle (with animation) the content of each item between this view and the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/EditContainer/\",\n        children: \"EditContainer\"\n      }), \" container. It can be used instead of the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/AnimatedContainer/\",\n        children: \"AnimatedContainer\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, it features the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/Toolbar/\",\n        children: \"Toolbar\"\n      }), \" containing a \\\"Edit\\\" button and a \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/RemoveButton/\",\n        children: \"RemoveButton\"\n      }), \" button. The \\\"Remove\\\" will delete the current item from the array.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Field, Value } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Iterate.Array>\\n    <Iterate.EditContainer\\n      title=\\\"Edit account holder\\\"\\n      titleWhenNew=\\\"New account holder\\\"\\n    >\\n      <Field.Name.Last itemPath=\\\"/name\\\" />\\n    </Iterate.EditContainer>\\n\\n    <Iterate.ViewContainer title=\\\"Account holder\\\">\\n      <Value.Name.Last itemPath=\\\"/name\\\" />\\n    </Iterate.ViewContainer>\\n  </Iterate.Array>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"The item number in the title\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the \", _jsx(_components.code, {\n        children: \"{itemNr}\"\n      }), \" variable in the \", _jsx(_components.code, {\n        children: \"title\"\n      }), \" property to display the current item number.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Value } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Iterate.Array>\\n    <Iterate.ViewContainer title=\\\"Account holder {itemNr}\\\">\\n      <Value.Name.Last itemPath=\\\"/name\\\" />\\n    </Iterate.ViewContainer>\\n  </Iterate.Array>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Customize the Toolbar\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate, Value } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Iterate.Array>\\n    <Iterate.ViewContainer>\\n      <Value.Name.Last itemPath=\\\"/name\\\" />\\n\\n      <Iterate.Toolbar>\\n        <Iterate.ViewContainer.EditButton />\\n        <Iterate.ViewContainer.RemoveButton />\\n      </Iterate.Toolbar>\\n    </Iterate.ViewContainer>\\n  </Iterate.Array>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Variants\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: _jsx(_components.code, {\n        children: \"minimumOneItem\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This variant has the following behavior:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"When \", _jsx(_components.code, {\n          children: \"ViewContainer\"\n        }), \" is visible, and the number of items in the array is one, the remove button will be hidden.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Iterate } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Iterate.Array>\\n    <Iterate.ViewContainer toolbarVariant=\\\"minimumOneItem\\\">\\n      Item Content\\n    </Iterate.ViewContainer>\\n  </Iterate.Array>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Iterate.ViewContainer\"\n      }), \" component has an \", _jsx(_components.code, {\n        children: \"aria-label\"\n      }), \" attribute, which is set to the \", _jsx(_components.code, {\n        children: \"title\"\n      }), \" prop value. It uses a section element to wrap the content, which helps users with screen readers to get the needed announcement.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When the item (view and edit) container gets removed, the active element focus will be set on the previous item.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Card } from '@dnb/eufemia/src'\nimport { Field, Form, Iterate } from '@dnb/eufemia/src/extensions/forms'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyForm = () => {\n          const { count } = Iterate.useCount('myForm')\n          return (\n            <Form.Handler\n              defaultData={{\n                myList: ['Item 1'],\n              }}\n              id=\"myForm\"\n            >\n              <Card stack>\n                <Iterate.Array\n                  path=\"/myList\"\n                  placeholder={<>Empty list</>}\n                >\n                  <Iterate.AnimatedContainer title=\"Title {itemNr}\">\n                    <Field.String label=\"Label\" itemPath=\"/\" />\n\n                    <Iterate.Toolbar>\n                      <Iterate.RemoveButton />\n                    </Iterate.Toolbar>\n                  </Iterate.AnimatedContainer>\n                </Iterate.Array>\n\n                <Iterate.PushButton\n                  path=\"/myList\"\n                  pushValue={'Item ' + String(count('/myList') + 1)}\n                  text=\"Add new item\"\n                />\n              </Card>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n","/**\n * ATTENTION: This file is auto generated by using \"prepareTemplates\".\n * Do not change the content!\n *\n */\n\n/**\n * Library Index section to autogenerate all the components and extensions\n * Used by \"prepareSections\"\n */\n\nimport Section from './section/Section'\nexport * from './section/Section'\nexport default Section\n","import { useContext } from 'react'\nimport DataContext from '../DataContext/Context'\nimport Section, { SectionProps } from '../../../components/Section'\n\nfunction Log(props: SectionProps) {\n  const { data } = useContext(DataContext)\n\n  return (\n    <Section\n      element=\"output\"\n      backgroundColor=\"sand-yellow\"\n      style={{ maxWidth: '80vw' }}\n      innerSpace\n      {...props}\n    >\n      <pre>\n        {JSON.stringify(data)}\n        {' ' /* Ensure one line of spacing */}\n      </pre>\n    </Section>\n  )\n}\n\nLog._supportsSpacingProps = true\nexport default Log\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Card, Flex, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport {\n  Iterate,\n  Field,\n  Value,\n  Form,\n  Tools,\n} from '@dnb/eufemia/src/extensions/forms'\nexport { Default as AnimatedContainer } from '../AnimatedContainer/Examples'\n\nexport const PrimitiveItemsFields = () => {\n  return (\n    <ComponentBox>\n      <Iterate.Array\n        value={['Iron Man', 'Captain America', 'The Hulk']}\n        onChange={console.log}\n      >\n        <Field.String itemPath=\"/\" />\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const PrimitiveItemsValues = () => {\n  return (\n    <ComponentBox data-visual-test=\"primitive-element-values\">\n      <Value.SummaryList>\n        <Iterate.Array value={['Iron Man', 'Captain America', 'The Hulk']}>\n          <Value.String itemPath=\"/\" />\n        </Iterate.Array>\n      </Value.SummaryList>\n    </ComponentBox>\n  )\n}\n\nexport const ValueComposition = () => {\n  return (\n    <ComponentBox>\n      <Value.Composition>\n        <Iterate.Array\n          value={[\n            {\n              label: 'Label A',\n              value: 'value 1',\n            },\n            {\n              label: 'Label B',\n              value: 'value 2',\n            },\n          ]}\n        >\n          <Value.String\n            label={<Value.String itemPath=\"/label\" />}\n            itemPath=\"/value\"\n          />\n        </Iterate.Array>\n      </Value.Composition>\n    </ComponentBox>\n  )\n}\n\nexport const WithTable = () => {\n  return (\n    <ComponentBox>\n      <Table>\n        <thead>\n          <Tr>\n            <Th>Name</Th>\n            <Th>Age</Th>\n          </Tr>\n        </thead>\n        <tbody>\n          <Iterate.Array\n            withoutFlex\n            value={[\n              { name: 'Iron Man', age: 45 },\n              { name: 'Captain America', age: 123 },\n              { name: 'The Hulk', age: 3337 },\n            ]}\n          >\n            <Tr>\n              <Td>\n                <Value.Name.Last itemPath=\"/name\" />\n              </Td>\n              <Td>\n                <Value.Number itemPath=\"/age\" />\n              </Td>\n            </Tr>\n          </Iterate.Array>\n        </tbody>\n      </Table>\n    </ComponentBox>\n  )\n}\n\nexport const ObjectItems = () => {\n  return (\n    <ComponentBox>\n      <Iterate.Array\n        value={[\n          {\n            accountName: 'Brukskonto',\n            accountNumber: '90901134567',\n          },\n          {\n            accountName: 'Sparekonto',\n            accountNumber: '90901156789',\n          },\n        ]}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        <Field.Composition>\n          <Field.BankAccountNumber itemPath=\"/accountNumber\" />\n          <Field.String label=\"Account name\" itemPath=\"/accountName\" />\n        </Field.Composition>\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const RenderPropsPrimitiveItems = () => {\n  return (\n    <ComponentBox>\n      <Iterate.Array\n        value={['foo', 'bar']}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        {(elementValue) => <Field.String value={elementValue} />}\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const RenderPropsObjectItems = () => {\n  return (\n    <ComponentBox>\n      <Iterate.Array\n        value={[\n          { num: 1, txt: 'One' },\n          { num: 2, txt: 'Two' },\n        ]}\n        onChange={(value) => console.log('onChange', value)}\n      >\n        {({ num, txt }) => (\n          <Field.Composition width=\"large\">\n            <Field.Number value={num} width=\"small\" />\n            <Field.String value={txt} width={false} />\n          </Field.Composition>\n        )}\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const ArrayFromFormHandler = () => {\n  return (\n    <ComponentBox data-visual-test=\"animated-container\">\n      <Form.Handler\n        data={{\n          avengers: [\n            {\n              nickname: 'Iron Man',\n              firstName: 'Tony',\n              lastName: 'Stark',\n            },\n            {\n              nickname: 'Captain America',\n              firstName: 'Steve',\n              lastName: 'Rogers',\n            },\n          ],\n        }}\n        onChange={(data) => console.log('DataContext/onChange', data)}\n      >\n        <Flex.Stack>\n          <Form.MainHeading>Avengers</Form.MainHeading>\n\n          <Card stack>\n            <Iterate.Array\n              path=\"/avengers\"\n              onChange={(value) => console.log('Iterate/onChange', value)}\n            >\n              <Iterate.AnimatedContainer\n                title={\n                  <Value.String\n                    label={false}\n                    itemPath=\"/nickname\"\n                    placeholder=\"A Nick name\"\n                  />\n                }\n              >\n                <Field.Name\n                  itemPath=\"/nickname\"\n                  width=\"medium\"\n                  label=\"Nick name\"\n                />\n\n                <Field.Composition>\n                  <Field.Name.First itemPath=\"/firstName\" width=\"medium\" />\n                  <Field.Name.Last itemPath=\"/lastName\" width=\"medium\" />\n                </Field.Composition>\n\n                <Iterate.Toolbar>\n                  <Iterate.RemoveButton />\n                </Iterate.Toolbar>\n              </Iterate.AnimatedContainer>\n            </Iterate.Array>\n\n            <Iterate.PushButton\n              text=\"Add another avenger\"\n              path=\"/avengers\"\n              pushValue={{}}\n            />\n          </Card>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const ViewAndEditContainer = () => {\n  return (\n    <ComponentBox data-visual-test=\"view-and-edit-container\">\n      {() => {\n        const MyEditItemForm = () => {\n          return (\n            <Field.Composition>\n              <Field.Name.First itemPath=\"/firstName\" width=\"medium\" />\n              <Field.Name.Last\n                itemPath=\"/lastName\"\n                width=\"medium\"\n                required\n              />\n            </Field.Composition>\n          )\n        }\n\n        const MyEditItem = () => {\n          return (\n            <Iterate.EditContainer\n              title=\"Edit account holder {itemNr}\"\n              titleWhenNew=\"New account holder {itemNr}\"\n            >\n              <MyEditItemForm />\n            </Iterate.EditContainer>\n          )\n        }\n\n        const MyViewItem = () => {\n          const item = Iterate.useItem()\n          console.log('index:', item.index)\n\n          return (\n            <Iterate.ViewContainer title=\"Account holder {itemNr}\">\n              <Value.SummaryList>\n                <Value.Name.First itemPath=\"/firstName\" showEmpty />\n                <Value.Name.Last itemPath=\"/lastName\" placeholder=\"-\" />\n              </Value.SummaryList>\n            </Iterate.ViewContainer>\n          )\n        }\n\n        const CreateNewEntry = () => {\n          return (\n            <Iterate.PushContainer\n              path=\"/accounts\"\n              title=\"New account holder\"\n              openButton={\n                <Iterate.PushContainer.OpenButton text=\"Add another account\" />\n              }\n              showOpenButtonWhen={(list) => list.length > 0}\n            >\n              <MyEditItemForm />\n            </Iterate.PushContainer>\n          )\n        }\n\n        const MyForm = () => {\n          return (\n            <Form.Handler\n              data={{\n                accounts: [\n                  {\n                    firstName: 'Tony',\n                    lastName: 'Rogers',\n                  },\n                ],\n              }}\n              onChange={(data) =>\n                console.log('DataContext/onChange', data)\n              }\n              onSubmit={async (data) => console.log('onSubmit', data)}\n            >\n              <Flex.Stack>\n                <Form.MainHeading>Accounts</Form.MainHeading>\n\n                <Card stack>\n                  <Iterate.Array path=\"/accounts\">\n                    <MyViewItem />\n                    <MyEditItem />\n                  </Iterate.Array>\n\n                  <CreateNewEntry />\n                </Card>\n\n                <Form.SubmitButton variant=\"send\" />\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const DynamicPathValue = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler defaultData={{ count: 0 }}>\n        <Flex.Stack>\n          <Field.Number path=\"/count\" width=\"small\" showStepControls />\n          <Iterate.Array\n            path=\"/items\"\n            countPath=\"/count\"\n            countPathTransform={({ value, index }) =>\n              Object.prototype.hasOwnProperty.call(value || {}, 'myObject')\n                ? value\n                : { myObject: index }\n            }\n          >\n            <Field.Number itemPath=\"/myObject\" label=\"Item no. {itemNr}\" />\n          </Iterate.Array>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithVisibility = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Iterate.Array path=\"/myList\" value={[{}]}>\n          <Flex.Stack>\n            <Field.Name.First\n              className=\"firstName\"\n              itemPath=\"/firstName\"\n            />\n\n            <Form.Visibility\n              animate\n              visibleWhen={{\n                itemPath: '/firstName',\n                hasValue: (value) => Boolean(value),\n              }}\n            >\n              <Field.Name.Last className=\"lastName\" itemPath=\"/lastName\" />\n            </Form.Visibility>\n          </Flex.Stack>\n        </Iterate.Array>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const InitialOpen = () => {\n  return (\n    <ComponentBox scope={{ Iterate, Tools }}>\n      <Form.Handler\n        onSubmit={async (data) => console.log('onSubmit', data)}\n        onSubmitRequest={() => console.log('onSubmitRequest')}\n      >\n        <Flex.Stack>\n          <Form.MainHeading>Statsborgerskap</Form.MainHeading>\n\n          <Card align=\"stretch\">\n            <Iterate.Array path=\"/countries\" defaultValue={[null]}>\n              <Iterate.ViewContainer toolbarVariant=\"minimumOneItem\">\n                <Value.SelectCountry\n                  label=\"Land du er statsborger i\"\n                  itemPath=\"/\"\n                />\n              </Iterate.ViewContainer>\n\n              <Iterate.EditContainer toolbarVariant=\"minimumOneItem\">\n                <Field.SelectCountry\n                  label=\"Land du er statsborger i\"\n                  itemPath=\"/\"\n                  required\n                />\n              </Iterate.EditContainer>\n            </Iterate.Array>\n\n            <Iterate.PushButton\n              path=\"/countries\"\n              pushValue={null}\n              text=\"Legg til flere statsborgerskap\"\n            />\n          </Card>\n\n          <Form.SubmitButton variant=\"send\" />\n\n          <Tools.Log />\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const ToolbarVariantMiniumOneItemOneItem = () => {\n  return (\n    <ComponentBox hideCode>\n      <Iterate.Array value={['foo']}>\n        <Iterate.ViewContainer toolbarVariant=\"minimumOneItem\">\n          View Content\n        </Iterate.ViewContainer>\n        <Iterate.EditContainer toolbarVariant=\"minimumOneItem\">\n          Edit Content\n        </Iterate.EditContainer>\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const ToolbarVariantMiniumOneItemTwoItems = () => {\n  return (\n    <ComponentBox hideCode>\n      <Iterate.Array value={['foo', 'bar']}>\n        <Iterate.ViewContainer toolbarVariant=\"minimumOneItem\">\n          View Content\n        </Iterate.ViewContainer>\n        <Iterate.EditContainer toolbarVariant=\"minimumOneItem\">\n          Edit Content\n        </Iterate.EditContainer>\n      </Iterate.Array>\n    </ComponentBox>\n  )\n}\n\nexport const WithArrayValidator = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        defaultData={{ items: ['foo'] }}\n        onSubmit={async () => console.log('onSubmit')}\n      >\n        <Card stack>\n          <Iterate.Array\n            path=\"/items\"\n            validator={(arrayValue) => {\n              if (!(arrayValue && arrayValue.length > 1)) {\n                return new Error('You need at least two items')\n              }\n            }}\n          >\n            <Flex.Horizontal align=\"flex-end\">\n              <Field.String\n                label=\"Item no. {itemNr}\"\n                itemPath=\"/\"\n                width=\"medium\"\n                size=\"medium\"\n              />\n              <Iterate.RemoveButton />\n            </Flex.Horizontal>\n          </Iterate.Array>\n\n          <Iterate.PushButton\n            top\n            path=\"/items\"\n            pushValue={null}\n            text=\"Add\"\n          />\n          <Form.SubmitButton />\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","import { useCallback, useContext, useRef } from 'react'\nimport pointer, { JsonObject } from 'json-pointer'\nimport DataContext, { FilterData } from '../DataContext/Context'\nimport { JSONSchema } from '../types'\n\nexport type GenerateSchemaReturn = {\n  schema: JSONSchema\n  data: JsonObject\n  propsOfFields: JsonObject\n  propsOfValues: JsonObject\n}\nexport type GenerateSchemaProps = {\n  log?: boolean\n  generateRef?: React.MutableRefObject<() => GenerateSchemaReturn>\n  filterData?: FilterData\n  children: React.ReactNode\n}\nexport type GenerateRef = GenerateSchemaProps['generateRef']['current']\n\nexport const schemaParams = [\n  'minLength',\n  'maxLength',\n  'pattern',\n  'description',\n  'min',\n  'max',\n  'multipleOf',\n  'exclusiveMinimum',\n  'exclusiveMaximum',\n]\n\nexport default function GenerateSchema(props: GenerateSchemaProps) {\n  const { generateRef, filterData, log, children } = props || {}\n  const { fieldPropsRef, valuePropsRef, data, hasContext } =\n    useContext(DataContext)\n\n  const dataRef = useRef<JsonObject>({})\n  dataRef.current = data\n\n  const generate = useCallback(() => {\n    const schema = Object.entries(fieldPropsRef?.current || {}).reduce(\n      (acc, [path, props]) => {\n        if (path.startsWith('/')) {\n          const objectKey = path.substring(1)\n\n          const pathList = objectKey.split('/')\n          const slashCount = pathList.length\n\n          const type = props.valueType || 'string'\n          const propertyValue = {\n            type,\n          }\n\n          for (const prop of schemaParams) {\n            if (props[prop]) {\n              propertyValue[prop] = props[prop]\n            }\n          }\n\n          if (slashCount > 1) {\n            const nestedPath = ['']\n            for (const path of pathList) {\n              nestedPath.push(path)\n              const pathToSet = nestedPath.join('/properties/')\n              const isLast = nestedPath.length - 1 === pathList.length\n\n              const existingValue = pointer.has(acc, pathToSet)\n                ? pointer.get(acc, pathToSet)\n                : null\n\n              const pathValue = isLast ? propertyValue : existingValue\n\n              if (isLast) {\n                if (filterData?.[pathToSet] !== false) {\n                  pointer.set(acc, pathToSet, pathValue)\n                }\n              } else {\n                const pathValue = {\n                  type: 'object',\n                  ...existingValue,\n                }\n\n                // - Add required\n                const required = []\n                if (props.required) {\n                  required.push(pathList.at(-1))\n                }\n                if (existingValue?.required) {\n                  required.push(...existingValue.required)\n                }\n                if (required.length > 0) {\n                  pathValue.required = required\n                }\n\n                if (filterData?.[pathToSet] !== false) {\n                  pointer.set(acc, pathToSet, pathValue)\n                }\n              }\n            }\n          } else {\n            if (filterData?.[path] !== false) {\n              pointer.set(acc.properties, path, propertyValue)\n            }\n            if (props.required) {\n              acc.required.push(objectKey)\n            }\n          }\n        }\n\n        return acc\n      },\n      { type: 'object', properties: {}, required: [] }\n    )\n\n    const propsOfFields = Object.entries(\n      fieldPropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function'\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        pointer.set(acc, path, propertyValue)\n      }\n\n      return acc\n    }, {})\n\n    const propsOfValues = Object.entries(\n      valuePropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function'\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        pointer.set(acc, path, propertyValue)\n      }\n\n      return acc\n    }, {})\n\n    if (schema.required.length === 0) {\n      delete schema.required\n    }\n\n    return {\n      schema,\n      data: dataRef.current,\n      propsOfFields,\n      propsOfValues,\n    } as GenerateSchemaReturn\n  }, [fieldPropsRef, filterData, valuePropsRef])\n\n  if (hasContext) {\n    if (log) {\n      console.log(generate().schema)\n    }\n\n    if (generateRef) {\n      generateRef.current = generate\n    }\n  }\n\n  return children\n}\n","import { isValidElement, useCallback, useContext, useRef } from 'react'\nimport pointer, { JsonObject } from 'json-pointer'\nimport DataContext, { FilterData } from '../DataContext/Context'\n\nexport type ListAllPropsReturn = {\n  propsOfFields: JsonObject\n  propsOfValues: JsonObject\n}\nexport type ListAllPropsProps = {\n  log?: boolean\n  generateRef?: React.MutableRefObject<() => ListAllPropsReturn>\n  filterData?: FilterData\n  children: React.ReactNode\n}\nexport type GenerateRef = ListAllPropsProps['generateRef']['current']\n\nexport default function ListAllProps(props: ListAllPropsProps) {\n  const { log, generateRef, filterData, children } = props || {}\n  const { fieldPropsRef, valuePropsRef, data, hasContext } =\n    useContext(DataContext)\n\n  const dataRef = useRef<JsonObject>({})\n  dataRef.current = data\n\n  const generate = useCallback(() => {\n    const propsOfFields = Object.entries(\n      fieldPropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function' &&\n            !isValidElement(props[prop])\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        if (filterData?.[path] !== false) {\n          pointer.set(acc, path, propertyValue)\n        }\n      }\n\n      return acc\n    }, {})\n\n    const propsOfValues = Object.entries(\n      valuePropsRef?.current || {}\n    ).reduce((acc, [path, props]) => {\n      if (path.startsWith('/')) {\n        const propertyValue = {}\n\n        for (const prop in props) {\n          if (\n            props[prop] !== undefined &&\n            typeof props[prop] !== 'function' &&\n            !isValidElement(props[prop])\n          ) {\n            propertyValue[prop] = props[prop]\n          }\n        }\n\n        if (filterData?.[path] !== false) {\n          pointer.set(acc, path, propertyValue)\n        }\n      }\n\n      return acc\n    }, {})\n\n    return { propsOfFields, propsOfValues } as ListAllPropsReturn\n  }, [fieldPropsRef, filterData, valuePropsRef])\n\n  if (hasContext) {\n    if (log) {\n      console.log(generate())\n    }\n\n    if (generateRef) {\n      generateRef.current = generate\n    }\n  }\n\n  return children\n}\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","_components","h2","h3","h4","p","Examples","_missingMdxReference","ToolbarVariantMiniumOneItemOneItem","ToolbarVariantMiniumOneItemTwoItems","ViewAndEditContainer","id","component","Error","code","a","pre","ul","li","href","className","Default","ComponentBox","noInline","Log","data","useContext","DataContext","Section","element","backgroundColor","style","maxWidth","innerSpace","JSON","stringify","_supportsSpacingProps","PrimitiveItemsFields","PrimitiveItemsValues","ValueComposition","WithTable","ObjectItems","RenderPropsPrimitiveItems","RenderPropsObjectItems","ArrayFromFormHandler","DynamicPathValue","WithVisibility","InitialOpen","scope","Iterate","Tools","hideCode","WithArrayValidator","schemaParams","GenerateSchema","generateRef","filterData","log","fieldPropsRef","valuePropsRef","hasContext","dataRef","useRef","current","generate","useCallback","schema","entries","reduce","acc","_ref","path","startsWith","objectKey","substring","pathList","split","slashCount","length","propertyValue","type","valueType","prop","nestedPath","push","pathToSet","join","isLast","existingValue","pointer","pathValue","required","at","apply","_toConsumableArray","properties","propsOfFields","_ref2","undefined","propsOfValues","_ref3","console","ListAllProps","isValidElement"],"sourceRoot":""}