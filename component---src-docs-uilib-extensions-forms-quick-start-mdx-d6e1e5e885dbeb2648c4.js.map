{"version":3,"file":"component---src-docs-uilib-extensions-forms-quick-start-mdx-d6e1e5e885dbeb2648c4.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/quick-start.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/DataContext/At/At.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    h3: \"h3\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.Transformers) _missingMdxReference(\"Examples.Transformers\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Quick start\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Field components can be used directly as they are, for example \", _jsx(_components.code, {\n        children: \"Field.Email\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Field } from '@dnb/eufemia/extensions/forms'\\n\\nrender(<Field.Email />)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"By building an entire form with components from Eufemia and Eufemia Forms, you save time and code:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Card } from '@dnb/eufemia'\\nimport { Form, Field } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Handler\\n    data={existingData}\\n    onChange={...}\\n    onSubmit={...}\\n  >\\n    <Card spacing=\\\"medium\\\">\\n      <Field.String\\n        path=\\\"/companyName\\\"\\n        label=\\\"Bedriftens navn\\\"\\n        required\\n      />\\n      <Field.OrganizationNumber\\n        path=\\\"/companyOrganizationNumber\\\"\\n        required\\n      />\\n      <Field.Selection\\n        path=\\\"/postalAddressSelect\\\"\\n        label=\\\"Ã˜nsket sted for tilsendt post\\\"\\n        variant=\\\"radio\\\"\\n      >\\n        <Field.Option value=\\\"companyAddress\\\" title=\\\"Samme som forretningsadresse\\\" />\\n        <Field.Option value=\\\"other\\\" title=\\\"Annet\\\" />\\n      </Field.Selection>\\n    </Card>\\n  </Form.Handler>\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Data handling\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You don't need React \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" to handle your form data.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"With \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/extended-features/Form/useData/\",\n        children: \"useData\"\n      }), \", \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/extended-features/Form/getData/\",\n        children: \"getData\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/extended-features/Form/setData/\",\n        children: \"setData\"\n      }), \" you area able to access and modify your form data from not only from nested components, but also outside the form context itself (\", _jsx(_components.code, {\n        children: \"Form.Handler\"\n      }), \").\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here \\\"ComponentB\\\" is rendered inside the \", _jsx(_components.code, {\n        children: \"Form.Handler\"\n      }), \" component:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Form } from '@dnb/eufemia/extensions/forms'\\n\\nfunction ComponentA() {\\n  return (\\n    <Form.Handler>\\n      ...\\n      <ComponentB />\\n      ...\\n    </Form.Handler>\\n  )\\n}\\n\\nfunction ComponentB() {\\n  const { data, update, set, filterData } = Form.useData()\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"While in this example, \\\"ComponentB\\\" is outside the \", _jsx(_components.code, {\n        children: \"Form.Handler\"\n      }), \" and linked together via the \", _jsx(_components.code, {\n        children: \"id\"\n      }), \" (string) property:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Form } from '@dnb/eufemia/extensions/forms'\\n\\nfunction ComponentA() {\\n  return (\\n    <>\\n      <Form.Handler id=\\\"unique\\\">...</Form.Handler>\\n      <ComponentB />\\n    </>\\n  )\\n}\\n\\nfunction ComponentB() {\\n  const { data, update, set, filterData } = Form.useData('unique')\\n}\\n\\n// You canalso use the setData:\\nForm.setData('unique', { companyName: 'DNB' })\\n\\n// ... and the getData method when ever you need to:\\nconst { data, filterData } = Form.getData('unique')\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Transforming data\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Each field supports transformer functions. So you can transform a value before it is processed to the form data object and vis-a-versa:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<Field.String\\n  label=\\\"Label\\\"\\n  path=\\\"/myField\\\"\\n  transformIn={transformIn}\\n  transformOut={transformOut}\\n/>\\n\"\n      })\n    }), \"\\n\", _jsx(Examples.Transformers, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Async form handling\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It depends on your use case if this feature is needed. But when it is, its ofter a time consuming task to implement. Eufemia Forms has therefor a built-in feature that enables async form behavior.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"More details about the async form behavior can be found in the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/getting-started/#async-form-behavior\",\n        children: \"async form behavior\"\n      }), \" section.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { Input, Slider, Card, Flex, NumberFormat } from '@dnb/eufemia/src'\nimport {\n  Form,\n  Field,\n  Value,\n  FieldBlock,\n  useFieldProps,\n  DataContext,\n  ValueBlock,\n  Wizard,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport const CreateBasicValueComponent = () => {\n  return (\n    <ComponentBox scope={{ ValueBlock }} hideCode>\n      {() => {\n        const MyValue = ({ value, ...props }) => {\n          return (\n            <ValueBlock {...props}>\n              <NumberFormat currency>{value}</NumberFormat>\n            </ValueBlock>\n          )\n        }\n\n        return <MyValue label=\"Label\" value={1234} />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const CreateBasicFieldComponent = () => {\n  return (\n    <ComponentBox\n      scope={{\n        useFieldProps,\n      }}\n      hideCode\n    >\n      {() => {\n        const MyField = (props) => {\n          const fromInput = React.useCallback(({ value }) => value, [])\n\n          const preparedProps = {\n            label: 'What is the secret of this field?',\n            fromInput,\n            validator: (value) => {\n              if (value === 'secret') {\n                return new Error('Do not reveal the secret!')\n              }\n            },\n            ...props,\n          }\n\n          const {\n            id,\n            value,\n            label,\n            handleChange,\n            handleFocus,\n            handleBlur,\n          } = useFieldProps(preparedProps)\n\n          return (\n            <FieldBlock forId={id} label={label}>\n              <Input\n                id={id}\n                value={value}\n                on_change={handleChange}\n                on_focus={handleFocus}\n                on_blur={handleBlur}\n              />\n            </FieldBlock>\n          )\n        }\n\n        return (\n          <MyField\n            onChange={(value) => console.log('onChange', value)}\n            required\n          />\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const GettingStarted = () => {\n  return (\n    <ComponentBox hideCode>\n      {() => {\n        const existingData = {\n          companyName: 'DNB',\n          companyOrganizationNumber: '123456789',\n          postalAddressSelect: 'companyAddress',\n        }\n\n        function Component() {\n          const { data } = Form.useData('company-form')\n          console.log('State:', data)\n\n          return (\n            <Form.Handler\n              id=\"company-form\"\n              data={existingData}\n              onChange={console.log}\n              onSubmit={console.log}\n            >\n              <Flex.Stack>\n                <Form.MainHeading>Bedrift</Form.MainHeading>\n                <Card spacing=\"medium\">\n                  <Field.String\n                    path=\"/companyName\"\n                    label=\"Bedriftens navn\"\n                    required\n                  />\n                  <Field.OrganizationNumber\n                    path=\"/companyOrganizationNumber\"\n                    required\n                  />\n                  <Field.Selection\n                    path=\"/postalAddressSelect\"\n                    label=\"Ã˜nsket sted for tilsendt post\"\n                    variant=\"radio\"\n                  >\n                    <Field.Option\n                      value=\"companyAddress\"\n                      title=\"Samme som forretningsadresse\"\n                    />\n                    <Field.Option value=\"other\" title=\"Annet\" />\n                  </Field.Selection>\n                </Card>\n                <Form.ButtonRow>\n                  <Form.SubmitButton />\n                </Form.ButtonRow>\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <Component />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const CreateComposedFieldComponent = () => {\n  return (\n    <ComponentBox\n      scope={{\n        DataContext,\n        useFieldProps,\n      }}\n      hideCode\n    >\n      {() => {\n        const MyComposedField = (props) => {\n          const birthYear = useFieldProps({\n            path: '/birthYear',\n          })\n\n          const handleBirthYearChange = React.useCallback(\n            (sliderData) => {\n              birthYear.handleChange(sliderData.value)\n            },\n            [birthYear],\n          )\n\n          return (\n            <FieldBlock label={props.label ?? 'Name and age'}>\n              <Flex.Horizontal>\n                <Field.String\n                  path=\"/firstName\"\n                  label=\"First name\"\n                  width=\"medium\"\n                  minLength={2}\n                />\n                <Field.String\n                  path=\"/lastName\"\n                  label=\"Last name\"\n                  width=\"medium\"\n                  required\n                />\n                <FieldBlock width=\"large\">\n                  <Slider\n                    min={1900}\n                    max={new Date().getFullYear()}\n                    step={1}\n                    label=\"Birth year\"\n                    label_direction=\"vertical\"\n                    value={parseFloat(String(birthYear.value))}\n                    on_change={handleBirthYearChange}\n                    on_drag_start={birthYear.handleFocus}\n                    on_drag_end={birthYear.handleBlur}\n                    status={birthYear.error?.message}\n                    tooltip\n                  />\n                </FieldBlock>\n              </Flex.Horizontal>\n            </FieldBlock>\n          )\n        }\n\n        const data = {\n          firstName: 'John',\n          birthYear: 2000,\n        }\n\n        return (\n          <DataContext.Provider\n            data={data}\n            onChange={(data) => console.log('onChange', data)}\n          >\n            <MyComposedField label=\"My custom label\" />\n          </DataContext.Provider>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const BaseFieldComponents = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Card stack>\n        <Field.String\n          label=\"Text field\"\n          value=\"Lorem Ipsum\"\n          onChange={(value) => console.log('onChange', value)}\n        />\n        <Field.Number\n          label=\"Number Field\"\n          value={789}\n          onChange={(value) => console.log('onChange', value)}\n        />\n        <Field.Boolean\n          label=\"Boolean Field\"\n          value={true}\n          onChange={(value) => console.log('onChange', value)}\n        />\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const FeatureFields = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Card stack>\n        <Field.String label=\"Fornavn\" value=\"John\" />\n        <Field.String label=\"Etternavn\" value=\"Smith\" />\n        <Field.NationalIdentityNumber value=\"20058512345\" />\n        <Field.Email value=\"john@smith.email\" />\n        <Field.PhoneNumber value=\"+47 98765432\" />\n      </Card>\n    </ComponentBox>\n  )\n}\n\nexport const LayoutComponents = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Flex.Stack>\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Card stack>\n          <Form.SubHeading>Name</Form.SubHeading>\n\n          <Field.String label=\"Fornavn\" value=\"John\" />\n          <Field.String label=\"Etternavn\" value=\"Smith\" />\n        </Card>\n\n        <Card stack>\n          <Form.SubHeading>More information</Form.SubHeading>\n\n          <Field.NationalIdentityNumber value=\"20058512345\" />\n          <Field.Email value=\"john@smith.email\" />\n          <Field.PhoneNumber value=\"+47 98765432\" />\n        </Card>\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n\nexport const VisibilityBasedOnData = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Form.Handler\n        data={{\n          firstName: undefined,\n          lastName: 'Smith',\n          advanced: false,\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Flex.Stack>\n          <Form.MainHeading>Profile</Form.MainHeading>\n\n          <Card stack>\n            <Form.SubHeading>Name</Form.SubHeading>\n\n            <Field.String path=\"/firstName\" label=\"Fornavn\" />\n            <Field.String path=\"/lastName\" label=\"Etternavn\" />\n          </Card>\n        </Flex.Stack>\n        <Field.Boolean\n          path=\"/advanced\"\n          variant=\"checkbox-button\"\n          label=\"More fields\"\n        />\n        <Form.Visibility pathTrue=\"/advanced\">\n          <Flex.Stack>\n            <Card stack>\n              <Form.SubHeading>More information</Form.SubHeading>\n\n              <Field.NationalIdentityNumber value=\"20058512345\" />\n              <Field.Email value=\"john@smith.email\" />\n              <Field.PhoneNumber value=\"+47 98765432\" />\n            </Card>\n          </Flex.Stack>\n        </Form.Visibility>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const UsingFormHandler = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Smith',\n          ssn: '20058512345',\n          email: 'john@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Card stack>\n          <Field.String path=\"/firstName\" label=\"Fornavn\" />\n          <Field.String path=\"/lastName\" label=\"Etternavn\" />\n          <Field.NationalIdentityNumber path=\"/ssn\" />\n          <Field.Email path=\"/email\" />\n          <Field.PhoneNumber path=\"/phone\" />\n\n          <Form.ButtonRow>\n            <Form.SubmitButton />\n          </Form.ButtonRow>\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Validation = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Form.Handler\n        data={{\n          firstName: undefined,\n          lastName: 'Smith',\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Card stack>\n          <Field.String path=\"/firstName\" label=\"Fornavn\" required />\n          <Field.String path=\"/lastName\" label=\"Etternavn\" required />\n          <Field.NationalIdentityNumber path=\"/ssn\" validateInitially />\n          <Field.Email path=\"/email\" validateInitially />\n          <Field.PhoneNumber path=\"/phone\" validateInitially />\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithWizard = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Form.Handler\n        data={{\n          firstName: undefined,\n          lastName: 'Smith',\n          advanced: false,\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Wizard.Container mode=\"loose\">\n          <Wizard.Step title=\"Name\">\n            <Form.MainHeading>Profile</Form.MainHeading>\n\n            <Card stack>\n              <Form.SubHeading>Name</Form.SubHeading>\n\n              <Field.String path=\"/firstName\" label=\"Fornavn\" required />\n              <Field.String path=\"/lastName\" label=\"Etternavn\" required />\n            </Card>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step title=\"More information\">\n            <Form.MainHeading>Profile</Form.MainHeading>\n\n            <Card stack>\n              <Form.SubHeading>More information</Form.SubHeading>\n\n              <Field.NationalIdentityNumber path=\"/ssn\" />\n              <Field.Email path=\"/email\" />\n              <Field.PhoneNumber path=\"/phone\" />\n            </Card>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step title=\"Summary\">\n            <Form.MainHeading>Profile</Form.MainHeading>\n\n            <Card stack>\n              <Flex.Container>\n                <Value.String path=\"/firstName\" label=\"Fornavn\" />\n                <Value.String path=\"/lastName\" label=\"Etternavn\" />\n              </Flex.Container>\n\n              <Value.NationalIdentityNumber path=\"/ssn\" />\n              <Value.Email path=\"/email\" />\n              <Value.PhoneNumber path=\"/phone\" />\n            </Card>\n\n            <Form.ButtonRow>\n              <Wizard.Buttons />\n              <Form.SubmitButton />\n            </Form.ButtonRow>\n          </Wizard.Step>\n        </Wizard.Container>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Transformers = () => {\n  return (\n    <ComponentBox hideCode>\n      {() => {\n        const MyForm = () => {\n          const transformToUpper = (value) => {\n            return value?.toUpperCase()\n          }\n          const transformToLower = (value) => {\n            return value?.toLowerCase()\n          }\n\n          return (\n            <Form.Handler onChange={console.log}>\n              <Card stack>\n                <Field.String\n                  width=\"medium\"\n                  label=\"Input value\"\n                  placeholder=\"Type letters\"\n                  path=\"/myField\"\n                  transformIn={transformToUpper}\n                  transformOut={transformToLower}\n                />\n\n                <Value.String label=\"Output value\" path=\"/myField\" />\n              </Card>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n","import React, { useCallback, useContext } from 'react'\nimport pointer from 'json-pointer'\nimport type { ComponentProps } from '../../types'\nimport Context, { ContextState } from '../Context'\n\nexport type Props = ComponentProps & {\n  /** JSON Pointer for where in the source dataset to point at in sub components */\n  path?: string\n  iterate?: boolean\n  children?: React.ReactNode\n}\n\nfunction At(props: Props) {\n  const { path = '/', iterate, children } = props\n  const dataContext = useContext(Context)\n  const {\n    data: contextData,\n    handlePathChange: handlePathChangeDataContext,\n  } = dataContext\n\n  const data =\n    contextData && pointer.has(contextData, path)\n      ? pointer.get(contextData, path)\n      : undefined\n\n  const handlePathChange: ContextState['handlePathChange'] = useCallback(\n    (changePath, value) => {\n      handlePathChangeDataContext(`${path}${changePath}`, value)\n    },\n    [handlePathChangeDataContext, path]\n  )\n\n  if (iterate) {\n    if (!Array.isArray(data)) {\n      return null\n    }\n    return (\n      <>\n        {data.map((element, i) => {\n          const handlePathChange = (\n            handlePathChangeDataContext\n              ? (changePath, value) => {\n                  handlePathChangeDataContext(\n                    `${path}/${i}${changePath}`,\n                    value\n                  )\n                }\n              : undefined\n          ) as ContextState['handlePathChange']\n\n          return (\n            <Context.Provider\n              key={`element${i}`}\n              value={{\n                ...dataContext,\n                data: element,\n                handlePathChange,\n              }}\n            >\n              {children}\n            </Context.Provider>\n          )\n        })}\n      </>\n    )\n  }\n\n  return (\n    <Context.Provider\n      value={{\n        ...dataContext,\n        data,\n        handlePathChange,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  )\n}\n\nAt._supportsSpacingProps = true\nexport default At\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","pre","h3","a","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","children","_jsx","className","href","id","component","Error","wrapper","MDXLayout","CreateBasicValueComponent","ComponentBox","scope","ValueBlock","hideCode","noInline","CreateBasicFieldComponent","useFieldProps","GettingStarted","CreateComposedFieldComponent","DataContext","BaseFieldComponents","Value","FeatureFields","LayoutComponents","VisibilityBasedOnData","UsingFormHandler","Validation","WithWizard","Transformers","At","path","iterate","dataContext","useContext","Context","data","contextData","handlePathChange","handlePathChangeDataContext","pointer","undefined","useCallback","changePath","value","Array","isArray","map","element","i","Provider","_supportsSpacingProps"],"sourceRoot":""}