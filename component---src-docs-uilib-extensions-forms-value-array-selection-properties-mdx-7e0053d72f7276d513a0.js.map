{"version":3,"file":"component---src-docs-uilib-extensions-forms-value-array-selection-properties-mdx-7e0053d72f7276d513a0.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/ArraySelection/ArraySelectionDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/ArraySelection/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/ValueDocs.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../../../shared/types'\n\nexport const ArraySelectionProperties: PropertiesTableProps = {\n  format: {\n    doc: 'Formatting options for the value. See the [Intl.ListFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat) documentation.',\n    type: 'Intl.ListFormatOptions',\n    status: 'optional',\n  },\n  variant: {\n    doc: 'Defines if the value should be displayed in list format, or regular text format on one line. Defaults to `text`',\n    type: ['ol', 'ul', 'text'],\n    status: 'optional',\n  },\n  listType: {\n    doc: 'Defines the type of list styling used for list variants. Used on conjunction with variant `ol` and `ul`. Variant `ol`: `a`, `A`, `i`, `I` and `1`. Variant `ul`: `circle`, `disc` and `square`. Defaults to `undefined`',\n    type: [\n      'a',\n      'A',\n      'i',\n      'I',\n      '1',\n      'circle',\n      'disc',\n      'square',\n      'undefined',\n    ],\n    status: 'optional',\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {ArraySelectionProperties} from '@dnb/eufemia/src/extensions/forms/Value/ArraySelection/ArraySelectionDocs';\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {ValueProperties} from '@dnb/eufemia/src/extensions/forms/Value/ValueDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Value-specific properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: ArraySelectionProperties\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"General properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: ValueProperties,\n      valueType: \"Array<string | number>\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colorValue = 'var(--color-success-green)'\nconst colorString = 'var(--color-fire-red)'\nconst colorType = 'var(--color-violet)'\nconst colorUndefined = 'var(--color-black-55)'\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = children.startsWith(`'`) ? colorString : colorType\n        // falls through\n      }\n      case 'value': {\n        style.color = children.startsWith(`'`)\n          ? colorString\n          : children === 'undefined' || children === 'null'\n          ? colorUndefined\n          : colorValue\n        // falls through\n      }\n      default: {\n        style.background = 'none'\n        style.boxShadow = 'none'\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('/')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const ValueProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Value for the value component. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default value for the value component. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Field label to show above the displayed value.',\n    type: 'string',\n    status: 'optional',\n  },\n  inheritLabel: {\n    doc: 'Use `true` to inherit the label from a visible (rendered) field with the same path.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  inheritVisibility: {\n    doc: 'Use `true` to inherit the visibility from a field with the same path. You can find more info in the [Value section](/uilib/extensions/forms/Value/#inherit-visibility-from-fields-based-on-path).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  showEmpty: {\n    doc: 'Shows the value even if it is empty.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  placeholder: {\n    doc: 'Text showing in place of the value if no value is given.',\n    type: 'string',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for this input is located in the source dataset.',\n    type: 'string',\n    status: 'optional',\n  },\n  inline: {\n    doc: 'For showing the value inline (not as a block element).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  maxWidth: {\n    doc: 'Use `auto` for no max-width (use browser default), `small`, `medium` or `large` for predefined standard max widths. Defaults to `large`.',\n    type: 'string',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the value component.',\n    type: 'function',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n"],"names":["ArraySelectionProperties","format","doc","type","status","variant","listType","_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","ValueProperties","valueType","wrapper","MDXLayout","basicComponents","p","StyledTable","_styled","Table","target","name","styles","colorString","FormattedCode","_ref","strikethrough","style","rest","textDecoration","color","startsWith","background","boxShadow","code","_ref2","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","defaultValue","includes","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp","value","label","inheritLabel","inheritVisibility","showEmpty","placeholder","path","inline","maxWidth","transformIn"],"sourceRoot":""}