"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[90329],{4755:function(e,t,o){o.d(t,{V:function(){return n}});const n={innerRef:{doc:"Send along a custom React Ref.",type:"React.RefObject",status:"optional"},children:{doc:"Contents.",type:"React.Node",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}}},14700:function(e,t,o){o.d(t,{j:function(){return l}});var n=o(82234),a=o(41120);const i={...n.P,...a.b},{children:s,...r}=i,l={value:{doc:"The value to format. Can be given as `children` instead.",type:["Array<React.ReactNode>"],status:"optional"},children:{doc:"The children to format.",type:"React.ReactNode",status:"optional"},format:{doc:"Formatting options for the value when variant is `text`. See the [Intl.ListFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat) documentation.",type:"Intl.ListFormatOptions",status:"optional"},variant:{doc:"Defines if the value should be displayed in list format (`ol`, `ul`) or regular text format in one line. Defaults to `text`.",type:["ol","ul","text"],status:"optional"},listType:{doc:"Defines the type of list styling used for list variants. Used together with variant `ol` and `ul`. Variant `ol`: `a`, `A`, `i`, `I` and `1`. Variant `ul`: `circle`, `disc` and `square`. Defaults to `undefined`.",type:["a","A","i","I","1","circle","disc","square","unstyled","undefined"],status:"optional"},...r}},20516:function(e,t,o){o.r(t),o.d(t,{default:function(){return p}});var n=o(31085),a=o(71184);const i={...o(14700).j};var s=o(15616),r=o(92223);function l(e){const t=Object.assign({h2:"h2",h3:"h3"},(0,a.R)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{children:"Properties"}),"\n",(0,n.jsx)(t.h3,{children:"Value-specific properties"}),"\n",(0,n.jsx)(s.Ay,{props:i}),"\n",(0,n.jsx)(t.h3,{children:"General properties"}),"\n",(0,n.jsx)(s.Ay,{props:r.f,valueType:"Array<string | number>"})]})}var p=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.R)(),e.components);return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(l,e)})):l(e)}},41120:function(e,t,o){o.d(t,{b:function(){return n}});const n={inside:{doc:"Defines the position of the marker.",type:"boolean",status:"optional"},outside:{doc:"Defines the position of the marker (default).",type:"boolean",status:"optional"},nested:{doc:"Will ensure a nested structure of several lists.",type:"boolean",status:"optional"},...o(4755).V}},69094:function(e,t,o){var n=o(23722);t.A=n.A},81908:function(e,t,o){var n=o(94515);t.A=n.A},82234:function(e,t,o){o.d(t,{P:function(){return n}});const n={inside:{doc:"Defines the position of the marker.",type:"boolean",status:"optional"},outside:{doc:"Defines the position of the marker (default).",type:"boolean",status:"optional"},nested:{doc:"Will ensure a nested structure of several lists.",type:"boolean",status:"optional"},...o(4755).V}},92034:function(e,t,o){var n=o(31666);t.A=n.A},92223:function(e,t,o){o.d(t,{f:function(){return n}});const n={value:{doc:"Value for the value component. Will take precedence over the path value given in the data context.",type:"{valueType}",status:"optional"},defaultValue:{doc:"Default value for the value component. Will not take precedence over the path value given in the data context.",type:"{valueType}",status:"optional"},label:{doc:"Field label to show above the displayed value.",type:"string",status:"optional"},labelSrOnly:{doc:"Use `true` to make the label only readable by screen readers.",type:"boolean",status:"optional"},help:{doc:"Provide help content for the field using `title` and `content` as a string or React.Node. Additionally, you can set `open` to `true` to display the inline help, set the `breakout` property to `false` to disable the breakout of the inline help content, or use `renderAs` set to `dialog` to render the content in a [Dialog](/uilib/components/dialog/) (recommended for larger amounts of content).",type:"object",status:"optional"},transformLabel:{doc:"Transforms the label before it gets displayed. Receives the label as the first parameter. The second parameter is a object containing the `convertJsxToString` function.",type:"function",status:"optional"},inheritLabel:{doc:"Use `true` to inherit the label from a visible (rendered) field with the same path.",type:"boolean",status:"optional"},inheritVisibility:{doc:"Use `true` to inherit the visibility from a field with the same path. You can find more info in the [Value section](/uilib/extensions/forms/Value/#inherit-visibility-from-fields-based-on-path).",type:"boolean",status:"optional"},showEmpty:{doc:"Shows the value even if it is empty.",type:"boolean",status:"optional"},placeholder:{doc:"Text showing in place of the value if no value is given.",type:"string",status:"optional"},path:{doc:"JSON Pointer for where the data for this input is located in the source dataset.",type:"string",status:"optional"},inline:{doc:"For showing the value inline (not as a block element).",type:"boolean",status:"optional"},maxWidth:{doc:"Use `auto` for no max-width (use browser default), `small`, `medium` or `large` for predefined standard max widths. Defaults to `large`.",type:"string",status:"optional"},transformIn:{doc:"Transforms the `value` before its displayed in the value component.",type:"function",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-value-array-selection-properties-mdx-a0766169e7b6a80e07ca.js.map