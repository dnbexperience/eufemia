{"version":3,"file":"component---src-docs-uilib-extensions-forms-value-array-selection-properties-mdx-ed8d1183d6299c392f30.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/ArraySelection/ArraySelectionDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/ArraySelection/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/list-format/ListFormatDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/ElementDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/lists/OlDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/lists/UlDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/ValueDocs.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../../../shared/types'\n\nimport { ListFormatProperties } from '../../../../components/list-format/ListFormatDocs'\n\nexport const ArraySelectionProperties: PropertiesTableProps = {\n  ...ListFormatProperties,\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {ArraySelectionProperties} from '@dnb/eufemia/src/extensions/forms/Value/ArraySelection/ArraySelectionDocs';\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {ValueProperties} from '@dnb/eufemia/src/extensions/forms/Value/ValueDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Value-specific properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: ArraySelectionProperties\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"General properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: ValueProperties,\n      valueType: \"Array<string | number>\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colors = {\n  type: {\n    default: 'var(--color-success-green)',\n    primitive: 'var(--color-success-green)',\n    string: 'var(--color-fire-red)',\n  },\n  value: {\n    default: 'var(--color-success-green)',\n    undefined: 'var(--color-black-55)',\n    string: 'var(--color-fire-red)',\n  },\n}\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = isString(children)\n          ? colors.type.string\n          : isPrimitive(children)\n          ? colors.type.primitive\n          : colors.type.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n      case 'value': {\n        style.color = isString(children)\n          ? colors.value.string\n          : children === 'undefined' || children === 'null'\n          ? colors.value.undefined\n          : colors.value.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td>\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\nfunction isString(str: string) {\n  return [\"'\", '\"', '`'].includes(str.substring(0, 1))\n}\n\nfunction isPrimitive(type: string) {\n  return [\n    'boolean',\n    'true',\n    'false',\n    'number',\n    'bigint',\n    'string',\n    'symbol',\n  ].includes(typeWithoutArray(type))\n}\n\nfunction typeWithoutArray(type: string) {\n  if (type.endsWith('[]')) {\n    return type.slice(0, -2)\n  } else if (type.startsWith('Array<') && type.endsWith('>')) {\n    return type.slice(6, -1)\n  }\n  return type\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('[')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","import { PropertiesTableProps } from '../../shared/types'\nimport { UlProperties } from './../../elements/lists/UlDocs'\nimport { OlProperties } from './../../elements/lists/OlDocs'\n\nconst ListProperties = { ...UlProperties, ...OlProperties }\nconst { children, ...ListPropertiesWithoutChildren } = ListProperties\n\nexport const ListFormatProperties: PropertiesTableProps = {\n  value: {\n    doc: 'The value to format. Can be given as `children` instead.',\n    type: ['Array<React.ReactNode>'],\n    status: 'optional',\n  },\n  children: {\n    doc: 'The children to format.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  format: {\n    doc: 'Formatting options for the value when variant is `text`. See the [Intl.ListFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat) documentation.',\n    type: 'Intl.ListFormatOptions',\n    status: 'optional',\n  },\n  variant: {\n    doc: 'Defines if the value should be displayed in list format (`ol`, `ul`) or regular text format in one line. Defaults to `text`',\n    type: ['ol', 'ul', 'text'],\n    status: 'optional',\n  },\n  listType: {\n    doc: 'Defines the type of list styling used for list variants. Used together with variant `ol` and `ul`. Variant `ol`: `a`, `A`, `i`, `I` and `1`. Variant `ul`: `circle`, `disc` and `square`. Defaults to `undefined`',\n    type: [\n      'a',\n      'A',\n      'i',\n      'I',\n      '1',\n      'circle',\n      'disc',\n      'square',\n      'unstyled',\n      'undefined',\n    ],\n    status: 'optional',\n  },\n  ...ListPropertiesWithoutChildren,\n}\n","import { PropertiesTableProps } from '../shared/types'\n\nexport const ElementPropertiesWithoutSkeleton: PropertiesTableProps = {\n  innerRef: {\n    doc: 'Send along a custom React Ref.',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  children: {\n    doc: 'Contents.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const ElementProperties: PropertiesTableProps = {\n  ...ElementPropertiesWithoutSkeleton,\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeletonMethod: {\n    doc: 'Can be `shape`, `font` or `form`. Defaults to `font`.',\n    type: 'string',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../shared/types'\n\nimport { ElementPropertiesWithoutSkeleton } from './../ElementDocs'\n\nexport const OlProperties: PropertiesTableProps = {\n  inside: {\n    doc: 'Defines the position of the marker.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  outside: {\n    doc: 'Defines the position of the marker (default).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  nested: {\n    doc: 'Will ensure a nested structure of several lists.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  ...ElementPropertiesWithoutSkeleton,\n}\n","import { PropertiesTableProps } from '../../shared/types'\nimport { ElementPropertiesWithoutSkeleton } from './../ElementDocs'\n\nexport const UlProperties: PropertiesTableProps = {\n  inside: {\n    doc: 'Defines the position of the marker.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  outside: {\n    doc: 'Defines the position of the marker (default).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  nested: {\n    doc: 'Will ensure a nested structure of several lists.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  ...ElementPropertiesWithoutSkeleton,\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const ValueProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Value for the value component. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default value for the value component. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Field label to show above the displayed value.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  transformLabel: {\n    doc: 'Transforms the label before it gets displayed. Receives the label as the first parameter. The second parameter is a object containing the `convertJsxToString` function.',\n    type: 'function',\n    status: 'optional',\n  },\n  inheritLabel: {\n    doc: 'Use `true` to inherit the label from a visible (rendered) field with the same path.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  inheritVisibility: {\n    doc: 'Use `true` to inherit the visibility from a field with the same path. You can find more info in the [Value section](/uilib/extensions/forms/Value/#inherit-visibility-from-fields-based-on-path).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  showEmpty: {\n    doc: 'Shows the value even if it is empty.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  placeholder: {\n    doc: 'Text showing in place of the value if no value is given.',\n    type: 'string',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for this input is located in the source dataset.',\n    type: 'string',\n    status: 'optional',\n  },\n  inline: {\n    doc: 'For showing the value inline (not as a block element).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  maxWidth: {\n    doc: 'Use `auto` for no max-width (use browser default), `small`, `medium` or `large` for predefined standard max widths. Defaults to `large`.',\n    type: 'string',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the value component.',\n    type: 'function',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n"],"names":["ArraySelectionProperties","ListFormatProperties","_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","ValueProperties","valueType","wrapper","MDXLayout","basicComponents","p","StyledTable","_styled","Table","target","name","styles","colors","default","primitive","string","undefined","FormattedCode","_ref","variant","strikethrough","style","rest","textDecoration","color","isString","includes","type","endsWith","slice","startsWith","typeWithoutArray","background","boxShadow","code","_ref2","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","defaultValue","doc","status","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","str","substring","forEach","replace","RegExp","ListProperties","UlProperties","OlProperties","ListPropertiesWithoutChildren","value","format","listType","ElementPropertiesWithoutSkeleton","innerRef","inside","outside","nested","label","labelSrOnly","transformLabel","inheritLabel","inheritVisibility","showEmpty","placeholder","path","inline","maxWidth","transformIn"],"sourceRoot":""}