{"version":3,"file":"component---src-docs-uilib-extensions-forms-value-composition-demos-mdx-e4dc522e1c210306b9a5.js","mappings":"2bAIO,MAAMA,EAAQA,KACnBC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,kJAUWC,EAAkBA,KAC7BH,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,sDAAAC,SAAA,yUAiBWE,EAA6BA,KACxCJ,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,oEAAAC,SAAA,mLAYWG,EAAkBA,KAC7BL,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,2DAAAC,SAAA,syBAqCWI,EAA4BA,KACvCN,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,gEAAAC,SAAA,mvBCjFF,SAASK,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBN,EAAMO,YAO/B,OANKC,GAAUC,EAAqB,YAAY,GAC3CD,GAAgBC,EAAqB,kBAAkB,GACvDD,GAAqCC,EAAqB,uCAAuC,GACjGD,GAA0BC,EAAqB,4BAA4B,GAC3ED,GAA0BC,EAAqB,4BAA4B,GAC3ED,GAAoCC,EAAqB,sCAAsC,IAC7FC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBjB,SAAU,EAACF,EAAAA,EAAAA,KAAKS,EAAYG,GAAI,CAC9BV,SAAU,UACR,MAAMF,EAAAA,EAAAA,KAAKS,EAAYI,GAAI,CAC7BX,SAAU,gBACR,MAAMF,EAAAA,EAAAA,KAAKgB,EAAgB,CAAC,GAAI,MAAMhB,EAAAA,EAAAA,KAAKS,EAAYI,GAAI,CAC7DX,SAAU,mBACR,MAAMF,EAAAA,EAAAA,KAAKgB,EAAqC,CAAC,GAAI,MAAMhB,EAAAA,EAAAA,KAAKS,EAAYI,GAAI,CAClFX,SAAU,+BACR,MAAMF,EAAAA,EAAAA,KAAKgB,EAA0B,CAAC,GAAI,MAAMhB,EAAAA,EAAAA,KAAKS,EAAYI,GAAI,CACvEX,SAAU,0CACR,MAAMF,EAAAA,EAAAA,KAAKgB,EAAoC,CAAC,GAAI,MAAMhB,EAAAA,EAAAA,KAAKS,EAAYI,GAAI,CACjFX,SAAU,qBACR,MAAMF,EAAAA,EAAAA,KAAKgB,EAA0B,CAAC,KAE9C,CAOA,MANA,SAAoBR,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOM,GAAYrB,EAAAA,EAAAA,KAAKqB,EAAWX,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DN,UAAUF,EAAAA,EAAAA,KAAKO,EAAmBC,MAC9BD,EAAkBC,EAC1B,EAEA,SAASS,EAAqBK,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/Composition/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/Composition/demos.mdx"],"sourcesContent":["import { Card } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Form, Value } from '@dnb/eufemia/src/extensions/forms'\n\nexport const Basic = () => {\n  return (\n    <ComponentBox>\n      <Value.Composition>\n        <Value.String label=\"Label A\" value=\"value\" />\n        <Value.Number label=\"Label B\" value={123} />\n      </Value.Composition>\n    </ComponentBox>\n  )\n}\n\nexport const WidthComparison = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-composition-default\">\n      <Value.Composition gap=\"large\">\n        <Value.String\n          maxWidth=\"medium\"\n          label=\"Medium maxWidth\"\n          value=\"Nam sed aliquet nunc. Pellentesque condimentum enim arcu.\"\n        />\n        <Value.String\n          label=\"Without a width\"\n          value=\"Nam sed aliquet nunc. Pellentesque condimentum enim arcu.\"\n        />\n      </Value.Composition>\n    </ComponentBox>\n  )\n}\n\nexport const CombineValuesInSummaryList = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-composition-summary-list-combined\">\n      <Value.SummaryList>\n        <Value.Composition label=\"Label\">\n          <Value.String value=\"value\" />\n          <Value.Number value={123} />\n        </Value.Composition>\n      </Value.SummaryList>\n    </ComponentBox>\n  )\n}\n\nexport const WithSummaryList = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-composition-summary-list\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n          streetName: 'Osloveien',\n          streetNr: 12,\n          postalCode: '1234',\n          city: 'Oslo',\n        }}\n      >\n        <Card stack>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList>\n            <Value.Composition label=\"Name\">\n              <Value.String path=\"/firstName\" />\n              <Value.String path=\"/lastName\" />\n            </Value.Composition>\n\n            <Value.Composition label=\"Street\">\n              <Value.String path=\"/streetName\" />\n              <Value.Number path=\"/streetNr\" />\n            </Value.Composition>\n\n            <Value.Composition label=\"City\">\n              <Value.String path=\"/postalCode\" />\n              <Value.String path=\"/city\" />\n            </Value.Composition>\n          </Value.SummaryList>\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithSummaryListGridLayout = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-composition-summary-list-grid\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n          streetName: 'Osloveien',\n          streetNr: 12,\n          postalCode: '1234',\n          city: 'Oslo',\n        }}\n      >\n        <Card stack>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList layout=\"grid\">\n            <Value.Name.First path=\"/firstName\" />\n            <Value.Name.Last path=\"/lastName\" />\n\n            <Value.Composition label=\"Street\">\n              <Value.String path=\"/streetName\" />\n              <Value.Number path=\"/streetNr\" />\n            </Value.Composition>\n\n            <Value.Composition label=\"City\">\n              <Value.String path=\"/postalCode\" />\n              <Value.String path=\"/city\" />\n            </Value.Composition>\n          </Value.SummaryList>\n        </Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.Basic) _missingMdxReference(\"Examples.Basic\", true);\n  if (!Examples.CombineValuesInSummaryList) _missingMdxReference(\"Examples.CombineValuesInSummaryList\", true);\n  if (!Examples.WidthComparison) _missingMdxReference(\"Examples.WidthComparison\", true);\n  if (!Examples.WithSummaryList) _missingMdxReference(\"Examples.WithSummaryList\", true);\n  if (!Examples.WithSummaryListGridLayout) _missingMdxReference(\"Examples.WithSummaryListGridLayout\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Basic usage\"\n    }), \"\\n\", _jsx(Examples.Basic, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"In SummaryList\"\n    }), \"\\n\", _jsx(Examples.CombineValuesInSummaryList, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inside a plain SummaryList\"\n    }), \"\\n\", _jsx(Examples.WithSummaryList, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inside a SummaryList with grid layout\"\n    }), \"\\n\", _jsx(Examples.WithSummaryListGridLayout, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Width comparison\"\n    }), \"\\n\", _jsx(Examples.WidthComparison, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["Basic","_jsx","ComponentBox","children","WidthComparison","CombineValuesInSummaryList","WithSummaryList","WithSummaryListGridLayout","_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error"],"sourceRoot":""}