{"version":3,"file":"component---src-docs-uilib-extensions-forms-value-composition-mdx-bccc65f2c52d84dba904.js","mappings":"sLAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,KAAM,OACNC,EAAG,IACHC,IAAK,MACLC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,KAAsBX,EAAMY,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKf,EAAYG,GAAI,CAC9BW,SAAU,gBACR,MAAMF,EAAAA,EAAAA,MAAMZ,EAAYI,EAAG,CAC7BU,SAAU,EAACC,EAAAA,EAAAA,KAAKf,EAAYK,KAAM,CAChCS,SAAU,sBACR,0BAA0BC,EAAAA,EAAAA,KAAKf,EAAYK,KAAM,CACnDS,SAAU,YACR,2BACF,MAAMC,EAAAA,EAAAA,KAAKf,EAAYI,EAAG,CAC5BU,SAAU,sLACR,MAAMF,EAAAA,EAAAA,MAAMZ,EAAYI,EAAG,CAC7BU,SAAU,CAAC,6BAA6BC,EAAAA,EAAAA,KAAKf,EAAYM,EAAG,CAC1DU,KAAM,mDACNF,SAAU,sBACR,oCAAoCC,EAAAA,EAAAA,KAAKf,EAAYM,EAAG,CAC1DU,KAAM,sCACNF,SAAU,UACR,kBACF,MAAMC,EAAAA,EAAAA,KAAKf,EAAYO,IAAK,CAC9BO,UAAUC,EAAAA,EAAAA,KAAKf,EAAYK,KAAM,CAC/BY,UAAW,eACXH,SAAU,kPAEV,MAAMC,EAAAA,EAAAA,KAAKf,EAAYG,GAAI,CAC7BW,SAAU,mBACR,MAAMF,EAAAA,EAAAA,MAAMZ,EAAYQ,GAAI,CAC9BM,SAAU,CAAC,MAAMC,EAAAA,EAAAA,KAAKf,EAAYS,GAAI,CACpCK,UAAUC,EAAAA,EAAAA,KAAKf,EAAYM,EAAG,CAC5BU,KAAM,iHACNF,SAAU,kBAEV,MAAMC,EAAAA,EAAAA,KAAKf,EAAYS,GAAI,CAC7BK,UAAUC,EAAAA,EAAAA,KAAKf,EAAYM,EAAG,CAC5BU,KAAM,yIACNF,SAAU,gBAEV,QACF,MAAMC,EAAAA,EAAAA,KAAKf,EAAYG,GAAI,CAC7BW,SAAU,kBACR,MAAMF,EAAAA,EAAAA,MAAMZ,EAAYI,EAAG,CAC7BU,SAAU,CAAC,8BAA8BC,EAAAA,EAAAA,KAAKf,EAAYK,KAAM,CAC9DS,SAAU,YACR,6DAA6DC,EAAAA,EAAAA,KAAKf,EAAYM,EAAG,CACnFU,KAAM,6CACNF,SAAU,gBACR,kJAGV,CAOA,UANA,SAAoBf,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOmB,QAASC,GAAalB,OAAOC,OAAO,CAAC,GAAGQ,EAAAA,EAAAA,KAAsBX,EAAMY,YAC3E,OAAOQ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWlB,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1De,UAAUC,EAAAA,EAAAA,KAAKjB,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,mYChEO,MAAMqB,EAAQA,KACnBL,EAAAA,EAAAA,KAAAM,EAAAA,EAAA,CAAAP,SAAA,kJAUWQ,EAAkBA,KAC7BP,EAAAA,EAAAA,KAAAM,EAAAA,EAAA,sDAAAP,SAAA,yUAiBWS,EAA6BA,KACxCR,EAAAA,EAAAA,KAAAM,EAAAA,EAAA,oEAAAP,SAAA,mLAYWU,EAAkBA,KAC7BT,EAAAA,EAAAA,KAAAM,EAAAA,EAAA,2DAAAP,SAAA,y4BAuCWW,EAA4BA,KACvCV,EAAAA,EAAAA,KAAAM,EAAAA,EAAA,gEAAAP,SAAA,86BAuCWY,EAAWA,KACtBX,EAAAA,EAAAA,KAAAM,EAAAA,EAAA,mDAAAP,SAAA,2wBAkCWa,EAAWA,KAOtBZ,EAAAA,EAAAA,KAAAM,EAAAA,EAAA,CAAAO,MAAA,CACFC,cANI,gEAOJC,6BALI,gEAMJC,+BAJI,8DAKJ,sDAAAjB,SAAA,4kDCxKA,SAAShB,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJ6B,GAAI,OACHtB,EAAAA,EAAAA,KAAsBX,EAAMY,aAAa,sBAACsB,GAAyBjC,EAUtE,OATKkC,GAAUC,EAAqB,YAAY,GAC3CD,GAAgBC,EAAqB,kBAAkB,GACvDD,GAAqCC,EAAqB,uCAAuC,GACjGD,GAA0BC,EAAqB,4BAA4B,GAC3ED,GAAmBC,EAAqB,qBAAqB,GAC7DD,GAA0BC,EAAqB,4BAA4B,GAC3ED,GAAoCC,EAAqB,sCAAsC,GAC/FD,GAAmBC,EAAqB,qBAAqB,GAC7DF,GAAuBE,EAAqB,yBAAyB,IACnEvB,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKf,EAAYG,GAAI,CAC9BW,SAAU,UACR,MAAMC,EAAAA,EAAAA,KAAKf,EAAYgC,GAAI,CAC7BlB,SAAU,gBACR,MAAMC,EAAAA,EAAAA,KAAKmB,EAAgB,CAAC,GAAI,MAAMnB,EAAAA,EAAAA,KAAKf,EAAYgC,GAAI,CAC7DlB,SAAU,mBACR,MAAMC,EAAAA,EAAAA,KAAKmB,EAAqC,CAAC,GAAI,MAAMnB,EAAAA,EAAAA,KAAKf,EAAYgC,GAAI,CAClFlB,SAAU,+BACR,MAAMC,EAAAA,EAAAA,KAAKmB,EAA0B,CAAC,GAAI,MAAMnB,EAAAA,EAAAA,KAAKf,EAAYgC,GAAI,CACvElB,SAAU,0CACR,MAAMC,EAAAA,EAAAA,KAAKmB,EAAoC,CAAC,GAAI,MAAMnB,EAAAA,EAAAA,KAAKf,EAAYgC,GAAI,CACjFlB,SAAU,qBACR,MAAMC,EAAAA,EAAAA,KAAKmB,EAA0B,CAAC,GAAI,MAAMnB,EAAAA,EAAAA,KAAKf,EAAYgC,GAAI,CACvElB,SAAU,cACR,MAAMC,EAAAA,EAAAA,KAAKmB,EAAmB,CAAC,GAAI,MAAMnB,EAAAA,EAAAA,KAAKkB,EAAuB,CACvEnB,UAAUC,EAAAA,EAAAA,KAAKmB,EAAmB,CAAC,OAGzC,CAOA,MANA,SAAoBnC,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOmB,QAASC,GAAalB,OAAOC,OAAO,CAAC,GAAGQ,EAAAA,EAAAA,KAAsBX,EAAMY,YAC3E,OAAOQ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWlB,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1De,UAAUC,EAAAA,EAAAA,KAAKjB,EAAmBC,MAC9BD,EAAkBC,EAC1B,EAEA,SAASoC,EAAqBC,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,C,+EC1CA,SAAStC,EAAkBC,GACzB,OAAOa,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKwB,EAAAA,QAAM,CAAC,GAAI,MAAMxB,EAAAA,EAAAA,KAAKyB,EAAAA,QAAO,CAAC,KAElD,CAOA,UANA,SAAoBzC,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOmB,QAASC,GAAalB,OAAOC,OAAO,CAAC,GAAGQ,EAAAA,EAAAA,KAAsBX,EAAMY,YAC3E,OAAOQ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWlB,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1De,UAAUC,EAAAA,EAAAA,KAAKjB,EAAmBC,MAC9BD,GACR,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/Composition/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/Composition/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/Composition/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/Composition.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Value.Composition\"\n      }), \" combines two or more \", _jsx(_components.code, {\n        children: \"Value.*\"\n      }), \" components into one.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"By default, they will be placed in a horizontal layout. When rendered on a small screen, and the Composition contains Values with label they will be placed in a vertical layout.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There is a corresponding \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/base-fields/Composition/\",\n        children: \"Field.Composition\"\n      }), \" component that can be used for \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/all-fields/\",\n        children: \"field\"\n      }), \" components.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Value } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Value.Composition label=\\\"Label\\\">\\n    <Value.String label=\\\"First\\\" path=\\\"/first\\\" />\\n    <Value.String label=\\\"Second\\\" path=\\\"/second\\\" />\\n  </Value.Composition>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Relevant links\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/dnbexperience/eufemia/tree/main/packages/dnb-eufemia/src/extensions/forms/Value/Composition\",\n          children: \"Source code\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/dnbexperience/eufemia/tree/main/packages/dnb-design-system-portal/src/docs/uilib/extensions/forms/Value/Composition\",\n          children: \"Docs code\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When you combine multiple \", _jsx(_components.code, {\n        children: \"Value.*\"\n      }), \" components together, consider enclosing them within the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Value/SummaryList/\",\n        children: \"SummaryList\"\n      }), \" component. This component offers a standardized approach for presenting labels and values within an accessible definition list structure.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Flex } from '@dnb/eufemia/src'\nimport { Form, Value } from '@dnb/eufemia/src/extensions/forms'\n\nexport const Basic = () => {\n  return (\n    <ComponentBox>\n      <Value.Composition>\n        <Value.String label=\"Label A\" value=\"value\" />\n        <Value.Number label=\"Label B\" value={123} />\n      </Value.Composition>\n    </ComponentBox>\n  )\n}\n\nexport const WidthComparison = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-composition-default\">\n      <Value.Composition gap=\"large\">\n        <Value.String\n          maxWidth=\"medium\"\n          label=\"Medium maxWidth\"\n          value=\"Nam sed aliquet nunc. Pellentesque condimentum enim arcu.\"\n        />\n        <Value.String\n          label=\"Without a width\"\n          value=\"Nam sed aliquet nunc. Pellentesque condimentum enim arcu.\"\n        />\n      </Value.Composition>\n    </ComponentBox>\n  )\n}\n\nexport const CombineValuesInSummaryList = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-composition-summary-list-combined\">\n      <Value.SummaryList>\n        <Value.Composition label=\"Label\">\n          <Value.String value=\"value\" />\n          <Value.Number value={123} />\n        </Value.Composition>\n      </Value.SummaryList>\n    </ComponentBox>\n  )\n}\n\nexport const WithSummaryList = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-composition-summary-list\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n          streetName: 'Øvraørnefjeddstakkslåttåveien',\n          streetNr: 9998,\n          streetId: 'H0301',\n          postalCode: '9713',\n          city: 'Russenes',\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList>\n            <Value.Composition label=\"Name\">\n              <Value.String path=\"/firstName\" />\n              <Value.String path=\"/lastName\" />\n            </Value.Composition>\n\n            <Value.Composition label=\"Street\">\n              <Value.String path=\"/streetName\" />\n              <Value.Number path=\"/streetNr\" />\n              <Value.String path=\"/streetId\" />\n            </Value.Composition>\n\n            <Value.Composition label=\"City\">\n              <Value.String path=\"/postalCode\" />\n              <Value.String path=\"/city\" />\n            </Value.Composition>\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithSummaryListGridLayout = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-composition-summary-list-grid\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n          streetName: 'Øvraørnefjeddstakkslåttåveien',\n          streetNr: 9998,\n          streetId: 'H0301',\n          postalCode: '9713',\n          city: 'Russenes',\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList layout=\"grid\">\n            <Value.Composition label=\"Name\">\n              <Value.Name.First path=\"/firstName\" />\n              <Value.Name.Last path=\"/lastName\" />\n            </Value.Composition>\n\n            <Value.Composition label=\"Street\">\n              <Value.String path=\"/streetName\" />\n              <Value.Number path=\"/streetNr\" />\n              <Value.String path=\"/streetId\" />\n            </Value.Composition>\n\n            <Value.PostalCodeAndCity\n              postalCode={{ path: '/postalCode' }}\n              city={{ path: '/city' }}\n            />\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithHelp = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-composition-help\">\n      <Flex.Stack>\n        <Value.Composition\n          label=\"Label with help\"\n          help={{\n            title: 'Hva betyr lånebeløp?',\n            content: 'Dette er hvor mye du har tenkt å låne totalt.',\n          }}\n        >\n          <Value.String value=\"value\" />\n          <Value.Number value={123} />\n        </Value.Composition>\n\n        <Form.Card>\n          <Value.SummaryList>\n            <Value.Composition\n              label=\"Label with help inside SummaryList\"\n              help={{\n                title: 'Hva betyr lånebeløp?',\n                content: 'Dette er hvor mye du har tenkt å låne totalt.',\n              }}\n            >\n              <Value.String value=\"value\" />\n              <Value.Number value={123} />\n            </Value.Composition>\n            <Value.String value=\"Another value\" />\n          </Value.SummaryList>\n        </Form.Card>\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n\nexport const Wrapping = () => {\n  const sixtyOneChars =\n    '0000000000000000000000000000000000000000000000000000000000000'\n  const sixtyOneCharsIncludingASpace =\n    '000000000000000000000000000000 000000000000000000000000000000'\n  const fiftyEightCharsIncludingASpace =\n    '00000000000000000000000000000000000000000000000000000000 0'\n  return (\n    <ComponentBox\n      scope={{\n        sixtyOneChars,\n        sixtyOneCharsIncludingASpace,\n        fiftyEightCharsIncludingASpace,\n      }}\n      data-visual-test=\"forms-value-composition-wrapping\"\n    >\n      <Flex.Stack>\n        <Form.Card>\n          <Form.SubHeading>\n            Breaking word with 61 characters\n          </Form.SubHeading>\n          <Value.Composition label={sixtyOneChars}>\n            <Value.String value={sixtyOneChars} />\n            <Value.String value={sixtyOneChars} />\n          </Value.Composition>\n          <Value.Composition\n            label={sixtyOneChars}\n            help={{ title: 'Help title', content: 'Help content' }}\n          >\n            <Value.String value={sixtyOneChars} />\n            <Value.String value={sixtyOneChars} />\n          </Value.Composition>\n        </Form.Card>\n        <Form.Card>\n          <Form.SubHeading>\n            Breaking a sentence of 61 characters that include a space\n          </Form.SubHeading>\n          <Value.Composition label={sixtyOneCharsIncludingASpace}>\n            <Value.String value={sixtyOneCharsIncludingASpace} />\n            <Value.String value={sixtyOneCharsIncludingASpace} />\n          </Value.Composition>\n          <Value.Composition\n            label={sixtyOneCharsIncludingASpace}\n            help={{ title: 'Help title', content: 'Help content' }}\n          >\n            <Value.String value={sixtyOneCharsIncludingASpace} />\n            <Value.String value={sixtyOneCharsIncludingASpace} />\n          </Value.Composition>\n        </Form.Card>\n        <Form.Card>\n          <Form.SubHeading>\n            Help button should not wrap alone\n          </Form.SubHeading>\n          <Value.Composition\n            label={fiftyEightCharsIncludingASpace}\n            help={{ title: 'Help title', content: 'Help content' }}\n          >\n            <Value.String value={'value'} />\n            <Value.String value={'value'} />\n          </Value.Composition>\n        </Form.Card>\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {VisibleWhenVisualTest} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.Basic) _missingMdxReference(\"Examples.Basic\", true);\n  if (!Examples.CombineValuesInSummaryList) _missingMdxReference(\"Examples.CombineValuesInSummaryList\", true);\n  if (!Examples.WidthComparison) _missingMdxReference(\"Examples.WidthComparison\", true);\n  if (!Examples.WithHelp) _missingMdxReference(\"Examples.WithHelp\", true);\n  if (!Examples.WithSummaryList) _missingMdxReference(\"Examples.WithSummaryList\", true);\n  if (!Examples.WithSummaryListGridLayout) _missingMdxReference(\"Examples.WithSummaryListGridLayout\", true);\n  if (!Examples.Wrapping) _missingMdxReference(\"Examples.Wrapping\", true);\n  if (!VisibleWhenVisualTest) _missingMdxReference(\"VisibleWhenVisualTest\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Basic usage\"\n    }), \"\\n\", _jsx(Examples.Basic, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"In SummaryList\"\n    }), \"\\n\", _jsx(Examples.CombineValuesInSummaryList, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inside a plain SummaryList\"\n    }), \"\\n\", _jsx(Examples.WithSummaryList, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inside a SummaryList with grid layout\"\n    }), \"\\n\", _jsx(Examples.WithSummaryListGridLayout, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Width comparison\"\n    }), \"\\n\", _jsx(Examples.WidthComparison, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With help\"\n    }), \"\\n\", _jsx(Examples.WithHelp, {}), \"\\n\", _jsx(VisibleWhenVisualTest, {\n      children: _jsx(Examples.Wrapping, {})\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/Value/Composition/info';\nimport Demos from 'Docs/uilib/extensions/forms/Value/Composition/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","a","pre","ul","li","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","className","wrapper","MDXLayout","Basic","ComponentBox","WidthComparison","CombineValuesInSummaryList","WithSummaryList","WithSummaryListGridLayout","WithHelp","Wrapping","scope","sixtyOneChars","sixtyOneCharsIncludingASpace","fiftyEightCharsIncludingASpace","h3","VisibleWhenVisualTest","Examples","_missingMdxReference","id","component","Error","Info","Demos"],"sourceRoot":""}