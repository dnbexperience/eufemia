{"version":3,"file":"component---src-docs-uilib-extensions-forms-value-composition-properties-mdx-3f3a131e8b8c7bb0f463.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/Composition/CompositionDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/Composition/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/ValueDocs.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../../../shared/types'\nimport { ValueProperties } from '../ValueDocs'\n\nconst { label, transformLabel } = ValueProperties\n\nexport const CompositionProperties: PropertiesTableProps = {\n  label,\n  transformLabel,\n  maxWidth: {\n    doc: 'Use `small`, `medium` or `large` for predefined standard max widths. Defaults to `auto`.',\n    type: 'string',\n    status: 'optional',\n  },\n  gap: {\n    doc: 'The gap between the different value blocks. Can be `xx-small`, `x-small`, `small`, `medium`, `large` or `false`. Defaults to `xx-small`.',\n    type: 'string',\n    status: 'optional',\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {CompositionProperties} from '@dnb/eufemia/src/extensions/forms/Value/Composition/CompositionDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: CompositionProperties\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td:not(.description) {\n    white-space: nowrap;\n  }\n`\n\nconst colors = {\n  type: {\n    default: 'var(--color-success-green)',\n    primitive: 'var(--color-success-green)',\n    string: 'var(--color-fire-red)',\n  },\n  value: {\n    default: 'var(--color-success-green)',\n    undefined: 'var(--color-black-55)',\n    string: 'var(--color-fire-red)',\n  },\n}\n\nexport const FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = isString(children)\n          ? colors.type.string\n          : isPrimitive(children)\n          ? colors.type.primitive\n          : colors.type.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n      case 'value': {\n        style.color = isString(children)\n          ? colors.value.string\n          : children === 'undefined' || children === 'null'\n          ? colors.value.undefined\n          : colors.value.default\n        style.background = 'none'\n        style.boxShadow = 'none'\n        break\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props || {})\n  const tableRows = Object.entries(props || {}).map(([key, props]) => {\n    if (!props) {\n      return null\n    }\n    const { type, defaultValue, doc, status } = props\n    if (omit && omit.includes(key)) {\n      return null\n    }\n\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode\n            variant=\"prop\"\n            strikethrough={status === 'deprecated'}\n          >\n            {formatName(camelCase ? toCamelCase(key) : key)}\n          </FormattedCode>\n        </Td>\n        <Td>\n          {(Array.isArray(type) ? type : [type])\n            .map((t) => {\n              if (typeof t === 'string') {\n                if (String(t).includes('{valueType}')) {\n                  if (Array.isArray(valueType)) {\n                    return valueType\n                      .map((t, i) => {\n                        return (\n                          <FormattedCode key={t + i} variant=\"type\">\n                            {t}\n                          </FormattedCode>\n                        )\n                      })\n                      .reduce((prev, curr) => (\n                        <>\n                          {prev} <br /> {curr}\n                        </>\n                      ))\n                  }\n\n                  t = valueType as string\n                }\n\n                return (\n                  <FormattedCode key={t} variant=\"type\">\n                    {t}\n                  </FormattedCode>\n                )\n              }\n            })\n            .reduce((prev, curr) => (\n              <>\n                {prev} <br /> {curr}\n              </>\n            ))}\n        </Td>\n        {showDefaultValue && (\n          <Td>\n            {defaultValue ? (\n              <FormattedCode variant=\"value\">{defaultValue}</FormattedCode>\n            ) : (\n              status === 'required' && 'REQUIRED'\n            )}\n          </Td>\n        )}\n        <Td className=\"description\">\n          {(!showDefaultValue || status === 'deprecated') && (\n            <em>({status}) </em>\n          )}\n          <ReactMarkdown components={components}>\n            {camelCase ? convertToCamelCase(doc, keys) : doc}\n          </ReactMarkdown>\n        </Td>\n      </Tr>\n    )\n  })\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th className=\"description\">Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\nfunction isString(str: string) {\n  return [\"'\", '\"', '`'].includes(str.substring(0, 1))\n}\n\nfunction isPrimitive(type: string) {\n  return [\n    'boolean',\n    'true',\n    'false',\n    'number',\n    'bigint',\n    'string',\n    'symbol',\n  ].includes(typeWithoutArray(type))\n}\n\nfunction typeWithoutArray(type: string) {\n  if (type.endsWith('[]')) {\n    return type.slice(0, -2)\n  } else if (type.startsWith('Array<') && type.endsWith('>')) {\n    return type.slice(6, -1)\n  }\n  return type\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nexport function formatName(name: string): React.ReactNode | string {\n  if (name.includes('[')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const ValueProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Value for the value component. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default value for the value component. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Field label to show above the displayed value.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  transformLabel: {\n    doc: 'Transforms the label before it gets displayed. Receives the label as the first parameter. The second parameter is a object containing the `convertJsxToString` function.',\n    type: 'function',\n    status: 'optional',\n  },\n  inheritLabel: {\n    doc: 'Use `true` to inherit the label from a visible (rendered) field with the same path.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  inheritVisibility: {\n    doc: 'Use `true` to inherit the visibility from a field with the same path. You can find more info in the [Value section](/uilib/extensions/forms/Value/#inherit-visibility-from-fields-based-on-path).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  showEmpty: {\n    doc: 'Shows the value even if it is empty.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  placeholder: {\n    doc: 'Text showing in place of the value if no value is given.',\n    type: 'string',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for this input is located in the source dataset.',\n    type: 'string',\n    status: 'optional',\n  },\n  inline: {\n    doc: 'For showing the value inline (not as a block element).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  maxWidth: {\n    doc: 'Use `auto` for no max-width (use browser default), `small`, `medium` or `large` for predefined standard max widths. Defaults to `large`.',\n    type: 'string',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the value component.',\n    type: 'function',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n"],"names":["label","transformLabel","ValueProperties","CompositionProperties","maxWidth","doc","type","status","gap","_createMdxContent","props","_components","Object","assign","h2","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","wrapper","MDXLayout","basicComponents","p","StyledTable","_styled","Table","target","name","styles","colors","default","primitive","string","undefined","FormattedCode","_ref","variant","strikethrough","style","rest","textDecoration","color","isString","includes","endsWith","slice","startsWith","typeWithoutArray","background","boxShadow","code","_ref2","valueType","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","defaultValue","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","i","reduce","prev","curr","className","ReactMarkdown","convertToCamelCase","Th","str","substring","forEach","replace","RegExp","value","labelSrOnly","inheritLabel","inheritVisibility","showEmpty","placeholder","path","inline","transformIn"],"sourceRoot":""}