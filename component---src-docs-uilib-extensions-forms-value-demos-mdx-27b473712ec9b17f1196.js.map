{"version":3,"file":"component---src-docs-uilib-extensions-forms-value-demos-mdx-27b473712ec9b17f1196.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/String/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/SummaryList/Examples.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {LabelAndValue} from './String/Examples';\nimport {DefaultLayout} from './SummaryList/Examples';\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.InheritLabel) _missingMdxReference(\"Examples.InheritLabel\", true);\n  if (!Examples.InheritVisibility) _missingMdxReference(\"Examples.InheritVisibility\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"String with label and value\"\n    }), \"\\n\", _jsx(LabelAndValue, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"SummaryList\"\n    }), \"\\n\", _jsx(DefaultLayout, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inherit visibility from fields\"\n    }), \"\\n\", _jsx(Examples.InheritVisibility, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inherit label\"\n    }), \"\\n\", _jsx(Examples.InheritLabel, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import React from 'react'\nimport ComponentBox from '../../../../../shared/tags/ComponentBox'\nimport { Field, Form, Value } from '@dnb/eufemia/src/extensions/forms'\nimport { Flex } from '@dnb/eufemia/src'\n\nexport const SummaryList = () => {\n  return (\n    <ComponentBox>\n      <Value.SummaryList>\n        <Value.String label=\"Foo\" value=\"value\" />\n        <Value.Number label=\"Bar\" value={123} />\n      </Value.SummaryList>\n    </ComponentBox>\n  )\n}\n\nexport const Composition = () => {\n  return (\n    <ComponentBox>\n      <Value.SummaryList>\n        <Value.String label=\"Foo\" value=\"value\" />\n        <Value.Composition label=\"Label\">\n          <Value.String value=\"value\" />\n          <Value.Number value={123} />\n        </Value.Composition>\n      </Value.SummaryList>\n    </ComponentBox>\n  )\n}\n\nexport const InheritLabel = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler data={{ myPath: 'My value' }}>\n        <Flex.Stack>\n          <Value.String path=\"/myPath\" inheritLabel />\n          <Field.String path=\"/myPath\" label=\"Inherited label\" />\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const InheritVisibility = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Flex.Stack>\n          <Field.Boolean\n            label=\"Show radio buttons\"\n            variant=\"button\"\n            path=\"/isVisible\"\n            defaultValue={true}\n          />\n\n          <Form.Visibility pathTrue=\"/isVisible\" animate>\n            <Field.Selection\n              label=\"Radio buttons\"\n              variant=\"radio\"\n              path=\"/myValue\"\n              defaultValue=\"foo\"\n            >\n              <Field.Option value=\"foo\" title=\"Foo\" />\n              <Field.Option value=\"bar\" title=\"Bar\" />\n            </Field.Selection>\n          </Form.Visibility>\n\n          <Value.Selection\n            path=\"/myValue\"\n            inheritLabel\n            inheritVisibility\n          />\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { P } from '@dnb/eufemia/src'\nimport { Value } from '@dnb/eufemia/src/extensions/forms'\n\nexport const Empty = () => {\n  return (\n    <ComponentBox>\n      <Value.String showEmpty />\n    </ComponentBox>\n  )\n}\n\nexport const Placeholder = () => {\n  return (\n    <ComponentBox>\n      <Value.String placeholder=\"The value was not filled in\" />\n    </ComponentBox>\n  )\n}\n\nexport const WithValue = () => {\n  return (\n    <ComponentBox>\n      <Value.String value=\"Text value\" />\n    </ComponentBox>\n  )\n}\n\nexport const Label = () => {\n  return (\n    <ComponentBox>\n      <Value.String label=\"Label text\" showEmpty />\n    </ComponentBox>\n  )\n}\n\nexport const LabelAndValue = () => {\n  return (\n    <ComponentBox>\n      <Value.String label=\"Label text\" value=\"Text value\" />\n    </ComponentBox>\n  )\n}\n\nexport const Inline = () => {\n  return (\n    <ComponentBox>\n      <P>\n        This is before the component{' '}\n        <Value.String value=\"Text value\" inline /> This is after the\n        component\n      </P>\n    </ComponentBox>\n  )\n}\n\nexport const WithHelp = () => {\n  return (\n    <ComponentBox>\n      <Value.String\n        label=\"Label text\"\n        value=\"Value text\"\n        help={{\n          title: 'Help title',\n          content: 'Help content.',\n        }}\n      />\n    </ComponentBox>\n  )\n}\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, Form, Value } from '@dnb/eufemia/src/extensions/forms'\nimport { Flex } from '@dnb/eufemia/src/components'\n\nexport const DefaultLayout = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-summary-list-default\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList>\n            <Value.Name.First path=\"/firstName\" />\n            <Value.Name.Last path=\"/lastName\" />\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const GridLayout = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-summary-list-grid\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList layout=\"grid\">\n            <Value.Name.First path=\"/firstName\" />\n            <Value.Name.Last path=\"/lastName\" />\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const HorizontalLayout = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-summary-list-horizontal\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList layout=\"horizontal\">\n            <Value.Name.First path=\"/firstName\" />\n            <Value.Name.Last path=\"/lastName\" />\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const DefaultLayoutWithHelp = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-summary-list-default-with-help\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n          nickName: 'JD',\n          streetName: 'Osloveien',\n          streetNr: 12,\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList>\n            <Value.Name.First\n              path=\"/firstName\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            />\n            <Value.Name.Last path=\"/lastName\" />\n            <Value.String\n              path=\"/nickName\"\n              label=\"kallenavn\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            />\n            <Value.Composition\n              label=\"Street\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            >\n              <Value.String path=\"/streetName\" />\n              <Value.Number\n                path=\"/streetNr\"\n                help={{\n                  open: true,\n                  title: 'Help title',\n                  content: 'Help content',\n                }}\n              />\n            </Value.Composition>\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const GridLayoutWithHelp = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-summary-list-grid-with-help\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n          nickName: 'JD',\n          streetName: 'Osloveien',\n          streetNr: 12,\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList layout=\"grid\">\n            <Value.Name.First\n              path=\"/firstName\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            />\n            <Value.Name.Last path=\"/lastName\" />\n            <Value.String\n              path=\"/nickName\"\n              label=\"kallenavn\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            />\n            <Value.Composition\n              label=\"Street\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            >\n              <Value.String path=\"/streetName\" />\n              <Value.Number\n                path=\"/streetNr\"\n                help={{\n                  open: true,\n                  title: 'Help title',\n                  content: 'Help content',\n                }}\n              />\n            </Value.Composition>\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const HorizontalLayoutWithHelp = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-summary-list-horizontal-with-help\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n          nickName: 'JD',\n          streetName: 'Osloveien',\n          streetNr: 12,\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList layout=\"horizontal\">\n            <Value.Name.First\n              path=\"/firstName\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            />\n            <Value.Name.Last path=\"/lastName\" />\n            <Value.String\n              path=\"/nickName\"\n              label=\"kallenavn\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            />\n            <Value.Composition\n              label=\"Street\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            >\n              <Value.String path=\"/streetName\" />\n              <Value.Number\n                path=\"/streetNr\"\n                help={{\n                  open: true,\n                  title: 'Help title',\n                  content: 'Help content',\n                }}\n              />\n            </Value.Composition>\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const CombinedLayout = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-summary-list-combined\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n          streetName: 'Osloveien',\n          streetNr: 12,\n          postalCode: '1234',\n          city: 'Oslo',\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList>\n            <Value.Name.First path=\"/firstName\" />\n            <Value.Name.Last path=\"/lastName\" />\n\n            <Value.Composition label=\"Street\">\n              <Value.String path=\"/streetName\" />\n              <Value.Number path=\"/streetNr\" />\n            </Value.Composition>\n\n            <Value.Composition label=\"City\">\n              <Value.String path=\"/postalCode\" />\n              <Value.String path=\"/city\" />\n            </Value.Composition>\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport function InheritVisibility() {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Form.Card>\n          <Field.Boolean\n            variant=\"button\"\n            path=\"/isVisible\"\n            defaultValue={true}\n          />\n\n          <Form.Visibility pathTrue=\"/isVisible\" animate>\n            <Field.Name.First path=\"/foo\" defaultValue=\"foo\" />\n            <Field.Name.Last path=\"/bar\" defaultValue=\"bar\" />\n          </Form.Visibility>\n\n          <Value.SummaryList inheritVisibility>\n            <Value.Name.First path=\"/foo\" />\n            <Value.Name.First path=\"/bar\" />\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport function InheritLabel() {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Form.Card>\n          <Field.String path=\"/foo\" defaultValue=\"foo\" label=\"foo label\" />\n          <Field.String path=\"/bar\" defaultValue=\"bar\" label=\"bar label\" />\n\n          <Value.SummaryList inheritLabel>\n            <Value.String path=\"/foo\" />\n            <Value.String path=\"/bar\" />\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const HorizontalLayoutWithoutLabel = () => (\n  <ComponentBox data-visual-test=\"forms-value-summary-empty-label\">\n    <Value.SummaryList layout=\"horizontal\">\n      <Value.String value=\"foo\" label=\"Foo\" />\n      <Value.String value=\"bar\" />\n      <Value.String value=\"baz\" label=\"Baz\" />\n    </Value.SummaryList>\n  </ComponentBox>\n)\n\nexport const WithHelpInInfoOverlay = () => (\n  <ComponentBox data-visual-test=\"forms-value-summary-with-help-in-info-overlay\">\n    <Form.Handler\n      data={{\n        firstName: 'John',\n        lastName: 'Doe',\n      }}\n    >\n      <Form.InfoOverlay>\n        <Value.SummaryList>\n          <Value.Name.First\n            path=\"/firstName\"\n            help={{\n              title: 'Help title',\n              content: 'Help content.',\n            }}\n          />\n          <Value.Name.Last\n            path=\"/lastName\"\n            help={{\n              title: 'Help title',\n              content: 'Help content.',\n            }}\n          />\n        </Value.SummaryList>\n      </Form.InfoOverlay>\n    </Form.Handler>\n  </ComponentBox>\n)\n\nexport function AnimatedVisibility() {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Flex.Stack>\n          <Field.Boolean\n            label=\"Make second field visible when toggled\"\n            path=\"/toggleValue\"\n            variant=\"checkbox\"\n          />\n\n          <Form.Card>\n            <Value.SummaryList>\n              <Value.String label=\"Label\" value=\"First field\" />\n\n              <Form.Visibility pathTrue=\"/toggleValue\" animate>\n                <Value.String label=\"Label\" value=\"Second field\" />\n              </Form.Visibility>\n            </Value.SummaryList>\n          </Form.Card>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","h3","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","children","_jsx","LabelAndValue","DefaultLayout","id","component","Error","wrapper","MDXLayout","SummaryList","ComponentBox","Composition","InheritLabel","InheritVisibility","Empty","Placeholder","WithValue","Label","Inline","WithHelp","GridLayout","HorizontalLayout","DefaultLayoutWithHelp","GridLayoutWithHelp","HorizontalLayoutWithHelp","CombinedLayout","HorizontalLayoutWithoutLabel","WithHelpInInfoOverlay","AnimatedVisibility"],"sourceRoot":""}