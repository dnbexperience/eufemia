{"version":3,"file":"component---src-docs-uilib-extensions-forms-value-number-properties-mdx-f3759a7e8a55f2f0f0e7.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/Number/properties.mdx","webpack://dnb-design-system-portal/./src/shared/parts/PropertiesTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/ValueDocs.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {ValueProperties} from '@dnb/eufemia/src/extensions/forms/Value/ValueDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    a: \"a\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: ValueProperties,\n      valueType: \"number\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Value-specific props\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It inherits all the \", _jsx(_components.a, {\n        href: \"/uilib/components/number-format/properties/\",\n        children: \"properties\"\n      }), \" from the \", _jsx(_components.code, {\n        children: \"NumberFormat\"\n      }), \" component. All snake_case props are converted to camelCase.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ReactMarkdown from 'react-markdown'\nimport styled from '@emotion/styled'\nimport { Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { PropertiesTableProps } from '@dnb/eufemia/src/shared/types'\nimport { toCamelCase } from '@dnb/eufemia/src/shared/component-helper'\nimport { basicComponents } from '../tags'\n\nconst components = {\n  ...basicComponents,\n  p: (props) => <span {...props} />,\n}\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nconst colorValue = 'var(--color-success-green)'\nconst colorString = 'var(--color-fire-red)'\nconst colorType = 'var(--color-violet)'\nconst colorUndefined = 'var(--color-black-55)'\n\nconst FormattedCode = ({\n  variant,\n  strikethrough,\n  children,\n  style = {},\n  ...rest\n}: {\n  variant?: 'prop' | 'type' | 'value'\n  strikethrough?: boolean\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) => {\n  if (strikethrough) {\n    style.textDecoration = 'line-through'\n  }\n  if (typeof children === 'string') {\n    switch (variant) {\n      case 'prop': {\n        break // add prop name styling at a future date with color 'var(--color-indigo)'\n      }\n      case 'type': {\n        style.color = children.startsWith(`'`) ? colorString : colorType\n        // falls through\n      }\n      case 'value': {\n        style.color = children.startsWith(`'`)\n          ? colorString\n          : children === 'undefined'\n          ? colorUndefined\n          : colorValue\n        // falls through\n      }\n      default: {\n        style.background = 'none'\n        style.boxShadow = 'none'\n      }\n    }\n  }\n  return components.code({ children, style, ...rest })\n}\n\nexport default function PropertiesTable({\n  props,\n  valueType = 'string',\n  camelCase,\n  omit,\n  showDefaultValue = false,\n}: {\n  props: PropertiesTableProps\n  valueType?: unknown\n  camelCase?: boolean\n  omit?: string[]\n  showDefaultValue: boolean\n}) {\n  const keys = Object.keys(props)\n  const tableRows = Object.entries(props).map(\n    ([key, { type, defaultValue, doc, status }]) => {\n      if (omit && omit.includes(key)) {\n        return null\n      }\n\n      return (\n        <Tr key={key}>\n          <Td>\n            <FormattedCode\n              variant=\"prop\"\n              strikethrough={status === 'deprecated'}\n            >\n              {formatName(camelCase ? toCamelCase(key) : key)}\n            </FormattedCode>\n          </Td>\n          <Td>\n            {(Array.isArray(type) ? type : [type])\n              .map((t) => {\n                if (typeof t === 'string') {\n                  if (String(t).includes('{valueType}')) {\n                    t = valueType as string\n                  }\n                  return (\n                    <FormattedCode key={t} variant=\"type\">\n                      {t}\n                    </FormattedCode>\n                  )\n                }\n              })\n              .reduce((prev, curr) => (\n                <>\n                  {prev} <br /> {curr}\n                </>\n              ))}\n          </Td>\n          {showDefaultValue && (\n            <Td>\n              {defaultValue ? (\n                <FormattedCode variant=\"value\">\n                  {defaultValue}\n                </FormattedCode>\n              ) : (\n                status === 'required' && 'REQUIRED'\n              )}\n            </Td>\n          )}\n          <Td>\n            {(!showDefaultValue || status === 'deprecated') && (\n              <em>({status}) </em>\n            )}\n            <ReactMarkdown components={components}>\n              {camelCase ? convertToCamelCase(doc, keys) : doc}\n            </ReactMarkdown>\n          </Td>\n        </Tr>\n      )\n    },\n  )\n\n  return (\n    <Table.ScrollView>\n      <StyledTable>\n        <thead>\n          <Tr>\n            <Th>Property</Th>\n            <Th>Type</Th>\n            {showDefaultValue && <Th>Default value</Th>}\n            <Th>Description</Th>\n          </Tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n      </StyledTable>\n    </Table.ScrollView>\n  )\n}\n\n// Replace existing properties inside a string. Use the keys from the props object to find and replace the values\nfunction convertToCamelCase(doc: string, keys: string[]) {\n  keys.forEach((key) => {\n    doc = doc.replace(new RegExp(key, 'g'), toCamelCase(key))\n  })\n  return doc\n}\n\nfunction formatName(name: string): React.ReactNode | string {\n  if (name.includes('/')) {\n    return <ReactMarkdown components={components}>{name}</ReactMarkdown>\n  }\n\n  return name\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const ValueProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the input.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Field label to show above the data value.',\n    type: 'string',\n    status: 'optional',\n  },\n  showEmpty: {\n    doc: 'Text showing in place of the value if no value is given.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  placeholder: {\n    doc: 'Text showing in place of the value if no value is given.',\n    type: 'string',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for this input is located in the source dataset.',\n    type: 'string',\n    status: 'optional',\n  },\n  inline: {\n    doc: 'For showing the value inline (not as a block element).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  maxWidth: {\n    doc: 'Use `auto` for no max-width (use browser default), `small`, `medium` or `large` for predefined standard max widths. Defaults to `large`.',\n    type: 'string',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the value component.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","h3","p","a","code","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","ValueProperties","valueType","href","wrapper","MDXLayout","basicComponents","StyledTable","_styled","Table","target","name","styles","colorString","FormattedCode","_ref","variant","strikethrough","style","rest","textDecoration","color","startsWith","background","boxShadow","_ref2","camelCase","omit","showDefaultValue","keys","tableRows","entries","map","_ref3","key","type","defaultValue","doc","status","includes","Tr","Td","formatName","toCamelCase","Array","isArray","t","String","reduce","prev","curr","ReactMarkdown","convertToCamelCase","Th","forEach","replace","RegExp","value","label","showEmpty","placeholder","path","inline","maxWidth","transformIn"],"sourceRoot":""}