{"version":3,"file":"component---src-docs-uilib-extensions-forms-value-summary-list-demos-mdx-a6281f94f7b4cab8da16.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/SummaryList/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/SummaryList/Examples.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    a: \"a\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {VisibleWhenVisualTest} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.AnimatedVisibility) _missingMdxReference(\"Examples.AnimatedVisibility\", true);\n  if (!Examples.CombinedLayout) _missingMdxReference(\"Examples.CombinedLayout\", true);\n  if (!Examples.DefaultLayout) _missingMdxReference(\"Examples.DefaultLayout\", true);\n  if (!Examples.DefaultLayoutWithHelp) _missingMdxReference(\"Examples.DefaultLayoutWithHelp\", true);\n  if (!Examples.GridLayout) _missingMdxReference(\"Examples.GridLayout\", true);\n  if (!Examples.GridLayoutWithHelp) _missingMdxReference(\"Examples.GridLayoutWithHelp\", true);\n  if (!Examples.HorizontalLayout) _missingMdxReference(\"Examples.HorizontalLayout\", true);\n  if (!Examples.HorizontalLayoutWithHelp) _missingMdxReference(\"Examples.HorizontalLayoutWithHelp\", true);\n  if (!Examples.HorizontalLayoutWithoutLabel) _missingMdxReference(\"Examples.HorizontalLayoutWithoutLabel\", true);\n  if (!Examples.InheritLabel) _missingMdxReference(\"Examples.InheritLabel\", true);\n  if (!Examples.InheritVisibility) _missingMdxReference(\"Examples.InheritVisibility\", true);\n  if (!VisibleWhenVisualTest) _missingMdxReference(\"VisibleWhenVisualTest\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"With a default layout\"\n    }), \"\\n\", _jsx(Examples.DefaultLayout, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With a Horizontal layout\"\n    }), \"\\n\", _jsx(Examples.HorizontalLayout, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With a grid layout\"\n    }), \"\\n\", _jsx(Examples.GridLayout, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With a combined layout\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Value/Composition/\",\n        children: \"Value.Composition\"\n      }), \" to combine two or more \", _jsx(_components.code, {\n        children: \"Value.*\"\n      }), \" components into one.\"]\n    }), \"\\n\", _jsx(Examples.CombinedLayout, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inherit visibility\"\n    }), \"\\n\", _jsx(Examples.InheritVisibility, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inherit label\"\n    }), \"\\n\", _jsx(Examples.InheritLabel, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With animated Visibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Below is a \", _jsx(_components.code, {\n        children: \"SummaryList\"\n      }), \" containing two \", _jsx(_components.code, {\n        children: \"Value.*\"\n      }), \" components. The second value will be shown and hidden with animation using the \", _jsx(_components.code, {\n        children: \"Form.Visibility\"\n      }), \" component.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To maintain the semantic structure of the \", _jsx(_components.code, {\n        children: \"dl\"\n      }), \" element, the \", _jsx(_components.code, {\n        children: \"Form.Visibility\"\n      }), \" component animates the content of the \", _jsx(_components.code, {\n        children: \"dl\"\n      }), \" element instead of wrapping it in a div element.\"]\n    }), \"\\n\", _jsx(Examples.AnimatedVisibility, {}), \"\\n\", _jsxs(VisibleWhenVisualTest, {\n      children: [_jsx(Examples.HorizontalLayoutWithoutLabel, {}), _jsx(Examples.DefaultLayoutWithHelp, {}), _jsx(Examples.HorizontalLayoutWithHelp, {}), _jsx(Examples.GridLayoutWithHelp, {})]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, Form, Value } from '@dnb/eufemia/src/extensions/forms'\nimport { Flex } from '@dnb/eufemia/src/components'\n\nexport const DefaultLayout = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-summary-list-default\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList>\n            <Value.Name.First path=\"/firstName\" />\n            <Value.Name.Last path=\"/lastName\" />\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const GridLayout = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-summary-list-grid\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList layout=\"grid\">\n            <Value.Name.First path=\"/firstName\" />\n            <Value.Name.Last path=\"/lastName\" />\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const HorizontalLayout = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-summary-list-horizontal\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList layout=\"horizontal\">\n            <Value.Name.First path=\"/firstName\" />\n            <Value.Name.Last path=\"/lastName\" />\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const DefaultLayoutWithHelp = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-summary-list-default-with-help\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n          nickName: 'JD',\n          streetName: 'Osloveien',\n          streetNr: 12,\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList>\n            <Value.Name.First\n              path=\"/firstName\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            />\n            <Value.Name.Last path=\"/lastName\" />\n            <Value.String\n              path=\"/nickName\"\n              label=\"kallenavn\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            />\n            <Value.Composition\n              label=\"Street\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            >\n              <Value.String path=\"/streetName\" />\n              <Value.Number\n                path=\"/streetNr\"\n                help={{\n                  open: true,\n                  title: 'Help title',\n                  content: 'Help content',\n                }}\n              />\n            </Value.Composition>\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const GridLayoutWithHelp = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-summary-list-grid-with-help\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n          nickName: 'JD',\n          streetName: 'Osloveien',\n          streetNr: 12,\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList layout=\"grid\">\n            <Value.Name.First\n              path=\"/firstName\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            />\n            <Value.Name.Last path=\"/lastName\" />\n            <Value.String\n              path=\"/nickName\"\n              label=\"kallenavn\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            />\n            <Value.Composition\n              label=\"Street\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            >\n              <Value.String path=\"/streetName\" />\n              <Value.Number\n                path=\"/streetNr\"\n                help={{\n                  open: true,\n                  title: 'Help title',\n                  content: 'Help content',\n                }}\n              />\n            </Value.Composition>\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const HorizontalLayoutWithHelp = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-summary-list-horizontal-with-help\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n          nickName: 'JD',\n          streetName: 'Osloveien',\n          streetNr: 12,\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList layout=\"horizontal\">\n            <Value.Name.First\n              path=\"/firstName\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            />\n            <Value.Name.Last path=\"/lastName\" />\n            <Value.String\n              path=\"/nickName\"\n              label=\"kallenavn\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            />\n            <Value.Composition\n              label=\"Street\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            >\n              <Value.String path=\"/streetName\" />\n              <Value.Number\n                path=\"/streetNr\"\n                help={{\n                  open: true,\n                  title: 'Help title',\n                  content: 'Help content',\n                }}\n              />\n            </Value.Composition>\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const CombinedLayout = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-summary-list-combined\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n          streetName: 'Osloveien',\n          streetNr: 12,\n          postalCode: '1234',\n          city: 'Oslo',\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList>\n            <Value.Name.First path=\"/firstName\" />\n            <Value.Name.Last path=\"/lastName\" />\n\n            <Value.Composition label=\"Street\">\n              <Value.String path=\"/streetName\" />\n              <Value.Number path=\"/streetNr\" />\n            </Value.Composition>\n\n            <Value.Composition label=\"City\">\n              <Value.String path=\"/postalCode\" />\n              <Value.String path=\"/city\" />\n            </Value.Composition>\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport function InheritVisibility() {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Form.Card>\n          <Field.Boolean\n            variant=\"button\"\n            path=\"/isVisible\"\n            defaultValue={true}\n          />\n\n          <Form.Visibility pathTrue=\"/isVisible\" animate>\n            <Field.Name.First path=\"/foo\" defaultValue=\"foo\" />\n            <Field.Name.Last path=\"/bar\" defaultValue=\"bar\" />\n          </Form.Visibility>\n\n          <Value.SummaryList inheritVisibility>\n            <Value.Name.First path=\"/foo\" />\n            <Value.Name.First path=\"/bar\" />\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport function InheritLabel() {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Form.Card>\n          <Field.String path=\"/foo\" defaultValue=\"foo\" label=\"foo label\" />\n          <Field.String path=\"/bar\" defaultValue=\"bar\" label=\"bar label\" />\n\n          <Value.SummaryList inheritLabel>\n            <Value.String path=\"/foo\" />\n            <Value.String path=\"/bar\" />\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const HorizontalLayoutWithoutLabel = () => (\n  <ComponentBox data-visual-test=\"forms-value-summary-empty-label\">\n    <Value.SummaryList layout=\"horizontal\">\n      <Value.String value=\"foo\" label=\"Foo\" />\n      <Value.String value=\"bar\" />\n      <Value.String value=\"baz\" label=\"Baz\" />\n    </Value.SummaryList>\n  </ComponentBox>\n)\n\nexport function AnimatedVisibility() {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Flex.Stack>\n          <Field.Boolean\n            label=\"Make second field visible when toggled\"\n            path=\"/toggleValue\"\n            variant=\"checkbox\"\n          />\n\n          <Form.Card>\n            <Value.SummaryList>\n              <Value.String label=\"Label\" value=\"First field\" />\n\n              <Form.Visibility pathTrue=\"/toggleValue\" animate>\n                <Value.String label=\"Label\" value=\"Second field\" />\n              </Form.Visibility>\n            </Value.SummaryList>\n          </Form.Card>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","h3","p","a","code","_provideComponents","components","VisibleWhenVisualTest","Examples","_missingMdxReference","_jsxs","_Fragment","children","_jsx","href","id","component","Error","wrapper","MDXLayout","DefaultLayout","ComponentBox","GridLayout","HorizontalLayout","DefaultLayoutWithHelp","GridLayoutWithHelp","HorizontalLayoutWithHelp","CombinedLayout","InheritVisibility","InheritLabel","HorizontalLayoutWithoutLabel","AnimatedVisibility"],"sourceRoot":""}