{"version":3,"file":"component---src-docs-uilib-extensions-forms-value-summary-list-mdx-5ab7212cd42c32e33c0c.js","mappings":"+MAKA,SAASA,EAAkBC,GACzB,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKC,EAAAA,QAAM,CAAC,GAAI,MAAMD,EAAAA,EAAAA,KAAKE,EAAAA,QAAO,CAAC,KAElD,CAOA,UANA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOO,QAASC,GAAaC,OAAOC,OAAO,CAAC,GAAGC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOJ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWC,OAAOC,OAAO,CAAC,EAAGV,EAAO,CAC1DG,UAAUC,EAAAA,EAAAA,KAAKL,EAAmBC,MAC9BD,GACR,C,oECXA,SAASA,EAAkBC,GACzB,MAAMa,EAAcJ,OAAOC,OAAO,CAChCI,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,EAAG,IACHC,KAAM,SACLP,EAAAA,EAAAA,MAAsBX,EAAMY,aAAa,sBAACO,GAAyBN,EAetE,OAdKO,GAAUC,EAAqB,YAAY,GAC3CD,EAAAA,oBAA6BC,EAAqB,+BAA+B,GACjFD,EAAAA,gBAAyBC,EAAqB,2BAA2B,GACzED,EAAAA,eAAwBC,EAAqB,0BAA0B,GACvED,EAAAA,uBAAgCC,EAAqB,kCAAkC,GACvFD,EAAAA,YAAqBC,EAAqB,uBAAuB,GACjED,EAAAA,oBAA6BC,EAAqB,+BAA+B,GACjFD,EAAAA,kBAA2BC,EAAqB,6BAA6B,GAC7ED,EAAAA,0BAAmCC,EAAqB,qCAAqC,GAC7FD,EAAAA,8BAAuCC,EAAqB,yCAAyC,GACrGD,EAAAA,cAAuBC,EAAqB,yBAAyB,GACrED,EAAAA,mBAA4BC,EAAqB,8BAA8B,GAC/ED,EAAAA,uBAAgCC,EAAqB,kCAAkC,GACvFF,GAAuBE,EAAqB,yBAAyB,IACnEpB,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKS,EAAYC,GAAI,CAC9BX,SAAU,UACR,MAAMC,EAAAA,EAAAA,KAAKS,EAAYE,GAAI,CAC7BZ,SAAU,0BACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAAA,cAAwB,CAAC,GAAI,MAAMhB,EAAAA,EAAAA,KAAKS,EAAYE,GAAI,CACrEZ,SAAU,6BACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAAA,iBAA2B,CAAC,GAAI,MAAMhB,EAAAA,EAAAA,KAAKS,EAAYE,GAAI,CACxEZ,SAAU,uBACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAAA,WAAqB,CAAC,GAAI,MAAMhB,EAAAA,EAAAA,KAAKS,EAAYE,GAAI,CAClEZ,SAAU,2BACR,MAAMF,EAAAA,EAAAA,MAAMY,EAAYG,EAAG,CAC7Bb,SAAU,CAAC,UAAUC,EAAAA,EAAAA,KAAKS,EAAYI,EAAG,CACvCK,KAAM,6CACNnB,SAAU,sBACR,4BAA4BC,EAAAA,EAAAA,KAAKS,EAAYK,KAAM,CACrDf,SAAU,YACR,2BACF,MAAMC,EAAAA,EAAAA,KAAKgB,EAAAA,eAAyB,CAAC,GAAI,MAAMhB,EAAAA,EAAAA,KAAKS,EAAYE,GAAI,CACtEZ,SAAU,uBACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAAA,kBAA4B,CAAC,GAAI,MAAMhB,EAAAA,EAAAA,KAAKS,EAAYE,GAAI,CACzEZ,SAAU,kBACR,MAAMC,EAAAA,EAAAA,KAAKgB,EAAAA,aAAuB,CAAC,GAAI,MAAMhB,EAAAA,EAAAA,KAAKS,EAAYE,GAAI,CACpEZ,SAAU,6BACR,MAAMF,EAAAA,EAAAA,MAAMY,EAAYG,EAAG,CAC7Bb,SAAU,CAAC,eAAeC,EAAAA,EAAAA,KAAKS,EAAYK,KAAM,CAC/Cf,SAAU,gBACR,oBAAoBC,EAAAA,EAAAA,KAAKS,EAAYK,KAAM,CAC7Cf,SAAU,YACR,oFAAoFC,EAAAA,EAAAA,KAAKS,EAAYK,KAAM,CAC7Gf,SAAU,oBACR,iBACF,MAAMF,EAAAA,EAAAA,MAAMY,EAAYG,EAAG,CAC7Bb,SAAU,CAAC,8CAA8CC,EAAAA,EAAAA,KAAKS,EAAYK,KAAM,CAC9Ef,SAAU,OACR,kBAAkBC,EAAAA,EAAAA,KAAKS,EAAYK,KAAM,CAC3Cf,SAAU,oBACR,2CAA2CC,EAAAA,EAAAA,KAAKS,EAAYK,KAAM,CACpEf,SAAU,OACR,uDACF,MAAMC,EAAAA,EAAAA,KAAKgB,EAAAA,mBAA6B,CAAC,GAAI,MAAMnB,EAAAA,EAAAA,MAAMkB,EAAuB,CAClFhB,SAAU,EAACC,EAAAA,EAAAA,KAAKgB,EAAAA,6BAAuC,CAAC,IAAIhB,EAAAA,EAAAA,KAAKgB,EAAAA,sBAAgC,CAAC,IAAIhB,EAAAA,EAAAA,KAAKgB,EAAAA,yBAAmC,CAAC,IAAIhB,EAAAA,EAAAA,KAAKgB,EAAAA,mBAA6B,CAAC,IAAIhB,EAAAA,EAAAA,KAAKgB,EAAAA,sBAAgC,CAAC,QAGtO,CAQA,SAASC,EAAqBE,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,CAHA,UANA,SAAoBvB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOO,QAASC,GAAaC,OAAOC,OAAO,CAAC,GAAGC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOJ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWC,OAAOC,OAAO,CAAC,EAAGV,EAAO,CAC1DG,UAAUC,EAAAA,EAAAA,KAAKL,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,yDCzEA,SAASD,EAAkBC,GACzB,MAAMa,EAAcJ,OAAOC,OAAO,CAChCI,GAAI,KACJE,EAAG,IACHE,KAAM,OACNQ,IAAK,QACJf,EAAAA,EAAAA,MAAsBX,EAAMY,YAC/B,OAAOX,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKS,EAAYC,GAAI,CAC9BX,SAAU,gBACR,MAAMF,EAAAA,EAAAA,MAAMY,EAAYG,EAAG,CAC7Bb,SAAU,CAAC,QAAQC,EAAAA,EAAAA,KAAKS,EAAYK,KAAM,CACxCf,SAAU,sBACR,wCAAwCC,EAAAA,EAAAA,KAAKS,EAAYK,KAAM,CACjEf,SAAU,YACR,8FACF,MAAMC,EAAAA,EAAAA,KAAKS,EAAYa,IAAK,CAC9BvB,UAAUC,EAAAA,EAAAA,KAAKS,EAAYK,KAAM,CAC/BS,UAAW,eACXxB,SAAU,yPAIlB,CAOA,UANA,SAAoBH,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOO,QAASC,GAAaC,OAAOC,OAAO,CAAC,GAAGC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOJ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWC,OAAOC,OAAO,CAAC,EAAGV,EAAO,CAC1DG,UAAUC,EAAAA,EAAAA,KAAKL,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,8hBC5BO,MAAM4B,EAAgBA,KAC3BxB,EAAAA,EAAAA,KAAAyB,EAAAA,EAAA,uDAAA1B,SAAA,4UAqBW2B,EAAaA,KACxB1B,EAAAA,EAAAA,KAAAyB,EAAAA,EAAA,oDAAA1B,SAAA,0VAqBW4B,EAAmBA,KAC9B3B,EAAAA,EAAAA,KAAAyB,EAAAA,EAAA,0DAAA1B,SAAA,gWAqBW6B,EAAwBA,KACnC5B,EAAAA,EAAAA,KAAAyB,EAAAA,EAAA,iEAAA1B,SAAA,6qCA0DW8B,EAAqBA,KAChC7B,EAAAA,EAAAA,KAAAyB,EAAAA,EAAA,8DAAA1B,SAAA,6rCA0DW+B,EAA2BA,KACtC9B,EAAAA,EAAAA,KAAAyB,EAAAA,EAAA,oEAAA1B,SAAA,msCA0DWgC,EAAiBA,KAC5B/B,EAAAA,EAAAA,KAAAyB,EAAAA,EAAA,wDAAA1B,SAAA,yuBAmCK,SAASiC,IACd,OAAAhC,EAAAA,EAAAA,KAAAyB,EAAAA,EAAA,CAAA1B,SAAA,ugBAuBF,CAEO,SAASkC,IACd,OAAAjC,EAAAA,EAAAA,KAAAyB,EAAAA,EAAA,CAAA1B,SAAA,4VAeF,CAEO,MAAMmC,EAA+BA,KAAAlC,EAAAA,EAAAA,KAAAyB,EAAAA,EAAA,sDAAA1B,SAAA,4LAU/BoC,EAAwBA,KAAAnC,EAAAA,EAAAA,KAAAyB,EAAAA,EAAA,oEAAA1B,SAAA,ygBA8B9B,SAASqC,IACd,OAAApC,EAAAA,EAAAA,KAAAyB,EAAAA,EAAA,CAAA1B,SAAA,6fAuBF,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/SummaryList.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/SummaryList/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/SummaryList/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/SummaryList/Examples.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/Value/SummaryList/info';\nimport Demos from 'Docs/uilib/extensions/forms/Value/SummaryList/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    a: \"a\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {VisibleWhenVisualTest} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.AnimatedVisibility) _missingMdxReference(\"Examples.AnimatedVisibility\", true);\n  if (!Examples.CombinedLayout) _missingMdxReference(\"Examples.CombinedLayout\", true);\n  if (!Examples.DefaultLayout) _missingMdxReference(\"Examples.DefaultLayout\", true);\n  if (!Examples.DefaultLayoutWithHelp) _missingMdxReference(\"Examples.DefaultLayoutWithHelp\", true);\n  if (!Examples.GridLayout) _missingMdxReference(\"Examples.GridLayout\", true);\n  if (!Examples.GridLayoutWithHelp) _missingMdxReference(\"Examples.GridLayoutWithHelp\", true);\n  if (!Examples.HorizontalLayout) _missingMdxReference(\"Examples.HorizontalLayout\", true);\n  if (!Examples.HorizontalLayoutWithHelp) _missingMdxReference(\"Examples.HorizontalLayoutWithHelp\", true);\n  if (!Examples.HorizontalLayoutWithoutLabel) _missingMdxReference(\"Examples.HorizontalLayoutWithoutLabel\", true);\n  if (!Examples.InheritLabel) _missingMdxReference(\"Examples.InheritLabel\", true);\n  if (!Examples.InheritVisibility) _missingMdxReference(\"Examples.InheritVisibility\", true);\n  if (!Examples.WithHelpInInfoOverlay) _missingMdxReference(\"Examples.WithHelpInInfoOverlay\", true);\n  if (!VisibleWhenVisualTest) _missingMdxReference(\"VisibleWhenVisualTest\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"With a default layout\"\n    }), \"\\n\", _jsx(Examples.DefaultLayout, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With a Horizontal layout\"\n    }), \"\\n\", _jsx(Examples.HorizontalLayout, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With a grid layout\"\n    }), \"\\n\", _jsx(Examples.GridLayout, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With a combined layout\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Using \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Value/Composition/\",\n        children: \"Value.Composition\"\n      }), \" to combine two or more \", _jsx(_components.code, {\n        children: \"Value.*\"\n      }), \" components into one.\"]\n    }), \"\\n\", _jsx(Examples.CombinedLayout, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inherit visibility\"\n    }), \"\\n\", _jsx(Examples.InheritVisibility, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inherit label\"\n    }), \"\\n\", _jsx(Examples.InheritLabel, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With animated Visibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Below is a \", _jsx(_components.code, {\n        children: \"SummaryList\"\n      }), \" containing two \", _jsx(_components.code, {\n        children: \"Value.*\"\n      }), \" components. The second value will be shown and hidden with animation using the \", _jsx(_components.code, {\n        children: \"Form.Visibility\"\n      }), \" component.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To maintain the semantic structure of the \", _jsx(_components.code, {\n        children: \"dl\"\n      }), \" element, the \", _jsx(_components.code, {\n        children: \"Form.Visibility\"\n      }), \" component animates the content of the \", _jsx(_components.code, {\n        children: \"dl\"\n      }), \" element instead of wrapping it in a div element.\"]\n    }), \"\\n\", _jsx(Examples.AnimatedVisibility, {}), \"\\n\", _jsxs(VisibleWhenVisualTest, {\n      children: [_jsx(Examples.HorizontalLayoutWithoutLabel, {}), _jsx(Examples.DefaultLayoutWithHelp, {}), _jsx(Examples.HorizontalLayoutWithHelp, {}), _jsx(Examples.GridLayoutWithHelp, {}), _jsx(Examples.WithHelpInInfoOverlay, {})]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Value.SummaryList\"\n      }), \" component ensures that the wrapped \", _jsx(_components.code, {\n        children: \"Value.*\"\n      }), \" components are rendered as definition lists, which helps maintain semantic correctness.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Value } from '@dnb/eufemia/extensions/forms'\\nrender(\\n  <Value.SummaryList>\\n    <Value.String label=\\\"First value\\\" path=\\\"/myValue\\\" />\\n    <Value.String label=\\\"Second value\\\" path=\\\"/mySecondValue\\\" />\\n  </Value.SummaryList>,\\n)\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, Form, Value } from '@dnb/eufemia/src/extensions/forms'\nimport { Flex } from '@dnb/eufemia/src/components'\n\nexport const DefaultLayout = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-summary-list-default\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList>\n            <Value.Name.First path=\"/firstName\" />\n            <Value.Name.Last path=\"/lastName\" />\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const GridLayout = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-summary-list-grid\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList layout=\"grid\">\n            <Value.Name.First path=\"/firstName\" />\n            <Value.Name.Last path=\"/lastName\" />\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const HorizontalLayout = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-summary-list-horizontal\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList layout=\"horizontal\">\n            <Value.Name.First path=\"/firstName\" />\n            <Value.Name.Last path=\"/lastName\" />\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const DefaultLayoutWithHelp = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-summary-list-default-with-help\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n          nickName: 'JD',\n          streetName: 'Osloveien',\n          streetNr: 12,\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList>\n            <Value.Name.First\n              path=\"/firstName\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            />\n            <Value.Name.Last path=\"/lastName\" />\n            <Value.String\n              path=\"/nickName\"\n              label=\"kallenavn\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            />\n            <Value.Composition\n              label=\"Street\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            >\n              <Value.String path=\"/streetName\" />\n              <Value.Number\n                path=\"/streetNr\"\n                help={{\n                  open: true,\n                  title: 'Help title',\n                  content: 'Help content',\n                }}\n              />\n            </Value.Composition>\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const GridLayoutWithHelp = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-summary-list-grid-with-help\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n          nickName: 'JD',\n          streetName: 'Osloveien',\n          streetNr: 12,\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList layout=\"grid\">\n            <Value.Name.First\n              path=\"/firstName\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            />\n            <Value.Name.Last path=\"/lastName\" />\n            <Value.String\n              path=\"/nickName\"\n              label=\"kallenavn\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            />\n            <Value.Composition\n              label=\"Street\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            >\n              <Value.String path=\"/streetName\" />\n              <Value.Number\n                path=\"/streetNr\"\n                help={{\n                  open: true,\n                  title: 'Help title',\n                  content: 'Help content',\n                }}\n              />\n            </Value.Composition>\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const HorizontalLayoutWithHelp = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-summary-list-horizontal-with-help\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n          nickName: 'JD',\n          streetName: 'Osloveien',\n          streetNr: 12,\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList layout=\"horizontal\">\n            <Value.Name.First\n              path=\"/firstName\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            />\n            <Value.Name.Last path=\"/lastName\" />\n            <Value.String\n              path=\"/nickName\"\n              label=\"kallenavn\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            />\n            <Value.Composition\n              label=\"Street\"\n              help={{\n                open: true,\n                title: 'Help title',\n                content: 'Help content',\n              }}\n            >\n              <Value.String path=\"/streetName\" />\n              <Value.Number\n                path=\"/streetNr\"\n                help={{\n                  open: true,\n                  title: 'Help title',\n                  content: 'Help content',\n                }}\n              />\n            </Value.Composition>\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const CombinedLayout = () => {\n  return (\n    <ComponentBox data-visual-test=\"forms-value-summary-list-combined\">\n      <Form.Handler\n        data={{\n          firstName: 'John',\n          lastName: 'Doe',\n          streetName: 'Osloveien',\n          streetNr: 12,\n          postalCode: '1234',\n          city: 'Oslo',\n        }}\n      >\n        <Form.Card>\n          <Form.SubHeading>Subheading</Form.SubHeading>\n\n          <Value.SummaryList>\n            <Value.Name.First path=\"/firstName\" />\n            <Value.Name.Last path=\"/lastName\" />\n\n            <Value.Composition label=\"Street\">\n              <Value.String path=\"/streetName\" />\n              <Value.Number path=\"/streetNr\" />\n            </Value.Composition>\n\n            <Value.Composition label=\"City\">\n              <Value.String path=\"/postalCode\" />\n              <Value.String path=\"/city\" />\n            </Value.Composition>\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport function InheritVisibility() {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Form.Card>\n          <Field.Boolean\n            variant=\"button\"\n            path=\"/isVisible\"\n            defaultValue={true}\n          />\n\n          <Form.Visibility pathTrue=\"/isVisible\" animate>\n            <Field.Name.First path=\"/foo\" defaultValue=\"foo\" />\n            <Field.Name.Last path=\"/bar\" defaultValue=\"bar\" />\n          </Form.Visibility>\n\n          <Value.SummaryList inheritVisibility>\n            <Value.Name.First path=\"/foo\" />\n            <Value.Name.First path=\"/bar\" />\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport function InheritLabel() {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Form.Card>\n          <Field.String path=\"/foo\" defaultValue=\"foo\" label=\"foo label\" />\n          <Field.String path=\"/bar\" defaultValue=\"bar\" label=\"bar label\" />\n\n          <Value.SummaryList inheritLabel>\n            <Value.String path=\"/foo\" />\n            <Value.String path=\"/bar\" />\n          </Value.SummaryList>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const HorizontalLayoutWithoutLabel = () => (\n  <ComponentBox data-visual-test=\"forms-value-summary-empty-label\">\n    <Value.SummaryList layout=\"horizontal\">\n      <Value.String value=\"foo\" label=\"Foo\" />\n      <Value.String value=\"bar\" />\n      <Value.String value=\"baz\" label=\"Baz\" />\n    </Value.SummaryList>\n  </ComponentBox>\n)\n\nexport const WithHelpInInfoOverlay = () => (\n  <ComponentBox data-visual-test=\"forms-value-summary-with-help-in-info-overlay\">\n    <Form.Handler\n      data={{\n        firstName: 'John',\n        lastName: 'Doe',\n      }}\n    >\n      <Form.InfoOverlay>\n        <Value.SummaryList>\n          <Value.Name.First\n            path=\"/firstName\"\n            help={{\n              title: 'Help title',\n              content: 'Help content.',\n            }}\n          />\n          <Value.Name.Last\n            path=\"/lastName\"\n            help={{\n              title: 'Help title',\n              content: 'Help content.',\n            }}\n          />\n        </Value.SummaryList>\n      </Form.InfoOverlay>\n    </Form.Handler>\n  </ComponentBox>\n)\n\nexport function AnimatedVisibility() {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Flex.Stack>\n          <Field.Boolean\n            label=\"Make second field visible when toggled\"\n            path=\"/toggleValue\"\n            variant=\"checkbox\"\n          />\n\n          <Form.Card>\n            <Value.SummaryList>\n              <Value.String label=\"Label\" value=\"First field\" />\n\n              <Form.Visibility pathTrue=\"/toggleValue\" animate>\n                <Value.String label=\"Label\" value=\"Second field\" />\n              </Form.Visibility>\n            </Value.SummaryList>\n          </Form.Card>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","_components","h2","h3","p","a","code","VisibleWhenVisualTest","Examples","_missingMdxReference","href","id","component","Error","pre","className","DefaultLayout","ComponentBox","GridLayout","HorizontalLayout","DefaultLayoutWithHelp","GridLayoutWithHelp","HorizontalLayoutWithHelp","CombinedLayout","InheritVisibility","InheritLabel","HorizontalLayoutWithoutLabel","WithHelpInInfoOverlay","AnimatedVisibility"],"sourceRoot":""}