{"version":3,"file":"component---src-docs-uilib-extensions-forms-value-upload-demos-mdx-46f12e038a50415efe3b.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/Upload/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/Upload/demos.mdx"],"sourcesContent":["import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Form, Value, Field } from '@dnb/eufemia/src/extensions/forms'\nimport { Flex, Span } from '@dnb/eufemia/src'\nimport { createRequest } from '../../Form/SubmitIndicator/Examples'\nimport { createMockFile } from '../../../../../../docs/uilib/components/upload/Examples'\n\nexport const Placeholder = () => {\n  return (\n    <ComponentBox>\n      <Value.Upload placeholder=\"No value given\" />\n    </ComponentBox>\n  )\n}\n\nexport const WithValue = () => {\n  return (\n    <ComponentBox\n      scope={{ createMockFile }}\n      data-visual-test=\"upload-value-default\"\n    >\n      <Value.Upload\n        inline\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n        ]}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithSize = () => {\n  return (\n    <ComponentBox\n      hideCode\n      scope={{ createMockFile }}\n      data-visual-test=\"upload-value-size\"\n    >\n      <Value.Upload\n        displaySize\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n        ]}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithDownload = () => {\n  return (\n    <ComponentBox hideCode scope={{ createMockFile }}>\n      <Value.Upload\n        download\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n        ]}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithCustomFormat = () => {\n  return (\n    <ComponentBox hideCode scope={{ createMockFile }}>\n      <Form.Handler\n        locale=\"en-GB\"\n        data={{\n          myPath: [\n            {\n              file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n              exists: false,\n              id: '1',\n            },\n            {\n              file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n              exists: false,\n              id: '2',\n            },\n          ],\n        }}\n      >\n        <Value.Upload\n          inline\n          path=\"/myPath\"\n          format={{ type: 'disjunction' }}\n        />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const FieldUploadSelectionPath = () => {\n  return (\n    <ComponentBox hideCode scope={{ createMockFile }}>\n      <Form.Handler\n        data={{\n          myPath: [\n            {\n              file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n              exists: false,\n              id: '1',\n            },\n            {\n              file: createMockFile('fileName-2.png', 3000000, 'image/png'),\n              exists: false,\n              id: '2',\n            },\n            {\n              file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n              exists: false,\n              id: '3',\n            },\n          ],\n        }}\n      >\n        <Flex.Stack>\n          <Field.Upload label=\"My selections\" path=\"/myPath\" />\n          <Value.Upload\n            inheritLabel\n            path=\"/myPath\"\n            variant=\"ul\"\n            listType=\"unstyled\"\n          />\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Label = () => {\n  return (\n    <ComponentBox>\n      <Value.Upload label=\"Label text\" showEmpty />\n    </ComponentBox>\n  )\n}\n\nexport const LabelAndValue = () => {\n  return (\n    <ComponentBox\n      hideCode\n      scope={{ createMockFile }}\n      data-visual-test=\"upload-value-label-and-value\"\n    >\n      <Value.Upload\n        label=\"Label text\"\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n        ]}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const LabelAndValueOnFileClick = () => {\n  return (\n    <ComponentBox\n      hideCode\n      scope={{ createMockFile }}\n      data-visual-test=\"upload-value-label-and-value-on-file-click\"\n    >\n      <Value.Upload\n        onFileClick={() => {\n          console.log('Clicked on file')\n        }}\n        label=\"Label text\"\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            isLoading: true,\n            id: '2',\n          },\n        ]}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Inline = () => {\n  return (\n    <ComponentBox\n      hideCode\n      scope={{ createMockFile }}\n      data-visual-test=\"upload-value-inline\"\n    >\n      <Span>\n        This is before the component{' '}\n        <Value.Upload\n          value={[\n            {\n              file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n              exists: false,\n              id: '1',\n            },\n            {\n              file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n              exists: false,\n              id: '2',\n            },\n          ]}\n          inline\n        />{' '}\n        This is after the component\n      </Span>\n    </ComponentBox>\n  )\n}\n\nexport const ListVariants = () => {\n  return (\n    <ComponentBox\n      scope={{ createMockFile }}\n      data-visual-test=\"upload-value-lists\"\n      hideCode\n    >\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Ordered List\"\n        variant=\"ol\"\n      />\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Unordered List\"\n        variant=\"ul\"\n      />\n    </ComponentBox>\n  )\n}\n\nexport const ListVariantsOnFileClick = () => {\n  return (\n    <ComponentBox\n      scope={{ createMockFile }}\n      data-visual-test=\"upload-value-lists-on-file-click\"\n      hideCode\n    >\n      <Value.Upload\n        onFileClick={() => {\n          console.log('Clicked on file')\n        }}\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            isLoading: true,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Ordered List\"\n        variant=\"ol\"\n      />\n      <Value.Upload\n        onFileClick={() => {\n          console.log('Clicked on file')\n        }}\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n            isLoading: true,\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n            isLoading: true,\n          },\n        ]}\n        label=\"Unordered List\"\n        variant=\"ul\"\n      />\n    </ComponentBox>\n  )\n}\n\nexport const ListTypes = () => {\n  return (\n    <ComponentBox scope={{ createMockFile }} hideCode>\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Ordered List a\"\n        variant=\"ol\"\n        listType=\"a\"\n      />\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Ordered List A\"\n        variant=\"ol\"\n        listType=\"A\"\n      />\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Ordered List i\"\n        variant=\"ol\"\n        listType=\"i\"\n      />\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Ordered List I\"\n        variant=\"ol\"\n        listType=\"I\"\n      />\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Unordered List square\"\n        variant=\"ul\"\n        listType=\"square\"\n      />\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Unordered List circle\"\n        variant=\"ul\"\n        listType=\"circle\"\n      />\n    </ComponentBox>\n  )\n}\n\nexport const OnFileClick = () => {\n  return (\n    <ComponentBox scope={{ createMockFile, createRequest }}>\n      <Value.Upload\n        label=\"Label text\"\n        value={[\n          {\n            file: createMockFile('35217511.jpg', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('1501870.jpg', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n        ]}\n        onFileClick={async ({ fileItem }) => {\n          const request = createRequest()\n          console.log(\n            `making API request to fetch the url of the file: ${fileItem.file.name}`,\n          )\n          await request(2000) // Simulate a request\n          window.open(\n            `https://eufemia.dnb.no/images/avatars/${fileItem.file.name}`,\n            '_blank',\n          )\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const DisplayFileAsNonClickable = () => {\n  return (\n    <ComponentBox\n      hideCode\n      scope={{ createMockFile }}\n      data-visual-test=\"upload-value-display-file-as-non-clickable\"\n    >\n      <Value.Upload\n        label=\"Label text\"\n        value={[\n          {\n            file: createMockFile('35217511.jpg', 0, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('1501870.jpg', undefined, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n        ]}\n      />\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    code: \"code\",\n    p: \"p\"\n  }, _provideComponents(), props.components), {VisibleWhenVisualTest} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.DisplayFileAsNonClickable) _missingMdxReference(\"Examples.DisplayFileAsNonClickable\", true);\n  if (!Examples.FieldUploadSelectionPath) _missingMdxReference(\"Examples.FieldUploadSelectionPath\", true);\n  if (!Examples.Inline) _missingMdxReference(\"Examples.Inline\", true);\n  if (!Examples.Label) _missingMdxReference(\"Examples.Label\", true);\n  if (!Examples.LabelAndValue) _missingMdxReference(\"Examples.LabelAndValue\", true);\n  if (!Examples.LabelAndValueOnFileClick) _missingMdxReference(\"Examples.LabelAndValueOnFileClick\", true);\n  if (!Examples.ListTypes) _missingMdxReference(\"Examples.ListTypes\", true);\n  if (!Examples.ListVariants) _missingMdxReference(\"Examples.ListVariants\", true);\n  if (!Examples.ListVariantsOnFileClick) _missingMdxReference(\"Examples.ListVariantsOnFileClick\", true);\n  if (!Examples.OnFileClick) _missingMdxReference(\"Examples.OnFileClick\", true);\n  if (!Examples.Placeholder) _missingMdxReference(\"Examples.Placeholder\", true);\n  if (!Examples.WithCustomFormat) _missingMdxReference(\"Examples.WithCustomFormat\", true);\n  if (!Examples.WithDownload) _missingMdxReference(\"Examples.WithDownload\", true);\n  if (!Examples.WithSize) _missingMdxReference(\"Examples.WithSize\", true);\n  if (!Examples.WithValue) _missingMdxReference(\"Examples.WithValue\", true);\n  if (!VisibleWhenVisualTest) _missingMdxReference(\"VisibleWhenVisualTest\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Placeholder\"\n    }), \"\\n\", _jsx(Examples.Placeholder, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Value\"\n    }), \"\\n\", _jsx(Examples.WithValue, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"With \", _jsx(_components.code, {\n        children: \"displaySize\"\n      }), \" property\"]\n    }), \"\\n\", _jsx(Examples.WithSize, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"With \", _jsx(_components.code, {\n        children: \"download\"\n      }), \" property\"]\n    }), \"\\n\", _jsx(Examples.WithDownload, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Custom format\"\n    }), \"\\n\", _jsx(Examples.WithCustomFormat, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Label\"\n    }), \"\\n\", _jsx(Examples.Label, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Label and value\"\n    }), \"\\n\", _jsx(Examples.LabelAndValue, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inline\"\n    }), \"\\n\", _jsx(Examples.Inline, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"List variants\"\n    }), \"\\n\", _jsx(Examples.ListVariants, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"List types\"\n    }), \"\\n\", _jsx(Examples.ListTypes, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Field.Upload path\"\n    }), \"\\n\", _jsx(Examples.FieldUploadSelectionPath, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Using \", _jsx(_components.code, {\n        children: \"onFileClick\"\n      })]\n    }), \"\\n\", _jsx(Examples.OnFileClick, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Display files as non-clickable\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When file size is 0 or not given (\", _jsx(_components.code, {\n        children: \"new File([], name, { type })\"\n      }), \"), the file is displayed as a span instead of an anchor. How ever, when \", _jsx(_components.code, {\n        children: \"onFileClick\"\n      }), \" is given, the file will be clickable as a button.\"]\n    }), \"\\n\", _jsx(Examples.DisplayFileAsNonClickable, {}), \"\\n\", _jsxs(VisibleWhenVisualTest, {\n      children: [_jsx(Examples.LabelAndValueOnFileClick, {}), _jsx(Examples.ListVariantsOnFileClick, {})]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["Placeholder","_jsx","ComponentBox","children","WithValue","scope","createMockFile","WithSize","hideCode","WithDownload","WithCustomFormat","FieldUploadSelectionPath","Label","LabelAndValue","LabelAndValueOnFileClick","Inline","ListVariants","ListVariantsOnFileClick","ListTypes","OnFileClick","createRequest","DisplayFileAsNonClickable","_createMdxContent","props","_components","Object","assign","h2","h3","code","p","_provideComponents","components","VisibleWhenVisualTest","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error"],"sourceRoot":""}