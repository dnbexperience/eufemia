{"version":3,"file":"component---src-docs-uilib-extensions-forms-value-upload-demos-mdx-a1283eb6a105e5afd537.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/Upload/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/Upload/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/upload/Examples.tsx"],"sourcesContent":["import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Form, Value, Field } from '@dnb/eufemia/src/extensions/forms'\nimport { Flex, Span } from '@dnb/eufemia/src'\nimport { createMockFile } from '../../../../../../docs/uilib/components/upload/Examples'\n\nexport const Placeholder = () => {\n  return (\n    <ComponentBox>\n      <Value.Upload placeholder=\"No values given\" />\n    </ComponentBox>\n  )\n}\n\nexport const WithValue = () => {\n  return (\n    <ComponentBox\n      scope={{ createMockFile }}\n      data-visual-test=\"upload-value-default\"\n    >\n      <Value.Upload\n        inline\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n        ]}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithSize = () => {\n  return (\n    <ComponentBox\n      hideCode\n      scope={{ createMockFile }}\n      data-visual-test=\"upload-value-size\"\n    >\n      <Value.Upload\n        displaySize\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n        ]}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithDownload = () => {\n  return (\n    <ComponentBox hideCode scope={{ createMockFile }}>\n      <Value.Upload\n        download\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n        ]}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithCustomFormat = () => {\n  return (\n    <ComponentBox hideCode scope={{ createMockFile }}>\n      <Form.Handler\n        locale=\"en-GB\"\n        data={{\n          myPath: [\n            {\n              file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n              exists: false,\n              id: '1',\n            },\n            {\n              file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n              exists: false,\n              id: '2',\n            },\n          ],\n        }}\n      >\n        <Value.Upload\n          inline\n          path=\"/myPath\"\n          format={{ type: 'disjunction' }}\n        />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const FieldUploadSelectionPath = () => {\n  return (\n    <ComponentBox hideCode scope={{ createMockFile }}>\n      <Form.Handler\n        data={{\n          myPath: [\n            {\n              file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n              exists: false,\n              id: '1',\n            },\n            {\n              file: createMockFile('fileName-2.png', 3000000, 'image/png'),\n              exists: false,\n              id: '2',\n            },\n            {\n              file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n              exists: false,\n              id: '3',\n            },\n          ],\n        }}\n      >\n        <Flex.Stack>\n          <Field.Upload label=\"My selections\" path=\"/myPath\" />\n          <Value.Upload\n            inheritLabel\n            path=\"/myPath\"\n            variant=\"ul\"\n            listType=\"unstyled\"\n          />\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Label = () => {\n  return (\n    <ComponentBox>\n      <Value.Upload label=\"Label text\" showEmpty />\n    </ComponentBox>\n  )\n}\n\nexport const LabelAndValue = () => {\n  return (\n    <ComponentBox hideCode scope={{ createMockFile }}>\n      <Value.Upload\n        label=\"Label text\"\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n        ]}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Inline = () => {\n  return (\n    <ComponentBox\n      hideCode\n      scope={{ createMockFile }}\n      data-visual-test=\"upload-value-inline\"\n    >\n      <Span>\n        This is before the component{' '}\n        <Value.Upload\n          value={[\n            {\n              file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n              exists: false,\n              id: '1',\n            },\n            {\n              file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n              exists: false,\n              id: '2',\n            },\n          ]}\n          inline\n        />{' '}\n        This is after the component\n      </Span>\n    </ComponentBox>\n  )\n}\n\nexport const ListVariants = () => {\n  return (\n    <ComponentBox\n      scope={{ createMockFile }}\n      data-visual-test=\"upload-value-lists\"\n      hideCode\n    >\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Ordered List\"\n        variant=\"ol\"\n      />\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Unordered List\"\n        variant=\"ul\"\n      />\n    </ComponentBox>\n  )\n}\n\nexport const ListTypes = () => {\n  return (\n    <ComponentBox scope={{ createMockFile }} hideCode>\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Ordered List a\"\n        variant=\"ol\"\n        listType=\"a\"\n      />\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Ordered List A\"\n        variant=\"ol\"\n        listType=\"A\"\n      />\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Ordered List i\"\n        variant=\"ol\"\n        listType=\"i\"\n      />\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Ordered List I\"\n        variant=\"ol\"\n        listType=\"I\"\n      />\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Unordered List square\"\n        variant=\"ul\"\n        listType=\"square\"\n      />\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Unordered List circle\"\n        variant=\"ul\"\n        listType=\"circle\"\n      />\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.FieldUploadSelectionPath) _missingMdxReference(\"Examples.FieldUploadSelectionPath\", true);\n  if (!Examples.Inline) _missingMdxReference(\"Examples.Inline\", true);\n  if (!Examples.Label) _missingMdxReference(\"Examples.Label\", true);\n  if (!Examples.LabelAndValue) _missingMdxReference(\"Examples.LabelAndValue\", true);\n  if (!Examples.ListTypes) _missingMdxReference(\"Examples.ListTypes\", true);\n  if (!Examples.ListVariants) _missingMdxReference(\"Examples.ListVariants\", true);\n  if (!Examples.Placeholder) _missingMdxReference(\"Examples.Placeholder\", true);\n  if (!Examples.WithCustomFormat) _missingMdxReference(\"Examples.WithCustomFormat\", true);\n  if (!Examples.WithDownload) _missingMdxReference(\"Examples.WithDownload\", true);\n  if (!Examples.WithSize) _missingMdxReference(\"Examples.WithSize\", true);\n  if (!Examples.WithValue) _missingMdxReference(\"Examples.WithValue\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Placeholder\"\n    }), \"\\n\", _jsx(Examples.Placeholder, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Value\"\n    }), \"\\n\", _jsx(Examples.WithValue, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"With \", _jsx(_components.code, {\n        children: \"displaySize\"\n      }), \" property\"]\n    }), \"\\n\", _jsx(Examples.WithSize, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"With \", _jsx(_components.code, {\n        children: \"download\"\n      }), \" property\"]\n    }), \"\\n\", _jsx(Examples.WithDownload, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Custom format\"\n    }), \"\\n\", _jsx(Examples.WithCustomFormat, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Label\"\n    }), \"\\n\", _jsx(Examples.Label, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Label and value\"\n    }), \"\\n\", _jsx(Examples.LabelAndValue, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inline\"\n    }), \"\\n\", _jsx(Examples.Inline, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"List variants\"\n    }), \"\\n\", _jsx(Examples.ListVariants, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"List types\"\n    }), \"\\n\", _jsx(Examples.ListTypes, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Field.Upload path\"\n    }), \"\\n\", _jsx(Examples.FieldUploadSelectionPath, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport {\n  Button,\n  ToggleButton,\n  Img,\n  Section,\n  Upload,\n} from '@dnb/eufemia/src'\nimport { UploadValue } from '@dnb/eufemia/src/extensions/forms/Field/Upload'\n\nexport function createMockFile(name: string, size: number, type: string) {\n  const file = new File([], name, { type })\n  Object.defineProperty(file, 'size', {\n    get() {\n      return size\n    },\n  })\n  return file\n}\n\nconst useMockFiles = (setFiles, extend) => {\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('fileName.png', 123, 'image/png'),\n        ...extend,\n      },\n    ])\n  }, [])\n}\n\nexport async function mockAsyncFileUpload(\n  newFiles: UploadValue,\n): Promise<UploadValue> {\n  const promises = newFiles.map(async (file, index) => {\n    const formData = new FormData()\n    formData.append('file', file.file, file.file.name)\n\n    await new Promise((resolve) =>\n      setTimeout(resolve, Math.floor(Math.random() * 2000) + 1000),\n    )\n\n    const mockResponse = {\n      ok: (index + 2) % 2 === 0, // Every other request will fail\n      json: async () => ({\n        server_generated_id: `${file.file.name}_${crypto.randomUUID()}`,\n      }),\n    }\n\n    return await Promise.resolve(mockResponse)\n      .then((res) => {\n        if (res.ok) return res.json()\n        throw new Error('Unable to upload this file')\n      })\n      .then((data) => {\n        return {\n          ...file,\n          id: data.server_generated_id,\n        }\n      })\n      .catch((error) => {\n        return {\n          ...file,\n          errorMessage: error.message,\n        }\n      })\n  })\n\n  return await Promise.all(promises)\n}\n\nexport const UploadPrefilledFileList = () => (\n  <ComponentBox\n    data-visual-test=\"upload-file-list\"\n    scope={{ useMockFiles }}\n  >\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('file-list')\n\n        if (files.length) {\n          console.log('files', files)\n        }\n\n        useMockFiles(setFiles, { errorMessage: 'This is no real file!' })\n\n        return <Upload acceptedFileTypes={['jpg', 'png']} id=\"file-list\" />\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadBasic = () => (\n  <ComponentBox data-visual-test=\"upload-basic\">\n    <Upload acceptedFileTypes={['jpg', 'png']} id=\"upload-basic\" />\n  </ComponentBox>\n)\n\nexport const UploadSingleFile = () => (\n  <ComponentBox>\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-single-file')\n\n        if (files.length) {\n          console.log('files', files, setFiles)\n        }\n\n        return (\n          <Upload\n            acceptedFileTypes={['jpg', 'png']}\n            id=\"upload-single-file\"\n            filesAmountLimit={1}\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadRemoveFile = () => (\n  <ComponentBox data-visual-test=\"upload-remove-files\">\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-remove-files')\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-remove-files\"\n            />\n\n            <Button\n              top=\"small\"\n              disabled={files.length < 1}\n              onClick={() => setFiles([])}\n            >\n              Remove selected files\n            </Button>\n\n            <Preview files={files} />\n          </>\n        )\n\n        function Preview({ files }) {\n          const [images, setImages] = React.useState([])\n\n          React.useEffect(() => {\n            files.map(({ file }) => {\n              let reader = new FileReader()\n\n              reader.addEventListener(\n                'load',\n                (event) => {\n                  images.push({ blob: event.target, file })\n                  setImages([...images])\n                  reader = null\n                },\n                false,\n              )\n\n              reader.readAsDataURL(file)\n            })\n          }, [files])\n\n          return (\n            <Section aria-label=\"List of chosen images\">\n              {images.map((img, i) => (\n                <Img\n                  top\n                  key={i}\n                  src={img.blob.result}\n                  alt={img.file.name}\n                  height={100}\n                />\n              ))}\n            </Section>\n          )\n        }\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadIsLoading = () => (\n  <ComponentBox\n    scope={{ useMockFiles }}\n    data-visual-test=\"upload-is-loading\"\n  >\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-is-loading')\n\n        useMockFiles(setFiles, { isLoading: true })\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-is-loading\"\n            />\n            <ToggleButton\n              top=\"small\"\n              disabled={files.length < 1}\n              on_change={({ checked }) =>\n                setFiles(\n                  files.map((fileItem) => {\n                    return { ...fileItem, isLoading: checked }\n                  }),\n                )\n              }\n            >\n              Files is loading toggle\n            </ToggleButton>\n          </>\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadErrorMessage = () => (\n  <ComponentBox data-visual-test=\"upload-error-message\">\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload(\n          'upload-error-message',\n        )\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-error-message\"\n            />\n            <ToggleButton\n              top=\"small\"\n              disabled={files.length < 1}\n              on_change={({ checked }) => {\n                setFiles(\n                  files.map((fileItem) => {\n                    return {\n                      ...fileItem,\n                      errorMessage: checked\n                        ? 'custom error message'\n                        : null,\n                    }\n                  }),\n                )\n              }}\n            >\n              Toggle error message\n            </ToggleButton>\n          </>\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadAcceptedFormats = () => (\n  <ComponentBox>\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload(\n          'upload-accepted-formats',\n        )\n\n        if (files.length) {\n          console.log('files', files, setFiles)\n        }\n\n        return (\n          <Upload\n            acceptedFileTypes={['png', 'jpg', 'pdf']}\n            id=\"upload-accepted-formats\"\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadFileMaxSizeBasedOnFileType = () => (\n  <ComponentBox\n    data-visual-test=\"upload-file-max-size-based-on-file-format\"\n    hideCode\n  >\n    <Upload\n      id=\"upload-file-max-size-based-on-file-format\"\n      fileMaxSize={99}\n      acceptedFileTypes={[\n        { fileType: 'jpg', fileMaxSize: 1 },\n        { fileType: 'doc', fileMaxSize: 1 },\n        { fileType: 'svg', fileMaxSize: 1 },\n        { fileType: 'gif', fileMaxSize: 1 },\n        { fileType: 'doc', fileMaxSize: 4 },\n        { fileType: 'docx', fileMaxSize: 4 },\n        { fileType: 'tiff', fileMaxSize: 5 },\n        { fileType: 'tif', fileMaxSize: 5 },\n        { fileType: 'html', fileMaxSize: 6 },\n        { fileType: 'htm', fileMaxSize: 6 },\n        { fileType: 'xls', fileMaxSize: 7 },\n        { fileType: 'xlsx', fileMaxSize: 7 },\n        { fileType: 'odt' },\n        { fileType: 'pdf' },\n        { fileType: 'text', fileMaxSize: false },\n        { fileType: 'txt', fileMaxSize: 0 },\n        { fileType: 'zip', fileMaxSize: 99 },\n      ]}\n    />\n  </ComponentBox>\n)\n\nexport const UploadFileMaxSizeBasedOnFileTypeDisabled = () => (\n  <ComponentBox>\n    <Upload\n      id=\"upload-file-max-size-based-on-file-format-disabled\"\n      acceptedFileTypes={[\n        { fileType: 'jpg', fileMaxSize: 0 },\n        { fileType: 'doc', fileMaxSize: false },\n        { fileType: 'svg' },\n      ]}\n    />\n  </ComponentBox>\n)\n\nexport const UploadDisabledFileMaxSize = () => (\n  <ComponentBox data-visual-test=\"upload-disabled-file-max-size\">\n    <Upload\n      acceptedFileTypes={['jpg', 'pdf']}\n      id=\"upload-disabled-file-max-size\"\n      fileMaxSize={false}\n    />\n  </ComponentBox>\n)\n\nexport const UploadNoTitleNoText = () => (\n  <ComponentBox data-visual-test=\"upload-no-title-no-text\">\n    <Upload\n      title={false}\n      text={false}\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-no-title-no-text\"\n    />\n  </ComponentBox>\n)\n"],"names":["Placeholder","_jsx","ComponentBox","children","WithValue","scope","createMockFile","WithSize","hideCode","WithDownload","WithCustomFormat","FieldUploadSelectionPath","Label","LabelAndValue","Inline","ListVariants","ListTypes","_createMdxContent","props","_components","Object","assign","h2","h3","code","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error","name","size","type","file","File","defineProperty","get","useMockFiles","setFiles","extend","React","async","mockAsyncFileUpload","newFiles","promises","map","index","FormData","append","Promise","resolve","setTimeout","Math","floor","random","mockResponse","ok","json","server_generated_id","crypto","randomUUID","then","res","data","catch","error","errorMessage","message","all","UploadPrefilledFileList","noInline","UploadBasic","UploadSingleFile","UploadRemoveFile","UploadIsLoading","UploadErrorMessage","UploadAcceptedFormats","UploadFileMaxSizeBasedOnFileType","UploadFileMaxSizeBasedOnFileTypeDisabled","UploadDisabledFileMaxSize","UploadNoTitleNoText"],"sourceRoot":""}