"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[98881],{64024:function(e,t,o){o.r(t);var i=o(52322),s=o(45392),n=o(85179),a=o(23900);function l(e){const t=Object.assign({h2:"h2"},(0,s.a)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{children:"Events"}),"\n",(0,i.jsx)(n.ZP,{props:a.O})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,s.a)(),e.components);return t?(0,i.jsx)(t,Object.assign({},e,{children:(0,i.jsx)(l,e)})):l(e)}},56861:function(e,t,o){o.d(t,{k:function(){return r}});var i=o(96974),s=o(60500);const n={...i.N,...s.m},{children:a,...l}=n,r={value:{doc:"The value to format. Can be given as `children` instead.",type:["Array<React.ReactNode>"],status:"optional"},children:{doc:"The children to format.",type:"React.ReactNode",status:"optional"},format:{doc:"Formatting options for the value when variant is `text`. See the [Intl.ListFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat) documentation.",type:"Intl.ListFormatOptions",status:"optional"},variant:{doc:"Defines if the value should be displayed in list format (`ol`, `ul`) or regular text format in one line. Defaults to `text`",type:["ol","ul","text"],status:"optional"},listType:{doc:"Defines the type of list styling used for list variants. Used together with variant `ol` and `ul`. Variant `ol`: `a`, `A`, `i`, `I` and `1`. Variant `ul`: `circle`, `disc` and `square`. Defaults to `undefined`",type:["a","A","i","I","1","circle","disc","square","unstyled","undefined"],status:"optional"},...l}},22260:function(e,t,o){o.d(t,{TM:function(){return n},Ts:function(){return s},V7:function(){return a},W8:function(){return i}});const i={id:{doc:"Unique id used with the useUpload hook to manage the files. Needed when wanting to connect with the useUpload hook.",type:["string","Function","Object","React.Context"],status:"optional"},acceptedFileTypes:{doc:"List of accepted file types. Either as string or [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype). When providing a list of [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype), the accepted file types will be presented in a table(see [example](/uilib/components/upload/demos/#upload-with-file-max-size-based-on-file-type)).",type:["Array<string>","Array<AcceptedFileType>"],status:"required"},filesAmountLimit:{doc:"Defines the amount of files the user can select and upload. Defaults to 100.",type:"number",status:"optional"},fileMaxSize:{doc:"Defines the max file size of each file in MB. Use either `0` or `false` to disable. Defaults to 5 MB.",type:["number","false"],status:"optional"},title:{doc:"Custom text property. Replaces the default title. Can be disabled using `false`.",type:"string",status:"optional"},text:{doc:"Custom text property. Replaces the default text. Can be disabled using `false`.",type:"string",status:"optional"},download:{doc:"Causes the browser to treat all listed files as downloadable instead of opening them in a new browser tab or window. Defaults to `false`.",type:"boolean",status:"optional"},allowDuplicates:{doc:"Allows uploading of duplicate files. Defaults to `false`.",type:"boolean",status:"optional"},disableDragAndDrop:{doc:"Disables file drag and drop, by removing the drop zone. Defaults to `false`.",type:"boolean",status:"optional"},skeleton:{doc:"Skeleton should be applied when loading content.",type:"boolean",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},s={fileType:{doc:"The name of the accepted file type.",type:"string",status:"required"},fileMaxSize:{doc:"Defines the max file size of the given file type in MB. Use either `0` or `false` to disable. If not provided, it defaults to the value of [Uploads](/uilib/components/upload/properties/#properties) `fileMaxSize` which defaults to 5 MB.",type:["number","false"],status:"optional"}},n={onChange:{doc:"Will be called on `files` changes made by the user. Access the files with `{ files }` (containing each a `fileItem`).",type:"function",status:"optional"},onFileDelete:{doc:"Will be called once a file gets deleted by the user. Access the deleted file with `{ fileItem }`.",type:"function",status:"optional"},onFileClick:{doc:"Will be called once a file gets clicked on by the user. Access the clicked file with `{ fileItem }`.",type:"function",status:"optional"}},a={file:{doc:"The file object. This is the same object as the one returned by the `File` API.",type:"File",status:"required"},id:{doc:"Unique ID for the file item. This ID is generated by the component and is not user-defined.",type:"string",status:"required"},exists:{doc:"Indicates if the file item already exists in the list of files. This is useful for distinguishing between new and existing files.",type:"boolean",status:"optional"},isLoading:{doc:"Indicates if the file item is currently being loaded. This is useful for showing a loading state while the file is being processed.",type:"boolean",status:"optional"},errorMessage:{doc:"Provide an error message to be displayed. This is useful for indicating issues with the file upload process.",type:"React.ReactNode",status:"optional"},description:{doc:"Provide a description to be displayed. This is useful for providing additional information about the file.",type:"React.ReactNode",status:"optional"},removeDeleteButton:{doc:"Set to `true` to remove the delete button from the file item. This is useful for preventing users from deleting files.",type:"boolean",status:"optional"}}},80174:function(e,t,o){o.d(t,{i:function(){return i}});const i={innerRef:{doc:"Send along a custom React Ref.",type:"React.RefObject",status:"optional"},children:{doc:"Contents.",type:"React.Node",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}}},6210:function(e,t,o){var i=o(30600);t.Z=i.Z},64223:function(e,t,o){var i=o(91859);t.Z=i.Z},41676:function(e,t,o){var i=o(76711);t.Z=i.Z},60500:function(e,t,o){o.d(t,{m:function(){return i}});const i={inside:{doc:"Defines the position of the marker.",type:"boolean",status:"optional"},outside:{doc:"Defines the position of the marker (default).",type:"boolean",status:"optional"},nested:{doc:"Will ensure a nested structure of several lists.",type:"boolean",status:"optional"},...o(80174).i}},96974:function(e,t,o){o.d(t,{N:function(){return i}});const i={inside:{doc:"Defines the position of the marker.",type:"boolean",status:"optional"},outside:{doc:"Defines the position of the marker (default).",type:"boolean",status:"optional"},nested:{doc:"Will ensure a nested structure of several lists.",type:"boolean",status:"optional"},...o(80174).i}},25189:function(e,t,o){o.d(t,{K:function(){return n},s:function(){return s}});var i=o(22260);const s={fileHandler:{doc:"File handler function that takes newly added files (`newFiles: UploadValue`) as a parameter and returns the processed files. The function can either be synchronous or asynchronous. It returns a promise (`Promise<UploadValue>`) containing the processed files when asynchronous.",type:"function",status:"optional"},...i.W8,title:void 0,text:void 0},n={...i.TM}},23900:function(e,t,o){o.d(t,{O:function(){return a},Q:function(){return n}});var i=o(56861),s=o(25189);const n={download:{doc:"Causes the browser to treat all listed files as downloadable instead of opening them in a new browser tab or window. Defaults to `false`.",type:"boolean",status:"optional"},displaySize:{doc:"Can be used to display the file size of the file. Defaults to `false`.",type:"boolean",status:"optional"},...i.k},a={onFileClick:s.K.onFileClick}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-value-upload-events-mdx-583f8ed007b35de2511b.js.map