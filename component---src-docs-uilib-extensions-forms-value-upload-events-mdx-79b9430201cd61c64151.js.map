{"version":3,"file":"component---src-docs-uilib-extensions-forms-value-upload-events-mdx-79b9430201cd61c64151.js","mappings":"mMAKA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,OACHC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKT,EAAYG,GAAI,CAC9BK,SAAU,WACR,MAAMC,EAAAA,EAAAA,KAAKC,EAAAA,GAAiB,CAC9BX,MAAOY,EAAAA,MAGb,CAOA,UANA,SAAoBZ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOQ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWZ,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DS,UAAUC,EAAAA,EAAAA,KAAKX,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,kFClBA,MAAMe,EAAiB,IAAKC,EAAAA,KAAiBC,EAAAA,IACvC,SAAER,KAAaS,GAAkCH,EAE1CI,EAA6C,CACxDC,MAAO,CACLC,IAAK,2DACLC,KAAM,CAAC,0BACPC,OAAQ,YAEVd,SAAU,CACRY,IAAK,0BACLC,KAAM,kBACNC,OAAQ,YAEVC,OAAQ,CACNH,IAAK,iNACLC,KAAM,yBACNC,OAAQ,YAEVE,QAAS,CACPJ,IAAK,8HACLC,KAAM,CAAC,KAAM,KAAM,QACnBC,OAAQ,YAEVG,SAAU,CACRL,IAAK,oNACLC,KAAM,CACJ,IACA,IACA,IACA,IACA,IACA,SACA,OACA,SACA,WACA,aAEFC,OAAQ,eAEPL,E,iIC1CE,MAAMS,EAAyC,CACpDC,GAAI,CACFP,IAAK,sHACLC,KAAM,CAAC,SAAU,WAAY,SAAU,iBACvCC,OAAQ,YAEVM,kBAAmB,CACjBR,IAAK,qXACLC,KAAM,CAAC,gBAAiB,2BACxBC,OAAQ,YAEVO,iBAAkB,CAChBT,IAAK,+EACLC,KAAM,SACNC,OAAQ,YAEVQ,YAAa,CACXV,IAAK,wGACLC,KAAM,CAAC,SAAU,SACjBC,OAAQ,YAEVS,MAAO,CACLX,IAAK,mFACLC,KAAM,SACNC,OAAQ,YAEVU,KAAM,CACJZ,IAAK,kFACLC,KAAM,SACNC,OAAQ,YAEVW,SAAU,CACRb,IAAK,4IACLC,KAAM,UACNC,OAAQ,YAEVY,gBAAiB,CACfd,IAAK,4DACLC,KAAM,UACNC,OAAQ,YAEVa,mBAAoB,CAClBf,IAAK,+EACLC,KAAM,UACNC,OAAQ,YAEVc,SAAU,CACRhB,IAAK,mDACLC,KAAM,UACNC,OAAQ,YAEV,0CAA2C,CACzCF,IAAK,2DACLC,KAAM,CAAC,SAAU,UACjBC,OAAQ,aAICe,EAAmD,CAC9DC,SAAU,CACRlB,IAAK,sCACLC,KAAM,SACNC,OAAQ,YAEVQ,YAAa,CACXV,IAAK,8OACLC,KAAM,CAAC,SAAU,SACjBC,OAAQ,aAICiB,EAAqC,CAChDC,SAAU,CACRpB,IAAK,wHACLC,KAAM,WACNC,OAAQ,YAEVmB,aAAc,CACZrB,IAAK,oGACLC,KAAM,WACNC,OAAQ,YAEVoB,YAAa,CACXtB,IAAK,uGACLC,KAAM,WACNC,OAAQ,aAICqB,EAA2C,CACtDC,KAAM,CACJxB,IAAK,kFACLC,KAAM,OACNC,OAAQ,YAEVK,GAAI,CACFP,IAAK,8FACLC,KAAM,SACNC,OAAQ,YAEVuB,OAAQ,CACNzB,IAAK,oIACLC,KAAM,UACNC,OAAQ,YAEVwB,UAAW,CACT1B,IAAK,sIACLC,KAAM,UACNC,OAAQ,YAEVyB,aAAc,CACZ3B,IAAK,+GACLC,KAAM,kBACNC,OAAQ,YAEV0B,YAAa,CACX5B,IAAK,6GACLC,KAAM,kBACNC,OAAQ,YAEV2B,mBAAoB,CAClB7B,IAAK,yHACLC,KAAM,UACNC,OAAQ,Y,wDC3HL,MAAM4B,EAAyD,CACpEC,SAAU,CACR/B,IAAK,iCACLC,KAAM,kBACNC,OAAQ,YAEVd,SAAU,CACRY,IAAK,YACLC,KAAM,aACNC,OAAQ,YAEV,0CAA2C,CACzCF,IAAK,2DACLC,KAAM,CAAC,SAAU,UACjBC,OAAQ,Y,sCCTZ,IAAe8B,EAAE,C,uCCAjB,IAAeC,EAAE,C,uCCAjB,IAAeC,EAAE,C,wDCHV,MAAMtC,EAAqC,CAChDuC,OAAQ,CACNnC,IAAK,sCACLC,KAAM,UACNC,OAAQ,YAEVkC,QAAS,CACPpC,IAAK,gDACLC,KAAM,UACNC,OAAQ,YAEVmC,OAAQ,CACNrC,IAAK,mDACLC,KAAM,UACNC,OAAQ,e,SAEP4B,E,wDCjBE,MAAMnC,EAAqC,CAChDwC,OAAQ,CACNnC,IAAK,sCACLC,KAAM,UACNC,OAAQ,YAEVkC,QAAS,CACPpC,IAAK,gDACLC,KAAM,UACNC,OAAQ,YAEVmC,OAAQ,CACNrC,IAAK,mDACLC,KAAM,UACNC,OAAQ,e,SAEP4B,E,8FCbE,MAAMQ,EAA8C,CACzDC,YAAa,CACXvC,IAAK,uRACLC,KAAM,WACNC,OAAQ,eAEPI,EAAAA,GACHK,WAAO6B,EACP5B,UAAM4B,GAGKC,EAA0C,IAClDtB,EAAAA,G,yGCZE,MAAMuB,EAA8C,CACzD7B,SAAU,CACRb,IAAK,4IACLC,KAAM,UACNC,OAAQ,YAEVyC,YAAa,CACX3C,IAAK,yEACLC,KAAM,UACNC,OAAQ,eAEPJ,EAAAA,GAGQP,EAA0C,CACrD+B,YAAamB,EAAAA,EAAkBnB,Y","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/Upload/events.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/list-format/ListFormatDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/upload/UploadDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/ElementDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/lists/OlDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/lists/UlDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/Upload/UploadDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Value/Upload/UploadDocs.ts"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {UploadValueEvents} from '@dnb/eufemia/src/extensions/forms/Value/Upload/UploadDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Events\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: UploadValueEvents\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { PropertiesTableProps } from '../../shared/types'\nimport { UlProperties } from './../../elements/lists/UlDocs'\nimport { OlProperties } from './../../elements/lists/OlDocs'\n\nconst ListProperties = { ...UlProperties, ...OlProperties }\nconst { children, ...ListPropertiesWithoutChildren } = ListProperties\n\nexport const ListFormatProperties: PropertiesTableProps = {\n  value: {\n    doc: 'The value to format. Can be given as `children` instead.',\n    type: ['Array<React.ReactNode>'],\n    status: 'optional',\n  },\n  children: {\n    doc: 'The children to format.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  format: {\n    doc: 'Formatting options for the value when variant is `text`. See the [Intl.ListFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat) documentation.',\n    type: 'Intl.ListFormatOptions',\n    status: 'optional',\n  },\n  variant: {\n    doc: 'Defines if the value should be displayed in list format (`ol`, `ul`) or regular text format in one line. Defaults to `text`',\n    type: ['ol', 'ul', 'text'],\n    status: 'optional',\n  },\n  listType: {\n    doc: 'Defines the type of list styling used for list variants. Used together with variant `ol` and `ul`. Variant `ol`: `a`, `A`, `i`, `I` and `1`. Variant `ul`: `circle`, `disc` and `square`. Defaults to `undefined`',\n    type: [\n      'a',\n      'A',\n      'i',\n      'I',\n      '1',\n      'circle',\n      'disc',\n      'square',\n      'unstyled',\n      'undefined',\n    ],\n    status: 'optional',\n  },\n  ...ListPropertiesWithoutChildren,\n}\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const UploadProperties: PropertiesTableProps = {\n  id: {\n    doc: 'Unique id used with the useUpload hook to manage the files. Needed when wanting to connect with the useUpload hook.',\n    type: ['string', 'Function', 'Object', 'React.Context'],\n    status: 'optional',\n  },\n  acceptedFileTypes: {\n    doc: 'List of accepted file types. Either as string or [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype). When providing a list of [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype), the accepted file types will be presented in a table(see [example](/uilib/components/upload/demos/#upload-with-file-max-size-based-on-file-type)).',\n    type: ['Array<string>', 'Array<AcceptedFileType>'],\n    status: 'required',\n  },\n  filesAmountLimit: {\n    doc: 'Defines the amount of files the user can select and upload. Defaults to 100.',\n    type: 'number',\n    status: 'optional',\n  },\n  fileMaxSize: {\n    doc: 'Defines the max file size of each file in MB. Use either `0` or `false` to disable. Defaults to 5 MB.',\n    type: ['number', 'false'],\n    status: 'optional',\n  },\n  title: {\n    doc: 'Custom text property. Replaces the default title. Can be disabled using `false`.',\n    type: 'string',\n    status: 'optional',\n  },\n  text: {\n    doc: 'Custom text property. Replaces the default text. Can be disabled using `false`.',\n    type: 'string',\n    status: 'optional',\n  },\n  download: {\n    doc: 'Causes the browser to treat all listed files as downloadable instead of opening them in a new browser tab or window. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  allowDuplicates: {\n    doc: 'Allows uploading of duplicate files. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  disableDragAndDrop: {\n    doc: 'Disables file drag and drop, by removing the drop zone. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'Skeleton should be applied when loading content.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const AcceptedFileTypeProperties: PropertiesTableProps = {\n  fileType: {\n    doc: 'The name of the accepted file type.',\n    type: 'string',\n    status: 'required',\n  },\n  fileMaxSize: {\n    doc: 'Defines the max file size of the given file type in MB. Use either `0` or `false` to disable. If not provided, it defaults to the value of [Uploads](/uilib/components/upload/properties/#properties) `fileMaxSize` which defaults to 5 MB.',\n    type: ['number', 'false'],\n    status: 'optional',\n  },\n}\n\nexport const UploadEvents: PropertiesTableProps = {\n  onChange: {\n    doc: 'Will be called on `files` changes made by the user. Access the files with `{ files }` (containing each a `fileItem`).',\n    type: 'function',\n    status: 'optional',\n  },\n  onFileDelete: {\n    doc: 'Will be called once a file gets deleted by the user. Access the deleted file with `{ fileItem }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  onFileClick: {\n    doc: 'Will be called once a file gets clicked on by the user. Access the clicked file with `{ fileItem }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const FileItemProperties: PropertiesTableProps = {\n  file: {\n    doc: 'The file object. This is the same object as the one returned by the `File` API.',\n    type: 'File',\n    status: 'required',\n  },\n  id: {\n    doc: 'Unique ID for the file item. This ID is generated by the component and is not user-defined.',\n    type: 'string',\n    status: 'required',\n  },\n  exists: {\n    doc: 'Indicates if the file item already exists in the list of files. This is useful for distinguishing between new and existing files.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  isLoading: {\n    doc: 'Indicates if the file item is currently being loaded. This is useful for showing a loading state while the file is being processed.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessage: {\n    doc: 'Provide an error message to be displayed. This is useful for indicating issues with the file upload process.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  description: {\n    doc: 'Provide a description to be displayed. This is useful for providing additional information about the file.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  removeDeleteButton: {\n    doc: 'Set to `true` to remove the delete button from the file item. This is useful for preventing users from deleting files.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../shared/types'\n\nexport const ElementPropertiesWithoutSkeleton: PropertiesTableProps = {\n  innerRef: {\n    doc: 'Send along a custom React Ref.',\n    type: 'React.RefObject',\n    status: 'optional',\n  },\n  children: {\n    doc: 'Contents.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const ElementProperties: PropertiesTableProps = {\n  ...ElementPropertiesWithoutSkeleton,\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeletonMethod: {\n    doc: 'Can be `shape`, `font` or `form`. Defaults to `font`.',\n    type: 'string',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../shared/types'\n\nimport { ElementPropertiesWithoutSkeleton } from './../ElementDocs'\n\nexport const OlProperties: PropertiesTableProps = {\n  inside: {\n    doc: 'Defines the position of the marker.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  outside: {\n    doc: 'Defines the position of the marker (default).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  nested: {\n    doc: 'Will ensure a nested structure of several lists.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  ...ElementPropertiesWithoutSkeleton,\n}\n","import { PropertiesTableProps } from '../../shared/types'\nimport { ElementPropertiesWithoutSkeleton } from './../ElementDocs'\n\nexport const UlProperties: PropertiesTableProps = {\n  inside: {\n    doc: 'Defines the position of the marker.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  outside: {\n    doc: 'Defines the position of the marker (default).',\n    type: 'boolean',\n    status: 'optional',\n  },\n  nested: {\n    doc: 'Will ensure a nested structure of several lists.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  ...ElementPropertiesWithoutSkeleton,\n}\n","import {\n  UploadEvents,\n  UploadProperties,\n} from '../../../../components/upload/UploadDocs'\nimport { PropertiesTableProps } from '../../../../shared/types'\n\nexport const UploadFieldProperties: PropertiesTableProps = {\n  fileHandler: {\n    doc: 'File handler function that takes newly added files (`newFiles: UploadValue`) as a parameter and returns the processed files. The function can either be synchronous or asynchronous. It returns a promise (`Promise<UploadValue>`) containing the processed files when asynchronous.',\n    type: 'function',\n    status: 'optional',\n  },\n  ...UploadProperties,\n  title: undefined,\n  text: undefined,\n}\n\nexport const UploadFieldEvents: PropertiesTableProps = {\n  ...UploadEvents,\n}\n","import { PropertiesTableProps } from '../../../../shared/types'\n\nimport { ListFormatProperties } from '../../../../components/list-format/ListFormatDocs'\n\nimport { UploadFieldEvents } from '../../Field/Upload/UploadDocs'\n\nexport const UploadValueProperties: PropertiesTableProps = {\n  download: {\n    doc: 'Causes the browser to treat all listed files as downloadable instead of opening them in a new browser tab or window. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  displaySize: {\n    doc: 'Can be used to display the file size of the file. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  ...ListFormatProperties,\n}\n\nexport const UploadValueEvents: PropertiesTableProps = {\n  onFileClick: UploadFieldEvents.onFileClick,\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","UploadValueEvents","wrapper","MDXLayout","ListProperties","UlProperties","OlProperties","ListPropertiesWithoutChildren","ListFormatProperties","value","doc","type","status","format","variant","listType","UploadProperties","id","acceptedFileTypes","filesAmountLimit","fileMaxSize","title","text","download","allowDuplicates","disableDragAndDrop","skeleton","AcceptedFileTypeProperties","fileType","UploadEvents","onChange","onFileDelete","onFileClick","FileItemProperties","file","exists","isLoading","errorMessage","description","removeDeleteButton","ElementPropertiesWithoutSkeleton","innerRef","Td","Th","Tr","inside","outside","nested","UploadFieldProperties","fileHandler","undefined","UploadFieldEvents","UploadValueProperties","displaySize"],"sourceRoot":""}