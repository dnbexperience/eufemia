"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[60728],{356:function(e,t,o){o.d(t,{N:function(){return n},d:function(){return a}});var i=o(74677);const n={fileHandler:{doc:"File handler function that takes newly added files (`newFiles: UploadValue`) as a parameter and returns the processed files. The function can either be synchronous or asynchronous. It returns a promise (`Promise<UploadValue>`) containing the processed files when asynchronous.",type:"function",status:"optional"},...i.nr,title:void 0,text:void 0},a={...i.X9}},4755:function(e,t,o){o.d(t,{V:function(){return i}});const i={innerRef:{doc:"Send along a custom React Ref.",type:"React.RefObject",status:"optional"},children:{doc:"Contents.",type:"React.Node",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}}},9530:function(e,t,o){o.r(t);var i=o(31085),n=o(71184),a=o(55009),s=o(15616),l=o(92223);function r(e){const t=Object.assign({h2:"h2",h3:"h3"},(0,n.R)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{children:"Properties"}),"\n",(0,i.jsx)(t.h3,{children:"Value-specific properties"}),"\n",(0,i.jsx)(s.Ay,{props:a.o}),"\n",(0,i.jsx)(t.h3,{children:"General properties"}),"\n",(0,i.jsx)(s.Ay,{props:l.f,valueType:"Array<string | number>"})]})}t.default=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,n.R)(),e.components);return t?(0,i.jsx)(t,Object.assign({},e,{children:(0,i.jsx)(r,e)})):r(e)}},14700:function(e,t,o){o.d(t,{j:function(){return r}});var i=o(82234),n=o(41120);const a={...i.P,...n.b},{children:s,...l}=a,r={value:{doc:"The value to format. Can be given as `children` instead.",type:["Array<React.ReactNode>"],status:"optional"},children:{doc:"The children to format.",type:"React.ReactNode",status:"optional"},format:{doc:"Formatting options for the value when variant is `text`. See the [Intl.ListFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat) documentation.",type:"Intl.ListFormatOptions",status:"optional"},variant:{doc:"Defines if the value should be displayed in list format (`ol`, `ul`) or regular text format in one line. Defaults to `text`.",type:["ol","ul","text"],status:"optional"},listType:{doc:"Defines the type of list styling used for list variants. Used together with variant `ol` and `ul`. Variant `ol`: `a`, `A`, `i`, `I` and `1`. Variant `ul`: `circle`, `disc` and `square`. Defaults to `undefined`.",type:["a","A","i","I","1","circle","disc","square","unstyled","undefined"],status:"optional"},...l}},41120:function(e,t,o){o.d(t,{b:function(){return i}});const i={inside:{doc:"Defines the position of the marker.",type:"boolean",status:"optional"},outside:{doc:"Defines the position of the marker (default).",type:"boolean",status:"optional"},nested:{doc:"Will ensure a nested structure of several lists.",type:"boolean",status:"optional"},...o(4755).V}},55009:function(e,t,o){o.d(t,{o:function(){return a},q:function(){return s}});var i=o(14700),n=o(356);const a={download:{doc:"Causes the browser to treat all listed files as downloadable instead of opening them in a new browser tab or window. Defaults to `false`.",type:"boolean",status:"optional"},displaySize:{doc:"Can be used to display the file size of the file. Defaults to `false`.",type:"boolean",status:"optional"},...i.j},s={onFileClick:n.d.onFileClick}},69094:function(e,t,o){var i=o(23722);t.A=i.A},74677:function(e,t,o){o.d(t,{Py:function(){return n},X9:function(){return a},fb:function(){return s},nr:function(){return i}});const i={id:{doc:"Unique id used with the useUpload hook to manage the files. Needed when wanting to connect with the useUpload hook.",type:["string","Function","Object","React.Context"],status:"optional"},acceptedFileTypes:{doc:"List of accepted file types. Either as string or [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype). When providing a list of [AcceptedFileType](/uilib/components/upload/properties/#acceptedfiletype), the accepted file types will be presented in a table(see [example](/uilib/components/upload/demos/#upload-with-file-max-size-based-on-file-type)).",type:["Array<string>","Array<AcceptedFileType>"],status:"required"},filesAmountLimit:{doc:"Defines the amount of files the user can select and upload. Defaults to 100.",type:"number",status:"optional"},fileMaxSize:{doc:"Defines the max file size of each file in MB. Use either `0` or `false` to disable. Defaults to 5 MB.",type:["number","false"],status:"optional"},title:{doc:"Custom text property. Replaces the default title. Can be disabled using `false`.",type:"string",status:"optional"},text:{doc:"Custom text property. Replaces the default text. Can be disabled using `false`.",type:"string",status:"optional"},download:{doc:"Causes the browser to treat all listed files as downloadable instead of opening them in a new browser tab or window. Defaults to `false`.",type:"boolean",status:"optional"},allowDuplicates:{doc:"Allows uploading of duplicate files. Defaults to `false`.",type:"boolean",status:"optional"},disableDragAndDrop:{doc:"Disables file drag and drop, by removing the drop zone. Defaults to `false`.",type:"boolean",status:"optional"},skeleton:{doc:"Skeleton should be applied when loading content.",type:"boolean",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}},n={fileType:{doc:"The name of the accepted file type.",type:"string",status:"required"},fileMaxSize:{doc:"Defines the max file size of the given file type in MB. Use either `0` or `false` to disable. If not provided, it defaults to the value of [Uploads](/uilib/components/upload/properties/#properties) `fileMaxSize` which defaults to 5 MB.",type:["number","false"],status:"optional"}},a={onChange:{doc:"Will be called on `files` changes made by the user. Access the files with `{ files }` (containing each a `fileItem`).",type:"function",status:"optional"},onFileDelete:{doc:"Will be called once a file gets deleted by the user. Access the deleted file with `{ fileItem }`.",type:"function",status:"optional"},onFileClick:{doc:"Will be called once a file gets clicked on by the user. Access the clicked file with `{ fileItem }`.",type:"function",status:"optional"}},s={file:{doc:"The file object. This is the same object as the one returned by the `File` API.",type:"File",status:"required"},id:{doc:"Unique ID for the file item. This ID is generated by the component and is not user-defined.",type:"string",status:"required"},exists:{doc:"Indicates if the file item already exists in the list of files. This is useful for distinguishing between new and existing files.",type:"boolean",status:"optional"},isLoading:{doc:"Indicates if the file item is currently being loaded. This is useful for showing a loading state while the file is being processed.",type:"boolean",status:"optional"},errorMessage:{doc:"Provide an error message to be displayed. This is useful for indicating issues with the file upload process.",type:"React.ReactNode",status:"optional"},description:{doc:"Provide a description to be displayed. This is useful for providing additional information about the file.",type:"React.ReactNode",status:"optional"},removeDeleteButton:{doc:"Set to `true` to remove the delete button from the file item. This is useful for preventing users from deleting files.",type:"boolean",status:"optional"}}},81908:function(e,t,o){var i=o(94515);t.A=i.A},82234:function(e,t,o){o.d(t,{P:function(){return i}});const i={inside:{doc:"Defines the position of the marker.",type:"boolean",status:"optional"},outside:{doc:"Defines the position of the marker (default).",type:"boolean",status:"optional"},nested:{doc:"Will ensure a nested structure of several lists.",type:"boolean",status:"optional"},...o(4755).V}},92034:function(e,t,o){var i=o(31666);t.A=i.A},92223:function(e,t,o){o.d(t,{f:function(){return i}});const i={value:{doc:"Value for the value component. Will take precedence over the path value given in the data context.",type:"{valueType}",status:"optional"},defaultValue:{doc:"Default value for the value component. Will not take precedence over the path value given in the data context.",type:"{valueType}",status:"optional"},label:{doc:"Field label to show above the displayed value.",type:"string",status:"optional"},labelSrOnly:{doc:"Use `true` to make the label only readable by screen readers.",type:"boolean",status:"optional"},help:{doc:"Provide help content for the field using `title` and `content` as a string or React.Node. Additionally, you can set `open` to `true` to display the inline help, set the `breakout` property to `false` to disable the breakout of the inline help content, or use `renderAs` set to `dialog` to render the content in a [Dialog](/uilib/components/dialog/) (recommended for larger amounts of content).",type:"object",status:"optional"},transformLabel:{doc:"Transforms the label before it gets displayed. Receives the label as the first parameter. The second parameter is a object containing the `convertJsxToString` function.",type:"function",status:"optional"},inheritLabel:{doc:"Use `true` to inherit the label from a visible (rendered) field with the same path.",type:"boolean",status:"optional"},inheritVisibility:{doc:"Use `true` to inherit the visibility from a field with the same path. You can find more info in the [Value section](/uilib/extensions/forms/Value/#inherit-visibility-from-fields-based-on-path).",type:"boolean",status:"optional"},showEmpty:{doc:"Shows the value even if it is empty.",type:"boolean",status:"optional"},placeholder:{doc:"Text showing in place of the value if no value is given.",type:"string",status:"optional"},path:{doc:"JSON Pointer for where the data for this input is located in the source dataset.",type:"string",status:"optional"},inline:{doc:"For showing the value inline (not as a block element).",type:"boolean",status:"optional"},maxWidth:{doc:"Use `auto` for no max-width (use browser default), `small`, `medium` or `large` for predefined standard max widths. Defaults to `large`.",type:"string",status:"optional"},transformIn:{doc:"Transforms the `value` before its displayed in the value component.",type:"function",status:"optional"},"[Space](/uilib/layout/space/properties)":{doc:"Spacing properties like `top` or `bottom` are supported.",type:["string","object"],status:"optional"}}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-value-upload-properties-mdx-eb73d3fed7db908bb055.js.map