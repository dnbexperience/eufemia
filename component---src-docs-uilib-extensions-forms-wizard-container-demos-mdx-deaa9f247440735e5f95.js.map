{"version":3,"file":"component---src-docs-uilib-extensions-forms-wizard-container-demos-mdx-deaa9f247440735e5f95.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Wizard/Container/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/SubmitIndicator/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Wizard/Container/Examples.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.AsyncWizardContainer) _missingMdxReference(\"Examples.AsyncWizardContainer\", true);\n  if (!Examples.Default) _missingMdxReference(\"Examples.Default\", true);\n  if (!Examples.OnSubmitRequest) _missingMdxReference(\"Examples.OnSubmitRequest\", true);\n  if (!Examples.WithStatusMessage) _missingMdxReference(\"Examples.WithStatusMessage\", true);\n  if (!Examples.WithStatusMessageInMenu) _missingMdxReference(\"Examples.WithStatusMessageInMenu\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demo\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Basic usage\"\n    }), \"\\n\", _jsx(Examples.Default, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Async wizard\"\n    }), \"\\n\", _jsx(Examples.AsyncWizardContainer, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With StatusMessage in Menu\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This example uses the \", _jsx(_components.code, {\n        children: \"loose\"\n      }), \" mode to demonstrate status messages. Press the \", _jsx(_components.code, {\n        children: \"Send\"\n      }), \" button to see the status message. You may also navigate to the previous steps and press the \", _jsx(_components.code, {\n        children: \"Send\"\n      }), \" button again.\"]\n    }), \"\\n\", _jsx(Examples.WithStatusMessageInMenu, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With StatusMessage\"\n    }), \"\\n\", _jsx(Examples.WithStatusMessage, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Get errors before submit or step change\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the \", _jsx(_components.code, {\n        children: \"onSubmitRequest\"\n      }), \" property on the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Handler/\",\n        children: \"Form.Handler\"\n      }), \" to get visible errors before the form is submitted.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Each item in the error array contains the following properties in an object:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"path\"\n        }), \" The path of the field.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"value\"\n        }), \" The value of the field.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"displayValue\"\n        }), \" The displayed value of the field.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"label\"\n        }), \" The label of the field.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"props\"\n        }), \" The given field properties.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"error\"\n        }), \" The error of the field.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const onSubmitRequest: OnSubmitRequest = ({ getErrors }) => {\\n  getErrors().forEach(\\n    ({ path, value, displayValue, label, props, error }) => {\\n      // Do something with the error\\n      console.log(label, error.message)\\n    },\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Examples.OnSubmitRequest, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import { Button, Flex, FormLabel } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, FieldBlock, Form } from '@dnb/eufemia/src/extensions/forms'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      <Form.SubmitIndicator state=\"pending\" />\n    </ComponentBox>\n  )\n}\n\nexport const AsyncSubmitBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay}>\n            <Form.Card>\n              <Field.String path=\"/myField\" label=\"Short label\" />\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Form.Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AsyncChangeBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay} onChange={delay}>\n            <Form.Card>\n              <Field.String\n                path=\"/myField1\"\n                label=\"Label (with async validation)\"\n                placeholder=\"Write something ...\"\n                onChangeValidator={delay}\n              />\n              <FieldBlock width=\"medium\">\n                <Field.String\n                  path=\"/myField2\"\n                  width=\"stretch\"\n                  label=\"This is a long label\"\n                />\n              </FieldBlock>\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Form.Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\ntype CreateRequestReturn = Promise<{ hasError: boolean; cancel?: boolean }>\n\nexport const createRequest = () => {\n  let timeout: NodeJS.Timeout | null\n  let resolvePromise: ((value?: unknown) => void) | undefined\n\n  const fn = (t: number): CreateRequestReturn => {\n    return new Promise((resolve) => {\n      resolvePromise = resolve\n      timeout = setTimeout(() => {\n        resolve({ hasError: false })\n      }, t)\n    })\n  }\n\n  fn.cancel = () => {\n    resolvePromise?.({ hasError: true })\n    clearTimeout(timeout)\n    timeout = null\n  }\n\n  return fn\n}\n\nexport const WithinOtherComponents = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Flex.Horizontal align=\"center\">\n          <Form.SubmitButton showIndicator />\n          <Button variant=\"secondary\" icon=\"chevron_right\">\n            Secondary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <Button variant=\"tertiary\">\n            Tertiary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <FormLabel>\n            Label\n            <Form.SubmitIndicator state=\"pending\" />\n          </FormLabel>\n        </Flex.Horizontal>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithinALabel = () => {\n  return (\n    <ComponentBox data-visual-test=\"submit-indicator-with-label\">\n      <Form.Handler>\n        <Form.SubmitIndicator state=\"pending\" showLabel />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","import React from 'react'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\nimport { createRequest } from '../../Form/SubmitIndicator/Examples'\nimport {\n  Form,\n  Field,\n  Value,\n  Wizard,\n} from '@dnb/eufemia/src/extensions/forms'\nimport { P } from '@dnb/eufemia/src'\n\nexport const Default = () => {\n  return (\n    <ComponentBox data-visual-test=\"wizard-layout-card-border\">\n      {() => {\n        const initialData = {\n          firstName: 'John',\n          lastName: 'Doe',\n          streetName: 'Osloveien',\n          streetNr: 12,\n          postalCode: '1234',\n          city: 'Oslo',\n        }\n\n        const Step1 = () => (\n          <Wizard.Step title=\"Step 1\">\n            <Form.MainHeading>Heading</Form.MainHeading>\n            <Form.Card>\n              <P>Contents</P>\n            </Form.Card>\n            <Form.Card>\n              <P>Contents</P>\n            </Form.Card>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n        )\n\n        const Step2 = () => (\n          <Wizard.Step title=\"Step 2\">\n            <Form.MainHeading>Heading</Form.MainHeading>\n            <Form.Card>\n              <P>Contents</P>\n            </Form.Card>\n            <Form.Card>\n              <P>Contents</P>\n            </Form.Card>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n        )\n\n        const Summary = () => {\n          const { summaryTitle } = Form.useLocale().Step\n\n          return (\n            <Wizard.Step title={summaryTitle}>\n              <Form.MainHeading>Summary</Form.MainHeading>\n              <Form.Card>\n                <Form.SubHeading>Deliver address</Form.SubHeading>\n\n                <Value.SummaryList layout=\"grid\">\n                  <Value.Name.First path=\"/firstName\" />\n                  <Value.Name.Last path=\"/lastName\" />\n\n                  <Value.Composition label=\"Street\">\n                    <Value.String path=\"/streetName\" />\n                    <Value.Number path=\"/streetNr\" />\n                  </Value.Composition>\n\n                  <Value.Composition label=\"City\">\n                    <Value.String path=\"/postalCode\" />\n                    <Value.String path=\"/city\" />\n                  </Value.Composition>\n                </Value.SummaryList>\n\n                <Wizard.EditButton toStep={1} />\n              </Form.Card>\n\n              <Form.ButtonRow>\n                <Wizard.Buttons />\n                <Form.SubmitButton variant=\"send\" />\n              </Form.ButtonRow>\n            </Wizard.Step>\n          )\n        }\n\n        // Can be an async function, in case you need to make some async stuff\n        const onStepChange = async (step, mode) => {\n          if (mode === 'next') {\n            await new Promise((resolve) => setTimeout(resolve, 1000))\n          }\n          console.log('onStepChange', step, mode)\n        }\n\n        // Can be an async function, in case you need to make some async stuff\n        const onSubmit = async (data) => {\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n          console.log('onSubmit', data)\n        }\n\n        const MyForm = () => {\n          // Routers like \"react-router\" are supported as well\n          Wizard.useQueryLocator('my-wizard')\n\n          return (\n            <Form.Handler data={initialData} onSubmit={onSubmit}>\n              <Wizard.Container id=\"my-wizard\" onStepChange={onStepChange}>\n                <Step1 />\n                <Step2 />\n                <Summary />\n              </Wizard.Container>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AsyncWizardContainer = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const MyForm = () => {\n          const onStepChange = React.useCallback(async (index, mode) => {\n            console.log('onStepChange', index)\n\n            if (mode === 'next') {\n              try {\n                const request = createRequest()\n                await request(1000) // Simulate a request\n              } catch (error) {\n                return error\n              }\n            }\n\n            // Optional, you can show a FormStatus at the bottom of the form\n            return { info: 'Info message: ' + index }\n          }, [])\n\n          const onSubmit = React.useCallback(async (data) => {\n            console.log('onSubmit', data)\n\n            try {\n              const request = createRequest()\n              await request(1000) // Simulate a request\n            } catch (error) {\n              return error\n            }\n\n            // Optional, you can show a FormStatus at the bottom of the form\n            return { warning: 'Warning message' }\n          }, [])\n\n          const validator = React.useCallback(async (value) => {\n            try {\n              const request = createRequest()\n              await request(1000) // Simulate a request\n            } catch (error) {\n              return error\n            }\n\n            if (value === 'invalid') {\n              return Error('Error message')\n            }\n          }, [])\n\n          const validator1 = debounceAsync(validator)\n          const validator2 = debounceAsync(validator)\n\n          const Step1 = () => {\n            return (\n              <Wizard.Step title=\"Step 1\">\n                <Form.Card>\n                  <Field.String\n                    label=\"Required field with async validator\"\n                    onChangeValidator={validator1}\n                    path=\"/field1\"\n                    required\n                  />\n                  <Field.String\n                    label=\"Field with async validator\"\n                    onChangeValidator={validator2}\n                    path=\"/field2\"\n                  />\n                </Form.Card>\n\n                <Wizard.Buttons />\n              </Wizard.Step>\n            )\n          }\n\n          const Step2 = () => {\n            return (\n              <Wizard.Step title=\"Step 2\">\n                <Form.MainHeading>Heading</Form.MainHeading>\n\n                <Form.Card>\n                  <P>Contents of step 2</P>\n                </Form.Card>\n\n                <Form.ButtonRow>\n                  <Wizard.Buttons />\n                  <Form.SubmitButton variant=\"send\" />\n                </Form.ButtonRow>\n              </Wizard.Step>\n            )\n          }\n\n          return (\n            <Form.Handler onSubmit={onSubmit}>\n              <Wizard.Container onStepChange={onStepChange}>\n                <Step1 />\n                <Step2 />\n              </Wizard.Container>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const WithStatusMessage = () => {\n  return (\n    <ComponentBox data-visual-test=\"wizard-with-status-message\">\n      <Form.Handler>\n        <Wizard.Container\n          onStepChange={async (index, mode, { preventNavigation }) => {\n            preventNavigation()\n\n            return {\n              info: 'Info message.',\n              warning: 'Warning message.',\n            }\n          }}\n        >\n          <Wizard.Step title=\"Step 1\">\n            <Form.MainHeading>Step 1</Form.MainHeading>\n            <P>Content</P>\n            <Wizard.NextButton text=\"Press me to see the status message\" />\n          </Wizard.Step>\n        </Wizard.Container>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithStatusMessageInMenu = () => {\n  return (\n    <ComponentBox data-visual-test=\"wizard-with-status-message-in-menu\">\n      <Form.Handler\n        onSubmit={(data) => {\n          console.log('onSubmit', data)\n        }}\n      >\n        <Wizard.Container\n          onStepChange={async (index, mode) => {\n            console.log('onStepChange', index, mode)\n          }}\n          mode=\"loose\"\n          initialActiveIndex={2}\n        >\n          <Wizard.Step title=\"Step 1\">\n            <Field.String label=\"Step 1\" path=\"/step1\" required />\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step title=\"Step 2\">\n            <Field.String label=\"Step 2\" path=\"/step2\" required />\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step title=\"Step 3\">\n            <Field.String label=\"Step 3\" path=\"/step3\" />\n            <Wizard.Buttons />\n          </Wizard.Step>\n        </Wizard.Container>\n\n        <Form.SubmitButton />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const OnSubmitRequest = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        onSubmitRequest={({ getErrors }) => {\n          getErrors().forEach(({ label, error }) => {\n            console.log(label, error.message)\n          })\n        }}\n      >\n        <Wizard.Container mode=\"loose\" variant=\"drawer\">\n          <Wizard.Step title=\"Step 1\">\n            <Form.Card>\n              <Field.String\n                path=\"/foo\"\n                label=\"Foo\"\n                defaultValue=\"With default value\"\n                required\n              />\n              <Field.String path=\"/bar\" label=\"Bar\" required />\n            </Form.Card>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step title=\"Step 2\">\n            <Form.Card>\n              <Field.String path=\"/baz\" label=\"Baz\" required />\n            </Form.Card>\n\n            <Wizard.Buttons />\n\n            <Form.SubmitButton />\n          </Wizard.Step>\n        </Wizard.Container>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","h3","p","code","a","ul","li","pre","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","children","_jsx","href","className","id","component","Error","wrapper","MDXLayout","Default","ComponentBox","AsyncSubmitBehavior","scope","createRequest","debounceAsync","noInline","AsyncChangeBehavior","timeout","resolvePromise","fn","t","Promise","resolve","setTimeout","hasError","cancel","_resolvePromise","clearTimeout","WithinOtherComponents","WithinALabel","AsyncWizardContainer","WithStatusMessage","WithStatusMessageInMenu","OnSubmitRequest"],"sourceRoot":""}