"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[31847],{61239:function(n,e,t){t.r(e);var r=t(52322),i=t(45392);function a(n){const e=Object.assign({h2:"h2",p:"p",code:"code",a:"a",pre:"pre"},(0,i.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:"Description"}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.code,{children:"Wizard.Container"})," is a container component for multi-page forms including a ",(0,r.jsx)(e.a,{href:"/uilib/components/step-indicator/",children:"StepIndicator"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:["Use the ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Wizard/Step/",children:"Step"})," component to define the wizard steps."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import { Form, Wizard } from '@dnb/eufemia/extensions/forms'\n\nconst MyForm = () => {\n  return (\n    <Form.Handler>\n      <Wizard.Container>\n        <Wizard.Step title=\"Step 1\">...</Wizard.Step>\n      </Wizard.Container>\n    </Form.Handler>\n  )\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["You can also split or separate the ",(0,r.jsx)(e.code,{children:"Wizard.Step"})," and its content:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import { Form, Wizard } from '@dnb/eufemia/extensions/forms'\n\n// You can use the `Wizard.Step` in an external component like this:\nconst Step1 = () => (\n  <Wizard.Step title=\"Step 1\">\n    <Form.MainHeading>Heading</Form.MainHeading>\n    <Form.Card>\n      <P>Contents</P>\n    </Form.Card>\n    <Form.Card>\n      <P>Contents</P>\n    </Form.Card>\n\n    <Wizard.Buttons />\n  </Wizard.Step>\n)\n\nconst MyForm = () => {\n  return (\n    <Form.Handler>\n      <Wizard.Container>\n        <Step1 />\n      </Wizard.Container>\n    </Form.Handler>\n  )\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["You can mix and match the usage of ",(0,r.jsx)(e.code,{children:"Wizard.Step"})," and ",(0,r.jsx)(e.code,{children:"Flex.Stack"})," depending on your needs:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import { Form, Wizard } from '@dnb/eufemia/extensions/forms'\n\nconst Step2 = () => (\n  <Flex.Stack>\n    <Form.Card>\n      <P>Contents</P>\n    </Form.Card>\n    <Form.Card>\n      <P>Contents</P>\n    </Form.Card>\n\n    <Wizard.Buttons />\n  </Flex.Stack>\n)\n\nconst MyForm = () => {\n  return (\n    <Form.Handler>\n      <Wizard.Container>\n        <Wizard.Step title=\"Step 2\">\n          <Form.MainHeading>Heading</Form.MainHeading>\n          <Step2 />\n          <Wizard.Buttons />\n        </Wizard.Step>\n      </Wizard.Container>\n    </Form.Handler>\n  )\n}\n"})}),"\n",(0,r.jsx)(e.h2,{children:"Controlling the wizard steps"}),"\n",(0,r.jsxs)(e.p,{children:["To define a different initial index (than 0), you can use ",(0,r.jsx)(e.code,{children:"initialActiveIndex"})," hook."]}),"\n",(0,r.jsxs)(e.p,{children:["For controlling the wizard steps interactively, you can use the ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Wizard/useStep/",children:"useStep"})," hook:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import { Form, Wizard } from '@dnb/eufemia/extensions/forms'\n\nconst MyStep = () => {\n  const { setActiveIndex, activeIndex } = Wizard.useStep()\n  return (\n    <Form.Card>\n      <Button onClick={() => setActiveIndex(1)}>Go to step 2</Button>\n    </Form.Card>\n  )\n}\n\nconst MyForm = () => {\n  return (\n    <Form.Handler>\n      <Wizard.Container initialActiveIndex={3}>\n        <Wizard.Step>\n          <MyStep />\n        </Wizard.Step>\n      </Wizard.Container>\n    </Form.Handler>\n  )\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["When using the ",(0,r.jsx)(e.code,{children:"useStep"})," hook outside of the ",(0,r.jsx)(e.code,{children:"Wizard.Container"})," context, you need to provide an unique ",(0,r.jsx)(e.code,{children:"id"})," (string):"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import { Form, Wizard } from '@dnb/eufemia/extensions/forms'\n\nconst MyForm = () => {\n  const { setActiveIndex, activeIndex } = Wizard.useStep('unique-id')\n\n  return (\n    <Form.Handler>\n      <Wizard.Container id=\"unique-id\">\n        <Wizard.Step>\n          <Button onClick={() => setActiveIndex(0)}>Step 1</Button>\n        </Wizard.Step>\n        <Wizard.Step>\n          <Button onClick={() => setActiveIndex(1)}>Step 2</Button>\n        </Wizard.Step>\n      </Wizard.Container>\n    </Form.Handler>\n  )\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["You can also prevent the user from navigating to the next or previous step, by using the ",(0,r.jsx)(e.code,{children:"preventNavigation"})," callback function found as the third parameter, in the ",(0,r.jsx)(e.code,{children:"onStepChange"})," event."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'import { Form, Wizard } from \'@dnb/eufemia/extensions/forms\'\n\nconst MyForm = () => {\n  return (\n    <Form.Handler>\n      <Wizard.Container\n        onStepChange={(step, type, { preventNavigation }) => {\n          if (step === 2 && type === \'next\') {\n            preventNavigation()\n          }\n        }}\n      >\n        <Wizard.Step title="Step 1">\n          <P>Step 1</P>\n          <Wizard.Buttons />\n        </Wizard.Step>\n        <Wizard.Step title="Step 2">\n          <P>Step 2</P>\n          <Wizard.Buttons />\n        </Wizard.Step>\n        <Wizard.Step title="Step 3">\n          <P>Step 3</P>\n          <Wizard.Buttons />\n        </Wizard.Step>\n      </Wizard.Container>\n    </Form.Handler>\n  )\n}\n'})}),"\n",(0,r.jsx)(e.h2,{children:"Accessibility"}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.code,{children:"Wizard.Step"})," component uses an ",(0,r.jsx)(e.code,{children:"aria-label"})," attribute that matches the title property value. The step content is enclosed within a section element, which further enhances accessibility."]}),"\n",(0,r.jsx)(e.p,{children:"Whenever a new step becomes active, it automatically receives focus, ensuring that screen readers convey the relevant information to users."}),"\n",(0,r.jsx)(e.p,{children:"Additionally, during a step change the Wizard will scroll to the top of the form, to ensure the user is aware of the new content."})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(a,n)})):a(n)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-wizard-container-info-mdx-674e0c8fb10f701068c4.js.map