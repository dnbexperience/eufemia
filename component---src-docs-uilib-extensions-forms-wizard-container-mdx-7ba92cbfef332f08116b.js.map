{"version":3,"file":"component---src-docs-uilib-extensions-forms-wizard-container-mdx-7ba92cbfef332f08116b.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Wizard/Container.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Wizard/Container/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Wizard/Container/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/SubmitIndicator/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Wizard/Container/Examples.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/Wizard/Container/info';\nimport Demos from 'Docs/uilib/extensions/forms/Wizard/Container/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.AsyncWizardContainer) _missingMdxReference(\"Examples.AsyncWizardContainer\", true);\n  if (!Examples.Default) _missingMdxReference(\"Examples.Default\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demo\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Basic usage\"\n    }), \"\\n\", _jsx(Examples.Default, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Async wizard\"\n    }), \"\\n\", _jsx(Examples.AsyncWizardContainer, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Wizard.Container\"\n      }), \" is a container component for multi-page forms including a \", _jsx(_components.a, {\n        href: \"/uilib/components/step-indicator/\",\n        children: \"StepIndicator\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Wizard/Step/\",\n        children: \"Step\"\n      }), \" component to define the wizard steps.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Wizard } from '@dnb/eufemia/extensions/forms'\\n\\nconst MyForm = () => {\\n  return (\\n    <Form.Handler>\\n      <Wizard.Container>\\n        <Wizard.Step title=\\\"Step 1\\\">...</Wizard.Step>\\n      </Wizard.Container>\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also split or separate the \", _jsx(_components.code, {\n        children: \"Wizard.Step\"\n      }), \" and its content:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Wizard } from '@dnb/eufemia/extensions/forms'\\n\\n// You can use the `Wizard.Step` in an external component like this:\\nconst Step1 = () => (\\n  <Wizard.Step title=\\\"Step 1\\\">\\n    <Form.MainHeading>Heading</Form.MainHeading>\\n    <Card stack>\\n      <P>Contents</P>\\n    </Card>\\n    <Card stack>\\n      <P>Contents</P>\\n    </Card>\\n\\n    <Wizard.Buttons />\\n  </Wizard.Step>\\n)\\n\\nconst MyForm = () => {\\n  return (\\n    <Form.Handler>\\n      <Wizard.Container>\\n        <Step1 />\\n      </Wizard.Container>\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can mix and match the usage of \", _jsx(_components.code, {\n        children: \"Wizard.Step\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"Flex.Stack\"\n      }), \" depending on your needs:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Wizard } from '@dnb/eufemia/extensions/forms'\\n\\nconst Step2 = () => (\\n  <Flex.Stack>\\n    <Card stack>\\n      <P>Contents</P>\\n    </Card>\\n    <Card stack>\\n      <P>Contents</P>\\n    </Card>\\n\\n    <Wizard.Buttons />\\n  </Flex.Stack>\\n)\\n\\nconst MyForm = () => {\\n  return (\\n    <Form.Handler>\\n      <Wizard.Container>\\n        <Wizard.Step title=\\\"Step 2\\\">\\n          <Form.MainHeading>Heading</Form.MainHeading>\\n          <Step2 />\\n          <Wizard.Buttons />\\n        </Wizard.Step>\\n      </Wizard.Container>\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Controlling the wizard steps\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To define a different initial index (than 0), you can use \", _jsx(_components.code, {\n        children: \"initialActiveIndex\"\n      }), \" hook.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For controlling the wizard steps interactively, you can use the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Wizard/useStep/\",\n        children: \"useStep\"\n      }), \" hook:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Wizard } from '@dnb/eufemia/extensions/forms'\\n\\nconst MyStep = () => {\\n  const { setActiveIndex, activeIndex } = Wizard.useStep()\\n  return (\\n    <Card stack>\\n      <Button onClick={() => setActiveIndex(1)}>Go to step 2</Button>\\n    </Card>\\n  )\\n}\\n\\nconst MyForm = () => {\\n  return (\\n    <Form.Handler>\\n      <Wizard.Container initialActiveIndex={3}>\\n        <Wizard.Step>\\n          <MyStep />\\n        </Wizard.Step>\\n      </Wizard.Container>\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When using the \", _jsx(_components.code, {\n        children: \"useStep\"\n      }), \" hook outside of the \", _jsx(_components.code, {\n        children: \"Wizard.Container\"\n      }), \" context, you need to provide an unique \", _jsx(_components.code, {\n        children: \"id\"\n      }), \" (string):\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Wizard } from '@dnb/eufemia/extensions/forms'\\n\\nconst MyForm = () => {\\n  const { setActiveIndex, activeIndex } = Wizard.useStep('unique-id')\\n\\n  return (\\n    <Form.Handler>\\n      <Wizard.Container id=\\\"unique-id\\\">\\n        <Wizard.Step>\\n          <Button onClick={() => setActiveIndex(0)}>Step 1</Button>\\n        </Wizard.Step>\\n        <Wizard.Step>\\n          <Button onClick={() => setActiveIndex(1)}>Step 2</Button>\\n        </Wizard.Step>\\n      </Wizard.Container>\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Wizard.Step\"\n      }), \" component uses an \", _jsx(_components.code, {\n        children: \"aria-label\"\n      }), \" attribute that matches the title prop value. The step content is enclosed within a section element, which further enhances accessibility.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Whenever a new step becomes active, it automatically receives focus, ensuring that screen readers convey the relevant information to users.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Additionally, during a step change the Wizard will scroll to the top of the form, to ensure the user is aware of the new content.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { Button, Card, Flex, FormLabel } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, FieldBlock, Form } from '@dnb/eufemia/src/extensions/forms'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      <Form.SubmitIndicator state=\"pending\" />\n    </ComponentBox>\n  )\n}\n\nexport const AsyncSubmitBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay}>\n            <Card stack>\n              <Field.String path=\"/myField\" label=\"Short label\" />\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AsyncChangeBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay} onChange={delay}>\n            <Card stack>\n              <Field.String\n                path=\"/myField1\"\n                label=\"Label (with async validation)\"\n                placeholder=\"Write something ...\"\n                validator={delay}\n              />\n              <FieldBlock width=\"medium\">\n                <Field.String\n                  path=\"/myField2\"\n                  width=\"stretch\"\n                  label=\"This is a long label\"\n                />\n              </FieldBlock>\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\ntype CreateRequestReturn = Promise<{ hasError: boolean; cancel?: boolean }>\n\nexport const createRequest = () => {\n  let timeout: NodeJS.Timeout | null\n  let resolvePromise: ((value?: unknown) => void) | undefined\n\n  const fn = (t: number): CreateRequestReturn => {\n    return new Promise((resolve) => {\n      resolvePromise = resolve\n      timeout = setTimeout(() => {\n        resolve({ hasError: false })\n      }, t)\n    })\n  }\n\n  fn.cancel = () => {\n    resolvePromise?.({ hasError: true })\n    clearTimeout(timeout)\n    timeout = null\n  }\n\n  return fn\n}\n\nexport const WithinOtherComponents = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Flex.Horizontal align=\"center\">\n          <Form.SubmitButton showIndicator />\n          <Button variant=\"secondary\" icon=\"chevron_right\">\n            Secondary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <Button variant=\"tertiary\">\n            Tertiary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <FormLabel>\n            Label\n            <Form.SubmitIndicator state=\"pending\" />\n          </FormLabel>\n        </Flex.Horizontal>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","import React from 'react'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\nimport { createRequest } from '../../Form/SubmitIndicator/Examples'\nimport {\n  Form,\n  Field,\n  Value,\n  Wizard,\n} from '@dnb/eufemia/src/extensions/forms'\nimport { Card, P } from '@dnb/eufemia/src'\n\nexport const Default = () => {\n  return (\n    <ComponentBox data-visual-test=\"wizard-layout-card-border\">\n      {() => {\n        const initialData = {\n          firstName: 'John',\n          lastName: 'Doe',\n          streetName: 'Osloveien',\n          streetNr: 12,\n          postalCode: '1234',\n          city: 'Oslo',\n        }\n\n        const Step1 = () => (\n          <Wizard.Step title=\"Step 1\">\n            <Form.MainHeading>Heading</Form.MainHeading>\n            <Card stack>\n              <P>Contents</P>\n            </Card>\n            <Card stack>\n              <P>Contents</P>\n            </Card>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n        )\n\n        const Step2 = () => (\n          <Wizard.Step title=\"Step 2\">\n            <Form.MainHeading>Heading</Form.MainHeading>\n            <Card stack>\n              <P>Contents</P>\n            </Card>\n            <Card stack>\n              <P>Contents</P>\n            </Card>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n        )\n\n        const Summary = () => {\n          const { summaryTitle } = Form.useLocale().Step\n\n          return (\n            <Wizard.Step title={summaryTitle}>\n              <Form.MainHeading>Summary</Form.MainHeading>\n              <Card stack>\n                <Form.SubHeading>Deliver address</Form.SubHeading>\n\n                <Value.SummaryList layout=\"grid\">\n                  <Value.Name.First path=\"/firstName\" />\n                  <Value.Name.Last path=\"/lastName\" />\n\n                  <Value.Composition label=\"Street\">\n                    <Value.String path=\"/streetName\" />\n                    <Value.Number path=\"/streetNr\" />\n                  </Value.Composition>\n\n                  <Value.Composition label=\"City\">\n                    <Value.String path=\"/postalCode\" />\n                    <Value.String path=\"/city\" />\n                  </Value.Composition>\n                </Value.SummaryList>\n\n                <Wizard.EditButton toStep={1} />\n              </Card>\n\n              <Form.ButtonRow>\n                <Wizard.Buttons />\n                <Form.SubmitButton variant=\"send\" />\n              </Form.ButtonRow>\n            </Wizard.Step>\n          )\n        }\n\n        // Can be an async function, in case you need to make some async stuff\n        const onStepChange = async (step, mode) => {\n          if (mode === 'next') {\n            await new Promise((resolve) => setTimeout(resolve, 1000))\n          }\n          console.log('onStepChange', step, mode)\n        }\n\n        // Can be an async function, in case you need to make some async stuff\n        const onSubmit = async (data) => {\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n          console.log('onSubmit', data)\n        }\n\n        const MyForm = () => {\n          // Routers like \"react-router\" are supported as well\n          Wizard.useQueryLocator('my-wizard')\n\n          return (\n            <Form.Handler data={initialData} onSubmit={onSubmit}>\n              <Wizard.Container id=\"my-wizard\" onStepChange={onStepChange}>\n                <Step1 />\n                <Step2 />\n                <Summary />\n              </Wizard.Container>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AsyncWizardContainer = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const MyForm = () => {\n          const onStepChange = React.useCallback(async (index, mode) => {\n            console.log('onStepChange', index)\n\n            if (mode === 'next') {\n              try {\n                const request = createRequest()\n                await request(1000) // Simulate a request\n              } catch (error) {\n                return error\n              }\n            }\n\n            // Optional, you can show a FormStatus at the bottom of the form\n            return { info: 'Info message: ' + index }\n          }, [])\n\n          const onSubmit = React.useCallback(async (data) => {\n            console.log('onSubmit', data)\n\n            try {\n              const request = createRequest()\n              await request(1000) // Simulate a request\n            } catch (error) {\n              return error\n            }\n\n            // Optional, you can show a FormStatus at the bottom of the form\n            return { warning: 'Warning message' }\n          }, [])\n\n          const validator = React.useCallback(async (value) => {\n            try {\n              const request = createRequest()\n              await request(1000) // Simulate a request\n            } catch (error) {\n              return error\n            }\n\n            if (value === 'invalid') {\n              return Error('Error message')\n            }\n          }, [])\n\n          const validator1 = debounceAsync(validator)\n          const validator2 = debounceAsync(validator)\n\n          const Step1 = () => {\n            return (\n              <Wizard.Step title=\"Step 1\">\n                <Card stack>\n                  <Field.String\n                    label=\"Required field with async validator\"\n                    validator={validator1}\n                    path=\"/field1\"\n                    required\n                  />\n                  <Field.String\n                    label=\"Field with async validator\"\n                    validator={validator2}\n                    path=\"/field2\"\n                  />\n                </Card>\n\n                <Wizard.Buttons />\n              </Wizard.Step>\n            )\n          }\n\n          const Step2 = () => {\n            return (\n              <Wizard.Step title=\"Step 2\">\n                <Form.MainHeading>Heading</Form.MainHeading>\n\n                <Card stack>\n                  <P>Contents of step 2</P>\n                </Card>\n\n                <Form.ButtonRow>\n                  <Wizard.Buttons />\n                  <Form.SubmitButton variant=\"send\" />\n                </Form.ButtonRow>\n              </Wizard.Step>\n            )\n          }\n\n          return (\n            <Form.Handler onSubmit={onSubmit}>\n              <Wizard.Container onStepChange={onStepChange}>\n                <Step1 />\n                <Step2 />\n              </Wizard.Container>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","_components","h2","h3","Examples","_missingMdxReference","id","component","Error","p","code","a","pre","href","className","Default","ComponentBox","AsyncSubmitBehavior","scope","createRequest","debounceAsync","noInline","AsyncChangeBehavior","timeout","resolvePromise","fn","t","Promise","resolve","setTimeout","hasError","cancel","_resolvePromise","clearTimeout","WithinOtherComponents","AsyncWizardContainer"],"sourceRoot":""}