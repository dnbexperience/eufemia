{"version":3,"file":"component---src-docs-uilib-extensions-forms-wizard-container-mdx-90ce72f290d08dc920ee.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Wizard/Container.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Wizard/Container/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Wizard/Container/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/SubmitIndicator/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Wizard/Container/Examples.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/Wizard/Container/info';\nimport Demos from 'Docs/uilib/extensions/forms/Wizard/Container/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.AsyncWizardContainer) _missingMdxReference(\"Examples.AsyncWizardContainer\", true);\n  if (!Examples.Default) _missingMdxReference(\"Examples.Default\", true);\n  if (!Examples.OnSubmitRequest) _missingMdxReference(\"Examples.OnSubmitRequest\", true);\n  if (!Examples.WithStatusMessage) _missingMdxReference(\"Examples.WithStatusMessage\", true);\n  if (!Examples.WithStatusMessageInMenu) _missingMdxReference(\"Examples.WithStatusMessageInMenu\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demo\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Basic usage\"\n    }), \"\\n\", _jsx(Examples.Default, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Async wizard\"\n    }), \"\\n\", _jsx(Examples.AsyncWizardContainer, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With StatusMessage in Menu\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This example uses the \", _jsx(_components.code, {\n        children: \"loose\"\n      }), \" mode to demonstrate status messages. Press the \", _jsx(_components.code, {\n        children: \"Send\"\n      }), \" button to see the status message. You may also navigate to the previous steps and press the \", _jsx(_components.code, {\n        children: \"Send\"\n      }), \" button again.\"]\n    }), \"\\n\", _jsx(Examples.WithStatusMessageInMenu, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"With StatusMessage\"\n    }), \"\\n\", _jsx(Examples.WithStatusMessage, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Get errors before submit or step change\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the \", _jsx(_components.code, {\n        children: \"onSubmitRequest\"\n      }), \" property on the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Handler/\",\n        children: \"Form.Handler\"\n      }), \" to get visible errors before the form is submitted.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Each item in the error array contains the following properties in an object:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"path\"\n        }), \" The path of the field.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"value\"\n        }), \" The value of the field.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"displayValue\"\n        }), \" The displayed value of the field.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"label\"\n        }), \" The label of the field.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"props\"\n        }), \" The given field properties.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"error\"\n        }), \" The error of the field.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"const onSubmitRequest: OnSubmitRequest = ({ getErrors }) => {\\n  getErrors().forEach(\\n    ({ path, value, displayValue, label, props, error }) => {\\n      // Do something with the error\\n      console.log(label, error.message)\\n    },\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Examples.OnSubmitRequest, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Wizard.Container\"\n      }), \" is a container component for multi-page forms including a \", _jsx(_components.a, {\n        href: \"/uilib/components/step-indicator/\",\n        children: \"StepIndicator\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Wizard/Step/\",\n        children: \"Step\"\n      }), \" component to define the wizard steps.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Wizard } from '@dnb/eufemia/extensions/forms'\\n\\nconst MyForm = () => {\\n  return (\\n    <Form.Handler>\\n      <Wizard.Container>\\n        <Wizard.Step title=\\\"Step 1\\\">...</Wizard.Step>\\n      </Wizard.Container>\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also split or separate the \", _jsx(_components.code, {\n        children: \"Wizard.Step\"\n      }), \" and its content:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Wizard } from '@dnb/eufemia/extensions/forms'\\n\\n// You can use the `Wizard.Step` in an external component like this:\\nconst Step1 = () => (\\n  <Wizard.Step title=\\\"Step 1\\\">\\n    <Form.MainHeading>Heading</Form.MainHeading>\\n    <Form.Card>\\n      <P>Contents</P>\\n    </Form.Card>\\n    <Form.Card>\\n      <P>Contents</P>\\n    </Form.Card>\\n\\n    <Wizard.Buttons />\\n  </Wizard.Step>\\n)\\n\\nconst MyForm = () => {\\n  return (\\n    <Form.Handler>\\n      <Wizard.Container>\\n        <Step1 />\\n      </Wizard.Container>\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can mix and match the usage of \", _jsx(_components.code, {\n        children: \"Wizard.Step\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"Flex.Stack\"\n      }), \" depending on your needs:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Wizard } from '@dnb/eufemia/extensions/forms'\\n\\nconst Step2 = () => (\\n  <Flex.Stack>\\n    <Form.Card>\\n      <P>Contents</P>\\n    </Form.Card>\\n    <Form.Card>\\n      <P>Contents</P>\\n    </Form.Card>\\n\\n    <Wizard.Buttons />\\n  </Flex.Stack>\\n)\\n\\nconst MyForm = () => {\\n  return (\\n    <Form.Handler>\\n      <Wizard.Container>\\n        <Wizard.Step title=\\\"Step 2\\\">\\n          <Form.MainHeading>Heading</Form.MainHeading>\\n          <Step2 />\\n          <Wizard.Buttons />\\n        </Wizard.Step>\\n      </Wizard.Container>\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Controlling the wizard steps\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To define a different initial index (than 0), you can use \", _jsx(_components.code, {\n        children: \"initialActiveIndex\"\n      }), \" property.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Note:\"\n      }), \" When using \", _jsx(_components.code, {\n        children: \"initialActiveIndex\"\n      }), \", there may be previous steps with unknown field validation statuses. To address this, you can use the \", _jsx(_components.code, {\n        children: \"keepInDOM\"\n      }), \" property to ensure that some or all steps are not removed from the DOM, so validation runs on fields in previous steps.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For controlling the wizard steps interactively, you can use the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Wizard/useStep/\",\n        children: \"useStep\"\n      }), \" hook:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Wizard } from '@dnb/eufemia/extensions/forms'\\n\\nconst MyStep = () => {\\n  const { setActiveIndex, activeIndex } = Wizard.useStep()\\n  return (\\n    <Form.Card>\\n      <Button onClick={() => setActiveIndex(1)}>Go to step 2</Button>\\n    </Form.Card>\\n  )\\n}\\n\\nconst MyForm = () => {\\n  return (\\n    <Form.Handler>\\n      <Wizard.Container initialActiveIndex={3}>\\n        <Wizard.Step>\\n          <MyStep />\\n        </Wizard.Step>\\n      </Wizard.Container>\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When using the \", _jsx(_components.code, {\n        children: \"useStep\"\n      }), \" hook outside of the \", _jsx(_components.code, {\n        children: \"Wizard.Container\"\n      }), \" context, you need to provide an unique \", _jsx(_components.code, {\n        children: \"id\"\n      }), \" (string, function, object or React Context as the reference):\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Wizard } from '@dnb/eufemia/extensions/forms'\\n\\nconst myContainerId = 'unique-id' // or a function, object or React Context reference\\n\\nconst MyForm = () => {\\n  const { setActiveIndex, activeIndex } = Wizard.useStep(myContainerId)\\n\\n  return (\\n    <Form.Handler>\\n      <Wizard.Container id={myContainerId}>\\n        <Wizard.Step>\\n          <Button onClick={() => setActiveIndex(0)}>Step 1</Button>\\n        </Wizard.Step>\\n        <Wizard.Step>\\n          <Button onClick={() => setActiveIndex(1)}>Step 2</Button>\\n        </Wizard.Step>\\n      </Wizard.Container>\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also prevent the user from navigating to the next or previous step, by using the \", _jsx(_components.code, {\n        children: \"preventNavigation\"\n      }), \" callback function found as the third parameter, in the \", _jsx(_components.code, {\n        children: \"onStepChange\"\n      }), \" event.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Form, Wizard } from '@dnb/eufemia/extensions/forms'\\n\\nconst MyForm = () => {\\n  return (\\n    <Form.Handler>\\n      <Wizard.Container\\n        onStepChange={(step, type, { preventNavigation }) => {\\n          if (step === 2 && type === 'next') {\\n            preventNavigation()\\n          }\\n        }}\\n      >\\n        <Wizard.Step title=\\\"Step 1\\\">\\n          <P>Step 1</P>\\n          <Wizard.Buttons />\\n        </Wizard.Step>\\n        <Wizard.Step title=\\\"Step 2\\\">\\n          <P>Step 2</P>\\n          <Wizard.Buttons />\\n        </Wizard.Step>\\n        <Wizard.Step title=\\\"Step 3\\\">\\n          <P>Step 3</P>\\n          <Wizard.Buttons />\\n        </Wizard.Step>\\n      </Wizard.Container>\\n    </Form.Handler>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Modes\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"strict\"\n        }), \" mode is the default. The user can only navigate forward using the \", _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/Wizard/NextButton/\",\n          children: \"Wizard.NextButton\"\n        }), \", not via the menu. However, the previous step remains active, allowing the user to go back at any time – even if there are errors in the current step.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use \", _jsx(_components.code, {\n          children: \"loose\"\n        }), \" mode if the user should be able to navigate freely between all steps, including those that have not been visited before. When there is an error in the current step, the user can navigate to other steps via the menu, but not via the \", _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/Wizard/NextButton/\",\n          children: \"Wizard.NextButton\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Accessibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Wizard.Step\"\n      }), \" component uses an \", _jsx(_components.code, {\n        children: \"aria-label\"\n      }), \" attribute that matches the title property value. The step content is enclosed within a section element, which further enhances accessibility.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Whenever a new step becomes active, it automatically receives focus, ensuring that screen readers convey the relevant information to users.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Additionally, during a step change the Wizard will scroll to the top of the form, to ensure the user is aware of the new content.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { Button, Flex, FormLabel } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, FieldBlock, Form } from '@dnb/eufemia/src/extensions/forms'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      <Form.SubmitIndicator state=\"pending\" />\n    </ComponentBox>\n  )\n}\n\nexport const AsyncSubmitBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay}>\n            <Form.Card>\n              <Field.String path=\"/myField\" label=\"Short label\" />\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Form.Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AsyncChangeBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay} onChange={delay}>\n            <Form.Card>\n              <Field.String\n                path=\"/myField1\"\n                label=\"Label (with async validation)\"\n                placeholder=\"Write something ...\"\n                onChangeValidator={delay}\n              />\n              <FieldBlock width=\"medium\">\n                <Field.String\n                  path=\"/myField2\"\n                  width=\"stretch\"\n                  label=\"This is a long label\"\n                />\n              </FieldBlock>\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Form.Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\ntype CreateRequestReturn = Promise<{ hasError: boolean; cancel?: boolean }>\n\nexport const createRequest = () => {\n  let timeout: NodeJS.Timeout | null\n  let resolvePromise: ((value?: unknown) => void) | undefined\n\n  const fn = (t: number): CreateRequestReturn => {\n    return new Promise((resolve) => {\n      resolvePromise = resolve\n      timeout = setTimeout(() => {\n        resolve({ hasError: false })\n      }, t)\n    })\n  }\n\n  fn.cancel = () => {\n    resolvePromise?.({ hasError: true })\n    clearTimeout(timeout)\n    timeout = null\n  }\n\n  return fn\n}\n\nexport const WithinOtherComponents = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Flex.Horizontal align=\"center\">\n          <Form.SubmitButton showIndicator />\n          <Button variant=\"secondary\" icon=\"chevron_right\">\n            Secondary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <Button variant=\"tertiary\">\n            Tertiary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <FormLabel>\n            Label\n            <Form.SubmitIndicator state=\"pending\" />\n          </FormLabel>\n        </Flex.Horizontal>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithinALabel = () => {\n  return (\n    <ComponentBox data-visual-test=\"submit-indicator-with-label\">\n      <Form.Handler>\n        <Form.SubmitIndicator state=\"pending\" showLabel />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n","import React from 'react'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\nimport { createRequest } from '../../Form/SubmitIndicator/Examples'\nimport {\n  Form,\n  Field,\n  Value,\n  Wizard,\n} from '@dnb/eufemia/src/extensions/forms'\nimport { P } from '@dnb/eufemia/src'\n\nexport const Default = () => {\n  return (\n    <ComponentBox data-visual-test=\"wizard-layout-card-border\">\n      {() => {\n        const initialData = {\n          firstName: 'John',\n          lastName: 'Doe',\n          streetName: 'Osloveien',\n          streetNr: 12,\n          postalCode: '1234',\n          city: 'Oslo',\n        }\n\n        const Step1 = () => (\n          <Wizard.Step title=\"Step 1\">\n            <Form.MainHeading>Heading</Form.MainHeading>\n            <Form.Card>\n              <P>Contents</P>\n            </Form.Card>\n            <Form.Card>\n              <P>Contents</P>\n            </Form.Card>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n        )\n\n        const Step2 = () => (\n          <Wizard.Step title=\"Step 2\">\n            <Form.MainHeading>Heading</Form.MainHeading>\n            <Form.Card>\n              <P>Contents</P>\n            </Form.Card>\n            <Form.Card>\n              <P>Contents</P>\n            </Form.Card>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n        )\n\n        const Summary = () => {\n          const { summaryTitle } = Form.useLocale().Step\n\n          return (\n            <Wizard.Step title={summaryTitle}>\n              <Form.MainHeading>Summary</Form.MainHeading>\n              <Form.Card>\n                <Form.SubHeading>Deliver address</Form.SubHeading>\n\n                <Value.SummaryList layout=\"grid\">\n                  <Value.Name.First path=\"/firstName\" />\n                  <Value.Name.Last path=\"/lastName\" />\n\n                  <Value.Composition label=\"Street\">\n                    <Value.String path=\"/streetName\" />\n                    <Value.Number path=\"/streetNr\" />\n                  </Value.Composition>\n\n                  <Value.Composition label=\"City\">\n                    <Value.String path=\"/postalCode\" />\n                    <Value.String path=\"/city\" />\n                  </Value.Composition>\n                </Value.SummaryList>\n\n                <Wizard.EditButton toStep={1} />\n              </Form.Card>\n\n              <Form.ButtonRow>\n                <Wizard.Buttons />\n                <Form.SubmitButton variant=\"send\" />\n              </Form.ButtonRow>\n            </Wizard.Step>\n          )\n        }\n\n        // Can be an async function, in case you need to make some async stuff\n        const onStepChange = async (step, mode) => {\n          if (mode === 'next') {\n            await new Promise((resolve) => setTimeout(resolve, 1000))\n          }\n          console.log('onStepChange', step, mode)\n        }\n\n        // Can be an async function, in case you need to make some async stuff\n        const onSubmit = async (data) => {\n          await new Promise((resolve) => setTimeout(resolve, 2000))\n          console.log('onSubmit', data)\n        }\n\n        const MyForm = () => {\n          // Routers like \"react-router\" are supported as well\n          Wizard.useQueryLocator('my-wizard')\n\n          return (\n            <Form.Handler data={initialData} onSubmit={onSubmit}>\n              <Wizard.Container id=\"my-wizard\" onStepChange={onStepChange}>\n                <Step1 />\n                <Step2 />\n                <Summary />\n              </Wizard.Container>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AsyncWizardContainer = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const MyForm = () => {\n          const onStepChange = React.useCallback(async (index, mode) => {\n            console.log('onStepChange', index)\n\n            if (mode === 'next') {\n              try {\n                const request = createRequest()\n                await request(1000) // Simulate a request\n              } catch (error) {\n                return error\n              }\n            }\n\n            // Optional, you can show a FormStatus at the bottom of the form\n            return { info: `Info message: ${index}` }\n          }, [])\n\n          const onSubmit = React.useCallback(async (data) => {\n            console.log('onSubmit', data)\n\n            try {\n              const request = createRequest()\n              await request(1000) // Simulate a request\n            } catch (error) {\n              return error\n            }\n\n            // Optional, you can show a FormStatus at the bottom of the form\n            return { warning: 'Warning message' }\n          }, [])\n\n          const validator = React.useCallback(async (value) => {\n            try {\n              const request = createRequest()\n              await request(1000) // Simulate a request\n            } catch (error) {\n              return error\n            }\n\n            if (value === 'invalid') {\n              return Error('Error message')\n            }\n          }, [])\n\n          const validator1 = debounceAsync(validator)\n          const validator2 = debounceAsync(validator)\n\n          const Step1 = () => {\n            return (\n              <Wizard.Step title=\"Step 1\">\n                <Form.Card>\n                  <Field.String\n                    label=\"Required field with async validator\"\n                    onChangeValidator={validator1}\n                    path=\"/field1\"\n                    required\n                  />\n                  <Field.String\n                    label=\"Field with async validator\"\n                    onChangeValidator={validator2}\n                    path=\"/field2\"\n                  />\n                </Form.Card>\n\n                <Wizard.Buttons />\n              </Wizard.Step>\n            )\n          }\n\n          const Step2 = () => {\n            return (\n              <Wizard.Step title=\"Step 2\">\n                <Form.MainHeading>Heading</Form.MainHeading>\n\n                <Form.Card>\n                  <P>Contents of step 2</P>\n                </Form.Card>\n\n                <Form.ButtonRow>\n                  <Wizard.Buttons />\n                  <Form.SubmitButton variant=\"send\" />\n                </Form.ButtonRow>\n              </Wizard.Step>\n            )\n          }\n\n          return (\n            <Form.Handler onSubmit={onSubmit}>\n              <Wizard.Container onStepChange={onStepChange}>\n                <Step1 />\n                <Step2 />\n              </Wizard.Container>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const WithStatusMessage = () => {\n  return (\n    <ComponentBox data-visual-test=\"wizard-with-status-message\">\n      <Form.Handler>\n        <Wizard.Container\n          onStepChange={async (index, mode, { preventNavigation }) => {\n            preventNavigation()\n\n            return {\n              info: 'Info message.',\n              warning: 'Warning message.',\n            }\n          }}\n        >\n          <Wizard.Step title=\"Step 1\">\n            <Form.MainHeading>Step 1</Form.MainHeading>\n            <P>Content</P>\n            <Wizard.NextButton text=\"Press me to see the status message\" />\n          </Wizard.Step>\n        </Wizard.Container>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithStatusMessageInMenu = () => {\n  return (\n    <ComponentBox data-visual-test=\"wizard-with-status-message-in-menu\">\n      <Form.Handler\n        onSubmit={(data) => {\n          console.log('onSubmit', data)\n        }}\n      >\n        <Wizard.Container\n          onStepChange={async (index, mode) => {\n            console.log('onStepChange', index, mode)\n          }}\n          mode=\"loose\"\n          initialActiveIndex={2}\n        >\n          <Wizard.Step title=\"Step 1\">\n            <Field.String label=\"Step 1\" path=\"/step1\" required />\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step title=\"Step 2\">\n            <Field.String label=\"Step 2\" path=\"/step2\" required />\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step title=\"Step 3\">\n            <Field.String label=\"Step 3\" path=\"/step3\" />\n            <Wizard.Buttons />\n          </Wizard.Step>\n        </Wizard.Container>\n\n        <Form.SubmitButton />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const OnSubmitRequest = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        onSubmitRequest={({ getErrors }) => {\n          getErrors().forEach(({ label, error }) => {\n            console.log(label, error.message)\n          })\n        }}\n      >\n        <Wizard.Container mode=\"loose\" variant=\"drawer\">\n          <Wizard.Step title=\"Step 1\">\n            <Form.Card>\n              <Field.String\n                path=\"/foo\"\n                label=\"Foo\"\n                defaultValue=\"With default value\"\n                required\n              />\n              <Field.String path=\"/bar\" label=\"Bar\" required />\n            </Form.Card>\n\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step title=\"Step 2\">\n            <Form.Card>\n              <Field.String path=\"/baz\" label=\"Baz\" required />\n            </Form.Card>\n\n            <Wizard.Buttons />\n\n            <Form.SubmitButton />\n          </Wizard.Step>\n        </Wizard.Container>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","_components","h2","h3","p","code","a","ul","li","pre","Examples","_missingMdxReference","href","className","id","component","Error","strong","Default","ComponentBox","AsyncSubmitBehavior","scope","createRequest","debounceAsync","noInline","AsyncChangeBehavior","timeout","resolvePromise","fn","t","Promise","resolve","setTimeout","hasError","cancel","_resolvePromise","clearTimeout","WithinOtherComponents","WithinALabel","AsyncWizardContainer","WithStatusMessage","WithStatusMessageInMenu","OnSubmitRequest"],"sourceRoot":""}