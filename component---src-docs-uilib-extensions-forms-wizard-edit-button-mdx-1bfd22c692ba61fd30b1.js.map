{"version":3,"file":"component---src-docs-uilib-extensions-forms-wizard-edit-button-mdx-1bfd22c692ba61fd30b1.js","mappings":"+MAKA,SAASA,EAAkBC,GACzB,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKC,EAAAA,QAAM,CAAC,GAAI,MAAMD,EAAAA,EAAAA,KAAKE,EAAAA,QAAO,CAAC,KAElD,CAOA,UANA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOO,QAASC,GAAaC,OAAOC,OAAO,CAAC,GAAGC,EAAAA,EAAAA,KAAsBX,EAAMY,YAC3E,OAAOJ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWC,OAAOC,OAAO,CAAC,EAAGV,EAAO,CAC1DG,UAAUC,EAAAA,EAAAA,KAAKL,EAAmBC,MAC9BD,GACR,C,oECXA,SAASA,EAAkBC,GACzB,MAAMa,EAAcJ,OAAOC,OAAO,CAChCI,GAAI,OACHH,EAAAA,EAAAA,KAAsBX,EAAMY,YAG/B,OAFKG,GAAUC,EAAqB,YAAY,GAC3CD,EAAAA,YAAqBC,EAAqB,uBAAuB,IAC/Df,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKS,EAAYC,GAAI,CAC9BX,SAAU,UACR,MAAMC,EAAAA,EAAAA,KAAKW,EAAAA,WAAqB,CAAC,KAEzC,CAQA,SAASC,EAAqBC,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,CAHA,UANA,SAAoBjB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOO,QAASC,GAAaC,OAAOC,OAAO,CAAC,GAAGC,EAAAA,EAAAA,KAAsBX,EAAMY,YAC3E,OAAOJ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWC,OAAOC,OAAO,CAAC,EAAGV,EAAO,CAC1DG,UAAUC,EAAAA,EAAAA,KAAKL,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,yDClBA,SAASD,EAAkBC,GACzB,MAAMa,EAAcJ,OAAOC,OAAO,CAChCI,GAAI,KACJM,EAAG,IACHC,KAAM,OACNC,IAAK,QACJX,EAAAA,EAAAA,KAAsBX,EAAMY,YAC/B,OAAOX,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKS,EAAYC,GAAI,CAC9BX,SAAU,gBACR,MAAMF,EAAAA,EAAAA,MAAMY,EAAYO,EAAG,CAC7BjB,SAAU,EAACC,EAAAA,EAAAA,KAAKS,EAAYQ,KAAM,CAChClB,SAAU,sBACR,kDACF,MAAMF,EAAAA,EAAAA,MAAMY,EAAYO,EAAG,CAC7BjB,SAAU,CAAC,kBAAkBC,EAAAA,EAAAA,KAAKS,EAAYQ,KAAM,CAClDlB,SAAU,WACR,0DACF,MAAMC,EAAAA,EAAAA,KAAKS,EAAYS,IAAK,CAC9BnB,UAAUC,EAAAA,EAAAA,KAAKS,EAAYQ,KAAM,CAC/BE,UAAW,eACXpB,SAAU,0aAIlB,CAOA,UANA,SAAoBH,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOO,QAASC,GAAaC,OAAOC,OAAO,CAAC,GAAGC,EAAAA,EAAAA,KAAsBX,EAAMY,YAC3E,OAAOJ,GAAYJ,EAAAA,EAAAA,KAAKI,EAAWC,OAAOC,OAAO,CAAC,EAAGV,EAAO,CAC1DG,UAAUC,EAAAA,EAAAA,KAAKL,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,kKCzBO,MAAMwB,EAAeA,KAC1BpB,EAAAA,EAAAA,KAAAqB,EAAAA,EAAA,CAAAtB,SAAA,mlDA+DWuB,EAAWA,KACtBtB,EAAAA,EAAAA,KAAAqB,EAAAA,EAAA,2CAAAE,UAAA,EAAAxB,SAAA,quBAqCWyB,EAAaA,KACxBxB,EAAAA,EAAAA,KAAAqB,EAAAA,EAAA,yCAAAE,UAAA,EAAAxB,SAAA,kwB","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Wizard/EditButton.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Wizard/EditButton/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Wizard/EditButton/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Wizard/Step/Examples.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport Info from 'Docs/uilib/extensions/forms/Wizard/EditButton/info';\nimport Demos from 'Docs/uilib/extensions/forms/Wizard/EditButton/demos';\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(Info, {}), \"\\n\", _jsx(Demos, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from '../Step/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.EditButton) _missingMdxReference(\"Examples.EditButton\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(Examples.EditButton, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Wizard.EditButton\"\n      }), \" is a button to be placed in a summary step.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It provides a \", _jsx(_components.code, {\n        children: \"toStep\"\n      }), \" property that lets you navigate to a specific step.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Hr } from '@dnb/eufemia'\\nimport { Form, Wizard, Value } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Handler>\\n    <Wizard.Layout>\\n      <Wizard.Step title=\\\"Summary\\\">\\n        <Form.Card>\\n          <Value.Name.First path=\\\"/firstName\\\" />\\n          <Hr />\\n          <Wizard.EditButton toStep={2} />\\n        </Form.Card>\\n      </Wizard.Step>\\n    </Wizard.Layout>\\n  </Form.Handler>,\\n)\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { P } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport {\n  Field,\n  Form,\n  Value,\n  Wizard,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport const DynamicSteps = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler defaultData={{ includedSteps: 'group-1' }}>\n        <Wizard.Container\n          onStepChange={(index, mode, args) => {\n            console.log('onStepChange', index, mode, args.id)\n          }}\n        >\n          <Wizard.Step\n            title=\"Step A\"\n            id=\"step-a\"\n            includeWhen={{ path: '/includedSteps', hasValue: 'group-1' }}\n          >\n            <Form.MainHeading>Step A</Form.MainHeading>\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step\n            title=\"Step B\"\n            id=\"step-b\"\n            includeWhen={{ path: '/includedSteps', hasValue: 'group-1' }}\n          >\n            <Form.MainHeading>Step B</Form.MainHeading>\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step\n            title=\"Step C\"\n            id=\"step-c\"\n            includeWhen={{\n              path: '/includedSteps',\n              hasValue: (value: string) =>\n                ['group-1', 'group-2'].includes(value),\n            }}\n          >\n            <Form.MainHeading>Step C</Form.MainHeading>\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step\n            title=\"Step D\"\n            id=\"step-d\"\n            includeWhen={{ path: '/includedSteps', hasValue: 'group-2' }}\n          >\n            <Form.MainHeading>Step D</Form.MainHeading>\n            <Wizard.Buttons />\n          </Wizard.Step>\n        </Wizard.Container>\n\n        <Field.Selection\n          path=\"/includedSteps\"\n          variant=\"button\"\n          optionsLayout=\"horizontal\"\n          top\n        >\n          <Field.Option value=\"group-1\" title=\"Group 1\" />\n          <Field.Option value=\"group-2\" title=\"Group 2\" />\n        </Field.Selection>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Inactive = () => {\n  return (\n    <ComponentBox data-visual-test=\"wizard-step-inactive\">\n      {() => {\n        const Component = () => {\n          const { activeIndex } = Wizard.useStep('unique-id-inactive')\n\n          return (\n            <Wizard.Container\n              mode=\"strict\"\n              id=\"unique-id-inactive\"\n              initialActiveIndex={2}\n              expandedInitially\n            >\n              <Wizard.Step title=\"Step 1\" inactive>\n                <Wizard.Buttons />\n              </Wizard.Step>\n\n              <Wizard.Step title=\"Step 2\" inactive={activeIndex < 1}>\n                <Wizard.Buttons />\n              </Wizard.Step>\n\n              <Wizard.Step title=\"Step 3\" inactive={activeIndex < 2}>\n                <Wizard.Buttons />\n              </Wizard.Step>\n              <Wizard.Step title=\"Step 4\" inactive={activeIndex < 3}>\n                <Wizard.Buttons />\n              </Wizard.Step>\n            </Wizard.Container>\n          )\n        }\n\n        return <Component />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const EditButton = () => {\n  return (\n    <ComponentBox data-visual-test=\"wizard-edit-button\">\n      {() => {\n        const Step = ({ title }) => {\n          return (\n            <Wizard.Step title={title}>\n              <Form.Card>\n                <P>Contents</P>\n              </Form.Card>\n\n              <Wizard.Buttons />\n            </Wizard.Step>\n          )\n        }\n\n        const Summary = () => {\n          const { summaryTitle } = Form.useLocale().Step\n\n          return (\n            <Wizard.Step title={summaryTitle}>\n              <Form.Card>\n                <Value.SummaryList>\n                  <Value.Name.First path=\"/firstName\" />\n                </Value.SummaryList>\n\n                <Wizard.EditButton toStep={0} />\n              </Form.Card>\n            </Wizard.Step>\n          )\n        }\n\n        return (\n          <Form.Handler\n            data={{\n              firstName: 'John',\n            }}\n          >\n            <Wizard.Container initialActiveIndex={1}>\n              <Step title=\"Step\" />\n              <Summary />\n            </Wizard.Container>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n"],"names":["_createMdxContent","props","_jsxs","_Fragment","children","_jsx","Info","Demos","wrapper","MDXLayout","Object","assign","_provideComponents","components","_components","h2","Examples","_missingMdxReference","id","component","Error","p","code","pre","className","DynamicSteps","ComponentBox","Inactive","noInline","EditButton"],"sourceRoot":""}