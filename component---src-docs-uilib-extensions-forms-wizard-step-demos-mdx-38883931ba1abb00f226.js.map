{"version":3,"file":"component---src-docs-uilib-extensions-forms-wizard-step-demos-mdx-38883931ba1abb00f226.js","mappings":"sRASO,MAAMA,EAAeA,KAC1BC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,mlDA+DWC,EAAWA,KACtBH,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,2CAAAG,UAAA,EAAAF,SAAA,quBAqCWG,EAAaA,KACxBL,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,yCAAAG,UAAA,EAAAF,SAAA,kwB,oEC5GF,SAASI,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,EAAG,IACHC,GAAI,KACJC,KAAM,SACLC,EAAAA,EAAAA,KAAsBT,EAAMU,YAI/B,OAHKC,GAAUC,EAAqB,YAAY,GAC3CD,EAAAA,cAAuBC,EAAqB,yBAAyB,GACrED,EAAAA,UAAmBC,EAAqB,qBAAqB,IAC3DC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBnB,SAAU,EAACF,EAAAA,EAAAA,KAAKQ,EAAYG,GAAI,CAC9BT,SAAU,UACR,MAAMkB,EAAAA,EAAAA,MAAMZ,EAAYI,EAAG,CAC7BV,SAAU,CAAC,QAAQF,EAAAA,EAAAA,KAAKQ,EAAYK,EAAG,CACrCS,KAAM,iDACNpB,SAAU,kCACR,yBACF,MAAMF,EAAAA,EAAAA,KAAKQ,EAAYM,GAAI,CAC7BZ,SAAU,kBACR,MAAMF,EAAAA,EAAAA,KAAKkB,EAAAA,aAAuB,CAAC,GAAI,MAAMlB,EAAAA,EAAAA,KAAKQ,EAAYM,GAAI,CACpEZ,SAAU,qBACR,MAAMkB,EAAAA,EAAAA,MAAMZ,EAAYI,EAAG,CAC7BV,SAAU,CAAC,kFAAkFF,EAAAA,EAAAA,KAAKQ,EAAYO,KAAM,CAClHb,SAAU,aACR,qFACF,MAAMF,EAAAA,EAAAA,KAAKQ,EAAYI,EAAG,CAC5BV,SAAU,gIACR,MAAMF,EAAAA,EAAAA,KAAKkB,EAAAA,SAAmB,CAAC,KAEvC,CAQA,SAASC,EAAqBI,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,CAHA,UANA,SAAoBhB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOmB,QAASC,GAAalB,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,KAAsBT,EAAMU,YAC3E,OAAOU,GAAY3B,EAAAA,EAAAA,KAAK2B,EAAWlB,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DL,UAAUF,EAAAA,EAAAA,KAAKM,EAAmBC,MAC9BD,EAAkBC,EAC1B,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Wizard/Step/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Wizard/Step/demos.mdx"],"sourcesContent":["import { P } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport {\n  Field,\n  Form,\n  Value,\n  Wizard,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport const DynamicSteps = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler defaultData={{ includedSteps: 'group-1' }}>\n        <Wizard.Container\n          onStepChange={(index, mode, args) => {\n            console.log('onStepChange', index, mode, args.id)\n          }}\n        >\n          <Wizard.Step\n            title=\"Step A\"\n            id=\"step-a\"\n            includeWhen={{ path: '/includedSteps', hasValue: 'group-1' }}\n          >\n            <Form.MainHeading>Step A</Form.MainHeading>\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step\n            title=\"Step B\"\n            id=\"step-b\"\n            includeWhen={{ path: '/includedSteps', hasValue: 'group-1' }}\n          >\n            <Form.MainHeading>Step B</Form.MainHeading>\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step\n            title=\"Step C\"\n            id=\"step-c\"\n            includeWhen={{\n              path: '/includedSteps',\n              hasValue: (value: string) =>\n                ['group-1', 'group-2'].includes(value),\n            }}\n          >\n            <Form.MainHeading>Step C</Form.MainHeading>\n            <Wizard.Buttons />\n          </Wizard.Step>\n\n          <Wizard.Step\n            title=\"Step D\"\n            id=\"step-d\"\n            includeWhen={{ path: '/includedSteps', hasValue: 'group-2' }}\n          >\n            <Form.MainHeading>Step D</Form.MainHeading>\n            <Wizard.Buttons />\n          </Wizard.Step>\n        </Wizard.Container>\n\n        <Field.Selection\n          path=\"/includedSteps\"\n          variant=\"button\"\n          optionsLayout=\"horizontal\"\n          top\n        >\n          <Field.Option value=\"group-1\" title=\"Group 1\" />\n          <Field.Option value=\"group-2\" title=\"Group 2\" />\n        </Field.Selection>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Inactive = () => {\n  return (\n    <ComponentBox data-visual-test=\"wizard-step-inactive\">\n      {() => {\n        const Component = () => {\n          const { activeIndex } = Wizard.useStep('unique-id-inactive')\n\n          return (\n            <Wizard.Container\n              mode=\"strict\"\n              id=\"unique-id-inactive\"\n              initialActiveIndex={2}\n              expandedInitially\n            >\n              <Wizard.Step title=\"Step 1\" inactive>\n                <Wizard.Buttons />\n              </Wizard.Step>\n\n              <Wizard.Step title=\"Step 2\" inactive={activeIndex < 1}>\n                <Wizard.Buttons />\n              </Wizard.Step>\n\n              <Wizard.Step title=\"Step 3\" inactive={activeIndex < 2}>\n                <Wizard.Buttons />\n              </Wizard.Step>\n              <Wizard.Step title=\"Step 4\" inactive={activeIndex < 3}>\n                <Wizard.Buttons />\n              </Wizard.Step>\n            </Wizard.Container>\n          )\n        }\n\n        return <Component />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const EditButton = () => {\n  return (\n    <ComponentBox data-visual-test=\"wizard-edit-button\">\n      {() => {\n        const Step = ({ title }) => {\n          return (\n            <Wizard.Step title={title}>\n              <Form.Card>\n                <P>Contents</P>\n              </Form.Card>\n\n              <Wizard.Buttons />\n            </Wizard.Step>\n          )\n        }\n\n        const Summary = () => {\n          const { summaryTitle } = Form.useLocale().Step\n\n          return (\n            <Wizard.Step title={summaryTitle}>\n              <Form.Card>\n                <Value.SummaryList>\n                  <Value.Name.First path=\"/firstName\" />\n                </Value.SummaryList>\n\n                <Wizard.EditButton toStep={0} />\n              </Form.Card>\n            </Wizard.Step>\n          )\n        }\n\n        return (\n          <Form.Handler\n            data={{\n              firstName: 'John',\n            }}\n          >\n            <Wizard.Container initialActiveIndex={1}>\n              <Step title=\"Step\" />\n              <Summary />\n            </Wizard.Container>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    h3: \"h3\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.DynamicSteps) _missingMdxReference(\"Examples.DynamicSteps\", true);\n  if (!Examples.Inactive) _missingMdxReference(\"Examples.Inactive\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Wizard/Container/demos\",\n        children: \"Wizard.Container demo section\"\n      }), \" for more examples.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Dynamic steps\"\n    }), \"\\n\", _jsx(Examples.DynamicSteps, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inactive control\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you need more control over what steps the user can freely navigate to, the \", _jsx(_components.code, {\n        children: \"inactive\"\n      }), \" prop allows you to treat a step as non-navigable even if it would be normally.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this example, the first step is never clickable, and you can never skip ahead, even if the next steps have been visited.\"\n    }), \"\\n\", _jsx(Examples.Inactive, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["DynamicSteps","_jsx","ComponentBox","children","Inactive","noInline","EditButton","_createMdxContent","props","_components","Object","assign","h2","p","a","h3","code","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","href","id","component","Error","wrapper","MDXLayout"],"sourceRoot":""}