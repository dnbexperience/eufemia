{"version":3,"file":"component---src-docs-uilib-extensions-forms-wizard-step-edit-button-mdx-cc4fc4e024f3e6543f7a.js","mappings":"uRAIO,MAAMA,EAAaA,KACxBC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,yCAAAC,UAAA,EAAAC,SAAA,2vBCDF,SAASC,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,KAAM,OACNC,IAAK,QACJC,EAAAA,EAAAA,MAAsBT,EAAMU,YAG/B,OAFKC,GAAUC,EAAqB,YAAY,GAC3CD,GAAqBC,EAAqB,uBAAuB,IAC/DC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBhB,SAAU,EAACH,EAAAA,EAAAA,KAAKM,EAAYG,GAAI,CAC9BN,SAAU,eACR,MAAMH,EAAAA,EAAAA,KAAKM,EAAYI,GAAI,CAC7BP,SAAU,gBACR,MAAMe,EAAAA,EAAAA,MAAMZ,EAAYK,EAAG,CAC7BR,SAAU,EAACH,EAAAA,EAAAA,KAAKM,EAAYM,KAAM,CAChCT,SAAU,sBACR,kDACF,MAAMe,EAAAA,EAAAA,MAAMZ,EAAYK,EAAG,CAC7BR,SAAU,CAAC,kBAAkBH,EAAAA,EAAAA,KAAKM,EAAYM,KAAM,CAClDT,SAAU,WACR,0DACF,MAAMH,EAAAA,EAAAA,KAAKM,EAAYO,IAAK,CAC9BV,UAAUH,EAAAA,EAAAA,KAAKM,EAAYM,KAAM,CAC/BQ,UAAW,eACXjB,SAAU,oaAEV,MAAMH,EAAAA,EAAAA,KAAKM,EAAYI,GAAI,CAC7BP,SAAU,SACR,MAAMH,EAAAA,EAAAA,KAAKgB,EAAqB,CAAC,KAEzC,CAOA,MANA,SAAoBX,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOgB,QAASC,GAAaf,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,MAAsBT,EAAMU,YAC3E,OAAOO,GAAYtB,EAAAA,EAAAA,KAAKsB,EAAWf,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DF,UAAUH,EAAAA,EAAAA,KAAKI,EAAmBC,MAC9BD,EAAkBC,EAC1B,EAEA,SAASY,EAAqBM,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Wizard/Step/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Wizard/Step/EditButton.mdx"],"sourcesContent":["import { Card, P } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Form, Value, Wizard } from '@dnb/eufemia/src/extensions/forms'\n\nexport const EditButton = () => {\n  return (\n    <ComponentBox data-visual-test=\"wizard-edit-button\">\n      {() => {\n        const Step = ({ title }) => {\n          return (\n            <Wizard.Step title={title}>\n              <Card stack>\n                <P>Contents</P>\n              </Card>\n\n              <Wizard.Buttons />\n            </Wizard.Step>\n          )\n        }\n\n        const Summary = () => {\n          const { summaryTitle } = Form.useLocale().Step\n\n          return (\n            <Wizard.Step title={summaryTitle}>\n              <Card stack>\n                <Value.SummaryList>\n                  <Value.Name.First path=\"/firstName\" />\n                </Value.SummaryList>\n\n                <Wizard.EditButton toStep={0} />\n              </Card>\n            </Wizard.Step>\n          )\n        }\n\n        return (\n          <Form.Handler\n            data={{\n              firstName: 'John',\n            }}\n          >\n            <Wizard.Container initialActiveIndex={1}>\n              <Step title=\"Step\" />\n              <Summary />\n            </Wizard.Container>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.EditButton) _missingMdxReference(\"Examples.EditButton\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"EditButton\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Wizard.EditButton\"\n      }), \" is a button to be placed in a summary step.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It provides a \", _jsx(_components.code, {\n        children: \"toStep\"\n      }), \" property that lets you navigate to a specific step.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Hr } from '@dnb/eufemia'\\nimport { Form, Wizard, Value } from '@dnb/eufemia/extensions/forms'\\n\\nrender(\\n  <Form.Handler>\\n    <Wizard.Layout>\\n      <Wizard.Step title=\\\"Summary\\\">\\n        <Card stack>\\n          <Value.Name.First path=\\\"/firstName\\\" />\\n          <Hr />\\n          <Wizard.EditButton toStep={2} />\\n        </Card>\\n      </Wizard.Step>\\n    </Wizard.Layout>\\n  </Form.Handler>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Demo\"\n    }), \"\\n\", _jsx(Examples.EditButton, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["EditButton","_jsx","ComponentBox","noInline","children","_createMdxContent","props","_components","Object","assign","h1","h2","p","code","pre","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","className","wrapper","MDXLayout","id","component","Error"],"sourceRoot":""}