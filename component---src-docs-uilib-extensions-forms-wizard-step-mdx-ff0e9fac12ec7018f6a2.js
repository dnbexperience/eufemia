"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[45384,40858,89018],{50233:function(n,e,t){t.r(e);var i=t(52322),a=t(45392),r=t(71791),o=t(67471);function s(n){return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.default,{}),"\n",(0,i.jsx)(o.default,{})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(s,n)})):s()}},67471:function(n,e,t){t.r(e);var i=t(52322),a=t(45392),r=t(77464);function o(n){const e=Object.assign({h2:"h2",p:"p",a:"a",h3:"h3"},(0,a.ah)(),n.components);return r||s("Examples",!1),r.DynamicSteps||s("Examples.DynamicSteps",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:"Demos"}),"\n",(0,i.jsxs)(e.p,{children:["See ",(0,i.jsx)(e.a,{href:"/uilib/extensions/forms/Wizard/Container/demos",children:"WizardContainer demo section"})," for more examples."]}),"\n",(0,i.jsx)(e.h3,{children:"Dynamic steps"}),"\n",(0,i.jsx)(r.DynamicSteps,{})]})}function s(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(o,n)})):o(n)}},71791:function(n,e,t){t.r(e);var i=t(52322),a=t(45392);function r(n){const e=Object.assign({h2:"h2",p:"p",code:"code",a:"a",pre:"pre"},(0,a.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:"Description"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"Wizard.Step"})," shows child components when the surrounding ",(0,i.jsx)(e.a,{href:"/uilib/extensions/forms/Wizard/Container/",children:"Wizard.Container"})," has been navigated to this step. Wizard.Container keeps track of what is the active step, and navigating between wizard steps is done through callbacks on the WizardContext, i.e. using ",(0,i.jsx)(e.a,{href:"/uilib/extensions/forms/Wizard/Buttons/",children:"navigation buttons"}),"."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { Form, Wizard } from '@dnb/eufemia/extensions/forms'\n\nconst Step1 = () => {\n  return (\n    <Wizard.Step title=\"Step 1\">\n      <Form.MainHeading>Heading</Form.MainHeading>\n      <Card stack>\n        <P>Contents</P>\n      </Card>\n      <Card stack>\n        <P>Contents</P>\n      </Card>\n\n      <Wizard.Buttons />\n    </Wizard.Step>\n  )\n}\n\nconst MyForm = () => {\n  return (\n    <Form.Handler>\n      <Wizard.Container>\n        <Step1 />\n      </Wizard.Container>\n    </Form.Handler>\n  )\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["It uses ",(0,i.jsx)(e.a,{href:"/uilib/layout/flex/stack/",children:"Flex.Stack"})," so you don't need to wrap your content additionally."]}),"\n",(0,i.jsx)(e.h2,{children:"EditButton"}),"\n",(0,i.jsxs)(e.p,{children:["In order to navigate back to another step, you can use the ",(0,i.jsx)(e.a,{href:"/uilib/extensions/forms/Wizard/Step/EditButton/",children:"EditButton"})," component."]})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(r,n)})):r(n)}},77464:function(n,e,t){t.r(e),t.d(e,{DynamicSteps:function(){return r},EditButton:function(){return o}});var i=t(58469),a=t(52322);const r=()=>(0,a.jsx)(i.Z,{children:'<Form.Handler\n  defaultData={{\n    activeSteps: \'group-1\',\n  }}\n>\n  <Wizard.Container id="my-wizard">\n    <Wizard.Step\n      title="Step 1"\n      activeWhen={{\n        path: \'/activeSteps\',\n        hasValue: \'group-1\',\n      }}\n    >\n      <Form.MainHeading>Step 1</Form.MainHeading>\n      <Wizard.Buttons />\n    </Wizard.Step>\n\n    <Wizard.Step\n      title="Step 2"\n      activeWhen={{\n        path: \'/activeSteps\',\n        hasValue: \'group-1\',\n      }}\n    >\n      <Form.MainHeading>Step 2</Form.MainHeading>\n      <Wizard.Buttons />\n    </Wizard.Step>\n\n    <Wizard.Step\n      title="Step 3"\n      activeWhen={{\n        path: \'/activeSteps\',\n        withValue: (value: string) =>\n          [\'group-1\', \'group-2\'].includes(value),\n      }}\n    >\n      <Form.MainHeading>Step 3</Form.MainHeading>\n      <Wizard.Buttons />\n    </Wizard.Step>\n\n    <Wizard.Step\n      title="Step 4"\n      activeWhen={{\n        path: \'/activeSteps\',\n        hasValue: \'group-2\',\n      }}\n    >\n      <Form.MainHeading>Step 4</Form.MainHeading>\n      <Wizard.Buttons />\n    </Wizard.Step>\n  </Wizard.Container>\n\n  <Field.Selection\n    path="/activeSteps"\n    variant="button"\n    optionsLayout="horizontal"\n    top\n  >\n    <Field.Option value="group-1" title="Group 1" />\n    <Field.Option value="group-2" title="Group 2" />\n  </Field.Selection>\n</Form.Handler>\n'}),o=()=>(0,a.jsx)(i.Z,{"data-visual-test":"wizard-edit-button",noInline:!0,children:'const Step = ({ title }) => {\n  return (\n    <Wizard.Step title={title}>\n      <Card stack>\n        <P>Contents</P>\n      </Card>\n\n      <Wizard.Buttons />\n    </Wizard.Step>\n  )\n}\nconst Summary = () => {\n  const { summaryTitle } = Form.useLocale().Step\n  return (\n    <Wizard.Step title={summaryTitle}>\n      <Card stack>\n        <Value.SummaryList>\n          <Value.Name.First path="/firstName" />\n        </Value.SummaryList>\n\n        <Wizard.EditButton toStep={0} />\n      </Card>\n    </Wizard.Step>\n  )\n}\nrender(\n  <Form.Handler\n    data={{\n      firstName: \'John\',\n    }}\n  >\n    <Wizard.Container initialActiveIndex={1}>\n      <Step title="Step" />\n      <Summary />\n    </Wizard.Container>\n  </Form.Handler>,\n)\n'})}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-wizard-step-mdx-ff0e9fac12ec7018f6a2.js.map