"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[37018],{83535:function(e,n,t){t.r(n);var r=t(31085),o=t(71184);function s(e){const n=Object.assign({h2:"h2",pre:"pre",code:"code",p:"p",a:"a"},(0,o.R)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{children:"Import"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { Wizard } from '@dnb/eufemia/extensions/forms'\n// Use Wizard.useStep\n"})}),"\n",(0,r.jsx)(n.h2,{children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Wizard.useStep"})," is a React Hook that returns ",(0,r.jsx)(n.code,{children:"Wizard.Context"})," parameters such as ",(0,r.jsx)(n.code,{children:"totalSteps"}),", ",(0,r.jsx)(n.code,{children:"activeIndex"})," or the ",(0,r.jsx)(n.code,{children:"setActiveIndex"})," handler."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { Form, Wizard } from '@dnb/eufemia/extensions/forms'\n\nfunction Step1() {\n  const { totalSteps, activeIndex, setActiveIndex } = Wizard.useStep()\n\n  return <Wizard.Step>...</Wizard.Step>\n}\n\nfunction MyForm() {\n  return (\n    <Form.Handler>\n      <Wizard.Container>\n        <Step1 />\n      </Wizard.Container>\n    </Form.Handler>\n  )\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can also connect the hook with the ",(0,r.jsx)(n.code,{children:"Wizard.Container"})," via an ",(0,r.jsx)(n.code,{children:"id"})," (string, function, object or React Context as the reference). This lets you render the hook outside of the context:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nconst myContainerId = 'unique-id' // or a function, object or React Context reference\n\nfunction Sidecar() {\n  const { activeIndex, setActiveIndex } = Wizard.useStep(myContainerId)\n}\n\nfunction MyForm() {\n  return (\n    <Form.Handler>\n      <Sidecar />\n      <Wizard.Container id={myContainerId}>...</Wizard.Container>\n    </Form.Handler>\n  )\n}\n"})}),"\n",(0,r.jsx)(n.h2,{children:"EditButton"}),"\n",(0,r.jsxs)(n.p,{children:["In order to navigate to a new step when using ",(0,r.jsx)(n.code,{children:"setActiveIndex"})," you can use the ",(0,r.jsx)(n.a,{href:"/uilib/extensions/forms/Wizard/EditButton/",children:"Wizard.EditButton"})," component."]}),"\n",(0,r.jsx)(n.h2,{children:"Listen to step change"}),"\n",(0,r.jsxs)(n.p,{children:["You can also use the ",(0,r.jsx)(n.code,{children:"onStepChange"})," event to listen to a step change."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'function MyStep() {\n  // Ensure to use "useCallback" or keep the function outside of the component to avoid memory leaks\n  const onStepChange = React.useCallback(\n    (index, mode, { preventNavigation }) => {\n      // Do something with the step change\n    },\n    [],\n  )\n\n  Wizard.useStep(undefined, { onStepChange })\n\n  return <Wizard.Step>...</Wizard.Step>\n}\n'})})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,o.R)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(s,e)})):s(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-wizard-use-step-info-mdx-bb3a34c9d5aacbd5f5ef.js.map