"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[37018,46497,85402],{4386:function(n,e,t){t.r(e);var o=t(31085),i=t(71184),r=t(83535),a=t(14768);function d(n){return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.default,{}),"\n",(0,o.jsx)(a.default,{})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,i.R)(),n.components);return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(d,n)})):d()}},14768:function(n,e,t){t.r(e),t.d(e,{default:function(){return u}});var o={};t.r(o),t.d(o,{Default:function(){return d},OnStepChange:function(){return s},OutsideOfContext:function(){return c}});var i=t(31085),r=t(71184),a=t(32065);const d=()=>(0,i.jsx)(a.A,{noInline:!0,children:'const Step1 = () => {\n  const { activeIndex, setActiveIndex } = Wizard.useStep()\n  return (\n    <Button\n      variant="secondary"\n      onClick={() => {\n        setActiveIndex(activeIndex + 1)\n      }}\n    >\n      Next\n    </Button>\n  )\n}\nconst Step2 = () => {\n  const { activeIndex, setActiveIndex } = Wizard.useStep()\n  return (\n    <Button\n      variant="secondary"\n      onClick={() => {\n        setActiveIndex(activeIndex + 1)\n      }}\n    >\n      Next\n    </Button>\n  )\n}\nconst Step3 = () => {\n  const { activeIndex, setActiveIndex } = Wizard.useStep()\n  return (\n    <Button\n      variant="secondary"\n      onClick={() => {\n        setActiveIndex(activeIndex - 1)\n      }}\n    >\n      Previous\n    </Button>\n  )\n}\nrender(\n  <Wizard.Container mode="loose">\n    <Wizard.Step title="Step 1">\n      <Step1 />\n    </Wizard.Step>\n\n    <Wizard.Step title="Step 2">\n      <Step2 />\n    </Wizard.Step>\n\n    <Wizard.Step title="Step 3">\n      <Step3 />\n    </Wizard.Step>\n  </Wizard.Container>,\n)\n'}),s=()=>(0,i.jsx)(a.A,{noInline:!0,children:'const onStepChange1 = (index, mode, { preventNavigation }) => {\n  console.log(\n    \'onStepChange from Step1:\',\n    index,\n    mode,\n    typeof preventNavigation,\n  )\n}\nconst onStepChange2 = (index, mode, { preventNavigation }) => {\n  console.log(\n    \'onStepChange from Step2:\',\n    index,\n    mode,\n    typeof preventNavigation,\n  )\n}\nconst onStepChange3 = (index, mode, { preventNavigation }) => {\n  console.log(\n    \'onStepChange from Step3:\',\n    index,\n    mode,\n    typeof preventNavigation,\n  )\n}\nconst Step1 = () => {\n  Wizard.useStep(undefined, {\n    onStepChange: onStepChange1,\n  })\n  return (\n    <Wizard.Step title="Step 1">\n      <Wizard.Buttons />\n    </Wizard.Step>\n  )\n}\nconst Step2 = () => {\n  Wizard.useStep(undefined, {\n    onStepChange: onStepChange2,\n  })\n  return (\n    <Wizard.Step title="Step 2">\n      <Wizard.Buttons />\n    </Wizard.Step>\n  )\n}\nconst Step3 = () => {\n  Wizard.useStep(undefined, {\n    onStepChange: onStepChange3,\n  })\n  return (\n    <Wizard.Step title="Step 3">\n      <Wizard.Buttons />\n    </Wizard.Step>\n  )\n}\nrender(\n  <Wizard.Container mode="loose">\n    <Step1 />\n    <Step2 />\n    <Step3 />\n  </Wizard.Container>,\n)\n'}),c=()=>(0,i.jsx)(a.A,{noInline:!0,children:'const RenderBefore = () => {\n  const { activeIndex, setActiveIndex } = Wizard.useStep(\'unique-id\')\n  return (\n    <Button\n      variant="secondary"\n      onClick={() => {\n        setActiveIndex(activeIndex - 1)\n      }}\n    >\n      Previous\n    </Button>\n  )\n}\nconst RenderAfter = () => {\n  const { activeIndex, setActiveIndex } = Wizard.useStep(\'unique-id\')\n  return (\n    <Button\n      variant="secondary"\n      onClick={() => {\n        setActiveIndex(activeIndex + 1)\n      }}\n    >\n      Next\n    </Button>\n  )\n}\nrender(\n  <Flex.Stack>\n    <RenderBefore />\n    <Wizard.Container id="unique-id" mode="loose">\n      <Wizard.Step title="Step 1">\n        <output>Step 1</output>\n      </Wizard.Step>\n\n      <Wizard.Step title="Step 2">\n        <output>Step 2</output>\n      </Wizard.Step>\n\n      <Wizard.Step title="Step 1">\n        <output>Step 3</output>\n      </Wizard.Step>\n    </Wizard.Container>\n    <RenderAfter />\n  </Flex.Stack>,\n)\n'});function p(n){const e=Object.assign({h2:"h2",h3:"h3",code:"code"},(0,r.R)(),n.components);return o||l("Examples",!1),d||l("Examples.Default",!0),s||l("Examples.OnStepChange",!0),c||l("Examples.OutsideOfContext",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:"Demos"}),"\n",(0,i.jsx)(d,{}),"\n",(0,i.jsx)(e.h3,{children:"Outside of context"}),"\n",(0,i.jsx)(c,{}),"\n",(0,i.jsxs)(e.h3,{children:["Using ",(0,i.jsx)(e.code,{children:"onStepChange"})," event"]}),"\n",(0,i.jsx)(s,{})]})}var u=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,r.R)(),n.components);return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(p,n)})):p(n)};function l(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},83535:function(n,e,t){t.r(e);var o=t(31085),i=t(71184);function r(n){const e=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",a:"a"},(0,i.R)(),n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:"Description"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"Wizard.useStep"})," is a React Hook that returns ",(0,o.jsx)(e.code,{children:"Wizard.Context"})," parameters such as ",(0,o.jsx)(e.code,{children:"totalSteps"}),", ",(0,o.jsx)(e.code,{children:"activeIndex"})," or the ",(0,o.jsx)(e.code,{children:"setActiveIndex"})," handler."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:"import { Form, Wizard } from '@dnb/eufemia/extensions/forms'\n\nfunction Step1() {\n  const { totalSteps, activeIndex, setActiveIndex } = Wizard.useStep()\n\n  return <Wizard.Step>...</Wizard.Step>\n}\n\nfunction MyForm() {\n  return (\n    <Form.Handler>\n      <Wizard.Container>\n        <Step1 />\n      </Wizard.Container>\n    </Form.Handler>\n  )\n}\n"})}),"\n",(0,o.jsxs)(e.p,{children:["You can also connect the hook with the ",(0,o.jsx)(e.code,{children:"Wizard.Container"})," via an ",(0,o.jsx)(e.code,{children:"id"})," (string, function, object or React Context as the reference). This lets you render the hook outside of the context:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nconst myContainerId = 'unique-id' // or a function, object or React Context reference\n\nfunction Sidecar() {\n  const { activeIndex, setActiveIndex } = Wizard.useStep(myContainerId)\n}\n\nfunction MyForm() {\n  return (\n    <Form.Handler>\n      <Sidecar />\n      <Wizard.Container id={myContainerId}>...</Wizard.Container>\n    </Form.Handler>\n  )\n}\n"})}),"\n",(0,o.jsx)(e.h2,{children:"EditButton"}),"\n",(0,o.jsxs)(e.p,{children:["In order to navigate to a new step when using ",(0,o.jsx)(e.code,{children:"setActiveIndex"})," you can use the ",(0,o.jsx)(e.a,{href:"/uilib/extensions/forms/Wizard/EditButton/",children:"Wizard.EditButton"})," component."]}),"\n",(0,o.jsx)(e.h2,{children:"Listen to step change"}),"\n",(0,o.jsxs)(e.p,{children:["You can also use the ",(0,o.jsx)(e.code,{children:"onStepChange"})," event to listen to a step change."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:'function MyStep() {\n  // Ensure to use "useCallback" or keep the function outside of the component to avoid memory leaks\n  const onStepChange = React.useCallback(\n    (index, mode, { preventNavigation }) => {\n      // Do something with the step change\n    },\n    [],\n  )\n\n  Wizard.useStep(undefined, { onStepChange })\n\n  return <Wizard.Step>...</Wizard.Step>\n}\n'})})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,i.R)(),n.components);return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(r,n)})):r(n)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-wizard-use-step-mdx-648fb80c61643ee07f5d.js.map