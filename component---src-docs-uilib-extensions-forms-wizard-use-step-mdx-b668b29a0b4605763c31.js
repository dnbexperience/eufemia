"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[60141,24970,34798],{49591:function(n,e,t){t.r(e);var r=t(52322),i=t(45392),o=t(32859),s=t(7295);function d(n){return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.default,{}),"\n",(0,r.jsx)(s.default,{})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(d,n)})):d()}},7295:function(n,e,t){t.r(e),t.d(e,{default:function(){return u}});var r={};t.r(r),t.d(r,{Default:function(){return d},OutsideOfContext:function(){return a}});var i=t(52322),o=t(45392),s=t(64368);const d=()=>(0,i.jsx)(s.Z,{noInline:!0,children:'const Component = () => {\n  return (\n    <Wizard.Container mode="loose" variant="drawer">\n      <Wizard.Step title="Step 1">\n        <Step1 />\n      </Wizard.Step>\n\n      <Wizard.Step title="Step 2">\n        <Step2 />\n      </Wizard.Step>\n\n      <Wizard.Step title="Step 3">\n        <Step3 />\n      </Wizard.Step>\n    </Wizard.Container>\n  )\n}\nconst Step1 = () => {\n  const { activeIndex, setActiveIndex } = Wizard.useStep()\n  return (\n    <Button\n      variant="secondary"\n      onClick={() => {\n        setActiveIndex(activeIndex + 1)\n      }}\n    >\n      Next\n    </Button>\n  )\n}\nconst Step2 = () => {\n  const { activeIndex, setActiveIndex } = Wizard.useStep()\n  return (\n    <Button\n      variant="secondary"\n      onClick={() => {\n        setActiveIndex(activeIndex + 1)\n      }}\n    >\n      Next\n    </Button>\n  )\n}\nconst Step3 = () => {\n  const { activeIndex, setActiveIndex } = Wizard.useStep()\n  return (\n    <Button\n      variant="secondary"\n      onClick={() => {\n        setActiveIndex(activeIndex - 1)\n      }}\n    >\n      Previous\n    </Button>\n  )\n}\nrender(<Component />)\n'}),a=()=>(0,i.jsx)(s.Z,{noInline:!0,children:'const Component = () => {\n  return (\n    <Flex.Stack>\n      <RenderBefore />\n      <Wizard.Container id="unique-id" mode="loose" variant="drawer">\n        <Wizard.Step title="Step 1">\n          <output>Step 1</output>\n        </Wizard.Step>\n\n        <Wizard.Step title="Step 2">\n          <output>Step 2</output>\n        </Wizard.Step>\n\n        <Wizard.Step title="Step 1">\n          <output>Step 3</output>\n        </Wizard.Step>\n      </Wizard.Container>\n      <RenderAfter />\n    </Flex.Stack>\n  )\n}\nconst RenderBefore = () => {\n  const { activeIndex, setActiveIndex } = Wizard.useStep(\'unique-id\')\n  return (\n    <Button\n      variant="secondary"\n      onClick={() => {\n        setActiveIndex(activeIndex - 1)\n      }}\n    >\n      Previous\n    </Button>\n  )\n}\nconst RenderAfter = () => {\n  const { activeIndex, setActiveIndex } = Wizard.useStep(\'unique-id\')\n  return (\n    <Button\n      variant="secondary"\n      onClick={() => {\n        setActiveIndex(activeIndex + 1)\n      }}\n    >\n      Next\n    </Button>\n  )\n}\nrender(<Component />)\n'});function c(n){const e=Object.assign({h2:"h2"},(0,o.ah)(),n.components);return r||p("Examples",!1),d||p("Examples.Default",!0),a||p("Examples.OutsideOfContext",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:"Demo"}),"\n",(0,i.jsx)(d,{}),"\n",(0,i.jsx)(e.h2,{children:"Outside of context"}),"\n",(0,i.jsx)(a,{})]})}var u=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(c,n)})):c(n)};function p(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},32859:function(n,e,t){t.r(e);var r=t(52322),i=t(45392);function o(n){const e=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",a:"a"},(0,i.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:"Description"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"Wizard.useStep"})," is a React Hook that returns ",(0,r.jsx)(e.code,{children:"Wizard.Context"})," parameters such as ",(0,r.jsx)(e.code,{children:"totalSteps"}),", ",(0,r.jsx)(e.code,{children:"activeIndex"})," or the ",(0,r.jsx)(e.code,{children:"setActiveIndex"})," handler."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"import { Form, Wizard } from '@dnb/eufemia/extensions/forms'\n\nfunction Step1() {\n  const { totalSteps, activeIndex, setActiveIndex } = Wizard.useStep()\n\n  return <Wizard.Step>...</Wizard.Step>\n}\n\nfunction MyForm() {\n  return (\n    <Form.Handler>\n      <Wizard.Container>\n        <Step1 />\n      </Wizard.Container>\n    </Form.Handler>\n  )\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["You can also connect the hook with the ",(0,r.jsx)(e.code,{children:"Wizard.Container"})," via an ",(0,r.jsx)(e.code,{children:"id"})," (string). This lets you render the hook outside of the context:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"import { Form } from '@dnb/eufemia/extensions/forms'\n\nfunction Sidecar() {\n  const { activeIndex, setActiveIndex } = Wizard.useStep('unique-id')\n}\n\nfunction MyForm() {\n  return (\n    <Form.Handler>\n      <Sidecar />\n      <Wizard.Container id=\"unique-id\">...</Wizard.Container>\n    </Form.Handler>\n  )\n}\n"})}),"\n",(0,r.jsx)(e.h2,{children:"EditButton"}),"\n",(0,r.jsxs)(e.p,{children:["In order to navigate to a new step when using ",(0,r.jsx)(e.code,{children:"setActiveIndex"})," you can use the ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Wizard/Step/EditButton/",children:"EditButton"})," component."]})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(o,n)})):o(n)}}}]);
//# sourceMappingURL=component---src-docs-uilib-extensions-forms-wizard-use-step-mdx-b668b29a0b4605763c31.js.map