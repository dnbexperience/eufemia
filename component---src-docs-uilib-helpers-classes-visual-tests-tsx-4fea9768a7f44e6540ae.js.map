{"version":3,"file":"component---src-docs-uilib-helpers-classes-visual-tests-tsx-4fea9768a7f44e6540ae.js","mappings":"8NAGe,SAASA,IAQxB,IAAsBC,EALpB,OAKoBA,EAPP,0CAUbC,EAAAA,WAAgB,KACd,MAAMC,EAAWC,SAASC,cAAcJ,GAAWK,WAAW,GAExDC,EAAQ,IAAIC,MAClBD,EAAME,SAASN,EAAU,GACzBI,EAAMG,OAAOP,EAAUQ,KAAKC,MAAMT,EAASU,YAAYC,OAAS,IAGhEV,SAASW,eAAeC,SAAST,EAAM,GACtC,IAjBIU,OAAOC,OAAOC,GAAUC,KAAI,CAACC,EAAWC,KACtCC,EAAAA,EAAAA,KAACF,EAAS,GAAMC,IAE3B,C,sVCRWE,EAAgB,wCAChBC,EAAgB,wCAChBC,EAAsB,8CACtBC,EAAiB,yCACjBC,EAAuB,+CACvBC,EAAgB,wCAChBC,EAAsB,8C,WCajC,MAAMC,GAAOC,EAAAA,EAAAA,GAAA,OAAAC,OAAA,YAAAD,CAAA,CAAAE,KAAA,UAAAC,OAAA,oBAIN,SAASC,IACd,OACEb,EAAAA,EAAAA,KAACQ,EAAO,CAAC9B,UAAU,cAAaoC,UAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,yCAAAH,SAAA,sZAoBpC,CAEO,SAASI,IACd,OACElB,EAAAA,EAAAA,KAACQ,EAAO,CAAC9B,UAAU,cAAaoC,UAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,wCAAAH,SAAA,6PAYpC,CAEO,SAASK,IACd,OACEnB,EAAAA,EAAAA,KAACQ,EAAO,CAAC9B,UAAU,cAAaoC,UAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,4CAAAH,SAAA,qMAapC,CAEO,SAASM,IACd,OACEpB,EAAAA,EAAAA,KAACQ,EAAO,CAAC9B,UAAU,cAAaoC,UAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,sCAAAH,SAAA,wNAapC,CAEO,SAASO,IACd,OACErB,EAAAA,EAAAA,KAACQ,EAAO,CAAC9B,UAAU,cAAaoC,UAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,wCAAAH,SAAA,sJASpC,CAEO,SAASQ,IACd,OACEtB,EAAAA,EAAAA,KAACQ,EAAO,CAAC9B,UAAWuB,EAAca,UAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,6CAAAH,SAAA,4DAMtC,CAEO,SAASS,IACd,OACEvB,EAAAA,EAAAA,KAACQ,EAAO,CAAC9B,UAAWuB,EAAca,UAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,iCAAAH,SAAA,iFAQtC,CAEO,SAASU,IACd,OAAAT,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,UAAA,2CAAAQ,MAAA,CACFnB,cAAA,EACAF,eAAA,EACAF,cAAA,EACAK,oBAAA,EACAF,qBAAA,EACAF,oBACA,GAAAW,SAAA,idAsBA,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/helpers/classes/visual-tests.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/helpers/Examples.module.scss","webpack://dnb-design-system-portal/./src/docs/uilib/helpers/Examples.tsx"],"sourcesContent":["import React from 'react'\nimport * as Examples from '../Examples'\n\nexport default function VisibleWhenVisualTests() {\n  useSelection('[data-visual-test=\"helper-selection\"] p')\n\n  return Object.values(Examples).map((Component, i) => {\n    return <Component key={i} />\n  })\n}\n\nfunction useSelection(className: string) {\n  // Selects/marks some of the text in SelectionExample on second render tick\n  // For comparing screenshots\n  React.useEffect(() => {\n    const textNode = document.querySelector(className).childNodes[0]\n\n    const range = new Range()\n    range.setStart(textNode, 0)\n    range.setEnd(textNode, Math.floor(textNode.textContent.length / 2))\n\n    // apply this range for document selection\n    document.getSelection().addRange(range)\n  }, [])\n}\n","// extracted by mini-css-extract-plugin\nexport var fieldsetReset = \"Examples-module--fieldsetReset--eacd1\";\nexport var showWhenLarge = \"Examples-module--showWhenLarge--af56a\";\nexport var showWhenLargeOffset = \"Examples-module--showWhenLargeOffset--d8220\";\nexport var showWhenMedium = \"Examples-module--showWhenMedium--a125a\";\nexport var showWhenMediumOffset = \"Examples-module--showWhenMediumOffset--1c6aa\";\nexport var showWhenSmall = \"Examples-module--showWhenSmall--f2178\";\nexport var showWhenSmallOffset = \"Examples-module--showWhenSmallOffset--4485a\";","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport styled from '@emotion/styled'\nimport ComponentBox from '../../../shared/tags/ComponentBox'\nimport {\n  fieldsetReset,\n  showWhenSmall,\n  showWhenMedium,\n  showWhenLarge,\n  showWhenSmallOffset,\n  showWhenMediumOffset,\n  showWhenLargeOffset,\n} from './Examples.module.scss'\nimport { Li, Ul } from '@dnb/eufemia/src'\n\n// have a limit because this page is used for screenshot tests\nconst Wrapper = styled.div`\n  max-width: 40rem;\n`\n\nexport function CoreStyle() {\n  return (\n    <Wrapper className=\"dnb-spacing\">\n      <ComponentBox hideCode data-visual-test=\"helper-core-style\">\n        <div className=\"dnb-core-style\">\n          <h3 className=\"dnb-h--medium\">\n            Wrapper with the DNB Body Style (CSS reset)\n          </h3>\n          <p className=\"dnb-p\">\n            Read more about{' '}\n            <code className=\"dnb-code\">.dnb-core-style</code> and{' '}\n            <a\n              href=\"/uilib/usage/customisation/styling#core-style\"\n              className=\"dnb-anchor\"\n            >\n              Use Eufemia Styles elsewhere\n            </a>\n          </p>\n        </div>\n      </ComponentBox>\n    </Wrapper>\n  )\n}\n\nexport function TabFocus() {\n  return (\n    <Wrapper className=\"dnb-spacing\">\n      <ComponentBox hideCode data-visual-test=\"helper-tap-focus\">\n        <details>\n          <summary className=\"dnb-tab-focus\">\n            Try to focus me with the Tab key\n          </summary>\n          My main focus state has been removed and replaced by the helping\n          class <code className=\"dnb-code\">.dnb-tab-focus</code>\n        </details>\n      </ComponentBox>\n    </Wrapper>\n  )\n}\n\nexport function UnstyledList() {\n  return (\n    <Wrapper className=\"dnb-spacing\">\n      <ComponentBox hideCode data-visual-test=\"helper-unstyled-list\">\n        <ul className=\"dnb-unstyled-list\">\n          <li>I'm an unstyled list item</li>\n          <li>Me too!</li>\n        </ul>\n        <hr className=\"dnb-hr\" />\n        <ul className=\"dnb-ul\">\n          <li>But I'm not.</li>\n        </ul>\n      </ComponentBox>\n    </Wrapper>\n  )\n}\n\nexport function ScreenReaderOnly() {\n  return (\n    <Wrapper className=\"dnb-spacing\">\n      <ComponentBox hideCode data-visual-test=\"helper-sr-only\">\n        <p className=\"dnb-p\">\n          Hidden text\n          <span className=\"dnb-sr-only\">\n            I am only visible to screen readers, so you probably can't see\n            me. Unless you're using a screen reader.\n          </span>\n          !\n        </p>\n      </ComponentBox>\n    </Wrapper>\n  )\n}\n\nexport function Selection() {\n  return (\n    <Wrapper className=\"dnb-spacing\">\n      <ComponentBox hideCode data-visual-test=\"helper-selection\">\n        <p className=\"dnb-selection dnb-t__size--basis\">\n          If you select a part of this text, you will see the selection\n          highlight is green.\n        </p>\n      </ComponentBox>\n    </Wrapper>\n  )\n}\n\nexport function FormsetReset() {\n  return (\n    <Wrapper className={fieldsetReset}>\n      <ComponentBox hideCode data-visual-test=\"helper-fieldset-reset\">\n        <fieldset>I'm a fieldset without styling.</fieldset>\n      </ComponentBox>\n    </Wrapper>\n  )\n}\n\nexport function SkipLink() {\n  return (\n    <Wrapper className={fieldsetReset}>\n      <ComponentBox hideCode data-visual-test=\"skip-link\">\n        <a href=\"#something\" className=\"dnb-skip-link\">\n          I am a skip link\n        </a>\n      </ComponentBox>\n    </Wrapper>\n  )\n}\n\nexport function MediaSizeOffset() {\n  return (\n    <ComponentBox\n      hideCode\n      data-visual-test=\"helper-media-offset\"\n      scope={{\n        showWhenSmall,\n        showWhenMedium,\n        showWhenLarge,\n        showWhenSmallOffset,\n        showWhenMediumOffset,\n        showWhenLargeOffset,\n      }}\n    >\n      <Ul space={0}>\n        <Li className={showWhenSmall}>\n          Show me when \"small\"{' '}\n          <span className={showWhenSmallOffset}>+ offset is active</span>\n        </Li>\n        <Li className={showWhenMedium}>\n          Show me when \"medium\"{' '}\n          <span className={showWhenMediumOffset}>+ offset is active</span>\n        </Li>\n        <Li className={showWhenLarge}>\n          Show me when \"large\"{' '}\n          <span className={showWhenLargeOffset}>+ offset is active</span>\n        </Li>\n      </Ul>\n    </ComponentBox>\n  )\n}\n"],"names":["VisibleWhenVisualTests","className","React","textNode","document","querySelector","childNodes","range","Range","setStart","setEnd","Math","floor","textContent","length","getSelection","addRange","Object","values","Examples","map","Component","i","_jsx","fieldsetReset","showWhenLarge","showWhenLargeOffset","showWhenMedium","showWhenMediumOffset","showWhenSmall","showWhenSmallOffset","Wrapper","_styled","target","name","styles","CoreStyle","children","_jsx2","ComponentBox","hideCode","TabFocus","UnstyledList","ScreenReaderOnly","Selection","FormsetReset","SkipLink","MediaSizeOffset","scope"],"sourceRoot":""}