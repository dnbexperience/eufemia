"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[43155],{71714:function(e,n,r){r.r(n);var i=r(52322),t=r(45392);function s(e){const n=Object.assign({h2:"h2",pre:"pre",code:"code",p:"p",a:"a",strong:"strong",h3:"h3",ul:"ul",li:"li"},(0,t.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{children:"Description"}),"\n",(0,i.jsx)(n.h2,{children:"Import"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { Flex } from '@dnb/eufemia'\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Flex.Container"})," is a building block for ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flexible_box_layout",children:"CSS flexbox"})," based layout of contents and components."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NB:"})," For form layouts, use ",(0,i.jsx)(n.a,{href:"/uilib/layout/flex/stack/",children:"Flex.Stack"})," instead."]}),"\n",(0,i.jsxs)(n.p,{children:["You can also use ",(0,i.jsx)(n.a,{href:"/uilib/layout/flex/item",children:"Flex.Item"})," or ",(0,i.jsx)(n.a,{href:"/uilib/components/card",children:"Card"})," for you inner wrappers:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"import { Flex, Card } from '@dnb/eufemia'\n\nrender(\n  <Flex.Container>\n    <Flex.Item>content</Flex.Item>\n    <Card>content</Card>\n  </Flex.Container>,\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["But you can use it with what ever element too. It will wrap it in an ",(0,i.jsx)(n.code,{children:"Flex.Item"})," to ensure the spacing is applied:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"import { Flex } from '@dnb/eufemia'\n\nrender(\n  <Flex.Container>\n    <div>content</div>\n    <div>content</div>\n  </Flex.Container>,\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:'During render, the items within the "Wrapper" container are wrapped with the same properties. This ensures that all the items have the same appearance.'}),"\n",(0,i.jsx)(n.h3,{children:"Horizontal and Vertical aliases"}),"\n",(0,i.jsxs)(n.p,{children:["For shortening the usage of ",(0,i.jsx)(n.code,{children:'direction="..."'}),", you can use:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<Flex.Vertical>"})," instead of ",(0,i.jsx)(n.code,{children:'<Flex.Container direction="vertical">'})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"<Flex.Vertical>\n  <Flex.Item>part of vertical alignment</Flex.Item>\n  <Flex.Item>part of vertical alignment</Flex.Item>\n</Flex.Vertical>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<Flex.Horizontal>"})," instead of ",(0,i.jsx)(n.code,{children:'<Flex.Container direction="horizontal">'})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"<Flex.Horizontal>\n  <Flex.Item>part of horizontal alignment</Flex.Item>\n  <Flex.Item>part of horizontal alignment</Flex.Item>\n</Flex.Horizontal>\n"})}),"\n",(0,i.jsx)(n.h2,{children:"Limitations"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Flex.Container"})," will iterate over its childrenToReact, but not the children of the children"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NB:"})," This examples showcases the limitation:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { Flex, Card } from '@dnb/eufemia'\n\n// The Cards will not get the spacing applied\nconst MyItem = () => (\n  <>\n    <Card>content</Card>\n    <Card>content</Card>\n  </>\n)\n\nconst MyContainer = () => (\n  <Flex.Container>\n    <MyItem />\n  </Flex.Container>\n)\n"})}),"\n",(0,i.jsx)(n.h2,{children:"How spacing is applied"}),"\n",(0,i.jsxs)(n.p,{children:["Nested components should preferably support ",(0,i.jsx)(n.a,{href:"/uilib/layout/space/",children:"spacing properties"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"When a element or component was given, that does not support spacing, it will still work out of the box as it gets wrapped in a spacing block."}),"\n",(0,i.jsxs)(n.p,{children:["You may else wrap your custom component in a ",(0,i.jsx)(n.code,{children:"Flex.Item"})," â€“ this way, you still can change the spacing per component basis."]}),"\n",(0,i.jsxs)(n.p,{children:["Technically, ",(0,i.jsx)(n.code,{children:"Flex.Container"})," checks if a nested component has a property called ",(0,i.jsx)(n.code,{children:"_supportsSpacingProps"}),". So if you have a component that supports the ",(0,i.jsx)(n.a,{href:"/uilib/layout/space/",children:"spacing properties"}),", you can add this property ",(0,i.jsx)(n.code,{children:"ComponentName._supportsSpacingProps = true"}),". If you provide ",(0,i.jsx)(n.code,{children:"false"}),", it will not support spacing."]}),"\n",(0,i.jsxs)(n.p,{children:["If the component is a wrapper component, and you want its children to support spacing, you can add this property ",(0,i.jsx)(n.code,{children:"ComponentName._supportsSpacingProps = 'children'"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["But for simplicity, you can use the HOC ",(0,i.jsx)(n.code,{children:"Flex.withChildren"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'const Wrapper = Flex.withChildren(({ children }) => {\n  return <div>{children}</div>\n})\n\nrender(\n  <Flex.Container direction="vertical">\n    <Item />\n    <Wrapper>\n      <Item />\n      <Item />\n    </Wrapper>\n    <Item />\n  </Flex.Container>,\n)\n'})})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(s,e)})):s(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-layout-flex-container-info-mdx-737799f68541b56553ef.js.map