{"version":3,"file":"component---src-docs-uilib-layout-form-row-properties-mdx-dbdc13d40c8fb33afa69.js","mappings":"8NAEO,MAAMA,EAA0C,CACrDC,MAAO,CACLC,IAAK,2DACLC,KAAM,kBACNC,OAAQ,YAEVC,gBAAiB,CACfH,IAAK,0GACLC,KAAM,CAAC,WAAY,cACnBC,OAAQ,YAEVE,cAAe,CACbJ,IAAK,gEACLC,KAAM,UACNC,OAAQ,YAEVG,UAAW,CACTL,IAAK,oJACLC,KAAM,CAAC,WAAY,cACnBC,OAAQ,YAEVI,SAAU,CACRN,IAAK,wFACLC,KAAM,UACNC,OAAQ,YAEVK,SAAU,CACRP,IAAK,yFACLC,KAAM,UACNC,OAAQ,YAEVM,KAAM,CACJR,IAAK,yLACLC,KAAM,UACNC,OAAQ,YAEVO,WAAY,CACVT,IAAK,mMACLC,KAAM,UACNC,OAAQ,YAEVQ,cAAe,CACbV,IAAK,qKACLC,KAAM,CAAC,UAAW,QAAS,eAC3BC,OAAQ,YAEVS,gBAAiB,CACfX,IAAK,4IACLC,KAAM,CAAC,UAAW,QAAS,SAAU,QAAS,UAAW,YACzDC,OAAQ,YAEVU,YAAa,CACXZ,IAAK,8NACLC,KAAM,UACNC,OAAQ,YAEVW,YAAa,CACXb,IAAK,0KACLC,KAAM,SACNC,OAAQ,YAEVY,OAAQ,CACNd,IAAK,0DACLC,KAAM,SACNC,OAAQ,YAEVa,SAAU,CACRf,IAAK,kFACLC,KAAM,UACNC,OAAQ,YAEVc,SAAU,CACRhB,IAAK,yEACLC,KAAM,UACNC,OAAQ,YAEV,0CAA2C,CACzCF,IAAK,2DACLC,KAAM,CAAC,SAAU,UACjBC,OAAQ,aC5EZ,SAASe,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,OACHC,EAAAA,EAAAA,KAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKT,EAAYG,GAAI,CAC9BK,SAAU,eACR,MAAMC,EAAAA,EAAAA,KAAKC,EAAAA,GAAiB,CAC9BX,MAAOpB,MAGb,CAOA,MANA,SAAoBoB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,KAAsBL,EAAMM,YAC3E,OAAOO,GAAYH,EAAAA,EAAAA,KAAKG,EAAWX,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1DS,UAAUC,EAAAA,EAAAA,KAAKX,EAAmBC,MAC9BD,EAAkBC,EAC1B,C,sCCfA,IAAec,EAAE,C,uCCAjB,IAAeC,EAAE,C,uCCAjB,IAAeC,EAAE,C","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/components/form-row/FormRowDocs.ts","webpack://dnb-design-system-portal/./src/docs/uilib/layout/form-row/properties.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts"],"sourcesContent":["import { PropertiesTableProps } from '../../shared/types'\n\nexport const FormRowProperties: PropertiesTableProps = {\n  label: {\n    doc: 'use either the `label` property or provide a custom one.',\n    type: 'React.ReactNode',\n    status: 'optional',\n  },\n  label_direction: {\n    doc: 'use `label_direction=\"vertical\"` to change the label/legend layout direction. Defaults to `horizontal`.',\n    type: ['vertical', 'horizontal'],\n    status: 'optional',\n  },\n  label_sr_only: {\n    doc: 'use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  direction: {\n    doc: 'to define the layout direction on how the next component should be placed on. Can be either `vertical` or `horizontal`. Defaults to `horizontal`.',\n    type: ['vertical', 'horizontal'],\n    status: 'optional',\n  },\n  vertical: {\n    doc: 'will force both `direction` and `label_direction` to be **vertical** if set to `true`',\n    type: 'boolean',\n    status: 'optional',\n  },\n  centered: {\n    doc: 'will center all children vertically as long as the screen does not hit a mobile width.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  wrap: {\n    doc: 'forces the content of a FormRow to wrap. Make sure you always define spacing as `right=\"...\"` and not `left`, this way components will align left once they wrap. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  responsive: {\n    doc: 'to force responsiveness on form components (like [Input](/uilib/components/input) and their labels ([FormLabel](/uilib/components/form-label)), set the property to `true`. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  section_style: {\n    doc: 'to enable the visual helper `.dnb-section` class. Use a supported modifier from the [Section component](/uilib/components/section/properties). Defaults to `null`.',\n    type: ['divider', 'white', 'transparent'],\n    status: 'optional',\n  },\n  section_spacing: {\n    doc: 'to modify the `spacing`. Use a supported modifier from the [Section component](/uilib/components/section/properties). Defaults to `null`.',\n    type: ['x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'],\n    status: 'optional',\n  },\n  no_fieldset: {\n    doc: 'if set to `true`, then the internal `legend` element will be a `label` instead, and no `<fieldset>` is used. Keep in mind, that `<legend>` and `<fieldset>` **is only used if a `label` is provided**. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  label_class: {\n    doc: 'if you need to style the \"legend\", then you can either send in a custom Component, like `label={ <H2> }`, or define your styling class with the `label_class` property.',\n    type: 'string',\n    status: 'optional',\n  },\n  locale: {\n    doc: 'Send along a different locale to all nested components.',\n    type: 'string',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'if set to `true`, every component inside will be disabled. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport PropertiesTable from 'dnb-design-system-portal/src/shared/parts/PropertiesTable';\nimport {FormRowProperties} from '@dnb/eufemia/src/components/form-row/FormRowDocs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Properties\"\n    }), \"\\n\", _jsx(PropertiesTable, {\n      props: FormRowProperties\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n"],"names":["FormRowProperties","label","doc","type","status","label_direction","label_sr_only","direction","vertical","centered","wrap","responsive","section_style","section_spacing","no_fieldset","label_class","locale","disabled","skeleton","_createMdxContent","props","_components","Object","assign","h2","_provideComponents","components","_jsxs","_Fragment","children","_jsx","PropertiesTable","wrapper","MDXLayout","Td","Th","Tr"],"sourceRoot":""}