"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[89698],{41350:function(e,s,d){d.r(s);var n=d(52322),c=d(45392);function l(e){const s=Object.assign({h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",em:"em"},(0,c.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h2,{children:"Properties"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Property"}),(0,n.jsx)(s.th,{children:"Type"}),(0,n.jsx)(s.th,{children:"Description"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"columns"})}),(0,n.jsxs)(s.td,{children:[(0,n.jsx)(s.code,{children:"number"})," or ",(0,n.jsx)(s.code,{children:"object"})]}),(0,n.jsxs)(s.td,{children:[(0,n.jsx)(s.em,{children:"(optional)"})," Define how many columns your layout should be divided in. Can be just a number ",(0,n.jsx)(s.code,{children:"columns={12}"})," or an object with media query sizes like ",(0,n.jsx)(s.code,{children:"columns={{ small: 4, medium: 6, large: 12 }}"})," (default values). You can also disabled CSS Grid by providing ",(0,n.jsx)(s.code,{children:"false"})," for one size, like so ",(0,n.jsx)(s.code,{children:"columns={{ small: 4, medium: false, large: 12 }}"}),"."]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"rowGap"})}),(0,n.jsxs)(s.td,{children:[(0,n.jsx)(s.code,{children:"string"})," or ",(0,n.jsx)(s.code,{children:"false"})]}),(0,n.jsxs)(s.td,{children:[(0,n.jsx)(s.em,{children:"(optional)"})," Defines how much the gap between rows should be. Can be ",(0,n.jsx)(s.code,{children:"large"}),", ",(0,n.jsx)(s.code,{children:"medium"}),", ",(0,n.jsx)(s.code,{children:"small"})," or ",(0,n.jsx)(s.code,{children:"false"})," for no gap. Defaults to ",(0,n.jsx)(s.code,{children:"false"}),"."]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"columnsGap"})}),(0,n.jsxs)(s.td,{children:[(0,n.jsx)(s.code,{children:"string"})," or ",(0,n.jsx)(s.code,{children:"false"})]}),(0,n.jsxs)(s.td,{children:[(0,n.jsx)(s.em,{children:"(optional)"})," Defines how much the gap between columns should be. Can be ",(0,n.jsx)(s.code,{children:"large"}),", ",(0,n.jsx)(s.code,{children:"medium"}),", ",(0,n.jsx)(s.code,{children:"small"})," or ",(0,n.jsx)(s.code,{children:"false"})," for no gap. Defaults to ",(0,n.jsx)(s.code,{children:"false"}),"."]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"element"})}),(0,n.jsxs)(s.td,{children:[(0,n.jsx)(s.code,{children:"string"})," or ",(0,n.jsx)(s.code,{children:"React.Element"})]}),(0,n.jsxs)(s.td,{children:[(0,n.jsx)(s.em,{children:"(optional)"})," Define the type of element. Defaults to ",(0,n.jsx)(s.code,{children:"div"}),"."]})]})]})]})]})}s.default=function(e){void 0===e&&(e={});const{wrapper:s}=Object.assign({},(0,c.ah)(),e.components);return s?(0,n.jsx)(s,Object.assign({},e,{children:(0,n.jsx)(l,e)})):l(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-layout-grid-container-properties-mdx-a3823ece25e3ce777ec5.js.map