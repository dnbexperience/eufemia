"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[5688],{20982:function(n,e,s){s.r(e);var r=s(31085),o=s(71184),a=s(35563),t=s(82843),i=s(29058),l=s(97728);function d(n){const e=Object.assign({h1:"h1",p:"p",code:"code",ul:"ul",li:"li",h2:"h2",pre:"pre",a:"a",strong:"strong",h3:"h3",ol:"ol",h4:"h4"},(0,o.R)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{children:"Localization"}),"\n",(0,r.jsxs)(e.p,{children:["The default constants are defined in the ",(0,r.jsx)(e.code,{children:"/shared/defaults.js"})," file."]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["The default locale of all components texts is: ",(0,r.jsx)(e.code,{children:"nb-NO"}),"."]}),"\n",(0,r.jsxs)(e.li,{children:["The default currency is: ",(0,r.jsx)(e.code,{children:"NOK"})]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{children:"Supported component translations"}),"\n",(0,r.jsx)(e.p,{children:"Eufemia components comes with a set of default translated strings for the following locales:"}),"\n",(0,r.jsx)(a.A,{children:Object.keys(l.R).map((n=>(0,r.jsx)(t.A,{children:(0,r.jsx)(i.Ay,{href:`https://github.com/dnbexperience/eufemia/blob/main/packages/dnb-eufemia/src/shared/locales/${n}.ts`,children:n})},n)))}),"\n",(0,r.jsx)(e.p,{children:"You can easily change one, some or all of them by using a React provider – the Eufemia Provider."}),"\n",(0,r.jsx)(e.p,{children:"Here are the default strings located:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"// Included by default\nimport enGB from '@dnb/eufemia/shared/locales/en-GB'\nimport nbNO from '@dnb/eufemia/shared/locales/nb-NO'\nimport enGB_forms from '@dnb/eufemia/extensions/forms/constants/locales/en-GB'\nimport nbNO_forms from '@dnb/eufemia/extensions/forms/constants/locales/nb-NO'\n\n// Additional locales you can add\nimport svSE from '@dnb/eufemia/shared/locales/sv-SE'\nimport svSE_forms from '@dnb/eufemia/extensions/forms/constants/locales/sv-SE'\nimport svSE_forms_countries from '@dnb/eufemia/extensions/forms/constants/locales/countries/sv-SE'\n"})}),"\n",(0,r.jsx)(e.h2,{children:"How to set the locale"}),"\n",(0,r.jsx)(e.p,{children:"In React based apps, use the shared Eufemia provider:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"import Provider from '@dnb/eufemia/shared/Provider'\n\nconst myLocale = 'en-GB'\n\nrender(\n  <Provider locale={myLocale}>\n    <MyApp>Eufemia components</MyApp>\n  </Provider>,\n)\n"})}),"\n",(0,r.jsxs)(e.p,{children:["For component based locale, you can also make use of the ",(0,r.jsx)(e.code,{children:"lang"})," attribute – if really needed:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:'import Provider from \'@dnb/eufemia/shared/Provider\'\n\nrender(\n  <Provider locale="en-GB">\n    <MyApp>\n      <HelpButton lang="nb-NO" />\n    </MyApp>\n  </Provider>,\n)\n'})}),"\n",(0,r.jsx)(e.h2,{children:"How to set locale progressively"}),"\n",(0,r.jsx)(e.p,{children:"You can easily enhance or change translated strings progressively:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"import Provider from '@dnb/eufemia/shared/Provider'\n\nrender(\n  <Provider\n    locale=\"nb-NO\"\n    translations={{\n      'nb-NO': {\n        Modal: { close_title: 'Something' },\n      },\n    }}\n  >\n    <MyApp>Eufemia components</MyApp>\n  </Provider>,\n)\n"})}),"\n",(0,r.jsx)(e.h2,{children:"How to change the locale during runtime"}),"\n",(0,r.jsxs)(e.p,{children:["You can even change the locale during runtime. Find more info in the ",(0,r.jsx)(e.a,{href:"/uilib/usage/customisation/provider",children:"Provider docs"}),"."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'import { Field } from \'@dnb/eufemia/extensions/forms\'\nimport Provider from \'@dnb/eufemia/shared/Provider\'\nimport Context from \'@dnb/eufemia/shared/Context\'\n\nconst ChangeLocale = () => {\n  const { setLocale, locale } = React.useContext(Context)\n\n  return (\n    <Field.Selection value={locale} onChange={(value) => setLocale(value)}>\n      <Field.Option value="nb-NO" title="Norsk" />\n      <Field.Option value="sv-SE" title="Svenska" />\n      <Field.Option value="en-GB" title="English (GB)" />\n    </Field.Selection>\n  )\n}\n\nrender(\n  <Provider>\n    <MyApp>\n      <ChangeLocale />\n    </MyApp>\n  </Provider>,\n)\n'})}),"\n",(0,r.jsx)(e.h2,{children:"Provide your own translations"}),"\n",(0,r.jsxs)(e.p,{children:["You can provide your own translations by using the shared ",(0,r.jsx)(e.a,{href:"/uilib/usage/customisation/provider",children:"Provider"}),". Translation strings with several levels of depth can be given as a flat object with dot-notation, or as a nested object (cascaded)."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import Provider from '@dnb/eufemia/shared/Provider'\n\nconst nbNO = { myString: 'Min egendefinerte streng' }\nconst enGB = {\n  // Cascaded translations\n  Nested: {\n    stringWithArgs: 'My custom string with an argument: {myKey}',\n  },\n\n  // Flat translations\n  'Nested.stringWithArgs': 'My custom string with an argument: {myKey}',\n}\n\nconst myTranslations = {\n  'nb-NO': nbNO,\n  'en-GB': enGB,\n}\n\nrender(\n  <Provider translations={myTranslations} locale=\"en-GB\">\n    <MyApp>\n      <MyComponent />\n    </MyApp>\n  </Provider>,\n)\n"})}),"\n",(0,r.jsx)(e.h2,{children:"Consume translations in your components"}),"\n",(0,r.jsxs)(e.p,{children:["You can use the ",(0,r.jsx)(e.code,{children:"useTranslation"})," hook to get the strings from the shared context. The hook returns an object with the strings and a ",(0,r.jsx)(e.code,{children:"formatMessage"})," function you can use to get the translated strings with arguments."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import { useTranslation } from '@dnb/eufemia/shared'\n\nconst myTranslations = {\n  'nb-NO': { myString: 'Min egendefinerte streng' },\n  'en-GB': {\n    // Cascaded translations\n    Nested: {\n      stringWithArgs: 'My custom string with an argument: {myKey}',\n    },\n\n    // Flat translations\n    'Nested.stringWithLinebreaks':\n      'My custom string with a {br}line-break',\n  },\n}\n\ntype Translation = (typeof myTranslations)[keyof typeof myTranslations]\n\nconst MyComponent = () => {\n  const t = useTranslation<Translation>()\n\n  // Internal translations\n  const existingString = t.Dropdown.title\n\n  // Your translations\n  const myString = t.myString\n\n  // Use the \"formatMessage\" function to handle strings with arguments\n  const myStringWithArgsA = t.formatMessage(t.Nested.stringWithArgs, {\n    myKey: 'myValue',\n  })\n  // You can also get the string with a key (dot-notation)\n  const myStringWithArgsB = t.formatMessage('Nested.stringWithArgs', {\n    myKey: 'myValue',\n  })\n\n  // Render line-breaks\n  const jsxOutput = t.renderMessage(t.Nested.stringWithLinebreaks)\n\n  return <>MyComponent</>\n}\n\nrender(\n  <Provider translations={myTranslations} locale=\"en-GB\">\n    <MyApp>\n      <MyComponent />\n    </MyApp>\n  </Provider>,\n)\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Good to know:"})," You can consume the strings with a dot-notated key, directly from\nthe ",(0,r.jsx)(e.code,{children:"formatMessage"})," function:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"formatMessage('myGroup.subString')\n"})}),"\n",(0,r.jsx)(e.h2,{children:"TypeScript support"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import Provider, { Locales } from '@dnb/eufemia/shared/Provider'\n\nconst nbNO = {\n  myString: 'Min egendefinerte streng',\n}\nconst enGB = {\n  myString: 'My custom string',\n} satisfies typeof nbNO // Ensure the types are compatible\n\nconst myTranslations = {\n  'nb-NO': nbNO,\n  'en-GB': enGB,\n}\n\n// Infer the type of the translations\ntype Translation = (typeof myTranslations)[keyof typeof myTranslations]\n"})}),"\n",(0,r.jsx)(e.h2,{children:"How to combine with other tools"}),"\n",(0,r.jsxs)(e.p,{children:["You can easily combine the locales support it with other translation tools, like ",(0,r.jsx)(e.code,{children:"react-intl"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:["Like, having the Eufemia components strings inside a JSON object/file ",(0,r.jsx)(e.code,{children:"en.json"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'{\n  "Modal.close_title": "Overwrite",\n  "other.string": "{foo} ({bar} of {max})"\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"and use it like this:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"import EufemiaProvider from '@dnb/eufemia/shared/Provider'\nimport nb from './nb.json' // Has to be an JavaScript object\n\nrender(\n  <EufemiaProvider\n    locale=\"nb-NO\"\n    translations={{\n      'nb-NO': nb,\n    }}\n  >\n    <MyApp>Eufemia components</MyApp>\n  </EufemiaProvider>,\n)\n"})}),"\n",(0,r.jsx)(e.h3,{children:"Cascaded object (flat object, dot-notated keys) support"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["Lets say you have your translation files as JSON object/files ",(0,r.jsx)(e.code,{children:"en.json"}),":"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'{\n  "Modal.close_title": "Overwrite",\n  "my.string": "string {foo}"\n}\n'})}),"\n",(0,r.jsxs)(e.ol,{start:"2",children:["\n",(0,r.jsx)(e.li,{children:"and use it with a React hook like this:"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import {\n  useTranslation,\n  Provider as EufemiaProvider,\n} from '@dnb/eufemia/shared'\n\nimport nb from './nb.json'\nimport en from './en.json'\n\nconst MyComponent = () => {\n  // Note: no TypeScript support when using an identifier.\n  const str = useTranslation('my.string', {\n    foo: 'bar',\n  })\n\n  return str\n}\n\nrender(\n  <EufemiaProvider\n    locale=\"nb-NO\"\n    translations={{\n      'nb-NO': nb,\n      'en-GB': en,\n    }}\n  >\n    <MyComponent />\n  </EufemiaProvider>,\n)\n"})}),"\n",(0,r.jsxs)(e.ol,{start:"3",children:["\n",(0,r.jsx)(e.li,{children:"or as a React component:"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import {\n  Translation,\n  Provider as EufemiaProvider,\n} from '@dnb/eufemia/shared'\n\nimport nb from './nb.json'\nimport en from './en.json'\n\nrender(\n  <EufemiaProvider\n    locale=\"nb-NO\"\n    translations={{\n      'nb-NO': nb,\n      'en-GB': en,\n    }}\n  >\n    <Translation id=\"my.string\" foo=\"bar\" />\n  </EufemiaProvider>,\n)\n"})}),"\n",(0,r.jsxs)(e.p,{children:["For TypeScript support, you can use the ",(0,r.jsx)(e.code,{children:"Translation"})," component with a function. You may also want to make a wrapper, so you can use your own translation types:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import {\n  Translation,\n  TranslationProps,\n  Provider as EufemiaProvider,\n} from '@dnb/eufemia/shared'\n\nconst translations = {\n  'nb-NO': { my: { string: 'streng {foo}' } },\n  'en-GB': { my: { string: 'string {foo}' } },\n}\ntype Translation = (typeof translations)[keyof typeof translations]\n\n// Make a wrapper, so we can use your translation types\nconst MyTranslation = (props: TranslationProps<Translation>) => (\n  <Translation {...props} />\n)\n\nrender(\n  <EufemiaProvider locale=\"nb-NO\" translations={translations}>\n    <MyTranslation id={(t) => t.my.string} foo=\"bar\" />\n  </EufemiaProvider>,\n)\n"})}),"\n",(0,r.jsx)(e.h2,{children:"How to add Eufemia provided locales"}),"\n",(0,r.jsx)(e.h3,{children:"Eufemia components"}),"\n",(0,r.jsx)(e.p,{children:"Eufemia provides component translations for the following locales:"}),"\n",(0,r.jsx)(a.A,{children:Object.keys(l.R).map((n=>(0,r.jsx)(t.A,{children:(0,r.jsx)(i.Ay,{href:`https://github.com/dnbexperience/eufemia/blob/main/packages/dnb-eufemia/src/shared/locales/${n}.ts`,children:n})},n)))}),"\n",(0,r.jsxs)(e.p,{children:["To include e.g. ",(0,r.jsx)(e.code,{children:"sv-SE"})," you can use the following code:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"import { Provider } from '@dnb/eufemia/shared'\nimport svSE from '@dnb/eufemia/shared/locales/sv-SE'\n\nrender(\n  <Provider translations={svSE} locale=\"sv-SE\">\n    Your app\n  </Provider>,\n)\n"})}),"\n",(0,r.jsx)(e.h3,{children:"Eufemia Forms"}),"\n",(0,r.jsx)(e.p,{children:"Eufemia provides forms translations for the following locales:"}),"\n",(0,r.jsx)(a.A,{children:Object.keys(l.R).map((n=>(0,r.jsx)(t.A,{children:(0,r.jsx)(i.Ay,{href:`https://github.com/dnbexperience/eufemia/blob/main/packages/dnb-eufemia/src/extensions/forms/constants/locales/${n}.ts`,children:n})},n)))}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Note:"})," Only ",(0,r.jsx)(e.code,{children:"nb-NO"})," and ",(0,r.jsx)(e.code,{children:"en-GB"})," are included by default."]}),"\n",(0,r.jsxs)(e.p,{children:["To support other locales such as ",(0,r.jsx)(e.code,{children:"sv-SE"}),", you can provide translations for fields and values in a few different ways."]}),"\n",(0,r.jsx)(e.h4,{children:"Form.Handler"}),"\n",(0,r.jsxs)(e.p,{children:["You can provide forms translations to the ",(0,r.jsx)(e.code,{children:"translations"})," property within the ",(0,r.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Handler/",children:"Form.Handler"})," component like this:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"import { Form } from '@dnb/eufemia/src/extensions/forms'\nimport { mergeTranslations } from '@dnb/eufemia/shared'\nimport svSE_forms from '@dnb/eufemia/extensions/forms/constants/locales/sv-SE'\nimport svSE_forms_countries from '@dnb/eufemia/extensions/forms/constants/locales/countries/sv-SE'\n\nconst translations = mergeTranslations(svSE_forms, svSE_forms_countries)\n\nrender(\n  <Form.Handler translations={translations} locale=\"sv-SE\">\n    Your form\n  </Form.Handler>,\n)\n"})}),"\n",(0,r.jsx)(e.h4,{children:"Global translations"}),"\n",(0,r.jsxs)(e.p,{children:["How ever, instead of providing the forms translations per form, you can also provide them globally using the ",(0,r.jsx)(e.code,{children:"Provider"})," component:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"import { Provider, mergeTranslations } from '@dnb/eufemia/shared'\nimport svSE from '@dnb/eufemia/shared/locales/sv-SE'\nimport svSE_forms from '@dnb/eufemia/extensions/forms/constants/locales/sv-SE'\nimport svSE_forms_countries from '@dnb/eufemia/extensions/forms/constants/locales/countries/sv-SE'\n\nconst translations = mergeTranslations(\n  svSE,\n  svSE_forms,\n  svSE_forms_countries,\n)\n\nrender(\n  <Provider translations={translations} locale=\"sv-SE\">\n    Your app, including Eufemia Forms\n  </Provider>,\n)\n"})}),"\n",(0,r.jsx)(e.h2,{children:"How to add new locales"}),"\n",(0,r.jsxs)(e.p,{children:["Create a new file (",(0,r.jsx)(e.code,{children:"nn-NO.js"}),") containing all the strings:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"export default {\n  'nn-NO': {\n    GlobalError: {\n      404: {\n        title: 'Me finn ikkje sida du leitar etter …',\n      },\n    },\n  },\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"And add the file, like so:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"import Provider from '@dnb/eufemia/shared/Provider'\nimport myTranslations from './locales/nn-NO'\n\nrender(\n  <Provider translations={myTranslations}>\n    <MyApp>Eufemia components</MyApp>\n  </Provider>,\n)\n"})}),"\n",(0,r.jsx)(e.h3,{children:"Add or update the locales during runtime"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import Provider from '@dnb/eufemia/shared/Provider'\nimport Context from '@dnb/eufemia/shared/Context'\n\nimport myTranslations from './locales/nn-NO'\n\nconst ChangeLocale = () => {\n  const { update, locale } = React.useContext(Context)\n\n  // Add new locales\n  update({ locales: myTranslations, locale: 'nn-NO' })\n\n  return locale\n}\n\nrender(\n  <Provider>\n    <MyApp>\n      ...\n      <ChangeLocale />\n      ...\n    </MyApp>\n  </Provider>,\n)\n"})})]})}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.R)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(d,n)})):d(n)}}}]);
//# sourceMappingURL=component---src-docs-uilib-usage-customisation-localization-mdx-6d7edaf83571f29dfcfd.js.map