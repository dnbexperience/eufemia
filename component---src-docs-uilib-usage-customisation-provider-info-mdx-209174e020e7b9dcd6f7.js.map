{"version":3,"file":"component---src-docs-uilib-usage-customisation-provider-info-mdx-209174e020e7b9dcd6f7.js","mappings":"6KAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,IAAK,MACLC,KAAM,OACNC,OAAQ,WACPC,EAAAA,EAAAA,MAAsBT,EAAMU,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACC,EAAAA,EAAAA,KAAKb,EAAYG,GAAI,CAC9BS,SAAU,mCACR,MAAMC,EAAAA,EAAAA,KAAKb,EAAYI,EAAG,CAC5BQ,SAAU,2LACR,MAAMC,EAAAA,EAAAA,KAAKb,EAAYK,IAAK,CAC9BO,UAAUC,EAAAA,EAAAA,KAAKb,EAAYM,KAAM,CAC/BQ,UAAW,eACXF,SAAU,uNAEV,MAAMF,EAAAA,EAAAA,MAAMV,EAAYI,EAAG,CAC7BQ,SAAU,EAACC,EAAAA,EAAAA,KAAKb,EAAYO,OAAQ,CAClCK,SAAU,QACR,mDAAmDC,EAAAA,EAAAA,KAAKb,EAAYM,KAAM,CAC5EM,SAAU,UACR,yDACF,MAAMC,EAAAA,EAAAA,KAAKb,EAAYK,IAAK,CAC9BO,UAAUC,EAAAA,EAAAA,KAAKb,EAAYM,KAAM,CAC/BQ,UAAW,eACXF,SAAU,4HAEV,MAAMC,EAAAA,EAAAA,KAAKb,EAAYG,GAAI,CAC7BS,SAAU,gCACR,MAAMF,EAAAA,EAAAA,MAAMV,EAAYI,EAAG,CAC7BQ,SAAU,CAAC,qDAAqDC,EAAAA,EAAAA,KAAKb,EAAYM,KAAM,CACrFM,SAAU,iCACR,gGACF,MAAMC,EAAAA,EAAAA,KAAKb,EAAYK,IAAK,CAC9BO,UAAUC,EAAAA,EAAAA,KAAKb,EAAYM,KAAM,CAC/BQ,UAAW,eACXF,SAAU,m3BAEV,MAAMC,EAAAA,EAAAA,KAAKb,EAAYG,GAAI,CAC7BS,SAAU,qBACR,MAAMC,EAAAA,EAAAA,KAAKb,EAAYI,EAAG,CAC5BQ,SAAU,iDACR,MAAMC,EAAAA,EAAAA,KAAKb,EAAYI,EAAG,CAC5BQ,SAAU,qDACR,MAAMC,EAAAA,EAAAA,KAAKb,EAAYK,IAAK,CAC9BO,UAAUC,EAAAA,EAAAA,KAAKb,EAAYM,KAAM,CAC/BQ,UAAW,eACXF,SAAU,w+BAEV,MAAMC,EAAAA,EAAAA,KAAKb,EAAYG,GAAI,CAC7BS,SAAU,yCACR,MAAMC,EAAAA,EAAAA,KAAKb,EAAYI,EAAG,CAC5BQ,SAAU,6KACR,MAAMC,EAAAA,EAAAA,KAAKb,EAAYK,IAAK,CAC9BO,UAAUC,EAAAA,EAAAA,KAAKb,EAAYM,KAAM,CAC/BQ,UAAW,cACXF,SAAU,2NAIlB,CAOA,UANA,SAAoBb,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOgB,QAASC,GAAaf,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,MAAsBT,EAAMU,YAC3E,OAAOO,GAAYH,EAAAA,EAAAA,KAAKG,EAAWf,OAAOC,OAAO,CAAC,EAAGH,EAAO,CAC1Da,UAAUC,EAAAA,EAAAA,KAAKf,EAAmBC,MAC9BD,EAAkBC,EAC1B,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/usage/customisation/provider-info.mdx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Send down component properties\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can use the Provider to send down component properties. And because providers can be nested, it's a really powerful tool to handle generally properties used often by a component.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import Provider from '@dnb/eufemia/shared/Provider'\\n\\nrender(\\n  <MyApp>\\n    ...\\n    <Provider Button={{ size: 'large' }}>\\n      ...\\n      <Button>Large button</Button>\\n    </Provider>\\n  </MyApp>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"NB:\"\n      }), \" If you use TypeScript, you may rather use the \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" property to spread the component properties along:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"<Provider\\n  value={{\\n    Button: { size: 'large' },\\n  }}\\n>\\n  ...\\n  <Button>Large button</Button>\\n</Provider>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Changing locale or currency\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can either set the locale as a properly e.g. \", _jsx(_components.code, {\n        children: \"<Provider locale=\\\"en-GB\\\" ...\"\n      }), \" and handle the change from the app root, or change it inside the app, respective Context:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Field } from '@dnb/eufemia/extensions/forms'\\nimport Provider from '@dnb/eufemia/shared/Provider'\\nimport Context from '@dnb/eufemia/shared/Context'\\n\\nconst ChangeLocale = () => {\\n  const { setLocale, update, locale } = React.useContext(Context)\\n\\n  React.useEffect(() => {\\n    // Change the locale\\n    update({ locale: 'en-GB' })\\n\\n    // Change the default currency\\n    update({ currency: 'USD' })\\n  }, [])\\n\\n  return (\\n    <Field.Selection value={locale} onChange={(value) => setLocale(value)}>\\n      <Field.Option value=\\\"nb-NO\\\" title=\\\"Norsk\\\" />\\n      <Field.Option value=\\\"sv-SE\\\" title=\\\"Svenska\\\" />\\n      <Field.Option value=\\\"en-GB\\\" title=\\\"English (GB)\\\" />\\n    </Field.Selection>\\n  )\\n}\\n\\nrender(\\n  <Provider>\\n    <MyApp>\\n      <ChangeLocale />\\n      text <NumberFormat>123</NumberFormat> table etc.\\n    </MyApp>\\n  </Provider>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Nested Providers\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Yes, it's possible to have nested providers.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You have then to decide what you need to update.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { Field } from '@dnb/eufemia/extensions/forms'\\nimport Provider from '@dnb/eufemia/shared/Provider'\\nimport Context from '@dnb/eufemia/shared/Context'\\n\\nconst ChangeLocale = () => {\\n  const { setCurrentLocale, updateCurrent, locale } =\\n    React.useContext(Context)\\n\\n  React.useEffect(() => {\\n    // Change the locale\\n    updateCurrent({ locale: 'en-GB' })\\n\\n    // Change the default currency\\n    updateCurrent({ currency: 'USD' })\\n  }, [])\\n\\n  return (\\n    <Field.Selection\\n      value={locale}\\n      onChange={(value) => setCurrentLocale(value)}\\n    >\\n      <Field.Option value=\\\"nb-NO\\\" title=\\\"Norsk\\\" />\\n      <Field.Option value=\\\"en-GB\\\" title=\\\"English (GB)\\\" />\\n    </Field.Selection>\\n  )\\n}\\n\\nrender(\\n  <Provider locale=\\\"en-GB\\\">\\n    <MyApp>\\n      <Provider locale=\\\"nb-NO\\\">\\n        Norsk <NumberFormat>1234</NumberFormat>\\n        <ChangeLocale />\\n      </Provider>\\n      English <NumberFormat>1234</NumberFormat>\\n    </MyApp>\\n  </Provider>,\\n)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Provider and context troubleshooting\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If there is a module format deviation, components do not share anymore the same provider and context. So, make sure you have a consistent import routine, not like this:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// NB: Example of deviant module formats\\nimport Provider from '@dnb/eufemia/shared/Provider' // like /esm\\nimport { Button } from '@dnb/eufemia/es'\\nimport { NumberFormat } from '@dnb/eufemia/cjs/components'\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","pre","code","strong","_provideComponents","components","_jsxs","_Fragment","children","_jsx","className","wrapper","MDXLayout"],"sourceRoot":""}