"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[94650,95552],{77946:function(e,n,r){r.r(n);var o=r(52322),t=r(45392);function a(e){const n=Object.assign({h2:"h2",p:"p",pre:"pre",code:"code",strong:"strong"},(0,t.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{children:"Send down component properties"}),"\n",(0,o.jsx)(n.p,{children:"You can use the Provider to send down component properties. And because providers can be nested, it's a really powerful tool to handle generally properties used often by a component."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import Provider from '@dnb/eufemia/shared/Provider'\n\nrender(\n  <MyApp>\n    ...\n    <Provider Button={{ size: 'large' }}>\n      ...\n      <Button>Large button</Button>\n    </Provider>\n  </MyApp>,\n)\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"NB:"})," If you use TypeScript, you may rather use the ",(0,o.jsx)(n.code,{children:"value"})," property to spread the component properties along:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"<Provider\n  value={{\n    Button: { size: 'large' },\n  }}\n>\n  ...\n  <Button>Large button</Button>\n</Provider>\n"})}),"\n",(0,o.jsx)(n.h2,{children:"Changing locale or currency"}),"\n",(0,o.jsxs)(n.p,{children:["You can either set the locale as a properly e.g. ",(0,o.jsx)(n.code,{children:'<Provider locale="en-GB" ...'})," and handle the change from the app root, or change it inside the app, respective Context:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { Field } from \'@dnb/eufemia/extensions/forms\'\nimport Provider from \'@dnb/eufemia/shared/Provider\'\nimport Context from \'@dnb/eufemia/shared/Context\'\n\nconst ChangeLocale = () => {\n  const { setLocale, update, locale } = React.useContext(Context)\n\n  React.useEffect(() => {\n    // Change the locale\n    update({ locale: \'en-GB\' })\n\n    // Change the default currency\n    update({ currency: \'USD\' })\n  }, [])\n\n  return (\n    <Field.Selection value={locale} onChange={(value) => setLocale(value)}>\n      <Field.Option value="nb-NO" title="Norsk" />\n      <Field.Option value="sv-SE" title="Svenska" />\n      <Field.Option value="en-GB" title="English (GB)" />\n    </Field.Selection>\n  )\n}\n\nrender(\n  <Provider>\n    <MyApp>\n      <ChangeLocale />\n      text <NumberFormat>123</NumberFormat> table etc.\n    </MyApp>\n  </Provider>,\n)\n'})}),"\n",(0,o.jsx)(n.h2,{children:"Nested Providers"}),"\n",(0,o.jsx)(n.p,{children:"Yes, it's possible to have nested providers."}),"\n",(0,o.jsx)(n.p,{children:"You have then to decide what you need to update."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { Field } from \'@dnb/eufemia/extensions/forms\'\nimport Provider from \'@dnb/eufemia/shared/Provider\'\nimport Context from \'@dnb/eufemia/shared/Context\'\n\nconst ChangeLocale = () => {\n  const { setCurrentLocale, updateCurrent, locale } =\n    React.useContext(Context)\n\n  React.useEffect(() => {\n    // Change the locale\n    updateCurrent({ locale: \'en-GB\' })\n\n    // Change the default currency\n    updateCurrent({ currency: \'USD\' })\n  }, [])\n\n  return (\n    <Field.Selection\n      value={locale}\n      onChange={(value) => setCurrentLocale(value)}\n    >\n      <Field.Option value="nb-NO" title="Norsk" />\n      <Field.Option value="en-GB" title="English (GB)" />\n    </Field.Selection>\n  )\n}\n\nrender(\n  <Provider locale="en-GB">\n    <MyApp>\n      <Provider locale="nb-NO">\n        Norsk <NumberFormat>1234</NumberFormat>\n        <ChangeLocale />\n      </Provider>\n      English <NumberFormat>1234</NumberFormat>\n    </MyApp>\n  </Provider>,\n)\n'})}),"\n",(0,o.jsx)(n.h2,{children:"Provider and context troubleshooting"}),"\n",(0,o.jsx)(n.p,{children:"If there is a module format deviation, components do not share anymore the same provider and context. So, make sure you have a consistent import routine, not like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"// NB: Example of deviant module formats\nimport Provider from '@dnb/eufemia/shared/Provider' // like /esm\nimport { Button } from '@dnb/eufemia/es'\nimport { NumberFormat } from '@dnb/eufemia/cjs/components'\n"})})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(a,e)})):a(e)}},2308:function(e,n,r){r.r(n);var o=r(52322),t=r(45392),a=r(77946);function s(e){const n=Object.assign({h1:"h1",p:"p"},(0,t.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{children:"Provider / Context"}),"\n",(0,o.jsx)(n.p,{children:"To use the provider, you currently need to use React as your rendering library."}),"\n",(0,o.jsx)(n.p,{children:"Many components have some default translated strings. But also other things like the default currency and so on, cab be controlled globally by using a Provider. Changing the properties of the provider, will automatically update all the components who has used a value from it."}),"\n",(0,o.jsx)(n.p,{children:"Here are some example usage of the Provider / Context relation ship."}),"\n",(0,o.jsx)(a.default,{})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(s,e)})):s(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-usage-customisation-provider-mdx-7b1b2fafcb7532edda75.js.map