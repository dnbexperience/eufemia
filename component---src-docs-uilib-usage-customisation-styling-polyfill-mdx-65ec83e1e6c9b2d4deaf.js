"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[22621],{99587:function(e,s,n){n.r(s);var r=n(52322),i=n(45392);function t(e){const s=Object.assign({h1:"h1",p:"p",a:"a",h2:"h2",pre:"pre",code:"code",em:"em",h3:"h3",strong:"strong"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h1,{children:"Properties Polyfill"}),"\n",(0,r.jsxs)(s.p,{children:["By using Eufemia properties, like ",(0,r.jsx)(s.a,{href:"/uilib/usage/customisation/colors",children:"color names"})," and ",(0,r.jsx)(s.a,{href:"/uilib/typography",children:"typography properties"}),", instead of defining colors and typography directly as hard coded values, you make your code much more readable and future proof in terms of refactoring and new enhancements. ",(0,r.jsx)(s.a,{href:"/uilib/getting-started/maintainability",children:"Maintainability"})," is important. But it fits also better in thinking of the ",(0,r.jsx)(s.a,{href:"/uilib/getting-started/living-system",children:"Living system"})," terms."]}),"\n",(0,r.jsx)(s.h2,{children:"Post CSS"}),"\n",(0,r.jsxs)(s.p,{children:["Use ",(0,r.jsx)(s.a,{href:"https://github.com/csstools/postcss-preset-env",children:"postcss-preset-env"}),". Example ",(0,r.jsx)(s.a,{href:"https://webpack.js.org",children:"webpack"})," loader config:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"{\n  loader: 'postcss-loader',\n  options: {\n    ident: 'postcss',\n    plugins: () => [\n      postcssPresetEnv({\n        stage: 0,\n        preserve: true,\n        browsers: ['defaults and supports es6-module'],\n        importFrom: [require.resolve('@dnb/eufemia/style/themes/theme-ui/ui-theme-properties.css')]\n      })\n    ]\n  }\n},\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.em,{children:"Notes"}),": Use ",(0,r.jsx)(s.code,{children:"preserve: true"})," so we get the calc from vars ",(0,r.jsx)(s.code,{children:"calc(var() + var())"}),", to get processed for IE later with ",(0,r.jsx)(s.a,{href:"https://github.com/postcss/postcss-calc",children:"postcss-calc"})," if this is needed."]}),"\n",(0,r.jsx)(s.h3,{children:"Post CSS and Create React App"}),"\n",(0,r.jsxs)(s.p,{children:["Here's an example ",(0,r.jsx)(s.a,{href:"https://codesandbox.io/s/eufemia-scss-polyfill-knfpz?file=/config-overrides.js",children:"CRA Codesandbox"})," with ",(0,r.jsx)(s.code,{children:"postcss"})," config and omit of file hashing."]}),"\n",(0,r.jsx)(s.h2,{children:"SASS (SCSS) / LESS"}),"\n",(0,r.jsxs)(s.p,{children:["Use the ",(0,r.jsx)(s.a,{href:"/uilib/usage/customisation/styling/polyfill#post-css",children:"Post CSS"})," method."]}),"\n",(0,r.jsx)(s.h2,{children:"CSS-in-JS"}),"\n",(0,r.jsxs)(s.p,{children:["For ",(0,r.jsx)(s.strong,{children:"CSS-in-JS"})," you can use ",(0,r.jsx)(s.a,{href:"https://github.com/jhildenbiddle/css-vars-ponyfill",children:"css-vars-ponyfill"}),"."]}),"\n",(0,r.jsx)(s.p,{children:"In your application root:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"// import the polyfill (Ponyfill)\nimport cssVars from 'css-vars-ponyfill'\n\n// run the polyfill\ncssVars()\n"})}),"\n",(0,r.jsx)(s.h3,{children:"CSS Properties (variables)"}),"\n",(0,r.jsx)(s.p,{children:"You can also import all the main properties as a JavaScript Object:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"import properties from '@dnb/eufemia/style/properties'\n// properties gives you { '--color-sea-green': '#007272', ... }\n"})})]})}s.default=function(e){void 0===e&&(e={});const{wrapper:s}=Object.assign({},(0,i.ah)(),e.components);return s?(0,r.jsx)(s,Object.assign({},e,{children:(0,r.jsx)(t,e)})):t(e)}}}]);
//# sourceMappingURL=component---src-docs-uilib-usage-customisation-styling-polyfill-mdx-65ec83e1e6c9b2d4deaf.js.map