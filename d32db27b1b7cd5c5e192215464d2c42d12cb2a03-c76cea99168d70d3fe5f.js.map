{"version":3,"file":"d32db27b1b7cd5c5e192215464d2c42d12cb2a03-c76cea99168d70d3fe5f.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/about-forms.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/DataContext/At/At.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/DataContext/index.ts","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/quick-start.mdx"],"sourcesContent":["import React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { Input, Slider, Flex, NumberFormat } from '@dnb/eufemia/src'\nimport {\n  Form,\n  Field,\n  Value,\n  FieldBlock,\n  useFieldProps,\n  DataContext,\n  ValueBlock,\n  Wizard,\n  Iterate,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport const CreateBasicValueComponent = () => {\n  return (\n    <ComponentBox scope={{ ValueBlock }} hideCode>\n      {() => {\n        const MyValue = ({ value, ...props }) => {\n          return (\n            <ValueBlock {...props}>\n              <NumberFormat currency>{value}</NumberFormat>\n            </ValueBlock>\n          )\n        }\n\n        return <MyValue label=\"Label\" value={1234} />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const CreateBasicFieldComponent = () => {\n  return (\n    <ComponentBox\n      scope={{\n        useFieldProps,\n      }}\n      hideCode\n    >\n      {() => {\n        const MyField = (props) => {\n          const fromInput = React.useCallback(({ value }) => value, [])\n\n          const preparedProps = {\n            label: 'What is the secret of this field?',\n            fromInput,\n            onChangeValidator: (value) => {\n              if (value === 'secret') {\n                return new Error('Do not reveal the secret!')\n              }\n            },\n            ...props,\n          }\n\n          const {\n            id,\n            value,\n            label,\n            handleChange,\n            handleFocus,\n            handleBlur,\n          } = useFieldProps(preparedProps)\n\n          return (\n            <FieldBlock forId={id} label={label}>\n              <Input\n                id={id}\n                value={value}\n                on_change={handleChange}\n                on_focus={handleFocus}\n                on_blur={handleBlur}\n              />\n            </FieldBlock>\n          )\n        }\n\n        return (\n          <MyField\n            onChange={(value) => console.log('onChange', value)}\n            required\n          />\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const GettingStarted = () => {\n  return (\n    <ComponentBox hideCode>\n      {() => {\n        const existingData = {\n          companyName: 'DNB',\n          companyOrganizationNumber: '123456789',\n          postalAddressSelect: 'companyAddress',\n        }\n\n        function Component() {\n          const { data } = Form.useData('company-form')\n          console.log('State:', data)\n\n          return (\n            <Form.Handler\n              id=\"company-form\"\n              defaultData={existingData}\n              onChange={console.log}\n              onSubmit={console.log}\n            >\n              <Flex.Stack>\n                <Form.MainHeading>Bedrift</Form.MainHeading>\n                <Form.Card>\n                  <Field.Name.Company path=\"/companyName\" required />\n                  <Field.OrganizationNumber\n                    path=\"/companyOrganizationNumber\"\n                    required\n                  />\n                  <Field.Selection\n                    path=\"/postalAddressSelect\"\n                    label=\"Ønsket sted for tilsendt post\"\n                    variant=\"radio\"\n                  >\n                    <Field.Option\n                      value=\"companyAddress\"\n                      title=\"Samme som forretningsadresse\"\n                    />\n                    <Field.Option value=\"other\" title=\"Annet\" />\n                  </Field.Selection>\n                </Form.Card>\n                <Form.ButtonRow>\n                  <Form.SubmitButton />\n                </Form.ButtonRow>\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <Component />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const CreateComposedFieldComponent = () => {\n  return (\n    <ComponentBox\n      scope={{\n        DataContext,\n        useFieldProps,\n      }}\n      hideCode\n    >\n      {() => {\n        const MyComposedField = (props) => {\n          const {\n            id,\n            value,\n            hasError,\n            handleChange,\n            handleFocus,\n            handleBlur,\n          } = useFieldProps({\n            path: '/birthYear',\n          })\n\n          const handleBirthYearChange = React.useCallback(\n            (sliderData) => {\n              handleChange(sliderData.value)\n            },\n            [handleChange],\n          )\n\n          return (\n            <FieldBlock id={id} label={props.label ?? 'Name and age'}>\n              <Flex.Horizontal>\n                <Field.Name.First\n                  path=\"/firstName\"\n                  width=\"medium\"\n                  minLength={2}\n                />\n                <Field.Name.Last\n                  path=\"/lastName\"\n                  width=\"medium\"\n                  required\n                />\n                <FieldBlock width=\"large\">\n                  <Slider\n                    min={1900}\n                    max={new Date().getFullYear()}\n                    step={1}\n                    label=\"Birth year\"\n                    label_direction=\"vertical\"\n                    value={parseFloat(String(value))}\n                    on_change={handleBirthYearChange}\n                    on_drag_start={handleFocus}\n                    on_drag_end={handleBlur}\n                    status={hasError}\n                    tooltip\n                  />\n                </FieldBlock>\n              </Flex.Horizontal>\n            </FieldBlock>\n          )\n        }\n\n        const data = {\n          firstName: 'John',\n          birthYear: 2000,\n        }\n\n        return (\n          <DataContext.Provider\n            defaultData={data}\n            onChange={(data) => console.log('onChange', data)}\n          >\n            <MyComposedField label=\"My custom label\" />\n          </DataContext.Provider>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const BaseFieldComponents = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Form.Card>\n        <Field.String\n          label=\"Text field\"\n          value=\"Lorem Ipsum\"\n          onChange={(value) => console.log('onChange', value)}\n        />\n        <Field.Number\n          label=\"Number Field\"\n          value={789}\n          onChange={(value) => console.log('onChange', value)}\n        />\n        <Field.Boolean\n          label=\"Boolean Field\"\n          value={true}\n          onChange={(value) => console.log('onChange', value)}\n        />\n      </Form.Card>\n    </ComponentBox>\n  )\n}\n\nexport const FeatureFields = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Form.Card>\n        <Field.String label=\"Fornavn\" value=\"John\" />\n        <Field.String label=\"Etternavn\" value=\"Smith\" />\n        <Field.NationalIdentityNumber value=\"20058512345\" />\n        <Field.Email value=\"john@smith.email\" />\n        <Field.PhoneNumber value=\"+47 98765432\" />\n      </Form.Card>\n    </ComponentBox>\n  )\n}\n\nexport const LayoutComponents = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Flex.Stack>\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Form.Card>\n          <Form.SubHeading>Name</Form.SubHeading>\n\n          <Field.String label=\"Fornavn\" value=\"John\" />\n          <Field.String label=\"Etternavn\" value=\"Smith\" />\n        </Form.Card>\n\n        <Form.Card>\n          <Form.SubHeading>More information</Form.SubHeading>\n\n          <Field.NationalIdentityNumber value=\"20058512345\" />\n          <Field.Email value=\"john@smith.email\" />\n          <Field.PhoneNumber value=\"+47 98765432\" />\n        </Form.Card>\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n\nexport const VisibilityBasedOnData = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Form.Handler\n        defaultData={{\n          firstName: undefined,\n          lastName: 'Smith',\n          advanced: false,\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Flex.Stack>\n          <Form.MainHeading>Profile</Form.MainHeading>\n\n          <Form.Card>\n            <Form.SubHeading>Name</Form.SubHeading>\n\n            <Field.String path=\"/firstName\" label=\"Fornavn\" />\n            <Field.String path=\"/lastName\" label=\"Etternavn\" />\n          </Form.Card>\n\n          <Field.Boolean\n            path=\"/advanced\"\n            variant=\"checkbox-button\"\n            label=\"More fields\"\n          />\n          <Form.Visibility pathTrue=\"/advanced\">\n            <Flex.Stack>\n              <Form.Card>\n                <Form.SubHeading>More information</Form.SubHeading>\n\n                <Field.NationalIdentityNumber value=\"20058512345\" />\n                <Field.Email value=\"john@smith.email\" />\n                <Field.PhoneNumber value=\"+47 98765432\" />\n              </Form.Card>\n            </Flex.Stack>\n          </Form.Visibility>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const UsingFormHandler = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Form.Handler\n        defaultData={{\n          firstName: 'John',\n          lastName: 'Smith',\n          ssn: '20058512345',\n          email: 'john@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Form.Card>\n          <Field.String path=\"/firstName\" label=\"Fornavn\" />\n          <Field.String path=\"/lastName\" label=\"Etternavn\" />\n          <Field.NationalIdentityNumber path=\"/ssn\" />\n          <Field.Email path=\"/email\" />\n          <Field.PhoneNumber path=\"/phone\" />\n\n          <Form.ButtonRow>\n            <Form.SubmitButton />\n          </Form.ButtonRow>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Validation = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Form.Handler\n        defaultData={{\n          firstName: undefined,\n          lastName: 'Smith',\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Form.Card>\n          <Field.String path=\"/firstName\" label=\"Fornavn\" required />\n          <Field.String path=\"/lastName\" label=\"Etternavn\" required />\n          <Field.NationalIdentityNumber path=\"/ssn\" validateInitially />\n          <Field.Email path=\"/email\" validateInitially />\n          <Field.PhoneNumber path=\"/phone\" validateInitially />\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const UsingWizard = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        function MyForm() {\n          // Routers like \"react-router\" are supported as well\n          Wizard.useQueryLocator('my-wizard')\n          const { summaryTitle } = Form.useLocale().Step\n\n          return (\n            <Form.Handler\n              defaultData={{\n                firstName: undefined,\n                lastName: 'Smith',\n                advanced: false,\n                ssn: '123',\n                email: '@smith.email',\n                phone: '+47 98765432',\n              }}\n              onChange={(data) => console.log('onChange', data)}\n              onPathChange={(path, value) =>\n                console.log('onPathChange', path, value)\n              }\n              onSubmit={(data) => console.log('onSubmit', data)}\n            >\n              <Wizard.Container id=\"my-wizard\" mode=\"loose\">\n                <Wizard.Step title=\"Name\">\n                  <Form.MainHeading>Profile</Form.MainHeading>\n\n                  <Form.Card>\n                    <Form.SubHeading>Name</Form.SubHeading>\n\n                    <Field.String\n                      path=\"/firstName\"\n                      label=\"Fornavn\"\n                      required\n                    />\n                    <Field.String\n                      path=\"/lastName\"\n                      label=\"Etternavn\"\n                      required\n                    />\n                  </Form.Card>\n\n                  <Wizard.Buttons />\n                </Wizard.Step>\n\n                <Wizard.Step title=\"More information\">\n                  <Form.MainHeading>Profile</Form.MainHeading>\n\n                  <Form.Card>\n                    <Form.SubHeading>More information</Form.SubHeading>\n\n                    <Field.NationalIdentityNumber path=\"/ssn\" />\n                    <Field.Email path=\"/email\" />\n                    <Field.PhoneNumber path=\"/phone\" />\n                  </Form.Card>\n\n                  <Wizard.Buttons />\n                </Wizard.Step>\n\n                <Wizard.Step title={summaryTitle}>\n                  <Form.MainHeading>Profile</Form.MainHeading>\n\n                  <Form.Card>\n                    <Value.SummaryList layout=\"grid\">\n                      <Value.String path=\"/firstName\" label=\"Fornavn\" />\n                      <Value.String path=\"/lastName\" label=\"Etternavn\" />\n\n                      <Value.NationalIdentityNumber path=\"/ssn\" />\n                      <Value.Email path=\"/email\" />\n                      <Value.PhoneNumber path=\"/phone\" />\n                    </Value.SummaryList>\n                  </Form.Card>\n\n                  <Form.ButtonRow>\n                    <Wizard.Buttons />\n                    <Form.SubmitButton />\n                  </Form.ButtonRow>\n                </Wizard.Step>\n              </Wizard.Container>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const UsingFormSection = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyEditContainer = () => {\n          return (\n            <Form.Section.EditContainer variant=\"basic\">\n              <Field.Name.First path=\"/firstName\" />\n              <Field.Name.Last path=\"/lastName\" />\n            </Form.Section.EditContainer>\n          )\n        }\n\n        const MyViewContainer = () => {\n          return (\n            <Form.Section.ViewContainer variant=\"basic\">\n              <Value.SummaryList>\n                <Value.Name.First path=\"/firstName\" />\n                <Value.Name.Last path=\"/lastName\" />\n              </Value.SummaryList>\n            </Form.Section.ViewContainer>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            defaultData={{\n              nestedPath: {\n                firstName: 'Nora',\n                lastName: undefined, // initiate error\n              },\n            }}\n          >\n            <Form.Card>\n              <Form.SubHeading>Your account</Form.SubHeading>\n              <Form.Section path=\"/nestedPath\" required>\n                <MyEditContainer />\n                <MyViewContainer />\n              </Form.Section>\n            </Form.Card>\n            <Form.SubmitButton />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const UsingIterate = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyEditItemForm = () => {\n          return (\n            <Field.Composition>\n              <Field.Name.First itemPath=\"/firstName\" width=\"medium\" />\n              <Field.Name.Last\n                itemPath=\"/lastName\"\n                width=\"medium\"\n                required\n              />\n            </Field.Composition>\n          )\n        }\n\n        const MyEditItem = () => {\n          return (\n            <Iterate.EditContainer\n              title=\"Edit account holder {itemNo}\"\n              titleWhenNew=\"New account holder {itemNo}\"\n            >\n              <MyEditItemForm />\n            </Iterate.EditContainer>\n          )\n        }\n\n        const MyViewItem = () => {\n          const item = Iterate.useItem()\n          console.log('index:', item.index)\n\n          return (\n            <Iterate.ViewContainer title=\"Account holder {itemNo}\">\n              <Value.SummaryList>\n                <Value.Name.First itemPath=\"/firstName\" showEmpty />\n                <Value.Name.Last itemPath=\"/lastName\" placeholder=\"-\" />\n              </Value.SummaryList>\n            </Iterate.ViewContainer>\n          )\n        }\n\n        const CreateNewEntry = () => {\n          return (\n            <Iterate.PushContainer\n              path=\"/accounts\"\n              title=\"New account holder\"\n              openButton={\n                <Iterate.PushContainer.OpenButton text=\"Add another account\" />\n              }\n              showOpenButtonWhen={(list) => list.length > 0}\n            >\n              <MyEditItemForm />\n            </Iterate.PushContainer>\n          )\n        }\n\n        function MyForm() {\n          return (\n            <Form.Handler\n              data={{\n                accounts: [\n                  {\n                    firstName: 'Tony',\n                    lastName: undefined, // initiate error\n                  },\n                ],\n              }}\n              onChange={(data) =>\n                console.log('DataContext/onChange', data)\n              }\n              onSubmit={async (data) => console.log('onSubmit', data)}\n            >\n              <Flex.Vertical>\n                <Form.MainHeading>Accounts</Form.MainHeading>\n\n                <Form.Card gap={false}>\n                  <Iterate.Array path=\"/accounts\">\n                    <MyViewItem />\n                    <MyEditItem />\n                  </Iterate.Array>\n\n                  <CreateNewEntry />\n                </Form.Card>\n\n                <Form.SubmitButton variant=\"send\" />\n              </Flex.Vertical>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const Transformers = () => {\n  return (\n    <ComponentBox hideCode>\n      {() => {\n        const MyForm = () => {\n          const transformToUpper = (value) => {\n            return value?.toUpperCase()\n          }\n          const transformToLower = (value) => {\n            return value?.toLowerCase()\n          }\n\n          return (\n            <Form.Handler onChange={console.log}>\n              <Form.Card>\n                <Field.String\n                  width=\"medium\"\n                  label=\"Input value\"\n                  placeholder=\"Type letters\"\n                  path=\"/myField\"\n                  transformIn={transformToUpper}\n                  transformOut={transformToLower}\n                />\n\n                <Value.String label=\"Output value\" path=\"/myField\" />\n              </Form.Card>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const QuickStart = () => {\n  return (\n    <ComponentBox hideCode>\n      {() => {\n        const existingData = { companyName: 'DNB' }\n\n        function MyForm() {\n          return (\n            <Form.Handler\n              defaultData={existingData}\n              onSubmit={async (data) => console.log('onSubmit', data)}\n              required\n            >\n              <Form.MainHeading>Quick start</Form.MainHeading>\n\n              <Form.Card>\n                <Field.Name.Company path=\"/companyName\" />\n\n                <Field.OrganizationNumber path=\"/companyOrganizationNumber\" />\n\n                <Field.Selection\n                  path=\"/postalAddressSelect\"\n                  label=\"Ønsket sted for tilsendt post\"\n                  variant=\"radio\"\n                  required={false}\n                >\n                  <Field.Option\n                    value=\"companyAddress\"\n                    title=\"Samme som forretningsadresse\"\n                  />\n                  <Field.Option value=\"other\" title=\"Annet\" />\n                </Field.Selection>\n\n                <Form.Visibility\n                  visibleWhen={{\n                    path: '/postalAddressSelect',\n                    hasValue: 'other',\n                  }}\n                  animate\n                >\n                  <Field.String\n                    path=\"/postalAddress\"\n                    label=\"Sted for tilsendt post\"\n                  />\n                </Form.Visibility>\n              </Form.Card>\n              <Form.SubmitButton variant=\"send\" />\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport QuickStart from './quick-start.mdx';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    p: \"p\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Table of Contents\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#philosophy\",\n          children: \"Philosophy\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#features\",\n          children: \"Features\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#quick-start\",\n          children: \"Quick start\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#create-your-own-component\",\n          children: \"Create your own component\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Philosophy\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Eufemia Forms is:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"A framework for building form features\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Flexibility by design\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Data-driven API\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Standardized data handling\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Loosely coupled components and building blocks\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Focus on superior user experience, accessibility, and usability\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Eufemia Forms is a set of building blocks for form functionality. Components are built on an API with standardized sets of properties that make it easier to combine with surrounding data flow, and not least to create your own components that work well together with the ready-made components in Eufemia Forms.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"An important point is that the components are data-driven. They are built on the premise of the source data, rather than being closely coupled to HTML elements that the internal implementation uses.\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"The primary objective of Eufemia Forms is to simplify the process of building forms by leveraging a declarative API. This approach not only saves time but also reduces code and complexity.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Features\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Eufemia Forms consists of reusable components for data input, data display and surrounding layout for simplified user interface creation in React, built on top of base Eufemia components.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In summary:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Ready to use data driven form components.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Three shakeable structure. Unused code will not be included in the production bundle.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"All functionality in all components can be controlled and overridden via properties.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Data management using the declarative \", _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/getting-started/#what-is-a-json-pointer\",\n          children: \"JSON Pointer\"\n        }), \" directive (i.e \", _jsx(_components.code, {\n          children: \"path=\\\"/firstName\\\"\"\n        }), \").\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"State can be handled outside of the \", _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/Form/Handler\",\n          children: \"Form.Handler\"\n        }), \" (Provider Context) with the \", _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/Form/useData\",\n          children: \"useData\"\n        }), \" hook.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Support for both Zod and AJV JSON Schema.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Async form \", _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/getting-started/#async-form-behavior\",\n          children: \"submission\"\n        }), \" and \", _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/getting-started/#async-validation\",\n          children: \"validation\"\n        }), \" support.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Theming of field sizes with \", _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/Form/Appearance/\",\n          children: \"Form.Appearance\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Easy to integrate \", _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/Wizard/location-hooks/\",\n          children: \"browser location\"\n        }), \" support.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Static \", _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/Value/\",\n          children: \"value components\"\n        }), \" for displaying data with proper formatting.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use the \", _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/Form/Section/\",\n          children: \"Form.Section\"\n        }), \" component to quickly create reusable and flexible sections and blocks for your form.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Parts of your form can be isolated from the rest of the form using the \", _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/Form/Isolation/\",\n          children: \"Form.Isolation\"\n        }), \" component.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Building blocks for \", _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/create-component\",\n          children: \"creating your custom field components\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(QuickStart, {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"More details in the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/getting-started/\",\n        children: \"getting started\"\n      }), \" section.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Best practices\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Read more about \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/best-practices-on-forms/\",\n        children: \"best practices on forms\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Create your own component\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Eufemia Forms consists of helper components and tools so you can declaratively create interactive form components that flawlessly integrates between existing data and your custom form components. This ensures a common look and feel, even when ready-made components are combined with your local custom components.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Read more about \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/create-component\",\n        children: \"creating your own component\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Requirements\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Some of the internal logic requires support for importing JSON files. Meta frameworks do often support this by default.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React, { useCallback, useContext } from 'react'\nimport pointer from '../../utils/json-pointer'\nimport type { ComponentProps } from '../../types'\nimport Context, { ContextState } from '../Context'\n\nexport type Props = ComponentProps & {\n  /** JSON Pointer for where in the source dataset to point at in sub components */\n  path?: string\n  iterate?: boolean\n  children?: React.ReactNode\n}\n\nfunction At(props: Props) {\n  const { path = '/', iterate, children } = props\n  const dataContext = useContext(Context)\n  const {\n    data: contextData,\n    handlePathChange: handlePathChangeDataContext,\n  } = dataContext\n\n  const data =\n    contextData && pointer.has(contextData, path)\n      ? pointer.get(contextData, path)\n      : undefined\n\n  const handlePathChange: ContextState['handlePathChange'] = useCallback(\n    (changePath, value) => {\n      handlePathChangeDataContext(`${path}${changePath}`, value)\n    },\n    [handlePathChangeDataContext, path]\n  )\n\n  if (iterate) {\n    if (!Array.isArray(data)) {\n      return null\n    }\n    return (\n      <>\n        {data.map((element, i) => {\n          const handlePathChange = (\n            handlePathChangeDataContext\n              ? (changePath, value) => {\n                  handlePathChangeDataContext(\n                    `${path}/${i}${changePath}`,\n                    value\n                  )\n                }\n              : undefined\n          ) as ContextState['handlePathChange']\n\n          return (\n            <Context.Provider\n              key={`element${i}`}\n              value={{\n                ...dataContext,\n                data: element,\n                handlePathChange,\n              }}\n            >\n              {children}\n            </Context.Provider>\n          )\n        })}\n      </>\n    )\n  }\n\n  return (\n    <Context.Provider\n      value={{\n        ...dataContext,\n        data,\n        handlePathChange,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  )\n}\n\nAt._supportsSpacingProps = true\nexport default At\n","import Context from './Context'\n\nconst Consumer = Context.Consumer\nexport { Consumer }\n\nexport * from './Context'\nexport { default as Context } from './Context'\nexport { default as Provider } from './Provider'\nexport { default as At } from './At'\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.QuickStart) _missingMdxReference(\"Examples.QuickStart\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Quick start\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here's how you import the components from within scopes, such as \", _jsx(_components.code, {\n        children: \"Form\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"Field\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Form, Field } from '@dnb/eufemia/extensions/forms'\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Field components can be used directly as they are, for example \", _jsx(_components.code, {\n        children: \"Field.Email\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import { Field } from '@dnb/eufemia/extensions/forms'\\nrender(<Field.Email />)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"NB:\"\n      }), \" In the above example, only the email field will be a part of your application bundle. Unused code will be tree-shaken away.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"And here is how you can use the \", _jsx(_components.code, {\n        children: \"Form\"\n      }), \" component:\"]\n    }), \"\\n\", _jsx(Examples.QuickStart, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["CreateBasicValueComponent","_jsx","ComponentBox","scope","ValueBlock","hideCode","noInline","children","CreateBasicFieldComponent","useFieldProps","GettingStarted","CreateComposedFieldComponent","DataContext","BaseFieldComponents","Value","FeatureFields","LayoutComponents","VisibilityBasedOnData","UsingFormHandler","Validation","UsingWizard","UsingFormSection","UsingIterate","Transformers","QuickStart","_createMdxContent","props","_components","Object","assign","h2","ul","li","a","p","blockquote","code","h3","_provideComponents","components","_jsxs","_Fragment","href","wrapper","MDXLayout","At","path","iterate","dataContext","useContext","Context","data","contextData","handlePathChange","handlePathChangeDataContext","pointer","undefined","useCallback","changePath","value","Array","isArray","map","element","i","Provider","_supportsSpacingProps","Consumer","pre","strong","Examples","_missingMdxReference","className","id","component","Error"],"sourceRoot":""}