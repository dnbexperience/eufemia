{"version":3,"file":"db0fb4bc1af47e1780e7fec92ab219ecefe7b790-ddb8a64a781f452de0ee.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/global-status/info.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/global-status/Examples.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/icons/dnb/confetti_medium.tsx"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {GlobalStatusInfoExample1, GlobalStatusInfoExample2, GlobalStatusInfoExample3, GlobalStatusInfoExampleManipulate1, GlobalStatusInfoExampleManipulate2, GlobalStatusInfoExampleManipulate3} from 'Docs/uilib/components/global-status/Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    a: \"a\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Import\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { GlobalStatus } from '@dnb/eufemia'\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Description\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The GlobalStatus is a complex component meant for displaying global Application notifications or a summary of a form ( displaying form errors, messages etc. ).\\nBy default, the \", _jsx(_components.code, {\n        children: \"GlobalStatus\"\n      }), \" is automatically connected together with the \", _jsx(_components.a, {\n        href: \"/uilib/components/form-status\",\n        children: \"FormStatus\"\n      }), \" component. This means, that every form component showing a status, will send the status message along to the \", _jsx(_components.code, {\n        children: \"GlobalStatus\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"FormStatus default behavior\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Once a \", _jsx(_components.strong, {\n          children: \"FormStatus\"\n        }), \" is shown, the \", _jsx(_components.code, {\n          children: \"main\"\n        }), \" \", _jsx(_components.strong, {\n          children: \"GlobalStatus\"\n        }), \" will show up.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The page will scroll (if needed) to the dedicated \", _jsx(_components.strong, {\n          children: \"GlobalStatus\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Form components will send along both the status text and its label to show a good and accessible summary.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Screen reader uses will automatically hear the whole content of the \", _jsx(_components.code, {\n          children: \"GlobalStatus\"\n        }), \" once it shows up.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Several Global statuses\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Normally, you only want to have \", _jsx(_components.strong, {\n        children: \"one\"\n      }), \" \", _jsx(_components.code, {\n        children: \"GlobalStatus\"\n      }), \" inside your application. But you can have several in parallel. But make sure you give every other a new ID:\"]\n    }), \"\\n\", _jsx(GlobalStatusInfoExample1, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Where to put it\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"GlobalStatus\"\n        }), \" component should be positioned right under the header. By default, it uses \", _jsx(_components.code, {\n          children: \"main\"\n        }), \" as the ID.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Or as a secondary summary of errors in a submit form. Keep in mind, by default, form components like \", _jsx(_components.a, {\n          href: \"/uilib/components/input\",\n          children: \"Input\"\n        }), \" are using the ID \", _jsx(_components.code, {\n          children: \"main\"\n        }), \". To make sure the build in \", _jsx(_components.a, {\n          href: \"/uilib/components/form-status\",\n          children: \"FormStatus\"\n        }), \" is sending along the message to another \", _jsx(_components.code, {\n          children: \"GlobalStatus\"\n        }), \", you have to set the \", _jsx(_components.a, {\n          href: \"/uilib/components/global-status/properties/#configuration-object\",\n          children: _jsx(_components.code, {\n            children: \"globalStatus\"\n          })\n        }), \", like:\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(GlobalStatusInfoExample2, {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"But you can also make use of the Eufemia \", _jsx(_components.a, {\n        href: \"/uilib/usage/customisation/provider-info\",\n        children: \"Provider\"\n      }), \" where you will be able to send along the \", _jsx(_components.code, {\n        children: \"globalStatus\"\n      }), \" the underlying/wrapped components, like:\"]\n    }), \"\\n\", _jsx(GlobalStatusInfoExample3, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Manually updates\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Besides the automated connection between the error states of form components (\", _jsx(_components.a, {\n        href: \"/uilib/components/form-status\",\n        children: \"FormStatus\"\n      }), \"), you can update messages from everywhere in your application at any time:\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"NB:\"\n      }), \" The GlobalStatus will \", _jsx(_components.code, {\n        children: \"autoclose\"\n      }), \" by default, once all messages are removed.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"JavaScript (interceptor situation)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can access and manipulate an existing GlobalStatus from outside of the React render tree.\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Given you have already defined a GlobalStatus in JSX:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(GlobalStatusInfoExample1, {}), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Then you can control it from within a JavaScript context whenever you need to:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(GlobalStatusInfoExampleManipulate1, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"JSX\"\n    }), \"\\n\", _jsx(GlobalStatusInfoExampleManipulate2, {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you need an additional \", _jsx(_components.code, {\n        children: \"GlobalStatus\"\n      }), \", define a custom ID (custom-status):\"]\n    }), \"\\n\", _jsx(GlobalStatusInfoExampleManipulate3, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport {\n  GlobalStatus,\n  Button,\n  Input,\n  Section,\n  ToggleButton,\n  Icon,\n} from '@dnb/eufemia/src'\nimport { confetti_medium } from '@dnb/eufemia/src/icons'\n\nimport { Provider } from '@dnb/eufemia/src/shared'\n\nexport const GlobalInfoOverlayError = () => (\n  <ComponentBox data-visual-test=\"global-status\">\n    <GlobalStatus\n      title=\"Custom Title\"\n      text=\"Failure text\"\n      items={[\n        {\n          text: 'List item',\n          status_anchor_url: '/uilib/components/global-status',\n          status_anchor_label: 'eksempel',\n        },\n      ]}\n      show={true}\n      autoscroll={false}\n      no_animation={true}\n      omit_set_focus={true}\n      id=\"demo-1\"\n    />\n  </ComponentBox>\n)\n\nexport const GlobalStatusInfo = () => (\n  <ComponentBox data-visual-test=\"global-status-info\">\n    <GlobalStatus\n      state=\"info\"\n      title=\"Custom info title ...\"\n      text=\"Long info nisl tempus hendrerit tortor dapibus nascetur taciti porta risus cursus fusce platea enim curabitur proin nibh ut luctus magnis metus\"\n      items={['Status text 1', 'Status text 2']}\n      show={true}\n      autoscroll={false}\n      no_animation={true}\n      omit_set_focus={true}\n      id=\"demo-4\"\n    />\n  </ComponentBox>\n)\n\nexport const GlobalStatusWarning = () => (\n  <ComponentBox>\n    <GlobalStatus\n      state=\"warning\"\n      title=\"Custom warning title ...\"\n      text=\"A string of text providing a warning or semi-urgent message of some kind to the user\"\n      show={true}\n      autoscroll={false}\n      no_animation={true}\n      omit_set_focus={true}\n      id=\"demo-5\"\n    />\n  </ComponentBox>\n)\n\nexport const GlobalInfoOverlaySuccess = () => (\n  <ComponentBox>\n    <GlobalStatus\n      state=\"success\"\n      title=\"Custom success title ...\"\n      text=\"A string of text providing a success message of some kind to the user\"\n      show={true}\n      autoscroll={false}\n      no_animation={true}\n      omit_set_focus={true}\n      id=\"demo-6\"\n    />\n  </ComponentBox>\n)\n\nexport const GlobalInfoCustomIcon = () => (\n  <ComponentBox\n    scope={{ confetti_medium }}\n    data-visual-test=\"global-status-icon\"\n  >\n    <GlobalStatus\n      icon={<Icon icon={confetti_medium} />}\n      show={true}\n      autoscroll={false}\n      no_animation={true}\n      omit_set_focus={true}\n      id=\"demo-icon\"\n    />\n  </ComponentBox>\n)\n\nexport const GlobalStatusCoupling = () => (\n  <ComponentBox>\n    {() => {\n      const InputWithError = () => {\n        const [errorMessage, setErrorMessage] = React.useState(null)\n        return (\n          <Input\n            label=\"Input\"\n            placeholder=\"Write less than 5 chars and dismiss the focus to show the GlobalStatus ...\"\n            stretch\n            status={errorMessage}\n            on_blur={({ value }) => {\n              setErrorMessage(\n                value.length <= 4 ? 'With a message shown' : null,\n              )\n            }}\n            globalStatus={{ id: 'main-status' }}\n          />\n        )\n      }\n      return <InputWithError />\n    }}\n  </ComponentBox>\n)\n\nexport const GlobalStatusAddRemoveItems = () => (\n  <ComponentBox hideCode>\n    {() => {\n      function AddRemoveItems() {\n        const [count, toggleUpdateStatus] = React.useState(0)\n        return (\n          <>\n            <GlobalStatus\n              id=\"custom-status\"\n              autoscroll={false}\n              on_close={() => toggleUpdateStatus(0)}\n              on_hide={() => toggleUpdateStatus(0)}\n            />\n            <Button\n              text={'Show step #' + count}\n              on_click={() => {\n                toggleUpdateStatus(count + 1)\n                if (count >= 3) {\n                  toggleUpdateStatus(0)\n                }\n              }}\n              top=\"small\"\n            />\n            {count === 1 && (\n              <>\n                <GlobalStatus.Add\n                  id=\"custom-status\"\n                  status_id=\"custom-id-1\"\n                  title=\"New title\"\n                  text=\"First long info text ...\"\n                  item=\"Item from status #1\"\n                  on_close={({ status_id }) => {\n                    console.log('on_close 1', status_id)\n                  }}\n                />\n                <GlobalStatus.Add\n                  id=\"custom-status\"\n                  status_id=\"custom-id-2\"\n                  text=\"Second long info text ...\"\n                  item=\"Item from status #2\"\n                  on_close={({ status_id }) => {\n                    console.log('on_close 2', status_id)\n                  }}\n                />\n              </>\n            )}\n            {count === 2 && (\n              <GlobalStatus.Remove\n                id=\"custom-status\"\n                status_id=\"custom-id-2\"\n              />\n            )}\n            {count === 3 && (\n              <GlobalStatus.Remove\n                id=\"custom-status\"\n                status_id=\"custom-id-1\"\n              />\n            )}\n          </>\n        )\n      }\n      return <AddRemoveItems />\n    }}\n  </ComponentBox>\n)\n\nexport const GlobalStatusScrolling = () => (\n  <ComponentBox hideCode>\n    <Button\n      text=\"Scroll to main GlobalStatus\"\n      on_click={() => {\n        GlobalStatus.Update({\n          id: 'main-status',\n          text: 'Dui consectetur viverra aenean vestibulum ac tristique sem ligula condimentum',\n        })\n      }}\n    />\n  </ComponentBox>\n)\n\nexport const GlobalStatusUpdate = () => (\n  <ComponentBox hideCode>\n    {() => {\n      const Context = React.createContext(null)\n\n      const UpdateDemo = () => {\n        const [errorA, setErrorA] = React.useState(false)\n        const [errorB, setErrorB] = React.useState(false)\n\n        const [isVisible, setVisibility] = React.useState(false)\n\n        return (\n          <Context.Provider\n            value={{\n              errorA,\n              errorB,\n              setErrorA,\n              setErrorB,\n              isVisible,\n              setVisibility,\n            }}\n          >\n            <UpdateDemoStatus />\n            <UpdateDemoTools />\n          </Context.Provider>\n        )\n      }\n\n      const UpdateDemoStatus = () => {\n        const { errorA, errorB, setErrorA, setErrorB } =\n          React.useContext(Context)\n\n        return (\n          <>\n            <GlobalStatus\n              title=\"Custom Title\"\n              text=\"Failure text\"\n              id=\"demo-2\"\n            />\n            <Input\n              top\n              right\n              label=\"Label A\"\n              placeholder=\"Placeholder A\"\n              status={errorA}\n              globalStatus={{ id: 'demo-2' }}\n              on_change={({ value }) => {\n                setErrorA(value)\n              }}\n            />\n            <Input\n              top\n              label=\"Label B\"\n              placeholder=\"Placeholder B\"\n              status={errorB}\n              globalStatus={{ id: 'demo-2' }}\n              on_change={({ value }) => {\n                setErrorB(value)\n              }}\n            />\n          </>\n        )\n      }\n\n      const UpdateDemoTools = () => {\n        const {\n          errorA,\n          errorB,\n          setErrorA,\n          setErrorB,\n          isVisible,\n          setVisibility,\n        } = React.useContext(Context)\n\n        // Only to demonstrate the usage of an interceptor situation\n        const inst = React.useRef(null)\n        React.useEffect(() => {\n          if (!inst.current) {\n            inst.current = GlobalStatus.create({\n              id: 'demo-2',\n              title: 'New Title',\n              text: 'New Text',\n              status_id: 'custom-item',\n              show: false,\n            })\n\n            inst.current.update({\n              on_show: () => {\n                console.log('on_show')\n                if (!isVisible) {\n                  setVisibility(true)\n                }\n              },\n              on_hide: () => {\n                console.log('on_hide')\n                setVisibility(false)\n              },\n              on_close: () => {\n                console.log('on_close')\n                setVisibility(false)\n              },\n            })\n          }\n\n          inst.current.update({\n            show: isVisible,\n          })\n        }, [isVisible])\n        React.useEffect(() => () => inst.current.remove(), [])\n\n        return (\n          <Section top spacing style_type=\"divider\">\n            <ToggleButton\n              text=\"Toggle\"\n              variant=\"checkbox\"\n              right\n              checked={isVisible}\n              on_change={({ checked }) => {\n                setVisibility(checked)\n              }}\n            />\n            <Button\n              text=\"Reset\"\n              variant=\"tertiary\"\n              icon=\"reset\"\n              disabled={!(errorA || errorB)}\n              on_click={() => {\n                setErrorA(null)\n                setErrorB(null)\n              }}\n            />\n          </Section>\n        )\n      }\n\n      return <UpdateDemo />\n    }}\n  </ComponentBox>\n)\n\nexport const GlobalStatusInfoExample1 = () => (\n  <ComponentBox hidePreview hideToolbar>\n    <GlobalStatus id=\"other-global-status\" />\n  </ComponentBox>\n)\n\nexport const GlobalStatusInfoExample2 = () => (\n  <ComponentBox hidePreview hideToolbar>\n    <GlobalStatus id=\"other-global-status\" />\n    <Input globalStatus={{ id: 'other-global-status' }} />\n  </ComponentBox>\n)\n\nexport const GlobalStatusInfoExample3 = () => (\n  <ComponentBox hidePreview hideToolbar>\n    <GlobalStatus id=\"other-global-status\" />\n    <Provider\n      formElement={{ globalStatus: { id: 'other-global-status' } }}\n    >\n      <Input status=\"Message\" />\n    </Provider>\n  </ComponentBox>\n)\n\nexport const GlobalStatusInfoExampleManipulate1 = () => (\n  <ComponentBox hidePreview hideToolbar>\n    {() => {\n      // 1. Update / extend the status like so:\n\n      const statusOne = GlobalStatus.create({\n        id: 'other-global-status', // or main\n        status_id: 'custom-id-1',\n        text: 'New Text',\n        item: 'Item from status #1',\n        title: 'New Title',\n        show: true,\n      })\n\n      // 2. and removes \"custom-id-1\" again if needed\n\n      statusOne.update({\n        text: 'Updated Text',\n      })\n\n      // 3. and removes \"custom-id-1\" again if needed\n      statusOne.remove()\n\n      return <GlobalStatus id=\"other-global-status\" />\n    }}\n  </ComponentBox>\n)\n\nexport const GlobalStatusInfoExampleManipulate2 = () => (\n  <ComponentBox hidePreview hideToolbar>\n    {/* 1. Place it under the header bar */}\n    <GlobalStatus text=\"Optional default text\" />\n    {/* 2. later on, you can show a message */}\n    <GlobalStatus.Add\n      id=\"custom-id\"\n      status_id=\"custom-id-1\"\n      title=\"New title\"\n      text=\"First long info text ...\"\n      item=\"Item from status #1\"\n      on_close={({ status_id }) => {\n        console.log('on_close', status_id)\n      }}\n    />\n    {/* 3. and remove it again */}\n    <GlobalStatus.Remove id=\"custom-id\" status_id=\"custom-id-1\" />\n  </ComponentBox>\n)\n\nexport const GlobalStatusInfoExampleManipulate3 = () => (\n  <ComponentBox hidePreview hideToolbar>\n    {/* 1. Place it somewhere in your application */}\n    <GlobalStatus id=\"custom-status\" />\n    {/* 2. later on, you can show a message */}\n    <GlobalStatus.Add\n      id=\"custom-status\"\n      status_id=\"custom-id-1\"\n      title=\"New title\"\n      text=\"First long info text ...\"\n      item=\"Item from status #1\"\n      on_close={({ status_id }) => {\n        console.log('on_close', status_id)\n      }}\n    />\n    {/* 3. and remove it again */}\n    <GlobalStatus.Remove id=\"custom-status\" status_id=\"custom-id-1\" />\n  </ComponentBox>\n)\n\nexport const GlobalStatusExampleControllers = () => (\n  <ComponentBox hidePreview hideToolbar>\n    {/* Place the status wherever you have to.*/}\n    <GlobalStatus id=\"custom-id\" />\n    {/* Manipulate the status later on. Every property is optional.*/}\n    <GlobalStatus.Add\n      id=\"custom-id\"\n      status_id=\"status-1\"\n      item=\"Item #1\"\n      text=\"New Text\"\n      on_close={({ status_id }) => {\n        console.log('on_close', status_id)\n      }}\n    />\n    <GlobalStatus.Add\n      id=\"custom-id\"\n      status_id=\"status-2\"\n      item=\"Item #2\"\n      text=\"New Text\"\n      title=\"New Title\"\n      on_close={({ status_id }) => {\n        console.log('on_close', status_id)\n      }}\n    />\n    <GlobalStatus.Add\n      id=\"custom-id\"\n      status_id=\"status-3\"\n      item=\"Item #3\"\n      text=\"Text #3\"\n      on_close={({ status_id }) => {\n        console.log('on_close', status_id)\n      }}\n    />\n    {/* or update the status.*/}\n    <GlobalStatus.Update id=\"custom-id\" text=\"text\" />\n    {/* Later you can remove a resolved item.*/}\n    <GlobalStatus.Remove id=\"custom-id\" status_id=\"status-3\" />\n  </ComponentBox>\n)\n","/** This file is auto generated by convertSvgToJsx.ts */\n\nimport React from 'react'\nconst confetti_medium = (props) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={24}\n    height={24}\n    fill=\"none\"\n    viewBox=\"0 0 25 25\"\n    {...props}\n  >\n    <path\n      fill=\"#000\"\n      d=\"m.902 22.54.675.362-.675-.361Zm.201 1.357-.542.541.001.002.541-.543Zm1.357.201-.36-.676.36.676Zm7.603-9.155-.542.54v.001l.542-.541Zm-2.09-5.676-.542-.542-.001.001.542.541Zm5.674 2.09.541-.54v-.001l-.541.542Zm2.864.812a.766.766 0 1 0 1.083 1.083l-1.083-1.083Zm7.168 1.083a.766.766 0 0 0 1.082-1.083l-1.082 1.083Zm-11.946-5.86a.766.766 0 1 0 1.083 1.083l-1.083-1.083ZM12.816.225a.766.766 0 1 0-1.084 1.082L12.816.225Zm5.657 7.708a.766.766 0 1 0 .484 1.453l-.484-1.453Zm4.068.26a.766.766 0 0 0-.484-1.453l.484 1.453ZM15.6 6.03a.766.766 0 0 0 1.453.485L15.6 6.029Zm2.648-3.1a.766.766 0 1 0-1.453-.484l1.453.484ZM15.792 8.3l-.542-.542-.001.001.543.54Zm.722 0 .543-.54-.001-.002-.542.541Zm-7.59-2.265-.542-.541-.002.001.543.54Zm-.723 0 .543-.54-.001-.001-.542.541Zm12.747-1.256.54.543.002-.002-.542-.541Zm-.722 0-.541.541.001.002.54-.543ZM6.937 9.609.227 22.18l1.35.722L8.29 10.33l-1.352-.722ZM.227 22.18a1.917 1.917 0 0 0 .334 2.259l1.085-1.082a.385.385 0 0 1-.069-.454l-1.35-.723Zm.335 2.26a1.918 1.918 0 0 0 2.26.335l-.723-1.351a.386.386 0 0 1-.455-.068L.562 24.439Zm2.259.335 12.61-6.724-.721-1.352L2.1 23.422l.72 1.352Zm12.375-8.283c-.157.157-.63.31-1.598-.047-.901-.331-1.981-1.03-2.993-2.043L9.52 15.484c1.133 1.133 2.395 1.973 3.547 2.398 1.086.4 2.377.526 3.21-.307l-1.082-1.084Zm-4.591-2.09c-1.012-1.013-1.711-2.093-2.043-2.994-.357-.967-.204-1.442-.047-1.599L7.43 8.726c-.832.835-.706 2.125-.306 3.21.425 1.153 1.265 2.415 2.397 3.548l1.084-1.083ZM8.514 9.81c.156-.156.629-.309 1.598.048.901.333 1.982 1.032 2.993 2.043l1.083-1.084c-1.132-1.13-2.394-1.971-3.546-2.396-1.085-.4-2.377-.527-3.21.305L8.513 9.81Zm4.59 2.09c1.013 1.013 1.713 2.094 2.045 2.995.356.968.203 1.441.047 1.597l1.083 1.084c.833-.834.707-2.125.307-3.21-.424-1.153-1.265-2.416-2.398-3.549L13.105 11.9Zm4.49 1.354a4.306 4.306 0 0 1 6.085 0l1.082-1.084a5.838 5.838 0 0 0-8.25 0l1.083 1.083Zm-4.778-4.778a5.834 5.834 0 0 0 0-8.25l-1.084 1.082a4.302 4.302 0 0 1 .001 6.085l1.083 1.083Zm6.141.911 3.584-1.193-.484-1.453-3.584 1.193.484 1.453Zm-1.904-2.872 1.195-3.585-1.453-.484L15.6 6.029l1.453.485Zm-1.08 1.967c.1-.1.26-.1.36 0L15.25 9.564a1.277 1.277 0 0 0 1.806 0l-1.084-1.083Zm.36 0c.101.1.1.26.002.358l-1.086-1.08a1.28 1.28 0 0 0 .001 1.805l1.084-1.083Zm0 .359c-.1.1-.26.1-.36 0l1.083-1.083a1.277 1.277 0 0 0-1.806 0l1.084 1.083Zm-.362-.001a.252.252 0 0 1 .002-.358l1.083 1.083a1.28 1.28 0 0 0 .001-1.806l-1.086 1.08Zm-7.59-3.345c.1-.1.263-.1.363 0l-1.086 1.08c.499.502 1.31.502 1.808 0L8.38 5.495Zm.362-.001c.1.1.1.26 0 .36L7.66 4.772a1.277 1.277 0 0 0 0 1.805l1.083-1.083Zm0 .36c-.1.1-.261.1-.361 0l1.083-1.082a1.277 1.277 0 0 0-1.805 0l1.083 1.083Zm-.361 0c-.1-.1-.1-.26 0-.36l1.083 1.083a1.277 1.277 0 0 0 0-1.805L8.382 5.854Zm12.026-1.618c.1-.1.259-.1.358 0l-1.08 1.086a1.279 1.279 0 0 0 1.802 0l-1.08-1.086Zm.36.001c.1.1.1.261 0 .361l-1.083-1.083a1.277 1.277 0 0 0 0 1.805l1.083-1.083Zm0 .361c-.1.1-.261.1-.361 0l1.083-1.083a1.277 1.277 0 0 0-1.805 0l1.083 1.083Zm-.361 0c-.1-.1-.1-.261 0-.361L21.49 5.32a1.277 1.277 0 0 0 0-1.805l-1.083 1.083Zm-.677 9.856c.1-.1.26-.1.36 0l-1.083 1.083a1.277 1.277 0 0 0 1.806 0l-1.083-1.083Zm.36 0c.1.1.1.261 0 .361l-1.083-1.083a1.277 1.277 0 0 0 0 1.805l1.084-1.083Zm0 .361c-.1.1-.26.1-.36 0l1.083-1.083a1.277 1.277 0 0 0-1.806 0l1.084 1.083Zm-.36 0c-.1-.1-.1-.261 0-.361l1.083 1.083a1.277 1.277 0 0 0 0-1.805l-1.083 1.083Z\"\n    />\n  </svg>\n)\nexport default confetti_medium\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","pre","code","p","a","h3","ol","li","strong","ul","_provideComponents","components","_jsxs","_Fragment","children","_jsx","className","href","GlobalStatusInfoExample1","GlobalStatusInfoExample2","GlobalStatusInfoExample3","start","GlobalStatusInfoExampleManipulate1","GlobalStatusInfoExampleManipulate2","GlobalStatusInfoExampleManipulate3","wrapper","MDXLayout","GlobalInfoOverlayError","ComponentBox","GlobalStatusInfo","GlobalStatusWarning","GlobalInfoOverlaySuccess","GlobalInfoCustomIcon","scope","confetti_medium","GlobalStatusCoupling","noInline","GlobalStatusAddRemoveItems","hideCode","GlobalStatusScrolling","GlobalStatusUpdate","hidePreview","hideToolbar","GlobalStatusExampleControllers","xmlns","width","height","fill","viewBox","d"],"sourceRoot":""}