{"version":3,"file":"df623db7815adf28ad9f37452ab2b03d2c257667-29424f846ff038d97cb6.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/shared/parts/TranslationsTable.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/components/input/InputDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Td.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Th.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/elements/Tr.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/FieldDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Field/Number/NumberDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/FieldBlock/FieldBlockDocs.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/hooks/DataValueWritePropsDocs.ts"],"sourcesContent":["import { useMemo } from 'react'\nimport styled from '@emotion/styled'\nimport { Anchor, P, Table, Td, Th, Tr } from '@dnb/eufemia/src'\nimport { extendDeep, warn } from '@dnb/eufemia/src/shared/component-helper'\nimport globalTranslations from '@dnb/eufemia/src/shared/locales'\nimport formsTranslations from '@dnb/eufemia/src/extensions/forms/constants/locales'\nimport { FormattedCode } from './PropertiesTable'\nimport { Translation } from '@dnb/eufemia/src/shared/Context'\nimport { translationsWithoutEnUS } from '../../core/PortalProviders'\nimport { languageDisplayNames } from '../../core/ChangeLocale'\n\nconst StyledTable = styled(Table)`\n  td {\n    white-space: nowrap;\n  }\n`\n\nexport default function TranslationsTable({\n  localeKey,\n  source = null,\n}: {\n  localeKey?: string | Array<string>\n  source?: Record<string, Translation>\n}) {\n  source = useMemo(() => {\n    return (\n      source ||\n      Object.assign(\n        extendDeep({}, globalTranslations, formsTranslations),\n        translationsWithoutEnUS,\n      )\n    )\n  }, [source])\n\n  const entries = {}\n  const allowList = {}\n  const localeKeys = (\n    Array.isArray(localeKey) ? localeKey : [localeKey]\n  ).map((key) => {\n    if (key.includes('.')) {\n      const first = key.split('.')[0]\n      allowList[first] = allowList[first] || []\n      allowList[first].push(key)\n      return first\n    }\n\n    return key\n  })\n\n  const addToEntries = (key, translation, locale, localeKey) => {\n    key = `${localeKey}.${key}`\n    if (allowList[localeKey] && !allowList[localeKey].includes(key)) {\n      return\n    }\n    entries[key] = Object.assign(entries[key] || {}, {\n      [locale]: translation,\n    })\n  }\n\n  Object.entries(source).forEach(([locale, translations]) => {\n    localeKeys.forEach((localeKey) => {\n      const translationsObj = translations[localeKey]\n      if (!translationsObj) {\n        warn(\n          `TranslationsTable: Could not find any translations for key: \"${localeKey}\", perhaps you misspelled the key's name?`,\n        )\n        return\n      }\n      Object.entries(translationsObj).forEach(([key, translation]) => {\n        if (typeof translation === 'object') {\n          const nestedKey = `${localeKey}.${key}`\n          Object.entries(translation).forEach(([key, translation]) => {\n            addToEntries(key, translation, locale, nestedKey)\n          })\n        } else {\n          addToEntries(key, translation, locale, localeKey)\n        }\n      })\n    })\n  })\n\n  const locales = Object.keys(source)\n  const tableRows = Object.entries(entries).map(([key, values]) => {\n    return (\n      <Tr key={key}>\n        <Td>\n          <FormattedCode variant=\"prop\">{key}</FormattedCode>\n        </Td>\n        {Object.entries(values).map(([locale, value], i) => {\n          return (\n            <Td key={i + locale}>\n              {typeof value === 'string' ? (\n                value\n              ) : (\n                <pre>{JSON.stringify(value, null, 2)}</pre>\n              )}\n            </Td>\n          )\n        })}\n      </Tr>\n    )\n  })\n\n  if (tableRows.length == 0) {\n    warn(\n      `TranslationsTable: Not able to find any translations for input : \"${localeKey}\", hence not rendering the translations table.`,\n    )\n    return\n  }\n\n  return (\n    <>\n      <P>\n        More info about translations can be found in the{' '}\n        <Anchor href=\"/uilib/usage/customisation/localization/\">\n          general localization\n        </Anchor>{' '}\n        and{' '}\n        <Anchor href=\"/uilib/extensions/forms/getting-started/#localization-and-translation\">\n          Eufemia Forms localization\n        </Anchor>{' '}\n        docs.\n      </P>\n      <Table.ScrollView>\n        <StyledTable>\n          <thead>\n            <Tr>\n              <Th>Key</Th>\n              {locales.map((locale) => {\n                const { status } = languageDisplayNames[locale]\n                return (\n                  <Th key={locale}>\n                    {locale}\n                    {status ? ` (${status})` : null}\n                  </Th>\n                )\n              })}\n            </Tr>\n          </thead>\n          <tbody>{tableRows}</tbody>\n        </StyledTable>\n      </Table.ScrollView>\n    </>\n  )\n}\n","import { PropertiesTableProps } from '../../shared/types'\n\nexport const inputProperties: PropertiesTableProps = {\n  value: {\n    doc: 'The content value of the input.',\n    type: 'string',\n    status: 'optional',\n  },\n  align: {\n    doc: 'Defines the text alignment of the input. Can be `left`, `right` or `center`. Defaults to `left`.',\n    type: 'string',\n    status: 'optional',\n  },\n  label: {\n    doc: 'Prepends the Form Label component. If no ID is provided, a random ID is created.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  label_sr_only: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  label_direction: {\n    doc: 'Use `label_direction=\"vertical\"` to change the label layout direction. Defaults to `horizontal`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status: {\n    doc: 'Text with a status message. The style defaults to an error message. You can use `true` to only get the status color, without a message.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_state: {\n    doc: 'Defines the state of the status. Currently, there are two statuses `[error, info]`. Defaults to `error`.',\n    type: 'string',\n    status: 'optional',\n  },\n  status_props: {\n    doc: 'Use an object to define additional FormStatus properties.',\n    type: 'object',\n    status: 'optional',\n  },\n  globalStatus: {\n    doc: 'The [configuration](/uilib/components/global-status/properties/#configuration-object) used for the target [GlobalStatus](/uilib/components/global-status).',\n    type: 'object',\n    status: 'optional',\n  },\n  placeholder: {\n    doc: 'The placeholder which shows up once the input value is empty.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon: {\n    doc: 'Icon to show before or after the input / placeholder. Can be either a string defining a primary icon or a Component using an SVG icon of either 16px or 24px.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  icon_position: {\n    doc: 'Defines the position of icon inside the input. Set to `left` or `right`. Defaults to `left` if not set.',\n    type: 'string',\n    status: 'optional',\n  },\n  icon_size: {\n    doc: 'The icon size of the icon shows. Defaults to `medium`.',\n    type: 'string',\n    status: 'optional',\n  },\n  keep_placeholder: {\n    doc: 'Set to `true` in case the `placeholder` has to be kept during focus. By default, the placeholder disappears on focus.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  input_class: {\n    doc: 'In case we have to set a custom input class.',\n    type: 'string',\n    status: 'optional',\n  },\n  type: {\n    doc: 'Choose between `text`, `number`, `email`, `password`, `url`, `tel` and `search`.',\n    type: 'string',\n    status: 'optional',\n  },\n  autocomplete: {\n    doc: 'Defaults to `off`. Set to `on` or any of [allowed `attributes`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete). Keep in mind, 1. you may have to define a `name`, 2. have the input as a descendant of a `<form>` element, 3. and have a submit button inside the form.',\n    type: 'string',\n    status: 'optional',\n  },\n  submit_button_title: {\n    doc: 'Title attribute for the search icon. Only relevant if search input.',\n    type: 'string',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text describing the content of the input more than the label. you can also send in a React component, so it gets wrapped inside the Input component.',\n    type: ['string', 'React.Node'],\n    status: 'optional',\n  },\n  size: {\n    doc: 'The sizes you can choose is `default` (2rem), `medium` (2.5rem) and `large` (3rem) are supported component sizes. Defaults to `default` / `null`. Also, if you define a number like `size={2}` then it will be forwarded as the input element attribute.',\n    type: ['string', 'number'],\n    status: 'optional',\n  },\n  selectall: {\n    doc: 'If set to `true`, then the whole input value gets selected on the entry focus. A second click will place the cursor on the wanted position.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  clear: {\n    doc: 'If set to `true`, then a clear button will be shown which lets the user clear any given input value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  stretch: {\n    doc: 'If set to `true`, then the input field will be 100% in `width`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  skeleton: {\n    doc: 'If set to `true`, an overlaying skeleton with animation will be shown.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  input_attributes: {\n    doc: 'Provide the Input element with any attributes by using an Object `input_attributes={{size:\\'2\\'}}` or a JSON Object `input_attributes=\\'{\"size\":\"2\"}\\'`. **NB:** Keep in mind, that also every not listed component property will be sent along and set as an Input element attribute.',\n    type: 'object',\n    status: 'optional',\n  },\n  input_state: {\n    doc: 'Defines a custom visual state of the input. Use it only if you have to simulate a custom state. Currently are three statuses `virgin` , `focus` and `dirty`. Defaults to `null`.',\n    type: 'string',\n    status: 'optional',\n  },\n  submit_element: {\n    doc: 'Accepts a React element which will show up like the \"submit button\" would do on `type=\"search\"`.',\n    type: ['string', 'React.Element'],\n    status: 'optional',\n  },\n  inner_ref: {\n    doc: 'By providing a React.ref we can get the internally used input element (DOM). E.g. `inner_ref={myRef}` by using `React.createRef()` or `React.useRef()`.',\n    type: 'React.Ref',\n    status: 'optional',\n  },\n  input_element: {\n    doc: 'By providing a new component we can change the internally used element. Also supports a string only, like `input_element=\"input\"`.',\n    type: ['string', 'React.Element'],\n    status: 'internal',\n  },\n  inner_element: {\n    doc: 'By providing a new component to be rendered inside the \"shell\" – we can add a freely customizable internal element. Used by the Autocomplete component.',\n    type: ['string', 'React.Element'],\n    status: 'internal',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\nexport const inputEvents: PropertiesTableProps = {\n  on_change: {\n    doc: 'will be called on value changes made by the user. Returns an object with the value as a string and the native event: `{ value, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_focus: {\n    doc: 'will be called on focus set by the user. Returns `{ value, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_key_down: {\n    doc: 'will be called on key down by the user. Returns `{ value, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_blur: {\n    doc: 'will be called on blur set by the user. Returns `{ value, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_submit: {\n    doc: 'will be called on submit button click. Returns `{ value, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n  on_clear: {\n    doc: 'will be called on a clear button click. Returns `{ value, previousValue, event }`.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n","/**\n * HTML Element\n *\n */\n\nimport Td from '../components/table/TableTd'\nexport * from '../components/table/TableTd'\nexport default Td\n","/**\n * HTML Element\n *\n */\n\nimport Th from '../components/table/TableTh'\nexport * from '../components/table/TableTh'\nexport default Th\n","/**\n * HTML Element\n *\n */\n\nimport Tr from '../components/table/TableTr'\nexport * from '../components/table/TableTr'\nexport default Tr\n","import { PropertiesTableProps } from '../../../shared/types'\nimport { FieldBlockSharedProperties } from '../FieldBlock/FieldBlockDocs'\nimport {\n  DataValueWritePropsEvents,\n  DataValueWritePropsProperties,\n} from '../hooks/DataValueWritePropsDocs'\n\nexport const FieldProperties: PropertiesTableProps = {\n  ...DataValueWritePropsProperties,\n  ...FieldBlockSharedProperties,\n}\n\nexport const FieldEvents: PropertiesTableProps = {\n  ...DataValueWritePropsEvents,\n}\n\nexport const getFieldEventsWithTypes = (\n  valueType: { type: string; optional?: boolean } = undefined,\n  additionalArgsType: { type: string; optional?: boolean } = undefined\n): PropertiesTableProps => {\n  const value = valueType\n    ? `value${valueType.optional ? '?' : ''}: ${valueType.type}`\n    : 'value'\n\n  const add = additionalArgsType\n    ? `, additionalArgs${additionalArgsType.optional ? '?' : ''}: ${\n        additionalArgsType.type\n      }`\n    : ''\n\n  const typeString = `(${value}${add}) => void`\n\n  return {\n    ...FieldEvents,\n    onChange: {\n      ...FieldEvents.onChange,\n      type: typeString,\n    },\n    onFocus: {\n      ...FieldEvents.onFocus,\n      type: typeString,\n    },\n    onBlur: {\n      ...FieldEvents.onBlur,\n      type: typeString,\n    },\n  }\n}\n","import { inputProperties } from '../../../../components/input/InputDocs'\nimport { PropertiesTableProps } from '../../../../shared/types'\n\nexport const numberProperties: PropertiesTableProps = {\n  decimalLimit: {\n    doc: 'Max number of decimals. Values with more decimals will be rounded. Defaults to `12`.',\n    type: 'number',\n    status: 'optional',\n  },\n  percent: {\n    doc: 'Format a number as percentage.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  currency: {\n    doc: 'Currency code (ISO 4217) or `true` to use the default `NOK`. Uses two decimals by default.',\n    type: ['boolean', 'string'],\n    status: 'optional',\n  },\n  allowNegative: {\n    doc: 'Whether or not to allow negative numbers. Defaults to `true`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  disallowLeadingZeroes: {\n    doc: 'Whether or not to allow leading zeroes. Defaults to `false`.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  minimum: {\n    doc: 'Validation for inclusive minimum number value (greater than or equal). Defaults to `Number.MIN_SAFE_INTEGER`.',\n    type: 'number',\n    status: 'optional',\n  },\n  maximum: {\n    doc: 'Validation for inclusive maximum number value (less than or equal). Defaults to `Number.MAX_SAFE_INTEGER`.',\n    type: 'number',\n    status: 'optional',\n  },\n  exclusiveMinimum: {\n    doc: 'Validation for exclusive minimum number value (greater than).',\n    type: 'number',\n    status: 'optional',\n  },\n  exclusiveMaximum: {\n    doc: 'Validation for exclusive maximum number value (less than).',\n    type: 'number',\n    status: 'optional',\n  },\n  multipleOf: {\n    doc: 'Validation that requires the number to be a multiple of given value.',\n    type: 'number',\n    status: 'optional',\n  },\n  width: {\n    doc: '`false` for no width (use browser default), `small`, `medium` or `large` for predefined standard widths, `stretch` for fill available width.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  size: {\n    ...inputProperties.size,\n    doc: `${inputProperties.size.doc} Consider rather setting field sizes with [Form.Appearance](/uilib/extensions/forms/Form/Appearance/).`,\n  },\n  align: {\n    doc: 'Lateral alignment of contents of input field, one of `left` (default), `center`, or `right`.',\n    type: 'string',\n    status: 'optional',\n  },\n  autoComplete: {\n    doc: 'For HTML `autocomplete` attributes.',\n    type: ['on', 'string'],\n    status: 'optional',\n  },\n  prefix: {\n    doc: 'Text added before the value input.',\n    type: 'string',\n    status: 'optional',\n  },\n  suffix: {\n    doc: 'Text added after the value input.',\n    type: 'string',\n    status: 'optional',\n  },\n  step: {\n    doc: 'Determines step granularity when in/decreasing value input through step controls buttons or arrow keys. Defaults to 1.',\n    type: 'number',\n    status: 'optional',\n  },\n  startWith: {\n    doc: 'When no `value` or `defaultValue` is given, start with a given value when in/decreasing value input through step controls buttons or arrow keys. Defaults to `null`.',\n    type: 'number',\n    status: 'optional',\n  },\n  showStepControls: {\n    doc: 'Show buttons that in/decreases value input by the step value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const FieldBlockSharedProperties: PropertiesTableProps = {\n  label: {\n    doc: 'Field label to show above / before the input feature.',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescription: {\n    doc: 'A more discreet text displayed beside the label (i.e for \"(optional)\").',\n    type: 'string',\n    status: 'optional',\n  },\n  labelDescriptionInline: {\n    doc: 'If true, the labelDescription will be displayed on the same line as the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSrOnly: {\n    doc: 'Use `true` to make the label only readable by screen readers.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  help: {\n    doc: 'Provide help content for the field using `title` and `content` as a string or React.Node. Additionally, you can set `open` to `true` to display the inline help, set the `breakout` property to `false` to disable the breakout of the inline help content, or use `renderAs` set to `dialog` to render the content in a [Dialog](/uilib/components/dialog/) (recommended for larger amounts of content).',\n    type: 'object',\n    status: 'optional',\n  },\n  layout: {\n    doc: 'Layout for the label and input. Can be `horizontal` or `vertical`.',\n    type: 'string',\n    status: 'optional',\n  },\n  layoutOptions: {\n    doc: 'Use this to set additional options for the `horizontal` layout. E.g. `{ width: \"medium\" }`. You can also use a custom width `{number}rem`. Instead of a width, you can use a min/max width. E.g. `{ minWidth: \"6rem\", maxWidth: \"12rem\" }`.',\n    type: 'object',\n    status: 'optional',\n  },\n  width: {\n    doc: 'Will set the width for the whole block. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  contentWidth: {\n    doc: 'Will set the width for its contents. Use `small`, `medium`, `large` for predefined standard widths. You can also set a custom width `{number}rem` or use `stretch` or `false`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  '[Space](/uilib/layout/space/properties)': {\n    doc: 'Spacing properties like `top` or `bottom` are supported.',\n    type: ['string', 'object'],\n    status: 'optional',\n  },\n}\n\n/** For internal use only */\nexport const FieldBlockProperties: PropertiesTableProps = {\n  ...FieldBlockSharedProperties,\n  labelSize: {\n    doc: 'Define one of the following [heading sizes](/uilib/elements/heading/): `medium` or `large`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  labelHeight: {\n    doc: 'Defines the height of an component (size prop), so the label can be aligned correctly. Can be `default`, `small`, `medium`, `large`.',\n    type: 'string',\n    status: 'optional',\n  },\n  asFieldset: {\n    doc: 'Use `true` when you have several form elements. This way a `fieldset` with a `legend` is used.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  align: {\n    doc: '`center` or `bottom` for aligning the contents vertically. Defaults to `bottom`.',\n    type: ['string', 'false'],\n    status: 'optional',\n  },\n  disableStatusSummary: {\n    doc: 'Use `true` to disable the error summary.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  composition: {\n    doc: 'Use `true` for when you have more than one field wrapped.',\n    type: 'true',\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to make the inner [FormLabel](/uilib/components/form-label/) behave as disabled.',\n    type: 'boolean',\n    status: 'optional',\n  },\n}\n","import { PropertiesTableProps } from '../../../shared/types'\n\nexport const DataValueWritePropsProperties: PropertiesTableProps = {\n  value: {\n    doc: 'Source data value for the field. Will take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  defaultValue: {\n    doc: 'Default source data value for the field. Will not take precedence over the path value given in the data context.',\n    type: '{valueType}',\n    status: 'optional',\n  },\n  path: {\n    doc: 'JSON Pointer for where the data for the field is located in the source dataset (when using Form.Handler or DataContext). The `path` will also be set as the `name` attribute for the [string](/uilib/extensions/forms/base-fields/String/)-field.',\n    type: 'string',\n    status: 'optional',\n  },\n  info: {\n    doc: \"Info message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  warning: {\n    doc: \"Warning message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['React.Node', 'Array<React.Node>', 'function'],\n    status: 'optional',\n  },\n  error: {\n    doc: \"Error message shown below / after the field. When provided as a function, the function will be called with the current value as argument. The second parameter is an object with `{ conditionally, getValueByPath, getFieldByPath }`. To show the message first after the user has interacted with the field, you can call and return `conditionally` function with a callback and with options: `conditionally(() => 'Your message', { showInitially: true })`\",\n    type: ['Error', 'FormError', 'Array<Error | FormError>', 'function'],\n    status: 'optional',\n  },\n  disabled: {\n    doc: 'Set `true` to show the field but without the possibility of changing the value.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  emptyValue: {\n    doc: 'The value to use (in `onChange` events etc) when emptying the field. Makes it possible for instance to provide `undefined` instead of an empty string when clearing the content of a text input.',\n    type: ['{valueType}', 'undefined'],\n    status: 'optional',\n  },\n  required: {\n    doc: 'When set to `true`, the field will give an error if the value fails the required validation. When set to `false`, the field will not be required, but will add a \"(optional)\" suffix to the label.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  labelSuffix: {\n    doc: 'Will append an additional text to the label, like \"(optional)\". When using `inheritLabel`, the suffix will not be inherited. NB: The visual appearance of the `labelSuffix` may change in the future.',\n    type: 'React.Node',\n    status: 'optional',\n  },\n  schema: {\n    doc: 'Custom JSON Schema for validating the value.',\n    type: 'object',\n    status: 'optional',\n  },\n  validateInitially: {\n    doc: 'Set to `true` to show validation based errors initially (from given value-prop or source data) before the user interacts with the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateUnchanged: {\n    doc: 'Set to `true` to show validation based errors when the field is touched (like focusing a field and blurring) without having changed the value. Since the user did not introduce a new error, this will apply when the value was initially invalid based on validation.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  validateContinuously: {\n    doc: 'Set to `true` to show validation based errors continuously while writing, not just when blurring the field.',\n    type: 'boolean',\n    status: 'optional',\n  },\n  errorMessages: {\n    doc: 'Custom error messages for each type of error, overriding default messages.',\n    type: 'object',\n    status: 'optional',\n  },\n  onChangeValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered on every change done by the user. The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  onBlurValidator: {\n    doc: 'Custom validator function where you can return `undefined`, `Error`, `FormError` or an Array with either several other validators or several `Error` or `FormError`. It is triggered when the user leaves a field (e.g., blurring a text input or closing a dropdown). The function can be either asynchronous or synchronous. The first parameter is the value, and the second parameter returns an object containing { errorMessages, connectWithPath, validators }.',\n    type: 'function',\n    status: 'optional',\n  },\n  transformIn: {\n    doc: 'Transforms the `value` before its displayed in the field (e.g. input).',\n    type: 'function',\n    status: 'optional',\n  },\n  transformOut: {\n    doc: 'Transforms the value before it gets forwarded to the form data object (context) or returned as the `onChange` value parameter. The first parameter is the internal value. Some fields to support a second parameter, like the SelectCountry, where the country object is given.',\n    type: 'function',\n    status: 'optional',\n  },\n}\n\nexport const DataValueWritePropsEvents: PropertiesTableProps = {\n  onChange: {\n    doc: \"Will be called on value changes made by the user, with the new value as argument. When an `async` function is used, the corresponding [FieldBlock](/uilib/extensions/forms/create-component/FieldBlock/) will show an indicator on the field label. You can return `{ success: 'saved' } as const` to show a success symbol, or an error or an object with these keys `{ info: 'Info message', warning: 'Warning message', error: Error('My error') } as const`. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).\",\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onFocus: {\n    doc: 'Will be called when the component gets into focus. Like clicking inside a text input or opening a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n  onBlur: {\n    doc: 'Will be called when the component stop being in focus. Like when going to next field, or closing a dropdown. Called with active value as argument. The second parameter is an object that e.g. contains `props` (all given `Field.*` properties).',\n    type: '(value) => void',\n    status: 'optional',\n  },\n}\n"],"names":["StyledTable","_styled","Table","target","name","styles","TranslationsTable","_ref","localeKey","source","useMemo","Object","assign","extendDeep","globalTranslations","formsTranslations","translationsWithoutEnUS","entries","allowList","localeKeys","Array","isArray","map","key","includes","first","split","push","addToEntries","translation","locale","forEach","_ref2","translations","translationsObj","_ref3","nestedKey","_ref4","warn","locales","keys","tableRows","_ref5","values","_jsxs","Tr","children","_jsx","Td","FormattedCode","variant","_ref6","i","value","JSON","stringify","length","_Fragment","P","Anchor","href","Th","status","languageDisplayNames","inputProperties","doc","type","align","label","label_sr_only","label_direction","status_state","status_props","globalStatus","placeholder","icon","icon_position","icon_size","keep_placeholder","input_class","autocomplete","submit_button_title","suffix","size","selectall","clear","stretch","skeleton","input_attributes","input_state","submit_element","inner_ref","input_element","inner_element","inputEvents","on_change","on_focus","on_key_down","on_blur","on_submit","on_clear","FieldProperties","DataValueWritePropsProperties","FieldBlockSharedProperties","FieldEvents","DataValueWritePropsEvents","getFieldEventsWithTypes","valueType","additionalArgsType","undefined","typeString","optional","onChange","onFocus","onBlur","numberProperties","decimalLimit","percent","currency","allowNegative","disallowLeadingZeroes","minimum","maximum","exclusiveMinimum","exclusiveMaximum","multipleOf","width","autoComplete","prefix","step","startWith","showStepControls","labelDescription","labelDescriptionInline","labelSrOnly","help","layout","layoutOptions","contentWidth","FieldBlockProperties","labelSize","labelHeight","asFieldset","disableStatusSummary","composition","disabled","defaultValue","path","info","warning","error","emptyValue","required","labelSuffix","schema","validateInitially","validateUnchanged","validateContinuously","errorMessages","onChangeValidator","onBlurValidator","transformIn","transformOut"],"sourceRoot":""}