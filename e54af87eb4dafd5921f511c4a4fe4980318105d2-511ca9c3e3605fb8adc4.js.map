{"version":3,"file":"e54af87eb4dafd5921f511c4a4fe4980318105d2-511ca9c3e3605fb8adc4.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/Upload/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Value/Upload/demos.mdx","webpack://dnb-design-system-portal/./src/docs/uilib/components/upload/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Form/SubmitIndicator/Examples.tsx"],"sourcesContent":["import ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Form, Value, Field } from '@dnb/eufemia/src/extensions/forms'\nimport { Flex, Span } from '@dnb/eufemia/src'\nimport { createRequest } from '../../Form/SubmitIndicator/Examples'\nimport { createMockFile } from '../../../../../../docs/uilib/components/upload/Examples'\n\nexport const Placeholder = () => {\n  return (\n    <ComponentBox>\n      <Value.Upload placeholder=\"No values given\" />\n    </ComponentBox>\n  )\n}\n\nexport const WithValue = () => {\n  return (\n    <ComponentBox\n      scope={{ createMockFile }}\n      data-visual-test=\"upload-value-default\"\n    >\n      <Value.Upload\n        inline\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n        ]}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithSize = () => {\n  return (\n    <ComponentBox\n      hideCode\n      scope={{ createMockFile }}\n      data-visual-test=\"upload-value-size\"\n    >\n      <Value.Upload\n        displaySize\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n        ]}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithDownload = () => {\n  return (\n    <ComponentBox hideCode scope={{ createMockFile }}>\n      <Value.Upload\n        download\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n        ]}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const WithCustomFormat = () => {\n  return (\n    <ComponentBox hideCode scope={{ createMockFile }}>\n      <Form.Handler\n        locale=\"en-GB\"\n        data={{\n          myPath: [\n            {\n              file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n              exists: false,\n              id: '1',\n            },\n            {\n              file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n              exists: false,\n              id: '2',\n            },\n          ],\n        }}\n      >\n        <Value.Upload\n          inline\n          path=\"/myPath\"\n          format={{ type: 'disjunction' }}\n        />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const FieldUploadSelectionPath = () => {\n  return (\n    <ComponentBox hideCode scope={{ createMockFile }}>\n      <Form.Handler\n        data={{\n          myPath: [\n            {\n              file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n              exists: false,\n              id: '1',\n            },\n            {\n              file: createMockFile('fileName-2.png', 3000000, 'image/png'),\n              exists: false,\n              id: '2',\n            },\n            {\n              file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n              exists: false,\n              id: '3',\n            },\n          ],\n        }}\n      >\n        <Flex.Stack>\n          <Field.Upload label=\"My selections\" path=\"/myPath\" />\n          <Value.Upload\n            inheritLabel\n            path=\"/myPath\"\n            variant=\"ul\"\n            listType=\"unstyled\"\n          />\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Label = () => {\n  return (\n    <ComponentBox>\n      <Value.Upload label=\"Label text\" showEmpty />\n    </ComponentBox>\n  )\n}\n\nexport const LabelAndValue = () => {\n  return (\n    <ComponentBox\n      hideCode\n      scope={{ createMockFile }}\n      data-visual-test=\"upload-value-label-and-value\"\n    >\n      <Value.Upload\n        label=\"Label text\"\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n        ]}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const LabelAndValueOnFileClick = () => {\n  return (\n    <ComponentBox\n      hideCode\n      scope={{ createMockFile }}\n      data-visual-test=\"upload-value-label-and-value-on-file-click\"\n    >\n      <Value.Upload\n        onFileClick={() => {\n          console.log('Clicked on file')\n        }}\n        label=\"Label text\"\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            isLoading: true,\n            id: '2',\n          },\n        ]}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const Inline = () => {\n  return (\n    <ComponentBox\n      hideCode\n      scope={{ createMockFile }}\n      data-visual-test=\"upload-value-inline\"\n    >\n      <Span>\n        This is before the component{' '}\n        <Value.Upload\n          value={[\n            {\n              file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n              exists: false,\n              id: '1',\n            },\n            {\n              file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n              exists: false,\n              id: '2',\n            },\n          ]}\n          inline\n        />{' '}\n        This is after the component\n      </Span>\n    </ComponentBox>\n  )\n}\n\nexport const ListVariants = () => {\n  return (\n    <ComponentBox\n      scope={{ createMockFile }}\n      data-visual-test=\"upload-value-lists\"\n      hideCode\n    >\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Ordered List\"\n        variant=\"ol\"\n      />\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Unordered List\"\n        variant=\"ul\"\n      />\n    </ComponentBox>\n  )\n}\n\nexport const ListVariantsOnFileClick = () => {\n  return (\n    <ComponentBox\n      scope={{ createMockFile }}\n      data-visual-test=\"upload-value-lists-on-file-click\"\n      hideCode\n    >\n      <Value.Upload\n        onFileClick={() => {\n          console.log('Clicked on file')\n        }}\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            isLoading: true,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Ordered List\"\n        variant=\"ol\"\n      />\n      <Value.Upload\n        onFileClick={() => {\n          console.log('Clicked on file')\n        }}\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n            isLoading: true,\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n            isLoading: true,\n          },\n        ]}\n        label=\"Unordered List\"\n        variant=\"ul\"\n      />\n    </ComponentBox>\n  )\n}\n\nexport const ListTypes = () => {\n  return (\n    <ComponentBox scope={{ createMockFile }} hideCode>\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Ordered List a\"\n        variant=\"ol\"\n        listType=\"a\"\n      />\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Ordered List A\"\n        variant=\"ol\"\n        listType=\"A\"\n      />\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Ordered List i\"\n        variant=\"ol\"\n        listType=\"i\"\n      />\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Ordered List I\"\n        variant=\"ol\"\n        listType=\"I\"\n      />\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Unordered List square\"\n        variant=\"ul\"\n        listType=\"square\"\n      />\n      <Value.Upload\n        value={[\n          {\n            file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n          {\n            file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n            exists: false,\n            id: '3',\n          },\n        ]}\n        label=\"Unordered List circle\"\n        variant=\"ul\"\n        listType=\"circle\"\n      />\n    </ComponentBox>\n  )\n}\n\nexport const OnFileClick = () => {\n  return (\n    <ComponentBox scope={{ createMockFile, createRequest }}>\n      <Value.Upload\n        label=\"Label text\"\n        value={[\n          {\n            file: createMockFile('35217511.jpg', 1000000, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('1501870.jpg', 2000000, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n        ]}\n        onFileClick={async ({ fileItem }) => {\n          const request = createRequest()\n          console.log(\n            `making API request to fetch the url of the file: ${fileItem.file.name}`,\n          )\n          await request(2000) // Simulate a request\n          window.open(\n            `https://eufemia.dnb.no/images/avatars/${fileItem.file.name}`,\n            '_blank',\n          )\n        }}\n      />\n    </ComponentBox>\n  )\n}\n\nexport const DisplayFileAsNonClickable = () => {\n  return (\n    <ComponentBox\n      hideCode\n      scope={{ createMockFile }}\n      data-visual-test=\"upload-value-display-file-as-non-clickable\"\n    >\n      <Value.Upload\n        label=\"Label text\"\n        value={[\n          {\n            file: createMockFile('35217511.jpg', 0, 'image/png'),\n            exists: false,\n            id: '1',\n          },\n          {\n            file: createMockFile('1501870.jpg', undefined, 'image/png'),\n            exists: false,\n            id: '2',\n          },\n        ]}\n      />\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    code: \"code\",\n    p: \"p\"\n  }, _provideComponents(), props.components), {VisibleWhenVisualTest} = _components;\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.DisplayFileAsNonClickable) _missingMdxReference(\"Examples.DisplayFileAsNonClickable\", true);\n  if (!Examples.FieldUploadSelectionPath) _missingMdxReference(\"Examples.FieldUploadSelectionPath\", true);\n  if (!Examples.Inline) _missingMdxReference(\"Examples.Inline\", true);\n  if (!Examples.Label) _missingMdxReference(\"Examples.Label\", true);\n  if (!Examples.LabelAndValue) _missingMdxReference(\"Examples.LabelAndValue\", true);\n  if (!Examples.LabelAndValueOnFileClick) _missingMdxReference(\"Examples.LabelAndValueOnFileClick\", true);\n  if (!Examples.ListTypes) _missingMdxReference(\"Examples.ListTypes\", true);\n  if (!Examples.ListVariants) _missingMdxReference(\"Examples.ListVariants\", true);\n  if (!Examples.ListVariantsOnFileClick) _missingMdxReference(\"Examples.ListVariantsOnFileClick\", true);\n  if (!Examples.OnFileClick) _missingMdxReference(\"Examples.OnFileClick\", true);\n  if (!Examples.Placeholder) _missingMdxReference(\"Examples.Placeholder\", true);\n  if (!Examples.WithCustomFormat) _missingMdxReference(\"Examples.WithCustomFormat\", true);\n  if (!Examples.WithDownload) _missingMdxReference(\"Examples.WithDownload\", true);\n  if (!Examples.WithSize) _missingMdxReference(\"Examples.WithSize\", true);\n  if (!Examples.WithValue) _missingMdxReference(\"Examples.WithValue\", true);\n  if (!VisibleWhenVisualTest) _missingMdxReference(\"VisibleWhenVisualTest\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Placeholder\"\n    }), \"\\n\", _jsx(Examples.Placeholder, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Value\"\n    }), \"\\n\", _jsx(Examples.WithValue, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"With \", _jsx(_components.code, {\n        children: \"displaySize\"\n      }), \" property\"]\n    }), \"\\n\", _jsx(Examples.WithSize, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"With \", _jsx(_components.code, {\n        children: \"download\"\n      }), \" property\"]\n    }), \"\\n\", _jsx(Examples.WithDownload, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Custom format\"\n    }), \"\\n\", _jsx(Examples.WithCustomFormat, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Label\"\n    }), \"\\n\", _jsx(Examples.Label, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Label and value\"\n    }), \"\\n\", _jsx(Examples.LabelAndValue, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Inline\"\n    }), \"\\n\", _jsx(Examples.Inline, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"List variants\"\n    }), \"\\n\", _jsx(Examples.ListVariants, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"List types\"\n    }), \"\\n\", _jsx(Examples.ListTypes, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Field.Upload path\"\n    }), \"\\n\", _jsx(Examples.FieldUploadSelectionPath, {}), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Using \", _jsx(_components.code, {\n        children: \"onFileClick\"\n      })]\n    }), \"\\n\", _jsx(Examples.OnFileClick, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Display files as non-clickable\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When file size is 0 or not given (\", _jsx(_components.code, {\n        children: \"new File([], name, { type })\"\n      }), \"), the file is displayed as a span instead of an anchor. How ever, when \", _jsx(_components.code, {\n        children: \"onFileClick\"\n      }), \" is given, the file will be clickable as a button.\"]\n    }), \"\\n\", _jsx(Examples.DisplayFileAsNonClickable, {}), \"\\n\", _jsxs(VisibleWhenVisualTest, {\n      children: [_jsx(Examples.LabelAndValueOnFileClick, {}), _jsx(Examples.ListVariantsOnFileClick, {})]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","/**\n * UI lib Component Example\n *\n */\n\nimport {\n  Button,\n  Img,\n  Section,\n  ToggleButton,\n  Upload,\n} from '@dnb/eufemia/src'\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { createRequest } from '../../extensions/forms/Form/SubmitIndicator/Examples'\n\nexport function createMockFile(name: string, size: number, type: string) {\n  if (typeof window === 'undefined' || !window?.File) {\n    return undefined\n  }\n  const file = new File([], name, { type })\n  Object.defineProperty(file, 'size', {\n    get() {\n      return size\n    },\n  })\n  return file\n}\n\nexport const UploadPrefilledFileList = () => (\n  <ComponentBox\n    data-visual-test=\"upload-file-list\"\n    scope={{ createMockFile }}\n  >\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('file-list')\n\n        if (files.length) {\n          console.log('files', files)\n        }\n\n        React.useEffect(() => {\n          setFiles([\n            {\n              file: createMockFile('fileName.png', 123, 'image/png'),\n              errorMessage: 'This is no real file!',\n            },\n          ])\n        }, [setFiles])\n\n        return <Upload acceptedFileTypes={['jpg', 'png']} id=\"file-list\" />\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadBasic = () => (\n  <ComponentBox data-visual-test=\"upload-basic\">\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      onChange={({ files }) => console.log('onChange', files)}\n    />\n  </ComponentBox>\n)\n\nexport const UploadDisabled = () => (\n  <ComponentBox data-visual-test=\"upload-disabled\">\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      disabled\n      onChange={({ files }) => console.log('onChange', files)}\n    />\n  </ComponentBox>\n)\n\nexport const UploadSingleFile = () => (\n  <ComponentBox>\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-single-file')\n\n        if (files.length) {\n          console.log('files', files, setFiles)\n        }\n\n        return (\n          <Upload\n            acceptedFileTypes={['jpg', 'png']}\n            id=\"upload-single-file\"\n            filesAmountLimit={1}\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadFilesAmountMessage = () => (\n  <ComponentBox\n    scope={{ createMockFile }}\n    data-visual-test=\"upload-files-amount-message\"\n  >\n    {() => {\n      const Component = () => {\n        const { setInternalFiles, setFiles } = Upload.useUpload(\n          'upload-files-amount-message',\n        )\n\n        React.useEffect(() => {\n          setFiles([\n            { file: createMockFile('fileName1.png', 123, 'image/png') },\n            { file: createMockFile('fileName2.png', 321, 'image/png') },\n          ])\n          setInternalFiles([\n            {\n              file: createMockFile('fileName1.png', 123, 'image/png'),\n              id: '1',\n              exists: false,\n            },\n            {\n              file: createMockFile('fileName2.png', 321, 'image/png'),\n              id: '2',\n              exists: false,\n            },\n          ])\n        }, [])\n\n        return (\n          <Upload\n            acceptedFileTypes={['jpg', 'png']}\n            id=\"upload-files-amount-message\"\n            filesAmountLimit={1}\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadRemoveFile = () => (\n  <ComponentBox>\n    {() => {\n      const Component = () => {\n        const myUploadId = 'unique-id' // or a function, object or React Context reference.\n        const { files, setFiles } = Upload.useUpload(myUploadId) // id is needed when wanting to connect with the useUpload hook.\n\n        return (\n          <>\n            <Upload acceptedFileTypes={['jpg', 'png']} id={myUploadId} />\n\n            <Button\n              top=\"small\"\n              disabled={files.length < 1}\n              onClick={() => setFiles([])}\n            >\n              Remove selected files\n            </Button>\n\n            <Preview files={files} />\n          </>\n        )\n\n        function Preview({ files }) {\n          const [images, setImages] = React.useState([])\n\n          React.useEffect(() => {\n            files.map(({ file }) => {\n              let reader = new FileReader()\n\n              reader.addEventListener(\n                'load',\n                (event) => {\n                  images.push({ blob: event.target, file })\n                  setImages([...images])\n                  reader = null\n                },\n                false,\n              )\n\n              reader.readAsDataURL(file)\n            })\n          }, [files])\n\n          return (\n            <Section aria-label=\"List of chosen images\">\n              {images.map((img, i) => (\n                <Img\n                  top\n                  key={i}\n                  src={img.blob.result}\n                  alt={img.file.name}\n                  height={100}\n                />\n              ))}\n            </Section>\n          )\n        }\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadIsLoading = () => (\n  <ComponentBox\n    data-visual-test=\"upload-is-loading\"\n    scope={{ createMockFile }}\n  >\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload('upload-is-loading')\n\n        React.useEffect(() => {\n          setFiles([\n            {\n              file: createMockFile('fileName.png', 123, 'image/png'),\n              isLoading: true,\n            },\n          ])\n        }, [])\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-is-loading\"\n            />\n            <ToggleButton\n              top=\"small\"\n              disabled={files.length < 1}\n              on_change={({ checked }) =>\n                setFiles(\n                  files.map((fileItem) => {\n                    return { ...fileItem, isLoading: checked }\n                  }),\n                )\n              }\n            >\n              Files is loading toggle\n            </ToggleButton>\n          </>\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadErrorMessage = () => (\n  <ComponentBox data-visual-test=\"upload-error-message\">\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload(\n          'upload-error-message',\n        )\n\n        return (\n          <>\n            <Upload\n              acceptedFileTypes={['jpg', 'png']}\n              id=\"upload-error-message\"\n            />\n            <ToggleButton\n              top=\"small\"\n              disabled={files.length < 1}\n              on_change={({ checked }) => {\n                setFiles(\n                  files.map((fileItem) => {\n                    return {\n                      ...fileItem,\n                      errorMessage: checked\n                        ? 'custom error message'\n                        : null,\n                    }\n                  }),\n                )\n              }}\n            >\n              Toggle error message\n            </ToggleButton>\n          </>\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadAcceptedFormats = () => (\n  <ComponentBox>\n    {() => {\n      const Component = () => {\n        const { files, setFiles } = Upload.useUpload(\n          'upload-accepted-formats',\n        )\n\n        if (files.length) {\n          console.log('files', files, setFiles)\n        }\n\n        return (\n          <Upload\n            acceptedFileTypes={['png', 'jpg', 'pdf']}\n            id=\"upload-accepted-formats\"\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadFileMaxSizeBasedOnFileType = () => (\n  <ComponentBox\n    data-visual-test=\"upload-file-max-size-based-on-file-format\"\n    hideCode\n  >\n    <Upload\n      fileMaxSize={99}\n      acceptedFileTypes={[\n        { fileType: 'jpg', fileMaxSize: 1 },\n        { fileType: 'doc', fileMaxSize: 1 },\n        { fileType: 'svg', fileMaxSize: 1 },\n        { fileType: 'gif', fileMaxSize: 1 },\n        { fileType: 'doc', fileMaxSize: 4 },\n        { fileType: 'docx', fileMaxSize: 4 },\n        { fileType: 'tiff', fileMaxSize: 5 },\n        { fileType: 'tif', fileMaxSize: 5 },\n        { fileType: 'html', fileMaxSize: 6 },\n        { fileType: 'htm', fileMaxSize: 6 },\n        { fileType: 'xls', fileMaxSize: 7 },\n        { fileType: 'xlsx', fileMaxSize: 7 },\n        { fileType: 'odt' },\n        { fileType: 'pdf' },\n        { fileType: 'text', fileMaxSize: false },\n        { fileType: 'txt', fileMaxSize: 0 },\n        { fileType: 'zip', fileMaxSize: 99 },\n      ]}\n    />\n  </ComponentBox>\n)\n\nexport const UploadFileMaxSizeBasedOnFileTypeDisabled = () => (\n  <ComponentBox>\n    <Upload\n      acceptedFileTypes={[\n        { fileType: 'jpg', fileMaxSize: 0 },\n        { fileType: 'doc', fileMaxSize: false },\n        { fileType: 'svg' },\n      ]}\n    />\n  </ComponentBox>\n)\n\nexport const UploadDisabledFileMaxSize = () => (\n  <ComponentBox data-visual-test=\"upload-disabled-file-max-size\">\n    <Upload acceptedFileTypes={['jpg', 'pdf']} fileMaxSize={false} />\n  </ComponentBox>\n)\n\nexport const UploadNoTitleNoText = () => (\n  <ComponentBox data-visual-test=\"upload-no-title-no-text\">\n    <Upload\n      title={false}\n      text={false}\n      acceptedFileTypes={['jpg', 'png']}\n    />\n  </ComponentBox>\n)\n\nexport const UploadOnFileDeleteAsync = () => (\n  <ComponentBox scope={{ createRequest }}>\n    {() => {\n      async function mockAsyncFileRemoval({ fileItem }) {\n        const request = createRequest()\n        console.log('making API request to remove:', fileItem.file.name)\n        await request(3000) // Simulate a request\n        const mockResponse = {\n          successful_removal: Math.random() < 0.5, // Randomly fails to remove the file\n        }\n        if (!mockResponse.successful_removal) {\n          throw new Error('Unable to remove this file')\n        }\n      }\n\n      return (\n        <Upload\n          onFileDelete={mockAsyncFileRemoval}\n          acceptedFileTypes={['jpg', 'png']}\n        />\n      )\n    }}\n  </ComponentBox>\n)\n\nexport const UploadOnFileClick = () => (\n  <ComponentBox\n    scope={{ createMockFile, createRequest }}\n    data-visual-test=\"upload-on-file-click\"\n  >\n    {() => {\n      const Component = () => {\n        const { setFiles } = Upload.useUpload('upload-on-file-click')\n\n        React.useEffect(() => {\n          setFiles([\n            {\n              file: createMockFile('1501870.jpg', 123, 'image/png'),\n              id: '1',\n            },\n            {\n              file: createMockFile(\n                'file-name-that-is-very-long-and-has-letters.png',\n                123,\n                'image/png',\n              ),\n              id: '2',\n            },\n          ])\n        }, [setFiles])\n\n        async function mockAsyncFileFetching({ fileItem }) {\n          const request = createRequest()\n          console.log(\n            'making API request to fetch the url of the file:',\n            fileItem.file.name,\n          )\n          await request(2000) // Simulate a request\n          window.open(\n            `https://eufemia.dnb.no/images/avatars/${fileItem.file.name}`,\n            '_blank',\n          )\n        }\n\n        return (\n          <Upload\n            acceptedFileTypes={['jpg', 'png']}\n            id=\"upload-on-file-click\"\n            onFileClick={mockAsyncFileFetching}\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadFileEmptySize = () => (\n  <ComponentBox\n    scope={{ createMockFile, createRequest }}\n    data-visual-test=\"upload-file-empty-size\"\n  >\n    {() => {\n      const Component = () => {\n        const { setFiles } = Upload.useUpload('upload-file-size-empty')\n\n        React.useEffect(() => {\n          setFiles([\n            {\n              file: createMockFile('1501870.jpg', 0, 'image/png'),\n              id: '1',\n            },\n            {\n              file: createMockFile(\n                'file-name-that-is-very-long-and-has-letters.png',\n                0,\n                'image/png',\n              ),\n              id: '2',\n            },\n          ])\n        }, [setFiles])\n\n        return (\n          <Upload\n            acceptedFileTypes={['jpg', 'png']}\n            id=\"upload-file-size-empty\"\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadDisabledDragAndDrop = () => (\n  <ComponentBox data-visual-test=\"upload-disabled-drag-and-drop\">\n    <Upload\n      disableDragAndDrop\n      acceptedFileTypes={['jpg', 'png']}\n      onChange={({ files }) => console.log('onChange', files)}\n    />\n  </ComponentBox>\n)\n\nexport const UploadDescription = () => (\n  <ComponentBox\n    scope={{ createMockFile, createRequest }}\n    data-visual-test=\"upload-description\"\n  >\n    {() => {\n      const Component = () => {\n        const { setFiles } = Upload.useUpload('upload-description')\n\n        React.useEffect(() => {\n          setFiles([\n            {\n              file: createMockFile('1501870.jpg', 0, 'image/png'),\n              id: '1',\n              description: 'This is my description',\n            },\n            {\n              file: createMockFile(\n                'file-name-that-is-very-long-and-has-letters.png',\n                0,\n                'image/png',\n              ),\n              id: '2',\n            },\n            {\n              file: createMockFile('123.jpg', 0, 'image/png'),\n              id: '3',\n              description: 'This is my description',\n            },\n            {\n              file: createMockFile('321.jpg', 0, 'image/png'),\n              id: '4',\n            },\n          ])\n        }, [setFiles])\n\n        return (\n          <Upload\n            acceptedFileTypes={['jpg', 'png']}\n            id=\"upload-description\"\n            onChange={({ files }) =>\n              setFiles(\n                files.map((fileItem) => {\n                  return {\n                    ...fileItem,\n                    description: 'This is my description',\n                  }\n                }),\n              )\n            }\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n\nexport const UploadRemoveDeleteButton = () => (\n  <ComponentBox\n    scope={{ createMockFile, createRequest }}\n    data-visual-test=\"upload-remove-delete-button\"\n  >\n    {() => {\n      const Component = () => {\n        const { setFiles } = Upload.useUpload(\n          'upload-remove-delete-button',\n        )\n\n        React.useEffect(() => {\n          setFiles([\n            {\n              file: createMockFile('1501870.jpg', 0, 'image/png'),\n              id: '1',\n            },\n            {\n              file: createMockFile(\n                'file-name-that-is-very-very-very-very-very-very-very-verylong-to-display-that-when-remove-button-is-hidden-file-name-will-take-full-width.png',\n                0,\n                'image/png',\n              ),\n              description:\n                'Description that is very very very very very very very very long to display that when delete button is removed, file description will take full width.',\n              removeDeleteButton: true,\n            },\n            {\n              file: createMockFile('123.jpg', 0, 'image/png'),\n              id: '3',\n            },\n            {\n              file: createMockFile('321.jpg', 0, 'image/png'),\n              id: '4',\n              removeDeleteButton: true,\n            },\n          ])\n        }, [setFiles])\n\n        return (\n          <Upload\n            acceptedFileTypes={['jpg', 'png']}\n            id=\"upload-remove-delete-button\"\n            onChange={({ files }) =>\n              setFiles(\n                files.map((fileItem) => {\n                  return { ...fileItem, removeDeleteButton: true }\n                }),\n              )\n            }\n          />\n        )\n      }\n\n      return <Component />\n    }}\n  </ComponentBox>\n)\n","import { Button, Flex, FormLabel } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, FieldBlock, Form } from '@dnb/eufemia/src/extensions/forms'\nimport { debounceAsync } from '@dnb/eufemia/src/shared/helpers/debounce'\n\nexport const Default = () => {\n  return (\n    <ComponentBox>\n      <Form.SubmitIndicator state=\"pending\" />\n    </ComponentBox>\n  )\n}\n\nexport const AsyncSubmitBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay}>\n            <Form.Card>\n              <Field.String path=\"/myField\" label=\"Short label\" />\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Form.Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const AsyncChangeBehavior = () => {\n  return (\n    <ComponentBox scope={{ createRequest, debounceAsync }}>\n      {() => {\n        const delay = debounceAsync(async function () {\n          try {\n            const request = createRequest()\n            await request(1000) // Simulate a request\n          } catch (error) {\n            return error\n          }\n        })\n\n        return (\n          <Form.Handler onSubmit={delay} onChange={delay}>\n            <Form.Card>\n              <Field.String\n                path=\"/myField1\"\n                label=\"Label (with async validation)\"\n                placeholder=\"Write something ...\"\n                onChangeValidator={delay}\n              />\n              <FieldBlock width=\"medium\">\n                <Field.String\n                  path=\"/myField2\"\n                  width=\"stretch\"\n                  label=\"This is a long label\"\n                />\n              </FieldBlock>\n              <Form.ButtonRow>\n                <Form.SubmitButton />\n                <Button variant=\"tertiary\">Cancel</Button>\n              </Form.ButtonRow>\n            </Form.Card>\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\ntype CreateRequestReturn = Promise<{ hasError: boolean; cancel?: boolean }>\n\nexport const createRequest = () => {\n  let timeout: NodeJS.Timeout | null\n  let resolvePromise: ((value?: unknown) => void) | undefined\n\n  const fn = (t: number): CreateRequestReturn => {\n    return new Promise((resolve) => {\n      resolvePromise = resolve\n      timeout = setTimeout(() => {\n        resolve({ hasError: false })\n      }, t)\n    })\n  }\n\n  fn.cancel = () => {\n    resolvePromise?.({ hasError: true })\n    clearTimeout(timeout)\n    timeout = null\n  }\n\n  return fn\n}\n\nexport const WithinOtherComponents = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler>\n        <Flex.Horizontal align=\"center\">\n          <Form.SubmitButton showIndicator />\n          <Button variant=\"secondary\" icon=\"chevron_right\">\n            Secondary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <Button variant=\"tertiary\">\n            Tertiary\n            <Form.SubmitIndicator state=\"pending\" />\n          </Button>\n          <FormLabel>\n            Label\n            <Form.SubmitIndicator state=\"pending\" />\n          </FormLabel>\n        </Flex.Horizontal>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const WithinALabel = () => {\n  return (\n    <ComponentBox data-visual-test=\"submit-indicator-with-label\">\n      <Form.Handler>\n        <Form.SubmitIndicator state=\"pending\" showLabel />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n"],"names":["Placeholder","_jsx","ComponentBox","children","WithValue","scope","createMockFile","WithSize","hideCode","WithDownload","WithCustomFormat","FieldUploadSelectionPath","Label","LabelAndValue","LabelAndValueOnFileClick","Inline","ListVariants","ListVariantsOnFileClick","ListTypes","OnFileClick","createRequest","DisplayFileAsNonClickable","_createMdxContent","props","_components","Object","assign","h2","h3","code","p","_provideComponents","components","VisibleWhenVisualTest","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error","name","size","type","_window","window","File","file","defineProperty","get","UploadPrefilledFileList","noInline","UploadBasic","UploadDisabled","UploadSingleFile","UploadFilesAmountMessage","UploadRemoveFile","UploadIsLoading","UploadErrorMessage","UploadAcceptedFormats","UploadFileMaxSizeBasedOnFileType","UploadFileMaxSizeBasedOnFileTypeDisabled","UploadDisabledFileMaxSize","UploadNoTitleNoText","UploadOnFileDeleteAsync","UploadOnFileClick","UploadFileEmptySize","UploadDisabledDragAndDrop","UploadDescription","UploadRemoveDeleteButton","Default","AsyncSubmitBehavior","debounceAsync","AsyncChangeBehavior","timeout","resolvePromise","fn","t","Promise","resolve","setTimeout","hasError","cancel","_resolvePromise","clearTimeout","WithinOtherComponents","WithinALabel"],"sourceRoot":""}