"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[1205],{3869:function(e,n,i){i.r(n),i.d(n,{AsyncChangeBehavior:function(){return r},AsyncSubmitBehavior:function(){return o},Default:function(){return s},WithinALabel:function(){return p},WithinOtherComponents:function(){return d},createRequest:function(){return c}});var l=i(15924),a=i(60743),t=i(31085);const s=()=>(0,t.jsx)(l.A,{children:'<Form.SubmitIndicator state="pending" />\n'}),o=()=>(0,t.jsx)(l.A,{scope:{createRequest:c,debounceAsync:a.A},noInline:!0,children:'const delay = debounceAsync(async function () {\n  try {\n    const request = createRequest()\n    await request(1000) // Simulate a request\n  } catch (error) {\n    return error\n  }\n})\nrender(\n  <Form.Handler onSubmit={delay}>\n    <Form.Card>\n      <Field.String path="/myField" label="Short label" />\n      <Form.ButtonRow>\n        <Form.SubmitButton />\n        <Button variant="tertiary">Cancel</Button>\n      </Form.ButtonRow>\n    </Form.Card>\n  </Form.Handler>,\n)\n'}),r=()=>(0,t.jsx)(l.A,{scope:{createRequest:c,debounceAsync:a.A},noInline:!0,children:'const delay = debounceAsync(async function () {\n  try {\n    const request = createRequest()\n    await request(1000) // Simulate a request\n  } catch (error) {\n    return error\n  }\n})\nrender(\n  <Form.Handler onSubmit={delay} onChange={delay}>\n    <Form.Card>\n      <Field.String\n        path="/myField1"\n        label="Label (with async validation)"\n        placeholder="Write something ..."\n        onChangeValidator={delay}\n      />\n      <FieldBlock width="medium">\n        <Field.String\n          path="/myField2"\n          width="stretch"\n          label="This is a long label"\n        />\n      </FieldBlock>\n      <Form.ButtonRow>\n        <Form.SubmitButton />\n        <Button variant="tertiary">Cancel</Button>\n      </Form.ButtonRow>\n    </Form.Card>\n  </Form.Handler>,\n)\n'}),c=()=>{let e,n;const i=i=>new Promise((l=>{n=l,e=setTimeout((()=>{l({hasError:!1})}),i)}));return i.cancel=()=>{var i;null===(i=n)||void 0===i||i({hasError:!0}),clearTimeout(e),e=null},i},d=()=>(0,t.jsx)(l.A,{children:'<Form.Handler>\n  <Flex.Horizontal align="center">\n    <Form.SubmitButton showIndicator />\n    <Button variant="secondary" icon="chevron_right">\n      Secondary\n      <Form.SubmitIndicator state="pending" />\n    </Button>\n    <Button variant="tertiary">\n      Tertiary\n      <Form.SubmitIndicator state="pending" />\n    </Button>\n    <FormLabel>\n      Label\n      <Form.SubmitIndicator state="pending" />\n    </FormLabel>\n  </Flex.Horizontal>\n</Form.Handler>\n'}),p=()=>(0,t.jsx)(l.A,{"data-visual-test":"submit-indicator-with-label",children:'<Form.Handler>\n  <Form.SubmitIndicator state="pending" showLabel />\n</Form.Handler>\n'})},6366:function(e,n,i){i.d(n,{$R:function(){return y},$x:function(){return N},Fj:function(){return j},Fp:function(){return v},IT:function(){return F},LL:function(){return h},M3:function(){return c},M8:function(){return r},O_:function(){return M},RC:function(){return d},SR:function(){return m},_9:function(){return A},_H:function(){return f},cK:function(){return u},cN:function(){return p},dA:function(){return b},dX:function(){return k},eT:function(){return U},iX:function(){return g},jO:function(){return x},lN:function(){return o},lx:function(){return T},pK:function(){return s},qt:function(){return C}});i(14041);var l=i(15924),a=i(3869),t=i(31085);function s(e,n,i){var l;if("undefined"==typeof window||null===(l=window)||void 0===l||!l.File)return;const a=new File([],e,{type:i});return Object.defineProperty(a,"size",{get(){return n}}),a}const o=()=>(0,t.jsx)(l.A,{"data-visual-test":"upload-file-list",scope:{createMockFile:s},noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('file-list')\n  if (files.length) {\n    console.log('files', files)\n  }\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('fileName.png', 123, 'image/png'),\n        errorMessage: 'This is no real file!',\n      },\n    ])\n  }, [setFiles])\n  return <Upload acceptedFileTypes={['jpg', 'png']} id=\"file-list\" />\n}\nrender(<Component />)\n"}),r=()=>(0,t.jsx)(l.A,{"data-visual-test":"upload-basic",children:"<Upload\n  acceptedFileTypes={['jpg', 'png']}\n  onChange={({ files }) => console.log('onChange', files)}\n/>\n"}),c=()=>(0,t.jsx)(l.A,{"data-visual-test":"upload-basic-compact-variant",children:"<Upload\n  variant=\"compact\"\n  acceptedFileTypes={['jpg', 'png']}\n  onChange={({ files }) => console.log('onChange', files)}\n/>\n"}),d=()=>(0,t.jsx)(l.A,{"data-visual-test":"upload-basic-compact-variant-without-labels",children:"<Upload\n  variant=\"compact\"\n  acceptedFileTypes={['jpg', 'png']}\n  title={false}\n  text={false}\n  onChange={({ files }) => console.log('onChange', files)}\n/>\n"}),p=()=>(0,t.jsx)(l.A,{"data-visual-test":"upload-disabled",children:"<Upload\n  acceptedFileTypes={['jpg', 'png']}\n  disabled\n  onChange={({ files }) => console.log('onChange', files)}\n/>\n"}),f=()=>(0,t.jsx)(l.A,{noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-single-file')\n  if (files.length) {\n    console.log('files', files, setFiles)\n  }\n  return (\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-single-file\"\n      filesAmountLimit={1}\n    />\n  )\n}\nrender(<Component />)\n"}),u=()=>(0,t.jsx)(l.A,{scope:{createMockFile:s},"data-visual-test":"upload-files-amount-message",noInline:!0,children:"const Component = () => {\n  const { setInternalFiles, setFiles } = Upload.useUpload(\n    'upload-files-amount-message',\n  )\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('fileName1.png', 123, 'image/png'),\n      },\n      {\n        file: createMockFile('fileName2.png', 321, 'image/png'),\n      },\n    ])\n    setInternalFiles([\n      {\n        file: createMockFile('fileName1.png', 123, 'image/png'),\n        id: '1',\n        exists: false,\n      },\n      {\n        file: createMockFile('fileName2.png', 321, 'image/png'),\n        id: '2',\n        exists: false,\n      },\n    ])\n  }, [])\n  return (\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-files-amount-message\"\n      filesAmountLimit={1}\n    />\n  )\n}\nrender(<Component />)\n"}),g=()=>(0,t.jsx)(l.A,{scope:{createMockFile:s},"data-visual-test":"upload-files-amount-limit",noInline:!0,children:"const Component = () => {\n  const { setInternalFiles, setFiles } = Upload.useUpload(\n    'upload-files-amount-limit',\n  )\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('fileName1.png', 123, 'image/png'),\n      },\n      {\n        file: createMockFile('fileName2.png', 321, 'image/png'),\n      },\n    ])\n    setInternalFiles([\n      {\n        file: createMockFile('fileName1.png', 123, 'image/png'),\n        id: '1',\n        exists: false,\n      },\n      {\n        file: createMockFile('fileName2.png', 321, 'image/png'),\n        id: '2',\n        exists: false,\n      },\n    ])\n  }, [])\n  return (\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-files-amount-limit\"\n      filesAmountLimit={2}\n    />\n  )\n}\nrender(<Component />)\n"}),m=()=>(0,t.jsx)(l.A,{noInline:!0,children:"const Component = () => {\n  const myUploadId = 'unique-id' // or a function, object or React Context reference.\n  const { files, setFiles } = Upload.useUpload(myUploadId) // id is needed when wanting to connect with the useUpload hook.\n\n  return (\n    <>\n      <Upload acceptedFileTypes={['jpg', 'png']} id={myUploadId} />\n\n      <Button\n        top=\"small\"\n        disabled={files.length < 1}\n        onClick={() => setFiles([])}\n      >\n        Remove selected files\n      </Button>\n\n      <Preview files={files} />\n    </>\n  )\n  function Preview({ files }) {\n    const [images, setImages] = React.useState([])\n    React.useEffect(() => {\n      files.map(({ file }) => {\n        let reader = new FileReader()\n        reader.addEventListener(\n          'load',\n          (event) => {\n            images.push({\n              blob: event.target,\n              file,\n            })\n            setImages([...images])\n            reader = null\n          },\n          false,\n        )\n        reader.readAsDataURL(file)\n      })\n    }, [files])\n    return (\n      <Section aria-label=\"List of chosen images\">\n        {images.map((img, i) => (\n          <Img\n            top\n            key={i}\n            src={img.blob.result}\n            alt={img.file.name}\n            height={100}\n          />\n        ))}\n      </Section>\n    )\n  }\n}\nrender(<Component />)\n"}),F=()=>(0,t.jsx)(l.A,{"data-visual-test":"upload-is-loading",scope:{createMockFile:s},noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-is-loading')\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('fileName.png', 123, 'image/png'),\n        isLoading: true,\n      },\n    ])\n  }, [])\n  return (\n    <>\n      <Upload acceptedFileTypes={['jpg', 'png']} id=\"upload-is-loading\" />\n      <ToggleButton\n        top=\"small\"\n        disabled={files.length < 1}\n        on_change={({ checked }) =>\n          setFiles(\n            files.map((fileItem) => {\n              return {\n                ...fileItem,\n                isLoading: checked,\n              }\n            }),\n          )\n        }\n      >\n        Files is loading toggle\n      </ToggleButton>\n    </>\n  )\n}\nrender(<Component />)\n"}),h=()=>(0,t.jsx)(l.A,{"data-visual-test":"upload-error-message",noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-error-message')\n  return (\n    <>\n      <Upload\n        acceptedFileTypes={['jpg', 'png']}\n        id=\"upload-error-message\"\n      />\n      <ToggleButton\n        top=\"small\"\n        disabled={files.length < 1}\n        on_change={({ checked }) => {\n          setFiles(\n            files.map((fileItem) => {\n              return {\n                ...fileItem,\n                errorMessage: checked ? 'custom error message' : null,\n              }\n            }),\n          )\n        }}\n      >\n        Toggle error message\n      </ToggleButton>\n    </>\n  )\n}\nrender(<Component />)\n"}),x=()=>(0,t.jsx)(l.A,{noInline:!0,children:"const Component = () => {\n  const { files, setFiles } = Upload.useUpload('upload-accepted-formats')\n  if (files.length) {\n    console.log('files', files, setFiles)\n  }\n  return (\n    <Upload\n      acceptedFileTypes={['png', 'jpg', 'pdf']}\n      id=\"upload-accepted-formats\"\n    />\n  )\n}\nrender(<Component />)\n"}),k=()=>(0,t.jsx)(l.A,{"data-visual-test":"upload-file-max-size-based-on-file-format",hideCode:!0,children:"<Upload\n  fileMaxSize={99}\n  acceptedFileTypes={[\n    {\n      fileType: 'jpg',\n      fileMaxSize: 1,\n    },\n    {\n      fileType: 'doc',\n      fileMaxSize: 1,\n    },\n    {\n      fileType: 'svg',\n      fileMaxSize: 1,\n    },\n    {\n      fileType: 'gif',\n      fileMaxSize: 1,\n    },\n    {\n      fileType: 'doc',\n      fileMaxSize: 4,\n    },\n    {\n      fileType: 'docx',\n      fileMaxSize: 4,\n    },\n    {\n      fileType: 'tiff',\n      fileMaxSize: 5,\n    },\n    {\n      fileType: 'tif',\n      fileMaxSize: 5,\n    },\n    {\n      fileType: 'html',\n      fileMaxSize: 6,\n    },\n    {\n      fileType: 'htm',\n      fileMaxSize: 6,\n    },\n    {\n      fileType: 'xls',\n      fileMaxSize: 7,\n    },\n    {\n      fileType: 'xlsx',\n      fileMaxSize: 7,\n    },\n    {\n      fileType: 'odt',\n    },\n    {\n      fileType: 'pdf',\n    },\n    {\n      fileType: 'text',\n      fileMaxSize: false,\n    },\n    {\n      fileType: 'txt',\n      fileMaxSize: 0,\n    },\n    {\n      fileType: 'zip',\n      fileMaxSize: 99,\n    },\n  ]}\n/>\n"}),v=()=>(0,t.jsx)(l.A,{children:"<Upload\n  acceptedFileTypes={[\n    {\n      fileType: 'jpg',\n      fileMaxSize: 0,\n    },\n    {\n      fileType: 'doc',\n      fileMaxSize: false,\n    },\n    {\n      fileType: 'svg',\n    },\n  ]}\n/>\n"}),y=()=>(0,t.jsx)(l.A,{"data-visual-test":"upload-disabled-file-max-size",children:"<Upload acceptedFileTypes={['jpg', 'pdf']} fileMaxSize={false} />\n"}),j=()=>(0,t.jsx)(l.A,{"data-visual-test":"upload-no-title-no-text",children:"<Upload title={false} text={false} acceptedFileTypes={['jpg', 'png']} />\n"}),M=()=>(0,t.jsx)(l.A,{scope:{createRequest:a.createRequest},noInline:!0,children:"async function mockAsyncFileRemoval({ fileItem }) {\n  const request = createRequest()\n  console.log('making API request to remove:', fileItem.file.name)\n  await request(3000) // Simulate a request\n  const mockResponse = {\n    successful_removal: Math.random() < 0.5, // Randomly fails to remove the file\n  }\n\n  if (!mockResponse.successful_removal) {\n    throw new Error('Unable to remove this file')\n  }\n}\nrender(\n  <Upload\n    onFileDelete={mockAsyncFileRemoval}\n    acceptedFileTypes={['jpg', 'png']}\n  />,\n)\n"}),b=()=>(0,t.jsx)(l.A,{scope:{createMockFile:s,createRequest:a.createRequest},"data-visual-test":"upload-on-file-click",noInline:!0,children:"const Component = () => {\n  const { setFiles } = Upload.useUpload('upload-on-file-click')\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('1501870.jpg', 123, 'image/png'),\n        id: '1',\n      },\n      {\n        file: createMockFile(\n          'file-name-that-is-very-long-and-has-letters.png',\n          123,\n          'image/png',\n        ),\n        id: '2',\n      },\n    ])\n  }, [setFiles])\n  async function mockAsyncFileFetching({ fileItem }) {\n    const request = createRequest()\n    console.log(\n      'making API request to fetch the url of the file:',\n      fileItem.file.name,\n    )\n    await request(2000) // Simulate a request\n    window.open(\n      `https://eufemia.dnb.no/images/avatars/${fileItem.file.name}`,\n      '_blank',\n    )\n  }\n  return (\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-on-file-click\"\n      onFileClick={mockAsyncFileFetching}\n    />\n  )\n}\nrender(<Component />)\n"}),C=()=>(0,t.jsx)(l.A,{scope:{createMockFile:s,createRequest:a.createRequest},"data-visual-test":"upload-file-empty-size",noInline:!0,children:"const Component = () => {\n  const { setFiles } = Upload.useUpload('upload-file-size-empty')\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('1501870.jpg', 0, 'image/png'),\n        id: '1',\n      },\n      {\n        file: createMockFile(\n          'file-name-that-is-very-long-and-has-letters.png',\n          0,\n          'image/png',\n        ),\n        id: '2',\n      },\n    ])\n  }, [setFiles])\n  return (\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-file-size-empty\"\n    />\n  )\n}\nrender(<Component />)\n"}),U=()=>(0,t.jsx)(l.A,{"data-visual-test":"upload-disabled-drag-and-drop",children:"<Upload\n  disableDragAndDrop\n  acceptedFileTypes={['jpg', 'png']}\n  onChange={({ files }) => console.log('onChange', files)}\n/>\n"}),A=()=>(0,t.jsx)(l.A,{scope:{createMockFile:s,createRequest:a.createRequest},"data-visual-test":"upload-description",noInline:!0,children:"const Component = () => {\n  const { setFiles } = Upload.useUpload('upload-description')\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('1501870.jpg', 0, 'image/png'),\n        id: '1',\n        description: 'This is my description',\n      },\n      {\n        file: createMockFile(\n          'file-name-that-is-very-long-and-has-letters.png',\n          0,\n          'image/png',\n        ),\n        id: '2',\n      },\n      {\n        file: createMockFile('123.jpg', 0, 'image/png'),\n        id: '3',\n        description: 'This is my description',\n      },\n      {\n        file: createMockFile('321.jpg', 0, 'image/png'),\n        id: '4',\n      },\n    ])\n  }, [setFiles])\n  return (\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-description\"\n      onChange={({ files }) =>\n        setFiles(\n          files.map((fileItem) => {\n            return {\n              ...fileItem,\n              description: 'This is my description',\n            }\n          }),\n        )\n      }\n    />\n  )\n}\nrender(<Component />)\n"}),T=()=>(0,t.jsx)(l.A,{scope:{createMockFile:s,createRequest:a.createRequest},"data-visual-test":"upload-remove-delete-button",noInline:!0,children:"const Component = () => {\n  const { setFiles } = Upload.useUpload('upload-remove-delete-button')\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('1501870.jpg', 0, 'image/png'),\n        id: '1',\n      },\n      {\n        file: createMockFile(\n          'file-name-that-is-very-very-very-very-very-very-very-verylong-to-display-that-when-remove-button-is-hidden-file-name-will-take-full-width.png',\n          0,\n          'image/png',\n        ),\n        description:\n          'Description that is very very very very very very very very long to display that when delete button is removed, file description will take full width.',\n        removeDeleteButton: true,\n      },\n      {\n        file: createMockFile('123.jpg', 0, 'image/png'),\n        id: '3',\n      },\n      {\n        file: createMockFile('321.jpg', 0, 'image/png'),\n        id: '4',\n        removeDeleteButton: true,\n      },\n    ])\n  }, [setFiles])\n  return (\n    <Upload\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-remove-delete-button\"\n      onChange={({ files }) =>\n        setFiles(\n          files.map((fileItem) => {\n            return {\n              ...fileItem,\n              removeDeleteButton: true,\n            }\n          }),\n        )\n      }\n    />\n  )\n}\nrender(<Component />)\n"}),N=()=>(0,t.jsx)(l.A,{scope:{createMockFile:s,createRequest:a.createRequest},"data-visual-test":"upload-compact-variant-files-list",noInline:!0,children:"const Component = () => {\n  const { setFiles } = Upload.useUpload('upload-compact-variant-files')\n  React.useEffect(() => {\n    setFiles([\n      {\n        file: createMockFile('1501870.jpg', 0, 'image/png'),\n        id: '1',\n      },\n      {\n        file: createMockFile(\n          'file-name-that-is-very-long-and-has-letters.png',\n          0,\n          'image/png',\n        ),\n        id: '2',\n      },\n      {\n        file: createMockFile('123.jpg', 0, 'image/png'),\n        id: '3',\n      },\n      {\n        file: createMockFile('321.jpg', 0, 'image/png'),\n        id: '4',\n      },\n    ])\n  }, [setFiles])\n  return (\n    <Upload\n      variant=\"compact\"\n      acceptedFileTypes={['jpg', 'png']}\n      id=\"upload-compact-variant-files\"\n    />\n  )\n}\nrender(<Component />)\n"})},64162:function(e,n,i){i.r(n),i.d(n,{default:function(){return C}});var l={};i.r(l),i.d(l,{DisplayFileAsNonClickable:function(){return M},FieldUploadSelectionPath:function(){return g},Inline:function(){return x},Label:function(){return m},LabelAndValue:function(){return F},LabelAndValueOnFileClick:function(){return h},ListTypes:function(){return y},ListVariants:function(){return k},ListVariantsOnFileClick:function(){return v},OnFileClick:function(){return j},Placeholder:function(){return c},WithCustomFormat:function(){return u},WithDownload:function(){return f},WithSize:function(){return p},WithValue:function(){return d}});var a=i(31085),t=i(71184),s=i(15924),o=i(3869),r=i(6366);const c=()=>(0,a.jsx)(s.A,{children:'<Value.Upload placeholder="No value given" />\n'}),d=()=>(0,a.jsx)(s.A,{scope:{createMockFile:r.pK},"data-visual-test":"upload-value-default",children:"<Value.Upload\n  inline\n  value={[\n    {\n      file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n      exists: false,\n      id: '1',\n    },\n    {\n      file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n      exists: false,\n      id: '2',\n    },\n  ]}\n/>\n"}),p=()=>(0,a.jsx)(s.A,{hideCode:!0,scope:{createMockFile:r.pK},"data-visual-test":"upload-value-size",children:"<Value.Upload\n  displaySize\n  value={[\n    {\n      file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n      exists: false,\n      id: '1',\n    },\n  ]}\n/>\n"}),f=()=>(0,a.jsx)(s.A,{hideCode:!0,scope:{createMockFile:r.pK},children:"<Value.Upload\n  download\n  value={[\n    {\n      file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n      exists: false,\n      id: '1',\n    },\n  ]}\n/>\n"}),u=()=>(0,a.jsx)(s.A,{hideCode:!0,scope:{createMockFile:r.pK},children:"<Form.Handler\n  locale=\"en-GB\"\n  data={{\n    myPath: [\n      {\n        file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n        exists: false,\n        id: '1',\n      },\n      {\n        file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n        exists: false,\n        id: '2',\n      },\n    ],\n  }}\n>\n  <Value.Upload\n    inline\n    path=\"/myPath\"\n    format={{\n      type: 'disjunction',\n    }}\n  />\n</Form.Handler>\n"}),g=()=>(0,a.jsx)(s.A,{hideCode:!0,scope:{createMockFile:r.pK},children:"<Form.Handler\n  data={{\n    myPath: [\n      {\n        file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n        exists: false,\n        id: '1',\n      },\n      {\n        file: createMockFile('fileName-2.png', 3000000, 'image/png'),\n        exists: false,\n        id: '2',\n      },\n      {\n        file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n        exists: false,\n        id: '3',\n      },\n    ],\n  }}\n>\n  <Flex.Stack>\n    <Field.Upload label=\"My selections\" path=\"/myPath\" />\n    <Value.Upload\n      inheritLabel\n      path=\"/myPath\"\n      variant=\"ul\"\n      listType=\"unstyled\"\n    />\n  </Flex.Stack>\n</Form.Handler>\n"}),m=()=>(0,a.jsx)(s.A,{children:'<Value.Upload label="Label text" showEmpty />\n'}),F=()=>(0,a.jsx)(s.A,{hideCode:!0,scope:{createMockFile:r.pK},"data-visual-test":"upload-value-label-and-value",children:"<Value.Upload\n  label=\"Label text\"\n  value={[\n    {\n      file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n      exists: false,\n      id: '1',\n    },\n    {\n      file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n      exists: false,\n      id: '2',\n    },\n  ]}\n/>\n"}),h=()=>(0,a.jsx)(s.A,{hideCode:!0,scope:{createMockFile:r.pK},"data-visual-test":"upload-value-label-and-value-on-file-click",children:"<Value.Upload\n  onFileClick={() => {\n    console.log('Clicked on file')\n  }}\n  label=\"Label text\"\n  value={[\n    {\n      file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n      exists: false,\n      id: '1',\n    },\n    {\n      file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n      exists: false,\n      isLoading: true,\n      id: '2',\n    },\n  ]}\n/>\n"}),x=()=>(0,a.jsx)(s.A,{hideCode:!0,scope:{createMockFile:r.pK},"data-visual-test":"upload-value-inline",children:"<Span>\n  This is before the component{' '}\n  <Value.Upload\n    value={[\n      {\n        file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n        exists: false,\n        id: '1',\n      },\n      {\n        file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n        exists: false,\n        id: '2',\n      },\n    ]}\n    inline\n  />{' '}\n  This is after the component\n</Span>\n"}),k=()=>(0,a.jsx)(s.A,{scope:{createMockFile:r.pK},"data-visual-test":"upload-value-lists",hideCode:!0,children:"\n<Value.Upload\n  value={[\n    {\n      file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n      exists: false,\n      id: '1',\n    },\n    {\n      file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n      exists: false,\n      id: '2',\n    },\n    {\n      file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n      exists: false,\n      id: '3',\n    },\n  ]}\n  label=\"Ordered List\"\n  variant=\"ol\"\n/>\n<Value.Upload\n  value={[\n    {\n      file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n      exists: false,\n      id: '1',\n    },\n    {\n      file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n      exists: false,\n      id: '2',\n    },\n    {\n      file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n      exists: false,\n      id: '3',\n    },\n  ]}\n  label=\"Unordered List\"\n  variant=\"ul\"\n/>\n\n"}),v=()=>(0,a.jsx)(s.A,{scope:{createMockFile:r.pK},"data-visual-test":"upload-value-lists-on-file-click",hideCode:!0,children:"\n<Value.Upload\n  onFileClick={() => {\n    console.log('Clicked on file')\n  }}\n  value={[\n    {\n      file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n      exists: false,\n      isLoading: true,\n      id: '1',\n    },\n    {\n      file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n      exists: false,\n      id: '2',\n    },\n    {\n      file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n      exists: false,\n      id: '3',\n    },\n  ]}\n  label=\"Ordered List\"\n  variant=\"ol\"\n/>\n<Value.Upload\n  onFileClick={() => {\n    console.log('Clicked on file')\n  }}\n  value={[\n    {\n      file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n      exists: false,\n      id: '1',\n    },\n    {\n      file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n      exists: false,\n      id: '2',\n      isLoading: true,\n    },\n    {\n      file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n      exists: false,\n      id: '3',\n      isLoading: true,\n    },\n  ]}\n  label=\"Unordered List\"\n  variant=\"ul\"\n/>\n\n"}),y=()=>(0,a.jsx)(s.A,{scope:{createMockFile:r.pK},hideCode:!0,children:"\n<Value.Upload\n  value={[\n    {\n      file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n      exists: false,\n      id: '1',\n    },\n    {\n      file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n      exists: false,\n      id: '2',\n    },\n    {\n      file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n      exists: false,\n      id: '3',\n    },\n  ]}\n  label=\"Ordered List a\"\n  variant=\"ol\"\n  listType=\"a\"\n/>\n<Value.Upload\n  value={[\n    {\n      file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n      exists: false,\n      id: '1',\n    },\n    {\n      file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n      exists: false,\n      id: '2',\n    },\n    {\n      file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n      exists: false,\n      id: '3',\n    },\n  ]}\n  label=\"Ordered List A\"\n  variant=\"ol\"\n  listType=\"A\"\n/>\n<Value.Upload\n  value={[\n    {\n      file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n      exists: false,\n      id: '1',\n    },\n    {\n      file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n      exists: false,\n      id: '2',\n    },\n    {\n      file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n      exists: false,\n      id: '3',\n    },\n  ]}\n  label=\"Ordered List i\"\n  variant=\"ol\"\n  listType=\"i\"\n/>\n<Value.Upload\n  value={[\n    {\n      file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n      exists: false,\n      id: '1',\n    },\n    {\n      file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n      exists: false,\n      id: '2',\n    },\n    {\n      file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n      exists: false,\n      id: '3',\n    },\n  ]}\n  label=\"Ordered List I\"\n  variant=\"ol\"\n  listType=\"I\"\n/>\n<Value.Upload\n  value={[\n    {\n      file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n      exists: false,\n      id: '1',\n    },\n    {\n      file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n      exists: false,\n      id: '2',\n    },\n    {\n      file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n      exists: false,\n      id: '3',\n    },\n  ]}\n  label=\"Unordered List square\"\n  variant=\"ul\"\n  listType=\"square\"\n/>\n<Value.Upload\n  value={[\n    {\n      file: createMockFile('fileName-1.png', 1000000, 'image/png'),\n      exists: false,\n      id: '1',\n    },\n    {\n      file: createMockFile('fileName-2.png', 2000000, 'image/png'),\n      exists: false,\n      id: '2',\n    },\n    {\n      file: createMockFile('fileName-3.png', 3000000, 'image/png'),\n      exists: false,\n      id: '3',\n    },\n  ]}\n  label=\"Unordered List circle\"\n  variant=\"ul\"\n  listType=\"circle\"\n/>\n\n"}),j=()=>(0,a.jsx)(s.A,{scope:{createMockFile:r.pK,createRequest:o.createRequest},children:"<Value.Upload\n  label=\"Label text\"\n  value={[\n    {\n      file: createMockFile('35217511.jpg', 1000000, 'image/png'),\n      exists: false,\n      id: '1',\n    },\n    {\n      file: createMockFile('1501870.jpg', 2000000, 'image/png'),\n      exists: false,\n      id: '2',\n    },\n  ]}\n  onFileClick={async ({ fileItem }) => {\n    const request = createRequest()\n    console.log(\n      `making API request to fetch the url of the file: ${fileItem.file.name}`,\n    )\n    await request(2000) // Simulate a request\n    window.open(\n      `https://eufemia.dnb.no/images/avatars/${fileItem.file.name}`,\n      '_blank',\n    )\n  }}\n/>\n"}),M=()=>(0,a.jsx)(s.A,{hideCode:!0,scope:{createMockFile:r.pK},"data-visual-test":"upload-value-display-file-as-non-clickable",children:"<Value.Upload\n  label=\"Label text\"\n  value={[\n    {\n      file: createMockFile('35217511.jpg', 0, 'image/png'),\n      exists: false,\n      id: '1',\n    },\n    {\n      file: createMockFile('1501870.jpg', undefined, 'image/png'),\n      exists: false,\n      id: '2',\n    },\n  ]}\n/>\n"});function b(e){const n=Object.assign({h2:"h2",h3:"h3",code:"code",p:"p"},(0,t.R)(),e.components),{VisibleWhenVisualTest:i}=n;return l||U("Examples",!1),M||U("Examples.DisplayFileAsNonClickable",!0),g||U("Examples.FieldUploadSelectionPath",!0),x||U("Examples.Inline",!0),m||U("Examples.Label",!0),F||U("Examples.LabelAndValue",!0),h||U("Examples.LabelAndValueOnFileClick",!0),y||U("Examples.ListTypes",!0),k||U("Examples.ListVariants",!0),v||U("Examples.ListVariantsOnFileClick",!0),j||U("Examples.OnFileClick",!0),c||U("Examples.Placeholder",!0),u||U("Examples.WithCustomFormat",!0),f||U("Examples.WithDownload",!0),p||U("Examples.WithSize",!0),d||U("Examples.WithValue",!0),i||U("VisibleWhenVisualTest",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{children:"Demos"}),"\n",(0,a.jsx)(n.h3,{children:"Placeholder"}),"\n",(0,a.jsx)(c,{}),"\n",(0,a.jsx)(n.h3,{children:"Value"}),"\n",(0,a.jsx)(d,{}),"\n",(0,a.jsxs)(n.h3,{children:["With ",(0,a.jsx)(n.code,{children:"displaySize"})," property"]}),"\n",(0,a.jsx)(p,{}),"\n",(0,a.jsxs)(n.h3,{children:["With ",(0,a.jsx)(n.code,{children:"download"})," property"]}),"\n",(0,a.jsx)(f,{}),"\n",(0,a.jsx)(n.h3,{children:"Custom format"}),"\n",(0,a.jsx)(u,{}),"\n",(0,a.jsx)(n.h3,{children:"Label"}),"\n",(0,a.jsx)(m,{}),"\n",(0,a.jsx)(n.h3,{children:"Label and value"}),"\n",(0,a.jsx)(F,{}),"\n",(0,a.jsx)(n.h3,{children:"Inline"}),"\n",(0,a.jsx)(x,{}),"\n",(0,a.jsx)(n.h3,{children:"List variants"}),"\n",(0,a.jsx)(k,{}),"\n",(0,a.jsx)(n.h3,{children:"List types"}),"\n",(0,a.jsx)(y,{}),"\n",(0,a.jsx)(n.h3,{children:"Field.Upload path"}),"\n",(0,a.jsx)(g,{}),"\n",(0,a.jsxs)(n.h3,{children:["Using ",(0,a.jsx)(n.code,{children:"onFileClick"})]}),"\n",(0,a.jsx)(j,{}),"\n",(0,a.jsx)(n.h3,{children:"Display files as non-clickable"}),"\n",(0,a.jsxs)(n.p,{children:["When file size is 0 or not given (",(0,a.jsx)(n.code,{children:"new File([], name, { type })"}),"), the file is displayed as a span instead of an anchor. How ever, when ",(0,a.jsx)(n.code,{children:"onFileClick"})," is given, the file will be clickable as a button."]}),"\n",(0,a.jsx)(M,{}),"\n",(0,a.jsxs)(i,{children:[(0,a.jsx)(h,{}),(0,a.jsx)(v,{})]})]})}var C=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.R)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(b,e)})):b(e)};function U(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);
//# sourceMappingURL=e54af87eb4dafd5921f511c4a4fe4980318105d2-781e9be8a7f89dfa5db5.js.map