{"version":3,"file":"e6ac2a687dd88a089dd1ccdd2075c5c0a0eb15a5-5e084fe88e5a71d2f53b.js","mappings":"inBAwBA,MAAMA,GAAUC,EAAAA,EAAAA,GAAA,OAAAC,OAAA,YAAAD,CAAA,CAAAE,KAAA,SAAAC,OAAA,qMAsCHC,EAA+BA,KAC1CC,EAAAA,EAAAA,KAACN,EAAU,CAAAO,UAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAF,SAAA,iQAiBAG,EAAsBA,KACjCJ,EAAAA,EAAAA,KAACN,EAAU,CAAAO,UAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAF,SAAA,6MAcAI,EAAsCA,KACjDL,EAAAA,EAAAA,KAACN,EAAU,CAAAO,UAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAG,UAAA,EAAAL,SAAA,u3BAsCAM,EAAiBA,KAC5BP,EAAAA,EAAAA,KAACN,EAAU,CAAAO,UAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAF,SAAA,sGAYAO,EAAkBA,KAC7BR,EAAAA,EAAAA,KAACN,EAAU,CAAAO,UAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAF,SAAA,yPAcAQ,EAAgBA,KAC3BT,EAAAA,EAAAA,KAACN,EAAU,CAAAO,UAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAF,SAAA,6NAaAS,EAAcA,KACzBV,EAAAA,EAAAA,KAACN,EAAU,CAAAO,UAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAF,SAAA,kWAeAU,EAAqBA,KAChCX,EAAAA,EAAAA,KAACN,EAAU,CAAAO,UAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAF,SAAA,uZAsBAW,EAAwBA,KACnCZ,EAAAA,EAAAA,KAACN,EAAU,CAAAO,UAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAF,SAAA,2MAcAY,EAA6BA,KACxCb,EAAAA,EAAAA,KAACN,EAAU,CAAAO,UAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAG,UAAA,EAAAL,SAAA,qqBA6FN,SAASa,IACd,OAAAZ,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAF,SAAA,kHAQF,CAEO,SAASc,IACd,OAAAb,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAF,SAAA,6GAQF,CAEO,SAASe,IACd,OAAAd,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAF,SAAA,iGAQF,CAEO,SAASgB,IACd,OAAAf,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAF,SAAA,uFAQF,CAEO,SAASiB,IACd,OAAAhB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAF,SAAA,gRAYF,CAEO,SAASkB,IACd,OAAAjB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAF,SAAA,yFAOF,CAEO,SAASmB,IACd,OAAAlB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAkB,MAAA,CACFC,SACA,KAAAC,aAAA,EAAAtB,SAAA,+NAUA,C","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/layout/form-row/Examples.tsx"],"sourcesContent":["/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport styled from '@emotion/styled'\nimport {\n  Ingress,\n  Space,\n  DatePicker,\n  Textarea,\n  Autocomplete,\n  Dropdown,\n  Slider,\n  Checkbox,\n  Input,\n  FormSet,\n  FormRow,\n} from '@dnb/eufemia/src'\nimport { Provider } from '@dnb/eufemia/src/shared'\nimport { SpaceAllProps } from '@dnb/eufemia/src/components/space/Space'\n\nconst TestStyles = styled.div`\n  /* make sure our input gets an explicit width, because of mac/linux rendering differences */\n  :not(.dnb-input--stretch) .dnb-input__input {\n    width: 12rem;\n  }\n  .box1 {\n    width: 1rem;\n    height: 1rem;\n    background: var(--color-emerald-green);\n  }\n  .box2 {\n    width: 2rem;\n    height: 2rem;\n    background: var(--color-summer-green);\n  }\n`\n\nconst Box = styled((props: SpaceAllProps) => <Space {...props} />)`\n  position: relative;\n\n  margin: 0;\n  padding: 1rem;\n\n  @media screen and (min-width: 40em) {\n    padding: 1rem;\n  }\n\n  &::after {\n    content: '';\n    position: absolute;\n    left: -50vw;\n    right: -50vw;\n    bottom: -1px;\n    width: 200vw;\n    border-bottom: dashed 1px rgb(0, 200, 200);\n  }\n`\n\nexport const FormRowVerticalAlignedLabels = () => (\n  <TestStyles>\n    <ComponentBox>\n      <FormRow\n        label={\n          <Ingress top=\"0\" bottom=\"small\">\n            Custom legend\n          </Ingress>\n        }\n        label_direction=\"vertical\"\n      >\n        <Input label=\"Label A\" value=\"Input A\" right=\"small\" />\n        <Input label=\"Label B\" value=\"Input B\" />\n      </FormRow>\n    </ComponentBox>\n  </TestStyles>\n)\n\nexport const FormRowSectionStyle = () => (\n  <TestStyles>\n    <ComponentBox>\n      <FormRow\n        vertical\n        section_style=\"mint-green\"\n        section_spacing\n        label=\"A long horizontal legend (FormLabel) with a lot of informative text\"\n      >\n        <Checkbox label=\"Checkbox\" />\n      </FormRow>\n    </ComponentBox>\n  </TestStyles>\n)\n\nexport const FormRowCombineVerticalAndHorizontal = () => (\n  <TestStyles>\n    <ComponentBox>\n      {() => {\n        // 1. In the nested FormRow we reset the layout to not be vertical\n        // 2. So we can use a different direction (\"label_direction\")\n        return (\n          <FormRow\n            label={\n              <Space\n                element=\"span\"\n                className=\"dnb-h--large\"\n                top={false}\n                bottom=\"large\"\n                no_collapse={true}\n              >\n                Custom vertical legend\n              </Space>\n            }\n            vertical\n          >\n            <Input label=\"Vertical input A\" />\n            <Input label=\"Vertical input B\" top=\"medium\" />\n            <FormRow\n              vertical={false}\n              label_direction=\"horizontal\"\n              top=\"medium\"\n            >\n              <Input label=\"Horizontal input A\" right=\"small\" />\n              <Input label=\"Horizontal input B\" />\n            </FormRow>\n            <Input label=\"Vertical input C\" top=\"medium\" />\n          </FormRow>\n        )\n      }}\n    </ComponentBox>\n  </TestStyles>\n)\n\nexport const FormRowDefault = () => (\n  <TestStyles>\n    <ComponentBox>\n      <FormRow>\n        <Input\n          label=\"Default horizontal FormRow\"\n          placeholder=\"Input ...\"\n        />\n      </FormRow>\n    </ComponentBox>\n  </TestStyles>\n)\n\nexport const FormRowVertical = () => (\n  <TestStyles>\n    <ComponentBox>\n      <FormRow direction=\"vertical\" label=\"Label legend for the inputs\">\n        <Input label=\"Vertical direction\" placeholder=\"Input A ...\" />\n        <Input\n          label=\"Vertical direction\"\n          placeholder=\"Input B ...\"\n          top=\"small\"\n        />\n      </FormRow>\n    </ComponentBox>\n  </TestStyles>\n)\n\nexport const FormRowNoWrap = () => (\n  <TestStyles>\n    <ComponentBox>\n      <FormRow\n        label=\"A long horizontal legend (FormLabel) with a lot of informative text\"\n        direction=\"horizontal\"\n      >\n        <Input label=\"Input label A\" right=\"small\" />\n        <Input label=\"Input label B\" />\n      </FormRow>\n    </ComponentBox>\n  </TestStyles>\n)\n\nexport const FormRowWrap = () => (\n  <TestStyles>\n    <ComponentBox>\n      <FormRow\n        label=\"Long label labwl Adipiscing mauris dis proin nec Condimentum egestas class blandit netus non a suscipit id urna\"\n        direction=\"horizontal\"\n        wrap\n      >\n        <Input label=\"Input A\" top=\"small\" right=\"small\" />\n        <Input label=\"Input B\" top=\"small\" right=\"small\" />\n        <Input label=\"Input C\" top=\"small\" right=\"small\" />\n      </FormRow>\n    </ComponentBox>\n  </TestStyles>\n)\n\nexport const FormRowLegendUsage = () => (\n  <TestStyles>\n    <ComponentBox>\n      <FormSet label_direction=\"vertical\">\n        <FormRow label=\"Label legend for the inputs\">\n          <Input\n            label=\"Vertical label direction\"\n            placeholder=\"Input A ...\"\n            right=\"small\"\n          />\n          <Input\n            label=\"Vertical label direction\"\n            placeholder=\"Input B ...\"\n          />\n        </FormRow>\n        <FormRow label=\"Checkbox legend\" top=\"medium\">\n          <Checkbox label=\"Checkbox\" />\n        </FormRow>\n      </FormSet>\n    </ComponentBox>\n  </TestStyles>\n)\n\nexport const FormRowInheritContext = () => (\n  <TestStyles>\n    <ComponentBox>\n      <FormRow vertical={true} disabled={true}>\n        <Input label=\"Vertical input A\" placeholder=\"Input A ...\" />\n        <Input\n          label=\"Vertical input B\"\n          placeholder=\"Input B ...\"\n          top=\"medium\"\n        />\n      </FormRow>\n    </ComponentBox>\n  </TestStyles>\n)\n\nexport const FormRowDifferentDirections = () => (\n  <TestStyles>\n    <ComponentBox>\n      {() => {\n        const PhoneRow = styled(FormRow)`\n          .dnb-dropdown__shell,\n          .dnb-dropdown__list {\n            width: auto;\n            min-width: 6rem;\n          }\n          @media screen and (max-width: 40em) {\n            .dnb-dropdown {\n              margin-bottom: 0.5rem;\n            }\n          }\n        `\n        return (\n          <FormRow vertical={true}>\n            <Input label=\"Input\" placeholder=\"Input ...\" bottom />\n            <PhoneRow\n              label=\"Phone number\"\n              label_direction=\"vertical\"\n              vertical={false}\n            >\n              <Dropdown\n                right=\"small\"\n                title=\"Country code\"\n                data={['+47', '+48', '+49']}\n                value={0}\n              />\n              <Input placeholder=\"Your phone number\" />\n            </PhoneRow>\n          </FormRow>\n        )\n      }}\n    </ComponentBox>\n  </TestStyles>\n)\n\nexport function AllStretchComponents() {\n  return (\n    <div>\n      <StretchTemplate element={Input} />\n      <StretchTemplate element={Textarea} />\n      <StretchTemplate element={Autocomplete} />\n      <StretchTemplate element={DatePicker} show_input />\n      <StretchTemplate element={Dropdown} />\n      <StretchTemplate element={Slider} />\n    </div>\n  )\n}\n\nfunction StretchTemplate({ element: Comp, ...props }) {\n  return (\n    <>\n      <Box>\n        <FormSet direction=\"vertical\">\n          <FormRow>\n            <Comp\n              label='FormSet direction=\"vertical\"'\n              stretch\n              {...props}\n            />\n          </FormRow>\n        </FormSet>\n      </Box>\n      <Box>\n        <FormSet vertical>\n          <FormRow>\n            <Comp label=\"FormSet vertical\" stretch {...props} />\n          </FormRow>\n        </FormSet>\n      </Box>\n      <Box>\n        <FormRow direction=\"horizontal\">\n          <Comp\n            label='FormRow direction=\"horizontal\"'\n            stretch\n            {...props}\n          />\n        </FormRow>\n      </Box>\n      <Box>\n        <Comp\n          label='label_direction=\"vertical\"'\n          label_direction=\"vertical\"\n          stretch\n          {...props}\n        />\n      </Box>\n    </>\n  )\n}\n\nexport function FormRowLabelDirectionInfo() {\n  return (\n    <ComponentBox>\n      <FormRow label_direction=\"vertical\">\n        <Input label=\"Label\" right />\n        <Input label=\"Label\" />\n      </FormRow>\n    </ComponentBox>\n  )\n}\n\nexport function FormRowDirectionInfo() {\n  return (\n    <ComponentBox>\n      <FormRow direction=\"vertical\">\n        <Input label=\"Label\" bottom />\n        <Input label=\"Label\" />\n      </FormRow>\n    </ComponentBox>\n  )\n}\n\nexport function FormRowVerticalInfo() {\n  return (\n    <ComponentBox>\n      <FormRow vertical>\n        <Input label=\"Label\" bottom />\n        <Input label=\"Label\" />\n      </FormRow>\n    </ComponentBox>\n  )\n}\n\nexport function FormRowDefaultInfo() {\n  return (\n    <ComponentBox>\n      <FormRow>\n        <Input label=\"Label\" right />\n        <Input label=\"Label\" />\n      </FormRow>\n    </ComponentBox>\n  )\n}\n\nexport function FormRowSpacingInfo() {\n  return (\n    <ComponentBox>\n      {/* The FormRow will then have a \"margin-top: 2.5rem;\" */}\n      <FormRow top=\"large x-small\">\n        <Input label=\"Input label\">Value</Input>\n      </FormRow>\n      {/* ... or go crazy */}\n      <FormRow top=\"large medium small\">\n        <Input label=\"Input label\">Value</Input>\n      </FormRow>\n    </ComponentBox>\n  )\n}\n\nexport function FormRowResponsiveInfo() {\n  return (\n    <ComponentBox>\n      <FormRow responsive={true}>\n        <Input label=\"Input label\">Value</Input>\n      </FormRow>\n    </ComponentBox>\n  )\n}\n\nexport function FormRowProvider() {\n  return (\n    <ComponentBox scope={{ Provider }} hidePreview>\n      <Provider FormRow={{ vertical: true }}>\n        <div id=\"my-app\">\n          ...\n          <FormRow>Everything is vertical now</FormRow>\n          <FormRow>Everything is vertical now</FormRow>\n          ...\n        </div>\n      </Provider>\n    </ComponentBox>\n  )\n}\n"],"names":["TestStyles","_styled","target","name","styles","FormRowVerticalAlignedLabels","_jsx","children","_jsx2","ComponentBox","FormRowSectionStyle","FormRowCombineVerticalAndHorizontal","noInline","FormRowDefault","FormRowVertical","FormRowNoWrap","FormRowWrap","FormRowLegendUsage","FormRowInheritContext","FormRowDifferentDirections","FormRowLabelDirectionInfo","FormRowDirectionInfo","FormRowVerticalInfo","FormRowDefaultInfo","FormRowSpacingInfo","FormRowResponsiveInfo","FormRowProvider","scope","Provider","hidePreview"],"sourceRoot":""}