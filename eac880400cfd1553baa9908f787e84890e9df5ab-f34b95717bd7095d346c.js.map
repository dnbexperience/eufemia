{"version":3,"file":"eac880400cfd1553baa9908f787e84890e9df5ab-f34b95717bd7095d346c.js","mappings":"kwBAkBO,MAAMA,EAAkCA,KAAAC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,4BAMlCC,EAAmCA,KAAAH,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,4CAMnCE,EAAkDA,KAAAJ,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,yIAWlDG,EAAgDA,KAAAL,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,uIAWhDI,EAA8CA,KAAAN,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,0YAuB9CK,EAA0CA,KAAAP,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,2DAAAC,SAAA,gGAW1CM,EAAyCA,KAAAR,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAQ,UAAA,EAAAP,SAAA,ofA8BzCQ,EAAmDA,KAAAV,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAQ,UAAA,EAAAP,SAAA,meA6BnDS,EAAmDA,KAAAX,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAQ,UAAA,EAAAP,SAAA,wjBA8BnDU,EAAyCA,KAAAZ,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,+WAuBzCW,EAAwCA,KAAAb,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,0CAMxCY,EAAsCA,KAAAd,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,uDAMtCa,EAAgDA,KAAAf,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,uIAWhDc,EAA8CA,KAAAhB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,qIAW9Ce,EAAsCA,KAAAjB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,yDAAAC,SAAA,iFAWtCgB,EAAuCA,KAAAlB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAQ,UAAA,EAAAP,SAAA,gaA6BvCiB,EAAiDA,KAAAnB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAQ,UAAA,EAAAP,SAAA,wcAuBjDkB,EAAiDA,KAAApB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAQ,UAAA,EAAAP,SAAA,ojBA8BjDmB,EAAuCA,KAAArB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAC,SAAA,2VAsBvCoB,EAAgCA,KAAAtB,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,+CAAAC,SAAA,oQAWvCqB,GAAWC,EAAAA,EAAAA,GAAA,QAAAC,OAAA,aAAAD,CAAA,CAAAE,KAAA,SAAAC,OAAA,sCAIXC,EAAgBC,IAAA,IAAC,SAAE3B,KAAa4B,GAAMD,EAAA,OAC1CE,EAAAA,EAAAA,KAACR,EAAW,CACVS,UAAU,oDACNF,EAAI5B,SAEPA,GACW,EAGH+B,EAAoCA,KAAAjC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAiC,MAAA,CACjDN,iBACAnB,UAAA,EAAAP,SAAA,0lBA8BMiC,GAAcX,EAAAA,EAAAA,GAAA,OAAAC,OAAA,aAAAD,CAAA,CAAAE,KAAA,QAAAC,OAAA,oGAOPS,EAAmCA,KAAApC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAoC,UAAA,2DAAAH,MAAA,CAChDC,iBACAP,iBACAnB,UAAA,EAAAP,SAAA,4+BAiDaoC,EAAoCA,KAAAtC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,CAAAoC,UAAA,4DAAAH,MAAA,CACjDC,iBACAP,iBACAnB,UAAA,EAAAP,SAAA,wnBAqCaqC,EAAwCA,KAAAvC,EAAAA,EAAAA,KAAAC,EAAAA,EAAA,uDAAAC,SAAA,6T","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/components/progress-indicator/Examples.tsx"],"sourcesContent":["/**\n * UI lib Component Example\n *\n */\n\nimport React from 'react'\nimport styled from '@emotion/styled'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport {\n  ProgressIndicator,\n  Button,\n  FormRow,\n  Dialog,\n  Flex,\n  IconPrimary,\n  NumberFormat,\n} from '@dnb/eufemia/src'\n\nexport const ProgressIndicatorDefaultExample = () => (\n  <ComponentBox>\n    <ProgressIndicator />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularExample = () => (\n  <ComponentBox>\n    <ProgressIndicator type=\"circular\" />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularLabelHorizontalExample = () => (\n  <ComponentBox>\n    <ProgressIndicator\n      // label=\"Custom label ...\"\n      type=\"circular\"\n      showDefaultLabel={true}\n      labelDirection=\"horizontal\"\n    />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularLabelVerticalExample = () => (\n  <ComponentBox>\n    <ProgressIndicator\n      // label=\"Custom label ...\"\n      type=\"circular\"\n      showDefaultLabel={true}\n      labelDirection=\"vertical\"\n    />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularLabelInsideExample = () => (\n  <ComponentBox>\n    <ProgressIndicator\n      right\n      label={<IconPrimary icon=\"save\" />}\n      type=\"circular\"\n      labelDirection=\"inside\"\n    />\n\n    <ProgressIndicator\n      progress={72}\n      size=\"large\"\n      type=\"circular\"\n      labelDirection=\"inside\"\n      data-visual-test=\"progress-indicator-label-inside\"\n    >\n      <span className=\"dnb-p dnb-t__weight--bold dnb-t__size--small\">\n        {72}%\n      </span>\n    </ProgressIndicator>\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularPrimaryExample = () => (\n  <ComponentBox data-visual-test=\"progress-indicator-circular--primary\">\n    <ProgressIndicator\n      type=\"circular\"\n      progress=\"50\"\n      size=\"large\"\n      noAnimation\n    />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularRandomExample = () => (\n  <ComponentBox>\n    {() => {\n      const ChangeValue = () => {\n        const [value, setValue] = React.useState(50)\n        return (\n          <Flex.Horizontal align=\"center\">\n            <ProgressIndicator\n              type=\"circular\"\n              progress={value}\n              showDefaultLabel\n              noAnimation\n            />\n            <Button\n              left\n              size=\"small\"\n              variant=\"secondary\"\n              onClick={() => setValue(Math.random() * 100)}\n            >\n              Change\n            </Button>\n          </Flex.Horizontal>\n        )\n      }\n\n      return <ChangeValue />\n    }}\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularRandomTransitionExample = () => (\n  <ComponentBox>\n    {() => {\n      const Example = () => {\n        const random = (min, max) =>\n          Math.floor(Math.random() * (max - min + 1)) + min\n        const [progress, setProgressIndicator] = React.useState(\n          random(1, 100),\n        )\n        React.useEffect(() => {\n          const timer = setInterval(\n            () => setProgressIndicator(random(1, 100)),\n            1e3,\n          )\n          return () => clearInterval(timer)\n        })\n        return (\n          <ProgressIndicator\n            type=\"circular\"\n            size=\"large\"\n            progress={progress}\n          />\n        )\n      }\n      return <Example />\n    }}\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularRandomOnCompleteExample = () => (\n  <ComponentBox>\n    {() => {\n      const Example = () => {\n        const random = (min, max) =>\n          Math.floor(Math.random() * (max - min + 1)) + min\n        const [visible, setVisible] = React.useState(true)\n        React.useEffect(() => {\n          const timer = setInterval(\n            () => setVisible(!visible),\n            random(2400, 4200),\n          )\n          return () => clearTimeout(timer)\n        })\n        return (\n          <ProgressIndicator\n            type=\"circular\"\n            size=\"large\"\n            visible={visible}\n            onComplete={() => {\n              console.log('on_complete_circular')\n            }}\n          />\n        )\n      }\n      return <Example />\n    }}\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCircularDialogExample = () => (\n  <ComponentBox>\n    <Dialog\n      spacing={false}\n      maxWidth=\"12rem\"\n      fullscreen={false}\n      alignContent=\"centered\"\n      hideCloseButton\n      triggerAttributes={{ text: 'Show' }}\n      preventClose={false}\n    >\n      <ProgressIndicator\n        type=\"circular\"\n        showDefaultLabel\n        labelDirection=\"vertical\"\n        top=\"large\"\n        bottom=\"large\"\n        size=\"large\"\n      />\n    </Dialog>\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearDefaultExample = () => (\n  <ComponentBox>\n    <ProgressIndicator type=\"linear\" />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearSmallExample = () => (\n  <ComponentBox>\n    <ProgressIndicator type=\"linear\" size=\"small\" />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearLabelHorizontalExample = () => (\n  <ComponentBox>\n    <ProgressIndicator\n      type=\"linear\"\n      // label=\"Custom label ...\"\n      showDefaultLabel={true}\n      labelDirection=\"horizontal\"\n    />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearLabelVerticalExample = () => (\n  <ComponentBox>\n    <ProgressIndicator\n      type=\"linear\"\n      // label=\"Custom label ...\"\n      showDefaultLabel={true}\n      labelDirection=\"vertical\"\n    />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearLargeExample = () => (\n  <ComponentBox data-visual-test=\"progress-indicator-linear--primary\">\n    <ProgressIndicator\n      type=\"linear\"\n      progress=\"50\"\n      size=\"large\"\n      noAnimation\n    />\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearRandomExample = () => (\n  <ComponentBox>\n    {() => {\n      const ChangeValue = () => {\n        const [value, setValue] = React.useState(50)\n        return (\n          <FormRow centered>\n            <ProgressIndicator\n              type=\"linear\"\n              progress={value}\n              noAnimation\n            />\n            <Button\n              left\n              size=\"small\"\n              variant=\"secondary\"\n              onClick={() => setValue(Math.random() * 100)}\n            >\n              Change\n            </Button>\n          </FormRow>\n        )\n      }\n\n      return <ChangeValue />\n    }}\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearRandomTransitionExample = () => (\n  <ComponentBox>\n    {() => {\n      const Example = () => {\n        const random = (min, max) =>\n          Math.floor(Math.random() * (max - min + 1)) + min\n        const [progress, setProgressIndicator] = React.useState(\n          random(1, 100),\n        )\n        React.useEffect(() => {\n          const timer = setInterval(\n            () => setProgressIndicator(random(1, 100)),\n            1e3,\n          )\n          return () => clearInterval(timer)\n        })\n        return <ProgressIndicator type=\"linear\" progress={progress} />\n      }\n      return <Example />\n    }}\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearRandomOnCompleteExample = () => (\n  <ComponentBox>\n    {() => {\n      const Example = () => {\n        const random = (min, max) =>\n          Math.floor(Math.random() * (max - min + 1)) + min\n        const [visible, setVisible] = React.useState(true)\n        React.useEffect(() => {\n          const timer = setInterval(\n            () => setVisible(!visible),\n            random(2400, 4200),\n          )\n          return () => clearTimeout(timer)\n        })\n        return (\n          <ProgressIndicator\n            type=\"linear\"\n            size=\"large\"\n            visible={visible}\n            onComplete={() => {\n              console.log('on_complete_linear')\n            }}\n          />\n        )\n      }\n      return <Example />\n    }}\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorLinearDialogExample = () => (\n  <ComponentBox>\n    <Dialog\n      spacing={false}\n      maxWidth=\"12rem\"\n      fullscreen={false}\n      alignContent=\"centered\"\n      hideCloseButton\n      triggerAttributes={{ text: 'Show' }}\n      preventClose={false}\n    >\n      <ProgressIndicator\n        type=\"linear\"\n        showDefaultLabel\n        labelDirection=\"vertical\"\n        top=\"large\"\n        bottom=\"large\"\n      />\n    </Dialog>\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorSizesExample = () => (\n  <ComponentBox data-visual-test=\"progress-indicator-sizes\">\n    <div style={{ display: 'flex' }}>\n      <ProgressIndicator progress=\"50\" size=\"small\" />\n      <ProgressIndicator progress=\"50\" size=\"medium\" />\n      <ProgressIndicator progress=\"50\" />\n      <ProgressIndicator progress=\"50\" size=\"large\" />\n    </div>\n  </ComponentBox>\n)\n\nconst StyledLabel = styled.span`\n  display: grid;\n  place-content: center;\n`\nconst MyCustomLabel = ({ children, ...rest }) => (\n  <StyledLabel\n    className=\"dnb-p dnb-t__weight--medium dnb-t__size--small\"\n    {...rest}\n  >\n    {children}\n  </StyledLabel>\n)\n\nexport const ProgressIndicatorCountdownExample = () => (\n  <ComponentBox scope={{ MyCustomLabel }}>\n    {() => {\n      const ChangeValue = () => {\n        const max = 60\n        const [current, setCurrent] = React.useState(10)\n\n        React.useEffect(() => {\n          const timer = setInterval(() => {\n            setCurrent(current === 0 ? max - 1 : current - 1)\n          }, 1000)\n          return () => clearTimeout(timer)\n        })\n\n        return (\n          <ProgressIndicator\n            type=\"countdown\"\n            progress={(current / max) * 100}\n            title={current + ' av ' + max}\n            size=\"large\"\n            labelDirection=\"inside\"\n          >\n            <MyCustomLabel aria-hidden>{current}</MyCustomLabel>\n          </ProgressIndicator>\n        )\n      }\n\n      return <ChangeValue />\n    }}\n  </ComponentBox>\n)\n\nconst DarkBackground = styled.div`\n  background-color: var(--color-emerald-green);\n  border-radius: 0.5rem;\n  padding: 1rem;\n  text-align: center;\n`\n\nexport const ProgressIndicatorCustomCountdown = () => (\n  <ComponentBox\n    hideCode\n    data-visual-test=\"progress-indicator-custom-countdown\"\n    scope={{\n      DarkBackground,\n      MyCustomLabel,\n    }}\n  >\n    {() => {\n      const MyProgressIndicator = () => {\n        const StyledText = styled.span`\n          color: var(--color-white);\n          font-size: var(--font-size-small);\n        `\n\n        const StyledTitle = styled.span`\n          display: block;\n          font-weight: var(--font-weight-medium);\n          font-size: var(--font-size-medium);\n        `\n        const daysLeft = 20\n        const daysInMonth = 31\n\n        return (\n          <DarkBackground>\n            <ProgressIndicator\n              type=\"countdown\"\n              progress={(daysLeft / daysInMonth) * 100}\n              size=\"6rem\"\n              labelDirection=\"inside\"\n              customColors={{\n                line: 'var(--color-summer-green)',\n                shaft: 'transparent',\n                background: 'var(--color-sea-green)',\n              }}\n              title={daysLeft + 'days left'}\n              customCircleWidth=\"0.5rem\"\n            >\n              <StyledText>\n                <StyledTitle>{daysLeft} d</StyledTitle>\n                left\n              </StyledText>\n            </ProgressIndicator>\n          </DarkBackground>\n        )\n      }\n      return <MyProgressIndicator />\n    }}\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCustomHorizontal = () => (\n  <ComponentBox\n    hideCode\n    data-visual-test=\"progress-indicator-custom-horizontal\"\n    scope={{\n      DarkBackground,\n      MyCustomLabel,\n    }}\n  >\n    {() => {\n      const MyProgressIndicator = () => {\n        const StyledText = styled.span`\n          color: white;\n          font-size: var(--font-size-basis);\n        `\n        return (\n          <DarkBackground>\n            <ProgressIndicator\n              type=\"linear\"\n              progress={75}\n              size=\"1rem\"\n              labelDirection=\"vertical\"\n              customColors={{\n                line: 'var(--color-summer-green)',\n                shaft: 'var(--color-sea-green)',\n              }}\n            >\n              <StyledText>\n                <NumberFormat percent value={75} /> done\n              </StyledText>\n            </ProgressIndicator>\n          </DarkBackground>\n        )\n      }\n\n      return <MyProgressIndicator />\n    }}\n  </ComponentBox>\n)\n\nexport const ProgressIndicatorCustomizationExample = () => (\n  <ComponentBox data-visual-test=\"progress-indicator-customization\">\n    <ProgressIndicator\n      type=\"linear\"\n      progress={32}\n      customColors={{\n        line: 'red',\n        shaft: 'green',\n      }}\n      size=\"4rem\"\n    />\n    <ProgressIndicator\n      type=\"circular\"\n      progress={32}\n      customColors={{\n        line: 'red',\n        shaft: 'green',\n        background: 'blue',\n      }}\n      size=\"4rem\"\n    />\n  </ComponentBox>\n)\n"],"names":["ProgressIndicatorDefaultExample","_jsx2","ComponentBox","children","ProgressIndicatorCircularExample","ProgressIndicatorCircularLabelHorizontalExample","ProgressIndicatorCircularLabelVerticalExample","ProgressIndicatorCircularLabelInsideExample","ProgressIndicatorCircularPrimaryExample","ProgressIndicatorCircularRandomExample","noInline","ProgressIndicatorCircularRandomTransitionExample","ProgressIndicatorCircularRandomOnCompleteExample","ProgressIndicatorCircularDialogExample","ProgressIndicatorLinearDefaultExample","ProgressIndicatorLinearSmallExample","ProgressIndicatorLinearLabelHorizontalExample","ProgressIndicatorLinearLabelVerticalExample","ProgressIndicatorLinearLargeExample","ProgressIndicatorLinearRandomExample","ProgressIndicatorLinearRandomTransitionExample","ProgressIndicatorLinearRandomOnCompleteExample","ProgressIndicatorLinearDialogExample","ProgressIndicatorSizesExample","StyledLabel","_styled","target","name","styles","MyCustomLabel","_ref","rest","_jsx","className","ProgressIndicatorCountdownExample","scope","DarkBackground","ProgressIndicatorCustomCountdown","hideCode","ProgressIndicatorCustomHorizontal","ProgressIndicatorCustomizationExample"],"sourceRoot":""}