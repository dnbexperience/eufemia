{"version":3,"file":"f8c7d6f94d9ad37c619e70bbacd8dee51d64104e-a0ea32cf78faf8369caf.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/base-fields/ArraySelection/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/base-fields/ArraySelection/demos.mdx"],"sourcesContent":["import { Flex, Section } from '@dnb/eufemia/src'\nimport ComponentBox from '../../../../../../shared/tags/ComponentBox'\nimport { Field, Form } from '@dnb/eufemia/src/extensions/forms'\n\n// Checkbox\n\nexport const CheckboxEmpty = () => (\n  <ComponentBox>\n    <Field.ArraySelection\n      onFocus={(value) => console.log('onFocus', value)}\n      onBlur={(value) => console.log('onBlur', value)}\n      onChange={(value) => console.log('onChange', value)}\n    >\n      <Field.Option value=\"foo\" title=\"Fooo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const CheckboxLabel = () => (\n  <ComponentBox data-visual-test=\"array-selection-checkbox-options-vertical\">\n    <Field.ArraySelection\n      label=\"Label text\"\n      onChange={(value) => console.log('onChange', value)}\n    >\n      <Field.Option value=\"foo\" title=\"Fooo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const CheckboxOptionSelected = () => (\n  <ComponentBox>\n    <Field.ArraySelection\n      value={['bar']}\n      onChange={(values) => console.log('onChange', values)}\n    >\n      <Field.Option value=\"foo\" title=\"Foo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const CheckboxHorizontalLayout = () => (\n  <ComponentBox data-visual-test=\"array-selection-checkbox-horizontal-layout\">\n    <Field.ArraySelection\n      label=\"Label text\"\n      value={['bar']}\n      layout=\"horizontal\"\n      onChange={(values) => console.log('onChange', values)}\n    >\n      <Field.Option value=\"foo\" title=\"Foo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const CheckboxHorizontalOptionsLayout = () => (\n  <ComponentBox data-visual-test=\"array-selection-checkbox-options-horizontal\">\n    <Field.ArraySelection\n      label=\"Label text\"\n      value={['bar']}\n      optionsLayout=\"horizontal\"\n      onChange={(values) => console.log('onChange', values)}\n    >\n      <Field.Option value=\"foo\" title=\"Foo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const CheckboxHorizontalLayoutAndHorizontalOptionsLayout = () => (\n  <ComponentBox data-visual-test=\"array-selection-checkbox-horizontal\">\n    <Field.ArraySelection\n      label=\"Label text\"\n      value={['bar']}\n      layout=\"horizontal\"\n      optionsLayout=\"horizontal\"\n      onChange={(values) => console.log('onChange', values)}\n    >\n      <Field.Option value=\"foo\" title=\"Foo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const CheckboxDisabled = () => (\n  <ComponentBox>\n    <Field.ArraySelection\n      value={['bar']}\n      label=\"Label text\"\n      onChange={(value) => console.log('onChange', value)}\n      disabled\n    >\n      <Field.Option value=\"foo\" title=\"Foo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const CheckboxDisabledOptions = () => (\n  <ComponentBox>\n    <Field.ArraySelection\n      value={['foo']}\n      label=\"Label text\"\n      onChange={(value) => console.log('onChange', value)}\n    >\n      <Field.Option value=\"foo\" title=\"Foo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" disabled />\n      <Field.Option value=\"baz\" title=\"Bazz!\" disabled />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const CheckboxInfo = () => (\n  <ComponentBox>\n    <Field.ArraySelection\n      label=\"Label text\"\n      onChange={(value) => console.log('onChange', value)}\n      info=\"FYI\"\n    >\n      <Field.Option value=\"foo\" title=\"Foo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const CheckboxWarning = () => (\n  <ComponentBox>\n    <Field.ArraySelection\n      label=\"Label text\"\n      onChange={(value) => console.log('onChange', value)}\n      warning=\"I'm warning you...\"\n    >\n      <Field.Option value=\"foo\" title=\"Foo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const CheckboxError = () => (\n  <ComponentBox>\n    <Field.ArraySelection\n      label=\"Label text\"\n      onChange={(value) => console.log('onChange', value)}\n      error={new Error('This is what is wrong...')}\n    >\n      <Field.Option value=\"foo\" title=\"Foo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const CheckboxWithHelp = () => (\n  <ComponentBox data-visual-test=\"array-selection-checkbox-help\">\n    <Field.ArraySelection\n      label=\"Label text\"\n      help={{ title: 'Help title', content: 'Help content' }}\n    >\n      <Field.Option value=\"foo\" title=\"Foo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const CheckboxNestingWithLogic = () => (\n  <ComponentBox\n    hideCode\n    data-visual-test=\"array-selection-checkbox-nesting-logic\"\n  >\n    <Form.Handler onSubmit={console.log}>\n      <Flex.Stack>\n        <Form.Card>\n          <Field.ArraySelection\n            label=\"Make a selection\"\n            path=\"/mySelection\"\n            required\n          >\n            <Field.Option value=\"nothing\" title=\"Nothing\" />\n\n            <Field.Option value=\"showInput\" title=\"Show an input\" />\n            <Form.Visibility\n              visibleWhen={{\n                path: '/mySelection',\n                hasValue: (value) => {\n                  return Array.isArray(value)\n                    ? value.includes('showInput')\n                    : false\n                },\n              }}\n              animate\n              compensateForGap=\"auto\" // makes animation smooth\n            >\n              <Section variant=\"info\" innerSpace>\n                <Field.String placeholder=\"Enter some value\" required />\n              </Section>\n            </Form.Visibility>\n\n            <Field.Option\n              value=\"showAdditionalOption\"\n              title=\"Show additional option\"\n            />\n            <Form.Visibility\n              visibleWhen={{\n                path: '/mySelection',\n                hasValue: (value) => {\n                  return Array.isArray(value)\n                    ? value.includes('showAdditionalOption')\n                    : false\n                },\n              }}\n              animate\n              compensateForGap=\"auto\" // makes animation smooth\n            >\n              <Field.Option\n                value=\"showMeMore\"\n                title=\"Show even more\"\n                bottom=\"x-small\"\n              />\n              <Form.Visibility\n                animate\n                visibleWhen={{\n                  path: '/mySelection',\n                  hasValue: (value) => {\n                    return Array.isArray(value)\n                      ? value.includes('showMeMore')\n                      : false\n                  },\n                }}\n              >\n                <Section variant=\"info\" innerSpace>\n                  <Field.String placeholder=\"Enter more info\" required />\n                </Section>\n              </Form.Visibility>\n            </Form.Visibility>\n          </Field.ArraySelection>\n        </Form.Card>\n\n        <Form.SubmitButton />\n      </Flex.Stack>\n    </Form.Handler>\n  </ComponentBox>\n)\n\nexport const CheckboxWithDataPath = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        data={{\n          myDataPath: [\n            { title: 'Foo!', value: 'foo' },\n            { title: 'Bar!', value: 'bar' },\n            { title: 'Baz!', value: 'baz' },\n          ],\n        }}\n      >\n        <Field.ArraySelection\n          label=\"Populated by dataPath\"\n          dataPath=\"/myDataPath\"\n        />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const CheckboxWithData = () => {\n  return (\n    <ComponentBox>\n      <Field.ArraySelection\n        label=\"Populated by data\"\n        data={[\n          { title: 'Foo!', value: 'foo' },\n          { title: 'Bar!', value: 'bar' },\n          { title: 'Baz!', value: 'baz' },\n        ]}\n      />\n    </ComponentBox>\n  )\n}\n\n// Button\n\nexport const ButtonEmpty = () => (\n  <ComponentBox>\n    <Field.ArraySelection\n      variant=\"button\"\n      onChange={(value) => console.log('onChange', value)}\n    >\n      <Field.Option value=\"foo\" title=\"Fooo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const CheckboxButtonEmpty = () => (\n  <ComponentBox data-visual-test=\"array-selection-checkbox-button\">\n    <Field.ArraySelection\n      variant=\"checkbox-button\"\n      onChange={(value) => console.log('onChange', value)}\n    >\n      <Field.Option value=\"foo\" title=\"Fooo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const CheckboxButtonHorizontalOptionsLayout = () => (\n  <ComponentBox data-visual-test=\"array-selection-checkbox-button-options-horizontal\">\n    <Field.ArraySelection\n      label=\"Label text\"\n      value={['bar']}\n      variant=\"checkbox-button\"\n      optionsLayout=\"horizontal\"\n      onChange={(values) => console.log('onChange', values)}\n    >\n      <Field.Option value=\"foo\" title=\"Foo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n      <Field.Option value=\"quux\" title=\"Quuux!\" />\n      <Field.Option value=\"quuz\" title=\"Quuuuz!\" />\n      <Field.Option value=\"corge\" title=\"Corge!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const ButtonLabel = () => (\n  <ComponentBox data-visual-test=\"array-selection-button-options-vertical\">\n    <Field.ArraySelection\n      variant=\"button\"\n      label=\"Label text\"\n      onChange={(value) => console.log('onChange', value)}\n    >\n      <Field.Option value=\"foo\" title=\"Fooo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const ButtonOptionSelected = () => (\n  <ComponentBox>\n    <Field.ArraySelection\n      variant=\"button\"\n      value={['bar']}\n      onChange={(values) => console.log('onChange', values)}\n    >\n      <Field.Option value=\"foo\" title=\"Foo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const ButtonHorizontalLayout = () => (\n  <ComponentBox data-visual-test=\"array-selection-button-horizontal-layout\">\n    <Field.ArraySelection\n      variant=\"button\"\n      label=\"Label text\"\n      value={['bar']}\n      layout=\"horizontal\"\n      onChange={(values) => console.log('onChange', values)}\n    >\n      <Field.Option value=\"foo\" title=\"Foo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const ButtonHorizontalOptionsLayout = () => (\n  <ComponentBox data-visual-test=\"array-selection-button-horizontal\">\n    <Field.ArraySelection\n      variant=\"button\"\n      label=\"Label text\"\n      value={['bar']}\n      optionsLayout=\"horizontal\"\n      onChange={(values) => console.log('onChange', values)}\n    >\n      <Field.Option value=\"foo\" title=\"Foo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const ButtonHorizontalLayoutAndHorizontalOptionsLayout = () => (\n  <ComponentBox data-visual-test=\"array-selection-button-options-horizontal\">\n    <Field.ArraySelection\n      variant=\"button\"\n      label=\"Label text\"\n      value={['bar']}\n      layout=\"horizontal\"\n      optionsLayout=\"horizontal\"\n      onChange={(values) => console.log('onChange', values)}\n    >\n      <Field.Option value=\"foo\" title=\"Foo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const ButtonDisabled = () => (\n  <ComponentBox>\n    <Field.ArraySelection\n      variant=\"button\"\n      value={['bar']}\n      label=\"Label text\"\n      onChange={(value) => console.log('onChange', value)}\n      disabled\n    >\n      <Field.Option value=\"foo\" title=\"Foo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const ButtonDisabledOptions = () => (\n  <ComponentBox>\n    <Field.ArraySelection\n      variant=\"button\"\n      value={['foo']}\n      label=\"Label text\"\n      onChange={(value) => console.log('onChange', value)}\n    >\n      <Field.Option value=\"foo\" title=\"Foo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" disabled />\n      <Field.Option value=\"baz\" title=\"Bazz!\" disabled />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const ButtonInfo = () => (\n  <ComponentBox>\n    <Field.ArraySelection\n      variant=\"button\"\n      label=\"Label text\"\n      onChange={(value) => console.log('onChange', value)}\n      info=\"FYI\"\n    >\n      <Field.Option value=\"foo\" title=\"Foo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const ButtonWarning = () => (\n  <ComponentBox>\n    <Field.ArraySelection\n      variant=\"button\"\n      label=\"Label text\"\n      onChange={(value) => console.log('onChange', value)}\n      warning=\"I'm warning you...\"\n    >\n      <Field.Option value=\"foo\" title=\"Foo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const ButtonError = () => (\n  <ComponentBox>\n    <Field.ArraySelection\n      variant=\"button\"\n      label=\"Label text\"\n      onChange={(value) => console.log('onChange', value)}\n      error={new Error('This is what is wrong...')}\n    >\n      <Field.Option value=\"foo\" title=\"Foo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n      <Field.Option value=\"baz\" title=\"Bazz!\" />\n      <Field.Option value=\"qux\" title=\"Quxx!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const ButtonWithHelp = () => (\n  <ComponentBox data-visual-test=\"array-selection-button-help\">\n    <Field.ArraySelection\n      variant=\"button\"\n      label=\"Label text\"\n      help={{ title: 'Help title', content: 'Help content' }}\n    >\n      <Field.Option value=\"foo\" title=\"Foo!\" />\n      <Field.Option value=\"bar\" title=\"Baar!\" />\n    </Field.ArraySelection>\n  </ComponentBox>\n)\n\nexport const ButtonNestingWithLogic = () => (\n  <ComponentBox data-visual-test=\"array-selection-button-nesting-logic\">\n    <Form.Handler>\n      <Form.Card>\n        <Field.ArraySelection\n          variant=\"button\"\n          label=\"Make a selection\"\n          path=\"/mySelection\"\n        >\n          <Field.Option value=\"nothing\" title=\"Nothing\" />\n\n          <Field.Option value=\"showInput\" title=\"Show an input\" />\n          <Form.Visibility\n            visibleWhen={{\n              path: '/mySelection',\n              hasValue: (value) => {\n                return Array.isArray(value)\n                  ? value.includes('showInput')\n                  : false\n              },\n            }}\n            animate\n            compensateForGap=\"auto\" // makes animation smooth\n          >\n            <Section variant=\"info\" innerSpace>\n              <Field.String placeholder=\"Enter some value\" />\n            </Section>\n          </Form.Visibility>\n\n          <Field.Option\n            value=\"showAdditionalOption\"\n            title=\"Show additional option\"\n          />\n          <Form.Visibility\n            visibleWhen={{\n              path: '/mySelection',\n              hasValue: (value) => {\n                return Array.isArray(value)\n                  ? value.includes('showAdditionalOption')\n                  : false\n              },\n            }}\n            animate\n            compensateForGap=\"auto\" // makes animation smooth\n          >\n            <Field.Option\n              value=\"showMeMore\"\n              title=\"Show even more\"\n              bottom=\"x-small\"\n            />\n            <Form.Visibility\n              animate\n              visibleWhen={{\n                path: '/mySelection',\n                hasValue: (value) => {\n                  return Array.isArray(value)\n                    ? value.includes('showMeMore')\n                    : false\n                },\n              }}\n            >\n              <Section variant=\"info\" innerSpace>\n                <Field.String placeholder=\"Enter more info\" />\n              </Section>\n            </Form.Visibility>\n          </Form.Visibility>\n        </Field.ArraySelection>\n      </Form.Card>\n    </Form.Handler>\n  </ComponentBox>\n)\n\nexport const ButtonWithDataPath = () => {\n  return (\n    <ComponentBox>\n      <Form.Handler\n        data={{\n          myDataPath: [\n            { title: 'Foo!', value: 'foo' },\n            { title: 'Bar!', value: 'bar' },\n            { title: 'Baz!', value: 'baz' },\n          ],\n        }}\n      >\n        <Field.ArraySelection\n          variant=\"button\"\n          label=\"Populated by dataPath\"\n          dataPath=\"/myDataPath\"\n        />\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const ButtonWithData = () => {\n  return (\n    <ComponentBox>\n      <Field.ArraySelection\n        variant=\"button\"\n        label=\"Populated by data\"\n        data={[\n          { title: 'Foo!', value: 'foo' },\n          { title: 'Bar!', value: 'bar' },\n          { title: 'Baz!', value: 'baz' },\n        ]}\n      />\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    h3: \"h3\",\n    hr: \"hr\",\n    h4: \"h4\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.ButtonDisabled) _missingMdxReference(\"Examples.ButtonDisabled\", true);\n  if (!Examples.ButtonDisabledOptions) _missingMdxReference(\"Examples.ButtonDisabledOptions\", true);\n  if (!Examples.ButtonEmpty) _missingMdxReference(\"Examples.ButtonEmpty\", true);\n  if (!Examples.ButtonError) _missingMdxReference(\"Examples.ButtonError\", true);\n  if (!Examples.ButtonHorizontalLayout) _missingMdxReference(\"Examples.ButtonHorizontalLayout\", true);\n  if (!Examples.ButtonHorizontalLayoutAndHorizontalOptionsLayout) _missingMdxReference(\"Examples.ButtonHorizontalLayoutAndHorizontalOptionsLayout\", true);\n  if (!Examples.ButtonHorizontalOptionsLayout) _missingMdxReference(\"Examples.ButtonHorizontalOptionsLayout\", true);\n  if (!Examples.ButtonInfo) _missingMdxReference(\"Examples.ButtonInfo\", true);\n  if (!Examples.ButtonLabel) _missingMdxReference(\"Examples.ButtonLabel\", true);\n  if (!Examples.ButtonNestingWithLogic) _missingMdxReference(\"Examples.ButtonNestingWithLogic\", true);\n  if (!Examples.ButtonOptionSelected) _missingMdxReference(\"Examples.ButtonOptionSelected\", true);\n  if (!Examples.ButtonWarning) _missingMdxReference(\"Examples.ButtonWarning\", true);\n  if (!Examples.ButtonWithData) _missingMdxReference(\"Examples.ButtonWithData\", true);\n  if (!Examples.ButtonWithDataPath) _missingMdxReference(\"Examples.ButtonWithDataPath\", true);\n  if (!Examples.ButtonWithHelp) _missingMdxReference(\"Examples.ButtonWithHelp\", true);\n  if (!Examples.CheckboxButtonEmpty) _missingMdxReference(\"Examples.CheckboxButtonEmpty\", true);\n  if (!Examples.CheckboxButtonHorizontalOptionsLayout) _missingMdxReference(\"Examples.CheckboxButtonHorizontalOptionsLayout\", true);\n  if (!Examples.CheckboxDisabled) _missingMdxReference(\"Examples.CheckboxDisabled\", true);\n  if (!Examples.CheckboxDisabledOptions) _missingMdxReference(\"Examples.CheckboxDisabledOptions\", true);\n  if (!Examples.CheckboxEmpty) _missingMdxReference(\"Examples.CheckboxEmpty\", true);\n  if (!Examples.CheckboxError) _missingMdxReference(\"Examples.CheckboxError\", true);\n  if (!Examples.CheckboxHorizontalLayout) _missingMdxReference(\"Examples.CheckboxHorizontalLayout\", true);\n  if (!Examples.CheckboxHorizontalLayoutAndHorizontalOptionsLayout) _missingMdxReference(\"Examples.CheckboxHorizontalLayoutAndHorizontalOptionsLayout\", true);\n  if (!Examples.CheckboxHorizontalOptionsLayout) _missingMdxReference(\"Examples.CheckboxHorizontalOptionsLayout\", true);\n  if (!Examples.CheckboxInfo) _missingMdxReference(\"Examples.CheckboxInfo\", true);\n  if (!Examples.CheckboxLabel) _missingMdxReference(\"Examples.CheckboxLabel\", true);\n  if (!Examples.CheckboxNestingWithLogic) _missingMdxReference(\"Examples.CheckboxNestingWithLogic\", true);\n  if (!Examples.CheckboxOptionSelected) _missingMdxReference(\"Examples.CheckboxOptionSelected\", true);\n  if (!Examples.CheckboxWarning) _missingMdxReference(\"Examples.CheckboxWarning\", true);\n  if (!Examples.CheckboxWithData) _missingMdxReference(\"Examples.CheckboxWithData\", true);\n  if (!Examples.CheckboxWithDataPath) _missingMdxReference(\"Examples.CheckboxWithDataPath\", true);\n  if (!Examples.CheckboxWithHelp) _missingMdxReference(\"Examples.CheckboxWithHelp\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Checkbox variant (default)\"\n    }), \"\\n\", _jsx(Examples.CheckboxEmpty, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Button variant\"\n    }), \"\\n\", _jsx(Examples.ButtonEmpty, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Button with checkbox variant\"\n    }), \"\\n\", _jsx(Examples.CheckboxButtonEmpty, {}), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Checkbox variant demos\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Checkbox label\"\n    }), \"\\n\", _jsx(Examples.CheckboxLabel, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Checkbox option selected\"\n    }), \"\\n\", _jsx(Examples.CheckboxOptionSelected, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Checkbox horizontal layout\"\n    }), \"\\n\", _jsx(Examples.CheckboxHorizontalLayout, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Checkbox horizontal options-layout\"\n    }), \"\\n\", _jsx(Examples.CheckboxHorizontalOptionsLayout, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Checkbox horizontal layout and horizontal options-layout\"\n    }), \"\\n\", _jsx(Examples.CheckboxHorizontalLayoutAndHorizontalOptionsLayout, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Checkbox with help\"\n    }), \"\\n\", _jsx(Examples.CheckboxWithHelp, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Checkbox disabled\"\n    }), \"\\n\", _jsx(Examples.CheckboxDisabled, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Checkbox disabled options\"\n    }), \"\\n\", _jsx(Examples.CheckboxDisabledOptions, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Checkbox info\"\n    }), \"\\n\", _jsx(Examples.CheckboxInfo, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Checkbox warning\"\n    }), \"\\n\", _jsx(Examples.CheckboxWarning, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Checkbox error\"\n    }), \"\\n\", _jsx(Examples.CheckboxError, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Checkbox with nested fields and logic\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can nest other fields and show them based on your desired logic.\"\n    }), \"\\n\", _jsx(Examples.CheckboxNestingWithLogic, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Checkbox with a path to populate the data\"\n    }), \"\\n\", _jsx(Examples.CheckboxWithDataPath, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Checkbox with the data property\"\n    }), \"\\n\", _jsx(Examples.CheckboxWithData, {}), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      children: \"Button variant demos\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Button Label\"\n    }), \"\\n\", _jsx(Examples.ButtonLabel, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Button option selected\"\n    }), \"\\n\", _jsx(Examples.ButtonOptionSelected, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Button horizontal layout\"\n    }), \"\\n\", _jsx(Examples.ButtonHorizontalLayout, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Button horizontal options-layout\"\n    }), \"\\n\", _jsx(Examples.ButtonHorizontalOptionsLayout, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Button horizontal layout and horizontal options-layout\"\n    }), \"\\n\", _jsx(Examples.ButtonHorizontalLayoutAndHorizontalOptionsLayout, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Button with help\"\n    }), \"\\n\", _jsx(Examples.ButtonWithHelp, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Button disabled\"\n    }), \"\\n\", _jsx(Examples.ButtonDisabled, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Button disabled options\"\n    }), \"\\n\", _jsx(Examples.ButtonDisabledOptions, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Button info\"\n    }), \"\\n\", _jsx(Examples.ButtonInfo, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Button warning\"\n    }), \"\\n\", _jsx(Examples.ButtonWarning, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Button error\"\n    }), \"\\n\", _jsx(Examples.ButtonError, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Button with a path to populate the data\"\n    }), \"\\n\", _jsx(Examples.ButtonWithDataPath, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Button with the data property\"\n    }), \"\\n\", _jsx(Examples.ButtonWithData, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Button with nested fields and logic\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can nest other fields and show them based on your desired logic.\"\n    }), \"\\n\", _jsx(Examples.ButtonNestingWithLogic, {}), \"\\n\", _jsx(_components.h4, {\n      children: \"Button with checkbox variant\"\n    }), \"\\n\", _jsx(Examples.CheckboxButtonHorizontalOptionsLayout, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":["CheckboxEmpty","_jsx","ComponentBox","children","CheckboxLabel","CheckboxOptionSelected","CheckboxHorizontalLayout","CheckboxHorizontalOptionsLayout","CheckboxHorizontalLayoutAndHorizontalOptionsLayout","CheckboxDisabled","CheckboxDisabledOptions","CheckboxInfo","CheckboxWarning","CheckboxError","CheckboxWithHelp","CheckboxNestingWithLogic","hideCode","CheckboxWithDataPath","CheckboxWithData","ButtonEmpty","CheckboxButtonEmpty","CheckboxButtonHorizontalOptionsLayout","ButtonLabel","ButtonOptionSelected","ButtonHorizontalLayout","ButtonHorizontalOptionsLayout","ButtonHorizontalLayoutAndHorizontalOptionsLayout","ButtonDisabled","ButtonDisabledOptions","ButtonInfo","ButtonWarning","ButtonError","ButtonWithHelp","ButtonNestingWithLogic","ButtonWithDataPath","ButtonWithData","_createMdxContent","props","_components","Object","assign","h2","h3","hr","h4","p","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","wrapper","MDXLayout","id","component","Error"],"sourceRoot":""}