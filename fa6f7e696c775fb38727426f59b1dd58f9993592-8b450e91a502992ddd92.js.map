{"version":3,"file":"fa6f7e696c775fb38727426f59b1dd58f9993592-8b450e91a502992ddd92.js","mappings":"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","sources":["webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/Examples.tsx","webpack://dnb-design-system-portal/./src/docs/uilib/extensions/forms/intro-examples.mdx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/DataContext/At/At.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/DataContext/index.ts"],"sourcesContent":["import React from 'react'\nimport ComponentBox from '../../../../shared/tags/ComponentBox'\nimport { Input, Slider, Flex, NumberFormat } from '@dnb/eufemia/src'\nimport {\n  Form,\n  Field,\n  Value,\n  FieldBlock,\n  useFieldProps,\n  DataContext,\n  ValueBlock,\n  Wizard,\n  Iterate,\n} from '@dnb/eufemia/src/extensions/forms'\n\nexport const CreateBasicValueComponent = () => {\n  return (\n    <ComponentBox scope={{ ValueBlock }} hideCode>\n      {() => {\n        const MyValue = ({ value, ...props }) => {\n          return (\n            <ValueBlock {...props}>\n              <NumberFormat currency>{value}</NumberFormat>\n            </ValueBlock>\n          )\n        }\n\n        return <MyValue label=\"Label\" value={1234} />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const CreateBasicFieldComponent = () => {\n  return (\n    <ComponentBox\n      scope={{\n        useFieldProps,\n      }}\n      hideCode\n    >\n      {() => {\n        const MyField = (props) => {\n          const fromInput = React.useCallback(({ value }) => value, [])\n\n          const preparedProps = {\n            label: 'What is the secret of this field?',\n            fromInput,\n            onChangeValidator: (value) => {\n              if (value === 'secret') {\n                return new Error('Do not reveal the secret!')\n              }\n            },\n            ...props,\n          }\n\n          const {\n            id,\n            value,\n            label,\n            handleChange,\n            handleFocus,\n            handleBlur,\n          } = useFieldProps(preparedProps)\n\n          return (\n            <FieldBlock forId={id} label={label}>\n              <Input\n                id={id}\n                value={value}\n                on_change={handleChange}\n                on_focus={handleFocus}\n                on_blur={handleBlur}\n              />\n            </FieldBlock>\n          )\n        }\n\n        return (\n          <MyField\n            onChange={(value) => console.log('onChange', value)}\n            required\n          />\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const GettingStarted = () => {\n  return (\n    <ComponentBox hideCode>\n      {() => {\n        const existingData = {\n          companyName: 'DNB',\n          companyOrganizationNumber: '123456789',\n          postalAddressSelect: 'companyAddress',\n        }\n\n        function Component() {\n          const { data } = Form.useData('company-form')\n          console.log('State:', data)\n\n          return (\n            <Form.Handler\n              id=\"company-form\"\n              defaultData={existingData}\n              onChange={console.log}\n              onSubmit={console.log}\n            >\n              <Flex.Stack>\n                <Form.MainHeading>Bedrift</Form.MainHeading>\n                <Form.Card>\n                  <Field.Name.Company path=\"/companyName\" required />\n                  <Field.OrganizationNumber\n                    path=\"/companyOrganizationNumber\"\n                    required\n                  />\n                  <Field.Selection\n                    path=\"/postalAddressSelect\"\n                    label=\"Ã˜nsket sted for tilsendt post\"\n                    variant=\"radio\"\n                  >\n                    <Field.Option\n                      value=\"companyAddress\"\n                      title=\"Samme som forretningsadresse\"\n                    />\n                    <Field.Option value=\"other\" title=\"Annet\" />\n                  </Field.Selection>\n                </Form.Card>\n                <Form.ButtonRow>\n                  <Form.SubmitButton />\n                </Form.ButtonRow>\n              </Flex.Stack>\n            </Form.Handler>\n          )\n        }\n\n        return <Component />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const CreateComposedFieldComponent = () => {\n  return (\n    <ComponentBox\n      scope={{\n        DataContext,\n        useFieldProps,\n      }}\n      hideCode\n    >\n      {() => {\n        const MyComposedField = (props) => {\n          const {\n            id,\n            value,\n            hasError,\n            handleChange,\n            handleFocus,\n            handleBlur,\n          } = useFieldProps({\n            path: '/birthYear',\n          })\n\n          const handleBirthYearChange = React.useCallback(\n            (sliderData) => {\n              handleChange(sliderData.value)\n            },\n            [handleChange],\n          )\n\n          return (\n            <FieldBlock id={id} label={props.label ?? 'Name and age'}>\n              <Flex.Horizontal>\n                <Field.Name.First\n                  path=\"/firstName\"\n                  width=\"medium\"\n                  minLength={2}\n                />\n                <Field.Name.Last\n                  path=\"/lastName\"\n                  width=\"medium\"\n                  required\n                />\n                <FieldBlock width=\"large\">\n                  <Slider\n                    min={1900}\n                    max={new Date().getFullYear()}\n                    step={1}\n                    label=\"Birth year\"\n                    label_direction=\"vertical\"\n                    value={parseFloat(String(value))}\n                    on_change={handleBirthYearChange}\n                    on_drag_start={handleFocus}\n                    on_drag_end={handleBlur}\n                    status={hasError}\n                    tooltip\n                  />\n                </FieldBlock>\n              </Flex.Horizontal>\n            </FieldBlock>\n          )\n        }\n\n        const data = {\n          firstName: 'John',\n          birthYear: 2000,\n        }\n\n        return (\n          <DataContext.Provider\n            defaultData={data}\n            onChange={(data) => console.log('onChange', data)}\n          >\n            <MyComposedField label=\"My custom label\" />\n          </DataContext.Provider>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const BaseFieldComponents = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Form.Card>\n        <Field.String\n          label=\"Text field\"\n          value=\"Lorem Ipsum\"\n          onChange={(value) => console.log('onChange', value)}\n        />\n        <Field.Number\n          label=\"Number Field\"\n          value={789}\n          onChange={(value) => console.log('onChange', value)}\n        />\n        <Field.Boolean\n          label=\"Boolean Field\"\n          value={true}\n          onChange={(value) => console.log('onChange', value)}\n        />\n      </Form.Card>\n    </ComponentBox>\n  )\n}\n\nexport const FeatureFields = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Form.Card>\n        <Field.String label=\"Fornavn\" value=\"John\" />\n        <Field.String label=\"Etternavn\" value=\"Smith\" />\n        <Field.NationalIdentityNumber value=\"20058512345\" />\n        <Field.Email value=\"john@smith.email\" />\n        <Field.PhoneNumber value=\"+47 98765432\" />\n      </Form.Card>\n    </ComponentBox>\n  )\n}\n\nexport const LayoutComponents = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Flex.Stack>\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Form.Card>\n          <Form.SubHeading>Name</Form.SubHeading>\n\n          <Field.String label=\"Fornavn\" value=\"John\" />\n          <Field.String label=\"Etternavn\" value=\"Smith\" />\n        </Form.Card>\n\n        <Form.Card>\n          <Form.SubHeading>More information</Form.SubHeading>\n\n          <Field.NationalIdentityNumber value=\"20058512345\" />\n          <Field.Email value=\"john@smith.email\" />\n          <Field.PhoneNumber value=\"+47 98765432\" />\n        </Form.Card>\n      </Flex.Stack>\n    </ComponentBox>\n  )\n}\n\nexport const VisibilityBasedOnData = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Form.Handler\n        defaultData={{\n          firstName: undefined,\n          lastName: 'Smith',\n          advanced: false,\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Flex.Stack>\n          <Form.MainHeading>Profile</Form.MainHeading>\n\n          <Form.Card>\n            <Form.SubHeading>Name</Form.SubHeading>\n\n            <Field.String path=\"/firstName\" label=\"Fornavn\" />\n            <Field.String path=\"/lastName\" label=\"Etternavn\" />\n          </Form.Card>\n\n          <Field.Boolean\n            path=\"/advanced\"\n            variant=\"checkbox-button\"\n            label=\"More fields\"\n          />\n          <Form.Visibility pathTrue=\"/advanced\">\n            <Flex.Stack>\n              <Form.Card>\n                <Form.SubHeading>More information</Form.SubHeading>\n\n                <Field.NationalIdentityNumber value=\"20058512345\" />\n                <Field.Email value=\"john@smith.email\" />\n                <Field.PhoneNumber value=\"+47 98765432\" />\n              </Form.Card>\n            </Flex.Stack>\n          </Form.Visibility>\n        </Flex.Stack>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const UsingFormHandler = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Form.Handler\n        defaultData={{\n          firstName: 'John',\n          lastName: 'Smith',\n          ssn: '20058512345',\n          email: 'john@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Form.Card>\n          <Field.String path=\"/firstName\" label=\"Fornavn\" />\n          <Field.String path=\"/lastName\" label=\"Etternavn\" />\n          <Field.NationalIdentityNumber path=\"/ssn\" />\n          <Field.Email path=\"/email\" />\n          <Field.PhoneNumber path=\"/phone\" />\n\n          <Form.ButtonRow>\n            <Form.SubmitButton />\n          </Form.ButtonRow>\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const Validation = () => {\n  return (\n    <ComponentBox\n      scope={{\n        Value,\n      }}\n    >\n      <Form.Handler\n        defaultData={{\n          firstName: undefined,\n          lastName: 'Smith',\n          ssn: '123',\n          email: '@smith.email',\n          phone: '+47 98765432',\n        }}\n        onChange={(data) => console.log('onChange', data)}\n        onPathChange={(path, value) =>\n          console.log('onPathChange', path, value)\n        }\n        onSubmit={(data) => console.log('onSubmit', data)}\n      >\n        <Form.MainHeading>Profile</Form.MainHeading>\n\n        <Form.Card>\n          <Field.String path=\"/firstName\" label=\"Fornavn\" required />\n          <Field.String path=\"/lastName\" label=\"Etternavn\" required />\n          <Field.NationalIdentityNumber path=\"/ssn\" validateInitially />\n          <Field.Email path=\"/email\" validateInitially />\n          <Field.PhoneNumber path=\"/phone\" validateInitially />\n        </Form.Card>\n      </Form.Handler>\n    </ComponentBox>\n  )\n}\n\nexport const UsingWizard = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        function MyForm() {\n          // Routers like \"react-router\" are supported as well\n          Wizard.useQueryLocator('my-wizard')\n          const { summaryTitle } = Form.useLocale().Step\n\n          return (\n            <Form.Handler\n              defaultData={{\n                firstName: undefined,\n                lastName: 'Smith',\n                advanced: false,\n                ssn: '123',\n                email: '@smith.email',\n                phone: '+47 98765432',\n              }}\n              onChange={(data) => console.log('onChange', data)}\n              onPathChange={(path, value) =>\n                console.log('onPathChange', path, value)\n              }\n              onSubmit={(data) => console.log('onSubmit', data)}\n            >\n              <Wizard.Container id=\"my-wizard\" mode=\"loose\">\n                <Wizard.Step title=\"Name\">\n                  <Form.MainHeading>Profile</Form.MainHeading>\n\n                  <Form.Card>\n                    <Form.SubHeading>Name</Form.SubHeading>\n\n                    <Field.String\n                      path=\"/firstName\"\n                      label=\"Fornavn\"\n                      required\n                    />\n                    <Field.String\n                      path=\"/lastName\"\n                      label=\"Etternavn\"\n                      required\n                    />\n                  </Form.Card>\n\n                  <Wizard.Buttons />\n                </Wizard.Step>\n\n                <Wizard.Step title=\"More information\">\n                  <Form.MainHeading>Profile</Form.MainHeading>\n\n                  <Form.Card>\n                    <Form.SubHeading>More information</Form.SubHeading>\n\n                    <Field.NationalIdentityNumber path=\"/ssn\" />\n                    <Field.Email path=\"/email\" />\n                    <Field.PhoneNumber path=\"/phone\" />\n                  </Form.Card>\n\n                  <Wizard.Buttons />\n                </Wizard.Step>\n\n                <Wizard.Step title={summaryTitle}>\n                  <Form.MainHeading>Profile</Form.MainHeading>\n\n                  <Form.Card>\n                    <Value.SummaryList layout=\"grid\">\n                      <Value.String path=\"/firstName\" label=\"Fornavn\" />\n                      <Value.String path=\"/lastName\" label=\"Etternavn\" />\n\n                      <Value.NationalIdentityNumber path=\"/ssn\" />\n                      <Value.Email path=\"/email\" />\n                      <Value.PhoneNumber path=\"/phone\" />\n                    </Value.SummaryList>\n                  </Form.Card>\n\n                  <Form.ButtonRow>\n                    <Wizard.Buttons />\n                    <Form.SubmitButton />\n                  </Form.ButtonRow>\n                </Wizard.Step>\n              </Wizard.Container>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const UsingFormSection = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyEditContainer = () => {\n          return (\n            <Form.Section.EditContainer variant=\"basic\">\n              <Field.Name.First path=\"/firstName\" />\n              <Field.Name.Last path=\"/lastName\" />\n            </Form.Section.EditContainer>\n          )\n        }\n\n        const MyViewContainer = () => {\n          return (\n            <Form.Section.ViewContainer variant=\"basic\">\n              <Value.SummaryList>\n                <Value.Name.First path=\"/firstName\" />\n                <Value.Name.Last path=\"/lastName\" />\n              </Value.SummaryList>\n            </Form.Section.ViewContainer>\n          )\n        }\n\n        return (\n          <Form.Handler\n            onSubmit={async (data) => console.log('onSubmit', data)}\n            defaultData={{\n              nestedPath: {\n                firstName: 'Nora',\n                lastName: undefined, // initiate error\n              },\n            }}\n          >\n            <Form.Card>\n              <Form.SubHeading>Your account</Form.SubHeading>\n              <Form.Section path=\"/nestedPath\" required>\n                <MyEditContainer />\n                <MyViewContainer />\n              </Form.Section>\n            </Form.Card>\n            <Form.SubmitButton />\n          </Form.Handler>\n        )\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const UsingIterate = () => {\n  return (\n    <ComponentBox>\n      {() => {\n        const MyEditItemForm = () => {\n          return (\n            <Field.Composition>\n              <Field.Name.First itemPath=\"/firstName\" width=\"medium\" />\n              <Field.Name.Last\n                itemPath=\"/lastName\"\n                width=\"medium\"\n                required\n              />\n            </Field.Composition>\n          )\n        }\n\n        const MyEditItem = () => {\n          return (\n            <Iterate.EditContainer\n              title=\"Edit account holder {itemNo}\"\n              titleWhenNew=\"New account holder {itemNo}\"\n            >\n              <MyEditItemForm />\n            </Iterate.EditContainer>\n          )\n        }\n\n        const MyViewItem = () => {\n          const item = Iterate.useItem()\n          console.log('index:', item.index)\n\n          return (\n            <Iterate.ViewContainer title=\"Account holder {itemNo}\">\n              <Value.SummaryList>\n                <Value.Name.First itemPath=\"/firstName\" showEmpty />\n                <Value.Name.Last itemPath=\"/lastName\" placeholder=\"-\" />\n              </Value.SummaryList>\n            </Iterate.ViewContainer>\n          )\n        }\n\n        const CreateNewEntry = () => {\n          return (\n            <Iterate.PushContainer\n              path=\"/accounts\"\n              title=\"New account holder\"\n              openButton={\n                <Iterate.PushContainer.OpenButton text=\"Add another account\" />\n              }\n              showOpenButtonWhen={(list) => list.length > 0}\n            >\n              <MyEditItemForm />\n            </Iterate.PushContainer>\n          )\n        }\n\n        function MyForm() {\n          return (\n            <Form.Handler\n              data={{\n                accounts: [\n                  {\n                    firstName: 'Tony',\n                    lastName: undefined, // initiate error\n                  },\n                ],\n              }}\n              onChange={(data) =>\n                console.log('DataContext/onChange', data)\n              }\n              onSubmit={async (data) => console.log('onSubmit', data)}\n            >\n              <Flex.Vertical>\n                <Form.MainHeading>Accounts</Form.MainHeading>\n\n                <Form.Card gap={false}>\n                  <Iterate.Array path=\"/accounts\">\n                    <MyViewItem />\n                    <MyEditItem />\n                  </Iterate.Array>\n\n                  <CreateNewEntry />\n                </Form.Card>\n\n                <Form.SubmitButton variant=\"send\" />\n              </Flex.Vertical>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const Transformers = () => {\n  return (\n    <ComponentBox hideCode>\n      {() => {\n        const MyForm = () => {\n          const transformToUpper = (value) => {\n            return value?.toUpperCase()\n          }\n          const transformToLower = (value) => {\n            return value?.toLowerCase()\n          }\n\n          return (\n            <Form.Handler onChange={console.log}>\n              <Form.Card>\n                <Field.String\n                  width=\"medium\"\n                  label=\"Input value\"\n                  placeholder=\"Type letters\"\n                  path=\"/myField\"\n                  transformIn={transformToUpper}\n                  transformOut={transformToLower}\n                />\n\n                <Value.String label=\"Output value\" path=\"/myField\" />\n              </Form.Card>\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n\nexport const QuickStart = () => {\n  return (\n    <ComponentBox hideCode>\n      {() => {\n        const existingData = { companyName: 'DNB' }\n\n        function MyForm() {\n          return (\n            <Form.Handler\n              defaultData={existingData}\n              onSubmit={async (data) => console.log('onSubmit', data)}\n              required\n            >\n              <Form.MainHeading>Quick start</Form.MainHeading>\n\n              <Form.Card>\n                <Field.Name.Company path=\"/companyName\" />\n\n                <Field.OrganizationNumber path=\"/companyOrganizationNumber\" />\n\n                <Field.Selection\n                  path=\"/postalAddressSelect\"\n                  label=\"Ã˜nsket sted for tilsendt post\"\n                  variant=\"radio\"\n                  required={false}\n                >\n                  <Field.Option\n                    value=\"companyAddress\"\n                    title=\"Samme som forretningsadresse\"\n                  />\n                  <Field.Option value=\"other\" title=\"Annet\" />\n                </Field.Selection>\n\n                <Form.Visibility\n                  visibleWhen={{\n                    path: '/postalAddressSelect',\n                    hasValue: 'other',\n                  }}\n                  animate\n                >\n                  <Field.String\n                    path=\"/postalAddress\"\n                    label=\"Sted for tilsendt post\"\n                  />\n                </Form.Visibility>\n              </Form.Card>\n              <Form.SubmitButton variant=\"send\" />\n            </Form.Handler>\n          )\n        }\n\n        return <MyForm />\n      }}\n    </ComponentBox>\n  )\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport * as Examples from './Examples';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  if (!Examples) _missingMdxReference(\"Examples\", false);\n  if (!Examples.BaseFieldComponents) _missingMdxReference(\"Examples.BaseFieldComponents\", true);\n  if (!Examples.FeatureFields) _missingMdxReference(\"Examples.FeatureFields\", true);\n  if (!Examples.LayoutComponents) _missingMdxReference(\"Examples.LayoutComponents\", true);\n  if (!Examples.UsingFormHandler) _missingMdxReference(\"Examples.UsingFormHandler\", true);\n  if (!Examples.UsingFormSection) _missingMdxReference(\"Examples.UsingFormSection\", true);\n  if (!Examples.UsingIterate) _missingMdxReference(\"Examples.UsingIterate\", true);\n  if (!Examples.UsingWizard) _missingMdxReference(\"Examples.UsingWizard\", true);\n  if (!Examples.Validation) _missingMdxReference(\"Examples.Validation\", true);\n  if (!Examples.VisibilityBasedOnData) _missingMdxReference(\"Examples.VisibilityBasedOnData\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Demos\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here are some examples and case demos (fullscreen) of how you can use the form components.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/demo-cases/casedemo1/\",\n          children: \"Case Demo 1 (fullscreen)\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/uilib/extensions/forms/demo-cases/casedemo2/\",\n          children: \"Case Demo 2 (fullscreen)\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Base field components\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Base field components are targeting the data type they produce. They can\\nreceive values and change handlers directly by properties.\"\n    }), \"\\n\", _jsx(Examples.BaseFieldComponents, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Feature fields\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Feature fields build on top of base field components and provide standard\\nproperties for simplified form implementations.\"\n    }), \"\\n\", _jsx(Examples.FeatureFields, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Layout components\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Wrapping inputs in \", _jsx(_components.a, {\n        href: \"/uilib/layout/flex/stack/\",\n        children: \"Flex.Stack\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Card/\",\n        children: \"Form.Card\"\n      }), \" with the \", _jsx(_components.code, {\n        children: \"stack\"\n      }), \" property, provides the standard design without\\nthe need for local styles.\"]\n    }), \"\\n\", _jsx(Examples.LayoutComponents, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Visibility based on data\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Certain fields are displayed based on specific data requirements.\"\n    }), \"\\n\", _jsx(Examples.VisibilityBasedOnData, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Validation\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here are some examples of validation properties of field components.\"\n    }), \"\\n\", _jsx(Examples.Validation, {}), \"\\n\", _jsxs(_components.h2, {\n      children: [\"Using \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Handler/\",\n        children: \"Form.Handler\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Wrapping fields with a \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Handler/\",\n        children: \"Form.Handler\"\n      }), \" component lets them read and\\nwrite data to one common data set, and have input and output of data in\\none place instead of connecting to every single field component.\"]\n    }), \"\\n\", _jsx(Examples.UsingFormHandler, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Using Wizard\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"With a \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Wizard/Container\",\n        children: \"Wizard\"\n      }), \" component, you can create a wizard-like flow of steps.\"]\n    }), \"\\n\", _jsx(Examples.UsingWizard, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Using a Form.Section\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"With a \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Form/Section\",\n        children: \"Form.Section\"\n      }), \" component, you can create a section of fields and values that can be reused in different contexts. It also lets you define a container for the section, so you can easily switch between an edit and a view container.\"]\n    }), \"\\n\", _jsx(Examples.UsingFormSection, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Iterate over repeated data\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the \", _jsx(_components.a, {\n        href: \"/uilib/extensions/forms/Iterate/\",\n        children: \"Iterate\"\n      }), \" component to iterate over repeated data. It also lets you define animated containers, so you can easily switch between an edit and a view container.\"]\n    }), \"\\n\", _jsx(Examples.UsingIterate, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import React, { useCallback, useContext } from 'react'\nimport pointer from '../../utils/json-pointer'\nimport type { ComponentProps } from '../../types'\nimport Context, { ContextState } from '../Context'\n\nexport type Props = ComponentProps & {\n  /** JSON Pointer for where in the source dataset to point at in sub components */\n  path?: string\n  iterate?: boolean\n  children?: React.ReactNode\n}\n\nfunction At(props: Props) {\n  const { path = '/', iterate, children } = props\n  const dataContext = useContext(Context)\n  const {\n    data: contextData,\n    handlePathChange: handlePathChangeDataContext,\n  } = dataContext\n\n  const data =\n    contextData && pointer.has(contextData, path)\n      ? pointer.get(contextData, path)\n      : undefined\n\n  const handlePathChange: ContextState['handlePathChange'] = useCallback(\n    (changePath, value) => {\n      handlePathChangeDataContext(`${path}${changePath}`, value)\n    },\n    [handlePathChangeDataContext, path]\n  )\n\n  if (iterate) {\n    if (!Array.isArray(data)) {\n      return null\n    }\n    return (\n      <>\n        {data.map((element, i) => {\n          const handlePathChange = (\n            handlePathChangeDataContext\n              ? (changePath, value) => {\n                  handlePathChangeDataContext(\n                    `${path}/${i}${changePath}`,\n                    value\n                  )\n                }\n              : undefined\n          ) as ContextState['handlePathChange']\n\n          return (\n            <Context.Provider\n              key={`element${i}`}\n              value={{\n                ...dataContext,\n                data: element,\n                handlePathChange,\n              }}\n            >\n              {children}\n            </Context.Provider>\n          )\n        })}\n      </>\n    )\n  }\n\n  return (\n    <Context.Provider\n      value={{\n        ...dataContext,\n        data,\n        handlePathChange,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  )\n}\n\nAt._supportsSpacingProps = true\nexport default At\n","import Context from './Context'\n\nconst Consumer = Context.Consumer\nexport { Consumer }\n\nexport * from './Context'\nexport { default as Context } from './Context'\nexport { default as Provider } from './Provider'\nexport { default as At } from './At'\n"],"names":["CreateBasicValueComponent","_jsx","ComponentBox","scope","ValueBlock","hideCode","noInline","children","CreateBasicFieldComponent","useFieldProps","GettingStarted","CreateComposedFieldComponent","DataContext","BaseFieldComponents","Value","FeatureFields","LayoutComponents","VisibilityBasedOnData","UsingFormHandler","Validation","UsingWizard","UsingFormSection","UsingIterate","Transformers","QuickStart","_createMdxContent","props","_components","Object","assign","h2","p","ul","li","a","code","_provideComponents","components","Examples","_missingMdxReference","_jsxs","_Fragment","href","id","component","Error","wrapper","MDXLayout","At","path","iterate","dataContext","useContext","Context","data","contextData","handlePathChange","handlePathChangeDataContext","pointer","undefined","useCallback","changePath","value","Array","isArray","map","element","i","Provider","_supportsSpacingProps","Consumer"],"sourceRoot":""}