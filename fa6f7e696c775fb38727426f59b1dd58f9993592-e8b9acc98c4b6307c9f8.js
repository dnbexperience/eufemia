"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[10772],{99301:function(n,e,a){a.r(e);var t=a(52322),o=a(45392),r=a(94929);function i(n){const e=Object.assign({h2:"h2",p:"p",ul:"ul",li:"li",a:"a",code:"code"},(0,o.ah)(),n.components);return r||l("Examples",!1),r.BaseFieldComponents||l("Examples.BaseFieldComponents",!0),r.FeatureFields||l("Examples.FeatureFields",!0),r.LayoutComponents||l("Examples.LayoutComponents",!0),r.UsingFormHandler||l("Examples.UsingFormHandler",!0),r.UsingFormSection||l("Examples.UsingFormSection",!0),r.UsingIterate||l("Examples.UsingIterate",!0),r.UsingWizard||l("Examples.UsingWizard",!0),r.Validation||l("Examples.Validation",!0),r.VisibilityBasedOnData||l("Examples.VisibilityBasedOnData",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:"Demos"}),"\n",(0,t.jsx)(e.p,{children:"Here are some examples and case demos (fullscreen) of how you can use the form components."}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"/uilib/extensions/forms/demo-cases/casedemo1/",children:"Case Demo 1 (fullscreen)"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"/uilib/extensions/forms/demo-cases/casedemo2/",children:"Case Demo 2 (fullscreen)"})}),"\n"]}),"\n",(0,t.jsx)(e.h2,{children:"Base field components"}),"\n",(0,t.jsx)(e.p,{children:"Base field components are targeting the data type they produce. They can\nreceive values and change handlers directly by properties."}),"\n",(0,t.jsx)(r.BaseFieldComponents,{}),"\n",(0,t.jsx)(e.h2,{children:"Feature fields"}),"\n",(0,t.jsx)(e.p,{children:"Feature fields build on top of base field components and provide standard\nproperties for simplified form implementations."}),"\n",(0,t.jsx)(r.FeatureFields,{}),"\n",(0,t.jsx)(e.h2,{children:"Layout components"}),"\n",(0,t.jsxs)(e.p,{children:["Wrapping inputs in ",(0,t.jsx)(e.a,{href:"/uilib/layout/flex/stack/",children:"Flex.Stack"})," and ",(0,t.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Card/",children:"Form.Card"})," with the ",(0,t.jsx)(e.code,{children:"stack"})," property, provides the standard design without\nthe need for local styles."]}),"\n",(0,t.jsx)(r.LayoutComponents,{}),"\n",(0,t.jsx)(e.h2,{children:"Visibility based on data"}),"\n",(0,t.jsx)(e.p,{children:"Certain fields are displayed based on specific data requirements."}),"\n",(0,t.jsx)(r.VisibilityBasedOnData,{}),"\n",(0,t.jsx)(e.h2,{children:"Validation"}),"\n",(0,t.jsx)(e.p,{children:"Here are some examples of validation properties of field components."}),"\n",(0,t.jsx)(r.Validation,{}),"\n",(0,t.jsxs)(e.h2,{children:["Using ",(0,t.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Handler/",children:"Form.Handler"})]}),"\n",(0,t.jsxs)(e.p,{children:["Wrapping fields with a ",(0,t.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Handler/",children:"Form.Handler"})," component lets them read and\nwrite data to one common data set, and have input and output of data in\none place instead of connecting to every single field component."]}),"\n",(0,t.jsx)(r.UsingFormHandler,{}),"\n",(0,t.jsx)(e.h2,{children:"Using Wizard"}),"\n",(0,t.jsxs)(e.p,{children:["With a ",(0,t.jsx)(e.a,{href:"/uilib/extensions/forms/Wizard/Container",children:"Wizard"})," component, you can create a wizard-like flow of steps."]}),"\n",(0,t.jsx)(r.UsingWizard,{}),"\n",(0,t.jsx)(e.h2,{children:"Using a Form.Section"}),"\n",(0,t.jsxs)(e.p,{children:["With a ",(0,t.jsx)(e.a,{href:"/uilib/extensions/forms/Form/Section",children:"Form.Section"})," component, you can create a section of fields and values that can be reused in different contexts. It also lets you define a container for the section, so you can easily switch between an edit and a view container."]}),"\n",(0,t.jsx)(r.UsingFormSection,{}),"\n",(0,t.jsx)(e.h2,{children:"Iterate over repeated data"}),"\n",(0,t.jsxs)(e.p,{children:["You can use the ",(0,t.jsx)(e.a,{href:"/uilib/extensions/forms/Iterate/",children:"Iterate"})," component to iterate over repeated data. It also lets you define animated containers, so you can easily switch between an edit and a view container."]}),"\n",(0,t.jsx)(r.UsingIterate,{})]})}function l(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}e.default=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(i,n)})):i(n)}},94929:function(n,e,a){a.r(e),a.d(e,{BaseFieldComponents:function(){return h},CreateBasicFieldComponent:function(){return m},CreateBasicValueComponent:function(){return s},CreateComposedFieldComponent:function(){return c},FeatureFields:function(){return F},GettingStarted:function(){return u},LayoutComponents:function(){return p},QuickStart:function(){return S},Transformers:function(){return v},UsingFormHandler:function(){return f},UsingFormSection:function(){return x},UsingIterate:function(){return y},UsingWizard:function(){return b},Validation:function(){return C},VisibilityBasedOnData:function(){return g}});a(2784);var t=a(73136),o=a(49406),r=a(26409),i=a(16620),l=a(92364),d=a(52322);const s=()=>(0,d.jsx)(t.Z,{scope:{ValueBlock:o.Z},hideCode:!0,noInline:!0,children:'const MyValue = ({ value, ...props }) => {\n  return (\n    <ValueBlock {...props}>\n      <NumberFormat currency>{value}</NumberFormat>\n    </ValueBlock>\n  )\n}\nrender(<MyValue label="Label" value={1234} />)\n'}),m=()=>(0,d.jsx)(t.Z,{scope:{useFieldProps:r.Z},hideCode:!0,noInline:!0,children:"const MyField = (props) => {\n  const fromInput = React.useCallback(({ value }) => value, [])\n  const preparedProps = {\n    label: 'What is the secret of this field?',\n    fromInput,\n    onChangeValidator: (value) => {\n      if (value === 'secret') {\n        return new Error('Do not reveal the secret!')\n      }\n    },\n    ...props,\n  }\n  const { id, value, label, handleChange, handleFocus, handleBlur } =\n    useFieldProps(preparedProps)\n  return (\n    <FieldBlock forId={id} label={label}>\n      <Input\n        id={id}\n        value={value}\n        on_change={handleChange}\n        on_focus={handleFocus}\n        on_blur={handleBlur}\n      />\n    </FieldBlock>\n  )\n}\nrender(\n  <MyField\n    onChange={(value) => console.log('onChange', value)}\n    required\n  />,\n)\n"}),u=()=>(0,d.jsx)(t.Z,{hideCode:!0,noInline:!0,children:'const existingData = {\n  companyName: \'DNB\',\n  companyOrganizationNumber: \'123456789\',\n  postalAddressSelect: \'companyAddress\',\n}\nfunction Component() {\n  const { data } = Form.useData(\'company-form\')\n  console.log(\'State:\', data)\n  return (\n    <Form.Handler\n      id="company-form"\n      defaultData={existingData}\n      onChange={console.log}\n      onSubmit={console.log}\n    >\n      <Flex.Stack>\n        <Form.MainHeading>Bedrift</Form.MainHeading>\n        <Form.Card>\n          <Field.Name.Company path="/companyName" required />\n          <Field.OrganizationNumber\n            path="/companyOrganizationNumber"\n            required\n          />\n          <Field.Selection\n            path="/postalAddressSelect"\n            label="Ã˜nsket sted for tilsendt post"\n            variant="radio"\n          >\n            <Field.Option\n              value="companyAddress"\n              title="Samme som forretningsadresse"\n            />\n            <Field.Option value="other" title="Annet" />\n          </Field.Selection>\n        </Form.Card>\n        <Form.ButtonRow>\n          <Form.SubmitButton />\n        </Form.ButtonRow>\n      </Flex.Stack>\n    </Form.Handler>\n  )\n}\nrender(<Component />)\n'}),c=()=>(0,d.jsx)(t.Z,{scope:{DataContext:i,useFieldProps:r.Z},hideCode:!0,noInline:!0,children:'const MyComposedField = (props) => {\n  const { id, value, hasError, handleChange, handleFocus, handleBlur } =\n    useFieldProps({\n      path: \'/birthYear\',\n    })\n  const handleBirthYearChange = React.useCallback(\n    (sliderData) => {\n      handleChange(sliderData.value)\n    },\n    [handleChange],\n  )\n  return (\n    <FieldBlock id={id} label={props.label ?? \'Name and age\'}>\n      <Flex.Horizontal>\n        <Field.Name.First path="/firstName" width="medium" minLength={2} />\n        <Field.Name.Last path="/lastName" width="medium" required />\n        <FieldBlock width="large">\n          <Slider\n            min={1900}\n            max={new Date().getFullYear()}\n            step={1}\n            label="Birth year"\n            label_direction="vertical"\n            value={parseFloat(String(value))}\n            on_change={handleBirthYearChange}\n            on_drag_start={handleFocus}\n            on_drag_end={handleBlur}\n            status={hasError}\n            tooltip\n          />\n        </FieldBlock>\n      </Flex.Horizontal>\n    </FieldBlock>\n  )\n}\nconst data = {\n  firstName: \'John\',\n  birthYear: 2000,\n}\nrender(\n  <DataContext.Provider\n    defaultData={data}\n    onChange={(data) => console.log(\'onChange\', data)}\n  >\n    <MyComposedField label="My custom label" />\n  </DataContext.Provider>,\n)\n'}),h=()=>(0,d.jsx)(t.Z,{scope:{Value:l},children:'<Form.Card>\n  <Field.String\n    label="Text field"\n    value="Lorem Ipsum"\n    onChange={(value) => console.log(\'onChange\', value)}\n  />\n  <Field.Number\n    label="Number Field"\n    value={789}\n    onChange={(value) => console.log(\'onChange\', value)}\n  />\n  <Field.Boolean\n    label="Boolean Field"\n    value={true}\n    onChange={(value) => console.log(\'onChange\', value)}\n  />\n</Form.Card>\n'}),F=()=>(0,d.jsx)(t.Z,{scope:{Value:l},children:'<Form.Card>\n  <Field.String label="Fornavn" value="John" />\n  <Field.String label="Etternavn" value="Smith" />\n  <Field.NationalIdentityNumber value="20058512345" />\n  <Field.Email value="john@smith.email" />\n  <Field.PhoneNumber value="+47 98765432" />\n</Form.Card>\n'}),p=()=>(0,d.jsx)(t.Z,{scope:{Value:l},children:'<Flex.Stack>\n  <Form.MainHeading>Profile</Form.MainHeading>\n\n  <Form.Card>\n    <Form.SubHeading>Name</Form.SubHeading>\n\n    <Field.String label="Fornavn" value="John" />\n    <Field.String label="Etternavn" value="Smith" />\n  </Form.Card>\n\n  <Form.Card>\n    <Form.SubHeading>More information</Form.SubHeading>\n\n    <Field.NationalIdentityNumber value="20058512345" />\n    <Field.Email value="john@smith.email" />\n    <Field.PhoneNumber value="+47 98765432" />\n  </Form.Card>\n</Flex.Stack>\n'}),g=()=>(0,d.jsx)(t.Z,{scope:{Value:l},children:'<Form.Handler\n  defaultData={{\n    firstName: undefined,\n    lastName: \'Smith\',\n    advanced: false,\n    ssn: \'123\',\n    email: \'@smith.email\',\n    phone: \'+47 98765432\',\n  }}\n  onChange={(data) => console.log(\'onChange\', data)}\n  onPathChange={(path, value) => console.log(\'onPathChange\', path, value)}\n  onSubmit={(data) => console.log(\'onSubmit\', data)}\n>\n  <Flex.Stack>\n    <Form.MainHeading>Profile</Form.MainHeading>\n\n    <Form.Card>\n      <Form.SubHeading>Name</Form.SubHeading>\n\n      <Field.String path="/firstName" label="Fornavn" />\n      <Field.String path="/lastName" label="Etternavn" />\n    </Form.Card>\n\n    <Field.Boolean\n      path="/advanced"\n      variant="checkbox-button"\n      label="More fields"\n    />\n    <Form.Visibility pathTrue="/advanced">\n      <Flex.Stack>\n        <Form.Card>\n          <Form.SubHeading>More information</Form.SubHeading>\n\n          <Field.NationalIdentityNumber value="20058512345" />\n          <Field.Email value="john@smith.email" />\n          <Field.PhoneNumber value="+47 98765432" />\n        </Form.Card>\n      </Flex.Stack>\n    </Form.Visibility>\n  </Flex.Stack>\n</Form.Handler>\n'}),f=()=>(0,d.jsx)(t.Z,{scope:{Value:l},children:"<Form.Handler\n  defaultData={{\n    firstName: 'John',\n    lastName: 'Smith',\n    ssn: '20058512345',\n    email: 'john@smith.email',\n    phone: '+47 98765432',\n  }}\n  onChange={(data) => console.log('onChange', data)}\n  onPathChange={(path, value) => console.log('onPathChange', path, value)}\n  onSubmit={(data) => console.log('onSubmit', data)}\n>\n  <Form.MainHeading>Profile</Form.MainHeading>\n\n  <Form.Card>\n    <Field.String path=\"/firstName\" label=\"Fornavn\" />\n    <Field.String path=\"/lastName\" label=\"Etternavn\" />\n    <Field.NationalIdentityNumber path=\"/ssn\" />\n    <Field.Email path=\"/email\" />\n    <Field.PhoneNumber path=\"/phone\" />\n\n    <Form.ButtonRow>\n      <Form.SubmitButton />\n    </Form.ButtonRow>\n  </Form.Card>\n</Form.Handler>\n"}),C=()=>(0,d.jsx)(t.Z,{scope:{Value:l},children:"<Form.Handler\n  defaultData={{\n    firstName: undefined,\n    lastName: 'Smith',\n    ssn: '123',\n    email: '@smith.email',\n    phone: '+47 98765432',\n  }}\n  onChange={(data) => console.log('onChange', data)}\n  onPathChange={(path, value) => console.log('onPathChange', path, value)}\n  onSubmit={(data) => console.log('onSubmit', data)}\n>\n  <Form.MainHeading>Profile</Form.MainHeading>\n\n  <Form.Card>\n    <Field.String path=\"/firstName\" label=\"Fornavn\" required />\n    <Field.String path=\"/lastName\" label=\"Etternavn\" required />\n    <Field.NationalIdentityNumber path=\"/ssn\" validateInitially />\n    <Field.Email path=\"/email\" validateInitially />\n    <Field.PhoneNumber path=\"/phone\" validateInitially />\n  </Form.Card>\n</Form.Handler>\n"}),b=()=>(0,d.jsx)(t.Z,{noInline:!0,children:'function MyForm() {\n  // Routers like "react-router" are supported as well\n  Wizard.useQueryLocator(\'my-wizard\')\n  const { summaryTitle } = Form.useLocale().Step\n  return (\n    <Form.Handler\n      defaultData={{\n        firstName: undefined,\n        lastName: \'Smith\',\n        advanced: false,\n        ssn: \'123\',\n        email: \'@smith.email\',\n        phone: \'+47 98765432\',\n      }}\n      onChange={(data) => console.log(\'onChange\', data)}\n      onPathChange={(path, value) =>\n        console.log(\'onPathChange\', path, value)\n      }\n      onSubmit={(data) => console.log(\'onSubmit\', data)}\n    >\n      <Wizard.Container id="my-wizard" mode="loose">\n        <Wizard.Step title="Name">\n          <Form.MainHeading>Profile</Form.MainHeading>\n\n          <Form.Card>\n            <Form.SubHeading>Name</Form.SubHeading>\n\n            <Field.String path="/firstName" label="Fornavn" required />\n            <Field.String path="/lastName" label="Etternavn" required />\n          </Form.Card>\n\n          <Wizard.Buttons />\n        </Wizard.Step>\n\n        <Wizard.Step title="More information">\n          <Form.MainHeading>Profile</Form.MainHeading>\n\n          <Form.Card>\n            <Form.SubHeading>More information</Form.SubHeading>\n\n            <Field.NationalIdentityNumber path="/ssn" />\n            <Field.Email path="/email" />\n            <Field.PhoneNumber path="/phone" />\n          </Form.Card>\n\n          <Wizard.Buttons />\n        </Wizard.Step>\n\n        <Wizard.Step title={summaryTitle}>\n          <Form.MainHeading>Profile</Form.MainHeading>\n\n          <Form.Card>\n            <Value.SummaryList layout="grid">\n              <Value.String path="/firstName" label="Fornavn" />\n              <Value.String path="/lastName" label="Etternavn" />\n\n              <Value.NationalIdentityNumber path="/ssn" />\n              <Value.Email path="/email" />\n              <Value.PhoneNumber path="/phone" />\n            </Value.SummaryList>\n          </Form.Card>\n\n          <Form.ButtonRow>\n            <Wizard.Buttons />\n            <Form.SubmitButton />\n          </Form.ButtonRow>\n        </Wizard.Step>\n      </Wizard.Container>\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n'}),x=()=>(0,d.jsx)(t.Z,{noInline:!0,children:'const MyEditContainer = () => {\n  return (\n    <Form.Section.EditContainer variant="basic">\n      <Field.Name.First path="/firstName" />\n      <Field.Name.Last path="/lastName" />\n    </Form.Section.EditContainer>\n  )\n}\nconst MyViewContainer = () => {\n  return (\n    <Form.Section.ViewContainer variant="basic">\n      <Value.SummaryList>\n        <Value.Name.First path="/firstName" />\n        <Value.Name.Last path="/lastName" />\n      </Value.SummaryList>\n    </Form.Section.ViewContainer>\n  )\n}\nrender(\n  <Form.Handler\n    onSubmit={async (data) => console.log(\'onSubmit\', data)}\n    defaultData={{\n      nestedPath: {\n        firstName: \'Nora\',\n        lastName: undefined, // initiate error\n      },\n    }}\n  >\n    <Form.Card>\n      <Form.SubHeading>Your account</Form.SubHeading>\n      <Form.Section path="/nestedPath" required>\n        <MyEditContainer />\n        <MyViewContainer />\n      </Form.Section>\n    </Form.Card>\n    <Form.SubmitButton />\n  </Form.Handler>,\n)\n'}),y=()=>(0,d.jsx)(t.Z,{noInline:!0,children:'const MyEditItemForm = () => {\n  return (\n    <Field.Composition>\n      <Field.Name.First itemPath="/firstName" width="medium" />\n      <Field.Name.Last itemPath="/lastName" width="medium" required />\n    </Field.Composition>\n  )\n}\nconst MyEditItem = () => {\n  return (\n    <Iterate.EditContainer\n      title="Edit account holder {itemNo}"\n      titleWhenNew="New account holder {itemNo}"\n    >\n      <MyEditItemForm />\n    </Iterate.EditContainer>\n  )\n}\nconst MyViewItem = () => {\n  const item = Iterate.useItem()\n  console.log(\'index:\', item.index)\n  return (\n    <Iterate.ViewContainer title="Account holder {itemNo}">\n      <Value.SummaryList>\n        <Value.Name.First itemPath="/firstName" showEmpty />\n        <Value.Name.Last itemPath="/lastName" placeholder="-" />\n      </Value.SummaryList>\n    </Iterate.ViewContainer>\n  )\n}\nconst CreateNewEntry = () => {\n  return (\n    <Iterate.PushContainer\n      path="/accounts"\n      title="New account holder"\n      openButton={\n        <Iterate.PushContainer.OpenButton text="Add another account" />\n      }\n      showOpenButtonWhen={(list) => list.length > 0}\n    >\n      <MyEditItemForm />\n    </Iterate.PushContainer>\n  )\n}\nfunction MyForm() {\n  return (\n    <Form.Handler\n      data={{\n        accounts: [\n          {\n            firstName: \'Tony\',\n            lastName: undefined, // initiate error\n          },\n        ],\n      }}\n      onChange={(data) => console.log(\'DataContext/onChange\', data)}\n      onSubmit={async (data) => console.log(\'onSubmit\', data)}\n    >\n      <Flex.Vertical>\n        <Form.MainHeading>Accounts</Form.MainHeading>\n\n        <Form.Card gap={false}>\n          <Iterate.Array path="/accounts">\n            <MyViewItem />\n            <MyEditItem />\n          </Iterate.Array>\n\n          <CreateNewEntry />\n        </Form.Card>\n\n        <Form.SubmitButton variant="send" />\n      </Flex.Vertical>\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n'}),v=()=>(0,d.jsx)(t.Z,{hideCode:!0,noInline:!0,children:'const MyForm = () => {\n  const transformToUpper = (value) => {\n    return value?.toUpperCase()\n  }\n  const transformToLower = (value) => {\n    return value?.toLowerCase()\n  }\n  return (\n    <Form.Handler onChange={console.log}>\n      <Form.Card>\n        <Field.String\n          width="medium"\n          label="Input value"\n          placeholder="Type letters"\n          path="/myField"\n          transformIn={transformToUpper}\n          transformOut={transformToLower}\n        />\n\n        <Value.String label="Output value" path="/myField" />\n      </Form.Card>\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n'}),S=()=>(0,d.jsx)(t.Z,{hideCode:!0,noInline:!0,children:'const existingData = {\n  companyName: \'DNB\',\n}\nfunction MyForm() {\n  return (\n    <Form.Handler\n      defaultData={existingData}\n      onSubmit={async (data) => console.log(\'onSubmit\', data)}\n      required\n    >\n      <Form.MainHeading>Quick start</Form.MainHeading>\n\n      <Form.Card>\n        <Field.Name.Company path="/companyName" />\n\n        <Field.OrganizationNumber path="/companyOrganizationNumber" />\n\n        <Field.Selection\n          path="/postalAddressSelect"\n          label="Ã˜nsket sted for tilsendt post"\n          variant="radio"\n          required={false}\n        >\n          <Field.Option\n            value="companyAddress"\n            title="Samme som forretningsadresse"\n          />\n          <Field.Option value="other" title="Annet" />\n        </Field.Selection>\n\n        <Form.Visibility\n          visibleWhen={{\n            path: \'/postalAddressSelect\',\n            hasValue: \'other\',\n          }}\n          animate\n        >\n          <Field.String\n            path="/postalAddress"\n            label="Sted for tilsendt post"\n          />\n        </Form.Visibility>\n      </Form.Card>\n      <Form.SubmitButton variant="send" />\n    </Form.Handler>\n  )\n}\nrender(<MyForm />)\n'})},16620:function(n,e,a){a.r(e),a.d(e,{At:function(){return s},Consumer:function(){return m},Context:function(){return t.Z},Provider:function(){return o.Z},defaultContextState:function(){return t.E}});var t=a(21068),o=a(6436),r=a(2784),i=a(2394),l=a(52322);function d(n){const{path:e="/",iterate:a,children:o}=n,d=(0,r.useContext)(t.Z),{data:s,handlePathChange:m}=d,u=s&&i.e$(s,e)?i.U2(s,e):void 0,c=(0,r.useCallback)(((n,a)=>{m(`${e}${n}`,a)}),[m,e]);return a?Array.isArray(u)?(0,l.jsx)(l.Fragment,{children:u.map(((n,a)=>{const r=m?(n,t)=>{m(`${e}/${a}${n}`,t)}:void 0;return(0,l.jsx)(t.Z.Provider,{value:{...d,data:n,handlePathChange:r},children:o},`element${a}`)}))}):null:(0,l.jsx)(t.Z.Provider,{value:{...d,data:u,handlePathChange:c},children:o})}d._supportsSpacingProps=!0;var s=d;const m=t.Z.Consumer}}]);
//# sourceMappingURL=fa6f7e696c775fb38727426f59b1dd58f9993592-e8b9acc98c4b6307c9f8.js.map