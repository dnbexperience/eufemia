{"version":3,"file":"fcaa9932712adafddbbdcb9d678d8f14c5eb091e-f82b1dc57bf9d8bd1e33.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/DataContext/FieldBoundary/FieldBoundaryProvider.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/Array/Array.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/PushButton/PushButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/AnimatedContainer/ElementBlockContext.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/RemoveButton/RemoveButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/EditContainer/EditToolbarTools.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/AnimatedContainer/ElementBlock.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/Toolbar/Toolbar.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/EditContainer/EditContainer.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/ViewContainer/ViewToolbarTools.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/ViewContainer/ViewContainer.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/AnimatedContainer/AnimatedContainer.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/Count/Count.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/index.ts"],"sourcesContent":["import React, { useCallback, useContext, useRef } from 'react'\nimport FieldBoundaryContext, {\n  FieldBoundaryContextState,\n} from './FieldBoundaryContext'\nimport DataContext from '../Context'\nimport { Path } from '../../types'\n\nexport default function FieldBoundaryProvider({ children }) {\n  const { showAllErrors } = useContext(DataContext)\n\n  const errorsRef = useRef<Record<Path, boolean>>({})\n  const hasError = Object.keys(errorsRef.current || {}).length > 0\n  const hasErrorAndShowIt = showAllErrors && hasError\n\n  const setFieldError = useCallback((path: Path, error: Error) => {\n    if (error) {\n      errorsRef.current[path] = !!error\n    } else {\n      delete errorsRef.current?.[path]\n    }\n  }, [])\n\n  const context: FieldBoundaryContextState = {\n    hasError,\n    hasErrorAndShowIt,\n    errorsRef,\n    setFieldError,\n  }\n\n  return (\n    <FieldBoundaryContext.Provider value={context}>\n      {children}\n    </FieldBoundaryContext.Provider>\n  )\n}\n","import React, {\n  useMemo,\n  useRef,\n  useEffect,\n  useReducer,\n  createRef,\n  useContext,\n  Fragment,\n} from 'react'\nimport classnames from 'classnames'\nimport pointer from 'json-pointer'\nimport { useFieldProps } from '../../hooks'\nimport { makeUniqueId } from '../../../../shared/component-helper'\nimport { Flex } from '../../../../components'\nimport { pickSpacingProps } from '../../../../components/flex/utils'\nimport {\n  BasicProps as FlexContainerProps,\n  Props as FlexContainerAllProps,\n  pickFlexContainerProps,\n} from '../../../../components/flex/Container'\nimport IterateElementContext, {\n  IterateElementContextState,\n} from '../IterateElementContext'\nimport SummaryListContext from '../../Value/SummaryList/SummaryListContext'\nimport ValueBlockContext from '../../ValueBlock/ValueBlockContext'\nimport FieldBoundaryProvider from '../../DataContext/FieldBoundary/FieldBoundaryProvider'\n\nimport type { ContainerMode, ElementChild, Props, Value } from './types'\nimport type { Identifier, Path } from '../../types'\n\n/**\n * Deprecated, as it is supported by all major browsers and Node.js >=v18\n * So its a question of time, when we will remove this polyfill\n */\nimport structuredClone from '@ungap/structured-clone'\nimport useDataValue from '../../hooks/useDataValue'\n\nexport type * from './types'\n\nfunction ArrayComponent(props: Props) {\n  const [salt, forceUpdate] = useReducer(() => ({}), {})\n\n  const summaryListContext = useContext(SummaryListContext)\n  const valueBlockContext = useContext(ValueBlockContext)\n\n  const { getValue } = useDataValue()\n  const preparedProps = useMemo(() => {\n    const {\n      path,\n      countPath,\n      countPathLimit = Infinity,\n      countPathTransform,\n    } = props\n\n    if (countPath) {\n      const arrayValue = getValue(path)\n      let countValue = parseFloat(getValue(countPath))\n      if (!(countValue >= 0)) {\n        countValue = 0\n      }\n      if (countValue > countPathLimit) {\n        countValue = countPathLimit\n      }\n      if (arrayValue?.length !== countValue) {\n        const newValue = []\n        for (let i = 0, l = countValue; i < l; i++) {\n          const value = arrayValue?.[i]\n          newValue.push(countPathTransform?.({ value, index: i }))\n        }\n\n        return {\n          ...props,\n          value: newValue,\n        }\n      }\n    }\n\n    return props\n  }, [getValue, props])\n\n  const {\n    path,\n    value: arrayValue,\n    withoutFlex,\n    emptyValue,\n    placeholder,\n    handleChange,\n    onChange,\n    children,\n  } = useFieldProps<Value, Props>(preparedProps)\n\n  const idsRef = useRef<Array<Identifier>>([])\n  const isNewRef = useRef<Record<string, boolean>>({})\n  const modesRef = useRef<Record<Identifier, ContainerMode>>({})\n  const valueWhileClosingRef = useRef<Array<unknown>>()\n  const valueCountRef = useRef(arrayValue)\n  const containerRef = useRef<HTMLDivElement>()\n  const hadPushRef = useRef<boolean>()\n  const innerRefs = useRef<\n    Record<string, React.RefObject<HTMLDivElement>>\n  >({})\n\n  const omitFlex = withoutFlex ?? (summaryListContext || valueBlockContext)\n\n  useEffect(() => {\n    // Update inside the useEffect, to support React.StrictMode\n    valueCountRef.current = arrayValue || []\n  }, [arrayValue])\n\n  const elementData = useMemo(() => {\n    return ((valueWhileClosingRef.current || arrayValue) ?? []).map(\n      (value, index) => {\n        const id = idsRef.current[index] || makeUniqueId()\n\n        const hasNewItems =\n          arrayValue.length > valueCountRef.current?.length\n\n        if (!idsRef.current[index]) {\n          isNewRef.current[id] = hasNewItems\n          idsRef.current.push(id)\n        }\n\n        const isNew = isNewRef.current[id] || false\n        if (!modesRef.current[id]) {\n          modesRef.current[id] = isNew ? 'edit' : 'view'\n        }\n\n        return {\n          id,\n          path,\n          value,\n          index,\n          arrayValue,\n          containerRef,\n          isNew,\n          containerMode: modesRef.current[id],\n          switchContainerMode: (mode: ContainerMode) => {\n            modesRef.current[id] = mode\n            delete isNewRef.current?.[id]\n            forceUpdate()\n          },\n          handleChange: (path: Path, value: unknown) => {\n            const newArrayValue = structuredClone(arrayValue)\n\n            // Make sure we have a new object reference,\n            // else two new objects will be the same\n            newArrayValue[index] = { ...newArrayValue[index] }\n\n            pointer.set(newArrayValue, path, value)\n            handleChange(newArrayValue)\n          },\n          handlePush: (element: unknown) => {\n            hadPushRef.current = true\n            handleChange([...(arrayValue ?? []), element])\n          },\n          handleRemove: ({ keepItems = false } = {}) => {\n            if (keepItems) {\n              // Add a backup as the array value while animating\n              valueWhileClosingRef.current = arrayValue\n            }\n\n            const newArrayValue = structuredClone(arrayValue)\n            newArrayValue.splice(index, 1)\n            handleChange(newArrayValue)\n          },\n\n          // - Called after animation end\n          fulfillRemove: () => {\n            valueWhileClosingRef.current = null\n            delete modesRef.current?.[id]\n            delete isNewRef.current?.[id]\n            const findIndex = idsRef.current.indexOf(id)\n            idsRef.current.splice(findIndex, 1)\n            forceUpdate()\n          },\n\n          // - Called when cancel button press\n          restoreOriginalValue: (value: unknown) => {\n            const newArrayValue = structuredClone(arrayValue)\n            newArrayValue[index] = value\n            handleChange(newArrayValue)\n          },\n        } as IterateElementContextState\n      }\n    )\n\n    // In order to update \"valueWhileClosingRef\" we need to have \"salt\" in the deps array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [salt, arrayValue, path, handleChange])\n\n  // - Call the onChange callback when a new element is added without calling \"handlePush\"\n  useMemo(() => {\n    const last = elementData?.[elementData.length - 1]\n    if (last?.isNew && !hadPushRef.current) {\n      onChange?.(arrayValue)\n    } else {\n      hadPushRef.current = false\n    }\n  }, [arrayValue, elementData, onChange])\n\n  const flexProps: FlexContainerProps & {\n    innerRef: FlexContainerAllProps['innerRef']\n  } = {\n    className: classnames('dnb-forms-iterate', props?.className),\n    ...pickFlexContainerProps(props as FlexContainerProps),\n    ...pickSpacingProps(props),\n    innerRef: containerRef,\n  }\n\n  const WrapperElement = omitFlex ? Fragment : Flex.Stack\n\n  return (\n    <WrapperElement {...(omitFlex ? null : flexProps)}>\n      {arrayValue === emptyValue || props?.value?.length === 0\n        ? placeholder\n        : elementData.map((elementProps) => {\n            const { id, value, index } = elementProps\n            const elementRef = (innerRefs.current[id] =\n              innerRefs.current[id] || createRef<HTMLDivElement>())\n\n            const renderChildren = (elementChild: ElementChild) => {\n              return typeof elementChild === 'function'\n                ? elementChild(value, index)\n                : elementChild\n            }\n\n            const contextValue = {\n              ...elementProps,\n              elementRef,\n            }\n\n            const content = Array.isArray(children)\n              ? children.map((child) => renderChildren(child))\n              : renderChildren(children)\n\n            if (omitFlex) {\n              return (\n                <IterateElementContext.Provider\n                  key={`element-${id}`}\n                  value={contextValue}\n                >\n                  <FieldBoundaryProvider>{content}</FieldBoundaryProvider>\n                </IterateElementContext.Provider>\n              )\n            }\n\n            return (\n              <Flex.Item\n                className=\"dnb-forms-iterate__element\"\n                tabIndex={-1}\n                innerRef={elementRef}\n                key={`element-${id}`}\n              >\n                <IterateElementContext.Provider value={contextValue}>\n                  <FieldBoundaryProvider>{content}</FieldBoundaryProvider>\n                </IterateElementContext.Provider>\n              </Flex.Item>\n            )\n          })}\n    </WrapperElement>\n  )\n}\n\nArrayComponent._supportsSpacingProps = true\nexport default ArrayComponent\n","import React, { useCallback, useContext } from 'react'\nimport classnames from 'classnames'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/Button'\nimport IterateElementContext from '../IterateElementContext'\nimport { useFieldProps } from '../../hooks'\nimport {\n  DataValueReadWriteComponentProps,\n  omitDataValueReadWriteProps,\n} from '../../types'\nimport { add } from '../../../../icons'\n\nexport type Props = ButtonProps &\n  DataValueReadWriteComponentProps<unknown[]> & {\n    pushValue: unknown | ((value: unknown) => void)\n  }\n\nfunction PushButton(props: Props) {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { handlePush } = iterateElementContext ?? {}\n\n  const { pushValue, className, ...restProps } = props\n  const buttonProps = omitDataValueReadWriteProps(restProps)\n  const { value, handleChange, children } = useFieldProps(restProps)\n\n  if (value !== undefined && !Array.isArray(value)) {\n    throw new Error('PushButton received a non-array value')\n  }\n\n  const handleClick = useCallback(() => {\n    const newValue =\n      typeof pushValue === 'function' ? pushValue(value) : pushValue\n\n    if (handlePush) {\n      // Inside an Iterate element - make the change through the Iterate component\n      handlePush(newValue)\n      return // stop here\n    }\n\n    // If not inside an iterate, it could still manipulate a source data set through useFieldProps\n    handleChange([...(value ?? []), newValue])\n  }, [value, pushValue, handlePush, handleChange])\n\n  return (\n    <Button\n      className={classnames('dnb-forms-iterate-push-button', className)}\n      variant=\"secondary\"\n      icon={add}\n      icon_position=\"left\"\n      on_click={handleClick}\n      {...buttonProps}\n    >\n      {children}\n    </Button>\n  )\n}\n\nPushButton._supportsSpacingProps = true\nexport default PushButton\n","import { createContext } from 'react'\n\ntype ElementBlockContext = {\n  handleRemoveBlock?: () => void\n}\n\nconst ElementBlockContext = createContext<ElementBlockContext>(null)\n\nexport default ElementBlockContext\n","import React, { useCallback, useContext } from 'react'\nimport classnames from 'classnames'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/Button'\nimport IterateElementContext from '../IterateElementContext'\nimport { useFieldProps, useTranslation } from '../../hooks'\nimport ElementBlockContext from '../AnimatedContainer/ElementBlockContext'\nimport {\n  DataValueReadWriteComponentProps,\n  omitDataValueReadWriteProps,\n} from '../../types'\nimport { trash } from '../../../../icons'\n\nexport type Props = ButtonProps &\n  DataValueReadWriteComponentProps<unknown[]>\n\nfunction RemoveButton(props: Props) {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { handleRemove } = iterateElementContext ?? {}\n\n  if (!iterateElementContext) {\n    throw new Error('RemoveButton must be inside an Iterate.Array')\n  }\n\n  const { className, ...restProps } = props\n  const { children, text } = useFieldProps(restProps)\n  const buttonProps = omitDataValueReadWriteProps(restProps)\n  const translation = useTranslation().Iterate\n  const textContent = text || children || translation.remove\n\n  const elementBlockContext = useContext(ElementBlockContext)\n  const { handleRemoveBlock } = elementBlockContext ?? {}\n\n  const handleClick = useCallback(() => {\n    if (handleRemoveBlock) {\n      handleRemoveBlock()\n    } else {\n      handleRemove()\n    }\n  }, [handleRemove, handleRemoveBlock])\n\n  return (\n    <Button\n      className={classnames(\n        'dnb-forms-iterate-remove-element-button',\n        className\n      )}\n      variant={textContent ? 'tertiary' : 'secondary'}\n      icon={trash}\n      icon_position=\"left\"\n      on_click={handleClick}\n      {...buttonProps}\n    >\n      {textContent}\n    </Button>\n  )\n}\n\nRemoveButton._supportsSpacingProps = true\nexport default RemoveButton\n","import React, { useCallback, useContext, useEffect, useRef } from 'react'\nimport { Button, Flex } from '../../../../components'\nimport useTranslation from '../../hooks/useTranslation'\nimport IterateElementContext from '../IterateElementContext'\nimport { check, close } from '../../../../icons'\nimport RemoveButton from '../RemoveButton'\nimport { ContainerMode } from '../Array/types'\nimport FieldBoundaryContext from '../../DataContext/FieldBoundary/FieldBoundaryContext'\n\nexport default function EditToolbarTools() {\n  const {\n    restoreOriginalValue,\n    switchContainerMode,\n    containerMode,\n    arrayValue,\n    index,\n    isNew,\n  } = useContext(IterateElementContext) || {}\n  const { hasErrorAndShowIt } = useContext(FieldBoundaryContext) || {}\n\n  const translation = useTranslation().Iterate\n  const valueBackupRef = useRef<unknown>()\n  const wasNew = useWasNew({ isNew, containerMode })\n\n  useEffect(() => {\n    if (containerMode === 'edit' && !valueBackupRef.current) {\n      valueBackupRef.current = arrayValue?.[index]\n    }\n    if (containerMode === 'view') {\n      valueBackupRef.current = null\n    }\n  }, [arrayValue, containerMode, index])\n\n  const cancelHandler = useCallback(() => {\n    if (valueBackupRef.current) {\n      restoreOriginalValue?.(valueBackupRef.current)\n    }\n    switchContainerMode?.('view')\n  }, [restoreOriginalValue, switchContainerMode])\n  const doneHandler = useCallback(() => {\n    switchContainerMode?.('view')\n  }, [switchContainerMode])\n\n  return (\n    <Flex.Horizontal gap=\"large\">\n      <Button\n        variant=\"tertiary\"\n        icon={check}\n        icon_position=\"left\"\n        on_click={doneHandler}\n        disabled={hasErrorAndShowIt}\n      >\n        {translation.done}\n      </Button>\n\n      {wasNew ? (\n        <RemoveButton />\n      ) : (\n        <Button\n          variant=\"tertiary\"\n          icon={close}\n          icon_position=\"left\"\n          on_click={cancelHandler}\n        >\n          {translation.cancel}\n        </Button>\n      )}\n    </Flex.Horizontal>\n  )\n}\n\nexport function useWasNew({\n  isNew,\n  containerMode,\n}: {\n  isNew: boolean\n  containerMode: ContainerMode\n}) {\n  const wasNewRef = useRef<unknown>(isNew)\n\n  useEffect(() => {\n    if (containerMode === 'view') {\n      wasNewRef.current = false\n    }\n  }, [isNew, containerMode])\n\n  return wasNewRef.current\n}\n","import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useReducer,\n  useRef,\n} from 'react'\nimport classnames from 'classnames'\nimport { Flex, HeightAnimation } from '../../../../components'\nimport IterateElementContext, {\n  IterateElementContextState,\n} from '../IterateElementContext'\nimport ElementBlockContext from './ElementBlockContext'\nimport FieldBoundaryContext from '../../DataContext/FieldBoundary/FieldBoundaryContext'\nimport { Props as FlexContainerProps } from '../../../../components/flex/Container'\nimport { ContainerMode } from '../Array/types'\n\nexport type ElementSectionProps = {\n  /**\n   * Defines the variant of the ViewContainer or EditContainer. Can be `outline`.\n   * Defaults to `outline`.\n   */\n  variant?: 'outline' | 'basic'\n}\n\nexport type Props = {\n  mode: ContainerMode\n  open?: boolean | undefined\n  ariaLabel?: string\n  openDelay?: number\n} & ElementSectionProps\n\nfunction ElementBlock(props: Props & FlexContainerProps) {\n  const [, forceUpdate] = useReducer(() => ({}), {})\n\n  const contextRef = useRef<\n    IterateElementContextState & {\n      hasError?: boolean\n      hasErrorAndShowIt?: boolean\n    }\n  >()\n  contextRef.current = useContext(IterateElementContext) || {}\n\n  const { hasError, hasErrorAndShowIt } =\n    useContext(FieldBoundaryContext) || {}\n  contextRef.current.hasError = hasError\n  contextRef.current.hasErrorAndShowIt = hasErrorAndShowIt\n\n  // - Set the container mode to \"edit\" if we have an error\n  if (hasErrorAndShowIt) {\n    contextRef.current.containerMode = 'edit'\n  }\n\n  const { handleRemove, switchContainerMode, containerMode, isNew } =\n    contextRef.current\n\n  const {\n    mode,\n    open,\n    ariaLabel,\n    onAnimationEnd,\n    className,\n    children,\n    openDelay = 100,\n    variant = 'outline',\n    ...restProps\n  } = props\n\n  const openRef = useRef(open ?? (containerMode === mode && !isNew))\n  const isRemoving = useRef(false)\n\n  const setOpenState = useCallback((open: boolean) => {\n    openRef.current = open\n    forceUpdate()\n  }, [])\n\n  useEffect(() => {\n    if (!isRemoving.current) {\n      // - Set the open state, if it's controlled\n      if (typeof open !== 'undefined') {\n        setOpenState(open)\n      } else {\n        // - Open the block with animation, if it's in the right mode\n        if (openRef.current !== (containerMode === mode)) {\n          if (isNew) {\n            setTimeout(() => {\n              setOpenState(containerMode === mode)\n            }, openDelay) // in order to apply the animation\n          } else {\n            setOpenState(containerMode === mode)\n          }\n        }\n      }\n    }\n  }, [containerMode, isNew, mode, open, openDelay, setOpenState])\n\n  // - Remove the block with animation, if it's in the right mode\n  const handleAnimationEnd = useCallback(\n    (state) => {\n      // - Keep the block open if we have an error\n      if (contextRef.current.hasErrorAndShowIt) {\n        switchContainerMode('edit')\n      }\n\n      const preventFocusOnErrorOpening =\n        !contextRef.current.hasErrorAndShowIt\n      if (preventFocusOnErrorOpening) {\n        if (state === 'opened') {\n          contextRef.current?.elementRef?.current?.focus?.()\n        } else {\n          // Wait until the element is removed, then check if we can set focus\n          window.requestAnimationFrame(() => {\n            // try to focus on the second last element\n            try {\n              if (\n                // But not when we focus is already inside our element\n                !document.activeElement?.closest(\n                  '.dnb-forms-iterate__element'\n                )\n              ) {\n                const elements =\n                  contextRef.current?.containerRef.current.querySelectorAll<HTMLDivElement>(\n                    '.dnb-forms-iterate__element'\n                  )\n                elements[elements.length - 1].focus()\n              }\n            } catch (e) {\n              /**/\n            }\n          })\n        }\n      }\n\n      if (!openRef.current && isRemoving.current) {\n        isRemoving.current = false\n        contextRef.current?.fulfillRemove?.()\n      }\n\n      onAnimationEnd?.(state)\n    },\n    [onAnimationEnd, switchContainerMode]\n  )\n  const handleRemoveBlock = useCallback(() => {\n    isRemoving.current = true\n    handleRemove?.({ keepItems: true })\n    setOpenState(false)\n  }, [handleRemove, setOpenState])\n\n  return (\n    <ElementBlockContext.Provider value={{ handleRemoveBlock }}>\n      <HeightAnimation\n        className={classnames(\n          'dnb-forms-iterate-block',\n          variant && `dnb-forms-iterate-block--variant-${variant}`,\n          isNew && 'dnb-forms-iterate-block--new',\n          contextRef.current.hasErrorAndShowIt &&\n            'dnb-forms-iterate-block--error',\n          className\n        )}\n        open={openRef.current}\n        onAnimationEnd={handleAnimationEnd}\n        duration={450}\n        keepInDOM // Ensure fields get mounted so they will sync with the data context\n      >\n        <Flex.Stack\n          className=\"dnb-forms-iterate-block__inner\"\n          {...restProps}\n          element=\"section\"\n          aria-label={ariaLabel}\n        >\n          {children}\n        </Flex.Stack>\n      </HeightAnimation>\n    </ElementBlockContext.Provider>\n  )\n}\n\nElementBlock._supportsSpacingProps = true\nexport default ElementBlock\n","import React from 'react'\nimport classnames from 'classnames'\nimport { Hr } from '../../../../elements'\nimport { Flex, Space } from '../../../../components'\nimport { SpaceAllProps } from '../../../../components/Space'\n\nexport type Props = SpaceAllProps\n\nexport default function Toolbar(props: Props) {\n  const { children, className, ...rest } = props || {}\n\n  return (\n    <Space\n      top=\"medium\"\n      className={classnames('dnb-forms-iterate-toolbar', className)}\n      {...rest}\n    >\n      <Hr space={0} />\n\n      <Flex.Horizontal top=\"x-small\" gap=\"large\">\n        {children}\n      </Flex.Horizontal>\n    </Space>\n  )\n}\n\nToolbar._supportsSpacingProps = true\n","import React, { useContext, useEffect, useMemo, useRef } from 'react'\nimport classnames from 'classnames'\nimport { convertJsxToString } from '../../../../shared/component-helper'\nimport { Lead } from '../../../../elements'\nimport { Props as FlexContainerProps } from '../../../../components/flex/Container'\nimport IterateElementContext from '../IterateElementContext'\nimport EditToolbarTools from './EditToolbarTools'\nimport ElementBlock, {\n  ElementSectionProps,\n} from '../AnimatedContainer/ElementBlock'\nimport Toolbar from '../Toolbar'\n\nexport type Props = {\n  /**\n   * The title of the EditContainer.\n   */\n  title?: React.ReactNode\n\n  /**\n   * The title for a new item show within the EditContainer.\n   */\n  titleWhenNew?: React.ReactNode\n\n  /**\n   * If the EditContainer is open or not.\n   * Used internally.\n   */\n  open?: boolean\n\n  /**\n   * The toolbar to be shown in the EditContainer.\n   * Used internally.\n   */\n  toolbar?: React.ReactNode\n}\n\nexport type AllProps = Props & FlexContainerProps & ElementSectionProps\n\nexport default function EditContainer(props: AllProps) {\n  return (\n    <EditContainerWithoutToolbar\n      toolbar={\n        <Toolbar>\n          <EditToolbarTools />\n        </Toolbar>\n      }\n      {...props}\n    />\n  )\n}\n\nexport function EditContainerWithoutToolbar(\n  props: Props & FlexContainerProps & { toolbar?: React.ReactNode }\n) {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { containerMode, isNew } = iterateElementContext ?? {}\n\n  const {\n    children,\n    className,\n    title,\n    titleWhenNew,\n    toolbar,\n    ...restProps\n  } = props || {}\n\n  const wasNewRef = useRef<unknown>(isNew)\n\n  useEffect(() => {\n    if (containerMode === 'view') {\n      wasNewRef.current = false\n    }\n  }, [isNew, containerMode])\n\n  const blockTitle =\n    wasNewRef.current && titleWhenNew ? titleWhenNew : title\n  const ariaLabel = useMemo(\n    () => convertJsxToString(blockTitle),\n    [blockTitle]\n  )\n\n  return (\n    <ElementBlock\n      mode=\"edit\"\n      className={classnames('dnb-forms-iterate-edit-block', className)}\n      ariaLabel={ariaLabel}\n      {...restProps}\n    >\n      {blockTitle && <Lead size=\"basis\">{blockTitle}</Lead>}\n      {children}\n      {toolbar}\n    </ElementBlock>\n  )\n}\n\nEditContainer._supportsSpacingProps = true\nEditContainerWithoutToolbar._supportsSpacingProps = true\n","import React, { useCallback, useContext } from 'react'\nimport { Button, Flex } from '../../../../components'\nimport RemoveButton from '../RemoveButton'\nimport useTranslation from '../../hooks/useTranslation'\nimport IterateElementContext from '../IterateElementContext'\nimport { edit } from '../../../../icons'\n\nexport default function ViewToolbarTools() {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { switchContainerMode } = iterateElementContext ?? {}\n\n  const translation = useTranslation().Iterate\n\n  const editHandler = useCallback(() => {\n    switchContainerMode?.('edit')\n  }, [switchContainerMode])\n\n  return (\n    <Flex.Horizontal gap=\"large\">\n      <Button\n        variant=\"tertiary\"\n        icon={edit}\n        icon_position=\"left\"\n        on_click={editHandler}\n      >\n        {translation.edit}\n      </Button>\n\n      <RemoveButton text={translation.remove} />\n    </Flex.Horizontal>\n  )\n}\n","import React, { useMemo } from 'react'\nimport classnames from 'classnames'\nimport { convertJsxToString } from '../../../../shared/component-helper'\nimport { Flex } from '../../../../components'\nimport { Props as FlexContainerProps } from '../../../../components/flex/Container'\nimport { Lead } from '../../../../elements'\nimport ElementBlock, {\n  ElementSectionProps,\n} from '../AnimatedContainer/ElementBlock'\nimport Toolbar from '../Toolbar'\nimport ViewToolbarTools from './ViewToolbarTools'\n\nexport type Props = {\n  /**\n   * The title of the ViewContainer.\n   */\n  title?: React.ReactNode\n}\n\nexport type AllProps = Props & FlexContainerProps & ElementSectionProps\n\nfunction ViewContainer(props: AllProps) {\n  const { children, className, title, ...restProps } = props || {}\n  const ariaLabel = useMemo(() => convertJsxToString(title), [title])\n\n  return (\n    <ElementBlock\n      mode=\"view\"\n      ariaLabel={ariaLabel}\n      className={classnames('dnb-forms-iterate-view-block', className)}\n      {...restProps}\n    >\n      <Flex.Stack>\n        {title && <Lead size=\"basis\">{title}</Lead>}\n        {children}\n        <Toolbar>\n          <ViewToolbarTools />\n        </Toolbar>\n      </Flex.Stack>\n    </ElementBlock>\n  )\n}\n\nViewContainer._supportsSpacingProps = true\nexport default ViewContainer\n","import React, { useContext } from 'react'\nimport IterateElementContext from '../IterateElementContext'\nimport { EditContainerWithoutToolbar, AllProps } from '../EditContainer'\n\nfunction AnimatedContainer(props: AllProps) {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { isNew } = iterateElementContext ?? {}\n\n  return (\n    <EditContainerWithoutToolbar\n      open={!isNew ? true : undefined}\n      {...props}\n    />\n  )\n}\n\nAnimatedContainer._supportsSpacingProps = true\nexport default AnimatedContainer\n","import { useCallback } from 'react'\nimport pointer from 'json-pointer'\nimport { Identifier, Path } from '../../types'\nimport { useData, getData } from '../../Form'\n\nexport type Props = {\n  /**\n   * The path (JSON Pointer) to the array or object to count.\n   */\n  path: Path\n\n  /**\n   * A Form.Handler or DataContext `id` for when called outside of the context.\n   */\n  id?: Identifier\n\n  /**\n   * A filter function to filter the data before counting.\n   */\n  filter?: (item: unknown) => boolean\n}\n\nexport function Count(props: Props) {\n  const { data } = useData(props.id)\n  return countData(data, props)\n}\n\nfunction countData(data: unknown, { path, filter }: Props) {\n  if (pointer.has(data, path)) {\n    const value = pointer.get(data, path)\n    if (Array.isArray(value)) {\n      return filter ? value.filter(filter).length : value.length\n    } else if (typeof value === 'object' && value) {\n      return filter\n        ? Object.entries(value).filter(filter).length\n        : Object.keys(value).length\n    }\n  }\n\n  return NaN\n}\n\nexport function count(props: Props) {\n  const { data } = getData(props.id)\n  return countData(data, props)\n}\n\nexport function useCount(id: Identifier = undefined) {\n  const { data } = useData(id)\n\n  const count = useCallback(\n    (path: Props['path'], filter?: Props['filter']) => {\n      return countData(data, { path, filter })\n    },\n    [data]\n  )\n\n  return { count }\n}\n","import PushButton from './PushButton'\nimport RemoveButton from './RemoveButton'\n\nexport { default as Array } from './Array'\nexport { default as PushButton } from './PushButton'\nexport { default as RemoveButton } from './RemoveButton'\nexport { default as EditContainer } from './EditContainer'\nexport { default as ViewContainer } from './ViewContainer'\nexport { default as AnimatedContainer } from './AnimatedContainer'\nexport { default as Toolbar } from './Toolbar'\nexport { useCount, count, Count } from './Count'\nexport { default as IterateElementContext } from './IterateElementContext'\n\n/**\n * Deprecated and will be removed in v11\n *\n * @deprecated use \"PushButton\" instead\n */\nexport const ArrayPushButton = PushButton\n\n/**\n * Deprecated and will be removed in v11\n *\n * @deprecated use \"RemoveButton\" instead\n */\nexport const ArrayRemoveElementButton = RemoveButton\n"],"names":["FieldBoundaryProvider","_ref","children","showAllErrors","useContext","DataContext","errorsRef","useRef","hasError","Object","keys","current","length","hasErrorAndShowIt","setFieldError","useCallback","path","error","_errorsRef$current","context","_jsx","FieldBoundaryContext","Provider","value","ArrayComponent","props","_props$value","salt","forceUpdate","useReducer","summaryListContext","SummaryListContext","valueBlockContext","ValueBlockContext","getValue","useDataValue","preparedProps","useMemo","countPath","countPathLimit","Infinity","countPathTransform","arrayValue","countValue","parseFloat","newValue","i","l","push","index","withoutFlex","emptyValue","placeholder","handleChange","onChange","useFieldProps","idsRef","isNewRef","modesRef","valueWhileClosingRef","valueCountRef","containerRef","hadPushRef","innerRefs","omitFlex","useEffect","elementData","map","_valueCountRef$curren","id","makeUniqueId","hasNewItems","isNew","containerMode","switchContainerMode","mode","_isNewRef$current","newArrayValue","structuredClone","pointer","handlePush","element","concat","_toConsumableArray","handleRemove","_temp","keepItems","splice","fulfillRemove","_modesRef$current","_isNewRef$current2","findIndex","indexOf","restoreOriginalValue","last","flexProps","className","classnames","pickFlexContainerProps","pickSpacingProps","innerRef","WrapperElement","Fragment","Flex","elementProps","elementRef","createRef","renderChildren","elementChild","contextValue","content","Array","isArray","child","IterateElementContext","tabIndex","_supportsSpacingProps","PushButton","iterateElementContext","pushValue","restProps","buttonProps","omitDataValueReadWriteProps","undefined","Error","handleClick","Button","variant","icon","add","icon_position","on_click","createContext","RemoveButton","text","translation","useTranslation","Iterate","textContent","remove","elementBlockContext","ElementBlockContext","handleRemoveBlock","trash","EditToolbarTools","valueBackupRef","wasNew","wasNewRef","useWasNew","cancelHandler","doneHandler","_jsxs","gap","check","disabled","done","close","cancel","ElementBlock","contextRef","open","ariaLabel","onAnimationEnd","openDelay","openRef","isRemoving","setOpenState","setTimeout","handleAnimationEnd","state","_contextRef$current","_contextRef$current$e","_contextRef$current$e2","_contextRef$current$e3","_contextRef$current3","_contextRef$current3$","focus","call","window","requestAnimationFrame","_document$activeEleme","document","activeElement","closest","_contextRef$current2","elements","querySelectorAll","e","HeightAnimation","duration","keepInDOM","Toolbar","rest","Space","top","Hr","space","EditContainer","EditContainerWithoutToolbar","toolbar","title","titleWhenNew","blockTitle","convertJsxToString","Lead","size","ViewToolbarTools","editHandler","edit","ViewContainer","AnimatedContainer","Count","data","useData","countData","filter","entries","NaN","count","getData","useCount","ArrayPushButton","ArrayRemoveElementButton"],"sourceRoot":""}