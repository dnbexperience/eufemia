{"version":3,"file":"fcaa9932712adafddbbdcb9d678d8f14c5eb091e-fa1d29ae221e7d30daae.js","mappings":"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","sources":["webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/PushButton/PushButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/AnimatedContainer/ElementBlockContext.ts","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/RemoveButton/RemoveButton.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/DataContext/FieldBoundary/FieldBoundaryProvider.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/Array/Array.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/EditContainer/EditToolbarTools.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/AnimatedContainer/ElementBlock.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/Toolbar/Toolbar.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/EditContainer/EditContainer.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/ViewContainer/ViewToolbarTools.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/ViewContainer/ViewContainer.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/AnimatedContainer/AnimatedContainer.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/Count/Count.tsx","webpack://dnb-design-system-portal/../dnb-eufemia/src/extensions/forms/Iterate/index.ts"],"sourcesContent":["import React, { useCallback, useContext } from 'react'\nimport classnames from 'classnames'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/Button'\nimport IterateElementContext from '../IterateElementContext'\nimport { useFieldProps } from '../../hooks'\nimport {\n  DataValueReadWriteComponentProps,\n  omitDataValueReadWriteProps,\n} from '../../types'\nimport { add } from '../../../../icons'\n\nexport type Props = ButtonProps &\n  DataValueReadWriteComponentProps<unknown[]> & {\n    pushValue: unknown | ((value: unknown) => void)\n  }\n\nfunction PushButton(props: Props) {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { handlePush } = iterateElementContext ?? {}\n\n  const { pushValue, className, ...restProps } = props\n  const buttonProps = omitDataValueReadWriteProps(restProps)\n  const { value, handleChange, children } = useFieldProps(restProps)\n\n  if (value !== undefined && !Array.isArray(value)) {\n    throw new Error('PushButton received a non-array value.')\n  }\n\n  const handleClick = useCallback(() => {\n    const newValue =\n      typeof pushValue === 'function' ? pushValue(value) : pushValue\n\n    if (handlePush) {\n      // Inside an Iterate element - make the change through the Iterate component\n      handlePush(newValue)\n      return // stop here\n    }\n\n    // If not inside an iterate, it could still manipulate a source data set through useFieldProps\n    handleChange([...(value ?? []), newValue])\n  }, [value, pushValue, handlePush, handleChange])\n\n  return (\n    <Button\n      className={classnames('dnb-form-iterate-push-button', className)}\n      variant=\"secondary\"\n      icon={add}\n      icon_position=\"left\"\n      on_click={handleClick}\n      {...buttonProps}\n    >\n      {children}\n    </Button>\n  )\n}\n\nPushButton._supportsSpacingProps = true\nexport default PushButton\n","import { createContext } from 'react'\n\ntype ElementBlockContext = {\n  handleRemoveBlock?: () => void\n}\n\nconst ElementBlockContext = createContext<ElementBlockContext>(null)\n\nexport default ElementBlockContext\n","import React, { useCallback, useContext } from 'react'\nimport classnames from 'classnames'\nimport { Button } from '../../../../components'\nimport { ButtonProps } from '../../../../components/Button'\nimport IterateElementContext from '../IterateElementContext'\nimport { useFieldProps, useTranslation } from '../../hooks'\nimport ElementBlockContext from '../AnimatedContainer/ElementBlockContext'\nimport {\n  DataValueReadWriteComponentProps,\n  omitDataValueReadWriteProps,\n} from '../../types'\nimport { trash } from '../../../../icons'\n\nexport type Props = ButtonProps &\n  DataValueReadWriteComponentProps<unknown[]>\n\nfunction RemoveButton(props: Props) {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { handleRemove } = iterateElementContext ?? {}\n\n  if (!iterateElementContext) {\n    throw new Error(\n      'RemoveButton must be inside an Iterate.Array component.'\n    )\n  }\n\n  const { className, ...restProps } = props\n  const { children, text } = useFieldProps(restProps)\n  const buttonProps = omitDataValueReadWriteProps(restProps)\n  const translation = useTranslation().Iterate\n  const textContent = text || children || translation.remove\n\n  const elementBlockContext = useContext(ElementBlockContext)\n  const { handleRemoveBlock } = elementBlockContext ?? {}\n\n  const handleClick = useCallback(() => {\n    if (handleRemoveBlock) {\n      handleRemoveBlock()\n    } else {\n      handleRemove()\n    }\n  }, [handleRemove, handleRemoveBlock])\n\n  return (\n    <Button\n      className={classnames(\n        'dnb-form-iterate-remove-element-button',\n        className\n      )}\n      variant={textContent ? 'tertiary' : 'secondary'}\n      icon={trash}\n      icon_position=\"left\"\n      on_click={handleClick}\n      {...buttonProps}\n    >\n      {textContent}\n    </Button>\n  )\n}\n\nRemoveButton._supportsSpacingProps = true\nexport default RemoveButton\n","import React, { useCallback, useContext, useRef } from 'react'\nimport FieldBoundaryContext, {\n  FieldBoundaryContextState,\n} from './FieldBoundaryContext'\nimport DataContext from '../Context'\nimport { Path } from '../../types'\n\nexport default function FieldBoundaryProvider({ children }) {\n  const { showAllErrors } = useContext(DataContext)\n\n  const errorsRef = useRef<Record<Path, boolean>>({})\n  const hasError = Object.keys(errorsRef.current || {}).length > 0\n  const hasErrorAndShowIt = showAllErrors && hasError\n\n  const setFieldError = useCallback((path: Path, error: Error) => {\n    if (error) {\n      errorsRef.current[path] = !!error\n    } else {\n      delete errorsRef.current?.[path]\n    }\n  }, [])\n\n  const context: FieldBoundaryContextState = {\n    hasError,\n    hasErrorAndShowIt,\n    errorsRef,\n    setFieldError,\n  }\n\n  return (\n    <FieldBoundaryContext.Provider value={context}>\n      {children}\n    </FieldBoundaryContext.Provider>\n  )\n}\n","import React, {\n  useMemo,\n  useRef,\n  useEffect,\n  useReducer,\n  createRef,\n  useContext,\n  Fragment,\n} from 'react'\nimport classnames from 'classnames'\nimport pointer from 'json-pointer'\nimport { useFieldProps } from '../../hooks'\nimport { makeUniqueId } from '../../../../shared/component-helper'\nimport { Flex } from '../../../../components'\nimport { pickSpacingProps } from '../../../../components/flex/utils'\nimport {\n  BasicProps as FlexContainerProps,\n  Props as FlexContainerAllProps,\n  pickFlexContainerProps,\n} from '../../../../components/flex/Container'\nimport IterateElementContext, {\n  IterateElementContextState,\n} from '../IterateElementContext'\nimport SummaryListContext from '../../Value/SummaryList/SummaryListContext'\nimport ValueBlockContext from '../../ValueBlock/ValueBlockContext'\nimport FieldBoundaryProvider from '../../DataContext/FieldBoundary/FieldBoundaryProvider'\n\nimport type { ContainerMode, ElementChild, Props, Value } from './types'\nimport type { Identifier, Path } from '../../types'\n\n/**\n * Deprecated, as it is supported by all major browsers and Node.js >=v18\n * So its a question of time, when we will remove this polyfill\n */\nimport structuredClone from '@ungap/structured-clone'\n\nexport type * from './types'\n\nfunction ArrayComponent(props: Props) {\n  const [salt, forceUpdate] = useReducer(() => ({}), {})\n\n  const summaryListContext = useContext(SummaryListContext)\n  const valueBlockContext = useContext(ValueBlockContext)\n\n  const {\n    path,\n    value: arrayValue,\n    withoutFlex,\n    emptyValue,\n    placeholder,\n    handleChange,\n    onChange,\n    children,\n  } = useFieldProps<Value, Props>(props)\n\n  const idsRef = useRef<Array<Identifier>>([])\n  const isNewRef = useRef<Record<string, boolean>>({})\n  const modesRef = useRef<Record<Identifier, ContainerMode>>({})\n  const valueWhileClosingRef = useRef<Array<unknown>>()\n  const valueCountRef = useRef(arrayValue)\n  const containerRef = useRef<HTMLDivElement>()\n  const hadPushRef = useRef<boolean>()\n  const innerRefs = useRef<\n    Record<string, React.RefObject<HTMLDivElement>>\n  >({})\n\n  const omitFlex = withoutFlex ?? (summaryListContext || valueBlockContext)\n\n  useEffect(() => {\n    // Update inside the useEffect, to support React.StrictMode\n    valueCountRef.current = arrayValue || []\n  }, [arrayValue])\n\n  const elementData = useMemo(() => {\n    return ((valueWhileClosingRef.current || arrayValue) ?? []).map(\n      (value, index) => {\n        const id = idsRef.current[index] || makeUniqueId()\n\n        const hasNewItems =\n          arrayValue.length > valueCountRef.current?.length\n\n        if (!idsRef.current[index]) {\n          isNewRef.current[id] = hasNewItems\n          idsRef.current.push(id)\n        }\n\n        const isNew = isNewRef.current[id] || false\n        if (!modesRef.current[id]) {\n          modesRef.current[id] = isNew ? 'edit' : 'view'\n        }\n\n        return {\n          id,\n          path,\n          value,\n          index,\n          arrayValue,\n          containerRef,\n          isNew,\n          containerMode: modesRef.current[id],\n          switchContainerMode: (mode: ContainerMode) => {\n            modesRef.current[id] = mode\n            forceUpdate()\n          },\n          handleChange: (path: Path, value: unknown) => {\n            const newArrayValue = structuredClone(arrayValue)\n\n            // Make sure we have a new object reference,\n            // else two new objects will be the same\n            newArrayValue[index] = { ...newArrayValue[index] }\n\n            pointer.set(newArrayValue, path, value)\n            handleChange(newArrayValue)\n          },\n          handlePush: (element: unknown) => {\n            hadPushRef.current = true\n            handleChange([...(arrayValue ?? []), element])\n          },\n          handleRemove: ({ keepItems = false } = {}) => {\n            if (keepItems) {\n              // Add a backup as the array value while animating\n              valueWhileClosingRef.current = arrayValue\n            }\n\n            const newArrayValue = structuredClone(arrayValue)\n            newArrayValue.splice(index, 1)\n            handleChange(newArrayValue)\n          },\n\n          // - Called after animation end\n          fulfillRemove: () => {\n            valueWhileClosingRef.current = null\n            delete modesRef.current?.[id]\n            delete isNewRef.current?.[id]\n            const findIndex = idsRef.current.indexOf(id)\n            idsRef.current.splice(findIndex, 1)\n            forceUpdate()\n          },\n\n          // - Called when cancel button press\n          restoreOriginalValue: (value: unknown) => {\n            const newArrayValue = structuredClone(arrayValue)\n            newArrayValue[index] = value\n            handleChange(newArrayValue)\n          },\n        } as IterateElementContextState\n      }\n    )\n\n    // In order to update \"valueWhileClosingRef\" we need to have \"salt\" in the deps array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [salt, arrayValue, path, handleChange])\n\n  // - Call the onChange callback when a new element is added without calling \"handlePush\"\n  useMemo(() => {\n    const last = elementData?.[elementData.length - 1]\n    if (last?.isNew && !hadPushRef.current) {\n      onChange?.(arrayValue)\n    } else {\n      hadPushRef.current = false\n    }\n  }, [arrayValue, elementData, onChange])\n\n  const flexProps: FlexContainerProps & {\n    innerRef: FlexContainerAllProps['innerRef']\n  } = {\n    className: classnames('dnb-form-iterate', props?.className),\n    ...pickFlexContainerProps(props as FlexContainerProps),\n    ...pickSpacingProps(props),\n    innerRef: containerRef,\n  }\n\n  const WrapperElement = omitFlex ? Fragment : Flex.Stack\n\n  return (\n    <WrapperElement {...(omitFlex ? null : flexProps)}>\n      {arrayValue === emptyValue || props?.value?.length === 0\n        ? placeholder\n        : elementData.map((elementProps) => {\n            const { id, value, index } = elementProps\n            const elementRef = (innerRefs.current[id] =\n              innerRefs.current[id] || createRef<HTMLDivElement>())\n\n            const renderChildren = (elementChild: ElementChild) => {\n              return typeof elementChild === 'function'\n                ? elementChild(value, index)\n                : elementChild\n            }\n\n            const contextValue = {\n              ...elementProps,\n              elementRef,\n            }\n\n            const content = Array.isArray(children)\n              ? children.map((child) => renderChildren(child))\n              : renderChildren(children)\n\n            if (omitFlex) {\n              return (\n                <IterateElementContext.Provider\n                  key={`element-${id}`}\n                  value={contextValue}\n                >\n                  <FieldBoundaryProvider>{content}</FieldBoundaryProvider>\n                </IterateElementContext.Provider>\n              )\n            }\n\n            return (\n              <Flex.Item\n                className=\"dnb-form-iterate__element\"\n                tabIndex={-1}\n                innerRef={elementRef}\n                key={`element-${id}`}\n              >\n                <IterateElementContext.Provider value={contextValue}>\n                  <FieldBoundaryProvider>{content}</FieldBoundaryProvider>\n                </IterateElementContext.Provider>\n              </Flex.Item>\n            )\n          })}\n    </WrapperElement>\n  )\n}\n\nArrayComponent._supportsSpacingProps = true\nexport default ArrayComponent\n","import React, { useCallback, useContext, useEffect, useRef } from 'react'\nimport { Button, Flex } from '../../../../components'\nimport useTranslation from '../../hooks/useTranslation'\nimport IterateElementContext from '../IterateElementContext'\nimport { check, close } from '../../../../icons'\nimport RemoveButton from '../RemoveButton'\nimport { ContainerMode } from '../Array/types'\n\nexport default function EditToolbarTools() {\n  const iterateElementContext = useContext(IterateElementContext)\n  const {\n    restoreOriginalValue,\n    switchContainerMode,\n    containerMode,\n    arrayValue,\n    index,\n    isNew,\n  } = iterateElementContext ?? {}\n\n  const translation = useTranslation().Iterate\n  const valueBackupRef = useRef<unknown>()\n  const wasNew = useWasNew({ isNew, containerMode })\n\n  useEffect(() => {\n    if (containerMode === 'edit' && !valueBackupRef.current) {\n      valueBackupRef.current = arrayValue?.[index]\n    }\n    if (containerMode === 'view') {\n      valueBackupRef.current = null\n    }\n  }, [arrayValue, containerMode, index])\n\n  const cancelHandler = useCallback(() => {\n    if (valueBackupRef.current) {\n      restoreOriginalValue?.(valueBackupRef.current)\n    }\n    switchContainerMode?.('view')\n  }, [restoreOriginalValue, switchContainerMode])\n  const doneHandler = useCallback(() => {\n    switchContainerMode?.('view')\n  }, [switchContainerMode])\n\n  return (\n    <Flex.Horizontal spacing=\"large\">\n      <Button\n        variant=\"tertiary\"\n        icon={check}\n        icon_position=\"left\"\n        on_click={doneHandler}\n      >\n        {translation.done}\n      </Button>\n\n      {wasNew ? (\n        <RemoveButton />\n      ) : (\n        <Button\n          variant=\"tertiary\"\n          icon={close}\n          icon_position=\"left\"\n          on_click={cancelHandler}\n        >\n          {translation.cancel}\n        </Button>\n      )}\n    </Flex.Horizontal>\n  )\n}\n\nexport function useWasNew({\n  isNew,\n  containerMode,\n}: {\n  isNew: boolean\n  containerMode: ContainerMode\n}) {\n  const wasNewRef = useRef<unknown>(isNew)\n\n  useEffect(() => {\n    if (containerMode === 'view') {\n      wasNewRef.current = false\n    }\n  }, [isNew, containerMode])\n\n  return wasNewRef.current\n}\n","import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useReducer,\n  useRef,\n} from 'react'\nimport classnames from 'classnames'\nimport { Flex, HeightAnimation } from '../../../../components'\nimport IterateElementContext, {\n  IterateElementContextState,\n} from '../IterateElementContext'\nimport ElementBlockContext from './ElementBlockContext'\nimport FieldBoundaryContext from '../../DataContext/FieldBoundary/FieldBoundaryContext'\nimport { Props as FlexContainerProps } from '../../../../components/flex/Container'\nimport { ContainerMode } from '../Array/types'\n\nexport type Props = {\n  mode: ContainerMode\n  open?: boolean | undefined\n  ariaLabel?: string\n  openDelay?: number\n}\n\nfunction ElementBlock(props: Props & FlexContainerProps) {\n  const [, forceUpdate] = useReducer(() => ({}), {})\n\n  const contextRef = useRef<\n    IterateElementContextState & {\n      hasError?: boolean\n      hasErrorAndShowIt?: boolean\n    }\n  >()\n  contextRef.current = useContext(IterateElementContext) || {}\n\n  const { hasError, hasErrorAndShowIt } =\n    useContext(FieldBoundaryContext) || {}\n  contextRef.current.hasError = hasError\n  contextRef.current.hasErrorAndShowIt = hasErrorAndShowIt\n  if (hasErrorAndShowIt) {\n    contextRef.current.containerMode = 'edit'\n  }\n\n  const { handleRemove, switchContainerMode, containerMode, isNew } =\n    contextRef.current\n\n  const {\n    mode,\n    open,\n    ariaLabel,\n    onAnimationEnd,\n    className,\n    children,\n    openDelay = 100,\n    ...restProps\n  } = props\n\n  const openRef = useRef(open ?? (containerMode === mode && !isNew))\n  const isRemoving = useRef(false)\n\n  const setOpenState = useCallback((open: boolean) => {\n    openRef.current = open\n    forceUpdate()\n  }, [])\n\n  useEffect(() => {\n    if (!isRemoving.current) {\n      // - Set the open state, if it's controlled\n      if (typeof open !== 'undefined') {\n        setOpenState(open)\n      } else {\n        // - Open the block with animation, if it's in the right mode\n        if (openRef.current !== (containerMode === mode)) {\n          if (isNew) {\n            setTimeout(() => {\n              setOpenState(containerMode === mode)\n            }, openDelay) // in order to apply the animation\n          } else {\n            setOpenState(containerMode === mode)\n          }\n        }\n      }\n    }\n  }, [containerMode, isNew, mode, open, openDelay, setOpenState])\n\n  // - Remove the block with animation, if it's in the right mode\n  const handleAnimationEnd = useCallback(\n    (state) => {\n      if (contextRef.current.hasErrorAndShowIt) {\n        switchContainerMode('edit')\n      }\n\n      const preventFocusOnErrorOpening = !contextRef.current.hasError\n      if (preventFocusOnErrorOpening) {\n        if (state === 'opened') {\n          contextRef.current?.elementRef?.current?.focus?.()\n        } else {\n          // Wait until the element is removed, then check if we can set focus\n          window.requestAnimationFrame(() => {\n            // try to focus on the second last element\n            try {\n              if (\n                // But not when we focus is already inside our element\n                !document.activeElement?.closest(\n                  '.dnb-form-iterate__element'\n                )\n              ) {\n                const elements =\n                  contextRef.current?.containerRef.current.querySelectorAll<HTMLDivElement>(\n                    '.dnb-form-iterate__element'\n                  )\n                elements[elements.length - 1].focus()\n              }\n            } catch (e) {\n              /**/\n            }\n          })\n        }\n      }\n\n      if (!openRef.current && isRemoving.current) {\n        isRemoving.current = false\n        contextRef.current?.fulfillRemove?.()\n      }\n\n      onAnimationEnd?.(state)\n    },\n    [onAnimationEnd, switchContainerMode]\n  )\n  const handleRemoveBlock = useCallback(() => {\n    isRemoving.current = true\n    handleRemove?.({ keepItems: true })\n    setOpenState(false)\n  }, [handleRemove, setOpenState])\n\n  return (\n    <ElementBlockContext.Provider value={{ handleRemoveBlock }}>\n      <HeightAnimation\n        className={classnames(\n          'dnb-form-iterate-block',\n          isNew && 'dnb-form-iterate-block--new',\n          contextRef.current.hasError && 'dnb-form-iterate-block--error',\n          className\n        )}\n        open={openRef.current}\n        onAnimationEnd={handleAnimationEnd}\n        duration={450}\n        keepInDOM // Ensure fields get mounted so they will sync with the data context\n      >\n        <Flex.Stack\n          className=\"dnb-form-iterate-block__inner\"\n          {...restProps}\n          element=\"section\"\n          aria-label={ariaLabel}\n        >\n          {children}\n        </Flex.Stack>\n      </HeightAnimation>\n    </ElementBlockContext.Provider>\n  )\n}\n\nElementBlock._supportsSpacingProps = true\nexport default ElementBlock\n","import React from 'react'\nimport classnames from 'classnames'\nimport { Hr } from '../../../../elements'\nimport { Flex, Space } from '../../../../components'\nimport { SpaceAllProps } from '../../../../components/Space'\n\nexport type Props = SpaceAllProps\n\nexport default function Toolbar(props: Props) {\n  const { children, className, ...rest } = props || {}\n\n  return (\n    <Space\n      top=\"medium\"\n      className={classnames('dnb-form-iterate-toolbar', className)}\n      {...rest}\n    >\n      <Hr space={0} />\n\n      <Flex.Horizontal top=\"x-small\" spacing=\"large\">\n        {children}\n      </Flex.Horizontal>\n    </Space>\n  )\n}\n\nToolbar._supportsSpacingProps = true\n","import React, { useContext, useEffect, useMemo, useRef } from 'react'\nimport classnames from 'classnames'\nimport { convertJsxToString } from '../../../../shared/component-helper'\nimport { Lead } from '../../../../elements'\nimport { Props as FlexContainerProps } from '../../../../components/flex/Container'\nimport IterateElementContext from '../IterateElementContext'\nimport EditToolbarTools from './EditToolbarTools'\nimport ElementBlock from '../AnimatedContainer/ElementBlock'\nimport Toolbar from '../Toolbar'\n\nexport type Props = {\n  /**\n   * The title of the EditContainer.\n   */\n  title?: React.ReactNode\n\n  /**\n   * The title for a new item show within the EditContainer.\n   */\n  titleWhenNew?: React.ReactNode\n\n  /**\n   * If the EditContainer is open or not.\n   * Used internally.\n   */\n  open?: boolean\n\n  /**\n   * The toolbar to be shown in the EditContainer.\n   * Used internally.\n   */\n  toolbar?: React.ReactNode\n}\n\nexport type AllProps = Props & FlexContainerProps\n\nexport default function EditContainer(props: AllProps) {\n  return (\n    <EditContainerWithoutToolbar\n      toolbar={\n        <Toolbar>\n          <EditToolbarTools />\n        </Toolbar>\n      }\n      {...props}\n    />\n  )\n}\n\nexport function EditContainerWithoutToolbar(\n  props: Props & FlexContainerProps & { toolbar?: React.ReactNode }\n) {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { containerMode, isNew } = iterateElementContext ?? {}\n\n  const {\n    children,\n    className,\n    title,\n    titleWhenNew,\n    toolbar,\n    ...restProps\n  } = props || {}\n\n  const wasNewRef = useRef<unknown>(isNew)\n\n  useEffect(() => {\n    if (containerMode === 'view') {\n      wasNewRef.current = false\n    }\n  }, [isNew, containerMode])\n\n  const blockTitle =\n    wasNewRef.current && titleWhenNew ? titleWhenNew : title\n  const ariaLabel = useMemo(\n    () => convertJsxToString(blockTitle),\n    [blockTitle]\n  )\n\n  return (\n    <ElementBlock\n      mode=\"edit\"\n      className={classnames('dnb-form-iterate-edit-block', className)}\n      ariaLabel={ariaLabel}\n      {...restProps}\n    >\n      {blockTitle && <Lead size=\"basis\">{blockTitle}</Lead>}\n      {children}\n      {toolbar}\n    </ElementBlock>\n  )\n}\n\nEditContainer._supportsSpacingProps = true\nEditContainerWithoutToolbar._supportsSpacingProps = true\n","import React, { useCallback, useContext } from 'react'\nimport { Button, Flex } from '../../../../components'\nimport RemoveButton from '../RemoveButton'\nimport useTranslation from '../../hooks/useTranslation'\nimport IterateElementContext from '../IterateElementContext'\nimport { edit } from '../../../../icons'\n\nexport default function ViewToolbarTools() {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { switchContainerMode } = iterateElementContext ?? {}\n\n  const translation = useTranslation().Iterate\n\n  const editHandler = useCallback(() => {\n    switchContainerMode?.('edit')\n  }, [switchContainerMode])\n\n  return (\n    <Flex.Horizontal spacing=\"large\">\n      <Button\n        variant=\"tertiary\"\n        icon={edit}\n        icon_position=\"left\"\n        on_click={editHandler}\n      >\n        {translation.edit}\n      </Button>\n\n      <RemoveButton text={translation.remove} />\n    </Flex.Horizontal>\n  )\n}\n","import React, { useMemo } from 'react'\nimport classnames from 'classnames'\nimport { convertJsxToString } from '../../../../shared/component-helper'\nimport { Flex } from '../../../../components'\nimport { Props as FlexContainerProps } from '../../../../components/flex/Container'\nimport { Lead } from '../../../../elements'\nimport ElementBlock from '../AnimatedContainer/ElementBlock'\nimport Toolbar from '../Toolbar'\nimport ViewToolbarTools from './ViewToolbarTools'\n\nexport type Props = {\n  /**\n   * The title of the ViewContainer.\n   */\n  title?: React.ReactNode\n}\n\nexport type AllProps = Props & FlexContainerProps\n\nfunction ViewContainer(props: AllProps) {\n  const { children, className, title, ...restProps } = props || {}\n  const ariaLabel = useMemo(() => convertJsxToString(title), [title])\n\n  return (\n    <ElementBlock\n      mode=\"view\"\n      ariaLabel={ariaLabel}\n      className={classnames('dnb-form-iterate-view-block', className)}\n      {...restProps}\n    >\n      <Flex.Stack>\n        {title && <Lead size=\"basis\">{title}</Lead>}\n        {children}\n        <Toolbar>\n          <ViewToolbarTools />\n        </Toolbar>\n      </Flex.Stack>\n    </ElementBlock>\n  )\n}\n\nViewContainer._supportsSpacingProps = true\nexport default ViewContainer\n","import React, { useContext } from 'react'\nimport IterateElementContext from '../IterateElementContext'\nimport { EditContainerWithoutToolbar, AllProps } from '../EditContainer'\n\nfunction AnimatedContainer(props: AllProps) {\n  const iterateElementContext = useContext(IterateElementContext)\n  const { isNew } = iterateElementContext ?? {}\n\n  return (\n    <EditContainerWithoutToolbar\n      open={!isNew ? true : undefined}\n      {...props}\n    />\n  )\n}\n\nAnimatedContainer._supportsSpacingProps = true\nexport default AnimatedContainer\n","import { useCallback } from 'react'\nimport pointer from 'json-pointer'\nimport { Identifier, Path } from '../../types'\nimport { useData, getData } from '../../Form'\n\nexport type Props = {\n  /**\n   * The path (JSON Pointer) to the array or object to count.\n   */\n  path: Path\n\n  /**\n   * A Form.Handler or DataContext `id` for when called outside of the context.\n   */\n  id?: Identifier\n\n  /**\n   * A filter function to filter the data before counting.\n   */\n  filter?: (item: unknown) => boolean\n}\n\nexport function Count(props: Props) {\n  const { data } = useData(props.id)\n  return countData(data, props)\n}\n\nfunction countData(data: unknown, { path, filter }: Props) {\n  if (pointer.has(data, path)) {\n    const value = pointer.get(data, path)\n    if (Array.isArray(value)) {\n      return filter ? value.filter(filter).length : value.length\n    } else if (typeof value === 'object' && value) {\n      return filter\n        ? Object.entries(value).filter(filter).length\n        : Object.keys(value).length\n    }\n  }\n\n  return NaN\n}\n\nexport function count(props: Props) {\n  const { data } = getData(props.id)\n  return countData(data, props)\n}\n\nexport function useCount(id: Identifier = undefined) {\n  const { data } = useData(id)\n\n  const count = useCallback(\n    (path: Props['path'], filter?: Props['filter']) => {\n      return countData(data, { path, filter })\n    },\n    [data]\n  )\n\n  return { count }\n}\n","import PushButton from './PushButton'\nimport RemoveButton from './RemoveButton'\n\nexport { default as Array } from './Array'\nexport { default as PushButton } from './PushButton'\nexport { default as RemoveButton } from './RemoveButton'\nexport { default as EditContainer } from './EditContainer'\nexport { default as ViewContainer } from './ViewContainer'\nexport { default as AnimatedContainer } from './AnimatedContainer'\nexport { default as Toolbar } from './Toolbar'\nexport { useCount, count, Count } from './Count'\nexport { default as IterateElementContext } from './IterateElementContext'\n\n/**\n * Deprecated and will be removed in v11\n *\n * @deprecated use \"PushButton\" instead\n */\nexport const ArrayPushButton = PushButton\n\n/**\n * Deprecated and will be removed in v11\n *\n * @deprecated use \"RemoveButton\" instead\n */\nexport const ArrayRemoveElementButton = RemoveButton\n"],"names":["PushButton","props","iterateElementContext","useContext","IterateElementContext","handlePush","pushValue","className","restProps","buttonProps","omitDataValueReadWriteProps","value","handleChange","children","useFieldProps","undefined","Array","isArray","Error","handleClick","useCallback","newValue","concat","_toConsumableArray","_jsx","Button","classnames","variant","icon","add","icon_position","on_click","_supportsSpacingProps","createContext","RemoveButton","handleRemove","text","translation","useTranslation","Iterate","textContent","remove","elementBlockContext","ElementBlockContext","handleRemoveBlock","trash","FieldBoundaryProvider","_ref","showAllErrors","DataContext","errorsRef","useRef","hasError","Object","keys","current","length","hasErrorAndShowIt","setFieldError","path","error","_errorsRef$current","context","FieldBoundaryContext","Provider","ArrayComponent","_props$value","salt","forceUpdate","useReducer","summaryListContext","SummaryListContext","valueBlockContext","ValueBlockContext","arrayValue","withoutFlex","emptyValue","placeholder","onChange","idsRef","isNewRef","modesRef","valueWhileClosingRef","valueCountRef","containerRef","hadPushRef","innerRefs","omitFlex","useEffect","elementData","useMemo","map","index","_valueCountRef$curren","id","makeUniqueId","hasNewItems","push","isNew","containerMode","switchContainerMode","mode","newArrayValue","structuredClone","pointer","element","_temp","keepItems","splice","fulfillRemove","_modesRef$current","_isNewRef$current","findIndex","indexOf","restoreOriginalValue","last","flexProps","pickFlexContainerProps","pickSpacingProps","innerRef","WrapperElement","Fragment","Flex","elementProps","elementRef","createRef","renderChildren","elementChild","contextValue","content","child","tabIndex","EditToolbarTools","valueBackupRef","wasNew","wasNewRef","useWasNew","cancelHandler","doneHandler","_jsxs","spacing","check","done","close","cancel","ElementBlock","contextRef","open","ariaLabel","onAnimationEnd","openDelay","openRef","isRemoving","setOpenState","setTimeout","handleAnimationEnd","state","_contextRef$current","_contextRef$current$e","_contextRef$current$e2","_contextRef$current$e3","_contextRef$current3","_contextRef$current3$","focus","call","window","requestAnimationFrame","_document$activeEleme","document","activeElement","closest","_contextRef$current2","elements","querySelectorAll","e","HeightAnimation","duration","keepInDOM","Toolbar","rest","Space","top","Hr","space","EditContainer","EditContainerWithoutToolbar","toolbar","title","titleWhenNew","blockTitle","convertJsxToString","Lead","size","ViewToolbarTools","editHandler","edit","ViewContainer","AnimatedContainer","Count","data","useData","countData","filter","entries","NaN","count","getData","useCount","ArrayPushButton","ArrayRemoveElementButton"],"sourceRoot":""}