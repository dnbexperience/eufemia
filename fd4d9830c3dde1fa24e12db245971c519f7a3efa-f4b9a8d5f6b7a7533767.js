"use strict";(self.webpackChunkdnb_design_system_portal=self.webpackChunkdnb_design_system_portal||[]).push([[78114],{35753:function(e,n,i){i.r(n);var s=i(52322),d=i(45392),a=i(74289);function r(e){const n=Object.assign({h2:"h2",pre:"pre",code:"code",p:"p",blockquote:"blockquote",strong:"strong",h3:"h3",ul:"ul",li:"li",a:"a",ol:"ol",em:"em",h4:"h4"},(0,d.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{children:"Import"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { Heading } from '@dnb/eufemia'\n"})}),"\n",(0,s.jsx)(n.h2,{children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"The Heading component is a helper to create automated semantic headings within a boundary of the web heading rules."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Basically, only assistive technologies do need semantic headings. But they need them correct."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["How does it work? The heading leveling is handled synchronously. But you can easily isolate one level, or a part by using a context provider: ",(0,s.jsx)(n.code,{children:"<Heading.Level ..."}),". This allows you to later, asynchronous, add new headings inside. You can nest several contexts inside each."]}),"\n",(0,s.jsxs)(n.p,{children:["The first code example is without using context provider. To handle levels in batches or asynchronous, use a ",(0,s.jsx)(n.code,{children:"Heading.Level"})," context provider."]}),"\n",(0,s.jsx)(a.eO,{}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"NB:"})," Instead of ",(0,s.jsx)(n.code,{children:"increase"})," and ",(0,s.jsx)(n.code,{children:"decrease"})," you can use ",(0,s.jsx)(n.code,{children:"up"})," and ",(0,s.jsx)(n.code,{children:"down"})," as well."]}),"\n",(0,s.jsx)(n.h3,{children:"Heading level core-concept"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.strong,{children:"heading"})," will inherit the level from its previous sibling."]}),"\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.strong,{children:"level provider"})," will create an isolated level context (",(0,s.jsx)(n.code,{children:"Heading.Level"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["A heading, nested inside a context (",(0,s.jsx)(n.code,{children:"Heading.Level"}),") will likewise inherit the previous context level."]}),"\n",(0,s.jsxs)(n.li,{children:["A heading can have a set of different ",(0,s.jsx)(n.a,{href:"/uilib/elements/heading#headings",children:"size"})," properties. More details below."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{children:"Defining heading styles / sizes"}),"\n",(0,s.jsxs)(n.p,{children:["For the visual part, we simply use ",(0,s.jsx)(n.a,{href:"/uilib/elements/heading",children:"typography styles"})," with the ",(0,s.jsx)(n.code,{children:"size"})," property, e.g. ",(0,s.jsx)(n.code,{children:'size="x-large"'})]}),"\n",(0,s.jsx)(a.i_,{}),"\n",(0,s.jsx)(n.h3,{children:"Heading level rules and corrections"}),"\n",(0,s.jsx)(n.p,{children:"The correction will ensure that:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["a heading will start with a level ",(0,s.jsx)(n.strong,{children:"1"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["the second level will get corrected be level ",(0,s.jsx)(n.strong,{children:"2"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["if a level will increase with a factor of more than one (level={>1}), it will get corrected to only increase by one (",(0,s.jsx)(n.strong,{children:"1"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["if a level will be set to ",(0,s.jsx)(n.strong,{children:"1"})," a second time, it will get corrected to level ",(0,s.jsx)(n.strong,{children:"2"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["You get a ",(0,s.jsx)(n.code,{children:"console.warn"})," warning (only in development) about corrections. You can attach a custom warning / handler if you need that: ",(0,s.jsx)(n.code,{children:"<Heading.Level debug={(...logs) => console.info(...logs)}>"})]}),"\n",(0,s.jsxs)(n.p,{children:["You can also disable corrections by using the property ",(0,s.jsx)(n.code,{children:"skip_correction={true}"}),"."]}),"\n",(0,s.jsx)(n.h3,{children:"Heading level context provider / asynchronous"}),"\n",(0,s.jsxs)(n.p,{children:["In order to control leveling of headings systematically, you can make use of the ",(0,s.jsx)(n.code,{children:"Heading.Level"}),", ",(0,s.jsx)(n.code,{children:"Heading.Increase"})," or ",(0,s.jsx)(n.code,{children:"Heading.Decrease"})," providers."]}),"\n",(0,s.jsx)(n.p,{children:"They are completely optional. But can help out to solve some kinds of challenges or logic."}),"\n",(0,s.jsx)(a.mE,{}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"TODO:"})," Integration with the ",(0,s.jsx)(n.a,{href:"/uilib/usage/customisation/provider",children:"global Provider"}),"."]}),"\n",(0,s.jsx)(n.h3,{children:"Skip auto correction and warnings"}),"\n",(0,s.jsxs)(n.p,{children:["First, warnings will not show up in production builds. And to skip the auto correction of heading levels, simply use the ",(0,s.jsx)(n.code,{children:"skip_correction"})," property."]}),"\n",(0,s.jsx)(n.h3,{children:"Heading levels interceptor modification"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { resetLevels, setNextLevel } from '@dnb/eufemia/components/Heading'\n\n// e.g. during Gatsby route change\nexport const onRouteUpdate = () => {\n  resetLevels(1)\n\n  // You can also call this method like this:\n  Heading.resetLevels(1)\n}\n\n// e.g. if you for some reason have to force setting a new level (Heading.setNextLevel)\nsetNextLevel(3)\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Limitations:"})," ",(0,s.jsx)(n.code,{children:"resetLevels"})," and ",(0,s.jsx)(n.code,{children:"setNextLevel"})," does not change contexts with an entry level higher than one (1).\nIn order to change also contexts, you can set ",(0,s.jsx)(n.code,{children:"overwriteContext"})," to true:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"Heading.resetLevels(1, { overwriteContext: true })\nHeading.setNextLevel(4, { overwriteContext: true })\n"})}),"\n",(0,s.jsx)(n.h4,{children:"Heading and routers"}),"\n",(0,s.jsxs)(n.p,{children:["In order to reset the leveling during a page transition on using ",(0,s.jsx)(n.code,{children:"react-router-dom"})," v5, you can make use of ",(0,s.jsx)(n.code,{children:"withRouter"}),".\nIn v6 or ",(0,s.jsx)(n.code,{children:"@reach/router"}),', you just call it in the correct "page" component.\nYou could additionally define "what is a page change" and what not, by using the ',(0,s.jsx)(n.code,{children:"location: { pathname }"})," property you get inside these routing components."]}),"\n",(0,s.jsx)(n.h3,{children:"Basic heading elements"}),"\n",(0,s.jsx)(n.p,{children:"You may still consider of using the basic elements. But keep in mind, you have to define headings responsibly."}),"\n",(0,s.jsx)(a.TX,{})]})}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(r,e)})):r(e)}},74289:function(e,n,i){i.d(n,{F5:function(){return c},M_:function(){return l},Ol:function(){return o},TX:function(){return x},eO:function(){return h},i_:function(){return g},mE:function(){return H},ni:function(){return t}});var s=i(70894),d=(i(2784),i(46832)),a=i(52322);const r=(0,s.Z)("div",{target:"ebogvt50"})({name:"19hi48p",styles:".dnb-heading{display:block;margin:0!important;}"}),l=()=>(0,a.jsx)(r,{children:(0,a.jsx)(d.Z,{"data-visual-test":"heading-default",children:'<Heading.Level debug reset={1}>\n  <Heading>h1</Heading>\n  <Heading>h2</Heading>\n  <Heading increase>h3</Heading>\n  <Heading increase>h4</Heading>\n  <Heading decrease>h3</Heading>\n  <Heading level="2" size="x-large">\n    h2\n  </Heading>\n  <Heading skip_correction level={4}>\n    h4\n  </Heading>\n</Heading.Level>\n'})}),t=()=>(0,a.jsx)(r,{children:(0,a.jsx)(d.Z,{"data-visual-test":"heading-context",children:"<Heading.Level debug reset={1}>\n  <Heading>h1</Heading>\n  <Heading>h2</Heading>\n\n  <Heading.Increase>\n    <Heading>h3</Heading>\n    <Heading>h3</Heading>\n  </Heading.Increase>\n\n  <Heading inherit>h3</Heading>\n\n  <Heading.Decrease inherit>\n    <Heading>h2</Heading>\n    <Heading>h2</Heading>\n    <Heading increase>h3</Heading>\n    <Heading>h3</Heading>\n  </Heading.Decrease>\n</Heading.Level>\n"})}),o=()=>(0,a.jsx)(r,{children:(0,a.jsx)(d.Z,{noInline:!0,children:'const App = () => {\n  const [showHeading, setShowHeading] = React.useState(false)\n  return (\n    <Heading.Level debug reset={1}>\n      <Heading>h1</Heading>\n      <Heading>h2</Heading>\n\n      <Heading.Increase>\n        <ToggleButton\n          text="Toggle h3"\n          checked={showHeading}\n          onChange={() => setShowHeading((c) => !c)}\n        />\n        {showHeading && (\n          <>\n            <Heading>h3</Heading>\n            <Heading>h3</Heading>\n            <Heading>h3</Heading>\n          </>\n        )}\n      </Heading.Increase>\n\n      <Heading.Level>\n        <Heading>h2</Heading>\n      </Heading.Level>\n    </Heading.Level>\n  )\n}\nrender(<App />)\n'})}),c=()=>(0,a.jsx)(r,{children:(0,a.jsx)(d.Z,{"data-visual-test":"heading-mixin",children:'<Heading.Level debug reset={1}>\n  <Heading>h1</Heading>\n  <Heading>h2</Heading>\n\n  <H3 level="use">Increase to h3</H3>\n  <Heading>h3</Heading>\n</Heading.Level>\n'})}),h=()=>(0,a.jsx)(d.Z,{hidePreview:!0,children:"<Heading.Level reset={1}>\n  <Heading>h1</Heading>\n  <Heading>h2</Heading>\n  <Heading increase>h3</Heading>\n  <Heading>still h3</Heading>\n  <Heading increase>h4</Heading>\n  <Heading increase>h5</Heading>\n  <Heading decrease>h4</Heading>\n  <Heading level={2}>back to h2</Heading>\n  <Heading increase>h3</Heading>\n</Heading.Level>\n"}),g=()=>(0,a.jsx)(d.Z,{hidePreview:!0,children:'<Heading.Level reset={2}>\n  <Heading increase size="xx-large">\n    h3, but looks like h1\n  </Heading>\n</Heading.Level>\n'}),H=()=>(0,a.jsx)(d.Z,{hidePreview:!0,children:'<Heading.Level reset={1}>\n  <Heading>h1</Heading>\n  <Heading.Level level="2">\n    <Heading>h2</Heading>\n    <Heading increase>h3</Heading>\n    <Heading>still h3</Heading>\n    <Heading.Increase>\n      <Heading>h4</Heading>\n      <Heading>still h4</Heading>\n    </Heading.Increase>\n  </Heading.Level>\n</Heading.Level>\n'}),x=()=>(0,a.jsx)(d.Z,{hidePreview:!0,children:'<article>\n  <H1 size="large">h1</H1>\n  <H2 size="xx-large">h2</H2>\n</article>\n'})}}]);
//# sourceMappingURL=fd4d9830c3dde1fa24e12db245971c519f7a3efa-f4b9a8d5f6b7a7533767.js.map