/**
 * Scripts test
 *
 */

import path from 'path'
import * as globby from 'globby'
import * as fs from 'fs-extra'
import { runFactory } from '../themeFactory'

jest.mock('globby', () => jest.fn(jest.requireActual('globby')))
jest.mock('fs-extra', () => {
  const orig = jest.requireActual('fs-extra')
  return {
    ...orig,
    readFile: jest.fn(async (source, encoding) => {
      if (source.endsWith('theme-components.scss')) {
        const { editAdvice, insertBelowAdvice } =
          jest.requireActual('../themeFactory')
        return `${editAdvice.replace(
          '<file>',
          'components',
        )}${insertBelowAdvice}`
      }

      return await orig.readFile(source, encoding)
    }),
    writeFile: jest.fn(),
    mkdir: jest.fn(),
  }
})

describe('runFactory', () => {
  it('has to find all related "ui" theme files', async () => {
    jest
      .spyOn(globby, 'default')
      .mockResolvedValue([
        './src/components/button/style/themes/dnb-button-theme-ui.scss',
        './src/components/badge/style/themes/dnb-badge-theme-ui.scss',
      ])

    const result = await getThemeContent({ name: 'ui' })
    expect(result).toMatchInlineSnapshot(`
      "
      /**
       * ATTENTION: This file is auto generated by using "themeFactory".
       * But you still can change the content of this file on the very top.
       */

      // Add "ui" themes, if file don't exists
      $THEME_FALLBACK: 'ui';

      // Import shared styles
      @import '../../dnb-ui-components.scss';

      /**
       * NB: The content below is auto generated by the "themeFactory".
       * You may want to update it by running "yarn build" locally.
       */


      @import './src/components/badge/style/themes/dnb-badge-theme-ui.scss';
      @import './src/components/button/style/themes/dnb-button-theme-ui.scss';
      "
    `)
  })

  it('has to find all related "ui" and "sbanken" theme files', async () => {
    jest
      .spyOn(globby, 'default')
      .mockResolvedValue([
        './src/components/button/style/themes/dnb-button-theme-ui.scss',
        './src/components/badge/style/themes/dnb-badge-theme-sbanken.scss',
      ])

    const result = await getThemeContent({ name: 'sbanken' })
    expect(result).toMatchInlineSnapshot(`
      "
      /**
       * ATTENTION: This file is auto generated by using "themeFactory".
       * But you still can change the content of this file on the very top.
       */

      // Add "ui" themes, if file don't exists
      $THEME_FALLBACK: 'ui';

      // Import shared styles
      @import '../../dnb-ui-components.scss';

      /**
       * NB: The content below is auto generated by the "themeFactory".
       * You may want to update it by running "yarn build" locally.
       */


      @import './src/components/badge/style/themes/dnb-badge-theme-sbanken.scss';
      @import './src/components/button/style/themes/dnb-button-theme-ui.scss';
      "
    `)
  })

  it('has to fallback replacement', async () => {
    jest
      .spyOn(globby, 'default')
      .mockResolvedValue([
        './src/components/button/style/themes/dnb-button-theme-ui.scss',
        './src/components/button/style/themes/dnb-button-theme-sbanken.scss',
        './src/components/badge/style/themes/dnb-badge-theme-ui.scss',
      ])

    const result = await getThemeContent({ name: 'sbanken' })
    expect(fs.mkdir).toHaveBeenCalledTimes(0)
    expect(fs.writeFile).toHaveBeenCalledTimes(0)
    expect(result).toMatchInlineSnapshot(`
      "
      /**
       * ATTENTION: This file is auto generated by using "themeFactory".
       * But you still can change the content of this file on the very top.
       */

      // Add "ui" themes, if file don't exists
      $THEME_FALLBACK: 'ui';

      // Import shared styles
      @import '../../dnb-ui-components.scss';

      /**
       * NB: The content below is auto generated by the "themeFactory".
       * You may want to update it by running "yarn build" locally.
       */


      @import './src/components/button/style/themes/dnb-button-theme-sbanken.scss';
      @import './src/components/badge/style/themes/dnb-badge-theme-ui.scss';
      "
    `)
  })

  it('has to write new theme file if it not exists', async () => {
    jest
      .spyOn(globby, 'default')
      .mockResolvedValueOnce([
        './src/components/button/style/themes/dnb-button-theme-ui.scss',
        './src/components/button/style/themes/dnb-button-theme-sbanken.scss',
        './src/components/new-file/style/themes/dnb-new-file-theme-ui.scss',
      ])
    jest
      .spyOn(globby, 'default')
      .mockResolvedValueOnce([
        './src/style/themes/theme-ui/ui-theme-components.scss',
        './src/style/themes/theme-sbanken/sbanken-theme-components.scss',
      ])

    const result = await getThemeContent({
      name: 'sbanken',
      scssOutputPath: '.',
    })
    expect(fs.mkdir).toHaveBeenCalledTimes(2)
    expect(fs.writeFile).toHaveBeenCalledTimes(2)
    expect(fs.mkdir).toHaveBeenNthCalledWith(1, './theme-sbanken')
    expect(fs.mkdir).toHaveBeenNthCalledWith(2, './theme-ui')
    expect(fs.writeFile).toHaveBeenNthCalledWith(
      1,
      './theme-sbanken/sbanken-theme-components.scss',
      expect.any(String),
    )
    expect(fs.writeFile).toHaveBeenNthCalledWith(
      2,
      './theme-ui/ui-theme-components.scss',
      expect.any(String),
    )
    expect(result).toMatchInlineSnapshot(`
      "
      /**
       * ATTENTION: This file is auto generated by using "themeFactory".
       * But you still can change the content of this file on the very top.
       */

      // Add "ui" themes, if file don't exists
      $THEME_FALLBACK: 'ui';

      // Import shared styles
      @import '../../dnb-ui-components.scss';

      /**
       * NB: The content below is auto generated by the "themeFactory".
       * You may want to update it by running "yarn build" locally.
       */


      @import './src/components/button/style/themes/dnb-button-theme-sbanken.scss';
      @import './src/components/new-file/style/themes/dnb-new-file-theme-ui.scss';
      "
    `)
  })
})

type FactoryResult = Record<string, string>

const make = async ({ scssOutputPath, targetFile }) => {
  return (await runFactory({
    targetFile,
    scssOutputPath,
    filesToFindGlob: [
      path.resolve(
        __dirname,
        '../../../../src/{components,fragments}/**/style/themes/**/*-theme-*.scss',
      ),
    ],
    returnResult: true,
  })) as FactoryResult
}

const getThemeContent = async ({
  name,
  targetFile = 'components',
  scssOutputPath = path.resolve(__dirname, '../../../../src/style/themes'),
  factoryResult = null,
}) => {
  if (!factoryResult) {
    factoryResult = await make({ scssOutputPath, targetFile })
  }
  return Object.entries(factoryResult).find(([file]) => {
    return file.includes(name)
  })[1][0]
}
