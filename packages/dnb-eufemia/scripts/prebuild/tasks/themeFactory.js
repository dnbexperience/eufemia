/**
 * Insert all the component themes into the main themes lib files
 *
 */

import fs from 'fs-extra'
import globby from 'globby'
import packpath from 'packpath'
import path, { basename } from 'path'
import prettier from 'prettier'
import { ErrorHandler, log } from '../../lib'

const prettierrc = JSON.parse(
  fs.readFileSync(path.resolve(__dirname, '../../../.prettierrc'), 'utf-8')
)

const runThemeFactory = async () => {
  log.start('> PrePublish: Starting the themes factory ...')

  const processToNamesIgnoreList = [
    '!**/__tests__/',
    '!**/stories/',
    '!**/style/',
    '!**/helper-classes/',
    '!**/*_not_in_use*',
  ]

  // make themes
  await runFactory({
    // input
    processToNamesList: [
      path.resolve(
        __dirname,
        '../../../src/{components,fragments}/**/style/themes/**/*-theme-*.scss'
      ),
      ...processToNamesIgnoreList,
    ],
    // output
    targetFile: 'components', // dnb-theme-components.scss
    scssOutputPath: path.resolve(__dirname, '../../../src/style/themes'),
    customContent: `
/**
  ATTENTION: This file is auto generated by using "themeFactory".
  Do not change the content above!
  All the themes get auto generated in here.
*/`,
  }).then(() => {
    if (require.main === module) {
      log.succeed(
        '> PrePublish: "themeFactory" Created the themes files with all the components, elements, fragments and extensions'
      )
    }
  })

  await runFactory({
    // input
    processToNamesList: [
      path.resolve(
        __dirname,
        '../../../src/elements/**/style/themes/**/*-theme-*.scss'
      ),
      ...processToNamesIgnoreList,
    ],
    // output
    targetFile: 'elements', // dnb-theme-elements.scss
    scssOutputPath: path.resolve(__dirname, '../../../src/style/themes'),
    customContent: `
/**
  ATTENTION: This file is auto generated by using "themeFactory".
  Do not change the content above!
  All the themes get auto generated in here.
*/`,
  }).then(() => {
    if (require.main === module) {
      log.succeed(
        '> PrePublish: "themeFactory" Created the themes files with all the components, elements, fragments and extensions'
      )
    }
  })

  await runFactory({
    // input
    processToNamesList: [
      path.resolve(
        __dirname,
        '../../../src/extensions/**/style/themes/**/*-theme-*.scss'
      ),
      ...processToNamesIgnoreList,
    ],
    // output
    targetFile: 'extensions', // dnb-theme-extensions.scss
    scssOutputPath: path.resolve(__dirname, '../../../src/style/themes'),
    customContent: `
/**
  ATTENTION: This file is auto generated by using "themeFactory".
  Do not change the content above!
  All the themes get auto generated in here.
*/`,
  }).then(() => {
    if (require.main === module) {
      log.succeed(
        '> PrePublish: "themeFactory" Created the themes files with all the components, elements, fragments and extensions'
      )
    }
  })
}

const autoAdvice = `
/**
 * ATTENTION: This file is auto generated by using "themeFactory".
 * You CAN change the content on the very top!
 */
`

export const runFactory = async ({
  processToNamesList, // input
  scssOutputPath = null, // output
  customContent = '',
  targetFile = 'basis', // dnb-theme-basis.scss
  returnResult = false,
}) => {
  try {
    processToNamesList = await globby(processToNamesList)
    processToNamesList.sort()
  } catch (e) {
    log.fail(e)
  }

  processToNamesList = processToNamesList.map((source) => {
    return Object.freeze({
      source,
      name: basename(source),
    })
  })

  const groups = {}
  const collectedOutput = []

  processToNamesList.forEach((object) => {
    const name = /(.*)-theme-(.*)\.scss/g.exec(object.name)[2]
    groups[name] = groups[name] || []
    groups[name].push(object)
  })

  // make a group of all gathered themes we later will iterate through
  const themes = []
  Object.entries(groups).forEach(([name, files]) => {
    const theme = files
      .reduce((acc, { source }) => {
        const path = packpath.self()
        acc.push(
          `\n@import '${source.replace(
            new RegExp(`${path}/src/`, 'g'),
            '../../../'
          )}';`
        )
        return acc
      }, [])
      .join('')
    themes.push({
      name,
      theme,
    })
  })

  try {
    themes.forEach(async ({ name, theme }) => {
      const file = `${scssOutputPath}/theme-${name}/${name}-theme-${targetFile}.scss`
      let fileContent = ''
      if (fs.existsSync(file)) {
        fileContent = await fs.readFile(file, 'utf-8')
        fileContent = fileContent.replace(
          /(\/\*\*[^]*not change the content above![^]*\*\/)([^]*)/g,
          `$1\n${theme}\n`
        )
      } else {
        fileContent = `${autoAdvice}\n${customContent}\n${theme}\n`
      }

      if (returnResult) {
        collectedOutput.push(fileContent)
      } else {
        if (fs.existsSync(file)) {
          await fs.writeFile(
            file,
            prettier.format(fileContent, {
              ...prettierrc,
              filepath: file,
            })
          )
        }
      }
    })
  } catch (e) {
    log.fail(`There was an error when creating ${scssOutputPath}!`)
    new ErrorHandler(e)
  }

  if (returnResult) {
    return collectedOutput
  }
}

if (require.main === module && process.env.NODE_ENV !== 'test') {
  log.start()
  runThemeFactory().then(() => {
    log.succeed()
  })
}

export { runThemeFactory }
