/*
* Radio component
*
*/

@import '../../../style/core/utilities.scss';

:root {
  --radio-width--medium: 1.5rem;
  --radio-height--medium: 1.5rem;
}

.dnb-radio {
  --radio-width--large: 2rem;
  --radio-height--large: 2rem;
  --radio-border-width: 0.125rem;
  // Normal state
  --radio-color-dot-on: black;
  --radio-color-background-on: white;
  --radio-color-border-on: black;
  --radio-color-background-off: white;
  --radio-color-border-off: black;
  // Disabled state
  --radio-color-dot-on--disabled: lightgrey;
  --radio-color-border-on--disabled: lightgrey;
  --radio-color-border-off--disabled: lightgrey;
  // Active state
  --radio-color-dot-on--active: lightgrey;
  --radio-color-border-on--active: lightgrey;
  --radio-color-background-off--active: lightgrey;
  --radio-color-border-off--active: transparent;
  // Hover state
  --radio-color-dot-on--hover: lightgrey;
  --radio-color-background-off--hover: lightgrey;
  // Focus state
  --radio-color-background-on--focus: var(--color-white);
  --radio-color-background-off--focus: lightgrey;
  // Error state
  --radio-color-dot-on--error: red;
  --radio-color-border-on--error: red;
  --radio-color-background-off--error: lavenderblush;
  --radio-color-dot-on--error-hover: lavenderblush;

  display: inline-flex;
  flex-direction: column;

  font-size: var(--font-size-small);
  line-height: var(--line-height-basis);

  &__inner {
    display: inline-flex;
    flex-direction: column;
    align-self: center;
  }

  &__shell {
    position: relative;
    user-select: none; // Safari / Touch fix

    display: flex;
    align-items: center;
    flex-shrink: 0;
    justify-content: center;

    width: var(--radio-width--medium);
    height: var(--radio-height--medium);
  }

  &__focus,
  &__button,
  &__dot {
    position: absolute;
    z-index: 4;
  }

  &__button {
    border: var(--radio-border-width) solid transparent;
  }

  &__focus {
    display: none;

    @include focusRing();
  }

  &__focus,
  &__button {
    width: calc(var(--radio-width--medium) - 0.25rem);
    height: calc(var(--radio-height--medium) - 0.25rem);
    border-radius: 50%;

    .dnb-radio--large & {
      width: calc(var(--radio-width--large) - 0.125rem);
      height: calc(var(--radio-height--large) - 0.125rem);
    }
  }

  &__dot {
    width: calc(var(--radio-width--medium) - 0.75rem);
    height: calc(var(--radio-height--medium) - 0.75rem);
    border-radius: 50%;
    background-color: var(--radio-color-dot-on);
    transition:
      opacity 200ms ease-out,
      transform 200ms ease-out;

    .dnb-radio--large & {
      width: calc(var(--radio-width--large) - 0.875rem);
      height: calc(var(--radio-height--large) - 0.875rem);
    }
  }

  &__input {
    opacity: 0;

    position: absolute;
    top: auto;
    left: auto;
    z-index: 5;

    width: var(--radio-width--medium);
    height: var(--radio-height--medium);

    margin: 0;
    padding: 0;

    border: 0;
  }

  &--large &__input {
    width: var(--radio-width--large);
    height: var(--radio-height--large);
  }

  &__input:not([disabled]) {
    cursor: pointer;
  }

  &__order {
    display: inline-flex;
    align-items: baseline; // TODO: do we need this anymore?

    .dnb-radio-group--column & {
      display: flex;
    }
  }

  &__row {
    display: inline-flex;
  }

  &__suffix {
    order: 3;

    // to be aligned to the label on the left side
    .dnb-modal__trigger {
      margin-top: -0.25rem;
      margin-bottom: -0.25rem;
    }
  }

  &-group__suffix {
    font-size: var(--font-size-basis);
  }

  &--large {
    line-height: var(--radio-height--large);
  }

  &--large &__suffix {
    line-height: var(--radio-height--large);
  }

  &--large &__shell {
    width: var(--radio-width--large);
    height: var(--radio-height--large);
  }

  .dnb-form-label {
    margin-right: 0;
    margin-left: 0;
    margin-bottom: 0;
  }

  &--label-position-left &__order {
    .dnb-radio__inner {
      order: 2;
    }

    .dnb-form-label {
      order: 1;
      padding-right: 0.5rem;
    }
  }

  &--label-position-right &__order {
    .dnb-radio__inner {
      order: 1;
    }

    .dnb-form-label {
      order: 2;
      padding-left: 0.5rem;
    }
  }

  // in case we don't define a wrapping group
  // and have a custom label component before the radio (and not inside)
  :not(#{&}-group) > .dnb-form-label + & {
    vertical-align: top;
  }

  // status
  .dnb-form-status {
    order: 4;
    margin-top: 0.375rem; /* 6/16 */
    margin-bottom: 0;
  }

  & + .dnb-form-status {
    margin-top: 0.5rem;
    margin-bottom: 1rem;
  }

  // adjust the form-status to the inner border for 3px
  > .dnb-form-status {
    transform: translateY(0.25rem); /* 4/16 */
  }

  &-group {
    --radio-group-margin-bottom: 0.5rem;
    --radio-group-margin-right: 1rem;

    display: inline-flex;
    flex-direction: row;

    fieldset {
      @include fieldsetReset();
    }

    // default spacing
    .dnb-radio {
      margin-right: var(--radio-group-margin-right);
      margin-bottom: var(--radio-group-margin-bottom);
    }

    &--column .dnb-radio {
      display: flex;
      margin-right: 0;
    }

    .dnb-radio:last-of-type {
      margin-right: 0;
    }

    & [role='radiogroup'],
    &__shell {
      display: block;
    }

    &__shell {
      & > .dnb-form-status {
        margin-top: 0;
        margin-bottom: 0;
      }
    }

    &--column &__shell {
      flex-direction: column;
    }

    .dnb-flex-container {
      // because of our bottom margins we have on the components
      margin-bottom: calc(1px - 1px - var(--radio-group-margin-bottom));

      &::before {
        // move the group 2px up if label exists
        font-size: var(--font-size-basis);
      }
    }
  }

  /*
   * Color scheme
   */

  // stylelint-disable no-descending-specificity
  // We prioritise categorisation and readability over specificity here */

  /** Normal state **/

  // On
  &__input:checked ~ &__button,
  &__input[data-checked='true'] ~ &__button {
    background-color: var(--radio-color-background-on);
    border-color: var(--radio-color-border-on);
  }
  &__input:checked ~ &__dot,
  &__input[data-checked='true'] ~ &__dot {
    opacity: 1;
    transform: scale(1);
  }

  // Off
  &__input:not(:checked):not([data-checked='true']) ~ &__dot {
    opacity: 0;
    transform: scale(0.8);
  }
  &__input:not(:checked):not([data-checked='true']) ~ &__button {
    background-color: var(--radio-color-background-off);
    border-color: var(--radio-color-border-off);
  }

  /** Disabled state **/

  // On
  &__input[disabled]:checked ~ &__button,
  &__input[disabled][data-checked='true'] ~ &__button {
    border-color: var(--radio-color-border-on--disabled);
  }

  &__input[disabled]:checked ~ &__dot,
  &__input[disabled][data-checked='true'] ~ &__dot {
    background-color: var(--radio-color-dot-on--disabled);
  }

  // Off
  &__input[disabled]:not(:checked):not([data-checked='true'])
    ~ &__button:not(.dnb-skeleton) {
    border-color: var(--radio-color-border-off--disabled);
  }

  // Skeleton
  &__input[disabled] ~ &__button.dnb-skeleton {
    &::before {
      border-radius: 0;
    }
    border-color: var(--skeleton-color);
  }

  /** Active state **/

  // On
  &__input:not([disabled]):checked:active ~ &__button,
  &__input:not([disabled])[data-checked='true']:active ~ &__button {
    border-color: var(--radio-color-border-on--active);
  }

  &__input:not([disabled]):checked:active ~ &__dot,
  &__input:not([disabled])[data-checked='true']:active ~ &__dot {
    background-color: var(--radio-color-dot-on--active);
  }

  // Off
  &__input:not([disabled]):not(:checked):not([data-checked='true']):active
    ~ &__button {
    background-color: var(--radio-color-background-off--active);
    border-color: var(--radio-color-border-off--active);
  }

  /** Hover state **/

  // On
  &__input:not([disabled]):not(:focus):checked:hover ~ &__dot,
  &__input:not([disabled]):not(:focus)[data-checked='true']:hover
    ~ &__dot {
    background-color: var(--radio-color-dot-on--hover);
  }

  // Off
  &__input:not([disabled]):not(:focus):not(:checked):not(
      [data-checked='true']
    ):hover
    ~ &__button {
    background-color: var(--radio-color-background-off--hover);
  }

  /** Focus state **/

  // General
  &__input:not([disabled]):focus ~ &__button {
    html[data-whatinput='keyboard'] & {
      border: none;
    }
  }
  &__input:not([disabled]):focus ~ &__focus,
  &__input:not([disabled]):active ~ &__focus {
    display: block;
  }

  // On
  &__input:not([disabled]):not(:active):not(:hover):checked:focus
    ~ &__button,
  &__input:not([disabled]):not(:active):not(
      :hover
    )[data-checked='true']:focus
    ~ &__button {
    background-color: var(--radio-color-background-on--focus);
  }

  // Off
  &__input:not([disabled]):not(:checked):not([data-checked='true']):focus
    ~ &__button {
    html[data-whatinput='keyboard'] & {
      background-color: var(--radio-color-background-off--focus);
    }
  }

  /** Error state **/

  // General
  &__status--error
    &__input:not([disabled]):not(:focus):not(:active)
    ~ &__button {
    border: none;
  }
  &__status--error
    &__input:not([disabled]):not(:focus):not(:active)
    ~ &__focus {
    display: block;
    @include fakeBorder(
      var(--radio-color-border-on--error),
      var(--focus-ring-width)
    );
  }

  // On
  &__status--error
    &__input:not([disabled]):not(:focus):not(:active):not(:hover):checked
    ~ &__dot,
  &__status--error
    &__input:not([disabled]):not(:focus):not(:active):not(
      :hover
    )[data-checked='true']
    ~ &__dot {
    background-color: var(--radio-color-dot-on--error);
  }
  &__status--error
    &__input:not([disabled]):not(:focus):not(:active):checked:hover
    ~ &__dot,
  &__status--error
    &__input:not([disabled]):not(:focus):not(
      :active
    )[data-checked='true']:hover
    ~ &__dot {
    background-color: var(--radio-color-dot-on--error-hover);
  }

  // Off
  &__status--error
    &__input:not([disabled]):not(:focus):not(:checked):not(
      [data-checked='true']
    ):hover
    ~ &__button {
    background-color: var(--radio-color-background-off--error);
  }
  // stylelint-enable no-descending-specificity
}
