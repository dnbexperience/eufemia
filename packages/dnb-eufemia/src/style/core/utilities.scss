/*
 * Utilities
 */

@mixin defaultDropShadow() {
  box-shadow: var(--shadow-default);
}

// Uses html:not([data-whatintent='touch'] )
// classes on <html> element
// based on js touch device test
@mixin hover() {
  html:not([data-whatintent='touch']) &:hover {
    &[disabled] {
      cursor: not-allowed;
    }
    &:not([disabled]) {
      @content;
    }
  }
}
@mixin active() {
  &:active,
  html:not([data-whatintent='touch']) &:active {
    &[disabled] {
      cursor: not-allowed;
    }
    // stylelint-disable-next-line
    &:not([disabled]) {
      @content;
    }
  }
}
@mixin focus() {
  &:focus,
  html:not([data-whatintent='touch']) &:focus {
    &[disabled] {
      cursor: not-allowed;
    }
    // stylelint-disable-next-line
    &:not([disabled]) {
      @content;
    }
  }
}

@mixin whatInput($whatinput: null) {
  html[data-whatinput='#{$whatinput}'] & {
    @content;
  }
}
@mixin whatInputNot($whatinput: null) {
  html:not([data-whatinput='#{$whatinput}']) & {
    @content;
  }
}

$focusRingWidth: 0.125rem; //2px
$focusRingColor: var(--color-emerald-green);
@mixin fakeFocus($whatinput: null, $color: null, $inset: null) {
  outline: none;

  @if $whatinput == null {
    $whatinput: 'keyboard';
  }
  @if $color == null {
    $color: $focusRingColor;
  }

  @include whatInput($whatinput) {
    @include fakeBorder($color, $focusRingWidth, $inset);
  }
}
@mixin removeFakeFocus($whatinput: null) {
  outline: initial;
  @if $whatinput == null {
    $whatinput: 'keyboard';
  }

  html[data-whatinput='#{$whatinput}'] & {
    box-shadow: none;
  }
}

@mixin fakeBorder(
  $color: null,
  $width: null /* 1px */,
  $inset: null,
  $is1px: false /* IE11 fix */,
  $important: null
) {
  @if $color == null {
    $color: $focusRingColor;
  }
  @if $width == null {
    $width: 0.0625rem;
  }

  --border-color: #{$color};

  // we use !important, cause we have no changes to select the selctor right
  // in some cases we have another state where we use box-shadow
  // but with important, we take care of that we actually can use use it
  box-shadow: $inset 0 0 0 $width var(--border-color) $important;

  @if $inset {
    /* iOS fix - because "inset" works not fine with border-radius */
    @include IS_SAFARI_MOBILE() {
      // remove inset on webkit - this makes the border outside
      box-shadow: 0 0 0 $width var(--border-color) $important;

      // This also works, but then we move content for 1px, if they don't have a border from before
      // box-shadow: none;
      // border: $width solid var(--border-color) $important;
    }

    /* Safari fix - because "inset" works not fine with border-radius if the user zooms the page */
    @include IS_SAFARI_DESKTOP() {
      // remove inset on webkit - this makes the border outside
      box-shadow: 0 0 0 $width var(--border-color) $important;
    }
  }

  @include IS_IE() {
    @if $is1px {
      // Since 0.0625rem gets not rendered correctly
      // and gives an artifact, we do use px instead
      box-shadow: $inset 0 0 0 1px $color $important;
    } @else {
      // IE color fallback
      box-shadow: $inset 0 0 0 $width $color $important;
    }
  }

  @if $color != null {
    border-color: transparent;
  }
}

@mixin extendFakeFocus(
  $first-color: null,
  $second-color: null,
  $width: 0.0625rem /*1px*/
) {
  $second: 0 0 0 ($focusRingWidth + $width) $second-color;
  box-shadow: 0 0 0 $width $first-color, $second;

  @include IS_IE() {
    border: 0 solid transparent; // only to trigger the renderering correctly in IE11
  }
}

@mixin dummySpacing() {
  // we use "aria-hidden" SPAN to simulate a wider width for each tab
  .dnb-dummy {
    display: flex;
    flex-direction: column;

    height: 0;
    visibility: hidden;
    overflow: hidden;
  }
}

@mixin scrollbarAppearance() {
  overscroll-behavior: contain;
  scrollbar-width: thin;

  // older iOS safari
  -webkit-overflow-scrolling: touch;

  // show scrollbar on IE
  -ms-overflow-style: auto;

  scrollbar-color: var(--color-emerald-green) transparent;

  // This is too buggy and the UX is bad
  // We have to rather wait until "scrollbar-color" is supported on webkit
  // The scrollbar gets hidden in certain scenarios (e.g. portal-sidebar-menu)
  // Safari/Chrome
  // @supports not (scrollbar-color: auto) {
  //   &::-webkit-scrollbar {
  //     width: 0.5rem;
  //     background-color: transparent;
  //   }
  //   &::-webkit-scrollbar-thumb {
  //     cursor: pointer;
  //     background-color: var(--color-emerald-green);
  //     border-radius: 0.5rem;
  //   }
  // }
}

@mixin scrollY($mode: scroll) {
  overflow-y: $mode;
  html:not([data-visual-test]) & {
    scroll-behavior: smooth;
  }
  html[data-visual-test] & {
    scroll-behavior: auto !important;
  }
  @include scrollbarAppearance();
}

@mixin scrollX($mode: scroll) {
  overflow-x: $mode;
  html:not([data-visual-test]) & {
    scroll-behavior: smooth;
  }
  html[data-visual-test] & {
    scroll-behavior: auto !important;
  }
  @include scrollbarAppearance();
}

@mixin hideScrollbar() {
  /* Hide scrollbar for Chrome, Safari */
  /* stylelint-disable-next-line */
  &::-webkit-scrollbar {
    display: none;
  }
  -ms-overflow-style: none; /* IE and Edge */
  scrollbar-width: none; /* Firefox */
}

// IE fix
@mixin IS_IE() {
  @media screen and (-ms-high-contrast: none) {
    @content;
  }
}

// Edge fix
@mixin IS_EDGE() {
  @supports (-ms-ime-align: auto) {
    @content;
  }
}

// Firefox fix
@mixin IS_FF() {
  @supports (-moz-appearance: meterbar) and
    (background-blend-mode: difference, normal) {
    @content;
  }
}

// Chrome fix
@mixin IS_CHROME() {
  @supports (-webkit-appearance: none) and
    (not (overflow: -webkit-marquee)) and (not (-ms-ime-align: auto)) and
    (not (-moz-appearance: none)) {
    @content;
  }
}

// Safari Mobile fix
@mixin IS_SAFARI_MOBILE() {
  @supports (-webkit-touch-callout: none) {
    @content;
  }
}

// Safari Desktop fix
@mixin IS_SAFARI_DESKTOP() {
  @supports (-webkit-appearance: none) and (stroke-color: transparent) and
    (not (-webkit-touch-callout: none)) {
    @content;
  }
}

$breakpoints: (
  'small': 40em,
  'medium': 50em,
  'large': 60em,
  'x-large': 72em,
  'xx-large': 80em,
);

// Example usage:
// @include allAbove(medium){ styles go here.. }
@mixin allAbove($size) {
  @media screen and (min-width: map-get($breakpoints, $size)) {
    @content;
  }
}
@mixin allBelow($size) {
  @media screen and (max-width: map-get($breakpoints, $size)) {
    @content;
  }
}

// Vertical alignment helper
@mixin alignmentHelper() {
  // Add a char to align the component
  &::before {
    content: '\200C'; // zero-width non-joiner
    @include alignmentHelperClass();
  }
}
@mixin alignmentHelperClass() {
  display: inline-block;
  width: 0;
  height: 0;

  font-size: var(--font-size-small);

  speak: none;
}

// Screen reader only helper
@mixin srOnly() {
  user-select: none;
  -webkit-touch-callout: none; // iOS
  pointer-events: none;

  position: absolute;

  clip-path: inset(50%);
  max-width: 1px; // if less than 1px, Safari moves the focus-ring to another place
  max-height: 1px; // if less than 1px, Safari moves the focus-ring to another place

  overflow: hidden;
  white-space: nowrap; // NB: so NVDA not splits up text in multi line

  padding: 0;
  margin: 0;

  border: 0;
}

// deprecated and can be removed in v10
// Visual test and docs should be removed as well!
@mixin srOnlyInline() {
  @include srOnly();

  // since we do use it also as positioning helper
  // we then do not want it absolute positioned
  position: static;
  display: inline-block;

  visibility: visible; // should not be hidden!

  font-size: 0;
  line-height: 0;
}

// deprecated and can be removed in v10
// Visual test and docs should be removed as well!
@mixin notSrOnly() {
  position: initial;
  max-width: initial;
  max-height: initial;

  clip-path: initial;
  overflow: auto;

  font-size: initial;
  line-height: initial;
  white-space: initial;
}

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

@mixin formLabelWrap() {
  @media screen and (max-width: 40em) {
    flex-wrap: wrap;
    & > .dnb-form-label {
      margin-bottom: 0.5rem;
      margin-top: 0.5rem;
    }
  }
}
