// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Checkbox component have to match snapshot 1`] = `
<Checkbox
  attributes="attributes"
  checked="checked"
  class="class"
  className="className"
  custom_element={Object {}}
  custom_method={[Function]}
  default_state="default_state"
  disabled="disabled"
  id="id"
  label="label"
  label_position="left"
  on_change={[Function]}
  on_state_update={[Function]}
  readOnly={false}
  status={null}
  status_animation="status_animation"
  status_state="status_state"
  title="title"
  value="value"
>
  <span
    className="dnb-checkbox--modifier dnb-checkbox--label-position-left"
  >
    <FormLabel
      class={null}
      className={null}
      direction={null}
      disabled="disabled"
      for_id="id"
      id="id-label"
      render_content={null}
      text="label"
      title={null}
      vertical={null}
    >
      <label
        className="dnb-form-label"
        htmlFor="id"
        id="id-label"
      >
        label
      </label>
    </FormLabel>
    <span
      className="dnb-checkbox className class"
    >
      <span
        className="dnb-checkbox__shell"
      >
        <input
          aria-checked={false}
          aria-disabled={true}
          aria-labelledby="id-label"
          checked={false}
          className="dnb-checkbox__input"
          disabled="disabled"
          id="id"
          name="id"
          onChange={[Function]}
          onKeyDown={[Function]}
          onMouseOut={[Function]}
          title="title"
          type="checkbox"
          value=""
        />
        <span
          aria-hidden={true}
          className="dnb-checkbox__button"
        >
          <span
            className="dnb-checkbox__focus"
          />
        </span>
        <CheckGfx
          className="dnb-checkbox__gfx"
        >
          <svg
            className="dnb-checkbox__gfx"
            fill="none"
            height="24"
            viewBox="0 0 24 24"
            width="24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M5.86 12.95a.75.75 0 1 0-1.22.86l1.22-.86zm2.15 4.34l.62-.42-.01-.01-.61.43zm.94.52l.02-.75-.02.75zm.98-.46l-.6-.47v.01l.6.46zm9.4-10.7a.75.75 0 0 0-1.17-.93l1.18.93zm-14.7 7.16l2.76 3.91 1.23-.86-2.76-3.91-1.22.86zm2.75 3.9c.35.52.93.84 1.55.85l.04-1.5a.43.43 0 0 1-.34-.19l-1.25.84zm1.55.85c.62.02 1.22-.26 1.6-.76l-1.2-.9a.43.43 0 0 1-.36.16l-.04 1.5zm1.59-.75l8.82-11.16-1.18-.93-8.82 11.16 1.18.93z"
            />
          </svg>
        </CheckGfx>
      </span>
    </span>
  </span>
</Checkbox>
`;

exports[`Checkbox scss have to match default theme snapshot 1`] = `
"/*
* Checkbox theme
*
*/
/**
 * This file is only used to make themes independent
 * so that they can get imported individually, without the core styles
 *
 */
/*
 * Utilities
 */
.dnb-checkbox {
  /*
    * When checkbox is OFF
    * aka when the checkbox is not :checked
    */
  /*
    * When checkbox is ON
    * aka when the checkbox is :checked
    */
  /*
    * When checkboxed OFF
    * aka when the checkbox is not :checked
    */
  /*
    * When checkboxed ON
    * aka when the checkbox is :checked
    */
  /*
    * On disabled
    *
    */
  /*
    * On hover
    *
    */
  /*
    * On active
    *
    */
  /* stylelint-disable */
  /* stylelint-enable */
  /*
    * On focus
    *
    */
  /* stylelint-disable */
  /* stylelint-enable */
  /*
    * On error state
    *
    */ }
  .dnb-checkbox__gfx {
    transition: opacity 200ms ease-out, transform 200ms ease-out; }
  .dnb-checkbox__input:not(:checked) ~ .dnb-checkbox__gfx {
    opacity: 0;
    transform: scale(0.8);
    color: var(--color-sea-green-alt); }
  .dnb-checkbox__input:checked ~ .dnb-checkbox__gfx {
    opacity: 1;
    transform: scale(1);
    color: var(--color-white); }
  .dnb-checkbox__input:not(:checked) ~ .dnb-checkbox__button {
    background-color: var(--color-white);
    border-color: var(--color-sea-green-alt); }
  .dnb-checkbox__input:checked ~ .dnb-checkbox__button {
    background-color: var(--color-sea-green-alt); }
  .dnb-checkbox__input[disabled] ~ .dnb-checkbox__button {
    border-color: var(--color-mint-green-50); }
  .dnb-checkbox__input[disabled]:checked ~ .dnb-checkbox__button {
    border-color: transparent;
    background-color: var(--color-sea-green-alt-30); }
  .dnb-checkbox__input:not([disabled]):not(:focus):hover ~ .dnb-checkbox__button {
    background-color: var(--color-mint-green-50); }
  .dnb-checkbox__input:not([disabled]):not(:focus):checked:hover ~ .dnb-checkbox__button {
    border-color: transparent; }
  .dnb-checkbox__input:not([disabled]):not(:focus):hover ~ .dnb-checkbox__gfx {
    color: var(--color-sea-green-alt); }
  .dnb-checkbox__input:not([disabled]):active ~ .dnb-checkbox__button {
    background-color: var(--color-mint-green-50);
    border-color: transparent; }
  .dnb-checkbox__input:not([disabled]):active ~ .dnb-checkbox__gfx {
    color: var(--color-white); }
  html[data-whatinput='keyboard'] .dnb-checkbox__input:not([disabled]):focus ~ .dnb-checkbox__button {
    border: none;
    background-color: var(--color-mint-green-50); }
  html[data-whatinput='keyboard'] .dnb-checkbox__input:not([disabled]):focus ~ .dnb-checkbox__gfx {
    color: var(--color-sea-green-alt); }
  .dnb-checkbox__input:not([disabled]):focus ~ .dnb-checkbox__button .dnb-checkbox__focus,
  .dnb-checkbox__input:not([disabled]):active ~ .dnb-checkbox__button .dnb-checkbox__focus {
    display: block; }
  .dnb-checkbox__input:not([disabled]):not(:checked):focus ~ .dnb-checkbox__button,
  .dnb-checkbox__input:not([disabled]):not(:checked):active ~ .dnb-checkbox__button {
    background-color: var(--color-mint-green-50); }
  .dnb-checkbox__status--error .dnb-checkbox__input:not([disabled]):not(:focus):not(:active) ~ .dnb-checkbox__button {
    border: none; }
  .dnb-checkbox__status--error .dnb-checkbox__input:not([disabled]):not(:focus):not(:active) ~ .dnb-checkbox__button .dnb-checkbox__focus {
    display: block;
    box-shadow: 0 0 0 0.125rem var(--color-cherry-red);
    border-color: transparent; }
  .dnb-checkbox__status--error .dnb-checkbox__input:not([disabled]):not(:focus):hover ~ .dnb-checkbox__button {
    border-color: var(--color-cherry-red);
    background-color: var(--color-cherry-red-80); }
  .dnb-checkbox__status--error .dnb-checkbox__input:not([disabled]):not(:focus):not(:active):not(:hover) ~ .dnb-checkbox__button {
    border-color: var(--color-cherry-red-80); }
  .dnb-checkbox__status--error .dnb-checkbox__input:not([disabled]):not(:focus):not(:active):not(:hover):checked ~ .dnb-checkbox__button {
    background-color: var(--color-cherry-red); }
  .dnb-checkbox__status--error .dnb-checkbox__input:not([disabled]):not(:focus):hover ~ .dnb-checkbox__gfx {
    color: var(--color-cherry-red); }
  .dnb-checkbox__status--error .dnb-checkbox__input:not([disabled]):not(:focus):not(:active):not(:hover) ~ .dnb-checkbox__gfx {
    color: var(--color-cherry-red-80); }
"
`;

exports[`Checkbox scss have to match snapshot 1`] = `
"/*
* DNB Checkbox
*
*/
/**
 * This file is only used to make components independent
 * so that they can get imported individually, without the core styles
 *
 */
/*
 * Utilities
 */
/*
 * Scopes
 *
 */
/*
 * Document Reset
 *
 */
/*
* DNB FormLabel
*
*/
.dnb-form-label {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: 1rem;
  font-style: normal;
  line-height: 1.5rem;
  color: var(--color-black-80, #333);
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  font-variant-numeric: lining-nums;
  font-feature-settings: \\"lnum\\";
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-form-label *,
  .dnb-form-label ::before,
  .dnb-form-label ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-form-label ::before,
  .dnb-form-label ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
 * FormLabel component
 *
 */
.dnb-form-label {
  display: inline-block;
  width: auto;
  margin: 0;
  margin-right: 1rem;
  vertical-align: baseline;
  color: inherit; }
  .dnb-form-label--vertical {
    display: block;
    margin-right: 0;
    margin-bottom: 0.5rem; }
  .dnb-form-label[for]:not([disabled]) {
    user-select: none;
    cursor: pointer; }
  .dnb-form-label[disabled] {
    cursor: not-allowed; }

/*
* DNB FormStatus
*
*/
.dnb-form-status {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: 1rem;
  font-style: normal;
  line-height: 1.5rem;
  color: var(--color-black-80, #333);
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  font-variant-numeric: lining-nums;
  font-feature-settings: \\"lnum\\";
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-form-status *,
  .dnb-form-status ::before,
  .dnb-form-status ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-form-status ::before,
  .dnb-form-status ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
 * FormStatus component
 *
 */
.dnb-form-status {
  width: auto;
  display: flex;
  min-height: var(--input-height); }
  .dnb-form-status__shell {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    border-radius: var(--input-border-radius); }
  .dnb-form-status--text {
    padding: calc(0.5rem / 2) 1rem;
    cursor: text;
    color: var(--color-emerald-green);
    line-height: 1.5rem; }
  .dnb-icon + .dnb-form-status--text {
    padding-left: 0.5rem; }
  .dnb-form-status__shell > .dnb-icon {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 1.5em;
    height: 1.5em;
    margin-left: 0.5rem;
    color: inherit;
    font-size: 1rem;
    border-radius: 50%;
    border: 1px solid;
    border-color: currentColor; }
  .dnb-form-status[hidden] {
    display: none; }
  .dnb-form-status--fade-in {
    height: 0;
    opacity: 0;
    animation: fade-in 600ms ease-out 1 200ms forwards; }

@keyframes fade-in {
  from {
    opacity: 0;
    height: 0; }
  to {
    opacity: 1;
    height: var(--input-height); } }

.dnb-checkbox {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: 1rem;
  font-style: normal;
  line-height: 1.5rem;
  color: var(--color-black-80, #333);
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  font-variant-numeric: lining-nums;
  font-feature-settings: \\"lnum\\";
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-checkbox *,
  .dnb-checkbox ::before,
  .dnb-checkbox ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-checkbox ::before,
  .dnb-checkbox ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
* Checkbox component
*
*/
:root {
  --checkbox-height: 1.5rem;
  --checkbox-width: 1.5rem;
  --checkbox-border-width: 0.125rem; }

.dnb-checkbox {
  display: inline-flex;
  flex-direction: column;
  width: auto;
  margin: 0;
  padding: 0; }
  .dnb-checkbox__shell {
    user-select: none;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: var(--checkbox-height);
    height: var(--checkbox-height);
    transform: translateY(-0.0625rem); }
  .dnb-checkbox__focus, .dnb-checkbox__button, .dnb-checkbox__gfx {
    position: absolute;
    z-index: 4;
    border-radius: 0.25rem; }
  .dnb-checkbox__button {
    border: var(--checkbox-border-width) solid transparent; }
  .dnb-checkbox__focus {
    display: none;
    outline: none; }
    html[data-whatinput='keyboard'] .dnb-checkbox__focus {
      box-shadow: 0 0 0 0.125rem var(--color-emerald-green);
      border-color: transparent; }
  .dnb-checkbox__focus, .dnb-checkbox__button {
    width: calc(var(--checkbox-width) - 0.25rem);
    height: calc(var(--checkbox-height) - 0.25rem); }
  .dnb-checkbox__gfx {
    position: absolute;
    width: var(--checkbox-height);
    height: var(--checkbox-height);
    fill: currentColor;
    shape-rendering: geometricPrecision; }
  .dnb-checkbox__input {
    opacity: 0;
    position: absolute;
    left: 0;
    z-index: 5;
    width: var(--checkbox-width);
    height: var(--checkbox-height);
    margin: 0;
    padding: 0;
    border: 0; }
  .dnb-checkbox__input:not([disabled]) {
    cursor: pointer; }
  .dnb-checkbox--modifier {
    display: inline-flex;
    flex-direction: row;
    vertical-align: top; }
  .dnb-checkbox--label-position-left .dnb-checkbox {
    order: 2; }
  .dnb-checkbox--label-position-left .dnb-form-label {
    order: 1;
    margin-right: 1rem; }
  .dnb-checkbox--label-position-left .dnb-form-status {
    margin-top: 0.5rem; }
  .dnb-checkbox--label-position-right .dnb-checkbox {
    order: 1; }
  .dnb-checkbox--label-position-right .dnb-form-label {
    order: 2;
    margin-left: 1rem;
    margin-right: 0.5rem; }
  .dnb-checkbox--label-position-right + .dnb-form-status {
    vertical-align: top;
    margin-top: 0.5rem; }
"
`;
