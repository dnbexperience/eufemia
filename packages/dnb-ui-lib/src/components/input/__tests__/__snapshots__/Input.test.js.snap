// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Input component have to match type="search" snapshot 1`] = `
<Input
  0={
    Object {
      "displayName": "Input",
      "props": Object {
        "align": "align",
        "autocomplete": "'on'",
        "children": "children",
        "class": "class",
        "className": "className",
        "custom_element": Object {},
        "custom_method": [Function],
        "description": "description",
        "disabled": "disabled",
        "global_status_id": "global_status_id",
        "id": "id",
        "inputElement": [Function],
        "input_attributes": "input_attributes",
        "input_class": "input_class",
        "input_state": "input_state",
        "keep_placeholder": "keep_placeholder",
        "label": "label",
        "label_direction": "'horizontal'",
        "label_sr_only": "label_sr_only",
        "on_blur": [Function],
        "on_change": [Function],
        "on_focus": [Function],
        "on_state_update": [Function],
        "on_submit": [Function],
        "on_submit_blur": [Function],
        "on_submit_focus": [Function],
        "placeholder": "placeholder",
        "readOnly": "readOnly",
        "selectall": "selectall",
        "size": "size",
        "status": "status",
        "status_animation": "status_animation",
        "status_state": "status_state",
        "stretch": "stretch",
        "submit_button_icon": "submit_button_icon",
        "submit_button_title": "submit_button_title",
        "submit_button_variant": "custom type not supported, please set the correct value for submit_button_variant prop",
        "submit_element": [Function],
        "suffix": "suffix",
        "type": "type",
        "value": "value",
      },
    }
  }
  1={
    Object {
      "displayName": "InputSubmitButton",
      "props": Object {
        "className": "className",
        "disabled": "disabled",
        "icon": "icon",
        "icon_size": "icon_size",
        "id": "id",
        "on_submit": [Function],
        "on_submit_blur": [Function],
        "on_submit_focus": [Function],
        "title": "title",
        "value": "value",
        "variant": "custom type not supported, please set the correct value for variant prop",
      },
    }
  }
  align={null}
  autocomplete="off"
  class={null}
  className={null}
  custom_element={null}
  custom_method={null}
  description={null}
  disabled={false}
  global_status_id={null}
  id="input"
  inputElement={null}
  input_attributes={null}
  input_class={null}
  input_state={null}
  keep_placeholder={null}
  label={null}
  label_direction={null}
  label_sr_only={null}
  on_blur={null}
  on_change={null}
  on_focus={null}
  on_state_update={null}
  on_submit={null}
  on_submit_blur={null}
  on_submit_focus={null}
  placeholder={null}
  readOnly={false}
  selectall={null}
  size={null}
  status={null}
  status_animation={null}
  status_state="error"
  stretch={null}
  submit_button_icon="search"
  submit_button_title={null}
  submit_button_variant="secondary"
  submit_element={null}
  suffix={null}
  type="search"
  value="test"
>
  <span
    className="dnb-input dnb-input--search dnb-form-component dnb-input--has-submit-element"
  >
    <span
      className="dnb-input__inner"
    >
      <span
        className="dnb-input__row"
      >
        <span
          className="dnb-input__shell"
          data-has-content="true"
          data-input-state="virgin"
        >
          <input
            autoComplete="off"
            className="dnb-input__input"
            id="input"
            name="input"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            type="search"
            value="test"
          />
        </span>
        <span
          className="dnb-input__submit-element"
        >
          <ForwardRef
            0={
              Object {
                "displayName": "Input",
                "props": Object {
                  "align": "align",
                  "autocomplete": "'on'",
                  "children": "children",
                  "class": "class",
                  "className": "className",
                  "custom_element": Object {},
                  "custom_method": [Function],
                  "description": "description",
                  "disabled": "disabled",
                  "global_status_id": "global_status_id",
                  "id": "id",
                  "inputElement": [Function],
                  "input_attributes": "input_attributes",
                  "input_class": "input_class",
                  "input_state": "input_state",
                  "keep_placeholder": "keep_placeholder",
                  "label": "label",
                  "label_direction": "'horizontal'",
                  "label_sr_only": "label_sr_only",
                  "on_blur": [Function],
                  "on_change": [Function],
                  "on_focus": [Function],
                  "on_state_update": [Function],
                  "on_submit": [Function],
                  "on_submit_blur": [Function],
                  "on_submit_focus": [Function],
                  "placeholder": "placeholder",
                  "readOnly": "readOnly",
                  "selectall": "selectall",
                  "size": "size",
                  "status": "status",
                  "status_animation": "status_animation",
                  "status_state": "status_state",
                  "stretch": "stretch",
                  "submit_button_icon": "submit_button_icon",
                  "submit_button_title": "submit_button_title",
                  "submit_button_variant": "custom type not supported, please set the correct value for submit_button_variant prop",
                  "submit_element": [Function],
                  "suffix": "suffix",
                  "type": "type",
                  "value": "value",
                },
              }
            }
            1={
              Object {
                "displayName": "InputSubmitButton",
                "props": Object {
                  "className": "className",
                  "disabled": "disabled",
                  "icon": "icon",
                  "icon_size": "icon_size",
                  "id": "id",
                  "on_submit": [Function],
                  "on_submit_blur": [Function],
                  "on_submit_focus": [Function],
                  "title": "title",
                  "value": "value",
                  "variant": "custom type not supported, please set the correct value for variant prop",
                },
              }
            }
            custom_element={null}
            custom_method={null}
            disabled={false}
            icon="search"
            icon_size="default"
            input_state={null}
            on_blur={null}
            on_change={null}
            on_focus={null}
            on_state_update={null}
            on_submit={null}
            on_submit_blur={null}
            on_submit_focus={null}
            size={null}
            title={null}
            value="test"
            variant="secondary"
          >
            <InputSubmitButton
              0={
                Object {
                  "displayName": "Input",
                  "props": Object {
                    "align": "align",
                    "autocomplete": "'on'",
                    "children": "children",
                    "class": "class",
                    "className": "className",
                    "custom_element": Object {},
                    "custom_method": [Function],
                    "description": "description",
                    "disabled": "disabled",
                    "global_status_id": "global_status_id",
                    "id": "id",
                    "inputElement": [Function],
                    "input_attributes": "input_attributes",
                    "input_class": "input_class",
                    "input_state": "input_state",
                    "keep_placeholder": "keep_placeholder",
                    "label": "label",
                    "label_direction": "'horizontal'",
                    "label_sr_only": "label_sr_only",
                    "on_blur": [Function],
                    "on_change": [Function],
                    "on_focus": [Function],
                    "on_state_update": [Function],
                    "on_submit": [Function],
                    "on_submit_blur": [Function],
                    "on_submit_focus": [Function],
                    "placeholder": "placeholder",
                    "readOnly": "readOnly",
                    "selectall": "selectall",
                    "size": "size",
                    "status": "status",
                    "status_animation": "status_animation",
                    "status_state": "status_state",
                    "stretch": "stretch",
                    "submit_button_icon": "submit_button_icon",
                    "submit_button_title": "submit_button_title",
                    "submit_button_variant": "custom type not supported, please set the correct value for submit_button_variant prop",
                    "submit_element": [Function],
                    "suffix": "suffix",
                    "type": "type",
                    "value": "value",
                  },
                }
              }
              1={
                Object {
                  "displayName": "InputSubmitButton",
                  "props": Object {
                    "className": "className",
                    "disabled": "disabled",
                    "icon": "icon",
                    "icon_size": "icon_size",
                    "id": "id",
                    "on_submit": [Function],
                    "on_submit_blur": [Function],
                    "on_submit_focus": [Function],
                    "title": "title",
                    "value": "value",
                    "variant": "custom type not supported, please set the correct value for variant prop",
                  },
                }
              }
              className={null}
              custom_element={null}
              custom_method={null}
              disabled={false}
              icon="search"
              icon_size="default"
              id={null}
              innerRef={null}
              input_state={null}
              on_blur={null}
              on_change={null}
              on_focus={null}
              on_state_update={null}
              on_submit={null}
              on_submit_blur={null}
              on_submit_focus={null}
              size={null}
              title={null}
              value="test"
              variant="secondary"
            >
              <span
                className="dnb-input__submit-button"
                data-input-state="virgin"
              >
                <Button
                  bounding={false}
                  class={null}
                  className="dnb-input__submit-button__button"
                  custom_element={null}
                  custom_method={null}
                  disabled={null}
                  href={null}
                  icon="search"
                  icon_position={null}
                  icon_size="default"
                  id={null}
                  innerRef={null}
                  onBlur={[Function]}
                  onClick={[Function]}
                  onFocus={[Function]}
                  on_click={null}
                  size={null}
                  text={null}
                  title={null}
                  type="submit"
                  value="test"
                  variant="secondary"
                >
                  <button
                    className="dnb-button dnb-button--secondary dnb-input__submit-button__button dnb-button--icon-position-right dnb-button--has-icon dnb-button--icon-size-default dnb-button--size-medium"
                    onBlur={[Function]}
                    onClick={[Function]}
                    onFocus={[Function]}
                    onMouseOut={[Function]}
                    type="submit"
                    value="test"
                  >
                    <Content
                      bounding={false}
                      class={null}
                      className="dnb-input__submit-button__button"
                      content={null}
                      custom_element={null}
                      custom_method={null}
                      disabled={null}
                      href={null}
                      icon="search"
                      icon_position={null}
                      icon_size="default"
                      id={null}
                      innerRef={null}
                      isIconOnly={true}
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      on_click={null}
                      size={null}
                      text={null}
                      title={null}
                      type="submit"
                      value="test"
                      variant="secondary"
                    >
                      ‌
                      <IconPrimary
                        alt={null}
                        aria-hidden={false}
                        attributes={null}
                        border={null}
                        class={null}
                        className="dnb-button__icon"
                        color={null}
                        height={null}
                        icon="search"
                        key="button-icon"
                        modifier={null}
                        size="default"
                        title={null}
                        width={null}
                      >
                        <span
                          alt="search"
                          aria-hidden={false}
                          aria-label="search"
                          className="dnb-icon dnb-icon--default dnb-button__icon"
                          role="img"
                        >
                          <search>
                            <svg
                              fill="none"
                              height={16}
                              viewBox="0 0 17 17"
                              width={16}
                            >
                              <g
                                clipPath="url(#clip-06a943)"
                                stroke="#000"
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={1.5}
                              >
                                <path
                                  d="M9.055 11.937a5.445 5.445 0 10-4.26-10.023 5.445 5.445 0 004.26 10.023zm1.72-1.162L15 14.999"
                                />
                              </g>
                            </svg>
                          </search>
                        </span>
                      </IconPrimary>
                    </Content>
                  </button>
                </Button>
              </span>
            </InputSubmitButton>
          </ForwardRef>
        </span>
      </span>
    </span>
  </span>
</Input>
`;

exports[`Input component have to match type="text" snapshot 1`] = `
<Input
  0={
    Object {
      "displayName": "Input",
      "props": Object {
        "align": "align",
        "autocomplete": "'on'",
        "children": "children",
        "class": "class",
        "className": "className",
        "custom_element": Object {},
        "custom_method": [Function],
        "description": "description",
        "disabled": "disabled",
        "global_status_id": "global_status_id",
        "id": "id",
        "inputElement": [Function],
        "input_attributes": "input_attributes",
        "input_class": "input_class",
        "input_state": "input_state",
        "keep_placeholder": "keep_placeholder",
        "label": "label",
        "label_direction": "'horizontal'",
        "label_sr_only": "label_sr_only",
        "on_blur": [Function],
        "on_change": [Function],
        "on_focus": [Function],
        "on_state_update": [Function],
        "on_submit": [Function],
        "on_submit_blur": [Function],
        "on_submit_focus": [Function],
        "placeholder": "placeholder",
        "readOnly": "readOnly",
        "selectall": "selectall",
        "size": "size",
        "status": "status",
        "status_animation": "status_animation",
        "status_state": "status_state",
        "stretch": "stretch",
        "submit_button_icon": "submit_button_icon",
        "submit_button_title": "submit_button_title",
        "submit_button_variant": "custom type not supported, please set the correct value for submit_button_variant prop",
        "submit_element": [Function],
        "suffix": "suffix",
        "type": "type",
        "value": "value",
      },
    }
  }
  1={
    Object {
      "displayName": "InputSubmitButton",
      "props": Object {
        "className": "className",
        "disabled": "disabled",
        "icon": "icon",
        "icon_size": "icon_size",
        "id": "id",
        "on_submit": [Function],
        "on_submit_blur": [Function],
        "on_submit_focus": [Function],
        "title": "title",
        "value": "value",
        "variant": "custom type not supported, please set the correct value for variant prop",
      },
    }
  }
  align={null}
  autocomplete="off"
  class={null}
  className={null}
  custom_element={null}
  custom_method={null}
  description={null}
  disabled={false}
  global_status_id={null}
  id="input"
  inputElement={null}
  input_attributes={null}
  input_class={null}
  input_state={null}
  keep_placeholder={null}
  label={null}
  label_direction={null}
  label_sr_only={null}
  on_blur={null}
  on_change={null}
  on_focus={null}
  on_state_update={null}
  on_submit={null}
  on_submit_blur={null}
  on_submit_focus={null}
  placeholder={null}
  readOnly={false}
  selectall={null}
  size={null}
  status={null}
  status_animation={null}
  status_state="error"
  stretch={null}
  submit_button_icon="search"
  submit_button_title={null}
  submit_button_variant="secondary"
  submit_element={null}
  suffix={null}
  type="text"
  value="test"
>
  <span
    className="dnb-input dnb-input--text dnb-form-component"
  >
    <span
      className="dnb-input__inner"
    >
      <span
        className="dnb-input__row"
      >
        <span
          className="dnb-input__shell"
          data-has-content="true"
          data-input-state="virgin"
        >
          <input
            autoComplete="off"
            className="dnb-input__input"
            id="input"
            name="input"
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            type="text"
            value="test"
          />
        </span>
      </span>
    </span>
  </span>
</Input>
`;

exports[`Input scss have to match default theme snapshot 1`] = `
"/*
* Input theme
*
*/
/**
 * This file is only used to make themes independent
 * so that they can get imported individually, without the core styles
 *
 */
/*
 * Utilities
 */
:root {
  --input-text-color: var(--color-sea-green);
  --input-text-color--focus: var(--color-sea-green);
  --input-text-color--changed: var(--color-emerald-green);
  --input-text-color--disabled: var(--color-sea-green-alt-30);
  --input-background-color: var(--color-white);
  --input-background-color--focus: var(--color-white);
  --input-background-color--changed: var(--color-white);
  --input-background-color--disabled: var(--color-mint-green-12);
  --input-border-color: var(--color-sea-green-alt);
  --input-border-color--focus: var(--color-emerald-green);
  --input-border-color--changed: var(--color-sea-green-alt);
  --input-border-color--disabled: var(--color-sea-green-alt-30); }

.dnb-input {
  color: var(--input-text-color); }
  .dnb-input__inner {
    color: inherit; }
  .dnb-input__shell {
    color: inherit;
    background-color: var(--input-background-color);
    border: none;
    box-shadow: inset 0 0 0 var(--input-border-width) var(--input-border-color);
    /* IE11 fix */
    border-color: transparent; }
    @media screen and (-ms-high-contrast: none) {
      .dnb-input__shell {
        box-shadow: inset 0 0 0 1px var(--input-border-color); } }
    .dnb-input__shell[data-input-state='dirty'] {
      color: var(--input-text-color--changed);
      background-color: var(--input-background-color--changed); }
    .dnb-input__shell[data-input-state='disabled'] {
      color: var(--input-text-color--disabled);
      -webkit-text-fill-color: var(--input-text-color--disabled);
      box-shadow: inset 0 0 0 var(--input-border-width) var(--input-border-color--disabled);
      /* IE11 fix */
      border-color: transparent;
      background-color: var(--input-background-color--disabled); }
      @media screen and (-ms-high-contrast: none) {
        .dnb-input__shell[data-input-state='disabled'] {
          box-shadow: inset 0 0 0 1px var(--input-border-color--disabled); } }
    .dnb-input__shell:not([data-input-state='disabled']):hover, .dnb-input__shell[data-input-state='focus'] {
      color: var(--input-text-color--focus);
      background-color: var(--input-background-color--focus);
      box-shadow: 0 0 0 0.125rem var(--input-border-color--focus);
      /* IE11 fix */
      border-color: transparent; }
  .dnb-input:not([data-input-state='disabled']).dnb-input__submit-button svg {
    color: var(--color-sea-green); }
  .dnb-input__status--error .dnb-input__shell:not([data-input-state='focus']), .dnb-input__status--error .dnb-input__shell:not([data-input-state='focus']):not([data-input-state='disabled']):hover {
    box-shadow: 0 0 0 0.125rem var(--color-fire-red);
    /* IE11 fix */
    border-color: transparent; }
  .dnb-input__status--error .dnb-input__shell:not([data-input-state='focus']) ~ .dnb-input__submit-element .dnb-button__icon,
  .dnb-input__status--error .dnb-input__shell:not([data-input-state='focus']) ~ .dnb-input__submit-element .dnb-button--secondary .dnb-button__icon {
    color: var(--color-fire-red); }
  .dnb-input__status--error .dnb-input__shell:not([data-input-state='focus']) ~ .dnb-input__submit-element .dnb-button {
    box-shadow: 0 0 0 0.125rem var(--color-fire-red);
    /* IE11 fix */
    border-color: transparent; }
  .dnb-input__input::selection {
    background-color: var(--color-mint-green);
    color: var(--input-text-color--focus);
    text-shadow: none; }
  .dnb-input__shell[data-input-state='focus'] .dnb-input__placeholder {
    display: none; }
  .dnb-input--keep-placeholder .dnb-input__shell[data-input-state='focus'] .dnb-input__placeholder {
    display: block;
    opacity: 0.6; }
"
`;

exports[`Input scss have to match snapshot 1`] = `
"/*
* DNB Input
*
*/
/**
 * This file is only used to make components independent
 * so that they can get imported individually, without the core styles
 *
 */
/*
 * Utilities
 */
/*
 * Scopes
 *
 */
/*
 * Document Reset
 *
 */
/*
* DNB Button
*
*/
/*
* DNB icon
*
*/
/*
* Icon component
*
*/
.dnb-icon {
  display: inline-block;
  font-size: 1rem;
  line-height: 1rem;
  color: inherit;
  width: 1em;
  height: 1em; }
  .dnb-icon img,
  .dnb-icon svg {
    width: inherit;
    height: inherit;
    shape-rendering: geometricPrecision;
    vertical-align: top; }
  .dnb-icon svg[width='100%'] {
    width: inherit; }
  .dnb-icon svg[height='100%'] {
    height: inherit; }
  .dnb-icon svg:not([fill]),
  .dnb-icon svg [fill] {
    fill: currentColor; }
  .dnb-icon svg [stroke] {
    stroke: currentColor; }
  .dnb-icon--small {
    font-size: 0.75rem; }
  .dnb-icon--default {
    font-size: 1rem; }
  .dnb-icon--medium {
    font-size: 1.5rem; }
  .dnb-icon--large {
    font-size: 2rem; }
  .dnb-icon--x-large {
    font-size: 2.5rem; }
  .dnb-icon--xx-large {
    font-size: 3rem; }
  .dnb-icon--custom-size {
    width: auto;
    height: auto; }
  .dnb-icon--auto {
    font-size: 1em; }
  .dnb-icon--auto > .dnb-icon--wrapper {
    display: inline-flex;
    align-items: center;
    justify-content: center; }
  h1 .dnb-icon,
  h2 .dnb-icon,
  h3 .dnb-icon,
  h4 .dnb-icon,
  h5 .dnb-icon,
  h6 .dnb-icon {
    vertical-align: middle; }
  @media screen and (-ms-high-contrast: none) {
    .dnb-icon {
      flex: none; } }

.dnb-button {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: var(--font-size-small);
  font-style: normal;
  line-height: var(--line-height-basis);
  color: var(--color-black-80, #333);
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-button *,
  .dnb-button ::before,
  .dnb-button ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-button ::before,
  .dnb-button ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
* Button component
*
*/
:root {
  --button-font-size: var(--font-size-basis);
  --button-font-size-small: var(--font-size-small);
  --button-width: 2.5rem;
  --button-height: 2.5rem;
  --button-width--small: 1.5rem;
  --button-height--small: 1.5rem;
  --button-width--medium: 2rem;
  --button-height--medium: 2rem;
  --button-width--large: 3rem;
  --button-height--large: 3rem;
  --button-icon-size: 1rem;
  --button-border-width: 0.0625rem;
  --button-border-width--hover: 0.1875rem;
  --button-border-radius: calc(var(--button-height) / 2);
  --button-border-radius--small: calc(var(--button-height--small) / 2);
  --button-border-radius--medium: calc(var(--button-height--medium) / 2);
  --button-border-radius--large: calc(var(--button-height--large) / 2); }

.dnb-button {
  user-select: none;
  -webkit-user-select: none;
  cursor: pointer;
  white-space: nowrap;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: var(--button-width);
  height: var(--button-height);
  padding: 0;
  border: var(--button-border-width) solid transparent;
  border-radius: var(--button-border-radius);
  text-decoration: none;
  font-size: var(--font-size-small); }
  .dnb-button,
  .dnb-core-style .dnb-button {
    line-height: var(--button-height); }
  .dnb-button__icon.dnb-icon svg:not([width]):not([height]) {
    width: var(--button-icon-size);
    height: var(--button-icon-size); }
  .dnb-button__text {
    font-size: var(--button-font-size);
    line-height: var(--line-height-x-small--em);
    color: inherit;
    background-color: inherit; }
  .dnb-button__bounding {
    position: absolute;
    background-color: transparent;
    width: var(--button-width);
    height: var(--button-height);
    border-radius: var(--button-border-radius);
    transform: scale(1.2); }
  .dnb-button--size-small {
    width: var(--button-width--small);
    height: var(--button-height--small);
    font-size: var(--button-font-size-small);
    border-radius: var(--button-border-radius--small); }
    .dnb-button--size-small,
    .dnb-core-style .dnb-button--size-small {
      line-height: var(--button-height--small); }
  .dnb-button--has-text.dnb-button--size-small {
    padding-left: 1rem;
    padding-right: 1rem; }
  .dnb-button--has-text.dnb-button--icon-position-left.dnb-button--size-small {
    padding-left: 0.5rem; }
  .dnb-button--has-text.dnb-button--icon-position-right.dnb-button--size-small {
    padding-right: 0.5rem; }
  .dnb-button--size-medium {
    width: var(--button-width--medium);
    height: var(--button-height--medium);
    border-radius: var(--button-border-radius--medium); }
    .dnb-button--size-medium,
    .dnb-core-style .dnb-button--size-medium {
      line-height: var(--button-height--medium); }
  .dnb-button--has-text.dnb-button--size-medium {
    padding-left: 1rem;
    padding-right: 1rem; }
  .dnb-button--has-text.dnb-button--icon-position-left.dnb-button--size-medium {
    padding-left: 0.5rem; }
  .dnb-button--has-text.dnb-button--icon-position-right.dnb-button--size-medium {
    padding-right: 0.5rem; }
  .dnb-button--size-large {
    width: var(--button-width--large);
    height: var(--button-height--large);
    border-radius: var(--button-border-radius--large); }
    .dnb-button--size-large,
    .dnb-core-style .dnb-button--size-large {
      line-height: var(--button-height--large); }
  .dnb-button--has-text.dnb-button--size-large {
    padding-left: 2rem;
    padding-right: 2rem; }
  .dnb-button--has-text.dnb-button--icon-position-left.dnb-button--size-large {
    padding-left: 1rem; }
  .dnb-button--has-text.dnb-button--icon-position-right.dnb-button--size-large {
    padding-right: 1rem; }
  .dnb-button--has-text {
    padding-left: 1.5rem;
    padding-right: 1.5rem;
    width: auto; }
  .dnb-button--has-text .dnb-button__icon {
    margin: 0 calc(var(--button-icon-size) / 2); }
  .dnb-button--has-text.dnb-button--icon-position-left {
    padding-left: 0.5rem; }
  .dnb-button--has-text.dnb-button--icon-position-right {
    padding-right: 0.5rem; }
  .dnb-button--has-text.dnb-button--has-icon .dnb-button__icon {
    order: 2; }
  .dnb-button--has-text.dnb-button--has-icon .dnb-button__text {
    order: 1; }
  .dnb-button--has-text.dnb-button--has-icon.dnb-button--icon-position-left .dnb-button__icon {
    order: 1; }
  .dnb-button--has-text.dnb-button--has-icon.dnb-button--icon-position-left .dnb-button__text {
    order: 2; }
  .dnb-button--reset {
    margin: 0;
    padding: 0;
    width: auto;
    height: auto;
    overflow: visible;
    border: none;
    border-radius: 0;
    background-color: transparent;
    appearance: none;
    box-shadow: none;
    color: inherit;
    font: inherit;
    text-align: inherit;
    line-height: inherit; }
    html:not([data-is-touch]) .dnb-button--reset:hover[disabled] {
      cursor: not-allowed; }
    html:not([data-is-touch]) .dnb-button--reset:hover:not([disabled]) {
      box-shadow: none;
      border: none; }
    .dnb-button--reset:not([disabled]):focus, .dnb-button--reset:not([disabled]):active {
      outline: none; }
      html[data-whatinput='keyboard'] .dnb-button--reset:not([disabled]):focus, html[data-whatinput='keyboard'] .dnb-button--reset:not([disabled]):active {
        box-shadow: 0 0 0 0.125rem var(--color-emerald-green);
        /* IE11 fix */
        border-color: transparent; }
    html[data-whatinput='mouse'] .dnb-button--reset:not([disabled]):focus,
    html[data-whatinput='mouse'] .dnb-button--reset:not([disabled]):active {
      box-shadow: none;
      color: inherit;
      border: none; }
  .dnb-button[type='button'], .dnb-button[type='reset'], .dnb-button[type='submit'] {
    appearance: none;
    -moz-appearance: none;
    -webkit-appearance: none; }
  .dnb-button[disabled] {
    cursor: not-allowed; }
  .dnb-form-row--vertical .dnb-form-row__content > .dnb-button {
    align-self: flex-start; }
  @media screen and (-ms-high-contrast: none) {
    .dnb-button {
      flex: none; }
      .dnb-button__icon, .dnb-button__text {
        transform: translateY(-0.0625rem) !important; } }

/* Firefox includes a hidden border which messes up button dimensions */
button.dnb-button::-moz-focus-inner {
  border: none; }

/*
* DNB FormLabel
*
*/
.dnb-form-label {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: var(--font-size-small);
  font-style: normal;
  line-height: var(--line-height-basis);
  color: var(--color-black-80, #333);
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-form-label *,
  .dnb-form-label ::before,
  .dnb-form-label ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-form-label ::before,
  .dnb-form-label ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
 * FormLabel component
 *
 */
.dnb-form-label {
  display: inline-block;
  width: auto;
  padding: 0;
  margin-right: 1rem;
  text-align: left;
  font-size: var(--font-size-basis);
  vertical-align: baseline;
  color: inherit; }
  .dnb-form-label--vertical {
    display: block;
    margin-right: 0;
    margin-bottom: 0.5rem; }
  .dnb-form-label--sr-only {
    width: 1px;
    margin-left: -1px;
    overflow: hidden; }
  .dnb-form-label[for]:not([disabled]) {
    user-select: none;
    -webkit-user-select: none;
    cursor: pointer; }
  .dnb-form-label[disabled] {
    cursor: not-allowed; }
  @media screen and (-ms-high-contrast: none) {
    .dnb-form-label {
      max-width: 60vw; } }

legend.dnb-form-label {
  display: inline-block; }

/*
* DNB FormStatus
*
*/
.dnb-form-status {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: var(--font-size-small);
  font-style: normal;
  line-height: var(--line-height-basis);
  color: var(--color-black-80, #333);
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-form-status *,
  .dnb-form-status ::before,
  .dnb-form-status ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-form-status ::before,
  .dnb-form-status ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
 * FormStatus component
 *
 */
.dnb-form-status {
  display: flex; }
  .dnb-form-status__shell {
    display: flex;
    justify-content: flex-start;
    align-items: flex-start;
    border-radius: var(--input-border-radius); }
  .dnb-form-status--text {
    padding: calc(0.5rem / 2) 1rem;
    cursor: text;
    color: inherit;
    line-height: var(--line-height-basis); }
  .dnb-icon + .dnb-form-status--text {
    padding-left: 0.5rem; }
  .dnb-form-status__shell > .dnb-icon {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 1.5em;
    height: 1.5em;
    margin-top: 0.25em;
    margin-left: 0.5em;
    color: inherit;
    font-size: var(--font-size-basis);
    transform: translateY(-0.125rem); }
  .dnb-form-status[hidden] {
    display: none; }
  .dnb-form-status--fade-in {
    overflow: hidden;
    max-height: 0;
    animation: form-status-fade-in 2s ease-out 400ms forwards; }

@keyframes form-status-fade-in {
  from {
    max-height: 0; }
  to {
    max-height: calc(var(--input-height) * 8); } }
  @media screen and (-ms-high-contrast: none) {
    .dnb-form-status__shell > .dnb-icon {
      border-width: 1px; } }

.dnb-input {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: var(--font-size-small);
  font-style: normal;
  line-height: var(--line-height-basis);
  color: var(--color-black-80, #333);
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-input *,
  .dnb-input ::before,
  .dnb-input ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-input ::before,
  .dnb-input ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
* Input component
*
*/
:root {
  --input-font-size: var(--font-size-basis);
  --input-font-size--large: var(--font-size-basis);
  --input-font-size--x-large: var(--font-size-large);
  --input-padding: 1rem;
  --input-padding--large: 1rem;
  --input-padding--x-large: 1rem;
  --input-height: 2rem;
  --input-height--large: 2.5rem;
  --input-height--x-large: 3rem;
  --input-border-width: 0.0625rem;
  --input-border-radius: calc(var(--input-height) / 2);
  --input-border-radius--large: calc(var(--input-height--large) / 2);
  --input-border-radius--x-large: calc(var(--input-height--x-large) / 2); }

.dnb-input {
  display: inline-flex;
  align-items: center;
  font-size: var(--input-font-small);
  line-height: var(--input-height); }
  .dnb-input__inner {
    display: inline-flex;
    flex-direction: column;
    width: auto; }
    .dnb-input__inner::before {
      content: '\\\\200C';
      display: inline-block;
      width: 0;
      height: 0;
      font-size: var(--font-size-small); }
  .dnb-input__shell {
    position: relative;
    display: flex;
    align-items: center;
    border: var(--input-border-width) solid var(--color-sea-green-alt); }
  .dnb-input__input {
    border: none;
    outline: none;
    word-break: normal;
    position: relative;
    z-index: 2; }
  .dnb-input input.dnb-input__input {
    font-size: var(--input-font-size);
    line-height: var(--font-size-basis); }
  .dnb-input__input[disabled] {
    user-select: none;
    -webkit-user-select: none;
    opacity: 1; }
  .dnb-input__shell, .dnb-input__input {
    height: var(--input-height);
    border-radius: var(--input-border-radius); }
  .dnb-input__placeholder, .dnb-input__input {
    width: 100%;
    padding-left: var(--input-padding);
    padding-right: var(--input-padding);
    text-align: left;
    color: inherit;
    background-color: transparent;
    font-size: var(--input-font-size); }
  .dnb-input__placeholder {
    pointer-events: none;
    position: absolute;
    z-index: 1;
    top: 0;
    left: 0;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis; }
  .dnb-input input.dnb-input__input[type='file'] {
    line-height: calc(var(--input-height) - 2px); }
  .dnb-input__input::-webkit-search-cancel-button {
    display: none; }
  .dnb-input__input::-ms-clear {
    display: none; }
  .dnb-input ::-webkit-file-upload-button {
    cursor: pointer;
    outline: none;
    color: var(--color-sea-green); }
    .dnb-input ::-webkit-file-upload-button:active, .dnb-input ::-webkit-file-upload-button:hover {
      color: var(--color-emerald-green); }
  .dnb-input--has-submit-element .dnb-input__placeholder,
  .dnb-input--has-submit-element .dnb-input__input {
    padding-right: calc(var(--input-padding) * 2.5); }
  .dnb-input__row {
    display: inline-flex;
    align-items: center; }
  .dnb-input__description {
    color: inherit;
    padding-left: 0.5rem; }
  .dnb-input__submit-element {
    margin-left: calc(1px - 1px - var(--input-height));
    line-height: var(--line-height-basis); }
  .dnb-input__submit-button {
    position: relative;
    z-index: 2;
    align-self: center;
    /* IE needs this to stay centered */ }
    .dnb-input__submit-button__button {
      border-radius: 50%; }
  .dnb-input--large {
    line-height: var(--input-height--large); }
    .dnb-input--large .dnb-input__shell,
    .dnb-input--large .dnb-input__input {
      height: var(--input-height--large);
      border-radius: var(--input-border-radius--large); }
    .dnb-input--large .dnb-input__placeholder,
    .dnb-input--large .dnb-input__input {
      padding-left: var(--input-padding--large);
      padding-right: var(--input-padding--large);
      font-size: var(--input-font-size--large); }
    .dnb-input--large .dnb-input__submit-element {
      margin-left: calc(1px - 1px - var(--input-height--large)); }
      .dnb-input--large .dnb-input__submit-element .dnb-button {
        width: var(--input-height--large);
        height: var(--input-height--large);
        line-height: var(--input-height--large); }
  .dnb-input--large.dnb-input--has-submit-element .dnb-input__placeholder,
  .dnb-input--large.dnb-input--has-submit-element .dnb-input__input {
    padding-right: calc(var(--input-padding--large) * 3); }
  .dnb-input--x-large {
    line-height: var(--input-height--x-large); }
    .dnb-input--x-large .dnb-input__shell,
    .dnb-input--x-large .dnb-input__input {
      height: var(--input-height--x-large);
      border-radius: var(--input-border-radius--x-large); }
    .dnb-input--x-large .dnb-input__placeholder,
    .dnb-input--x-large .dnb-input__input {
      padding-left: var(--input-padding--x-large);
      padding-right: var(--input-padding--x-large);
      font-size: var(--input-font-size--x-large); }
    .dnb-input--x-large .dnb-input__submit-element {
      margin-left: calc(1px - 1px - var(--input-height--x-large)); }
      .dnb-input--x-large .dnb-input__submit-element .dnb-button {
        width: var(--input-height--x-large);
        height: var(--input-height--x-large); }
  .dnb-input--x-large.dnb-input--has-submit-element .dnb-input__placeholder,
  .dnb-input--x-large.dnb-input--has-submit-element .dnb-input__input {
    padding-right: calc(var(--input-padding--x-large) * 3.5); }
  .dnb-input__align--center .dnb-input__placeholder,
  .dnb-input__align--center .dnb-input__input {
    text-align: center; }
  .dnb-input__align--right .dnb-input__placeholder,
  .dnb-input__align--right .dnb-input__input {
    text-align: right; }
  .dnb-input__inner > .dnb-form-status {
    order: 2;
    margin-top: 0.5rem; }
  .dnb-input--vertical {
    display: flex;
    flex-direction: column;
    align-items: flex-start; }
  .dnb-input--stretch {
    display: flex; }
  .dnb-input--stretch .dnb-input__inner {
    flex-grow: 1; }
  .dnb-input--stretch .dnb-input__shell {
    width: 100%; }
  .dnb-input--vertical.dnb-input--stretch .dnb-input__inner {
    width: 100%; }
  .dnb-input > .dnb-form-label {
    line-height: var(--line-height-basis); }
  .dnb-input[class*='__status'] {
    align-items: flex-start; }
    .dnb-input[class*='__status'] > .dnb-form-label {
      margin-top: 0.25rem; }
  @media (max-width: 40em) {
    .dnb-responsive-component .dnb-input {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      margin-bottom: 0.5rem; }
      .dnb-responsive-component .dnb-input__row {
        align-items: flex-start; }
      .dnb-responsive-component .dnb-input > .dnb-form-label {
        margin-bottom: 0.5rem; } }
  @media screen and (-ms-high-contrast: none) {
    .dnb-input {
      vertical-align: baseline; }
      .dnb-form-row--horizontal .dnb-input, .dnb-input:not(.dnb-input--stretch) {
        flex: none; }
      .dnb-input__inner {
        width: 100%; }
      .dnb-input__input, .dnb-input__placeholder {
        transform: translateY(-0.0625rem); } }
"
`;
