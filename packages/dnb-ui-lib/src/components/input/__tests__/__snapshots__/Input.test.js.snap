// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Input component have to match type="search" snapshot 1`] = `
<Input
  0={
    Object {
      "displayName": "Input",
      "props": Object {
        "align": "align",
        "attributes": "attributes",
        "autocomplete": "'on'",
        "children": "children",
        "class": "class",
        "className": "className",
        "custom_element": Object {},
        "custom_method": [Function],
        "description": "description",
        "disabled": "disabled",
        "id": "id",
        "inputElement": [Function],
        "input_class": "input_class",
        "input_state": "input_state",
        "label": "label",
        "label_direction": "'horizontal'",
        "on_blur": [Function],
        "on_change": [Function],
        "on_focus": [Function],
        "on_submit": [Function],
        "on_submit_blur": [Function],
        "on_submit_focus": [Function],
        "placeholder": "placeholder",
        "readOnly": "readOnly",
        "selectall": "selectall",
        "size": "size",
        "status": "status",
        "status_animation": "status_animation",
        "status_state": "status_state",
        "stretch": "stretch",
        "submitButton": [Function],
        "submit_button_icon": "submit_button_icon",
        "submit_button_title": "submit_button_title",
        "submit_button_variant": "custom type not supported, please set the correct value for submit_button_variant prop",
        "type": "type",
        "value": "value",
      },
    }
  }
  1={
    Object {
      "displayName": "SubmitButton",
      "props": Object {
        "disabled": "disabled",
        "icon": "icon",
        "icon_size": "icon_size",
        "id": "id",
        "on_submit": [Function],
        "on_submit_blur": [Function],
        "on_submit_focus": [Function],
        "title": "title",
        "value": "value",
        "variant": "custom type not supported, please set the correct value for variant prop",
      },
    }
  }
  align={null}
  attributes={null}
  autocomplete="off"
  class={null}
  className={null}
  custom_element={null}
  custom_method={null}
  description={null}
  disabled={false}
  id="input"
  inputElement={null}
  input_class={null}
  input_state={null}
  label={null}
  label_direction={null}
  on_blur={null}
  on_change={null}
  on_focus={null}
  on_submit={null}
  on_submit_blur={null}
  on_submit_focus={null}
  placeholder={null}
  readOnly={false}
  selectall={null}
  size={null}
  status={null}
  status_animation={null}
  status_state="error"
  stretch={null}
  submitButton={null}
  submit_button_icon="search"
  submit_button_title={null}
  submit_button_variant="secondary"
  type="search"
  value="test"
>
  <span
    className="dnb-input dnb-input--search dnb-input--has-submit-button"
  >
    <span
      className="dnb-input__inner"
    >
      <span
        className="dnb-input__shell"
        data-has-content="true"
        data-input-state="virgin"
      >
        <input
          autoComplete="off"
          className="dnb-input__input"
          id="input"
          name="input"
          onBlur={[Function]}
          onChange={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          type="search"
          value="test"
        />
      </span>
      <SubmitButton
        0={
          Object {
            "displayName": "Input",
            "props": Object {
              "align": "align",
              "attributes": "attributes",
              "autocomplete": "'on'",
              "children": "children",
              "class": "class",
              "className": "className",
              "custom_element": Object {},
              "custom_method": [Function],
              "description": "description",
              "disabled": "disabled",
              "id": "id",
              "inputElement": [Function],
              "input_class": "input_class",
              "input_state": "input_state",
              "label": "label",
              "label_direction": "'horizontal'",
              "on_blur": [Function],
              "on_change": [Function],
              "on_focus": [Function],
              "on_submit": [Function],
              "on_submit_blur": [Function],
              "on_submit_focus": [Function],
              "placeholder": "placeholder",
              "readOnly": "readOnly",
              "selectall": "selectall",
              "size": "size",
              "status": "status",
              "status_animation": "status_animation",
              "status_state": "status_state",
              "stretch": "stretch",
              "submitButton": [Function],
              "submit_button_icon": "submit_button_icon",
              "submit_button_title": "submit_button_title",
              "submit_button_variant": "custom type not supported, please set the correct value for submit_button_variant prop",
              "type": "type",
              "value": "value",
            },
          }
        }
        1={
          Object {
            "displayName": "SubmitButton",
            "props": Object {
              "disabled": "disabled",
              "icon": "icon",
              "icon_size": "icon_size",
              "id": "id",
              "on_submit": [Function],
              "on_submit_blur": [Function],
              "on_submit_focus": [Function],
              "title": "title",
              "value": "value",
              "variant": "custom type not supported, please set the correct value for variant prop",
            },
          }
        }
        attributes={null}
        custom_element={null}
        custom_method={null}
        disabled={false}
        icon="search"
        icon_size={null}
        id={null}
        input_state={null}
        on_blur={null}
        on_change={null}
        on_focus={null}
        on_submit={null}
        on_submit_blur={null}
        on_submit_focus={null}
        size={null}
        title={null}
        value="test"
        variant="secondary"
      >
        <span
          className="dnb-input__submit-button"
          data-input-state="virgin"
        >
          <Button
            bounding={false}
            class={null}
            className="dnb-input__submit-button__button"
            custom_element={null}
            custom_method={null}
            disabled={null}
            href={null}
            icon="search"
            icon_position="right"
            icon_size={null}
            id={null}
            innerRef={null}
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            on_click={null}
            size={null}
            text={null}
            title={null}
            type="submit"
            value="test"
            variant="secondary"
          >
            <button
              className="dnb-button dnb-button--secondary dnb-button--size-medium dnb-button--icon-position-right dnb-button--has-icon dnb-input__submit-button__button"
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onMouseOut={[Function]}
              type="submit"
              value="test"
            >
              <Content
                bounding={false}
                class={null}
                className="dnb-input__submit-button__button"
                content={null}
                custom_element={null}
                custom_method={null}
                disabled={null}
                href={null}
                icon="search"
                icon_position="right"
                icon_size={null}
                id={null}
                innerRef={null}
                isIconOnly={true}
                onBlur={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                on_click={null}
                size={null}
                text={null}
                title={null}
                type="submit"
                value="test"
                variant="secondary"
              >
                <IconPrimary
                  alt={null}
                  aria-hidden={false}
                  attributes={null}
                  class={null}
                  className="dnb-button__icon"
                  color={null}
                  height={null}
                  icon="search"
                  key="button-icon"
                  modifier={null}
                  size={null}
                  title={null}
                  width={null}
                >
                  <span
                    alt="search"
                    aria-hidden={false}
                    aria-label="search"
                    className="dnb-icon dnb-button__icon"
                    role="img"
                  >
                    <search>
                      <svg
                        fill="none"
                        height={17}
                        viewBox="0 0 17 17"
                        width={17}
                      >
                        <g
                          clipPath="url(#clip-06a943)"
                          stroke="#000"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={1.5}
                        >
                          <path
                            d="M9.055 11.937a5.445 5.445 0 1 0-4.26-10.023 5.445 5.445 0 0 0 4.26 10.023zm1.72-1.162L15 14.999"
                          />
                        </g>
                        <defs>
                          <clipPath
                            id="clip-06a943"
                          >
                            <path
                              d="M0 0h16v16H0z"
                              fill="#fff"
                              transform="scale(1.02995)"
                            />
                          </clipPath>
                        </defs>
                      </svg>
                    </search>
                  </span>
                </IconPrimary>
              </Content>
            </button>
          </Button>
        </span>
      </SubmitButton>
    </span>
  </span>
</Input>
`;

exports[`Input component have to match type="text" snapshot 1`] = `
<Input
  0={
    Object {
      "displayName": "Input",
      "props": Object {
        "align": "align",
        "attributes": "attributes",
        "autocomplete": "'on'",
        "children": "children",
        "class": "class",
        "className": "className",
        "custom_element": Object {},
        "custom_method": [Function],
        "description": "description",
        "disabled": "disabled",
        "id": "id",
        "inputElement": [Function],
        "input_class": "input_class",
        "input_state": "input_state",
        "label": "label",
        "label_direction": "'horizontal'",
        "on_blur": [Function],
        "on_change": [Function],
        "on_focus": [Function],
        "on_submit": [Function],
        "on_submit_blur": [Function],
        "on_submit_focus": [Function],
        "placeholder": "placeholder",
        "readOnly": "readOnly",
        "selectall": "selectall",
        "size": "size",
        "status": "status",
        "status_animation": "status_animation",
        "status_state": "status_state",
        "stretch": "stretch",
        "submitButton": [Function],
        "submit_button_icon": "submit_button_icon",
        "submit_button_title": "submit_button_title",
        "submit_button_variant": "custom type not supported, please set the correct value for submit_button_variant prop",
        "type": "type",
        "value": "value",
      },
    }
  }
  1={
    Object {
      "displayName": "SubmitButton",
      "props": Object {
        "disabled": "disabled",
        "icon": "icon",
        "icon_size": "icon_size",
        "id": "id",
        "on_submit": [Function],
        "on_submit_blur": [Function],
        "on_submit_focus": [Function],
        "title": "title",
        "value": "value",
        "variant": "custom type not supported, please set the correct value for variant prop",
      },
    }
  }
  align={null}
  attributes={null}
  autocomplete="off"
  class={null}
  className={null}
  custom_element={null}
  custom_method={null}
  description={null}
  disabled={false}
  id="input"
  inputElement={null}
  input_class={null}
  input_state={null}
  label={null}
  label_direction={null}
  on_blur={null}
  on_change={null}
  on_focus={null}
  on_submit={null}
  on_submit_blur={null}
  on_submit_focus={null}
  placeholder={null}
  readOnly={false}
  selectall={null}
  size={null}
  status={null}
  status_animation={null}
  status_state="error"
  stretch={null}
  submitButton={null}
  submit_button_icon="search"
  submit_button_title={null}
  submit_button_variant="secondary"
  type="text"
  value="test"
>
  <span
    className="dnb-input dnb-input--text"
  >
    <span
      className="dnb-input__inner"
    >
      <span
        className="dnb-input__shell"
        data-has-content="true"
        data-input-state="virgin"
      >
        <input
          autoComplete="off"
          className="dnb-input__input"
          id="input"
          name="input"
          onBlur={[Function]}
          onChange={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          type="text"
          value="test"
        />
      </span>
    </span>
  </span>
</Input>
`;

exports[`Input scss have to match default theme snapshot 1`] = `
"/*
* Input theme
*
*/
/**
 * This file is only used to make themes independent
 * so that they can get imported individually, without the core styles
 *
 */
/*
 * Utilities
 */
:root {
  --input-text-color: var(--color-sea-green);
  --input-text-color--focus: var(--color-sea-green);
  --input-text-color--changed: var(--color-emerald-green);
  --input-text-color--disabled: var(--color-sea-green-alt-30);
  --input-background-color: var(--color-white);
  --input-background-color--focus: var(--color-white);
  --input-background-color--changed: var(--color-white);
  --input-background-color--disabled: var(--color-mint-green-12);
  --input-border-color: var(--color-sea-green-alt);
  --input-border-color--focus: var(--color-emerald-green);
  --input-border-color--changed: var(--color-sea-green-alt);
  --input-border-color--disabled: var(--color-sea-green-alt-30); }

.dnb-input {
  color: var(--input-text-color); }
  .dnb-input__inner {
    color: inherit; }
  .dnb-input__shell {
    color: inherit;
    background-color: var(--input-background-color);
    border: none;
    box-shadow: inset 0 0 0 var(--input-border-width) var(--input-border-color);
    border-color: transparent; }
    .dnb-input__shell[data-input-state='dirty'] {
      color: var(--input-text-color--changed);
      background-color: var(--input-background-color--changed); }
    .dnb-input__shell[data-input-state='disabled'] {
      color: var(--input-text-color--disabled);
      box-shadow: inset 0 0 0 var(--input-border-width) var(--input-border-color--disabled);
      border-color: transparent;
      background-color: var(--input-background-color--disabled); }
    .dnb-input__shell:not([data-input-state='disabled']):hover, .dnb-input__shell[data-input-state='focus'] {
      color: var(--input-text-color--focus);
      background-color: var(--input-background-color--focus);
      box-shadow: 0 0 0 0.125rem var(--input-border-color--focus);
      border-color: transparent; }
  .dnb-input:not([data-input-state='disabled']).dnb-input__submit-button svg {
    color: var(--color-sea-green); }
  .dnb-input__status--error .dnb-input__shell:not([data-input-state='focus']), .dnb-input__status--error .dnb-input__shell:not([data-input-state='focus']):not([data-input-state='disabled']):hover {
    box-shadow: 0 0 0 0.125rem var(--color-cherry-red);
    border-color: transparent; }
  .dnb-input__status--error .dnb-input__shell:not([data-input-state='focus']) ~ .dnb-input__submit-button .dnb-button__icon,
  .dnb-input__status--error .dnb-input__shell:not([data-input-state='focus']) ~ .dnb-input__submit-button .dnb-button--secondary .dnb-button__icon {
    color: var(--color-cherry-red); }
  .dnb-input__status--error .dnb-input__shell:not([data-input-state='focus']) ~ .dnb-input__submit-button .dnb-button {
    box-shadow: 0 0 0 0.125rem var(--color-cherry-red);
    border-color: transparent; }
  .dnb-input__input::selection {
    background-color: var(--color-mint-green);
    color: var(--input-text-color--focus);
    text-shadow: none; }
  .dnb-input__input:not([disabled]):not([readonly]):focus ~ .dnb-input__placeholder {
    display: none; }
  .dnb-input__shell[data-input-state='focus'][data-has-content='false'] .dnb-input__input:not([disabled]):not([readonly]) .dnb-input__placeholder {
    display: none; }
"
`;

exports[`Input scss have to match snapshot 1`] = `
"/*
* DNB Input
*
*/
/**
 * This file is only used to make components independent
 * so that they can get imported individually, without the core styles
 *
 */
/*
 * Utilities
 */
/*
 * Scopes
 *
 */
/*
 * Document Reset
 *
 */
/*
* DNB Button
*
*/
/*
* DNB icon
*
*/
/*
* Icon component
*
*/
.dnb-icon {
  display: inline-block;
  vertical-align: baseline;
  font-size: inherit;
  line-height: 1em;
  width: 1em;
  height: 1em; }
  .dnb-icon img,
  .dnb-icon svg {
    width: inherit;
    height: inherit;
    vertical-align: middle;
    shape-rendering: geometricPrecision; }
  .dnb-icon svg[width='100%'] {
    width: inherit; }
  .dnb-icon svg[height='100%'] {
    height: inherit; }
  .dnb-icon svg:not([fill]),
  .dnb-icon svg [fill] {
    fill: currentColor; }
  .dnb-icon svg [stroke] {
    stroke: currentColor; }
  .dnb-icon--small {
    width: 0.75rem;
    height: 0.75rem; }
  .dnb-icon--default {
    width: 1rem;
    height: 1rem; }
  .dnb-icon--medium {
    width: 1.5rem;
    height: 1.5rem; }
  .dnb-icon--large {
    width: 2rem;
    height: 2rem; }
  .dnb-icon--x-large {
    width: 2.5rem;
    height: 2.5rem; }
  .dnb-icon--xx-large {
    width: 3rem;
    height: 3rem; }
  .dnb-icon--custom-size {
    width: auto;
    height: auto; }

.dnb-button {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: 1rem;
  font-style: normal;
  line-height: 1.5rem;
  color: var(--color-black-80, #333);
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  font-variant-numeric: lining-nums;
  font-feature-settings: \\"lnum\\";
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-button *,
  .dnb-button ::before,
  .dnb-button ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-button ::before,
  .dnb-button ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
* Button component
*
*/
:root {
  --button-font-size: var(--font-size-default);
  --button-font-size-small: var(--font-size-small);
  --button-width: 2.5rem;
  --button-height: 2.5rem;
  --button-width--small: 1.5rem;
  --button-height--small: 1.5rem;
  --button-width--medium: 2rem;
  --button-height--medium: 2rem;
  --button-width--large: 3rem;
  --button-height--large: 3rem;
  --button-icon-size: 1rem;
  --button-border-width: 0.0625rem;
  --button-border-width--hover: 3px;
  --button-border-radius: calc(var(--button-height) / 2);
  --button-border-radius--small: calc(var(--button-height--small) / 2);
  --button-border-radius--medium: calc(var(--button-height--medium) / 2);
  --button-border-radius--large: calc(var(--button-height--large) / 2); }

.dnb-button {
  cursor: pointer;
  white-space: nowrap;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: var(--button-width);
  height: var(--button-height);
  padding: 0;
  border: var(--button-border-width) solid transparent;
  border-radius: var(--button-border-radius);
  text-decoration: none;
  /* Firefox includes a hidden border which messes up button dimensions */ }
  .dnb-button,
  .dnb-core-style .dnb-button {
    font-size: var(--button-font-size);
    line-height: var(--button-height); }
  .dnb-button__icon {
    line-height: 1em; }
    .dnb-button__icon:not(.dnb-icon) svg:not([width]):not([height]) {
      width: var(--button-icon-size);
      height: var(--button-icon-size); }
    @supports not (-ms-ime-align: auto) {
      .dnb-button__icon {
        transform: translateY(calc(1px - 1px - var(--button-border-width))); } }
  .dnb-button__text {
    line-height: 1em;
    color: inherit;
    background-color: inherit; }
    @supports not (-ms-ime-align: auto) {
      .dnb-button__text {
        transform: translateY(calc(1px - var(--button-border-width))); } }
  .dnb-button__bounding {
    position: absolute;
    background-color: transparent;
    width: var(--button-width);
    height: var(--button-height);
    border-radius: var(--button-border-radius);
    transform: scale(1.2); }
  .dnb-button--size-small {
    width: var(--button-width--small);
    height: var(--button-height--small);
    font-size: var(--button-font-size-small);
    line-height: var(--button-font-size-small);
    border-radius: var(--button-border-radius--small); }
  .dnb-button--has-text.dnb-button--size-small {
    padding-left: 1rem;
    padding-right: 1rem; }
  .dnb-button--has-text.dnb-button--icon-position-left.dnb-button--size-small {
    padding-left: 0.5rem; }
  .dnb-button--has-text.dnb-button--icon-position-right.dnb-button--size-small {
    padding-right: 0.5rem; }
  .dnb-button--size-medium {
    width: var(--button-width--medium);
    height: var(--button-height--medium);
    line-height: var(--button-height--medium);
    border-radius: var(--button-border-radius--medium); }
  .dnb-button--has-text.dnb-button--size-medium {
    padding-left: 1rem;
    padding-right: 1rem; }
  .dnb-button--has-text.dnb-button--icon-position-left.dnb-button--size-medium {
    padding-left: 0.5rem; }
  .dnb-button--has-text.dnb-button--icon-position-right.dnb-button--size-medium {
    padding-right: 0.5rem; }
  .dnb-button--size-large {
    width: var(--button-width--large);
    height: var(--button-height--large);
    line-height: var(--button-height--large);
    border-radius: var(--button-border-radius--large); }
  .dnb-button--has-text.dnb-button--size-large {
    padding-left: 2rem;
    padding-right: 2rem; }
  .dnb-button--has-text.dnb-button--icon-position-left.dnb-button--size-large {
    padding-left: 1rem; }
  .dnb-button--has-text.dnb-button--icon-position-right.dnb-button--size-large {
    padding-right: 1rem; }
  .dnb-button--has-text {
    padding-left: 1.5rem;
    padding-right: 1.5rem;
    width: auto; }
  .dnb-button--has-text .dnb-button__icon {
    margin: 0 calc(var(--button-icon-size) / 2); }
  .dnb-button--has-text.dnb-button--icon-position-left {
    padding-left: 0.5rem; }
  .dnb-button--has-text.dnb-button--icon-position-right {
    padding-right: 0.5rem; }
  .dnb-button--has-text.dnb-button--has-icon .dnb-button__icon {
    order: 2; }
  .dnb-button--has-text.dnb-button--has-icon .dnb-button__text {
    order: 1; }
  .dnb-button--has-text.dnb-button--has-icon.dnb-button--icon-position-left .dnb-button__icon {
    order: 1; }
  .dnb-button--has-text.dnb-button--has-icon.dnb-button--icon-position-left .dnb-button__text {
    order: 2; }
  .dnb-button--reset {
    margin: 0;
    padding: 0;
    width: auto;
    height: auto;
    overflow: visible;
    border: none;
    border-radius: 0;
    background-color: transparent;
    appearance: none;
    box-shadow: none;
    color: inherit;
    font: inherit;
    text-align: inherit;
    line-height: inherit; }
    :not([dnb-is-touch]) .dnb-button--reset:hover[disabled] {
      cursor: not-allowed; }
    :not([dnb-is-touch]) .dnb-button--reset:hover:not([disabled]) {
      box-shadow: none;
      border: none; }
    .dnb-button--reset:not([disabled]):focus, .dnb-button--reset:not([disabled]):active {
      outline: none; }
      html[data-whatinput='keyboard'] .dnb-button--reset:not([disabled]):focus, html[data-whatinput='keyboard'] .dnb-button--reset:not([disabled]):active {
        box-shadow: 0 0 0 0.125rem var(--color-emerald-green);
        border-color: transparent; }
    html[data-whatinput='mouse'] .dnb-button--reset:not([disabled]):focus,
    html[data-whatinput='mouse'] .dnb-button--reset:not([disabled]):active {
      box-shadow: none;
      color: inherit;
      border: none; }
  .dnb-button[disabled] {
    cursor: not-allowed; }
  button.dnb-button::-moz-focus-inner .dnb-button {
    border: none; }

a.dnb-button[type='button'] {
  appearance: none;
  -moz-appearance: none;
  -webkit-appearance: none; }

a.dnb-button .dnb-button__icon {
  transform: translateY(0); }

a.dnb-button .dnb-button__text {
  transform: translateY(1px); }

/*
* DNB FormLabel
*
*/
.dnb-form-label {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: 1rem;
  font-style: normal;
  line-height: 1.5rem;
  color: var(--color-black-80, #333);
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  font-variant-numeric: lining-nums;
  font-feature-settings: \\"lnum\\";
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-form-label *,
  .dnb-form-label ::before,
  .dnb-form-label ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-form-label ::before,
  .dnb-form-label ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
 * FormLabel component
 *
 */
.dnb-form-label {
  display: inline-block;
  width: auto;
  padding: 0;
  margin: 0;
  margin-right: 1rem;
  text-align: left;
  vertical-align: baseline;
  color: inherit; }
  .dnb-form-label--vertical {
    display: block;
    margin-right: 0;
    margin-bottom: 0.5rem; }
  .dnb-form-label[for]:not([disabled]) {
    user-select: none;
    cursor: pointer; }
  .dnb-form-label[disabled] {
    cursor: not-allowed; }

legend.dnb-form-label {
  display: inline-block; }

/*
* DNB FormStatus
*
*/
.dnb-form-status {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: 1rem;
  font-style: normal;
  line-height: 1.5rem;
  color: var(--color-black-80, #333);
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  font-variant-numeric: lining-nums;
  font-feature-settings: \\"lnum\\";
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-form-status *,
  .dnb-form-status ::before,
  .dnb-form-status ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-form-status ::before,
  .dnb-form-status ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
 * FormStatus component
 *
 */
.dnb-form-status {
  width: auto;
  display: flex;
  min-height: var(--input-height); }
  .dnb-form-status__shell {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    border-radius: var(--input-border-radius); }
  .dnb-form-status--text {
    padding: calc(0.5rem / 2) 1rem;
    cursor: text;
    color: var(--color-emerald-green);
    line-height: 1.5rem; }
  .dnb-icon + .dnb-form-status--text {
    padding-left: 0.5rem; }
  .dnb-form-status__shell > .dnb-icon {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 1.5em;
    height: 1.5em;
    margin-left: 0.5rem;
    color: inherit;
    font-size: 1rem;
    border-radius: 50%;
    border: 1px solid;
    border-color: currentColor; }
  .dnb-form-status[hidden] {
    display: none; }
  .dnb-form-status--fade-in {
    height: 0;
    opacity: 0;
    animation: fade-in 600ms ease-out 1 200ms forwards; }

@keyframes fade-in {
  from {
    opacity: 0;
    height: 0; }
  to {
    opacity: 1;
    height: var(--input-height); } }

.dnb-input {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: 1rem;
  font-style: normal;
  line-height: 1.5rem;
  color: var(--color-black-80, #333);
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  font-variant-numeric: lining-nums;
  font-feature-settings: \\"lnum\\";
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-input *,
  .dnb-input ::before,
  .dnb-input ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-input ::before,
  .dnb-input ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
* Input component
*
*/
:root {
  --input-font-size: 1rem;
  --input-font-size--medium: 1.5rem;
  --input-font-size--large: 2rem;
  --input-padding: 1rem;
  --input-padding--medium: 1.5rem;
  --input-padding--large: 2rem;
  --input-height: 2rem;
  --input-height--medium: 3rem;
  --input-height--large: 4rem;
  --input-border-width: 0.0625rem;
  --input-border-radius: calc(var(--input-height) / 2);
  --input-border-radius--medium: calc(var(--input-height--medium) / 2);
  --input-border-radius--large: calc(var(--input-height--large) / 2); }

.dnb-input {
  display: inline-flex;
  align-items: center; }
  .dnb-input__inner {
    display: inline-flex;
    flex-direction: column;
    width: auto;
    font-size: var(--input-font-size); }
  .dnb-input__shell {
    position: relative;
    display: flex;
    align-items: center;
    overflow: hidden;
    border: var(--input-border-width) solid var(--color-sea-green-alt); }
  .dnb-input__input {
    border: none;
    outline: none;
    word-break: normal; }
  .dnb-input__input[disabled] {
    user-select: none; }
  .dnb-input__shell, .dnb-input__input {
    height: var(--input-height);
    line-height: var(--input-height);
    border-radius: var(--input-border-radius); }
  .dnb-input__placeholder, .dnb-input__input {
    width: 100%;
    padding-left: var(--input-padding);
    padding-right: var(--input-padding);
    text-align: left;
    color: inherit;
    font-size: inherit;
    line-height: inherit;
    background-color: transparent;
    transform: translateY(var(--input-border-width));
    font-variant-numeric: lining-nums;
    font-feature-settings: \\"lnum\\"; }
  .dnb-input__placeholder {
    pointer-events: none;
    position: absolute;
    z-index: 1;
    top: 0;
    left: 0;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis; }
  .dnb-input__input::-webkit-search-cancel-button {
    display: none; }
  .dnb-input__input::-ms-clear {
    display: none; }
  .dnb-input--has-submit-button .dnb-input__placeholder,
  .dnb-input--has-submit-button .dnb-input__input {
    padding-right: calc(var(--input-padding) * 2.5); }
  .dnb-input__description {
    color: inherit;
    padding-left: 0.5rem; }
  .dnb-input__submit-button {
    position: relative;
    z-index: 2;
    align-self: flex-end;
    margin-top: calc(1px - 1px - var(--input-height)); }
    .dnb-input__submit-button__button {
      border-radius: 50%; }
  .dnb-input--medium .dnb-input__shell,
  .dnb-input--medium .dnb-input__input {
    height: var(--input-height--medium);
    line-height: var(--input-height--medium);
    border-radius: var(--input-border-radius--medium); }
  .dnb-input--medium .dnb-input__placeholder,
  .dnb-input--medium .dnb-input__input {
    padding-left: var(--input-padding--medium);
    padding-right: var(--input-padding--medium);
    font-size: var(--input-font-size--medium); }
  .dnb-input--medium .dnb-input__submit-button {
    margin-top: calc(1px - 1px - var(--input-height--medium)); }
    .dnb-input--medium .dnb-input__submit-button__button {
      width: var(--input-height--medium);
      height: var(--input-height--medium); }
  .dnb-input--medium.dnb-input--has-submit-button .dnb-input__placeholder,
  .dnb-input--medium.dnb-input--has-submit-button .dnb-input__input {
    padding-right: calc(var(--input-padding--medium) * 2.5); }
  .dnb-input--large .dnb-input__shell,
  .dnb-input--large .dnb-input__input {
    height: var(--input-height--large);
    line-height: var(--input-height--large);
    border-radius: var(--input-border-radius--large); }
  .dnb-input--large .dnb-input__placeholder,
  .dnb-input--large .dnb-input__input {
    padding-left: var(--input-padding--large);
    padding-right: var(--input-padding--large);
    font-size: var(--input-font-size--large); }
  .dnb-input--large .dnb-input__submit-button {
    margin-top: calc(1px - 1px - var(--input-height--large)); }
    .dnb-input--large .dnb-input__submit-button__button {
      width: var(--input-height--large);
      height: var(--input-height--large); }
  .dnb-input--large.dnb-input--has-submit-button .dnb-input__placeholder,
  .dnb-input--large.dnb-input--has-submit-button .dnb-input__input {
    padding-right: calc(var(--input-padding--large) * 2.5); }
  .dnb-input__align--center .dnb-input__placeholder,
  .dnb-input__align--center .dnb-input__input {
    text-align: center; }
  .dnb-input__align--right .dnb-input__placeholder,
  .dnb-input__align--right .dnb-input__input {
    text-align: right; }
  .dnb-input__shell[data-has-content='true'] .dnb-input__placeholder,
  .dnb-input__shell[data-has-content='true'][data-input-state='focus'] .dnb-input__placeholder {
    display: none; }
  .dnb-input__inner > .dnb-form-status {
    margin-top: 0.5rem; }
  .dnb-input--vertical {
    display: flex;
    align-items: flex-start;
    flex-direction: column; }
  .dnb-input--stretch {
    display: flex; }
  .dnb-input--stretch .dnb-input__inner {
    flex: 1; }
  .dnb-input--stretch .dnb-input__shell {
    width: 100%; }
  .dnb-input[class*='__status'] {
    align-items: flex-start; }
    .dnb-input[class*='__status'] > .dnb-form-label {
      margin-top: 0.25rem; }
"
`;
