// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Modal component have to match snapshot 1`] = `
<Modal
  0={
    Object {
      "displayName": "Modal",
      "props": Object {
        "children": "children",
        "class": "class",
        "className": "className",
        "close_modal": [Function],
        "close_title": "close_title",
        "content_id": "content_id",
        "direct_dom_return": "direct_dom_return",
        "disabled": "disabled",
        "hide_close_button": "hide_close_button",
        "id": "id",
        "labelled_by": "labelled_by",
        "modal_content": "modal_content",
        "on_close": [Function],
        "on_close_prevent": [Function],
        "on_open": [Function],
        "open_modal": [Function],
        "open_state": "'opened'",
        "preventSetTriggerRef": true,
        "prevent_close": "prevent_close",
        "title": "title",
        "trigger_class": "trigger_class",
        "trigger_disabled": "trigger_disabled",
        "trigger_hidden": "trigger_hidden",
        "trigger_icon": "trigger_icon",
        "trigger_icon_position": "trigger_icon_position",
        "trigger_text": "trigger_text",
        "trigger_title": "trigger_title",
        "trigger_variant": "custom type not supported, please set the correct value for trigger_variant prop",
      },
    }
  }
  1={
    Object {
      "displayName": "ModalRoot",
      "props": Object {
        "children": "children",
        "direct_dom_return": "direct_dom_return",
      },
    }
  }
  2={
    Object {
      "displayName": "ModalContent",
      "props": Object {
        "children": "children",
        "class": "class",
        "className": "className",
        "closeModal": [Function],
        "close_title": "close_title",
        "content_id": "content_id",
        "hide_close_button": "hide_close_button",
        "labelled_by": "labelled_by",
        "modal_content": "modal_content",
        "prevent_close": "prevent_close",
        "title": "title",
      },
    }
  }
  3={
    Object {
      "displayName": "CloseButton",
      "props": Object {
        "className": "className",
        "on_click": [Function],
        "title": "title",
      },
    }
  }
  class={null}
  className={null}
  close_modal={null}
  close_title="close_title"
  content_id="modal_content_id"
  direct_dom_return={true}
  disabled={null}
  hide_close_button={false}
  id="modal_id"
  labelled_by={null}
  modal_content="unique_modal_content"
  on_close={null}
  on_close_prevent={null}
  on_open={null}
  open_modal={null}
  open_state={null}
  preventSetTriggerRef={true}
  prevent_close={false}
  title="modal_title"
  trigger_class={null}
  trigger_disabled={null}
  trigger_hidden={false}
  trigger_icon="question"
  trigger_icon_position="left"
  trigger_text={null}
  trigger_title="Open Modal"
  trigger_variant="secondary"
>
  <div
    className="dnb-modal"
  >
    <Button
      bounding={false}
      class={null}
      className="dnb-modal__trigger"
      custom_element={null}
      custom_method={null}
      disabled={false}
      href={null}
      icon="question"
      icon_position="left"
      icon_size="default"
      id="modal_id"
      innerRef={null}
      onClick={null}
      on_click={[Function]}
      size={null}
      text={null}
      title="Open Modal"
      type="button"
      variant="secondary"
    >
      <button
        aria-label="Open Modal"
        className="dnb-button dnb-button--secondary dnb-button--size-medium dnb-button--icon-position-left dnb-button--has-icon dnb-modal__trigger"
        id="modal_id"
        onClick={[Function]}
        onMouseOut={[Function]}
        title="Open Modal"
        type="button"
      >
        <Content
          bounding={false}
          class={null}
          className="dnb-modal__trigger"
          content={null}
          custom_element={null}
          custom_method={null}
          disabled={false}
          href={null}
          icon="question"
          icon_position="left"
          icon_size="default"
          id="modal_id"
          innerRef={null}
          isIconOnly={true}
          onClick={null}
          on_click={[Function]}
          size={null}
          text={null}
          title="Open Modal"
          type="button"
          variant="secondary"
        >
          <IconPrimary
            alt="Open Modal"
            aria-hidden={false}
            attributes={null}
            class={null}
            className="dnb-button__icon"
            color={null}
            height={null}
            icon="question"
            key="button-icon"
            modifier={null}
            size="default"
            title={null}
            width={null}
          >
            <span
              alt="Open Modal"
              aria-hidden={false}
              aria-label="Open Modal"
              className="dnb-icon dnb-icon--default dnb-button__icon"
              role="img"
            >
              <question>
                <svg
                  fill="none"
                  height={16}
                  viewBox="0 0 16 16"
                  width={16}
                >
                  <path
                    clipRule="evenodd"
                    d="M4.352 5.1c0-2.05 1.55-3.6 3.6-3.6 2.052 0 3.601 1.55 3.601 3.6 0 2.051-1.55 3.6-3.6 3.6a.75.75 0 0 0-.75.75v2.666a.75.75 0 0 0 1.5 0V10.15c2.506-.348 4.35-2.425 4.35-5.049 0-2.879-2.22-5.1-5.1-5.1-2.88 0-5.1 2.221-5.1 5.1a.75.75 0 0 0 1.5 0zm3.6 10.898c.659 0 1.097-.439 1.097-1.097 0-.658-.438-1.096-1.096-1.096-.658 0-1.097.438-1.097 1.096 0 .658.439 1.097 1.097 1.097z"
                    fill="#000"
                    fillRule="evenodd"
                  />
                </svg>
              </question>
            </span>
          </IconPrimary>
        </Content>
      </button>
    </Button>
    <ModalRoot
      0={
        Object {
          "displayName": "Modal",
          "props": Object {
            "children": "children",
            "class": "class",
            "className": "className",
            "close_modal": [Function],
            "close_title": "close_title",
            "content_id": "content_id",
            "direct_dom_return": "direct_dom_return",
            "disabled": "disabled",
            "hide_close_button": "hide_close_button",
            "id": "id",
            "labelled_by": "labelled_by",
            "modal_content": "modal_content",
            "on_close": [Function],
            "on_close_prevent": [Function],
            "on_open": [Function],
            "open_modal": [Function],
            "open_state": "'opened'",
            "preventSetTriggerRef": true,
            "prevent_close": "prevent_close",
            "title": "title",
            "trigger_class": "trigger_class",
            "trigger_disabled": "trigger_disabled",
            "trigger_hidden": "trigger_hidden",
            "trigger_icon": "trigger_icon",
            "trigger_icon_position": "trigger_icon_position",
            "trigger_text": "trigger_text",
            "trigger_title": "trigger_title",
            "trigger_variant": "custom type not supported, please set the correct value for trigger_variant prop",
          },
        }
      }
      1={
        Object {
          "displayName": "ModalRoot",
          "props": Object {
            "children": "children",
            "direct_dom_return": "direct_dom_return",
          },
        }
      }
      2={
        Object {
          "displayName": "ModalContent",
          "props": Object {
            "children": "children",
            "class": "class",
            "className": "className",
            "closeModal": [Function],
            "close_title": "close_title",
            "content_id": "content_id",
            "hide_close_button": "hide_close_button",
            "labelled_by": "labelled_by",
            "modal_content": "modal_content",
            "prevent_close": "prevent_close",
            "title": "title",
          },
        }
      }
      3={
        Object {
          "displayName": "CloseButton",
          "props": Object {
            "className": "className",
            "on_click": [Function],
            "title": "title",
          },
        }
      }
      class={null}
      className={null}
      closeModal={[Function]}
      close_modal={null}
      close_title="close_title"
      content_id="modal_content_id"
      direct_dom_return={true}
      hide_close_button={false}
      labelled_by="modal_id"
      modal_content="unique_modal_content"
      on_close={null}
      on_close_prevent={null}
      on_open={null}
      open_modal={null}
      prevent_close={false}
      title="modal_title"
      toggleOpenClose={[Function]}
    >
      <ModalContent
        0={
          Object {
            "displayName": "Modal",
            "props": Object {
              "children": "children",
              "class": "class",
              "className": "className",
              "close_modal": [Function],
              "close_title": "close_title",
              "content_id": "content_id",
              "direct_dom_return": "direct_dom_return",
              "disabled": "disabled",
              "hide_close_button": "hide_close_button",
              "id": "id",
              "labelled_by": "labelled_by",
              "modal_content": "modal_content",
              "on_close": [Function],
              "on_close_prevent": [Function],
              "on_open": [Function],
              "open_modal": [Function],
              "open_state": "'opened'",
              "preventSetTriggerRef": true,
              "prevent_close": "prevent_close",
              "title": "title",
              "trigger_class": "trigger_class",
              "trigger_disabled": "trigger_disabled",
              "trigger_hidden": "trigger_hidden",
              "trigger_icon": "trigger_icon",
              "trigger_icon_position": "trigger_icon_position",
              "trigger_text": "trigger_text",
              "trigger_title": "trigger_title",
              "trigger_variant": "custom type not supported, please set the correct value for trigger_variant prop",
            },
          }
        }
        1={
          Object {
            "displayName": "ModalRoot",
            "props": Object {
              "children": "children",
              "direct_dom_return": "direct_dom_return",
            },
          }
        }
        2={
          Object {
            "displayName": "ModalContent",
            "props": Object {
              "children": "children",
              "class": "class",
              "className": "className",
              "closeModal": [Function],
              "close_title": "close_title",
              "content_id": "content_id",
              "hide_close_button": "hide_close_button",
              "labelled_by": "labelled_by",
              "modal_content": "modal_content",
              "prevent_close": "prevent_close",
              "title": "title",
            },
          }
        }
        3={
          Object {
            "displayName": "CloseButton",
            "props": Object {
              "className": "className",
              "on_click": [Function],
              "title": "title",
            },
          }
        }
        class={null}
        className={null}
        closeModal={[Function]}
        close_modal={null}
        close_title="close_title"
        content_id="modal_content_id"
        hide_close_button={false}
        labelled_by="modal_id"
        modal_content="unique_modal_content"
        on_close={null}
        on_close_prevent={null}
        on_open={null}
        open_modal={null}
        prevent_close={false}
        title="modal_title"
        toggleOpenClose={[Function]}
      >
        <div
          aria-describedby="modal_content_id"
          aria-labelledby="modal_id"
          aria-modal="true"
          className="dnb-modal__content"
          onClick={[Function]}
          role="dialog"
        >
          <div
            className="dnb-modal__content__inner dnb-no-focus"
            id="modal_content_id"
            onClick={[Function]}
            onKeyDown={[Function]}
            onTouchStart={[Function]}
            tabIndex={-1}
          >
            <h1
              className="dnb-modal__title dnb-h2"
            >
              modal_title
            </h1>
            <CloseButton
              className={null}
              on_click={[Function]}
              title="close_title"
            >
              <Button
                bounding={false}
                class={null}
                className="dnb-modal__close-button"
                custom_element={null}
                custom_method={null}
                disabled={null}
                href={null}
                icon="close"
                icon_position="right"
                icon_size="medium"
                id={null}
                innerRef={null}
                onClick={null}
                on_click={[Function]}
                size="medium"
                text={null}
                title="close_title"
                type="button"
                variant="secondary"
              >
                <button
                  aria-label="close_title"
                  className="dnb-button dnb-button--secondary dnb-button--size-medium dnb-button--icon-position-right dnb-button--has-icon dnb-modal__close-button"
                  onClick={[Function]}
                  onMouseOut={[Function]}
                  title="close_title"
                  type="button"
                >
                  <Content
                    bounding={false}
                    class={null}
                    className="dnb-modal__close-button"
                    content={null}
                    custom_element={null}
                    custom_method={null}
                    disabled={null}
                    href={null}
                    icon="close"
                    icon_position="right"
                    icon_size="medium"
                    id={null}
                    innerRef={null}
                    isIconOnly={true}
                    onClick={null}
                    on_click={[Function]}
                    size="medium"
                    text={null}
                    title="close_title"
                    type="button"
                    variant="secondary"
                  >
                    <IconPrimary
                      alt="close_title"
                      aria-hidden={false}
                      attributes={null}
                      class={null}
                      className="dnb-button__icon"
                      color={null}
                      height={null}
                      icon="close"
                      key="button-icon"
                      modifier={null}
                      size="medium"
                      title={null}
                      width={null}
                    >
                      <span
                        alt="close_title"
                        aria-hidden={false}
                        aria-label="close_title"
                        className="dnb-icon dnb-icon--medium dnb-button__icon"
                        role="img"
                      >
                        <close_medium>
                          <svg
                            fill="none"
                            height={24}
                            viewBox="0 0 24 24"
                            width={24}
                          >
                            <path
                              clipRule="evenodd"
                              d="M4.78 3.914a.75.75 0 0 0-1.06 1.061l7.22 7.22-7.22 7.22a.75.75 0 0 0 1.06 1.06l7.22-7.22 7.22 7.22a.75.75 0 0 0 1.06-1.06l-7.22-7.22 7.22-7.22a.75.75 0 0 0-1.06-1.06L12 11.134l-7.22-7.22z"
                              fill="#000"
                              fillRule="evenodd"
                            />
                          </svg>
                        </close_medium>
                      </span>
                    </IconPrimary>
                  </Content>
                </button>
              </Button>
            </CloseButton>
            <div
              className="dnb-modal__wrapper"
            >
              unique_modal_content
            </div>
          </div>
        </div>
        <span
          aria-hidden="true"
          className="dnb-modal__overlay"
        />
      </ModalContent>
    </ModalRoot>
  </div>
</Modal>
`;

exports[`Modal scss have to match snapshot 1`] = `
"/*
* DNB Modal
*
*/
/**
 * This file is only used to make components independent
 * so that they can get imported individually, without the core styles
 *
 */
/*
 * Utilities
 */
/*
 * Scopes
 *
 */
/*
 * Document Reset
 *
 */
/*
* DNB Button
*
*/
/*
* DNB icon
*
*/
/*
* Icon component
*
*/
.dnb-icon {
  display: inline-block;
  vertical-align: baseline;
  font-size: inherit;
  line-height: 1em;
  width: 1em;
  height: 1em; }
  .dnb-icon img,
  .dnb-icon svg {
    width: inherit;
    height: inherit;
    vertical-align: middle;
    shape-rendering: geometricPrecision; }
  .dnb-icon svg[width='100%'] {
    width: inherit; }
  .dnb-icon svg[height='100%'] {
    height: inherit; }
  .dnb-icon svg:not([fill]),
  .dnb-icon svg [fill] {
    fill: currentColor; }
  .dnb-icon svg [stroke] {
    stroke: currentColor; }
  .dnb-icon--small {
    width: 0.75rem;
    height: 0.75rem; }
  .dnb-icon--default {
    width: 1rem;
    height: 1rem; }
  .dnb-icon--medium {
    width: 1.5rem;
    height: 1.5rem; }
  .dnb-icon--large {
    width: 2rem;
    height: 2rem; }
  .dnb-icon--x-large {
    width: 2.5rem;
    height: 2.5rem; }
  .dnb-icon--xx-large {
    width: 3rem;
    height: 3rem; }
  .dnb-icon--custom-size {
    width: auto;
    height: auto; }

.dnb-button {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: 1rem;
  font-style: normal;
  line-height: 1.5rem;
  color: var(--color-black-80, #333);
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  font-variant-numeric: lining-nums;
  font-feature-settings: \\"lnum\\";
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-button *,
  .dnb-button ::before,
  .dnb-button ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-button ::before,
  .dnb-button ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
* Button component
*
*/
:root {
  --button-font-size: var(--font-size-default);
  --button-font-size-small: var(--font-size-small);
  --button-width: 2.5rem;
  --button-height: 2.5rem;
  --button-width--small: 1.5rem;
  --button-height--small: 1.5rem;
  --button-width--medium: 2rem;
  --button-height--medium: 2rem;
  --button-width--large: 3rem;
  --button-height--large: 3rem;
  --button-icon-size: 1rem;
  --button-border-width: 0.0625rem;
  --button-border-width--hover: 3px;
  --button-border-radius: calc(var(--button-height) / 2);
  --button-border-radius--small: calc(var(--button-height--small) / 2);
  --button-border-radius--medium: calc(var(--button-height--medium) / 2);
  --button-border-radius--large: calc(var(--button-height--large) / 2); }

.dnb-button {
  cursor: pointer;
  white-space: nowrap;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: var(--button-width);
  height: var(--button-height);
  padding: 0;
  border: var(--button-border-width) solid transparent;
  border-radius: var(--button-border-radius);
  text-decoration: none;
  /* Firefox includes a hidden border which messes up button dimensions */ }
  .dnb-button,
  .dnb-core-style .dnb-button {
    font-size: var(--button-font-size);
    line-height: var(--button-height); }
  .dnb-button__icon {
    line-height: 1em; }
    .dnb-button__icon:not(.dnb-icon) svg:not([width]):not([height]) {
      width: var(--button-icon-size);
      height: var(--button-icon-size); }
    @supports not (-ms-ime-align: auto) {
      .dnb-button__icon {
        transform: translateY(calc(1px - 1px - var(--button-border-width))); } }
  .dnb-button__text {
    line-height: 1em;
    color: inherit;
    background-color: inherit; }
    @supports not (-ms-ime-align: auto) {
      .dnb-button__text {
        transform: translateY(calc(1px - var(--button-border-width))); } }
  .dnb-button__bounding {
    position: absolute;
    background-color: transparent;
    width: var(--button-width);
    height: var(--button-height);
    border-radius: var(--button-border-radius);
    transform: scale(1.2); }
  .dnb-button--size-small {
    width: var(--button-width--small);
    height: var(--button-height--small);
    font-size: var(--button-font-size-small);
    line-height: var(--button-font-size-small);
    border-radius: var(--button-border-radius--small); }
  .dnb-button--has-text.dnb-button--size-small {
    padding-left: 1rem;
    padding-right: 1rem; }
  .dnb-button--has-text.dnb-button--icon-position-left.dnb-button--size-small {
    padding-left: 0.5rem; }
  .dnb-button--has-text.dnb-button--icon-position-right.dnb-button--size-small {
    padding-right: 0.5rem; }
  .dnb-button--size-medium {
    width: var(--button-width--medium);
    height: var(--button-height--medium);
    line-height: var(--button-height--medium);
    border-radius: var(--button-border-radius--medium); }
  .dnb-button--has-text.dnb-button--size-medium {
    padding-left: 1rem;
    padding-right: 1rem; }
  .dnb-button--has-text.dnb-button--icon-position-left.dnb-button--size-medium {
    padding-left: 0.5rem; }
  .dnb-button--has-text.dnb-button--icon-position-right.dnb-button--size-medium {
    padding-right: 0.5rem; }
  .dnb-button--size-large {
    width: var(--button-width--large);
    height: var(--button-height--large);
    line-height: var(--button-height--large);
    border-radius: var(--button-border-radius--large); }
  .dnb-button--has-text.dnb-button--size-large {
    padding-left: 2rem;
    padding-right: 2rem; }
  .dnb-button--has-text.dnb-button--icon-position-left.dnb-button--size-large {
    padding-left: 1rem; }
  .dnb-button--has-text.dnb-button--icon-position-right.dnb-button--size-large {
    padding-right: 1rem; }
  .dnb-button--has-text {
    padding-left: 1.5rem;
    padding-right: 1.5rem;
    width: auto; }
  .dnb-button--has-text .dnb-button__icon {
    margin: 0 calc(var(--button-icon-size) / 2); }
  .dnb-button--has-text.dnb-button--icon-position-left {
    padding-left: 0.5rem; }
  .dnb-button--has-text.dnb-button--icon-position-right {
    padding-right: 0.5rem; }
  .dnb-button--has-text.dnb-button--has-icon .dnb-button__icon {
    order: 2; }
  .dnb-button--has-text.dnb-button--has-icon .dnb-button__text {
    order: 1; }
  .dnb-button--has-text.dnb-button--has-icon.dnb-button--icon-position-left .dnb-button__icon {
    order: 1; }
  .dnb-button--has-text.dnb-button--has-icon.dnb-button--icon-position-left .dnb-button__text {
    order: 2; }
  .dnb-button--reset {
    margin: 0;
    padding: 0;
    width: auto;
    height: auto;
    overflow: visible;
    border: none;
    border-radius: 0;
    background-color: transparent;
    appearance: none;
    box-shadow: none;
    color: inherit;
    font: inherit;
    text-align: inherit;
    line-height: inherit; }
    :not([dnb-is-touch]) .dnb-button--reset:hover[disabled] {
      cursor: not-allowed; }
    :not([dnb-is-touch]) .dnb-button--reset:hover:not([disabled]) {
      box-shadow: none;
      border: none; }
    .dnb-button--reset:not([disabled]):focus, .dnb-button--reset:not([disabled]):active {
      outline: none; }
      html[data-whatinput='keyboard'] .dnb-button--reset:not([disabled]):focus, html[data-whatinput='keyboard'] .dnb-button--reset:not([disabled]):active {
        box-shadow: 0 0 0 0.125rem var(--color-emerald-green);
        border-color: transparent; }
    html[data-whatinput='mouse'] .dnb-button--reset:not([disabled]):focus,
    html[data-whatinput='mouse'] .dnb-button--reset:not([disabled]):active {
      box-shadow: none;
      color: inherit;
      border: none; }
  .dnb-button[disabled] {
    cursor: not-allowed; }
  button.dnb-button::-moz-focus-inner .dnb-button {
    border: none; }

a.dnb-button[type='button'] {
  appearance: none;
  -moz-appearance: none;
  -webkit-appearance: none; }

a.dnb-button .dnb-button__icon {
  transform: translateY(0); }

a.dnb-button .dnb-button__text {
  transform: translateY(1px); }

.dnb-modal {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: 1rem;
  font-style: normal;
  line-height: 1.5rem;
  color: var(--color-black-80, #333);
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  font-variant-numeric: lining-nums;
  font-feature-settings: \\"lnum\\";
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-modal *,
  .dnb-modal ::before,
  .dnb-modal ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-modal ::before,
  .dnb-modal ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
 * Modal component
 *
 */
:root {
  --modal-z-index: 3000; }

[data-dnb-modal-active='true'] {
  user-select: none; }

#dnb-modal-root {
  position: absolute;
  top: 0;
  left: 0; }

.dnb-modal {
  display: inline-flex; }
  .dnb-modal__content {
    position: fixed;
    top: 0;
    left: 0;
    z-index: calc(var(--modal-z-index) + 1);
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    user-select: none; }
    .dnb-modal__content__inner {
      position: relative;
      padding: 2rem;
      max-width: calc(100vw - 1rem);
      max-height: 100vh;
      width: auto;
      height: auto;
      overflow-y: scroll;
      user-select: text;
      border: none;
      background: var(--color-white); }
      @media screen and (min-width: 50em) {
        .dnb-modal__content__inner {
          padding: 2rem 2rem 3rem;
          padding-right: 4rem;
          box-shadow: 0 1px 6px rgba(0, 0, 0, 0.16); } }
      @media screen and (max-width: 50em) {
        .dnb-modal__content__inner {
          max-width: 100%;
          width: 100%;
          height: 100%; } }
      @media screen and (max-width: 40em) {
        .dnb-modal__content__inner {
          padding: 2rem 1rem; } }
  .dnb-modal__title.dnb-h2,
  .dnb-core-style .dnb-modal__title.dnb-h2 {
    margin: 0; }
  .dnb-modal__wrapper {
    position: relative;
    z-index: 1;
    margin-top: 1.5rem; }
  .dnb-modal__close-button {
    position: absolute;
    top: 1rem;
    right: 1rem; }
    @media screen and (min-width: 40em) {
      .dnb-modal__close-button {
        top: 2rem;
        right: 2rem; } }
  .dnb-modal__overlay {
    position: fixed;
    z-index: var(--modal-z-index);
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.85); }
"
`;
