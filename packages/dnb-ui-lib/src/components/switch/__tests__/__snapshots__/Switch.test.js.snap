// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Switch component have to match snapshot 1`] = `
<Switch
  attributes="attributes"
  checked="checked"
  class="class"
  className="className"
  custom_element={Object {}}
  custom_method={[Function]}
  default_state="default_state"
  disabled="disabled"
  id="id"
  label="label"
  label_direction="horizontal"
  label_position="left"
  on_change={[Function]}
  on_state_update={[Function]}
  readOnly={false}
  status={null}
  status_animation="status_animation"
  status_state="status_state"
  title="title"
  value="value"
>
  <span
    className="dnb-switch dnb-switch--label-position-left className class"
  >
    <span
      className="dnb-switch__order"
    >
      <FormLabel
        class={null}
        className={null}
        direction={null}
        disabled="disabled"
        element="label"
        for_id="id"
        id="id-label"
        render_content={null}
        text="label"
        title={null}
        vertical={null}
      >
        <Element
          className="dnb-form-label"
          htmlFor="id"
          id="id-label"
          is="label"
        >
          <label
            className="dnb-form-label"
            htmlFor="id"
            id="id-label"
          >
            label
          </label>
        </Element>
      </FormLabel>
      <span
        className="dnb-switch__inner"
      >
        <span
          className="dnb-switch__shell"
        >
          <input
            aria-checked={false}
            aria-labelledby="id-label"
            checked={false}
            className="dnb-switch__input"
            id="id"
            name="id"
            onChange={[Function]}
            onKeyDown={[Function]}
            onMouseOut={[Function]}
            role="switch"
            title="title"
            type="checkbox"
            value=""
          />
          <span
            aria-hidden={true}
            className="dnb-switch__background"
            draggable={true}
            onDragStart={[Function]}
            onMouseDown={[Function]}
          />
          <span
            aria-hidden={true}
            className="dnb-switch__button"
          >
            <span
              className="dnb-switch__focus"
            >
              <span
                className="dnb-switch__focus__inner"
              />
            </span>
          </span>
        </span>
      </span>
    </span>
  </span>
</Switch>
`;

exports[`Switch scss have to match default theme snapshot 1`] = `
"/*
* Switch theme
*
*/
/**
 * This file is only used to make themes independent
 * so that they can get imported individually, without the core styles
 *
 */
/*
 * Utilities
 */
.dnb-switch {
  /*
    * When switched OFF
    * aka when the checkbox is not :checked
    */
  /*
    * When switched ON
    * aka when the checkbox is :checked
    */
  /*
    * Draw the circle / line
    *
    */
  /*
    * On disabled
    *
    */
  /*
    * On hover
    *
    */
  /*
    * On active
    *
    */
  /* stylelint-disable */
  /* stylelint-enable */
  /*
    * On focus
    *
    */
  /* stylelint-disable */
  /* stylelint-enable */
  /* stylelint-disable */
  /* stylelint-enable */
  /*
    * On error state
    *
    */ }
  .dnb-switch__background {
    position: relative;
    display: flex;
    flex-direction: row;
    align-items: center;
    overflow: hidden;
    background-color: var(--color-sea-green-alt-30); }
    .dnb-switch__background::after {
      content: '';
      position: absolute;
      transition: transform 0.3s ease-out, position 0.3s ease-out; }
      @media all and (-ms-high-contrast: none) {
        .dnb-switch__background::after {
          top: 0.25rem; } }
  .dnb-switch__input:not(:checked) ~ .dnb-switch__button {
    background-color: var(--color-white);
    border-color: var(--color-sea-green-alt); }
  .dnb-switch__input:checked ~ .dnb-switch__button {
    background-color: var(--color-sea-green); }
  .dnb-switch__input:not(:checked) ~ .dnb-switch__background::after {
    right: 0;
    transform: translateX(-0.3125rem);
    width: 0.5rem;
    height: 0.5rem;
    border-radius: 50%;
    border: 0.0625rem solid var(--color-sea-green); }
  .dnb-switch__input:checked ~ .dnb-switch__background::after {
    left: 0;
    transform: translateX(calc(0.5rem + 0.125rem));
    width: 0.0625rem;
    height: 0.5rem;
    border-radius: 0.0625rem;
    background-color: var(--color-sea-green); }
  .dnb-switch__input[disabled] ~ .dnb-switch__background {
    background-color: var(--color-mint-green-25); }
  .dnb-switch__input[disabled]:checked ~ .dnb-switch__background::after {
    background-color: var(--color-sea-green-alt-30); }
  .dnb-switch__input[disabled]:not(:checked) ~ .dnb-switch__background::after {
    border-color: var(--color-sea-green-alt-30); }
  .dnb-switch__input[disabled] ~ .dnb-switch__button {
    border-color: var(--color-sea-green-alt-30); }
  .dnb-switch__input[disabled]:checked ~ .dnb-switch__button {
    background-color: var(--color-sea-green-alt-30); }
  .dnb-switch__input:not([disabled]):not(:focus):not(:active):hover ~ .dnb-switch__button {
    border-color: var(--color-sea-green);
    background-color: var(--color-mint-green-50); }
  .dnb-switch__input:not([disabled]):active ~ .dnb-switch__button {
    background-color: var(--color-mint-green-50);
    border-color: transparent; }
  html[data-whatinput='keyboard'] .dnb-switch__input:not([disabled]):focus ~ .dnb-switch__button {
    border: none; }
  .dnb-switch__input:not([disabled]):focus ~ .dnb-switch__background,
  .dnb-switch__input:not([disabled]):active ~ .dnb-switch__background {
    outline: none; }
    html[data-whatinput='keyboard'] .dnb-switch__input:not([disabled]):focus ~ .dnb-switch__background, html[data-whatinput='keyboard']
    .dnb-switch__input:not([disabled]):active ~ .dnb-switch__background {
      box-shadow: 0 0 0 0.125rem var(--color-emerald-green);
      border-color: transparent; }
  .dnb-switch__input:not([disabled]):focus ~ .dnb-switch__button .dnb-switch__focus,
  .dnb-switch__input:not([disabled]):active ~ .dnb-switch__button .dnb-switch__focus {
    display: block; }
  .dnb-switch__input:not([disabled]):checked ~ .dnb-switch__button .dnb-switch__focus {
    transform: rotate(180deg); }
  .dnb-switch__input:not([disabled]):not(:checked):focus ~ .dnb-switch__button,
  .dnb-switch__input:not([disabled]):not(:checked):active ~ .dnb-switch__button {
    background-color: var(--color-mint-green-50); }
  .dnb-switch__status--error .dnb-switch__input:not([disabled]):not(:focus):hover ~ .dnb-switch__button {
    border-color: var(--color-cherry-red);
    background-color: var(--color-cherry-red-80); }
  .dnb-switch__status--error .dnb-switch__input:not([disabled]):not(:focus):not(:active):not(:hover) ~ .dnb-switch__button {
    border-color: var(--color-cherry-red-80); }
  .dnb-switch__status--error .dnb-switch__input:not([disabled]):not(:focus):not(:active):not(:hover):checked ~ .dnb-switch__button {
    background-color: var(--color-cherry-red); }
  .dnb-switch__status--error .dnb-switch__input:not([disabled]):not(:focus):not(:active) ~ .dnb-switch__background {
    background-color: var(--color-cherry-red-80);
    box-shadow: 0 0 0 0.125rem var(--color-cherry-red);
    border-color: transparent; }
  .dnb-switch__status--error .dnb-switch__input:not(:focus):not([disabled]):not(:active):checked ~ .dnb-switch__background::after {
    background-color: var(--color-cherry-red); }
  .dnb-switch__status--error .dnb-switch__input:not(:focus):not([disabled]):not(:active):not(:checked) ~ .dnb-switch__background::after {
    border-color: var(--color-cherry-red); }
  .dnb-switch__status--error .dnb-switch__input:not([disabled]):not(:focus):not(:active) ~ .dnb-switch__button .dnb-switch__focus {
    display: block;
    box-shadow: 0 0 0 0.125rem var(--color-cherry-red);
    border-color: transparent; }
  .dnb-switch__status--error .dnb-switch__input:not([disabled]):not(:focus):not(:active):checked ~ .dnb-switch__button .dnb-switch__focus {
    transform: rotate(180deg); }
  .dnb-switch > .dnb-form-status {
    transform: translateY(0.1875rem); }
"
`;

exports[`Switch scss have to match snapshot 1`] = `
"/*
* DNB Switch
*
*/
/**
 * This file is only used to make components independent
 * so that they can get imported individually, without the core styles
 *
 */
/*
 * Utilities
 */
/*
 * Scopes
 *
 */
/*
 * Document Reset
 *
 */
/*
* DNB FormLabel
*
*/
.dnb-form-label {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: 1rem;
  font-style: normal;
  line-height: 1.5rem;
  color: var(--color-black-80, #333);
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  font-variant-numeric: lining-nums;
  font-feature-settings: \\"lnum\\";
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-form-label *,
  .dnb-form-label ::before,
  .dnb-form-label ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-form-label ::before,
  .dnb-form-label ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
 * FormLabel component
 *
 */
.dnb-form-label {
  display: inline-block;
  width: auto;
  padding: 0;
  margin: 0;
  margin-right: 1rem;
  text-align: left;
  vertical-align: baseline;
  color: inherit; }
  .dnb-form-label--vertical {
    display: block;
    margin-right: 0;
    margin-bottom: 0.5rem; }
  .dnb-form-label[for]:not([disabled]) {
    user-select: none;
    cursor: pointer; }
  .dnb-form-label[disabled] {
    cursor: not-allowed; }

legend.dnb-form-label {
  display: inline-block; }

/*
* DNB FormStatus
*
*/
.dnb-form-status {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: 1rem;
  font-style: normal;
  line-height: 1.5rem;
  color: var(--color-black-80, #333);
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  font-variant-numeric: lining-nums;
  font-feature-settings: \\"lnum\\";
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-form-status *,
  .dnb-form-status ::before,
  .dnb-form-status ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-form-status ::before,
  .dnb-form-status ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
 * FormStatus component
 *
 */
.dnb-form-status {
  width: auto;
  display: flex;
  min-height: var(--input-height); }
  .dnb-form-status__shell {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    border-radius: var(--input-border-radius); }
  .dnb-form-status--text {
    padding: calc(0.5rem / 2) 1rem;
    cursor: text;
    color: var(--color-emerald-green);
    line-height: 1.5rem; }
  .dnb-icon + .dnb-form-status--text {
    padding-left: 0.5rem; }
  .dnb-form-status__shell > .dnb-icon {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 1.5em;
    height: 1.5em;
    margin-left: 0.5rem;
    color: inherit;
    font-size: 1rem;
    border-radius: 50%;
    border: 1px solid;
    border-color: currentColor; }
  .dnb-form-status[hidden] {
    display: none; }
  .dnb-form-status--fade-in {
    height: 0;
    opacity: 0;
    animation: fade-in 600ms ease-out 1 200ms forwards; }

@keyframes fade-in {
  from {
    opacity: 0;
    height: 0; }
  to {
    opacity: 1;
    height: var(--input-height); } }

.dnb-switch {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: 1rem;
  font-style: normal;
  line-height: 1.5rem;
  color: var(--color-black-80, #333);
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  font-variant-numeric: lining-nums;
  font-feature-settings: \\"lnum\\";
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-switch *,
  .dnb-switch ::before,
  .dnb-switch ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-switch ::before,
  .dnb-switch ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
* Switch component
*
*/
:root {
  --switch-height: 1.5rem;
  --switch-width: 2.5rem;
  --switch-border-width: 0.0625rem; }

.dnb-switch {
  display: inline-flex;
  flex-direction: column;
  vertical-align: middle;
  /*
    * When switched OFF
    * aka when the switch is not :checked
    */
  /*
    * When switched ON
    * aka when the switch is :checked
    */ }
  .dnb-switch__inner {
    display: inline-flex;
    flex-direction: column; }
  .dnb-switch__shell {
    user-select: none;
    position: relative;
    display: flex;
    align-items: center;
    transform: translateY(-0.0625rem); }
  .dnb-switch__focus, .dnb-switch__button {
    position: absolute;
    z-index: 4;
    width: var(--switch-height);
    height: var(--switch-height);
    border-radius: 50%; }
  .dnb-switch__button {
    left: 0;
    transform: translateX(0);
    transition: transform 160ms ease-out 125ms;
    border: var(--switch-border-width) solid transparent; }
    @media all and (-ms-high-contrast: none) {
      .dnb-switch__button {
        top: -0.25rem; } }
  .dnb-switch__input:not(:checked) ~ .dnb-switch__button {
    transform: translateX(0);
    transform: translateX(calc(1px - 1px - var(--switch-border-width))); }
  .dnb-switch__input:checked ~ .dnb-switch__button {
    transform: translateX(1rem);
    transform: translateX(calc(1rem + var(--switch-border-width))); }
  .dnb-switch__background {
    width: var(--switch-width);
    height: 1rem;
    border-radius: 0.8125rem; }
  .dnb-switch__focus {
    display: none;
    position: absolute;
    z-index: 2;
    width: 100%;
    height: 100%;
    transition: transform 150ms ease-out;
    transform: rotate(0deg);
    clip-path: polygon(50% 15%, 110% 15%, 110% -10%, -10% -10%, -10% 110%, 110% 110%, 110% 85%, 50% 85%);
    outline: none; }
    html[data-whatinput='keyboard'] .dnb-switch__focus {
      box-shadow: 0 0 0 0.125rem var(--color-emerald-green);
      border-color: transparent; }
  .dnb-switch__input {
    opacity: 0;
    position: absolute;
    left: 0;
    z-index: 5;
    width: 100%;
    height: var(--switch-height);
    margin: 0;
    padding: 0;
    border: 0; }
  .dnb-switch__input:not([disabled]) {
    cursor: pointer; }
  .dnb-switch__order {
    display: inline-flex;
    flex-direction: row;
    align-items: center; }
  .dnb-switch--label-position-left .dnb-switch__order .dnb-switch__inner {
    order: 2; }
  .dnb-switch--label-position-left .dnb-switch__order .dnb-form-label {
    order: 1;
    align-self: flex-start;
    line-height: 1rem; }
  .dnb-switch--label-position-left .dnb-switch__order .dnb-form-status {
    margin-top: 0.5rem; }
  .dnb-switch--label-position-right .dnb-switch__order {
    vertical-align: middle; }
    .dnb-switch--label-position-right .dnb-switch__order .dnb-switch__inner {
      order: 1; }
    .dnb-switch--label-position-right .dnb-switch__order .dnb-form-label {
      order: 2;
      margin-left: 1rem;
      margin-right: 0.5rem;
      line-height: 1rem; }
    .dnb-switch--label-position-right .dnb-switch__order + .dnb-form-status {
      vertical-align: bottom;
      margin-top: 0.5rem; }
"
`;
