// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Switch component have to match snapshot 1`] = `
<Switch
  attributes="attributes"
  checked="checked"
  class="class"
  className="className"
  custom_element={Object {}}
  custom_method={[Function]}
  default_state="default_state"
  disabled="disabled"
  global_status_id="global_status_id"
  id="id"
  label="label"
  label_direction="horizontal"
  label_position="left"
  on_change={[Function]}
  on_change_end={[Function]}
  on_state_update={[Function]}
  readOnly={false}
  size="default"
  skeleton="skeleton"
  status={null}
  status_animation="status_animation"
  status_state="status_state"
  suffix="suffix"
  title="title"
  value="value"
>
  <span
    className="dnb-switch dnb-switch--label-position-left dnb-form-component className class dnb-switch--default"
  >
    <span
      className="dnb-switch__order"
    >
      <FormLabel
        class={null}
        className={null}
        disabled="disabled"
        element="label"
        for_id="id"
        id="id-label"
        label_direction={null}
        skeleton="skeleton"
        sr_only={null}
        text="label"
        title={null}
        vertical={null}
      >
        <label
          aria-disabled={true}
          className="dnb-form-label"
          disabled={true}
          htmlFor="id"
          id="id-label"
        >
          label
        </label>
      </FormLabel>
      <span
        className="dnb-switch__inner"
      >
        <AlignmentHelper
          className={null}
        >
          <span
            aria-hidden={true}
            className="dnb-alignment-helper"
          />
        </AlignmentHelper>
        <span
          className="dnb-switch__shell"
        >
          <span
            className="dnb-switch__row"
          >
            <input
              aria-checked={false}
              aria-describedby="id-suffix"
              checked={false}
              className="dnb-switch__input"
              disabled={false}
              id="id"
              name="id"
              onChange={[Function]}
              onKeyDown={[Function]}
              role="switch"
              title="title"
              type="checkbox"
              value=""
            />
            <span
              aria-hidden={true}
              className="dnb-switch__background"
              draggable={true}
              onDragStart={[Function]}
              onMouseDown={[Function]}
            />
            <span
              aria-hidden={true}
              className="dnb-switch__button"
            >
              <span
                className="dnb-switch__focus"
              >
                <span
                  className="dnb-switch__focus__inner"
                />
              </span>
            </span>
          </span>
          <span
            className="dnb-switch__suffix"
            id="id-suffix"
          >
            <Suffix
              attributes="attributes"
              checked="checked"
              class="class"
              className="className"
              custom_element={Object {}}
              custom_method={[Function]}
              default_state="default_state"
              disabled="disabled"
              global_status_id="global_status_id"
              id="id"
              label="label"
              label_direction="horizontal"
              label_position="left"
              on_change={[Function]}
              on_change_end={[Function]}
              on_state_update={[Function]}
              readOnly={false}
              size="default"
              skeleton="skeleton"
              status={null}
              status_animation="status_animation"
              status_state="status_state"
              suffix="suffix"
              title="title"
              value="value"
            >
              suffix
            </Suffix>
          </span>
        </span>
      </span>
    </span>
  </span>
</Switch>
`;

exports[`Switch scss have to match default theme snapshot 1`] = `
"/*
* Switch theme
*
*/
/**
 * This file is only used to make themes independent
 * so that they can get imported individually, without the core styles
 *
 */
/*
 * Utilities
 */
.dnb-switch {
  /*
    * When switched OFF
    * aka when the checkbox is not :checked
    */
  /*
    * When switched ON
    * aka when the checkbox is :checked
    */
  /*
    * Draw the circle / line
    *
    */
  /*
    * On disabled
    *
    */
  /*
    * On focus
    *
    */
  /* stylelint-disable-next-line */
  /*
    * On hover
    *
    */
  /* stylelint-disable-next-line */
  /*
    * On active
    *
    */
  /* stylelint-disable-next-line */
  /*
    * On error state
    *
    */
  /* stylelint-disable-next-line */ }
  .dnb-switch__background {
    position: relative;
    display: flex;
    flex-direction: row;
    align-items: center;
    overflow: hidden;
    background-color: var(--color-sea-green-30); }
    .dnb-switch__background::after {
      content: '';
      position: absolute;
      transition: transform 0.3s ease-out, position 0.3s ease-out; }
      @media screen and (-ms-high-contrast: none) {
        .dnb-switch__background::after {
          top: 0.25rem; } }
  .dnb-switch__input:not(:checked) ~ .dnb-switch__button {
    background-color: var(--color-white);
    border-color: var(--color-sea-green); }
  .dnb-switch__input:checked ~ .dnb-switch__button {
    background-color: var(--color-sea-green); }
  .dnb-switch__input:not(:checked) ~ .dnb-switch__background::after {
    right: 0;
    transform: translateX(calc(var(--switch-width--medium) - 2.8rem));
    width: 0.5rem;
    height: 0.5rem;
    border-radius: 50%;
    border: 0.0625rem solid var(--color-sea-green); }
  .dnb-switch__input:checked ~ .dnb-switch__background::after {
    left: 0;
    transform: translateX(calc(var(--switch-width--medium) - 1.87rem));
    width: 0.0625rem;
    height: 0.5rem;
    border-radius: 0.0625rem;
    background-color: var(--color-sea-green); }
  .dnb-switch--large .dnb-switch__input:not(:checked) ~ .dnb-switch__background::after {
    width: 0.625rem;
    height: 0.625rem;
    transform: translateX(calc(var(--switch-width--large) - 3.7rem)); }
  .dnb-switch--large .dnb-switch__input:checked ~ .dnb-switch__background::after {
    height: 0.625rem;
    transform: translateX(calc(var(--switch-width--large) - 2.5rem)); }
  .dnb-switch__input[disabled] ~ .dnb-switch__background {
    background-color: var(--color-mint-green-25); }
  .dnb-switch__input[disabled]:checked ~ .dnb-switch__background::after {
    background-color: var(--color-sea-green-30); }
  .dnb-switch__input[disabled]:not(:checked) ~ .dnb-switch__background::after {
    border-color: var(--color-sea-green-30); }
  .dnb-switch__input[disabled] ~ .dnb-switch__button {
    border-color: var(--color-sea-green-30); }
  .dnb-switch__input[disabled]:checked ~ .dnb-switch__button {
    background-color: var(--color-sea-green-30); }
  html[data-whatinput='keyboard'] .dnb-switch__input:not([disabled]):focus ~ .dnb-switch__button {
    border: none; }
  html[data-whatinput='keyboard'] .dnb-switch__input:not([disabled]):not(:checked):focus ~ .dnb-switch__button {
    background-color: var(--color-mint-green-50); }
  .dnb-switch__input:not([disabled]):focus ~ .dnb-switch__background,
  .dnb-switch__input:not([disabled]):active ~ .dnb-switch__background {
    outline: none; }
    html[data-whatinput='keyboard'] .dnb-switch__input:not([disabled]):focus ~ .dnb-switch__background, html[data-whatinput='keyboard']
    .dnb-switch__input:not([disabled]):active ~ .dnb-switch__background {
      --border-color: var(--color-emerald-green);
      box-shadow: 0 0 0 0.125rem var(--border-color);
      border-color: transparent; }
      @media screen and (-ms-high-contrast: none) {
        html[data-whatinput='keyboard'] .dnb-switch__input:not([disabled]):focus ~ .dnb-switch__background, html[data-whatinput='keyboard']
        .dnb-switch__input:not([disabled]):active ~ .dnb-switch__background {
          box-shadow: 0 0 0 0.125rem var(--color-emerald-green); } }
  .dnb-switch__input:not([disabled]):focus ~ .dnb-switch__button .dnb-switch__focus,
  .dnb-switch__input:not([disabled]):active ~ .dnb-switch__button .dnb-switch__focus {
    display: block; }
  .dnb-switch__input:not([disabled]):checked ~ .dnb-switch__button .dnb-switch__focus {
    transform: rotate(180deg); }
  .dnb-switch__input:not([disabled]):not(:focus):not(:active):hover ~ .dnb-switch__button {
    border-color: var(--color-sea-green);
    background-color: var(--color-mint-green-50); }
  .dnb-switch__input:not([disabled]):active ~ .dnb-switch__button {
    background-color: var(--color-mint-green-50);
    border-color: transparent; }
  .dnb-switch__status--error .dnb-switch__input:not([disabled]):not(:focus):hover ~ .dnb-switch__button {
    border-color: var(--color-fire-red);
    background-color: var(--color-fire-red-8); }
  .dnb-switch__status--error .dnb-switch__input:not([disabled]):not(:focus):not(:active):not(:hover) ~ .dnb-switch__button {
    border-color: var(--color-fire-red-8); }
  .dnb-switch__status--error .dnb-switch__input:not([disabled]):not(:focus):not(:active):not(:hover):checked ~ .dnb-switch__button {
    background-color: var(--color-fire-red); }
  .dnb-switch__status--error .dnb-switch__input:not([disabled]):not(:focus):not(:active) ~ .dnb-switch__background {
    background-color: var(--color-fire-red-8);
    --border-color: var(--color-fire-red);
    box-shadow: 0 0 0 0.125rem var(--border-color);
    border-color: transparent; }
    @media screen and (-ms-high-contrast: none) {
      .dnb-switch__status--error .dnb-switch__input:not([disabled]):not(:focus):not(:active) ~ .dnb-switch__background {
        box-shadow: 0 0 0 0.125rem var(--color-fire-red); } }
  .dnb-switch__status--error .dnb-switch__input:not(:focus):not([disabled]):not(:active):checked ~ .dnb-switch__background::after {
    background-color: var(--color-fire-red); }
  .dnb-switch__status--error .dnb-switch__input:not(:focus):not([disabled]):not(:active):not(:checked) ~ .dnb-switch__background::after {
    border-color: var(--color-fire-red); }
  .dnb-switch__status--error .dnb-switch__input:not([disabled]):not(:focus):not(:active) ~ .dnb-switch__button .dnb-switch__focus {
    display: block;
    --border-color: var(--color-fire-red);
    box-shadow: 0 0 0 0.125rem var(--border-color);
    border-color: transparent; }
    @media screen and (-ms-high-contrast: none) {
      .dnb-switch__status--error .dnb-switch__input:not([disabled]):not(:focus):not(:active) ~ .dnb-switch__button .dnb-switch__focus {
        box-shadow: 0 0 0 0.125rem var(--color-fire-red); } }
  .dnb-switch__status--error .dnb-switch__input:not([disabled]):not(:focus):not(:active):checked ~ .dnb-switch__button .dnb-switch__focus {
    transform: rotate(180deg); }
  .dnb-switch > .dnb-form-status {
    transform: translateY(0.1875rem); }
"
`;

exports[`Switch scss have to match snapshot 1`] = `
"/*
* DNB Switch
*
*/
/**
 * This file is only used to make components independent
 * so that they can get imported individually, without the core styles
 *
 */
/*
 * Utilities
 */
/*
 * Scopes
 *
 */
/*
 * Document Reset
 *
 */
/*
* DNB FormLabel
*
*/
.dnb-form-label {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: var(--font-size-small);
  font-style: normal;
  line-height: var(--line-height-basis);
  color: var(--color-black-80, #333);
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  /**
  * Ensure consistency and use the same as HTML reset -> html {...}
  * between base and code package
  */
  -moz-tab-size: 4;
  tab-size: 4;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  word-break: break-word;
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-form-label *,
  .dnb-form-label ::before,
  .dnb-form-label ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-form-label ::before,
  .dnb-form-label ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
 * FormLabel component
 *
 */
.dnb-form-label {
  display: inline-block;
  width: auto;
  padding: 0;
  margin-right: 1rem;
  text-align: left;
  vertical-align: baseline;
  white-space: pre-wrap;
  word-break: normal;
  font-size: var(--font-size-basis);
  color: inherit; }
  .dnb-form-label--vertical {
    display: block;
    margin-right: 0;
    margin-bottom: 0.5rem; }
  .dnb-form-label--sr-only {
    width: 1px;
    margin: 0;
    padding: 0;
    margin-left: -1px;
    overflow: hidden;
    white-space: nowrap; }
  .dnb-form-label[for]:not([disabled]) {
    user-select: none;
    -webkit-user-select: none;
    cursor: pointer; }
  .dnb-form-label[disabled] {
    cursor: not-allowed; }
  @media screen and (-ms-high-contrast: none) {
    .dnb-form-label {
      max-width: 60vw; } }

legend.dnb-form-label {
  display: inline-block; }

/*
* DNB FormStatus
*
*/
.dnb-form-status {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: var(--font-size-small);
  font-style: normal;
  line-height: var(--line-height-basis);
  color: var(--color-black-80, #333);
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  /**
  * Ensure consistency and use the same as HTML reset -> html {...}
  * between base and code package
  */
  -moz-tab-size: 4;
  tab-size: 4;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  word-break: break-word;
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-form-status *,
  .dnb-form-status ::before,
  .dnb-form-status ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-form-status ::before,
  .dnb-form-status ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
 * FormStatus component
 *
 */
.dnb-form-status {
  display: flex; }
  .dnb-form-status__shell {
    display: flex;
    justify-content: flex-start;
    align-items: flex-start;
    min-width: inherit;
    border-radius: var(--input-border-radius); }
  .dnb-form-status--text {
    padding: calc(0.5rem / 2) 1rem;
    cursor: text;
    color: inherit;
    line-height: var(--line-height-basis);
    white-space: normal; }
    .dnb-form-status--text .dnb-anchor {
      font-size: inherit; }
  .dnb-icon + .dnb-form-status--text {
    padding-left: 0.5rem; }
  .dnb-form-status__shell > .dnb-icon {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 1.5em;
    height: 1.5em;
    margin-top: 0.25em;
    margin-left: 0.5em;
    color: inherit;
    font-size: var(--font-size-small); }
  .dnb-form-status[hidden] {
    display: none; }
  .dnb-form-status--fade-in {
    overflow: hidden;
    max-height: 0;
    animation: form-status-fade-in 2s ease-out 400ms forwards; }

@keyframes form-status-fade-in {
  from {
    max-height: 0; }
  to {
    max-height: calc(var(--input-height) * 8); } }
  @media screen and (-ms-high-contrast: none) {
    .dnb-form-status__shell > .dnb-icon {
      border-width: 1px; } }

.dnb-switch {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: var(--font-size-small);
  font-style: normal;
  line-height: var(--line-height-basis);
  color: var(--color-black-80, #333);
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  /**
  * Ensure consistency and use the same as HTML reset -> html {...}
  * between base and code package
  */
  -moz-tab-size: 4;
  tab-size: 4;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  word-break: break-word;
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-switch *,
  .dnb-switch ::before,
  .dnb-switch ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-switch ::before,
  .dnb-switch ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
* Switch component
*
*/
:root {
  --switch-width--medium: 2.5rem;
  --switch-height--medium: 1.5rem;
  --switch-width--large: 3.25rem;
  --switch-height--large: 2rem;
  --switch-border-width--medium: 0.0625rem;
  --switch-border-width--large: 0.125rem; }

.dnb-switch {
  display: inline-flex;
  flex-direction: column;
  font-size: var(--font-size-small);
  line-height: var(--line-height-basis);
  /*
    * When switched OFF
    * aka when the switch is not :checked
    */
  /*
  * When switched ON
  * aka when the switch is :checked
  */ }
  .dnb-switch__inner {
    display: inline-flex;
    flex-direction: column;
    justify-content: center;
    font-size: var(--font-size-basis); }
  .dnb-switch__shell {
    user-select: none;
    -webkit-user-select: none;
    position: relative;
    display: flex;
    align-items: center; }
  .dnb-switch--large {
    line-height: var(--switch-height--large); }
  .dnb-switch--large .dnb-switch__shell {
    height: var(--switch-height--large); }
  .dnb-switch__row {
    display: inline-flex;
    align-items: center;
    height: var(--switch-height--medium); }
  .dnb-switch__focus, .dnb-switch__button {
    position: absolute;
    z-index: 4;
    border-radius: 50%; }
  .dnb-switch__button {
    left: 0;
    width: var(--switch-height--medium);
    height: var(--switch-height--medium);
    transform: translateX(0);
    transition: transform 160ms ease-out 125ms;
    border: var(--switch-border-width--medium) solid transparent; }
    .dnb-switch--large .dnb-switch__button {
      width: var(--switch-height--large);
      height: var(--switch-height--large);
      border-width: var(--switch-border-width--large); }
  .dnb-switch__focus {
    display: none;
    position: absolute;
    z-index: 2;
    width: 100%;
    height: 100%;
    transition: transform 150ms ease-out;
    transform: rotate(0deg);
    clip-path: polygon(50% 15%, 110% 15%, 110% -10%, -10% -10%, -10% 110%, 110% 110%, 110% 85%, 50% 85%);
    outline: none; }
    html[data-whatinput='keyboard'] .dnb-switch__focus {
      --border-color: var(--color-emerald-green);
      box-shadow: 0 0 0 0.125rem var(--border-color);
      border-color: transparent; }
      @media screen and (-ms-high-contrast: none) {
        html[data-whatinput='keyboard'] .dnb-switch__focus {
          box-shadow: 0 0 0 0.125rem var(--color-emerald-green); } }
  .dnb-switch__input:not(:checked) ~ .dnb-switch__button {
    transform: translateX(0);
    transform: translateX(calc(1px - 1px - var(--switch-border-width--medium))); }
  .dnb-switch__input:checked ~ .dnb-switch__button {
    transform: translateX(1rem);
    transform: translateX(calc( var(--switch-width--medium) - 1.5rem + var(--switch-border-width--medium))); }
  .dnb-switch--large .dnb-switch__input:not(:checked) ~ .dnb-switch__button {
    transform: translateX(calc(1px - 1px - var(--switch-border-width--large))); }
  .dnb-switch--large .dnb-switch__input:checked ~ .dnb-switch__button {
    transform: translateX(calc( var(--switch-width--large) - 2rem + var(--switch-border-width--large))); }
  .dnb-switch__background {
    width: var(--switch-width--medium);
    height: calc(var(--switch-height--medium) - 0.5rem);
    border-radius: calc(var(--switch-height--medium) - 0.5rem / 2); }
    .dnb-switch--large .dnb-switch__background {
      width: var(--switch-width--large);
      height: calc(var(--switch-height--large) - 0.75rem);
      border-radius: calc(var(--switch-height--large) - 0.75rem / 2); }
  .dnb-switch__input {
    opacity: 0;
    position: absolute;
    left: 0;
    right: 0;
    z-index: 5;
    display: block;
    width: var(--switch-width--medium);
    height: var(--switch-height--medium);
    margin: 0;
    padding: 0;
    border: 0; }
    .dnb-switch--large .dnb-switch__input {
      width: var(--switch-width--large);
      height: var(--switch-height--large); }
  .dnb-switch__input:not([disabled]) {
    cursor: pointer; }
  .dnb-switch .dnb-form-label {
    padding-right: 0.5rem;
    margin-right: 0;
    margin-left: 0;
    margin-bottom: 0; }
  .dnb-switch__order {
    display: inline-flex; }
  .dnb-switch__suffix {
    margin-left: 0.5rem;
    order: 4;
    line-height: var(--line-height-basis); }
  .dnb-switch--label-position-left .dnb-switch__suffix {
    margin-left: 1rem; }
  .dnb-switch--label-position-left .dnb-switch__order .dnb-switch__inner {
    order: 2; }
  .dnb-switch--label-position-left .dnb-switch__order .dnb-form-label {
    order: 1;
    align-self: flex-start; }
  .dnb-switch--label-position-left .dnb-switch__order .dnb-form-status {
    order: 3;
    margin-top: 0.5rem; }
  .dnb-switch--label-position-right .dnb-switch__order .dnb-switch__inner {
    order: 1; }
  .dnb-switch--label-position-right .dnb-switch__order .dnb-form-label {
    order: 2;
    padding-left: 0.5rem; }
  .dnb-switch--label-position-right .dnb-switch__order .dnb-form-status {
    order: 3;
    margin-top: 0.5rem; }
  .dnb-switch.dnb-skeleton .dnb-switch__input[disabled] ~ .dnb-switch__button,
  .dnb-switch.dnb-skeleton .dnb-switch__input[disabled] ~ .dnb-switch__background::after {
    border-color: var(--skeleton-color); }
  .dnb-switch.dnb-skeleton .dnb-switch__input[disabled] ~ .dnb-switch__background {
    background-color: var(--skeleton-color); }
  .dnb-switch.dnb-skeleton .dnb-switch__input[disabled]:not(:checked) ~ .dnb-switch__background::after {
    border-color: var(--skeleton-color--contrast); }
  @media screen and (-ms-high-contrast: none) {
    .dnb-switch {
      vertical-align: text-bottom; }
      .dnb-switch__order {
        align-items: flex-start; }
      .dnb-switch__shell {
        transform: translateY(0); }
      .dnb-switch__input, .dnb-switch__focus, .dnb-switch__button {
        top: 0;
        bottom: 0;
        margin: auto 0; } }
  @supports (-ms-ime-align: auto) {
    .dnb-switch__input:not(:checked) ~ .dnb-switch__button {
      transform: translateX(0); }
    .dnb-switch__input:checked ~ .dnb-switch__button {
      transform: translateX(calc(var(--switch-width--medium) - 1.5rem)); } }
"
`;
