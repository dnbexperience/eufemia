// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ToggleButton component have to match snapshot 1`] = `
<ToggleButton
  attributes="attributes"
  checked="checked"
  class="class"
  className="className"
  custom_element={Object {}}
  custom_method={[Function]}
  disabled="disabled"
  global_status_id="global_status_id"
  icon="icon"
  icon_position="left"
  id="toggle-button"
  label="label"
  label_direction="horizontal"
  left_component="left_component"
  on_change={[Function]}
  on_state_update={[Function]}
  readOnly={false}
  status={null}
  status_animation="status_animation"
  status_state="status_state"
  text="text"
  title="title"
  value="value"
  variant="checkbox"
>
  <span
    className="dnb-toggle-button dnb-toggle-button--horizontal className class"
  >
    <FormLabel
      class={null}
      className={null}
      direction="horizontal"
      disabled="disabled"
      element="label"
      for_id="toggle-button"
      id="toggle-button-label"
      label_direction={null}
      render_content={null}
      text="label"
      title={null}
      vertical={null}
    >
      <Element
        className="dnb-form-label dnb-form-label--horizontal"
        htmlFor="toggle-button"
        id="toggle-button-label"
        is="label"
      >
        <label
          className="dnb-form-label dnb-form-label--horizontal"
          htmlFor="toggle-button"
          id="toggle-button-label"
        >
          label
        </label>
      </Element>
    </FormLabel>
    <span
      className="dnb-toggle-button__inner"
    >
      <span
        className="dnb-toggle-button__shell"
      >
        <Button
          aria-disabled={true}
          aria-pressed="false"
          bounding={false}
          class={null}
          className="dnb-toggle-button__button"
          custom_element={null}
          custom_method={null}
          disabled="disabled"
          href={null}
          icon="icon"
          icon_position={null}
          icon_size={null}
          id="toggle-button"
          innerRef={null}
          onClick={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          on_click={null}
          size={null}
          text="text"
          title="title"
          type="button"
          variant="secondary"
        >
          <button
            aria-disabled={true}
            aria-pressed="false"
            className="dnb-button dnb-button--secondary dnb-button--icon-position-right dnb-button--has-text dnb-button--has-icon dnb-toggle-button__button"
            id="toggle-button"
            onClick={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseOut={[Function]}
            title="title"
            type="button"
          >
            <Content
              aria-disabled={true}
              aria-pressed="false"
              bounding={false}
              class={null}
              className="dnb-toggle-button__button"
              content={
                <span
                  className="dnb-toggle-button__component"
                >
                  <Checkbox
                    aria-hidden={true}
                    attributes={null}
                    checked={false}
                    class={null}
                    className={null}
                    custom_element={null}
                    custom_method={null}
                    default_state={null}
                    disabled="disabled"
                    global_status_id={null}
                    id="toggle-button-checkbox"
                    label={null}
                    label_position={null}
                    on_change={null}
                    on_state_update={null}
                    readOnly={false}
                    status={null}
                    status_animation={null}
                    status_state="error"
                    tabIndex="-1"
                    title={null}
                    value={null}
                  />
                </span>
              }
              custom_element={null}
              custom_method={null}
              disabled="disabled"
              href={null}
              icon="icon"
              icon_position={null}
              icon_size={null}
              id="toggle-button"
              innerRef={null}
              isIconOnly={false}
              onClick={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              on_click={null}
              size={null}
              text="text"
              title="title"
              type="button"
              variant="secondary"
            >
              <span
                className="dnb-toggle-button__component"
              >
                <Checkbox
                  aria-hidden={true}
                  attributes={null}
                  checked={false}
                  class={null}
                  className={null}
                  custom_element={null}
                  custom_method={null}
                  default_state={null}
                  disabled="disabled"
                  global_status_id={null}
                  id="toggle-button-checkbox"
                  label={null}
                  label_position={null}
                  on_change={null}
                  on_state_update={null}
                  readOnly={false}
                  status={null}
                  status_animation={null}
                  status_state="error"
                  tabIndex="-1"
                  title={null}
                  value={null}
                >
                  <span
                    className="dnb-checkbox"
                  >
                    <span
                      className="dnb-checkbox__order"
                    >
                      <span
                        className="dnb-checkbox__inner"
                      >
                        <span
                          className="dnb-checkbox__shell"
                        >
                          <input
                            aria-checked={false}
                            aria-disabled={true}
                            aria-hidden={true}
                            checked={false}
                            className="dnb-checkbox__input"
                            disabled="disabled"
                            id="toggle-button-checkbox"
                            name="toggle-button-checkbox"
                            onChange={[Function]}
                            onKeyDown={[Function]}
                            onMouseOut={[Function]}
                            tabIndex="-1"
                            title={null}
                            type="checkbox"
                            value=""
                          />
                          <span
                            aria-hidden={true}
                            className="dnb-checkbox__helper"
                          >
                            -
                          </span>
                          <span
                            aria-hidden={true}
                            className="dnb-checkbox__button"
                          >
                            <span
                              className="dnb-checkbox__focus"
                            />
                          </span>
                          <CheckSVG>
                            <svg
                              aria-hidden={true}
                              className="dnb-checkbox__gfx"
                              fill="none"
                              height="24"
                              viewBox="0 0 24 24"
                              width="24"
                            >
                              <path
                                d="M5.86 12.95a.75.75 0 1 0-1.22.86l1.22-.86zm2.15 4.34l.62-.42-.01-.01-.61.43zm.94.52l.02-.75-.02.75zm.98-.46l-.6-.47v.01l.6.46zm9.4-10.7a.75.75 0 0 0-1.17-.93l1.18.93zm-14.7 7.16l2.76 3.91 1.23-.86-2.76-3.91-1.22.86zm2.75 3.9c.35.52.93.84 1.55.85l.04-1.5a.43.43 0 0 1-.34-.19l-1.25.84zm1.55.85c.62.02 1.22-.26 1.6-.76l-1.2-.9a.43.43 0 0 1-.36.16l-.04 1.5zm1.59-.75l8.82-11.16-1.18-.93-8.82 11.16 1.18.93z"
                              />
                            </svg>
                          </CheckSVG>
                        </span>
                      </span>
                    </span>
                  </span>
                </Checkbox>
              </span>
              <span
                className="dnb-button__text"
                key="button-text"
              >
                text
              </span>
              <IconPrimary
                alt={null}
                aria-hidden={true}
                attributes={null}
                class={null}
                className="dnb-button__icon"
                color={null}
                height={null}
                icon="icon"
                key="button-icon"
                modifier={null}
                size={null}
                title={null}
                width={null}
              />
            </Content>
          </button>
        </Button>
      </span>
    </span>
  </span>
</ToggleButton>
`;

exports[`ToggleButton group component have to match group snapshot 1`] = `
<ToggleButtonGroup
  attributes={null}
  class={null}
  className={null}
  custom_element={null}
  custom_method={null}
  disabled={null}
  global_status_id={null}
  id="group"
  label="Label"
  label_direction={null}
  layout_direction="row"
  left_component={null}
  multiselect={null}
  name={null}
  no_fieldset={null}
  on_change={null}
  status={null}
  status_animation={null}
  status_state="error"
  title={null}
  variant={null}
  vertical={null}
>
  <div
    className="dnb-toggle-button-group dnb-toggle-button-group--row"
  >
    <FormRow
      class={null}
      className={null}
      direction={null}
      disabled={null}
      global_status_id={null}
      id="group"
      indent={null}
      indent_offset={null}
      label="Label"
      label_class={null}
      label_direction={null}
      label_id="group-label"
      no_fieldset={null}
      no_label={false}
      render_content={null}
      section_spacing={null}
      section_style={null}
      skipContentWrapperIfNested={true}
      vertical={null}
      wrap={null}
    >
      <Fieldset
        className={null}
        useFieldset={true}
      >
        <fieldset
          className="dnb-form-row__fieldset"
        >
          <div
            className="dnb-form-row"
          >
            <FormLabel
              class={null}
              className="dnb-form-row__label"
              direction={null}
              disabled={false}
              element="legend"
              for_id={null}
              id="group-label"
              label_direction={null}
              render_content={null}
              text="Label"
              title={null}
              vertical={null}
            >
              <Element
                className="dnb-form-label dnb-form-row__label"
                id="group-label"
                is="legend"
              >
                <legend
                  className="dnb-form-label dnb-form-row__label"
                  id="group-label"
                >
                  Label
                </legend>
              </Element>
            </FormLabel>
            <div
              className="dnb-form-row__content dnb-form-row__content--default"
            >
              <span
                aria-labelledby="group-label"
                className="dnb-toggle-button-group__shell"
                id="group"
                role="group"
              >
                <ToggleButton
                  attributes={null}
                  checked={null}
                  class={null}
                  className={null}
                  custom_element={null}
                  custom_method={null}
                  disabled={null}
                  global_status_id={null}
                  icon={null}
                  icon_position="right"
                  id="toggle-button-1"
                  label={null}
                  label_direction={null}
                  left_component={null}
                  on_change={null}
                  on_state_update={null}
                  readOnly={false}
                  status={null}
                  status_animation={null}
                  status_state="error"
                  text="ToggleButton 1"
                  title={null}
                  value=""
                  variant={null}
                >
                  <span
                    className="dnb-toggle-button dnb-toggle-button--checked"
                  >
                    <span
                      className="dnb-toggle-button__inner"
                    >
                      <span
                        className="dnb-toggle-button__shell"
                      >
                        <Button
                          aria-pressed="true"
                          bounding={false}
                          class={null}
                          className="dnb-toggle-button__button"
                          custom_element={null}
                          custom_method={null}
                          disabled={null}
                          href={null}
                          icon={null}
                          icon_position={null}
                          icon_size={null}
                          id="toggle-button-1"
                          innerRef={null}
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          on_click={null}
                          size={null}
                          text="ToggleButton 1"
                          title={null}
                          type="button"
                          variant="secondary"
                        >
                          <button
                            aria-pressed="true"
                            className="dnb-button dnb-button--secondary dnb-button--has-text dnb-toggle-button__button"
                            id="toggle-button-1"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseOut={[Function]}
                            type="button"
                          >
                            <Content
                              aria-pressed="true"
                              bounding={false}
                              class={null}
                              className="dnb-toggle-button__button"
                              content={null}
                              custom_element={null}
                              custom_method={null}
                              disabled={null}
                              href={null}
                              icon={null}
                              icon_position={null}
                              icon_size={null}
                              id="toggle-button-1"
                              innerRef={null}
                              isIconOnly={false}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              on_click={null}
                              size={null}
                              text="ToggleButton 1"
                              title={null}
                              type="button"
                              variant="secondary"
                            >
                              <span
                                className="dnb-button__text"
                                key="button-text"
                              >
                                ToggleButton 1
                              </span>
                            </Content>
                          </button>
                        </Button>
                      </span>
                    </span>
                  </span>
                </ToggleButton>
                <ToggleButton
                  attributes={null}
                  checked={true}
                  class={null}
                  className={null}
                  custom_element={null}
                  custom_method={null}
                  disabled={null}
                  global_status_id={null}
                  icon={null}
                  icon_position="right"
                  id="toggle-button-2"
                  label={null}
                  label_direction={null}
                  left_component={null}
                  on_change={null}
                  on_state_update={null}
                  readOnly={false}
                  status={null}
                  status_animation={null}
                  status_state="error"
                  text="ToggleButton 2"
                  title={null}
                  value=""
                  variant={null}
                >
                  <span
                    className="dnb-toggle-button dnb-toggle-button--checked"
                  >
                    <span
                      className="dnb-toggle-button__inner"
                    >
                      <span
                        className="dnb-toggle-button__shell"
                      >
                        <Button
                          aria-pressed="true"
                          bounding={false}
                          class={null}
                          className="dnb-toggle-button__button"
                          custom_element={null}
                          custom_method={null}
                          disabled={null}
                          href={null}
                          icon={null}
                          icon_position={null}
                          icon_size={null}
                          id="toggle-button-2"
                          innerRef={null}
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          on_click={null}
                          size={null}
                          text="ToggleButton 2"
                          title={null}
                          type="button"
                          variant="secondary"
                        >
                          <button
                            aria-pressed="true"
                            className="dnb-button dnb-button--secondary dnb-button--has-text dnb-toggle-button__button"
                            id="toggle-button-2"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseOut={[Function]}
                            type="button"
                          >
                            <Content
                              aria-pressed="true"
                              bounding={false}
                              class={null}
                              className="dnb-toggle-button__button"
                              content={null}
                              custom_element={null}
                              custom_method={null}
                              disabled={null}
                              href={null}
                              icon={null}
                              icon_position={null}
                              icon_size={null}
                              id="toggle-button-2"
                              innerRef={null}
                              isIconOnly={false}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              on_click={null}
                              size={null}
                              text="ToggleButton 2"
                              title={null}
                              type="button"
                              variant="secondary"
                            >
                              <span
                                className="dnb-button__text"
                                key="button-text"
                              >
                                ToggleButton 2
                              </span>
                            </Content>
                          </button>
                        </Button>
                      </span>
                    </span>
                  </span>
                </ToggleButton>
              </span>
            </div>
          </div>
        </fieldset>
      </Fieldset>
    </FormRow>
  </div>
</ToggleButtonGroup>
`;

exports[`ToggleButton scss have to match default theme snapshot 1`] = `
"/*
* ToggleButton theme
*
*/
/**
 * This file is only used to make themes independent
 * so that they can get imported individually, without the core styles
 *
 */
/*
 * Utilities
 */
.dnb-toggle-button {
  /* stylelint-disable */
  /* stylelint-enable */
  /*
    * On error state
    *
    */
  /* stylelint-disable */
  /* stylelint-enable */ }
  .dnb-toggle-button--checked .dnb-toggle-button__button:not([disabled]):not(:active),
  .dnb-toggle-button--checked .dnb-toggle-button__button:focus:not([disabled]):not(:active),
  .dnb-toggle-button--checked .dnb-toggle-button__button:hover:not([disabled]):not(:active) {
    background-color: var(--color-emerald-green);
    color: var(--color-mint-green); }
    .dnb-toggle-button--checked .dnb-toggle-button__button:not([disabled]):not(:active):not(:hover),
    .dnb-toggle-button--checked .dnb-toggle-button__button:focus:not([disabled]):not(:active):not(:hover),
    .dnb-toggle-button--checked .dnb-toggle-button__button:hover:not([disabled]):not(:active):not(:hover) {
      box-shadow: inset 0 0 0 0.0625rem var(--color-emerald-green);
      /* IE11 fix */
      border-color: transparent; }
      @media screen and (-ms-high-contrast: none) {
        .dnb-toggle-button--checked .dnb-toggle-button__button:not([disabled]):not(:active):not(:hover),
        .dnb-toggle-button--checked .dnb-toggle-button__button:focus:not([disabled]):not(:active):not(:hover),
        .dnb-toggle-button--checked .dnb-toggle-button__button:hover:not([disabled]):not(:active):not(:hover) {
          box-shadow: inset 0 0 0 1px var(--color-emerald-green); } }
  .dnb-toggle-button--checked .dnb-toggle-button__button:not([disabled]) .dnb-radio__button,
  .dnb-toggle-button--checked .dnb-toggle-button__button:focus:not([disabled]) .dnb-radio__button,
  .dnb-toggle-button--checked .dnb-toggle-button__button:hover:not([disabled]) .dnb-radio__button {
    background-color: transparent;
    border-color: var(--color-mint-green);
    box-shadow: 0 0 0 0.0318rem var(--color-mint-green); }
  .dnb-toggle-button--checked .dnb-toggle-button__button:not([disabled]) .dnb-radio__dot,
  .dnb-toggle-button--checked .dnb-toggle-button__button:focus:not([disabled]) .dnb-radio__dot,
  .dnb-toggle-button--checked .dnb-toggle-button__button:hover:not([disabled]) .dnb-radio__dot {
    background-color: var(--color-mint-green); }
  .dnb-toggle-button--checked .dnb-toggle-button__button:not([disabled]) .dnb-checkbox__button,
  .dnb-toggle-button--checked .dnb-toggle-button__button:focus:not([disabled]) .dnb-checkbox__button,
  .dnb-toggle-button--checked .dnb-toggle-button__button:hover:not([disabled]) .dnb-checkbox__button {
    background-color: var(--color-mint-green); }
  .dnb-toggle-button--checked .dnb-toggle-button__button:not([disabled]) .dnb-checkbox__gfx,
  .dnb-toggle-button--checked .dnb-toggle-button__button:focus:not([disabled]) .dnb-checkbox__gfx,
  .dnb-toggle-button--checked .dnb-toggle-button__button:hover:not([disabled]) .dnb-checkbox__gfx {
    color: var(--color-emerald-green); }
  .dnb-toggle-button--checked .dnb-toggle-button__button[disabled] .dnb-radio__button,
  .dnb-toggle-button--checked .dnb-toggle-button__button[disabled] .dnb-checkbox__button,
  .dnb-toggle-button--checked .dnb-toggle-button__button:focus[disabled] .dnb-radio__button,
  .dnb-toggle-button--checked .dnb-toggle-button__button:focus[disabled] .dnb-checkbox__button,
  .dnb-toggle-button--checked .dnb-toggle-button__button:hover[disabled] .dnb-radio__button,
  .dnb-toggle-button--checked .dnb-toggle-button__button:hover[disabled] .dnb-checkbox__button {
    box-shadow: none; }
  .dnb-toggle-button--checked .dnb-toggle-button__button:not([disabled]):not(:active):not(:hover):focus,
  .dnb-toggle-button--checked .dnb-toggle-button__button:focus:not([disabled]):not(:active):not(:hover):focus,
  .dnb-toggle-button--checked .dnb-toggle-button__button:hover:not([disabled]):not(:active):not(:hover):focus {
    outline: none; }
    html[data-whatinput='keyboard'] .dnb-toggle-button--checked .dnb-toggle-button__button:not([disabled]):not(:active):not(:hover):focus, html[data-whatinput='keyboard']
    .dnb-toggle-button--checked .dnb-toggle-button__button:focus:not([disabled]):not(:active):not(:hover):focus, html[data-whatinput='keyboard']
    .dnb-toggle-button--checked .dnb-toggle-button__button:hover:not([disabled]):not(:active):not(:hover):focus {
      box-shadow: 0 0 0 0.125rem var(--color-mint-green);
      /* IE11 fix */
      border-color: transparent; }
  .dnb-toggle-button__button:not([disabled]):active .dnb-radio__button,
  .dnb-toggle-button--checked .dnb-toggle-button__button:not([disabled]):active .dnb-radio__button {
    background-color: transparent;
    border-color: var(--color-sea-green-alt);
    box-shadow: 0 0 0 0.0318rem var(--color-sea-green-alt); }
  .dnb-toggle-button__button:not([disabled]):active .dnb-radio__dot,
  .dnb-toggle-button--checked .dnb-toggle-button__button:not([disabled]):active .dnb-radio__dot {
    background-color: var(--color-sea-green-alt); }
  .dnb-toggle-button__button:not([disabled]):active .dnb-checkbox__button,
  .dnb-toggle-button--checked .dnb-toggle-button__button:not([disabled]):active .dnb-checkbox__button {
    background-color: transparent;
    border-color: var(--color-sea-green-alt);
    box-shadow: 0 0 0 0.0318rem var(--color-sea-green-alt); }
  .dnb-toggle-button__button:not([disabled]):active .dnb-checkbox__gfx,
  .dnb-toggle-button--checked .dnb-toggle-button__button:not([disabled]):active .dnb-checkbox__gfx {
    color: var(--color-sea-green-alt); }
  .dnb-toggle-button__status--error .dnb-toggle-button__button:not([disabled]):not(:focus):not(:active) {
    background-color: var(--color-white);
    color: var(--color-cherry-red);
    box-shadow: inset 0 0 0 0.0625rem var(--color-cherry-red);
    /* IE11 fix */
    border-color: transparent; }
    @media screen and (-ms-high-contrast: none) {
      .dnb-toggle-button__status--error .dnb-toggle-button__button:not([disabled]):not(:focus):not(:active) {
        box-shadow: inset 0 0 0 1px var(--color-cherry-red); } }
    .dnb-toggle-button__status--error .dnb-toggle-button__button:not([disabled]):not(:focus):not(:active):hover {
      box-shadow: 0 0 0 0.125rem var(--color-cherry-red); }
  .dnb-toggle-button--checked.dnb-toggle-button__status--error .dnb-toggle-button__button:not([disabled]):not(:focus):not(:active) {
    background-color: var(--color-cherry-red);
    color: var(--color-white); }
    .dnb-toggle-button--checked.dnb-toggle-button__status--error .dnb-toggle-button__button:not([disabled]):not(:focus):not(:active):hover {
      box-shadow: 0 0 0 0.125rem var(--color-cherry-red); }
  .dnb-toggle-button--checked.dnb-toggle-button__status--error .dnb-radio__input:not([disabled]):not(:focus):not(:active) ~ .dnb-radio__focus {
    box-shadow: 0 0 0 0.125rem var(--color-white); }
  .dnb-toggle-button--checked.dnb-toggle-button__status--error .dnb-radio__input:not([disabled]):not(:focus):not(:active):not(:hover) ~ .dnb-radio__dot {
    background-color: var(--color-white); }
  .dnb-toggle-button--checked.dnb-toggle-button__status--error .dnb-checkbox__input:not([disabled]):not(:focus):not(:active):not(:hover) ~ .dnb-checkbox__gfx path {
    stroke: var(--color-white); }
  .dnb-toggle-button > .dnb-form-status {
    transform: translateY(0.1875rem); }
"
`;

exports[`ToggleButton scss have to match snapshot 1`] = `
"/*
* DNB ToggleButton
*
*/
/**
 * This file is only used to make components independent
 * so that they can get imported individually, without the core styles
 *
 */
/*
 * Utilities
 */
/*
 * Scopes
 *
 */
/*
 * Document Reset
 *
 */
/*
* DNB FormLabel
*
*/
.dnb-form-label {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: var(--font-size-basis);
  font-style: normal;
  line-height: var(--line-height-basis);
  color: var(--color-black-80, #333);
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  font-variant-numeric: lining-nums;
  font-feature-settings: \\"lnum\\";
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-form-label *,
  .dnb-form-label ::before,
  .dnb-form-label ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-form-label ::before,
  .dnb-form-label ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
 * FormLabel component
 *
 */
.dnb-form-label {
  display: inline-block;
  width: auto;
  padding: 0;
  margin-right: 1rem;
  text-align: left;
  vertical-align: baseline;
  color: inherit; }
  .dnb-form-label--vertical {
    display: block;
    margin-right: 0;
    margin-bottom: 0.5rem; }
  .dnb-form-label[for]:not([disabled]) {
    user-select: none;
    -webkit-user-select: none;
    cursor: pointer; }
  .dnb-form-label[disabled] {
    cursor: not-allowed; }
  @media screen and (-ms-high-contrast: none) {
    .dnb-form-label {
      max-width: 60vw; } }

legend.dnb-form-label {
  display: inline-block; }

/*
* DNB Button
*
*/
/*
* DNB icon
*
*/
/*
* Icon component
*
*/
.dnb-icon {
  display: inline-block;
  vertical-align: baseline;
  font-size: inherit;
  line-height: var(--line-height-x-small--em);
  width: 1em;
  height: 1em; }
  .dnb-icon img,
  .dnb-icon svg {
    width: inherit;
    height: inherit;
    vertical-align: middle;
    shape-rendering: geometricPrecision; }
  .dnb-icon svg[width='100%'] {
    width: inherit; }
  .dnb-icon svg[height='100%'] {
    height: inherit; }
  .dnb-icon svg:not([fill]),
  .dnb-icon svg [fill] {
    fill: currentColor; }
  .dnb-icon svg [stroke] {
    stroke: currentColor; }
  .dnb-icon--small {
    width: 0.75rem;
    height: 0.75rem; }
  .dnb-icon--default {
    width: 1rem;
    height: 1rem; }
  .dnb-icon--medium {
    width: 1.5rem;
    height: 1.5rem; }
  .dnb-icon--large {
    width: 2rem;
    height: 2rem; }
  .dnb-icon--x-large {
    width: 2.5rem;
    height: 2.5rem; }
  .dnb-icon--xx-large {
    width: 3rem;
    height: 3rem; }
  .dnb-icon--custom-size {
    width: auto;
    height: auto; }
  @media screen and (-ms-high-contrast: none) {
    .dnb-icon {
      flex: none; } }

.dnb-button {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: var(--font-size-basis);
  font-style: normal;
  line-height: var(--line-height-basis);
  color: var(--color-black-80, #333);
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  font-variant-numeric: lining-nums;
  font-feature-settings: \\"lnum\\";
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-button *,
  .dnb-button ::before,
  .dnb-button ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-button ::before,
  .dnb-button ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
* Button component
*
*/
:root {
  --button-font-size: var(--font-size-basis);
  --button-font-size-small: var(--font-size-small);
  --button-width: 2.5rem;
  --button-height: 2.5rem;
  --button-width--small: 1.5rem;
  --button-height--small: 1.5rem;
  --button-width--medium: 2rem;
  --button-height--medium: 2rem;
  --button-width--large: 3rem;
  --button-height--large: 3rem;
  --button-icon-size: 1rem;
  --button-border-width: 0.0625rem;
  --button-border-width--hover: 0.1875rem;
  --button-border-radius: calc(var(--button-height) / 2);
  --button-border-radius--small: calc(var(--button-height--small) / 2);
  --button-border-radius--medium: calc(var(--button-height--medium) / 2);
  --button-border-radius--large: calc(var(--button-height--large) / 2); }

.dnb-button {
  user-select: none;
  -webkit-user-select: none;
  cursor: pointer;
  white-space: nowrap;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: var(--button-width);
  height: var(--button-height);
  padding: 0;
  border: var(--button-border-width) solid transparent;
  border-radius: var(--button-border-radius);
  text-decoration: none; }
  .dnb-button,
  .dnb-core-style .dnb-button {
    font-size: var(--button-font-size);
    line-height: var(--button-height); }
  .dnb-button__icon {
    line-height: var(--line-height-x-small--em); }
    .dnb-button__icon:not(.dnb-icon) svg:not([width]):not([height]) {
      width: var(--button-icon-size);
      height: var(--button-icon-size); }
    [data-os='win'] .dnb-button__icon {
      transform: translateY(-0.0625rem); }
  .dnb-button__text {
    line-height: var(--line-height-x-small--em);
    color: inherit;
    background-color: inherit; }
    [data-os='mac'] .dnb-button__text {
      transform: translateY(0.0625rem); }
  .dnb-button__bounding {
    position: absolute;
    background-color: transparent;
    width: var(--button-width);
    height: var(--button-height);
    border-radius: var(--button-border-radius);
    transform: scale(1.2); }
  .dnb-button--size-small {
    width: var(--button-width--small);
    height: var(--button-height--small);
    font-size: var(--button-font-size-small);
    line-height: var(--button-height--small);
    border-radius: var(--button-border-radius--small); }
  .dnb-button--has-text.dnb-button--size-small {
    padding-left: 1rem;
    padding-right: 1rem; }
  .dnb-button--has-text.dnb-button--icon-position-left.dnb-button--size-small {
    padding-left: 0.5rem; }
  .dnb-button--has-text.dnb-button--icon-position-right.dnb-button--size-small {
    padding-right: 0.5rem; }
  .dnb-button--size-medium {
    width: var(--button-width--medium);
    height: var(--button-height--medium);
    line-height: var(--button-height--medium);
    border-radius: var(--button-border-radius--medium); }
  .dnb-button--has-text.dnb-button--size-medium {
    padding-left: 1rem;
    padding-right: 1rem; }
  .dnb-button--has-text.dnb-button--icon-position-left.dnb-button--size-medium {
    padding-left: 0.5rem; }
  .dnb-button--has-text.dnb-button--icon-position-right.dnb-button--size-medium {
    padding-right: 0.5rem; }
  .dnb-button--size-large {
    width: var(--button-width--large);
    height: var(--button-height--large);
    line-height: var(--button-height--large);
    border-radius: var(--button-border-radius--large); }
  .dnb-button--has-text.dnb-button--size-large {
    padding-left: 2rem;
    padding-right: 2rem; }
  .dnb-button--has-text.dnb-button--icon-position-left.dnb-button--size-large {
    padding-left: 1rem; }
  .dnb-button--has-text.dnb-button--icon-position-right.dnb-button--size-large {
    padding-right: 1rem; }
  .dnb-button--has-text {
    padding-left: 1.5rem;
    padding-right: 1.5rem;
    width: auto; }
  .dnb-button--has-text .dnb-button__icon {
    margin: 0 calc(var(--button-icon-size) / 2); }
  .dnb-button--has-text.dnb-button--icon-position-left {
    padding-left: 0.5rem; }
  .dnb-button--has-text.dnb-button--icon-position-right {
    padding-right: 0.5rem; }
  .dnb-button--has-text.dnb-button--has-icon .dnb-button__icon {
    order: 2; }
  .dnb-button--has-text.dnb-button--has-icon .dnb-button__text {
    order: 1; }
  .dnb-button--has-text.dnb-button--has-icon.dnb-button--icon-position-left .dnb-button__icon {
    order: 1; }
  .dnb-button--has-text.dnb-button--has-icon.dnb-button--icon-position-left .dnb-button__text {
    order: 2; }
  .dnb-button--reset {
    margin: 0;
    padding: 0;
    width: auto;
    height: auto;
    overflow: visible;
    border: none;
    border-radius: 0;
    background-color: transparent;
    appearance: none;
    box-shadow: none;
    color: inherit;
    font: inherit;
    text-align: inherit;
    line-height: inherit; }
    html:not([data-is-touch]) .dnb-button--reset:hover[disabled] {
      cursor: not-allowed; }
    html:not([data-is-touch]) .dnb-button--reset:hover:not([disabled]) {
      box-shadow: none;
      border: none; }
    .dnb-button--reset:not([disabled]):focus, .dnb-button--reset:not([disabled]):active {
      outline: none; }
      html[data-whatinput='keyboard'] .dnb-button--reset:not([disabled]):focus, html[data-whatinput='keyboard'] .dnb-button--reset:not([disabled]):active {
        box-shadow: 0 0 0 0.125rem var(--color-emerald-green);
        /* IE11 fix */
        border-color: transparent; }
    html[data-whatinput='mouse'] .dnb-button--reset:not([disabled]):focus,
    html[data-whatinput='mouse'] .dnb-button--reset:not([disabled]):active {
      box-shadow: none;
      color: inherit;
      border: none; }
  .dnb-button[disabled] {
    cursor: not-allowed; }
  .dnb-form-row--vertical .dnb-form-row__content > .dnb-button {
    align-self: flex-start; }
  @media screen and (-ms-high-contrast: none) {
    .dnb-button {
      flex: none; }
      .dnb-button__icon, .dnb-button__text {
        transform: translateY(-0.0625rem) !important; } }

/* Firefox includes a hidden border which messes up button dimensions */
button.dnb-button::-moz-focus-inner {
  border: none; }

a.dnb-button[type='button'] {
  appearance: none;
  -moz-appearance: none;
  -webkit-appearance: none; }

a.dnb-button .dnb-button__icon {
  transform: translateY(0); }

a.dnb-button .dnb-button__text {
  transform: translateY(0.0625rem); }

/*
* DNB Checkbox
*
*/
/*
* DNB FormStatus
*
*/
.dnb-form-status {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: var(--font-size-basis);
  font-style: normal;
  line-height: var(--line-height-basis);
  color: var(--color-black-80, #333);
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  font-variant-numeric: lining-nums;
  font-feature-settings: \\"lnum\\";
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-form-status *,
  .dnb-form-status ::before,
  .dnb-form-status ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-form-status ::before,
  .dnb-form-status ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
 * FormStatus component
 *
 */
.dnb-form-status {
  display: flex; }
  .dnb-form-status__shell {
    display: flex;
    justify-content: flex-start;
    align-items: flex-start;
    border-radius: var(--input-border-radius); }
  .dnb-form-status--text {
    padding: calc(0.5rem / 2) 1rem;
    cursor: text;
    color: inherit;
    line-height: var(--line-height-basis); }
    [data-os='mac'] .dnb-form-status--text {
      transform: translateY(0.0625rem); }
  .dnb-icon + .dnb-form-status--text {
    padding-left: 0.5rem; }
  .dnb-form-status__shell > .dnb-icon {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 1.5em;
    height: 1.5em;
    margin-top: 0.25em;
    margin-left: 0.5em;
    color: inherit;
    font-size: var(--font-size-basis);
    border-radius: 50%;
    border: 0.0625rem solid;
    border-color: currentColor; }
  .dnb-form-status[hidden] {
    display: none; }
  .dnb-form-status--fade-in {
    overflow: hidden;
    max-height: 0;
    animation: form-status-fade-in 2s ease-out 400ms forwards; }

@keyframes form-status-fade-in {
  from {
    max-height: 0; }
  to {
    max-height: calc(var(--input-height) * 8); } }
  @media screen and (-ms-high-contrast: none) {
    .dnb-form-status__shell > .dnb-icon {
      border-width: 1px; } }

.dnb-checkbox {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: var(--font-size-basis);
  font-style: normal;
  line-height: var(--line-height-basis);
  color: var(--color-black-80, #333);
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  font-variant-numeric: lining-nums;
  font-feature-settings: \\"lnum\\";
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-checkbox *,
  .dnb-checkbox ::before,
  .dnb-checkbox ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-checkbox ::before,
  .dnb-checkbox ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
* Checkbox component
*
*/
:root {
  --checkbox-height: 1.5rem;
  --checkbox-width: 1.5rem;
  --checkbox-border-width: 0.125rem; }

.dnb-checkbox {
  display: inline-flex;
  flex-direction: column; }
  .dnb-checkbox__inner {
    display: inline-flex;
    flex-direction: column; }
  .dnb-checkbox__helper {
    clip: rect(0, 0, 0, 0);
    width: 0;
    overflow: hidden;
    opacity: 0; }
  .dnb-checkbox__shell {
    user-select: none;
    -webkit-user-select: none;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: var(--checkbox-height);
    height: var(--checkbox-height); }
    [data-os='mac'] .dnb-checkbox__shell {
      transform: translateY(-0.0625rem); }
  .dnb-checkbox__focus, .dnb-checkbox__button {
    position: relative;
    z-index: 4;
    width: calc(var(--checkbox-width) - 0.25rem);
    height: calc(var(--checkbox-height) - 0.25rem);
    border-radius: 0.25rem; }
  .dnb-checkbox__button {
    border: var(--checkbox-border-width) solid transparent; }
  .dnb-checkbox__focus {
    display: none;
    outline: none; }
    html[data-whatinput='keyboard'] .dnb-checkbox__focus {
      box-shadow: 0 0 0 0.125rem var(--color-emerald-green);
      /* IE11 fix */
      border-color: transparent; }
  .dnb-checkbox__gfx {
    position: absolute;
    z-index: 5;
    top: auto;
    left: auto;
    width: var(--checkbox-height);
    height: var(--checkbox-height);
    fill: currentColor;
    shape-rendering: geometricPrecision; }
  .dnb-checkbox__input {
    opacity: 0;
    position: absolute;
    top: auto;
    left: auto;
    z-index: 6;
    width: var(--checkbox-width);
    height: var(--checkbox-height);
    margin: 0;
    padding: 0;
    border: 0; }
  .dnb-checkbox__input:not([disabled]) {
    cursor: pointer; }
  .dnb-checkbox .dnb-form-label {
    margin-bottom: 0; }
  .dnb-checkbox__order {
    display: inline-flex;
    align-items: baseline; }
  .dnb-checkbox--label-position-left .dnb-checkbox__order .dnb-checkbox__inner {
    order: 2; }
  .dnb-checkbox--label-position-left .dnb-checkbox__order .dnb-form-label {
    order: 1;
    margin-right: 0.5rem;
    margin-left: 0; }
  .dnb-checkbox--label-position-left .dnb-checkbox__order .dnb-form-status {
    order: 3;
    margin-top: 0.5rem; }
  .dnb-checkbox--label-position-right .dnb-checkbox__order .dnb-checkbox__inner {
    order: 1; }
  .dnb-checkbox--label-position-right .dnb-checkbox__order .dnb-form-label {
    order: 2;
    margin-right: 0;
    margin-left: 0.5rem; }
  .dnb-checkbox--label-position-right .dnb-checkbox__order + .dnb-form-status {
    order: 3;
    vertical-align: top;
    margin-top: 0.5rem; }
  @media screen and (-ms-high-contrast: none) {
    .dnb-checkbox {
      vertical-align: text-bottom; }
      .dnb-checkbox__order {
        align-items: flex-start; }
      .dnb-checkbox__gfx, .dnb-checkbox__input {
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        margin: auto; }
      .dnb-checkbox__shell {
        transform: translateY(0); } }

/*
* DNB Radio
*
*/
.dnb-radio {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: var(--font-size-basis);
  font-style: normal;
  line-height: var(--line-height-basis);
  color: var(--color-black-80, #333);
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  font-variant-numeric: lining-nums;
  font-feature-settings: \\"lnum\\";
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-radio *,
  .dnb-radio ::before,
  .dnb-radio ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-radio ::before,
  .dnb-radio ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
* Radio component
*
*/
:root {
  --radio-height: 1.5rem;
  --radio-width: 1.5rem;
  --radio-border-width: 0.125rem;
  --radio-margin-right: 1rem;
  --radio-margin-bottom: 0.5rem; }

.dnb-radio {
  display: inline-flex;
  flex-direction: column; }
  .dnb-radio__inner {
    display: inline-flex;
    flex-direction: column; }
  .dnb-radio__helper {
    clip: rect(0, 0, 0, 0);
    width: 0;
    overflow: hidden;
    opacity: 0; }
  .dnb-radio__shell {
    position: relative;
    user-select: none;
    -webkit-user-select: none;
    display: flex;
    align-items: center;
    justify-content: center;
    width: var(--radio-height);
    height: var(--radio-height); }
    [data-os='mac'] .dnb-radio__shell {
      transform: translateY(-0.0625rem); }
  .dnb-radio__focus, .dnb-radio__button, .dnb-radio__dot {
    position: absolute;
    z-index: 4; }
  .dnb-radio__button {
    border: var(--radio-border-width) solid transparent; }
  .dnb-radio__focus {
    display: none;
    outline: none; }
    html[data-whatinput='keyboard'] .dnb-radio__focus {
      box-shadow: 0 0 0 0.125rem var(--color-emerald-green);
      /* IE11 fix */
      border-color: transparent; }
  .dnb-radio__focus, .dnb-radio__button {
    width: calc(var(--radio-width) - 0.25rem);
    height: calc(var(--radio-height) - 0.25rem);
    border-radius: 50%; }
  .dnb-radio__dot {
    width: calc(var(--radio-width) - 0.75rem);
    height: calc(var(--radio-height) - 0.75rem);
    border-radius: 50%; }
  .dnb-radio__input {
    opacity: 0;
    position: absolute;
    top: auto;
    left: auto;
    z-index: 5;
    width: var(--radio-width);
    height: var(--radio-height);
    margin: 0;
    padding: 0;
    border: 0; }
  .dnb-radio__input:not([disabled]) {
    cursor: pointer; }
  .dnb-radio .dnb-form-label {
    margin-bottom: 0; }
  .dnb-radio__order {
    display: inline-flex;
    align-items: baseline; }
    .dnb-radio-group--column .dnb-radio__order {
      display: flex; }
  .dnb-radio--label-position-left .dnb-radio__order .dnb-radio__inner {
    order: 2; }
  .dnb-radio--label-position-left .dnb-radio__order .dnb-form-label {
    order: 1;
    margin-right: 0.5rem;
    margin-left: 0; }
  .dnb-radio--label-position-right .dnb-radio__order .dnb-radio__inner {
    order: 1; }
  .dnb-radio--label-position-right .dnb-radio__order .dnb-form-label {
    order: 2;
    margin-right: 0;
    margin-left: 0.5rem; }
  :not(.dnb-radio-group) > .dnb-form-label + .dnb-radio {
    vertical-align: top; }
  .dnb-radio .dnb-form-status {
    order: 2;
    margin-top: 0;
    margin-bottom: 0.5rem; }
  .dnb-radio + .dnb-form-status {
    margin-top: 0.5rem;
    margin-bottom: 1rem; }
  .dnb-radio-group {
    display: inline-flex;
    flex-direction: row; }
    .dnb-radio-group .dnb-radio {
      margin-right: var(--radio-margin-right);
      margin-bottom: var(--radio-margin-bottom); }
    .dnb-radio-group--column .dnb-radio {
      display: flex;
      margin-right: 0; }
    .dnb-radio-group .dnb-radio:last-of-type {
      margin-right: 0; }
    .dnb-radio-group [role='radiogroup'], .dnb-radio-group__shell {
      display: block; }
    .dnb-radio-group__shell > .dnb-form-status {
      margin-top: 0;
      margin-bottom: 0; }
    .dnb-radio-group--column .dnb-radio-group__shell {
      flex-direction: column; }
    .dnb-radio-group .dnb-form-row {
      margin-bottom: calc(1px - 1px - var(--radio-margin-bottom)); }
    .dnb-form-row--vertical .dnb-radio-group {
      display: flex; }
  @media screen and (-ms-high-contrast: none) {
    .dnb-radio {
      vertical-align: text-bottom; }
      .dnb-radio__input, .dnb-radio__focus, .dnb-radio__button, .dnb-radio__dot {
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        margin: auto; }
      .dnb-radio__order {
        align-items: center; }
      .dnb-radio__shell {
        transform: translateY(0); }
      .dnb-radio, .dnb-radio-group {
        flex: none; }
      .dnb-radio-group {
        vertical-align: middle; } }

.dnb-toggle-button {
  font-family: var(--font-family-default);
  font-weight: var(--font-weight-default);
  font-size: var(--font-size-basis);
  font-style: normal;
  line-height: var(--line-height-basis);
  color: var(--color-black-80, #333);
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  font-variant-numeric: lining-nums;
  font-feature-settings: \\"lnum\\";
  /**
  * 1. Remove repeating backgrounds in all browsers (opinionated).
  * 2. Add border box sizing in all browsers (opinionated).
  */
  /**
  * 1. Add text decoration inheritance in all browsers (opinionated).
  * 2. Add vertical alignment inheritance in all browsers (opinionated).
  */
  margin: 0;
  padding: 0; }
  .dnb-toggle-button *,
  .dnb-toggle-button ::before,
  .dnb-toggle-button ::after {
    background-repeat: no-repeat;
    /* 1 */
    box-sizing: border-box;
    /* 2 */ }
  .dnb-toggle-button ::before,
  .dnb-toggle-button ::after {
    text-decoration: inherit;
    /* 1 */
    vertical-align: inherit;
    /* 2 */ }

/*
* ToggleButton component
*
*/
:root {
  --toggle-button-margin-right: 1rem;
  --toggle-button-margin-bottom: 1rem; }

.dnb-toggle-button {
  display: inline-flex;
  align-items: baseline; }
  .dnb-toggle-button__inner {
    display: inline-flex;
    flex-direction: column; }
  .dnb-toggle-button__shell {
    position: relative;
    left: 0;
    user-select: none;
    -webkit-user-select: none; }
  .dnb-toggle-button--vertical {
    flex-direction: column;
    align-items: flex-start; }
  .dnb-toggle-button__component {
    padding-right: 0.25rem;
    display: inline-flex;
    align-items: center; }
  .dnb-toggle-button__button {
    padding-left: 1.5rem;
    padding-right: 1.5rem; }
    .dnb-toggle-button__button .dnb-checkbox__shell,
    .dnb-toggle-button__button .dnb-radio__shell {
      transform: translateY(0); }
    .dnb-toggle-button__button .dnb-checkbox {
      margin-left: -0.75rem; }
      .dnb-toggle-button__button .dnb-checkbox__input {
        pointer-events: none; }
      .dnb-toggle-button__button .dnb-checkbox__focus, .dnb-toggle-button__button .dnb-checkbox__button {
        width: calc(var(--checkbox-width) - 0.5rem);
        height: calc(var(--checkbox-width) - 0.5rem);
        border-width: 0.0625rem;
        box-shadow: 0 0 0 0.0318rem var(--color-sea-green-alt); }
      .dnb-toggle-button__button .dnb-checkbox__dot {
        width: calc(var(--checkbox-width) - 1rem);
        height: calc(var(--checkbox-width) - 1rem); }
      .dnb-toggle-button__button .dnb-checkbox__gfx {
        width: calc(var(--checkbox-width) - 0.25rem);
        height: calc(var(--checkbox-width) - 0.25rem); }
    .dnb-toggle-button__button .dnb-radio {
      margin-left: -0.75rem; }
      .dnb-toggle-button__button .dnb-radio__input {
        pointer-events: none; }
      .dnb-toggle-button__button .dnb-radio__focus, .dnb-toggle-button__button .dnb-radio__button {
        width: calc(var(--radio-width) - 0.5rem);
        height: calc(var(--radio-width) - 0.5rem);
        border-width: 0.0625rem;
        box-shadow: 0 0 0 0.0318rem var(--color-sea-green-alt); }
      .dnb-toggle-button__button .dnb-radio__dot {
        width: calc(var(--radio-width) - 1rem);
        height: calc(var(--radio-width) - 1rem); }
  .dnb-toggle-button__button.dnb-button--has-icon.dnb-button--icon-position-right {
    padding-right: 0.5rem; }
  .dnb-toggle-button__button.dnb-button--has-icon.dnb-button--icon-position-left {
    padding-left: 0.5rem; }
    .dnb-toggle-button__button.dnb-button--has-icon.dnb-button--icon-position-left .dnb-button__icon {
      margin-left: 0.25rem;
      margin-right: 0.25rem; }
  .dnb-toggle-button__button.dnb-button--has-icon.dnb-button--icon-position-left > .dnb-toggle-button__component {
    padding-left: 0.5rem;
    padding-right: 0; }
  .dnb-toggle-button--checked .dnb-toggle-button__button:not([disabled]):not(:active) {
    background-color: var(--color-emerald-green);
    color: var(--color-mint-green); }
  :not(.dnb-toggle-button-group) > .dnb-form-label + .dnb-toggle-button {
    vertical-align: top; }
  .dnb-toggle-button .dnb-form-status {
    order: 2;
    margin-top: 0.5rem; }
  .dnb-toggle-button .dnb-form-label {
    margin-right: 1rem; }
  .dnb-toggle-button-group {
    display: inline-flex; }
    .dnb-toggle-button-group .dnb-toggle-button {
      margin-right: var(--toggle-button-margin-right);
      margin-bottom: var(--toggle-button-margin-bottom); }
    .dnb-toggle-button-group--column .dnb-toggle-button {
      display: flex;
      margin-right: 0; }
    .dnb-toggle-button-group .dnb-toggle-button:last-of-type {
      margin-right: 0; }
    .dnb-toggle-button-group__shell {
      display: block; }
      .dnb-toggle-button-group__shell > .dnb-form-status {
        transform: translateY(-0.5rem);
        margin-top: 0;
        margin-bottom: 0; }
    .dnb-toggle-button-group .dnb-form-row {
      margin-bottom: calc(1px - 1px - var(--toggle-button-margin-bottom)); }
    .dnb-form-row--vertical .dnb-toggle-button-group {
      display: flex; }
  @media (min-width: 40em) {
    .dnb-form-label + .dnb-toggle-button {
      transform: translateY(-0.5rem); } }
  @media screen and (-ms-high-contrast: none) {
    .dnb-toggle-button {
      flex: none; }
      .dnb-toggle-button:not(.dnb-toggle-button--vertical) {
        align-items: center; }
      .dnb-toggle-button__shell {
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        margin: auto; }
      .dnb-toggle-button-group {
        flex: none; }
        .dnb-toggle-button-group, .dnb-toggle-button-group__shell {
          width: 100%; }
        .dnb-form-row__indent--default .dnb-toggle-button-group {
          flex: 1; } }
"
`;
