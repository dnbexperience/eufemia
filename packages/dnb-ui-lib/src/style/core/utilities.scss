/*
 * Utilities
 */

// Mobile-first media query helper
@mixin media($bp) {
  @media screen and (min-width: #{$bp}) {
    @content;
  }
}

// Font smoothing mixin
// Only use for light text on dark background
// @mixin fontSmoothing {
//   -moz-osx-font-smoothing: grayscale;
//   -webkit-font-smoothing: antialiased;
// }

@mixin numberFeature($variant, $setting) {
  font-variant-numeric: $variant;
  font-feature-settings: '#{$setting}';
}

@mixin defaultDropShadow() {
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.16);
}

// Uses html:not([data-is-touch])
// classes on <html> element
// based on js touch device test
@mixin hover() {
  html:not([data-is-touch]) &:hover {
    &[disabled] {
      cursor: not-allowed;
    }
    &:not([disabled]) {
      @content;
    }
  }
}
@mixin active() {
  &:active,
  html:not([data-is-touch]) &:active {
    &[disabled] {
      cursor: not-allowed;
    }
    // stylelint-disable-next-line
    &:not([disabled]) {
      @content;
    }
  }
}
@mixin focus() {
  &:focus,
  html:not([data-is-touch]) &:focus {
    &[disabled] {
      cursor: not-allowed;
    }
    // stylelint-disable-next-line
    &:not([disabled]) {
      @content;
    }
  }
}

$focusRingWidth: 0.125rem; //2px
$focusRingColor: var(--color-emerald-green);
@mixin fakeFocus($whatinput: null, $color: null, $inset: null) {
  outline: none;

  @if $whatinput == null {
    $whatinput: 'keyboard';
  }
  @if $color == null {
    $color: $focusRingColor;
  }

  html[data-whatinput='#{$whatinput}'] & {
    @include fakeBorder($color, $focusRingWidth, $inset);
  }
}
@mixin removeFakeFocus($whatinput: null) {
  outline: initial;
  @if $whatinput == null {
    $whatinput: 'keyboard';
  }

  html[data-whatinput='#{$whatinput}'] & {
    box-shadow: none;
  }
}

@mixin fakeBorder(
  $color: null,
  $width: null /* 1px */,
  $inset: null,
  $is1px: false /* IE11 fix */,
  $important: null
) {
  @if $color == null {
    $color: $focusRingColor;
  }
  @if $width == null {
    $width: 0.0625rem;
  }

  // we use !important, cause we have no changes to select the selctor right
  // in some cases we have another state where we use box-shadow
  // but with important, we take care of that we actually can use use it
  box-shadow: $inset 0 0 0 $width $color $important;

  /* IE11 fix */
  @if $is1px {
    @media screen and (-ms-high-contrast: none) {
      // Since 0.0625rem gets not rendered correctly
      // and gives an artifact, we do use px instead
      box-shadow: $inset 0 0 0 1px $color $important;
    }
  }

  @if $color != null {
    border-color: transparent;
  }
}

@mixin extendFakeFocus(
  $first-color: null,
  $second-color: null,
  $width: 0.0625rem /*1px*/
) {
  $second: 0 0 0 ($focusRingWidth + $width) $second-color;
  box-shadow: 0 0 0 $width $first-color, $second;

  /* IE11 fix */
  @media screen and (-ms-high-contrast: none) {
    border: 0 solid transparent; // only to trigger the renderering correctly in IE11
  }
}

@mixin dummySpacing() {
  // we use "aria-hidden" SPAN to simulate a wider width for each tab
  & > span[hidden] {
    display: flex;
    flex-direction: column;

    height: 0;
    visibility: hidden;
    overflow: hidden;
  }
}

$breakpoints: (
  'small': 40em,
  'medium': 50em,
  'large': 60em,
  'x-large': 70em
);

//Example usage:
//@include allAbove(phone){ styles go here.. }
@mixin allAbove($size) {
  @media screen and (min-width: map-get($breakpoints, $size)) {
    @content;
  }
}
@mixin allBelow($size) {
  @media screen and (max-width: map-get($breakpoints, $size)) {
    @content;
  }
}
@mixin nudger($direction, $nudge) {
  @if $direction == 'horizontal' {
    width: #{$nudge}rem;
  }
  @if $direction == 'vertical' {
    height: #{$nudge}rem;
  }
}

// Screen reader only helper
@mixin srOnly() {
  position: absolute;

  clip: rect(0 0 0 0);
  overflow: hidden;

  height: 1px;
  width: 1px;

  margin: -1px;
  padding: 0;

  border: 0;
}

// This "negates" the srOnly() helper; useful if
// we want the default state of something to be
// for screen readers only, but we want to force
// it to show for sighted users under more specific
// conditions.
@mixin notSrOnly() {
  position: static;
}

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}
